(()=>{"use strict";var e,r,t,n,o={2872:function(e,r,t){var n=this&&this.__createBinding||(Object.create?function(e,r,t,n){void 0===n&&(n=t),Object.defineProperty(e,n,{enumerable:!0,get:function(){return r[t]}})}:function(e,r,t,n){void 0===n&&(n=t),e[n]=r[t]}),o=this&&this.__exportStar||function(e,r){for(var t in e)"default"===t||Object.prototype.hasOwnProperty.call(r,t)||n(r,e,t)};Object.defineProperty(r,"__esModule",{value:!0}),r.interval=r.iif=r.generate=r.fromEventPattern=r.fromEvent=r.from=r.forkJoin=r.empty=r.defer=r.connectable=r.concat=r.combineLatest=r.bindNodeCallback=r.bindCallback=r.UnsubscriptionError=r.TimeoutError=r.SequenceError=r.ObjectUnsubscribedError=r.NotFoundError=r.EmptyError=r.ArgumentOutOfRangeError=r.firstValueFrom=r.lastValueFrom=r.isObservable=r.identity=r.noop=r.pipe=r.NotificationKind=r.Notification=r.Subscriber=r.Subscription=r.Scheduler=r.VirtualAction=r.VirtualTimeScheduler=r.animationFrameScheduler=r.animationFrame=r.queueScheduler=r.queue=r.asyncScheduler=r.async=r.asapScheduler=r.asap=r.AsyncSubject=r.ReplaySubject=r.BehaviorSubject=r.Subject=r.animationFrames=r.observable=r.ConnectableObservable=r.Observable=void 0,r.filter=r.expand=r.exhaustMap=r.exhaustAll=r.exhaust=r.every=r.endWith=r.elementAt=r.distinctUntilKeyChanged=r.distinctUntilChanged=r.distinct=r.dematerialize=r.delayWhen=r.delay=r.defaultIfEmpty=r.debounceTime=r.debounce=r.count=r.connect=r.concatWith=r.concatMapTo=r.concatMap=r.concatAll=r.combineLatestWith=r.combineLatestAll=r.combineAll=r.catchError=r.bufferWhen=r.bufferToggle=r.bufferTime=r.bufferCount=r.buffer=r.auditTime=r.audit=r.config=r.NEVER=r.EMPTY=r.scheduled=r.zip=r.using=r.timer=r.throwError=r.range=r.race=r.partition=r.pairs=r.onErrorResumeNext=r.of=r.never=r.merge=void 0,r.switchMap=r.switchAll=r.subscribeOn=r.startWith=r.skipWhile=r.skipUntil=r.skipLast=r.skip=r.single=r.shareReplay=r.share=r.sequenceEqual=r.scan=r.sampleTime=r.sample=r.refCount=r.retryWhen=r.retry=r.repeatWhen=r.repeat=r.reduce=r.raceWith=r.publishReplay=r.publishLast=r.publishBehavior=r.publish=r.pluck=r.pairwise=r.onErrorResumeNextWith=r.observeOn=r.multicast=r.min=r.mergeWith=r.mergeScan=r.mergeMapTo=r.mergeMap=r.flatMap=r.mergeAll=r.max=r.materialize=r.mapTo=r.map=r.last=r.isEmpty=r.ignoreElements=r.groupBy=r.first=r.findIndex=r.find=r.finalize=void 0,r.zipWith=r.zipAll=r.withLatestFrom=r.windowWhen=r.windowToggle=r.windowTime=r.windowCount=r.window=r.toArray=r.timestamp=r.timeoutWith=r.timeout=r.timeInterval=r.throwIfEmpty=r.throttleTime=r.throttle=r.tap=r.takeWhile=r.takeUntil=r.takeLast=r.take=r.switchScan=r.switchMapTo=void 0;var i=t(2419);Object.defineProperty(r,"Observable",{enumerable:!0,get:function(){return i.Observable}});var u=t(9518);Object.defineProperty(r,"ConnectableObservable",{enumerable:!0,get:function(){return u.ConnectableObservable}});var a=t(2801);Object.defineProperty(r,"observable",{enumerable:!0,get:function(){return a.observable}});var c=t(9106);Object.defineProperty(r,"animationFrames",{enumerable:!0,get:function(){return c.animationFrames}});var l=t(3032);Object.defineProperty(r,"Subject",{enumerable:!0,get:function(){return l.Subject}});var s=t(5240);Object.defineProperty(r,"BehaviorSubject",{enumerable:!0,get:function(){return s.BehaviorSubject}});var f=t(3274);Object.defineProperty(r,"ReplaySubject",{enumerable:!0,get:function(){return f.ReplaySubject}});var d=t(280);Object.defineProperty(r,"AsyncSubject",{enumerable:!0,get:function(){return d.AsyncSubject}});var p=t(580);Object.defineProperty(r,"asap",{enumerable:!0,get:function(){return p.asap}}),Object.defineProperty(r,"asapScheduler",{enumerable:!0,get:function(){return p.asapScheduler}});var v=t(2445);Object.defineProperty(r,"async",{enumerable:!0,get:function(){return v.async}}),Object.defineProperty(r,"asyncScheduler",{enumerable:!0,get:function(){return v.asyncScheduler}});var b=t(8615);Object.defineProperty(r,"queue",{enumerable:!0,get:function(){return b.queue}}),Object.defineProperty(r,"queueScheduler",{enumerable:!0,get:function(){return b.queueScheduler}});var h=t(3660);Object.defineProperty(r,"animationFrame",{enumerable:!0,get:function(){return h.animationFrame}}),Object.defineProperty(r,"animationFrameScheduler",{enumerable:!0,get:function(){return h.animationFrameScheduler}});var y=t(4123);Object.defineProperty(r,"VirtualTimeScheduler",{enumerable:!0,get:function(){return y.VirtualTimeScheduler}}),Object.defineProperty(r,"VirtualAction",{enumerable:!0,get:function(){return y.VirtualAction}});var m=t(218);Object.defineProperty(r,"Scheduler",{enumerable:!0,get:function(){return m.Scheduler}});var _=t(3865);Object.defineProperty(r,"Subscription",{enumerable:!0,get:function(){return _.Subscription}});var O=t(5125);Object.defineProperty(r,"Subscriber",{enumerable:!0,get:function(){return O.Subscriber}});var g=t(3104);Object.defineProperty(r,"Notification",{enumerable:!0,get:function(){return g.Notification}}),Object.defineProperty(r,"NotificationKind",{enumerable:!0,get:function(){return g.NotificationKind}});var w=t(9985);Object.defineProperty(r,"pipe",{enumerable:!0,get:function(){return w.pipe}});var P=t(2576);Object.defineProperty(r,"noop",{enumerable:!0,get:function(){return P.noop}});var S=t(4781);Object.defineProperty(r,"identity",{enumerable:!0,get:function(){return S.identity}});var j=t(8386);Object.defineProperty(r,"isObservable",{enumerable:!0,get:function(){return j.isObservable}});var x=t(9309);Object.defineProperty(r,"lastValueFrom",{enumerable:!0,get:function(){return x.lastValueFrom}});var E=t(8182);Object.defineProperty(r,"firstValueFrom",{enumerable:!0,get:function(){return E.firstValueFrom}});var M=t(2351);Object.defineProperty(r,"ArgumentOutOfRangeError",{enumerable:!0,get:function(){return M.ArgumentOutOfRangeError}});var A=t(9474);Object.defineProperty(r,"EmptyError",{enumerable:!0,get:function(){return A.EmptyError}});var T=t(8598);Object.defineProperty(r,"NotFoundError",{enumerable:!0,get:function(){return T.NotFoundError}});var I=t(2642);Object.defineProperty(r,"ObjectUnsubscribedError",{enumerable:!0,get:function(){return I.ObjectUnsubscribedError}});var F=t(6156);Object.defineProperty(r,"SequenceError",{enumerable:!0,get:function(){return F.SequenceError}});var C=t(4173);Object.defineProperty(r,"TimeoutError",{enumerable:!0,get:function(){return C.TimeoutError}});var k=t(4805);Object.defineProperty(r,"UnsubscriptionError",{enumerable:!0,get:function(){return k.UnsubscriptionError}});var R=t(3050);Object.defineProperty(r,"bindCallback",{enumerable:!0,get:function(){return R.bindCallback}});var N=t(8130);Object.defineProperty(r,"bindNodeCallback",{enumerable:!0,get:function(){return N.bindNodeCallback}});var L=t(9258);Object.defineProperty(r,"combineLatest",{enumerable:!0,get:function(){return L.combineLatest}});var W=t(2239);Object.defineProperty(r,"concat",{enumerable:!0,get:function(){return W.concat}});var U=t(2873);Object.defineProperty(r,"connectable",{enumerable:!0,get:function(){return U.connectable}});var D=t(7885);Object.defineProperty(r,"defer",{enumerable:!0,get:function(){return D.defer}});var z=t(6332);Object.defineProperty(r,"empty",{enumerable:!0,get:function(){return z.empty}});var B=t(7245);Object.defineProperty(r,"forkJoin",{enumerable:!0,get:function(){return B.forkJoin}});var V=t(5432);Object.defineProperty(r,"from",{enumerable:!0,get:function(){return V.from}});var G=t(3267);Object.defineProperty(r,"fromEvent",{enumerable:!0,get:function(){return G.fromEvent}});var q=t(470);Object.defineProperty(r,"fromEventPattern",{enumerable:!0,get:function(){return q.fromEventPattern}});var H=t(4303);Object.defineProperty(r,"generate",{enumerable:!0,get:function(){return H.generate}});var Y=t(1757);Object.defineProperty(r,"iif",{enumerable:!0,get:function(){return Y.iif}});var X=t(8990);Object.defineProperty(r,"interval",{enumerable:!0,get:function(){return X.interval}});var $=t(1846);Object.defineProperty(r,"merge",{enumerable:!0,get:function(){return $.merge}});var K=t(1339);Object.defineProperty(r,"never",{enumerable:!0,get:function(){return K.never}});var J=t(5726);Object.defineProperty(r,"of",{enumerable:!0,get:function(){return J.of}});var Q=t(724);Object.defineProperty(r,"onErrorResumeNext",{enumerable:!0,get:function(){return Q.onErrorResumeNext}});var Z=t(4380);Object.defineProperty(r,"pairs",{enumerable:!0,get:function(){return Z.pairs}});var ee=t(7273);Object.defineProperty(r,"partition",{enumerable:!0,get:function(){return ee.partition}});var re=t(5182);Object.defineProperty(r,"race",{enumerable:!0,get:function(){return re.race}});var te=t(322);Object.defineProperty(r,"range",{enumerable:!0,get:function(){return te.range}});var ne=t(2098);Object.defineProperty(r,"throwError",{enumerable:!0,get:function(){return ne.throwError}});var oe=t(7513);Object.defineProperty(r,"timer",{enumerable:!0,get:function(){return oe.timer}});var ie=t(2962);Object.defineProperty(r,"using",{enumerable:!0,get:function(){return ie.using}});var ue=t(7654);Object.defineProperty(r,"zip",{enumerable:!0,get:function(){return ue.zip}});var ae=t(5207);Object.defineProperty(r,"scheduled",{enumerable:!0,get:function(){return ae.scheduled}});var ce=t(6332);Object.defineProperty(r,"EMPTY",{enumerable:!0,get:function(){return ce.EMPTY}});var le=t(1339);Object.defineProperty(r,"NEVER",{enumerable:!0,get:function(){return le.NEVER}}),o(t(8433),r);var se=t(3280);Object.defineProperty(r,"config",{enumerable:!0,get:function(){return se.config}});var fe=t(6474);Object.defineProperty(r,"audit",{enumerable:!0,get:function(){return fe.audit}});var de=t(5382);Object.defineProperty(r,"auditTime",{enumerable:!0,get:function(){return de.auditTime}});var pe=t(9715);Object.defineProperty(r,"buffer",{enumerable:!0,get:function(){return pe.buffer}});var ve=t(3814);Object.defineProperty(r,"bufferCount",{enumerable:!0,get:function(){return ve.bufferCount}});var be=t(7211);Object.defineProperty(r,"bufferTime",{enumerable:!0,get:function(){return be.bufferTime}});var he=t(4943);Object.defineProperty(r,"bufferToggle",{enumerable:!0,get:function(){return he.bufferToggle}});var ye=t(1240);Object.defineProperty(r,"bufferWhen",{enumerable:!0,get:function(){return ye.bufferWhen}});var me=t(9548);Object.defineProperty(r,"catchError",{enumerable:!0,get:function(){return me.catchError}});var _e=t(2128);Object.defineProperty(r,"combineAll",{enumerable:!0,get:function(){return _e.combineAll}});var Oe=t(3240);Object.defineProperty(r,"combineLatestAll",{enumerable:!0,get:function(){return Oe.combineLatestAll}});var ge=t(5024);Object.defineProperty(r,"combineLatestWith",{enumerable:!0,get:function(){return ge.combineLatestWith}});var we=t(4413);Object.defineProperty(r,"concatAll",{enumerable:!0,get:function(){return we.concatAll}});var Pe=t(7498);Object.defineProperty(r,"concatMap",{enumerable:!0,get:function(){return Pe.concatMap}});var Se=t(6109);Object.defineProperty(r,"concatMapTo",{enumerable:!0,get:function(){return Se.concatMapTo}});var je=t(9664);Object.defineProperty(r,"concatWith",{enumerable:!0,get:function(){return je.concatWith}});var xe=t(1995);Object.defineProperty(r,"connect",{enumerable:!0,get:function(){return xe.connect}});var Ee=t(993);Object.defineProperty(r,"count",{enumerable:!0,get:function(){return Ee.count}});var Me=t(496);Object.defineProperty(r,"debounce",{enumerable:!0,get:function(){return Me.debounce}});var Ae=t(1385);Object.defineProperty(r,"debounceTime",{enumerable:!0,get:function(){return Ae.debounceTime}});var Te=t(1658);Object.defineProperty(r,"defaultIfEmpty",{enumerable:!0,get:function(){return Te.defaultIfEmpty}});var Ie=t(5841);Object.defineProperty(r,"delay",{enumerable:!0,get:function(){return Ie.delay}});var Fe=t(8798);Object.defineProperty(r,"delayWhen",{enumerable:!0,get:function(){return Fe.delayWhen}});var Ce=t(1080);Object.defineProperty(r,"dematerialize",{enumerable:!0,get:function(){return Ce.dematerialize}});var ke=t(3054);Object.defineProperty(r,"distinct",{enumerable:!0,get:function(){return ke.distinct}});var Re=t(8737);Object.defineProperty(r,"distinctUntilChanged",{enumerable:!0,get:function(){return Re.distinctUntilChanged}});var Ne=t(7957);Object.defineProperty(r,"distinctUntilKeyChanged",{enumerable:!0,get:function(){return Ne.distinctUntilKeyChanged}});var Le=t(8633);Object.defineProperty(r,"elementAt",{enumerable:!0,get:function(){return Le.elementAt}});var We=t(911);Object.defineProperty(r,"endWith",{enumerable:!0,get:function(){return We.endWith}});var Ue=t(2096);Object.defineProperty(r,"every",{enumerable:!0,get:function(){return Ue.every}});var De=t(67);Object.defineProperty(r,"exhaust",{enumerable:!0,get:function(){return De.exhaust}});var ze=t(5337);Object.defineProperty(r,"exhaustAll",{enumerable:!0,get:function(){return ze.exhaustAll}});var Be=t(5635);Object.defineProperty(r,"exhaustMap",{enumerable:!0,get:function(){return Be.exhaustMap}});var Ve=t(9745);Object.defineProperty(r,"expand",{enumerable:!0,get:function(){return Ve.expand}});var Ge=t(9154);Object.defineProperty(r,"filter",{enumerable:!0,get:function(){return Ge.filter}});var qe=t(9283);Object.defineProperty(r,"finalize",{enumerable:!0,get:function(){return qe.finalize}});var He=t(7119);Object.defineProperty(r,"find",{enumerable:!0,get:function(){return He.find}});var Ye=t(4706);Object.defineProperty(r,"findIndex",{enumerable:!0,get:function(){return Ye.findIndex}});var Xe=t(9219);Object.defineProperty(r,"first",{enumerable:!0,get:function(){return Xe.first}});var $e=t(9749);Object.defineProperty(r,"groupBy",{enumerable:!0,get:function(){return $e.groupBy}});var Ke=t(9438);Object.defineProperty(r,"ignoreElements",{enumerable:!0,get:function(){return Ke.ignoreElements}});var Je=t(8515);Object.defineProperty(r,"isEmpty",{enumerable:!0,get:function(){return Je.isEmpty}});var Qe=t(2435);Object.defineProperty(r,"last",{enumerable:!0,get:function(){return Qe.last}});var Ze=t(7291);Object.defineProperty(r,"map",{enumerable:!0,get:function(){return Ze.map}});var er=t(8313);Object.defineProperty(r,"mapTo",{enumerable:!0,get:function(){return er.mapTo}});var rr=t(3209);Object.defineProperty(r,"materialize",{enumerable:!0,get:function(){return rr.materialize}});var tr=t(2620);Object.defineProperty(r,"max",{enumerable:!0,get:function(){return tr.max}});var nr=t(3783);Object.defineProperty(r,"mergeAll",{enumerable:!0,get:function(){return nr.mergeAll}});var or=t(1788);Object.defineProperty(r,"flatMap",{enumerable:!0,get:function(){return or.flatMap}});var ir=t(9475);Object.defineProperty(r,"mergeMap",{enumerable:!0,get:function(){return ir.mergeMap}});var ur=t(1211);Object.defineProperty(r,"mergeMapTo",{enumerable:!0,get:function(){return ur.mergeMapTo}});var ar=t(7267);Object.defineProperty(r,"mergeScan",{enumerable:!0,get:function(){return ar.mergeScan}});var cr=t(9303);Object.defineProperty(r,"mergeWith",{enumerable:!0,get:function(){return cr.mergeWith}});var lr=t(9714);Object.defineProperty(r,"min",{enumerable:!0,get:function(){return lr.min}});var sr=t(3848);Object.defineProperty(r,"multicast",{enumerable:!0,get:function(){return sr.multicast}});var fr=t(1184);Object.defineProperty(r,"observeOn",{enumerable:!0,get:function(){return fr.observeOn}});var dr=t(7582);Object.defineProperty(r,"onErrorResumeNextWith",{enumerable:!0,get:function(){return dr.onErrorResumeNextWith}});var pr=t(2731);Object.defineProperty(r,"pairwise",{enumerable:!0,get:function(){return pr.pairwise}});var vr=t(4691);Object.defineProperty(r,"pluck",{enumerable:!0,get:function(){return vr.pluck}});var br=t(4474);Object.defineProperty(r,"publish",{enumerable:!0,get:function(){return br.publish}});var hr=t(52);Object.defineProperty(r,"publishBehavior",{enumerable:!0,get:function(){return hr.publishBehavior}});var yr=t(2110);Object.defineProperty(r,"publishLast",{enumerable:!0,get:function(){return yr.publishLast}});var mr=t(9864);Object.defineProperty(r,"publishReplay",{enumerable:!0,get:function(){return mr.publishReplay}});var _r=t(179);Object.defineProperty(r,"raceWith",{enumerable:!0,get:function(){return _r.raceWith}});var Or=t(122);Object.defineProperty(r,"reduce",{enumerable:!0,get:function(){return Or.reduce}});var gr=t(5313);Object.defineProperty(r,"repeat",{enumerable:!0,get:function(){return gr.repeat}});var wr=t(4068);Object.defineProperty(r,"repeatWhen",{enumerable:!0,get:function(){return wr.repeatWhen}});var Pr=t(64);Object.defineProperty(r,"retry",{enumerable:!0,get:function(){return Pr.retry}});var Sr=t(1188);Object.defineProperty(r,"retryWhen",{enumerable:!0,get:function(){return Sr.retryWhen}});var jr=t(8739);Object.defineProperty(r,"refCount",{enumerable:!0,get:function(){return jr.refCount}});var xr=t(4193);Object.defineProperty(r,"sample",{enumerable:!0,get:function(){return xr.sample}});var Er=t(6170);Object.defineProperty(r,"sampleTime",{enumerable:!0,get:function(){return Er.sampleTime}});var Mr=t(5876);Object.defineProperty(r,"scan",{enumerable:!0,get:function(){return Mr.scan}});var Ar=t(1791);Object.defineProperty(r,"sequenceEqual",{enumerable:!0,get:function(){return Ar.sequenceEqual}});var Tr=t(5137);Object.defineProperty(r,"share",{enumerable:!0,get:function(){return Tr.share}});var Ir=t(1348);Object.defineProperty(r,"shareReplay",{enumerable:!0,get:function(){return Ir.shareReplay}});var Fr=t(8242);Object.defineProperty(r,"single",{enumerable:!0,get:function(){return Fr.single}});var Cr=t(3169);Object.defineProperty(r,"skip",{enumerable:!0,get:function(){return Cr.skip}});var kr=t(2454);Object.defineProperty(r,"skipLast",{enumerable:!0,get:function(){return kr.skipLast}});var Rr=t(6931);Object.defineProperty(r,"skipUntil",{enumerable:!0,get:function(){return Rr.skipUntil}});var Nr=t(7913);Object.defineProperty(r,"skipWhile",{enumerable:!0,get:function(){return Nr.skipWhile}});var Lr=t(9234);Object.defineProperty(r,"startWith",{enumerable:!0,get:function(){return Lr.startWith}});var Wr=t(276);Object.defineProperty(r,"subscribeOn",{enumerable:!0,get:function(){return Wr.subscribeOn}});var Ur=t(9253);Object.defineProperty(r,"switchAll",{enumerable:!0,get:function(){return Ur.switchAll}});var Dr=t(8518);Object.defineProperty(r,"switchMap",{enumerable:!0,get:function(){return Dr.switchMap}});var zr=t(1173);Object.defineProperty(r,"switchMapTo",{enumerable:!0,get:function(){return zr.switchMapTo}});var Br=t(3855);Object.defineProperty(r,"switchScan",{enumerable:!0,get:function(){return Br.switchScan}});var Vr=t(4783);Object.defineProperty(r,"take",{enumerable:!0,get:function(){return Vr.take}});var Gr=t(1980);Object.defineProperty(r,"takeLast",{enumerable:!0,get:function(){return Gr.takeLast}});var qr=t(9845);Object.defineProperty(r,"takeUntil",{enumerable:!0,get:function(){return qr.takeUntil}});var Hr=t(6060);Object.defineProperty(r,"takeWhile",{enumerable:!0,get:function(){return Hr.takeWhile}});var Yr=t(1138);Object.defineProperty(r,"tap",{enumerable:!0,get:function(){return Yr.tap}});var Xr=t(7306);Object.defineProperty(r,"throttle",{enumerable:!0,get:function(){return Xr.throttle}});var $r=t(8968);Object.defineProperty(r,"throttleTime",{enumerable:!0,get:function(){return $r.throttleTime}});var Kr=t(1779);Object.defineProperty(r,"throwIfEmpty",{enumerable:!0,get:function(){return Kr.throwIfEmpty}});var Jr=t(8005);Object.defineProperty(r,"timeInterval",{enumerable:!0,get:function(){return Jr.timeInterval}});var Qr=t(4173);Object.defineProperty(r,"timeout",{enumerable:!0,get:function(){return Qr.timeout}});var Zr=t(7223);Object.defineProperty(r,"timeoutWith",{enumerable:!0,get:function(){return Zr.timeoutWith}});var et=t(8975);Object.defineProperty(r,"timestamp",{enumerable:!0,get:function(){return et.timestamp}});var rt=t(2);Object.defineProperty(r,"toArray",{enumerable:!0,get:function(){return rt.toArray}});var tt=t(2826);Object.defineProperty(r,"window",{enumerable:!0,get:function(){return tt.window}});var nt=t(7526);Object.defineProperty(r,"windowCount",{enumerable:!0,get:function(){return nt.windowCount}});var ot=t(8294);Object.defineProperty(r,"windowTime",{enumerable:!0,get:function(){return ot.windowTime}});var it=t(1883);Object.defineProperty(r,"windowToggle",{enumerable:!0,get:function(){return it.windowToggle}});var ut=t(4309);Object.defineProperty(r,"windowWhen",{enumerable:!0,get:function(){return ut.windowWhen}});var at=t(3041);Object.defineProperty(r,"withLatestFrom",{enumerable:!0,get:function(){return at.withLatestFrom}});var ct=t(8593);Object.defineProperty(r,"zipAll",{enumerable:!0,get:function(){return ct.zipAll}});var lt=t(8096);Object.defineProperty(r,"zipWith",{enumerable:!0,get:function(){return lt.zipWith}})},280:function(e,r,t){var n,o=this&&this.__extends||(n=function(e,r){return n=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,r){e.__proto__=r}||function(e,r){for(var t in r)Object.prototype.hasOwnProperty.call(r,t)&&(e[t]=r[t])},n(e,r)},function(e,r){if("function"!=typeof r&&null!==r)throw new TypeError("Class extends value "+String(r)+" is not a constructor or null");function t(){this.constructor=e}n(e,r),e.prototype=null===r?Object.create(r):(t.prototype=r.prototype,new t)});Object.defineProperty(r,"__esModule",{value:!0}),r.AsyncSubject=void 0;var i=function(e){function r(){var r=null!==e&&e.apply(this,arguments)||this;return r._value=null,r._hasValue=!1,r._isComplete=!1,r}return o(r,e),r.prototype._checkFinalizedStatuses=function(e){var r=this,t=r.hasError,n=r._hasValue,o=r._value,i=r.thrownError,u=r.isStopped,a=r._isComplete;t?e.error(i):(u||a)&&(n&&e.next(o),e.complete())},r.prototype.next=function(e){this.isStopped||(this._value=e,this._hasValue=!0)},r.prototype.complete=function(){var r=this,t=r._hasValue,n=r._value;r._isComplete||(this._isComplete=!0,t&&e.prototype.next.call(this,n),e.prototype.complete.call(this))},r}(t(3032).Subject);r.AsyncSubject=i},5240:function(e,r,t){var n,o=this&&this.__extends||(n=function(e,r){return n=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,r){e.__proto__=r}||function(e,r){for(var t in r)Object.prototype.hasOwnProperty.call(r,t)&&(e[t]=r[t])},n(e,r)},function(e,r){if("function"!=typeof r&&null!==r)throw new TypeError("Class extends value "+String(r)+" is not a constructor or null");function t(){this.constructor=e}n(e,r),e.prototype=null===r?Object.create(r):(t.prototype=r.prototype,new t)});Object.defineProperty(r,"__esModule",{value:!0}),r.BehaviorSubject=void 0;var i=function(e){function r(r){var t=e.call(this)||this;return t._value=r,t}return o(r,e),Object.defineProperty(r.prototype,"value",{get:function(){return this.getValue()},enumerable:!1,configurable:!0}),r.prototype._subscribe=function(r){var t=e.prototype._subscribe.call(this,r);return!t.closed&&r.next(this._value),t},r.prototype.getValue=function(){var e=this,r=e.hasError,t=e.thrownError,n=e._value;if(r)throw t;return this._throwIfClosed(),n},r.prototype.next=function(r){e.prototype.next.call(this,this._value=r)},r}(t(3032).Subject);r.BehaviorSubject=i},3104:(e,r,t)=>{Object.defineProperty(r,"__esModule",{value:!0}),r.observeNotification=r.Notification=r.NotificationKind=void 0;var n,o=t(6332),i=t(5726),u=t(2098),a=t(3005);(n=r.NotificationKind||(r.NotificationKind={})).NEXT="N",n.ERROR="E",n.COMPLETE="C";var c=function(){function e(e,r,t){this.kind=e,this.value=r,this.error=t,this.hasValue="N"===e}return e.prototype.observe=function(e){return l(this,e)},e.prototype.do=function(e,r,t){var n=this,o=n.kind,i=n.value,u=n.error;return"N"===o?null==e?void 0:e(i):"E"===o?null==r?void 0:r(u):null==t?void 0:t()},e.prototype.accept=function(e,r,t){var n;return a.isFunction(null===(n=e)||void 0===n?void 0:n.next)?this.observe(e):this.do(e,r,t)},e.prototype.toObservable=function(){var e=this,r=e.kind,t=e.value,n=e.error,a="N"===r?i.of(t):"E"===r?u.throwError((function(){return n})):"C"===r?o.EMPTY:0;if(!a)throw new TypeError("Unexpected notification kind "+r);return a},e.createNext=function(r){return new e("N",r)},e.createError=function(r){return new e("E",void 0,r)},e.createComplete=function(){return e.completeNotification},e.completeNotification=new e("C"),e}();function l(e,r){var t,n,o,i=e,u=i.kind,a=i.value,c=i.error;if("string"!=typeof u)throw new TypeError('Invalid notification, missing "kind"');"N"===u?null===(t=r.next)||void 0===t||t.call(r,a):"E"===u?null===(n=r.error)||void 0===n||n.call(r,c):null===(o=r.complete)||void 0===o||o.call(r)}r.Notification=c,r.observeNotification=l},7286:(e,r)=>{function t(e,r,t){return{kind:e,value:r,error:t}}Object.defineProperty(r,"__esModule",{value:!0}),r.createNotification=r.nextNotification=r.errorNotification=r.COMPLETE_NOTIFICATION=void 0,r.COMPLETE_NOTIFICATION=t("C",void 0,void 0),r.errorNotification=function(e){return t("E",void 0,e)},r.nextNotification=function(e){return t("N",e,void 0)},r.createNotification=t},2419:(e,r,t)=>{Object.defineProperty(r,"__esModule",{value:!0}),r.Observable=void 0;var n=t(5125),o=t(3865),i=t(2801),u=t(9985),a=t(3280),c=t(3005),l=t(6110),s=function(){function e(e){e&&(this._subscribe=e)}return e.prototype.lift=function(r){var t=new e;return t.source=this,t.operator=r,t},e.prototype.subscribe=function(e,r,t){var i,u=this,a=(i=e)&&i instanceof n.Subscriber||function(e){return e&&c.isFunction(e.next)&&c.isFunction(e.error)&&c.isFunction(e.complete)}(i)&&o.isSubscription(i)?e:new n.SafeSubscriber(e,r,t);return l.errorContext((function(){var e=u,r=e.operator,t=e.source;a.add(r?r.call(a,t):t?u._subscribe(a):u._trySubscribe(a))})),a},e.prototype._trySubscribe=function(e){try{return this._subscribe(e)}catch(r){e.error(r)}},e.prototype.forEach=function(e,r){var t=this;return new(r=f(r))((function(r,o){var i=new n.SafeSubscriber({next:function(r){try{e(r)}catch(e){o(e),i.unsubscribe()}},error:o,complete:r});t.subscribe(i)}))},e.prototype._subscribe=function(e){var r;return null===(r=this.source)||void 0===r?void 0:r.subscribe(e)},e.prototype[i.observable]=function(){return this},e.prototype.pipe=function(){for(var e=[],r=0;r<arguments.length;r++)e[r]=arguments[r];return u.pipeFromArray(e)(this)},e.prototype.toPromise=function(e){var r=this;return new(e=f(e))((function(e,t){var n;r.subscribe((function(e){return n=e}),(function(e){return t(e)}),(function(){return e(n)}))}))},e.create=function(r){return new e(r)},e}();function f(e){var r;return null!==(r=null!=e?e:a.config.Promise)&&void 0!==r?r:Promise}r.Observable=s},3274:function(e,r,t){var n,o=this&&this.__extends||(n=function(e,r){return n=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,r){e.__proto__=r}||function(e,r){for(var t in r)Object.prototype.hasOwnProperty.call(r,t)&&(e[t]=r[t])},n(e,r)},function(e,r){if("function"!=typeof r&&null!==r)throw new TypeError("Class extends value "+String(r)+" is not a constructor or null");function t(){this.constructor=e}n(e,r),e.prototype=null===r?Object.create(r):(t.prototype=r.prototype,new t)});Object.defineProperty(r,"__esModule",{value:!0}),r.ReplaySubject=void 0;var i=t(3032),u=t(7950),a=function(e){function r(r,t,n){void 0===r&&(r=1/0),void 0===t&&(t=1/0),void 0===n&&(n=u.dateTimestampProvider);var o=e.call(this)||this;return o._bufferSize=r,o._windowTime=t,o._timestampProvider=n,o._buffer=[],o._infiniteTimeWindow=!0,o._infiniteTimeWindow=t===1/0,o._bufferSize=Math.max(1,r),o._windowTime=Math.max(1,t),o}return o(r,e),r.prototype.next=function(r){var t=this,n=t.isStopped,o=t._buffer,i=t._infiniteTimeWindow,u=t._timestampProvider,a=t._windowTime;n||(o.push(r),!i&&o.push(u.now()+a)),this._trimBuffer(),e.prototype.next.call(this,r)},r.prototype._subscribe=function(e){this._throwIfClosed(),this._trimBuffer();for(var r=this._innerSubscribe(e),t=this._infiniteTimeWindow,n=this._buffer.slice(),o=0;o<n.length&&!e.closed;o+=t?1:2)e.next(n[o]);return this._checkFinalizedStatuses(e),r},r.prototype._trimBuffer=function(){var e=this,r=e._bufferSize,t=e._timestampProvider,n=e._buffer,o=e._infiniteTimeWindow,i=(o?1:2)*r;if(r<1/0&&i<n.length&&n.splice(0,n.length-i),!o){for(var u=t.now(),a=0,c=1;c<n.length&&n[c]<=u;c+=2)a=c;a&&n.splice(0,a+1)}},r}(i.Subject);r.ReplaySubject=a},218:(e,r,t)=>{Object.defineProperty(r,"__esModule",{value:!0}),r.Scheduler=void 0;var n=t(7950),o=function(){function e(r,t){void 0===t&&(t=e.now),this.schedulerActionCtor=r,this.now=t}return e.prototype.schedule=function(e,r,t){return void 0===r&&(r=0),new this.schedulerActionCtor(this,e).schedule(t,r)},e.now=n.dateTimestampProvider.now,e}();r.Scheduler=o},3032:function(e,r,t){var n,o=this&&this.__extends||(n=function(e,r){return n=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,r){e.__proto__=r}||function(e,r){for(var t in r)Object.prototype.hasOwnProperty.call(r,t)&&(e[t]=r[t])},n(e,r)},function(e,r){if("function"!=typeof r&&null!==r)throw new TypeError("Class extends value "+String(r)+" is not a constructor or null");function t(){this.constructor=e}n(e,r),e.prototype=null===r?Object.create(r):(t.prototype=r.prototype,new t)}),i=this&&this.__values||function(e){var r="function"==typeof Symbol&&Symbol.iterator,t=r&&e[r],n=0;if(t)return t.call(e);if(e&&"number"==typeof e.length)return{next:function(){return e&&n>=e.length&&(e=void 0),{value:e&&e[n++],done:!e}}};throw new TypeError(r?"Object is not iterable.":"Symbol.iterator is not defined.")};Object.defineProperty(r,"__esModule",{value:!0}),r.AnonymousSubject=r.Subject=void 0;var u=t(2419),a=t(3865),c=t(2642),l=t(6967),s=t(6110),f=function(e){function r(){var r=e.call(this)||this;return r.closed=!1,r.currentObservers=null,r.observers=[],r.isStopped=!1,r.hasError=!1,r.thrownError=null,r}return o(r,e),r.prototype.lift=function(e){var r=new d(this,this);return r.operator=e,r},r.prototype._throwIfClosed=function(){if(this.closed)throw new c.ObjectUnsubscribedError},r.prototype.next=function(e){var r=this;s.errorContext((function(){var t,n;if(r._throwIfClosed(),!r.isStopped){r.currentObservers||(r.currentObservers=Array.from(r.observers));try{for(var o=i(r.currentObservers),u=o.next();!u.done;u=o.next())u.value.next(e)}catch(e){t={error:e}}finally{try{u&&!u.done&&(n=o.return)&&n.call(o)}finally{if(t)throw t.error}}}}))},r.prototype.error=function(e){var r=this;s.errorContext((function(){if(r._throwIfClosed(),!r.isStopped){r.hasError=r.isStopped=!0,r.thrownError=e;for(var t=r.observers;t.length;)t.shift().error(e)}}))},r.prototype.complete=function(){var e=this;s.errorContext((function(){if(e._throwIfClosed(),!e.isStopped){e.isStopped=!0;for(var r=e.observers;r.length;)r.shift().complete()}}))},r.prototype.unsubscribe=function(){this.isStopped=this.closed=!0,this.observers=this.currentObservers=null},Object.defineProperty(r.prototype,"observed",{get:function(){var e;return(null===(e=this.observers)||void 0===e?void 0:e.length)>0},enumerable:!1,configurable:!0}),r.prototype._trySubscribe=function(r){return this._throwIfClosed(),e.prototype._trySubscribe.call(this,r)},r.prototype._subscribe=function(e){return this._throwIfClosed(),this._checkFinalizedStatuses(e),this._innerSubscribe(e)},r.prototype._innerSubscribe=function(e){var r=this,t=this,n=t.hasError,o=t.isStopped,i=t.observers;return n||o?a.EMPTY_SUBSCRIPTION:(this.currentObservers=null,i.push(e),new a.Subscription((function(){r.currentObservers=null,l.arrRemove(i,e)})))},r.prototype._checkFinalizedStatuses=function(e){var r=this,t=r.hasError,n=r.thrownError,o=r.isStopped;t?e.error(n):o&&e.complete()},r.prototype.asObservable=function(){var e=new u.Observable;return e.source=this,e},r.create=function(e,r){return new d(e,r)},r}(u.Observable);r.Subject=f;var d=function(e){function r(r,t){var n=e.call(this)||this;return n.destination=r,n.source=t,n}return o(r,e),r.prototype.next=function(e){var r,t;null===(t=null===(r=this.destination)||void 0===r?void 0:r.next)||void 0===t||t.call(r,e)},r.prototype.error=function(e){var r,t;null===(t=null===(r=this.destination)||void 0===r?void 0:r.error)||void 0===t||t.call(r,e)},r.prototype.complete=function(){var e,r;null===(r=null===(e=this.destination)||void 0===e?void 0:e.complete)||void 0===r||r.call(e)},r.prototype._subscribe=function(e){var r,t;return null!==(t=null===(r=this.source)||void 0===r?void 0:r.subscribe(e))&&void 0!==t?t:a.EMPTY_SUBSCRIPTION},r}(f);r.AnonymousSubject=d},5125:function(e,r,t){var n,o=this&&this.__extends||(n=function(e,r){return n=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,r){e.__proto__=r}||function(e,r){for(var t in r)Object.prototype.hasOwnProperty.call(r,t)&&(e[t]=r[t])},n(e,r)},function(e,r){if("function"!=typeof r&&null!==r)throw new TypeError("Class extends value "+String(r)+" is not a constructor or null");function t(){this.constructor=e}n(e,r),e.prototype=null===r?Object.create(r):(t.prototype=r.prototype,new t)});Object.defineProperty(r,"__esModule",{value:!0}),r.EMPTY_OBSERVER=r.SafeSubscriber=r.Subscriber=void 0;var i=t(3005),u=t(3865),a=t(3280),c=t(7968),l=t(2576),s=t(7286),f=t(4590),d=t(6110),p=function(e){function t(t){var n=e.call(this)||this;return n.isStopped=!1,t?(n.destination=t,u.isSubscription(t)&&t.add(n)):n.destination=r.EMPTY_OBSERVER,n}return o(t,e),t.create=function(e,r,t){return new y(e,r,t)},t.prototype.next=function(e){this.isStopped?_(s.nextNotification(e),this):this._next(e)},t.prototype.error=function(e){this.isStopped?_(s.errorNotification(e),this):(this.isStopped=!0,this._error(e))},t.prototype.complete=function(){this.isStopped?_(s.COMPLETE_NOTIFICATION,this):(this.isStopped=!0,this._complete())},t.prototype.unsubscribe=function(){this.closed||(this.isStopped=!0,e.prototype.unsubscribe.call(this),this.destination=null)},t.prototype._next=function(e){this.destination.next(e)},t.prototype._error=function(e){try{this.destination.error(e)}finally{this.unsubscribe()}},t.prototype._complete=function(){try{this.destination.complete()}finally{this.unsubscribe()}},t}(u.Subscription);r.Subscriber=p;var v=Function.prototype.bind;function b(e,r){return v.call(e,r)}var h=function(){function e(e){this.partialObserver=e}return e.prototype.next=function(e){var r=this.partialObserver;if(r.next)try{r.next(e)}catch(e){m(e)}},e.prototype.error=function(e){var r=this.partialObserver;if(r.error)try{r.error(e)}catch(e){m(e)}else m(e)},e.prototype.complete=function(){var e=this.partialObserver;if(e.complete)try{e.complete()}catch(e){m(e)}},e}(),y=function(e){function r(r,t,n){var o,u,c=e.call(this)||this;return i.isFunction(r)||!r?o={next:null!=r?r:void 0,error:null!=t?t:void 0,complete:null!=n?n:void 0}:c&&a.config.useDeprecatedNextContext?((u=Object.create(r)).unsubscribe=function(){return c.unsubscribe()},o={next:r.next&&b(r.next,u),error:r.error&&b(r.error,u),complete:r.complete&&b(r.complete,u)}):o=r,c.destination=new h(o),c}return o(r,e),r}(p);function m(e){a.config.useDeprecatedSynchronousErrorHandling?d.captureError(e):c.reportUnhandledError(e)}function _(e,r){var t=a.config.onStoppedNotification;t&&f.timeoutProvider.setTimeout((function(){return t(e,r)}))}r.SafeSubscriber=y,r.EMPTY_OBSERVER={closed:!0,next:l.noop,error:function(e){throw e},complete:l.noop}},3865:function(e,r,t){var n=this&&this.__values||function(e){var r="function"==typeof Symbol&&Symbol.iterator,t=r&&e[r],n=0;if(t)return t.call(e);if(e&&"number"==typeof e.length)return{next:function(){return e&&n>=e.length&&(e=void 0),{value:e&&e[n++],done:!e}}};throw new TypeError(r?"Object is not iterable.":"Symbol.iterator is not defined.")},o=this&&this.__read||function(e,r){var t="function"==typeof Symbol&&e[Symbol.iterator];if(!t)return e;var n,o,i=t.call(e),u=[];try{for(;(void 0===r||r-- >0)&&!(n=i.next()).done;)u.push(n.value)}catch(e){o={error:e}}finally{try{n&&!n.done&&(t=i.return)&&t.call(i)}finally{if(o)throw o.error}}return u},i=this&&this.__spreadArray||function(e,r){for(var t=0,n=r.length,o=e.length;t<n;t++,o++)e[o]=r[t];return e};Object.defineProperty(r,"__esModule",{value:!0}),r.isSubscription=r.EMPTY_SUBSCRIPTION=r.Subscription=void 0;var u=t(3005),a=t(4805),c=t(6967),l=function(){function e(e){this.initialTeardown=e,this.closed=!1,this._parentage=null,this._finalizers=null}var r;return e.prototype.unsubscribe=function(){var e,r,t,c,l;if(!this.closed){this.closed=!0;var f=this._parentage;if(f)if(this._parentage=null,Array.isArray(f))try{for(var d=n(f),p=d.next();!p.done;p=d.next())p.value.remove(this)}catch(r){e={error:r}}finally{try{p&&!p.done&&(r=d.return)&&r.call(d)}finally{if(e)throw e.error}}else f.remove(this);var v=this.initialTeardown;if(u.isFunction(v))try{v()}catch(e){l=e instanceof a.UnsubscriptionError?e.errors:[e]}var b=this._finalizers;if(b){this._finalizers=null;try{for(var h=n(b),y=h.next();!y.done;y=h.next()){var m=y.value;try{s(m)}catch(e){l=null!=l?l:[],e instanceof a.UnsubscriptionError?l=i(i([],o(l)),o(e.errors)):l.push(e)}}}catch(e){t={error:e}}finally{try{y&&!y.done&&(c=h.return)&&c.call(h)}finally{if(t)throw t.error}}}if(l)throw new a.UnsubscriptionError(l)}},e.prototype.add=function(r){var t;if(r&&r!==this)if(this.closed)s(r);else{if(r instanceof e){if(r.closed||r._hasParent(this))return;r._addParent(this)}(this._finalizers=null!==(t=this._finalizers)&&void 0!==t?t:[]).push(r)}},e.prototype._hasParent=function(e){var r=this._parentage;return r===e||Array.isArray(r)&&r.includes(e)},e.prototype._addParent=function(e){var r=this._parentage;this._parentage=Array.isArray(r)?(r.push(e),r):r?[r,e]:e},e.prototype._removeParent=function(e){var r=this._parentage;r===e?this._parentage=null:Array.isArray(r)&&c.arrRemove(r,e)},e.prototype.remove=function(r){var t=this._finalizers;t&&c.arrRemove(t,r),r instanceof e&&r._removeParent(this)},e.EMPTY=((r=new e).closed=!0,r),e}();function s(e){u.isFunction(e)?e():e.unsubscribe()}r.Subscription=l,r.EMPTY_SUBSCRIPTION=l.EMPTY,r.isSubscription=function(e){return e instanceof l||e&&"closed"in e&&u.isFunction(e.remove)&&u.isFunction(e.add)&&u.isFunction(e.unsubscribe)}},3280:(e,r)=>{Object.defineProperty(r,"__esModule",{value:!0}),r.config=void 0,r.config={onUnhandledError:null,onStoppedNotification:null,Promise:void 0,useDeprecatedSynchronousErrorHandling:!1,useDeprecatedNextContext:!1}},8182:(e,r,t)=>{Object.defineProperty(r,"__esModule",{value:!0}),r.firstValueFrom=void 0;var n=t(9474),o=t(5125);r.firstValueFrom=function(e,r){var t="object"==typeof r;return new Promise((function(i,u){var a=new o.SafeSubscriber({next:function(e){i(e),a.unsubscribe()},error:u,complete:function(){t?i(r.defaultValue):u(new n.EmptyError)}});e.subscribe(a)}))}},9309:(e,r,t)=>{Object.defineProperty(r,"__esModule",{value:!0}),r.lastValueFrom=void 0;var n=t(9474);r.lastValueFrom=function(e,r){var t="object"==typeof r;return new Promise((function(o,i){var u,a=!1;e.subscribe({next:function(e){u=e,a=!0},error:i,complete:function(){a?o(u):t?o(r.defaultValue):i(new n.EmptyError)}})}))}},9518:function(e,r,t){var n,o=this&&this.__extends||(n=function(e,r){return n=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,r){e.__proto__=r}||function(e,r){for(var t in r)Object.prototype.hasOwnProperty.call(r,t)&&(e[t]=r[t])},n(e,r)},function(e,r){if("function"!=typeof r&&null!==r)throw new TypeError("Class extends value "+String(r)+" is not a constructor or null");function t(){this.constructor=e}n(e,r),e.prototype=null===r?Object.create(r):(t.prototype=r.prototype,new t)});Object.defineProperty(r,"__esModule",{value:!0}),r.ConnectableObservable=void 0;var i=t(2419),u=t(3865),a=t(8739),c=t(4990),l=t(4935),s=function(e){function r(r,t){var n=e.call(this)||this;return n.source=r,n.subjectFactory=t,n._subject=null,n._refCount=0,n._connection=null,l.hasLift(r)&&(n.lift=r.lift),n}return o(r,e),r.prototype._subscribe=function(e){return this.getSubject().subscribe(e)},r.prototype.getSubject=function(){var e=this._subject;return e&&!e.isStopped||(this._subject=this.subjectFactory()),this._subject},r.prototype._teardown=function(){this._refCount=0;var e=this._connection;this._subject=this._connection=null,null==e||e.unsubscribe()},r.prototype.connect=function(){var e=this,r=this._connection;if(!r){r=this._connection=new u.Subscription;var t=this.getSubject();r.add(this.source.subscribe(c.createOperatorSubscriber(t,void 0,(function(){e._teardown(),t.complete()}),(function(r){e._teardown(),t.error(r)}),(function(){return e._teardown()})))),r.closed&&(this._connection=null,r=u.Subscription.EMPTY)}return r},r.prototype.refCount=function(){return a.refCount()(this)},r}(i.Observable);r.ConnectableObservable=s},3050:(e,r,t)=>{Object.defineProperty(r,"__esModule",{value:!0}),r.bindCallback=void 0;var n=t(9592);r.bindCallback=function(e,r,t){return n.bindCallbackInternals(!1,e,r,t)}},9592:function(e,r,t){var n=this&&this.__read||function(e,r){var t="function"==typeof Symbol&&e[Symbol.iterator];if(!t)return e;var n,o,i=t.call(e),u=[];try{for(;(void 0===r||r-- >0)&&!(n=i.next()).done;)u.push(n.value)}catch(e){o={error:e}}finally{try{n&&!n.done&&(t=i.return)&&t.call(i)}finally{if(o)throw o.error}}return u},o=this&&this.__spreadArray||function(e,r){for(var t=0,n=r.length,o=e.length;t<n;t++,o++)e[o]=r[t];return e};Object.defineProperty(r,"__esModule",{value:!0}),r.bindCallbackInternals=void 0;var i=t(9016),u=t(2419),a=t(276),c=t(1914),l=t(1184),s=t(280);r.bindCallbackInternals=function e(r,t,f,d){if(f){if(!i.isScheduler(f))return function(){for(var n=[],o=0;o<arguments.length;o++)n[o]=arguments[o];return e(r,t,d).apply(this,n).pipe(c.mapOneOrManyArgs(f))};d=f}return d?function(){for(var n=[],o=0;o<arguments.length;o++)n[o]=arguments[o];return e(r,t).apply(this,n).pipe(a.subscribeOn(d),l.observeOn(d))}:function(){for(var e=this,i=[],a=0;a<arguments.length;a++)i[a]=arguments[a];var c=new s.AsyncSubject,l=!0;return new u.Observable((function(u){var a=c.subscribe(u);if(l){l=!1;var s=!1,f=!1;t.apply(e,o(o([],n(i)),[function(){for(var e=[],t=0;t<arguments.length;t++)e[t]=arguments[t];if(r){var n=e.shift();if(null!=n)return void c.error(n)}c.next(1<e.length?e:e[0]),f=!0,s&&c.complete()}])),f&&c.complete(),s=!0}return a}))}}},8130:(e,r,t)=>{Object.defineProperty(r,"__esModule",{value:!0}),r.bindNodeCallback=void 0;var n=t(9592);r.bindNodeCallback=function(e,r,t){return n.bindCallbackInternals(!0,e,r,t)}},9258:(e,r,t)=>{Object.defineProperty(r,"__esModule",{value:!0}),r.combineLatestInit=r.combineLatest=void 0;var n=t(2419),o=t(1203),i=t(5432),u=t(4781),a=t(1914),c=t(2433),l=t(641),s=t(4990),f=t(7738);function d(e,r,t){return void 0===t&&(t=u.identity),function(n){p(r,(function(){for(var o=e.length,u=new Array(o),a=o,c=o,l=function(o){p(r,(function(){var l=i.from(e[o],r),f=!1;l.subscribe(s.createOperatorSubscriber(n,(function(e){u[o]=e,f||(f=!0,c--),c||n.next(t(u.slice()))}),(function(){--a||n.complete()})))}),n)},f=0;f<o;f++)l(f)}),n)}}function p(e,r,t){e?f.executeSchedule(t,e,r):r()}r.combineLatest=function(){for(var e=[],r=0;r<arguments.length;r++)e[r]=arguments[r];var t=c.popScheduler(e),s=c.popResultSelector(e),f=o.argsArgArrayOrObject(e),p=f.args,v=f.keys;if(0===p.length)return i.from([],t);var b=new n.Observable(d(p,t,v?function(e){return l.createObject(v,e)}:u.identity));return s?b.pipe(a.mapOneOrManyArgs(s)):b},r.combineLatestInit=d},2239:(e,r,t)=>{Object.defineProperty(r,"__esModule",{value:!0}),r.concat=void 0;var n=t(4413),o=t(2433),i=t(5432);r.concat=function(){for(var e=[],r=0;r<arguments.length;r++)e[r]=arguments[r];return n.concatAll()(i.from(e,o.popScheduler(e)))}},2873:(e,r,t)=>{Object.defineProperty(r,"__esModule",{value:!0}),r.connectable=void 0;var n=t(3032),o=t(2419),i=t(7885),u={connector:function(){return new n.Subject},resetOnDisconnect:!0};r.connectable=function(e,r){void 0===r&&(r=u);var t=null,n=r.connector,a=r.resetOnDisconnect,c=void 0===a||a,l=n(),s=new o.Observable((function(e){return l.subscribe(e)}));return s.connect=function(){return t&&!t.closed||(t=i.defer((function(){return e})).subscribe(l),c&&t.add((function(){return l=n()}))),t},s}},7885:(e,r,t)=>{Object.defineProperty(r,"__esModule",{value:!0}),r.defer=void 0;var n=t(2419),o=t(7103);r.defer=function(e){return new n.Observable((function(r){o.innerFrom(e()).subscribe(r)}))}},9106:(e,r,t)=>{Object.defineProperty(r,"__esModule",{value:!0}),r.animationFrames=void 0;var n=t(2419),o=t(6813),i=t(505);function u(e){return new n.Observable((function(r){var t=e||o.performanceTimestampProvider,n=t.now(),u=0,a=function(){r.closed||(u=i.animationFrameProvider.requestAnimationFrame((function(o){u=0;var i=t.now();r.next({timestamp:e?i:o,elapsed:i-n}),a()})))};return a(),function(){u&&i.animationFrameProvider.cancelAnimationFrame(u)}}))}r.animationFrames=function(e){return e?u(e):a};var a=u()},6332:(e,r,t)=>{Object.defineProperty(r,"__esModule",{value:!0}),r.empty=r.EMPTY=void 0;var n=t(2419);r.EMPTY=new n.Observable((function(e){return e.complete()})),r.empty=function(e){return e?function(e){return new n.Observable((function(r){return e.schedule((function(){return r.complete()}))}))}(e):r.EMPTY}},7245:(e,r,t)=>{Object.defineProperty(r,"__esModule",{value:!0}),r.forkJoin=void 0;var n=t(2419),o=t(1203),i=t(7103),u=t(2433),a=t(4990),c=t(1914),l=t(641);r.forkJoin=function(){for(var e=[],r=0;r<arguments.length;r++)e[r]=arguments[r];var t=u.popResultSelector(e),s=o.argsArgArrayOrObject(e),f=s.args,d=s.keys,p=new n.Observable((function(e){var r=f.length;if(r)for(var t=new Array(r),n=r,o=r,u=function(r){var u=!1;i.innerFrom(f[r]).subscribe(a.createOperatorSubscriber(e,(function(e){u||(u=!0,o--),t[r]=e}),(function(){return n--}),void 0,(function(){n&&u||(o||e.next(d?l.createObject(d,t):t),e.complete())})))},c=0;c<r;c++)u(c);else e.complete()}));return t?p.pipe(c.mapOneOrManyArgs(t)):p}},5432:(e,r,t)=>{Object.defineProperty(r,"__esModule",{value:!0}),r.from=void 0;var n=t(5207),o=t(7103);r.from=function(e,r){return r?n.scheduled(e,r):o.innerFrom(e)}},3267:function(e,r,t){var n=this&&this.__read||function(e,r){var t="function"==typeof Symbol&&e[Symbol.iterator];if(!t)return e;var n,o,i=t.call(e),u=[];try{for(;(void 0===r||r-- >0)&&!(n=i.next()).done;)u.push(n.value)}catch(e){o={error:e}}finally{try{n&&!n.done&&(t=i.return)&&t.call(i)}finally{if(o)throw o.error}}return u};Object.defineProperty(r,"__esModule",{value:!0}),r.fromEvent=void 0;var o=t(7103),i=t(2419),u=t(9475),a=t(3909),c=t(3005),l=t(1914),s=["addListener","removeListener"],f=["addEventListener","removeEventListener"],d=["on","off"];function p(e,r){return function(t){return function(n){return e[t](r,n)}}}r.fromEvent=function e(r,t,v,b){if(c.isFunction(v)&&(b=v,v=void 0),b)return e(r,t,v).pipe(l.mapOneOrManyArgs(b));var h=n(function(e){return c.isFunction(e.addEventListener)&&c.isFunction(e.removeEventListener)}(r)?f.map((function(e){return function(n){return r[e](t,n,v)}})):function(e){return c.isFunction(e.addListener)&&c.isFunction(e.removeListener)}(r)?s.map(p(r,t)):function(e){return c.isFunction(e.on)&&c.isFunction(e.off)}(r)?d.map(p(r,t)):[],2),y=h[0],m=h[1];if(!y&&a.isArrayLike(r))return u.mergeMap((function(r){return e(r,t,v)}))(o.innerFrom(r));if(!y)throw new TypeError("Invalid event target");return new i.Observable((function(e){var r=function(){for(var r=[],t=0;t<arguments.length;t++)r[t]=arguments[t];return e.next(1<r.length?r:r[0])};return y(r),function(){return m(r)}}))}},470:(e,r,t)=>{Object.defineProperty(r,"__esModule",{value:!0}),r.fromEventPattern=void 0;var n=t(2419),o=t(3005),i=t(1914);r.fromEventPattern=function e(r,t,u){return u?e(r,t).pipe(i.mapOneOrManyArgs(u)):new n.Observable((function(e){var n=function(){for(var r=[],t=0;t<arguments.length;t++)r[t]=arguments[t];return e.next(1===r.length?r[0]:r)},i=r(n);return o.isFunction(t)?function(){return t(n,i)}:void 0}))}},851:(e,r,t)=>{Object.defineProperty(r,"__esModule",{value:!0}),r.fromSubscribable=void 0;var n=t(2419);r.fromSubscribable=function(e){return new n.Observable((function(r){return e.subscribe(r)}))}},4303:function(e,r,t){var n=this&&this.__generator||function(e,r){var t,n,o,i,u={label:0,sent:function(){if(1&o[0])throw o[1];return o[1]},trys:[],ops:[]};return i={next:a(0),throw:a(1),return:a(2)},"function"==typeof Symbol&&(i[Symbol.iterator]=function(){return this}),i;function a(i){return function(a){return function(i){if(t)throw new TypeError("Generator is already executing.");for(;u;)try{if(t=1,n&&(o=2&i[0]?n.return:i[0]?n.throw||((o=n.return)&&o.call(n),0):n.next)&&!(o=o.call(n,i[1])).done)return o;switch(n=0,o&&(i=[2&i[0],o.value]),i[0]){case 0:case 1:o=i;break;case 4:return u.label++,{value:i[1],done:!1};case 5:u.label++,n=i[1],i=[0];continue;case 7:i=u.ops.pop(),u.trys.pop();continue;default:if(!((o=(o=u.trys).length>0&&o[o.length-1])||6!==i[0]&&2!==i[0])){u=0;continue}if(3===i[0]&&(!o||i[1]>o[0]&&i[1]<o[3])){u.label=i[1];break}if(6===i[0]&&u.label<o[1]){u.label=o[1],o=i;break}if(o&&u.label<o[2]){u.label=o[2],u.ops.push(i);break}o[2]&&u.ops.pop(),u.trys.pop();continue}i=r.call(e,u)}catch(e){i=[6,e],n=0}finally{t=o=0}if(5&i[0])throw i[1];return{value:i[0]?i[1]:void 0,done:!0}}([i,a])}}};Object.defineProperty(r,"__esModule",{value:!0}),r.generate=void 0;var o=t(4781),i=t(9016),u=t(7885),a=t(1297);r.generate=function(e,r,t,c,l){var s,f,d,p;function v(){var e;return n(this,(function(n){switch(n.label){case 0:e=p,n.label=1;case 1:return r&&!r(e)?[3,4]:[4,d(e)];case 2:n.sent(),n.label=3;case 3:return e=t(e),[3,1];case 4:return[2]}}))}return 1===arguments.length?(p=(s=e).initialState,r=s.condition,t=s.iterate,f=s.resultSelector,d=void 0===f?o.identity:f,l=s.scheduler):(p=e,!c||i.isScheduler(c)?(d=o.identity,l=c):d=c),u.defer(l?function(){return a.scheduleIterable(v(),l)}:v)}},1757:(e,r,t)=>{Object.defineProperty(r,"__esModule",{value:!0}),r.iif=void 0;var n=t(7885);r.iif=function(e,r,t){return n.defer((function(){return e()?r:t}))}},7103:function(e,r,t){var n=this&&this.__awaiter||function(e,r,t,n){return new(t||(t=Promise))((function(o,i){function u(e){try{c(n.next(e))}catch(e){i(e)}}function a(e){try{c(n.throw(e))}catch(e){i(e)}}function c(e){var r;e.done?o(e.value):(r=e.value,r instanceof t?r:new t((function(e){e(r)}))).then(u,a)}c((n=n.apply(e,r||[])).next())}))},o=this&&this.__generator||function(e,r){var t,n,o,i,u={label:0,sent:function(){if(1&o[0])throw o[1];return o[1]},trys:[],ops:[]};return i={next:a(0),throw:a(1),return:a(2)},"function"==typeof Symbol&&(i[Symbol.iterator]=function(){return this}),i;function a(i){return function(a){return function(i){if(t)throw new TypeError("Generator is already executing.");for(;u;)try{if(t=1,n&&(o=2&i[0]?n.return:i[0]?n.throw||((o=n.return)&&o.call(n),0):n.next)&&!(o=o.call(n,i[1])).done)return o;switch(n=0,o&&(i=[2&i[0],o.value]),i[0]){case 0:case 1:o=i;break;case 4:return u.label++,{value:i[1],done:!1};case 5:u.label++,n=i[1],i=[0];continue;case 7:i=u.ops.pop(),u.trys.pop();continue;default:if(!((o=(o=u.trys).length>0&&o[o.length-1])||6!==i[0]&&2!==i[0])){u=0;continue}if(3===i[0]&&(!o||i[1]>o[0]&&i[1]<o[3])){u.label=i[1];break}if(6===i[0]&&u.label<o[1]){u.label=o[1],o=i;break}if(o&&u.label<o[2]){u.label=o[2],u.ops.push(i);break}o[2]&&u.ops.pop(),u.trys.pop();continue}i=r.call(e,u)}catch(e){i=[6,e],n=0}finally{t=o=0}if(5&i[0])throw i[1];return{value:i[0]?i[1]:void 0,done:!0}}([i,a])}}},i=this&&this.__asyncValues||function(e){if(!Symbol.asyncIterator)throw new TypeError("Symbol.asyncIterator is not defined.");var r,t=e[Symbol.asyncIterator];return t?t.call(e):(e="function"==typeof u?u(e):e[Symbol.iterator](),r={},n("next"),n("throw"),n("return"),r[Symbol.asyncIterator]=function(){return this},r);function n(t){r[t]=e[t]&&function(r){return new Promise((function(n,o){!function(e,r,t,n){Promise.resolve(n).then((function(r){e({value:r,done:t})}),r)}(n,o,(r=e[t](r)).done,r.value)}))}}},u=this&&this.__values||function(e){var r="function"==typeof Symbol&&Symbol.iterator,t=r&&e[r],n=0;if(t)return t.call(e);if(e&&"number"==typeof e.length)return{next:function(){return e&&n>=e.length&&(e=void 0),{value:e&&e[n++],done:!e}}};throw new TypeError(r?"Object is not iterable.":"Symbol.iterator is not defined.")};Object.defineProperty(r,"__esModule",{value:!0}),r.fromReadableStreamLike=r.fromAsyncIterable=r.fromIterable=r.fromPromise=r.fromArrayLike=r.fromInteropObservable=r.innerFrom=void 0;var a=t(3909),c=t(6018),l=t(2419),s=t(9500),f=t(9595),d=t(9906),p=t(2743),v=t(7823),b=t(3005),h=t(7968),y=t(2801);function m(e){return new l.Observable((function(r){var t=e[y.observable]();if(b.isFunction(t.subscribe))return t.subscribe(r);throw new TypeError("Provided object does not correctly implement Symbol.observable")}))}function _(e){return new l.Observable((function(r){for(var t=0;t<e.length&&!r.closed;t++)r.next(e[t]);r.complete()}))}function O(e){return new l.Observable((function(r){e.then((function(e){r.closed||(r.next(e),r.complete())}),(function(e){return r.error(e)})).then(null,h.reportUnhandledError)}))}function g(e){return new l.Observable((function(r){var t,n;try{for(var o=u(e),i=o.next();!i.done;i=o.next()){var a=i.value;if(r.next(a),r.closed)return}}catch(e){t={error:e}}finally{try{i&&!i.done&&(n=o.return)&&n.call(o)}finally{if(t)throw t.error}}r.complete()}))}function w(e){return new l.Observable((function(r){(function(e,r){var t,u,a,c;return n(this,void 0,void 0,(function(){var n,l;return o(this,(function(o){switch(o.label){case 0:o.trys.push([0,5,6,11]),t=i(e),o.label=1;case 1:return[4,t.next()];case 2:if((u=o.sent()).done)return[3,4];if(n=u.value,r.next(n),r.closed)return[2];o.label=3;case 3:return[3,1];case 4:return[3,11];case 5:return l=o.sent(),a={error:l},[3,11];case 6:return o.trys.push([6,,9,10]),u&&!u.done&&(c=t.return)?[4,c.call(t)]:[3,8];case 7:o.sent(),o.label=8;case 8:return[3,10];case 9:if(a)throw a.error;return[7];case 10:return[7];case 11:return r.complete(),[2]}}))}))})(e,r).catch((function(e){return r.error(e)}))}))}function P(e){return w(v.readableStreamLikeToAsyncGenerator(e))}r.innerFrom=function(e){if(e instanceof l.Observable)return e;if(null!=e){if(s.isInteropObservable(e))return m(e);if(a.isArrayLike(e))return _(e);if(c.isPromise(e))return O(e);if(f.isAsyncIterable(e))return w(e);if(p.isIterable(e))return g(e);if(v.isReadableStreamLike(e))return P(e)}throw d.createInvalidObservableTypeError(e)},r.fromInteropObservable=m,r.fromArrayLike=_,r.fromPromise=O,r.fromIterable=g,r.fromAsyncIterable=w,r.fromReadableStreamLike=P},8990:(e,r,t)=>{Object.defineProperty(r,"__esModule",{value:!0}),r.interval=void 0;var n=t(2445),o=t(7513);r.interval=function(e,r){return void 0===e&&(e=0),void 0===r&&(r=n.asyncScheduler),e<0&&(e=0),o.timer(e,e,r)}},1846:(e,r,t)=>{Object.defineProperty(r,"__esModule",{value:!0}),r.merge=void 0;var n=t(3783),o=t(7103),i=t(6332),u=t(2433),a=t(5432);r.merge=function(){for(var e=[],r=0;r<arguments.length;r++)e[r]=arguments[r];var t=u.popScheduler(e),c=u.popNumber(e,1/0),l=e;return l.length?1===l.length?o.innerFrom(l[0]):n.mergeAll(c)(a.from(l,t)):i.EMPTY}},1339:(e,r,t)=>{Object.defineProperty(r,"__esModule",{value:!0}),r.never=r.NEVER=void 0;var n=t(2419),o=t(2576);r.NEVER=new n.Observable(o.noop),r.never=function(){return r.NEVER}},5726:(e,r,t)=>{Object.defineProperty(r,"__esModule",{value:!0}),r.of=void 0;var n=t(2433),o=t(5432);r.of=function(){for(var e=[],r=0;r<arguments.length;r++)e[r]=arguments[r];var t=n.popScheduler(e);return o.from(e,t)}},724:(e,r,t)=>{Object.defineProperty(r,"__esModule",{value:!0}),r.onErrorResumeNext=void 0;var n=t(2419),o=t(5498),i=t(4990),u=t(2576),a=t(7103);r.onErrorResumeNext=function(){for(var e=[],r=0;r<arguments.length;r++)e[r]=arguments[r];var t=o.argsOrArgArray(e);return new n.Observable((function(e){var r=0,n=function(){if(r<t.length){var o=void 0;try{o=a.innerFrom(t[r++])}catch(e){return void n()}var c=new i.OperatorSubscriber(e,void 0,u.noop,u.noop);o.subscribe(c),c.add(n)}else e.complete()};n()}))}},4380:(e,r,t)=>{Object.defineProperty(r,"__esModule",{value:!0}),r.pairs=void 0;var n=t(5432);r.pairs=function(e,r){return n.from(Object.entries(e),r)}},7273:(e,r,t)=>{Object.defineProperty(r,"__esModule",{value:!0}),r.partition=void 0;var n=t(8634),o=t(9154),i=t(7103);r.partition=function(e,r,t){return[o.filter(r,t)(i.innerFrom(e)),o.filter(n.not(r,t))(i.innerFrom(e))]}},5182:(e,r,t)=>{Object.defineProperty(r,"__esModule",{value:!0}),r.raceInit=r.race=void 0;var n=t(2419),o=t(7103),i=t(5498),u=t(4990);function a(e){return function(r){for(var t=[],n=function(n){t.push(o.innerFrom(e[n]).subscribe(u.createOperatorSubscriber(r,(function(e){if(t){for(var o=0;o<t.length;o++)o!==n&&t[o].unsubscribe();t=null}r.next(e)}))))},i=0;t&&!r.closed&&i<e.length;i++)n(i)}}r.race=function(){for(var e=[],r=0;r<arguments.length;r++)e[r]=arguments[r];return 1===(e=i.argsOrArgArray(e)).length?o.innerFrom(e[0]):new n.Observable(a(e))},r.raceInit=a},322:(e,r,t)=>{Object.defineProperty(r,"__esModule",{value:!0}),r.range=void 0;var n=t(2419),o=t(6332);r.range=function(e,r,t){if(null==r&&(r=e,e=0),r<=0)return o.EMPTY;var i=r+e;return new n.Observable(t?function(r){var n=e;return t.schedule((function(){n<i?(r.next(n++),this.schedule()):r.complete()}))}:function(r){for(var t=e;t<i&&!r.closed;)r.next(t++);r.complete()})}},2098:(e,r,t)=>{Object.defineProperty(r,"__esModule",{value:!0}),r.throwError=void 0;var n=t(2419),o=t(3005);r.throwError=function(e,r){var t=o.isFunction(e)?e:function(){return e},i=function(e){return e.error(t())};return new n.Observable(r?function(e){return r.schedule(i,0,e)}:i)}},7513:(e,r,t)=>{Object.defineProperty(r,"__esModule",{value:!0}),r.timer=void 0;var n=t(2419),o=t(2445),i=t(9016),u=t(1677);r.timer=function(e,r,t){void 0===e&&(e=0),void 0===t&&(t=o.async);var a=-1;return null!=r&&(i.isScheduler(r)?t=r:a=r),new n.Observable((function(r){var n=u.isValidDate(e)?+e-t.now():e;n<0&&(n=0);var o=0;return t.schedule((function(){r.closed||(r.next(o++),0<=a?this.schedule(void 0,a):r.complete())}),n)}))}},2962:(e,r,t)=>{Object.defineProperty(r,"__esModule",{value:!0}),r.using=void 0;var n=t(2419),o=t(7103),i=t(6332);r.using=function(e,r){return new n.Observable((function(t){var n=e(),u=r(n);return(u?o.innerFrom(u):i.EMPTY).subscribe(t),function(){n&&n.unsubscribe()}}))}},7654:function(e,r,t){var n=this&&this.__read||function(e,r){var t="function"==typeof Symbol&&e[Symbol.iterator];if(!t)return e;var n,o,i=t.call(e),u=[];try{for(;(void 0===r||r-- >0)&&!(n=i.next()).done;)u.push(n.value)}catch(e){o={error:e}}finally{try{n&&!n.done&&(t=i.return)&&t.call(i)}finally{if(o)throw o.error}}return u},o=this&&this.__spreadArray||function(e,r){for(var t=0,n=r.length,o=e.length;t<n;t++,o++)e[o]=r[t];return e};Object.defineProperty(r,"__esModule",{value:!0}),r.zip=void 0;var i=t(2419),u=t(7103),a=t(5498),c=t(6332),l=t(4990),s=t(2433);r.zip=function(){for(var e=[],r=0;r<arguments.length;r++)e[r]=arguments[r];var t=s.popResultSelector(e),f=a.argsOrArgArray(e);return f.length?new i.Observable((function(e){var r=f.map((function(){return[]})),i=f.map((function(){return!1}));e.add((function(){r=i=null}));for(var a=function(a){u.innerFrom(f[a]).subscribe(l.createOperatorSubscriber(e,(function(u){if(r[a].push(u),r.every((function(e){return e.length}))){var c=r.map((function(e){return e.shift()}));e.next(t?t.apply(void 0,o([],n(c))):c),r.some((function(e,r){return!e.length&&i[r]}))&&e.complete()}}),(function(){i[a]=!0,!r[a].length&&e.complete()})))},c=0;!e.closed&&c<f.length;c++)a(c);return function(){r=i=null}})):c.EMPTY}},4990:function(e,r,t){var n,o=this&&this.__extends||(n=function(e,r){return n=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,r){e.__proto__=r}||function(e,r){for(var t in r)Object.prototype.hasOwnProperty.call(r,t)&&(e[t]=r[t])},n(e,r)},function(e,r){if("function"!=typeof r&&null!==r)throw new TypeError("Class extends value "+String(r)+" is not a constructor or null");function t(){this.constructor=e}n(e,r),e.prototype=null===r?Object.create(r):(t.prototype=r.prototype,new t)});Object.defineProperty(r,"__esModule",{value:!0}),r.OperatorSubscriber=r.createOperatorSubscriber=void 0;var i=t(5125);r.createOperatorSubscriber=function(e,r,t,n,o){return new u(e,r,t,n,o)};var u=function(e){function r(r,t,n,o,i,u){var a=e.call(this,r)||this;return a.onFinalize=i,a.shouldUnsubscribe=u,a._next=t?function(e){try{t(e)}catch(e){r.error(e)}}:e.prototype._next,a._error=o?function(e){try{o(e)}catch(e){r.error(e)}finally{this.unsubscribe()}}:e.prototype._error,a._complete=n?function(){try{n()}catch(e){r.error(e)}finally{this.unsubscribe()}}:e.prototype._complete,a}return o(r,e),r.prototype.unsubscribe=function(){var r;if(!this.shouldUnsubscribe||this.shouldUnsubscribe()){var t=this.closed;e.prototype.unsubscribe.call(this),!t&&(null===(r=this.onFinalize)||void 0===r||r.call(this))}},r}(i.Subscriber);r.OperatorSubscriber=u},6474:(e,r,t)=>{Object.defineProperty(r,"__esModule",{value:!0}),r.audit=void 0;var n=t(4935),o=t(7103),i=t(4990);r.audit=function(e){return n.operate((function(r,t){var n=!1,u=null,a=null,c=!1,l=function(){if(null==a||a.unsubscribe(),a=null,n){n=!1;var e=u;u=null,t.next(e)}c&&t.complete()},s=function(){a=null,c&&t.complete()};r.subscribe(i.createOperatorSubscriber(t,(function(r){n=!0,u=r,a||o.innerFrom(e(r)).subscribe(a=i.createOperatorSubscriber(t,l,s))}),(function(){c=!0,(!n||!a||a.closed)&&t.complete()})))}))}},5382:(e,r,t)=>{Object.defineProperty(r,"__esModule",{value:!0}),r.auditTime=void 0;var n=t(2445),o=t(6474),i=t(7513);r.auditTime=function(e,r){return void 0===r&&(r=n.asyncScheduler),o.audit((function(){return i.timer(e,r)}))}},9715:(e,r,t)=>{Object.defineProperty(r,"__esModule",{value:!0}),r.buffer=void 0;var n=t(4935),o=t(2576),i=t(4990),u=t(7103);r.buffer=function(e){return n.operate((function(r,t){var n=[];return r.subscribe(i.createOperatorSubscriber(t,(function(e){return n.push(e)}),(function(){t.next(n),t.complete()}))),u.innerFrom(e).subscribe(i.createOperatorSubscriber(t,(function(){var e=n;n=[],t.next(e)}),o.noop)),function(){n=null}}))}},3814:function(e,r,t){var n=this&&this.__values||function(e){var r="function"==typeof Symbol&&Symbol.iterator,t=r&&e[r],n=0;if(t)return t.call(e);if(e&&"number"==typeof e.length)return{next:function(){return e&&n>=e.length&&(e=void 0),{value:e&&e[n++],done:!e}}};throw new TypeError(r?"Object is not iterable.":"Symbol.iterator is not defined.")};Object.defineProperty(r,"__esModule",{value:!0}),r.bufferCount=void 0;var o=t(4935),i=t(4990),u=t(6967);r.bufferCount=function(e,r){return void 0===r&&(r=null),r=null!=r?r:e,o.operate((function(t,o){var a=[],c=0;t.subscribe(i.createOperatorSubscriber(o,(function(t){var i,l,s,f,d=null;c++%r==0&&a.push([]);try{for(var p=n(a),v=p.next();!v.done;v=p.next())(y=v.value).push(t),e<=y.length&&(d=null!=d?d:[]).push(y)}catch(e){i={error:e}}finally{try{v&&!v.done&&(l=p.return)&&l.call(p)}finally{if(i)throw i.error}}if(d)try{for(var b=n(d),h=b.next();!h.done;h=b.next()){var y=h.value;u.arrRemove(a,y),o.next(y)}}catch(e){s={error:e}}finally{try{h&&!h.done&&(f=b.return)&&f.call(b)}finally{if(s)throw s.error}}}),(function(){var e,r;try{for(var t=n(a),i=t.next();!i.done;i=t.next()){var u=i.value;o.next(u)}}catch(r){e={error:r}}finally{try{i&&!i.done&&(r=t.return)&&r.call(t)}finally{if(e)throw e.error}}o.complete()}),void 0,(function(){a=null})))}))}},7211:function(e,r,t){var n=this&&this.__values||function(e){var r="function"==typeof Symbol&&Symbol.iterator,t=r&&e[r],n=0;if(t)return t.call(e);if(e&&"number"==typeof e.length)return{next:function(){return e&&n>=e.length&&(e=void 0),{value:e&&e[n++],done:!e}}};throw new TypeError(r?"Object is not iterable.":"Symbol.iterator is not defined.")};Object.defineProperty(r,"__esModule",{value:!0}),r.bufferTime=void 0;var o=t(3865),i=t(4935),u=t(4990),a=t(6967),c=t(2445),l=t(2433),s=t(7738);r.bufferTime=function(e){for(var r,t,f=[],d=1;d<arguments.length;d++)f[d-1]=arguments[d];var p=null!==(r=l.popScheduler(f))&&void 0!==r?r:c.asyncScheduler,v=null!==(t=f[0])&&void 0!==t?t:null,b=f[1]||1/0;return i.operate((function(r,t){var i=[],c=!1,l=function(e){var r=e.buffer;e.subs.unsubscribe(),a.arrRemove(i,e),t.next(r),c&&f()},f=function(){if(i){var r=new o.Subscription;t.add(r);var n={buffer:[],subs:r};i.push(n),s.executeSchedule(r,p,(function(){return l(n)}),e)}};null!==v&&v>=0?s.executeSchedule(t,p,f,v,!0):c=!0,f();var d=u.createOperatorSubscriber(t,(function(e){var r,t,o=i.slice();try{for(var u=n(o),a=u.next();!a.done;a=u.next()){var c=a.value,s=c.buffer;s.push(e),b<=s.length&&l(c)}}catch(e){r={error:e}}finally{try{a&&!a.done&&(t=u.return)&&t.call(u)}finally{if(r)throw r.error}}}),(function(){for(;null==i?void 0:i.length;)t.next(i.shift().buffer);null==d||d.unsubscribe(),t.complete(),t.unsubscribe()}),void 0,(function(){return i=null}));r.subscribe(d)}))}},4943:function(e,r,t){var n=this&&this.__values||function(e){var r="function"==typeof Symbol&&Symbol.iterator,t=r&&e[r],n=0;if(t)return t.call(e);if(e&&"number"==typeof e.length)return{next:function(){return e&&n>=e.length&&(e=void 0),{value:e&&e[n++],done:!e}}};throw new TypeError(r?"Object is not iterable.":"Symbol.iterator is not defined.")};Object.defineProperty(r,"__esModule",{value:!0}),r.bufferToggle=void 0;var o=t(3865),i=t(4935),u=t(7103),a=t(4990),c=t(2576),l=t(6967);r.bufferToggle=function(e,r){return i.operate((function(t,i){var s=[];u.innerFrom(e).subscribe(a.createOperatorSubscriber(i,(function(e){var t=[];s.push(t);var n=new o.Subscription;n.add(u.innerFrom(r(e)).subscribe(a.createOperatorSubscriber(i,(function(){l.arrRemove(s,t),i.next(t),n.unsubscribe()}),c.noop)))}),c.noop)),t.subscribe(a.createOperatorSubscriber(i,(function(e){var r,t;try{for(var o=n(s),i=o.next();!i.done;i=o.next())i.value.push(e)}catch(e){r={error:e}}finally{try{i&&!i.done&&(t=o.return)&&t.call(o)}finally{if(r)throw r.error}}}),(function(){for(;s.length>0;)i.next(s.shift());i.complete()})))}))}},1240:(e,r,t)=>{Object.defineProperty(r,"__esModule",{value:!0}),r.bufferWhen=void 0;var n=t(4935),o=t(2576),i=t(4990),u=t(7103);r.bufferWhen=function(e){return n.operate((function(r,t){var n=null,a=null,c=function(){null==a||a.unsubscribe();var r=n;n=[],r&&t.next(r),u.innerFrom(e()).subscribe(a=i.createOperatorSubscriber(t,c,o.noop))};c(),r.subscribe(i.createOperatorSubscriber(t,(function(e){return null==n?void 0:n.push(e)}),(function(){n&&t.next(n),t.complete()}),void 0,(function(){return n=a=null})))}))}},9548:(e,r,t)=>{Object.defineProperty(r,"__esModule",{value:!0}),r.catchError=void 0;var n=t(7103),o=t(4990),i=t(4935);r.catchError=function e(r){return i.operate((function(t,i){var u,a=null,c=!1;a=t.subscribe(o.createOperatorSubscriber(i,void 0,void 0,(function(o){u=n.innerFrom(r(o,e(r)(t))),a?(a.unsubscribe(),a=null,u.subscribe(i)):c=!0}))),c&&(a.unsubscribe(),a=null,u.subscribe(i))}))}},2128:(e,r,t)=>{Object.defineProperty(r,"__esModule",{value:!0}),r.combineAll=void 0;var n=t(3240);r.combineAll=n.combineLatestAll},6318:function(e,r,t){var n=this&&this.__read||function(e,r){var t="function"==typeof Symbol&&e[Symbol.iterator];if(!t)return e;var n,o,i=t.call(e),u=[];try{for(;(void 0===r||r-- >0)&&!(n=i.next()).done;)u.push(n.value)}catch(e){o={error:e}}finally{try{n&&!n.done&&(t=i.return)&&t.call(i)}finally{if(o)throw o.error}}return u},o=this&&this.__spreadArray||function(e,r){for(var t=0,n=r.length,o=e.length;t<n;t++,o++)e[o]=r[t];return e};Object.defineProperty(r,"__esModule",{value:!0}),r.combineLatest=void 0;var i=t(9258),u=t(4935),a=t(5498),c=t(1914),l=t(9985),s=t(2433);r.combineLatest=function e(){for(var r=[],t=0;t<arguments.length;t++)r[t]=arguments[t];var f=s.popResultSelector(r);return f?l.pipe(e.apply(void 0,o([],n(r))),c.mapOneOrManyArgs(f)):u.operate((function(e,t){i.combineLatestInit(o([e],n(a.argsOrArgArray(r))))(t)}))}},3240:(e,r,t)=>{Object.defineProperty(r,"__esModule",{value:!0}),r.combineLatestAll=void 0;var n=t(9258),o=t(2069);r.combineLatestAll=function(e){return o.joinAllInternals(n.combineLatest,e)}},5024:function(e,r,t){var n=this&&this.__read||function(e,r){var t="function"==typeof Symbol&&e[Symbol.iterator];if(!t)return e;var n,o,i=t.call(e),u=[];try{for(;(void 0===r||r-- >0)&&!(n=i.next()).done;)u.push(n.value)}catch(e){o={error:e}}finally{try{n&&!n.done&&(t=i.return)&&t.call(i)}finally{if(o)throw o.error}}return u},o=this&&this.__spreadArray||function(e,r){for(var t=0,n=r.length,o=e.length;t<n;t++,o++)e[o]=r[t];return e};Object.defineProperty(r,"__esModule",{value:!0}),r.combineLatestWith=void 0;var i=t(6318);r.combineLatestWith=function(){for(var e=[],r=0;r<arguments.length;r++)e[r]=arguments[r];return i.combineLatest.apply(void 0,o([],n(e)))}},4919:function(e,r,t){var n=this&&this.__read||function(e,r){var t="function"==typeof Symbol&&e[Symbol.iterator];if(!t)return e;var n,o,i=t.call(e),u=[];try{for(;(void 0===r||r-- >0)&&!(n=i.next()).done;)u.push(n.value)}catch(e){o={error:e}}finally{try{n&&!n.done&&(t=i.return)&&t.call(i)}finally{if(o)throw o.error}}return u},o=this&&this.__spreadArray||function(e,r){for(var t=0,n=r.length,o=e.length;t<n;t++,o++)e[o]=r[t];return e};Object.defineProperty(r,"__esModule",{value:!0}),r.concat=void 0;var i=t(4935),u=t(4413),a=t(2433),c=t(5432);r.concat=function(){for(var e=[],r=0;r<arguments.length;r++)e[r]=arguments[r];var t=a.popScheduler(e);return i.operate((function(r,i){u.concatAll()(c.from(o([r],n(e)),t)).subscribe(i)}))}},4413:(e,r,t)=>{Object.defineProperty(r,"__esModule",{value:!0}),r.concatAll=void 0;var n=t(3783);r.concatAll=function(){return n.mergeAll(1)}},7498:(e,r,t)=>{Object.defineProperty(r,"__esModule",{value:!0}),r.concatMap=void 0;var n=t(9475),o=t(3005);r.concatMap=function(e,r){return o.isFunction(r)?n.mergeMap(e,r,1):n.mergeMap(e,1)}},6109:(e,r,t)=>{Object.defineProperty(r,"__esModule",{value:!0}),r.concatMapTo=void 0;var n=t(7498),o=t(3005);r.concatMapTo=function(e,r){return o.isFunction(r)?n.concatMap((function(){return e}),r):n.concatMap((function(){return e}))}},9664:function(e,r,t){var n=this&&this.__read||function(e,r){var t="function"==typeof Symbol&&e[Symbol.iterator];if(!t)return e;var n,o,i=t.call(e),u=[];try{for(;(void 0===r||r-- >0)&&!(n=i.next()).done;)u.push(n.value)}catch(e){o={error:e}}finally{try{n&&!n.done&&(t=i.return)&&t.call(i)}finally{if(o)throw o.error}}return u},o=this&&this.__spreadArray||function(e,r){for(var t=0,n=r.length,o=e.length;t<n;t++,o++)e[o]=r[t];return e};Object.defineProperty(r,"__esModule",{value:!0}),r.concatWith=void 0;var i=t(4919);r.concatWith=function(){for(var e=[],r=0;r<arguments.length;r++)e[r]=arguments[r];return i.concat.apply(void 0,o([],n(e)))}},1995:(e,r,t)=>{Object.defineProperty(r,"__esModule",{value:!0}),r.connect=void 0;var n=t(3032),o=t(7103),i=t(4935),u=t(851),a={connector:function(){return new n.Subject}};r.connect=function(e,r){void 0===r&&(r=a);var t=r.connector;return i.operate((function(r,n){var i=t();o.innerFrom(e(u.fromSubscribable(i))).subscribe(n),n.add(r.subscribe(i))}))}},993:(e,r,t)=>{Object.defineProperty(r,"__esModule",{value:!0}),r.count=void 0;var n=t(122);r.count=function(e){return n.reduce((function(r,t,n){return!e||e(t,n)?r+1:r}),0)}},496:(e,r,t)=>{Object.defineProperty(r,"__esModule",{value:!0}),r.debounce=void 0;var n=t(4935),o=t(2576),i=t(4990),u=t(7103);r.debounce=function(e){return n.operate((function(r,t){var n=!1,a=null,c=null,l=function(){if(null==c||c.unsubscribe(),c=null,n){n=!1;var e=a;a=null,t.next(e)}};r.subscribe(i.createOperatorSubscriber(t,(function(r){null==c||c.unsubscribe(),n=!0,a=r,c=i.createOperatorSubscriber(t,l,o.noop),u.innerFrom(e(r)).subscribe(c)}),(function(){l(),t.complete()}),void 0,(function(){a=c=null})))}))}},1385:(e,r,t)=>{Object.defineProperty(r,"__esModule",{value:!0}),r.debounceTime=void 0;var n=t(2445),o=t(4935),i=t(4990);r.debounceTime=function(e,r){return void 0===r&&(r=n.asyncScheduler),o.operate((function(t,n){var o=null,u=null,a=null,c=function(){if(o){o.unsubscribe(),o=null;var e=u;u=null,n.next(e)}};function l(){var t=a+e,i=r.now();if(i<t)return o=this.schedule(void 0,t-i),void n.add(o);c()}t.subscribe(i.createOperatorSubscriber(n,(function(t){u=t,a=r.now(),o||(o=r.schedule(l,e),n.add(o))}),(function(){c(),n.complete()}),void 0,(function(){u=o=null})))}))}},1658:(e,r,t)=>{Object.defineProperty(r,"__esModule",{value:!0}),r.defaultIfEmpty=void 0;var n=t(4935),o=t(4990);r.defaultIfEmpty=function(e){return n.operate((function(r,t){var n=!1;r.subscribe(o.createOperatorSubscriber(t,(function(e){n=!0,t.next(e)}),(function(){n||t.next(e),t.complete()})))}))}},5841:(e,r,t)=>{Object.defineProperty(r,"__esModule",{value:!0}),r.delay=void 0;var n=t(2445),o=t(8798),i=t(7513);r.delay=function(e,r){void 0===r&&(r=n.asyncScheduler);var t=i.timer(e,r);return o.delayWhen((function(){return t}))}},8798:(e,r,t)=>{Object.defineProperty(r,"__esModule",{value:!0}),r.delayWhen=void 0;var n=t(2239),o=t(4783),i=t(9438),u=t(8313),a=t(9475),c=t(7103);r.delayWhen=function e(r,t){return t?function(u){return n.concat(t.pipe(o.take(1),i.ignoreElements()),u.pipe(e(r)))}:a.mergeMap((function(e,t){return c.innerFrom(r(e,t)).pipe(o.take(1),u.mapTo(e))}))}},1080:(e,r,t)=>{Object.defineProperty(r,"__esModule",{value:!0}),r.dematerialize=void 0;var n=t(3104),o=t(4935),i=t(4990);r.dematerialize=function(){return o.operate((function(e,r){e.subscribe(i.createOperatorSubscriber(r,(function(e){return n.observeNotification(e,r)})))}))}},3054:(e,r,t)=>{Object.defineProperty(r,"__esModule",{value:!0}),r.distinct=void 0;var n=t(4935),o=t(4990),i=t(2576),u=t(7103);r.distinct=function(e,r){return n.operate((function(t,n){var a=new Set;t.subscribe(o.createOperatorSubscriber(n,(function(r){var t=e?e(r):r;a.has(t)||(a.add(t),n.next(r))}))),r&&u.innerFrom(r).subscribe(o.createOperatorSubscriber(n,(function(){return a.clear()}),i.noop))}))}},8737:(e,r,t)=>{Object.defineProperty(r,"__esModule",{value:!0}),r.distinctUntilChanged=void 0;var n=t(4781),o=t(4935),i=t(4990);function u(e,r){return e===r}r.distinctUntilChanged=function(e,r){return void 0===r&&(r=n.identity),e=null!=e?e:u,o.operate((function(t,n){var o,u=!0;t.subscribe(i.createOperatorSubscriber(n,(function(t){var i=r(t);!u&&e(o,i)||(u=!1,o=i,n.next(t))})))}))}},7957:(e,r,t)=>{Object.defineProperty(r,"__esModule",{value:!0}),r.distinctUntilKeyChanged=void 0;var n=t(8737);r.distinctUntilKeyChanged=function(e,r){return n.distinctUntilChanged((function(t,n){return r?r(t[e],n[e]):t[e]===n[e]}))}},8633:(e,r,t)=>{Object.defineProperty(r,"__esModule",{value:!0}),r.elementAt=void 0;var n=t(2351),o=t(9154),i=t(1779),u=t(1658),a=t(4783);r.elementAt=function(e,r){if(e<0)throw new n.ArgumentOutOfRangeError;var t=arguments.length>=2;return function(c){return c.pipe(o.filter((function(r,t){return t===e})),a.take(1),t?u.defaultIfEmpty(r):i.throwIfEmpty((function(){return new n.ArgumentOutOfRangeError})))}}},911:function(e,r,t){var n=this&&this.__read||function(e,r){var t="function"==typeof Symbol&&e[Symbol.iterator];if(!t)return e;var n,o,i=t.call(e),u=[];try{for(;(void 0===r||r-- >0)&&!(n=i.next()).done;)u.push(n.value)}catch(e){o={error:e}}finally{try{n&&!n.done&&(t=i.return)&&t.call(i)}finally{if(o)throw o.error}}return u},o=this&&this.__spreadArray||function(e,r){for(var t=0,n=r.length,o=e.length;t<n;t++,o++)e[o]=r[t];return e};Object.defineProperty(r,"__esModule",{value:!0}),r.endWith=void 0;var i=t(2239),u=t(5726);r.endWith=function(){for(var e=[],r=0;r<arguments.length;r++)e[r]=arguments[r];return function(r){return i.concat(r,u.of.apply(void 0,o([],n(e))))}}},2096:(e,r,t)=>{Object.defineProperty(r,"__esModule",{value:!0}),r.every=void 0;var n=t(4935),o=t(4990);r.every=function(e,r){return n.operate((function(t,n){var i=0;t.subscribe(o.createOperatorSubscriber(n,(function(o){e.call(r,o,i++,t)||(n.next(!1),n.complete())}),(function(){n.next(!0),n.complete()})))}))}},67:(e,r,t)=>{Object.defineProperty(r,"__esModule",{value:!0}),r.exhaust=void 0;var n=t(5337);r.exhaust=n.exhaustAll},5337:(e,r,t)=>{Object.defineProperty(r,"__esModule",{value:!0}),r.exhaustAll=void 0;var n=t(5635),o=t(4781);r.exhaustAll=function(){return n.exhaustMap(o.identity)}},5635:(e,r,t)=>{Object.defineProperty(r,"__esModule",{value:!0}),r.exhaustMap=void 0;var n=t(7291),o=t(7103),i=t(4935),u=t(4990);r.exhaustMap=function e(r,t){return t?function(i){return i.pipe(e((function(e,i){return o.innerFrom(r(e,i)).pipe(n.map((function(r,n){return t(e,r,i,n)})))})))}:i.operate((function(e,t){var n=0,i=null,a=!1;e.subscribe(u.createOperatorSubscriber(t,(function(e){i||(i=u.createOperatorSubscriber(t,void 0,(function(){i=null,a&&t.complete()})),o.innerFrom(r(e,n++)).subscribe(i))}),(function(){a=!0,!i&&t.complete()})))}))}},9745:(e,r,t)=>{Object.defineProperty(r,"__esModule",{value:!0}),r.expand=void 0;var n=t(4935),o=t(7788);r.expand=function(e,r,t){return void 0===r&&(r=1/0),r=(r||0)<1?1/0:r,n.operate((function(n,i){return o.mergeInternals(n,i,e,r,void 0,!0,t)}))}},9154:(e,r,t)=>{Object.defineProperty(r,"__esModule",{value:!0}),r.filter=void 0;var n=t(4935),o=t(4990);r.filter=function(e,r){return n.operate((function(t,n){var i=0;t.subscribe(o.createOperatorSubscriber(n,(function(t){return e.call(r,t,i++)&&n.next(t)})))}))}},9283:(e,r,t)=>{Object.defineProperty(r,"__esModule",{value:!0}),r.finalize=void 0;var n=t(4935);r.finalize=function(e){return n.operate((function(r,t){try{r.subscribe(t)}finally{t.add(e)}}))}},7119:(e,r,t)=>{Object.defineProperty(r,"__esModule",{value:!0}),r.createFind=r.find=void 0;var n=t(4935),o=t(4990);function i(e,r,t){var n="index"===t;return function(t,i){var u=0;t.subscribe(o.createOperatorSubscriber(i,(function(o){var a=u++;e.call(r,o,a,t)&&(i.next(n?a:o),i.complete())}),(function(){i.next(n?-1:void 0),i.complete()})))}}r.find=function(e,r){return n.operate(i(e,r,"value"))},r.createFind=i},4706:(e,r,t)=>{Object.defineProperty(r,"__esModule",{value:!0}),r.findIndex=void 0;var n=t(4935),o=t(7119);r.findIndex=function(e,r){return n.operate(o.createFind(e,r,"index"))}},9219:(e,r,t)=>{Object.defineProperty(r,"__esModule",{value:!0}),r.first=void 0;var n=t(9474),o=t(9154),i=t(4783),u=t(1658),a=t(1779),c=t(4781);r.first=function(e,r){var t=arguments.length>=2;return function(l){return l.pipe(e?o.filter((function(r,t){return e(r,t,l)})):c.identity,i.take(1),t?u.defaultIfEmpty(r):a.throwIfEmpty((function(){return new n.EmptyError})))}}},1788:(e,r,t)=>{Object.defineProperty(r,"__esModule",{value:!0}),r.flatMap=void 0;var n=t(9475);r.flatMap=n.mergeMap},9749:(e,r,t)=>{Object.defineProperty(r,"__esModule",{value:!0}),r.groupBy=void 0;var n=t(2419),o=t(7103),i=t(3032),u=t(4935),a=t(4990);r.groupBy=function(e,r,t,c){return u.operate((function(u,l){var s;r&&"function"!=typeof r?(t=r.duration,s=r.element,c=r.connector):s=r;var f=new Map,d=function(e){f.forEach(e),e(l)},p=function(e){return d((function(r){return r.error(e)}))},v=0,b=!1,h=new a.OperatorSubscriber(l,(function(r){try{var u=e(r),d=f.get(u);if(!d){f.set(u,d=c?c():new i.Subject);var y=(_=u,O=d,(g=new n.Observable((function(e){v++;var r=O.subscribe(e);return function(){r.unsubscribe(),0==--v&&b&&h.unsubscribe()}}))).key=_,g);if(l.next(y),t){var m=a.createOperatorSubscriber(d,(function(){d.complete(),null==m||m.unsubscribe()}),void 0,void 0,(function(){return f.delete(u)}));h.add(o.innerFrom(t(y)).subscribe(m))}}d.next(s?s(r):r)}catch(e){p(e)}var _,O,g}),(function(){return d((function(e){return e.complete()}))}),p,(function(){return f.clear()}),(function(){return b=!0,0===v}));u.subscribe(h)}))}},9438:(e,r,t)=>{Object.defineProperty(r,"__esModule",{value:!0}),r.ignoreElements=void 0;var n=t(4935),o=t(4990),i=t(2576);r.ignoreElements=function(){return n.operate((function(e,r){e.subscribe(o.createOperatorSubscriber(r,i.noop))}))}},8515:(e,r,t)=>{Object.defineProperty(r,"__esModule",{value:!0}),r.isEmpty=void 0;var n=t(4935),o=t(4990);r.isEmpty=function(){return n.operate((function(e,r){e.subscribe(o.createOperatorSubscriber(r,(function(){r.next(!1),r.complete()}),(function(){r.next(!0),r.complete()})))}))}},2069:(e,r,t)=>{Object.defineProperty(r,"__esModule",{value:!0}),r.joinAllInternals=void 0;var n=t(4781),o=t(1914),i=t(9985),u=t(9475),a=t(2);r.joinAllInternals=function(e,r){return i.pipe(a.toArray(),u.mergeMap((function(r){return e(r)})),r?o.mapOneOrManyArgs(r):n.identity)}},2435:(e,r,t)=>{Object.defineProperty(r,"__esModule",{value:!0}),r.last=void 0;var n=t(9474),o=t(9154),i=t(1980),u=t(1779),a=t(1658),c=t(4781);r.last=function(e,r){var t=arguments.length>=2;return function(l){return l.pipe(e?o.filter((function(r,t){return e(r,t,l)})):c.identity,i.takeLast(1),t?a.defaultIfEmpty(r):u.throwIfEmpty((function(){return new n.EmptyError})))}}},7291:(e,r,t)=>{Object.defineProperty(r,"__esModule",{value:!0}),r.map=void 0;var n=t(4935),o=t(4990);r.map=function(e,r){return n.operate((function(t,n){var i=0;t.subscribe(o.createOperatorSubscriber(n,(function(t){n.next(e.call(r,t,i++))})))}))}},8313:(e,r,t)=>{Object.defineProperty(r,"__esModule",{value:!0}),r.mapTo=void 0;var n=t(7291);r.mapTo=function(e){return n.map((function(){return e}))}},3209:(e,r,t)=>{Object.defineProperty(r,"__esModule",{value:!0}),r.materialize=void 0;var n=t(3104),o=t(4935),i=t(4990);r.materialize=function(){return o.operate((function(e,r){e.subscribe(i.createOperatorSubscriber(r,(function(e){r.next(n.Notification.createNext(e))}),(function(){r.next(n.Notification.createComplete()),r.complete()}),(function(e){r.next(n.Notification.createError(e)),r.complete()})))}))}},2620:(e,r,t)=>{Object.defineProperty(r,"__esModule",{value:!0}),r.max=void 0;var n=t(122),o=t(3005);r.max=function(e){return n.reduce(o.isFunction(e)?function(r,t){return e(r,t)>0?r:t}:function(e,r){return e>r?e:r})}},9821:function(e,r,t){var n=this&&this.__read||function(e,r){var t="function"==typeof Symbol&&e[Symbol.iterator];if(!t)return e;var n,o,i=t.call(e),u=[];try{for(;(void 0===r||r-- >0)&&!(n=i.next()).done;)u.push(n.value)}catch(e){o={error:e}}finally{try{n&&!n.done&&(t=i.return)&&t.call(i)}finally{if(o)throw o.error}}return u},o=this&&this.__spreadArray||function(e,r){for(var t=0,n=r.length,o=e.length;t<n;t++,o++)e[o]=r[t];return e};Object.defineProperty(r,"__esModule",{value:!0}),r.merge=void 0;var i=t(4935),u=t(5498),a=t(3783),c=t(2433),l=t(5432);r.merge=function(){for(var e=[],r=0;r<arguments.length;r++)e[r]=arguments[r];var t=c.popScheduler(e),s=c.popNumber(e,1/0);return e=u.argsOrArgArray(e),i.operate((function(r,i){a.mergeAll(s)(l.from(o([r],n(e)),t)).subscribe(i)}))}},3783:(e,r,t)=>{Object.defineProperty(r,"__esModule",{value:!0}),r.mergeAll=void 0;var n=t(9475),o=t(4781);r.mergeAll=function(e){return void 0===e&&(e=1/0),n.mergeMap(o.identity,e)}},7788:(e,r,t)=>{Object.defineProperty(r,"__esModule",{value:!0}),r.mergeInternals=void 0;var n=t(7103),o=t(7738),i=t(4990);r.mergeInternals=function(e,r,t,u,a,c,l,s){var f=[],d=0,p=0,v=!1,b=function(){!v||f.length||d||r.complete()},h=function(e){return d<u?y(e):f.push(e)},y=function(e){c&&r.next(e),d++;var s=!1;n.innerFrom(t(e,p++)).subscribe(i.createOperatorSubscriber(r,(function(e){null==a||a(e),c?h(e):r.next(e)}),(function(){s=!0}),void 0,(function(){if(s)try{d--;for(var e=function(){var e=f.shift();l?o.executeSchedule(r,l,(function(){return y(e)})):y(e)};f.length&&d<u;)e();b()}catch(e){r.error(e)}})))};return e.subscribe(i.createOperatorSubscriber(r,h,(function(){v=!0,b()}))),function(){null==s||s()}}},9475:(e,r,t)=>{Object.defineProperty(r,"__esModule",{value:!0}),r.mergeMap=void 0;var n=t(7291),o=t(7103),i=t(4935),u=t(7788),a=t(3005);r.mergeMap=function e(r,t,c){return void 0===c&&(c=1/0),a.isFunction(t)?e((function(e,i){return n.map((function(r,n){return t(e,r,i,n)}))(o.innerFrom(r(e,i)))}),c):("number"==typeof t&&(c=t),i.operate((function(e,t){return u.mergeInternals(e,t,r,c)})))}},1211:(e,r,t)=>{Object.defineProperty(r,"__esModule",{value:!0}),r.mergeMapTo=void 0;var n=t(9475),o=t(3005);r.mergeMapTo=function(e,r,t){return void 0===t&&(t=1/0),o.isFunction(r)?n.mergeMap((function(){return e}),r,t):("number"==typeof r&&(t=r),n.mergeMap((function(){return e}),t))}},7267:(e,r,t)=>{Object.defineProperty(r,"__esModule",{value:!0}),r.mergeScan=void 0;var n=t(4935),o=t(7788);r.mergeScan=function(e,r,t){return void 0===t&&(t=1/0),n.operate((function(n,i){var u=r;return o.mergeInternals(n,i,(function(r,t){return e(u,r,t)}),t,(function(e){u=e}),!1,void 0,(function(){return u=null}))}))}},9303:function(e,r,t){var n=this&&this.__read||function(e,r){var t="function"==typeof Symbol&&e[Symbol.iterator];if(!t)return e;var n,o,i=t.call(e),u=[];try{for(;(void 0===r||r-- >0)&&!(n=i.next()).done;)u.push(n.value)}catch(e){o={error:e}}finally{try{n&&!n.done&&(t=i.return)&&t.call(i)}finally{if(o)throw o.error}}return u},o=this&&this.__spreadArray||function(e,r){for(var t=0,n=r.length,o=e.length;t<n;t++,o++)e[o]=r[t];return e};Object.defineProperty(r,"__esModule",{value:!0}),r.mergeWith=void 0;var i=t(9821);r.mergeWith=function(){for(var e=[],r=0;r<arguments.length;r++)e[r]=arguments[r];return i.merge.apply(void 0,o([],n(e)))}},9714:(e,r,t)=>{Object.defineProperty(r,"__esModule",{value:!0}),r.min=void 0;var n=t(122),o=t(3005);r.min=function(e){return n.reduce(o.isFunction(e)?function(r,t){return e(r,t)<0?r:t}:function(e,r){return e<r?e:r})}},3848:(e,r,t)=>{Object.defineProperty(r,"__esModule",{value:!0}),r.multicast=void 0;var n=t(9518),o=t(3005),i=t(1995);r.multicast=function(e,r){var t=o.isFunction(e)?e:function(){return e};return o.isFunction(r)?i.connect(r,{connector:t}):function(e){return new n.ConnectableObservable(e,t)}}},1184:(e,r,t)=>{Object.defineProperty(r,"__esModule",{value:!0}),r.observeOn=void 0;var n=t(7738),o=t(4935),i=t(4990);r.observeOn=function(e,r){return void 0===r&&(r=0),o.operate((function(t,o){t.subscribe(i.createOperatorSubscriber(o,(function(t){return n.executeSchedule(o,e,(function(){return o.next(t)}),r)}),(function(){return n.executeSchedule(o,e,(function(){return o.complete()}),r)}),(function(t){return n.executeSchedule(o,e,(function(){return o.error(t)}),r)})))}))}},7582:function(e,r,t){var n=this&&this.__read||function(e,r){var t="function"==typeof Symbol&&e[Symbol.iterator];if(!t)return e;var n,o,i=t.call(e),u=[];try{for(;(void 0===r||r-- >0)&&!(n=i.next()).done;)u.push(n.value)}catch(e){o={error:e}}finally{try{n&&!n.done&&(t=i.return)&&t.call(i)}finally{if(o)throw o.error}}return u},o=this&&this.__spreadArray||function(e,r){for(var t=0,n=r.length,o=e.length;t<n;t++,o++)e[o]=r[t];return e};Object.defineProperty(r,"__esModule",{value:!0}),r.onErrorResumeNext=r.onErrorResumeNextWith=void 0;var i=t(5498),u=t(724);function a(){for(var e=[],r=0;r<arguments.length;r++)e[r]=arguments[r];var t=i.argsOrArgArray(e);return function(e){return u.onErrorResumeNext.apply(void 0,o([e],n(t)))}}r.onErrorResumeNextWith=a,r.onErrorResumeNext=a},2731:(e,r,t)=>{Object.defineProperty(r,"__esModule",{value:!0}),r.pairwise=void 0;var n=t(4935),o=t(4990);r.pairwise=function(){return n.operate((function(e,r){var t,n=!1;e.subscribe(o.createOperatorSubscriber(r,(function(e){var o=t;t=e,n&&r.next([o,e]),n=!0})))}))}},4691:(e,r,t)=>{Object.defineProperty(r,"__esModule",{value:!0}),r.pluck=void 0;var n=t(7291);r.pluck=function(){for(var e=[],r=0;r<arguments.length;r++)e[r]=arguments[r];var t=e.length;if(0===t)throw new Error("list of properties cannot be empty.");return n.map((function(r){for(var n=r,o=0;o<t;o++){var i=null==n?void 0:n[e[o]];if(void 0===i)return;n=i}return n}))}},4474:(e,r,t)=>{Object.defineProperty(r,"__esModule",{value:!0}),r.publish=void 0;var n=t(3032),o=t(3848),i=t(1995);r.publish=function(e){return e?function(r){return i.connect(e)(r)}:function(e){return o.multicast(new n.Subject)(e)}}},52:(e,r,t)=>{Object.defineProperty(r,"__esModule",{value:!0}),r.publishBehavior=void 0;var n=t(5240),o=t(9518);r.publishBehavior=function(e){return function(r){var t=new n.BehaviorSubject(e);return new o.ConnectableObservable(r,(function(){return t}))}}},2110:(e,r,t)=>{Object.defineProperty(r,"__esModule",{value:!0}),r.publishLast=void 0;var n=t(280),o=t(9518);r.publishLast=function(){return function(e){var r=new n.AsyncSubject;return new o.ConnectableObservable(e,(function(){return r}))}}},9864:(e,r,t)=>{Object.defineProperty(r,"__esModule",{value:!0}),r.publishReplay=void 0;var n=t(3274),o=t(3848),i=t(3005);r.publishReplay=function(e,r,t,u){t&&!i.isFunction(t)&&(u=t);var a=i.isFunction(t)?t:void 0;return function(t){return o.multicast(new n.ReplaySubject(e,r,u),a)(t)}}},179:function(e,r,t){var n=this&&this.__read||function(e,r){var t="function"==typeof Symbol&&e[Symbol.iterator];if(!t)return e;var n,o,i=t.call(e),u=[];try{for(;(void 0===r||r-- >0)&&!(n=i.next()).done;)u.push(n.value)}catch(e){o={error:e}}finally{try{n&&!n.done&&(t=i.return)&&t.call(i)}finally{if(o)throw o.error}}return u},o=this&&this.__spreadArray||function(e,r){for(var t=0,n=r.length,o=e.length;t<n;t++,o++)e[o]=r[t];return e};Object.defineProperty(r,"__esModule",{value:!0}),r.raceWith=void 0;var i=t(5182),u=t(4935),a=t(4781);r.raceWith=function(){for(var e=[],r=0;r<arguments.length;r++)e[r]=arguments[r];return e.length?u.operate((function(r,t){i.raceInit(o([r],n(e)))(t)})):a.identity}},122:(e,r,t)=>{Object.defineProperty(r,"__esModule",{value:!0}),r.reduce=void 0;var n=t(8345),o=t(4935);r.reduce=function(e,r){return o.operate(n.scanInternals(e,r,arguments.length>=2,!1,!0))}},8739:(e,r,t)=>{Object.defineProperty(r,"__esModule",{value:!0}),r.refCount=void 0;var n=t(4935),o=t(4990);r.refCount=function(){return n.operate((function(e,r){var t=null;e._refCount++;var n=o.createOperatorSubscriber(r,void 0,void 0,void 0,(function(){if(!e||e._refCount<=0||0<--e._refCount)t=null;else{var n=e._connection,o=t;t=null,!n||o&&n!==o||n.unsubscribe(),r.unsubscribe()}}));e.subscribe(n),n.closed||(t=e.connect())}))}},5313:(e,r,t)=>{Object.defineProperty(r,"__esModule",{value:!0}),r.repeat=void 0;var n=t(6332),o=t(4935),i=t(4990),u=t(7103),a=t(7513);r.repeat=function(e){var r,t,c=1/0;return null!=e&&("object"==typeof e?(r=e.count,c=void 0===r?1/0:r,t=e.delay):c=e),c<=0?function(){return n.EMPTY}:o.operate((function(e,r){var n,o=0,l=function(){if(null==n||n.unsubscribe(),n=null,null!=t){var e="number"==typeof t?a.timer(t):u.innerFrom(t(o)),c=i.createOperatorSubscriber(r,(function(){c.unsubscribe(),s()}));e.subscribe(c)}else s()},s=function(){var t=!1;n=e.subscribe(i.createOperatorSubscriber(r,void 0,(function(){++o<c?n?l():t=!0:r.complete()}))),t&&l()};s()}))}},4068:(e,r,t)=>{Object.defineProperty(r,"__esModule",{value:!0}),r.repeatWhen=void 0;var n=t(7103),o=t(3032),i=t(4935),u=t(4990);r.repeatWhen=function(e){return i.operate((function(r,t){var i,a,c=!1,l=!1,s=!1,f=function(){return s&&l&&(t.complete(),!0)},d=function(){s=!1,i=r.subscribe(u.createOperatorSubscriber(t,void 0,(function(){s=!0,!f()&&(a||(a=new o.Subject,n.innerFrom(e(a)).subscribe(u.createOperatorSubscriber(t,(function(){i?d():c=!0}),(function(){l=!0,f()})))),a).next()}))),c&&(i.unsubscribe(),i=null,c=!1,d())};d()}))}},64:(e,r,t)=>{Object.defineProperty(r,"__esModule",{value:!0}),r.retry=void 0;var n=t(4935),o=t(4990),i=t(4781),u=t(7513),a=t(7103);r.retry=function(e){var r;void 0===e&&(e=1/0);var t=(r=e&&"object"==typeof e?e:{count:e}).count,c=void 0===t?1/0:t,l=r.delay,s=r.resetOnSuccess,f=void 0!==s&&s;return c<=0?i.identity:n.operate((function(e,r){var t,n=0,i=function(){var s=!1;t=e.subscribe(o.createOperatorSubscriber(r,(function(e){f&&(n=0),r.next(e)}),void 0,(function(e){if(n++<c){var f=function(){t?(t.unsubscribe(),t=null,i()):s=!0};if(null!=l){var d="number"==typeof l?u.timer(l):a.innerFrom(l(e,n)),p=o.createOperatorSubscriber(r,(function(){p.unsubscribe(),f()}),(function(){r.complete()}));d.subscribe(p)}else f()}else r.error(e)}))),s&&(t.unsubscribe(),t=null,i())};i()}))}},1188:(e,r,t)=>{Object.defineProperty(r,"__esModule",{value:!0}),r.retryWhen=void 0;var n=t(7103),o=t(3032),i=t(4935),u=t(4990);r.retryWhen=function(e){return i.operate((function(r,t){var i,a,c=!1,l=function(){i=r.subscribe(u.createOperatorSubscriber(t,void 0,void 0,(function(r){a||(a=new o.Subject,n.innerFrom(e(a)).subscribe(u.createOperatorSubscriber(t,(function(){return i?l():c=!0})))),a&&a.next(r)}))),c&&(i.unsubscribe(),i=null,c=!1,l())};l()}))}},4193:(e,r,t)=>{Object.defineProperty(r,"__esModule",{value:!0}),r.sample=void 0;var n=t(7103),o=t(4935),i=t(2576),u=t(4990);r.sample=function(e){return o.operate((function(r,t){var o=!1,a=null;r.subscribe(u.createOperatorSubscriber(t,(function(e){o=!0,a=e}))),n.innerFrom(e).subscribe(u.createOperatorSubscriber(t,(function(){if(o){o=!1;var e=a;a=null,t.next(e)}}),i.noop))}))}},6170:(e,r,t)=>{Object.defineProperty(r,"__esModule",{value:!0}),r.sampleTime=void 0;var n=t(2445),o=t(4193),i=t(8990);r.sampleTime=function(e,r){return void 0===r&&(r=n.asyncScheduler),o.sample(i.interval(e,r))}},5876:(e,r,t)=>{Object.defineProperty(r,"__esModule",{value:!0}),r.scan=void 0;var n=t(4935),o=t(8345);r.scan=function(e,r){return n.operate(o.scanInternals(e,r,arguments.length>=2,!0))}},8345:(e,r,t)=>{Object.defineProperty(r,"__esModule",{value:!0}),r.scanInternals=void 0;var n=t(4990);r.scanInternals=function(e,r,t,o,i){return function(u,a){var c=t,l=r,s=0;u.subscribe(n.createOperatorSubscriber(a,(function(r){var t=s++;l=c?e(l,r,t):(c=!0,r),o&&a.next(l)}),i&&function(){c&&a.next(l),a.complete()}))}}},1791:(e,r,t)=>{Object.defineProperty(r,"__esModule",{value:!0}),r.sequenceEqual=void 0;var n=t(4935),o=t(4990),i=t(7103);r.sequenceEqual=function(e,r){return void 0===r&&(r=function(e,r){return e===r}),n.operate((function(t,n){var u={buffer:[],complete:!1},a={buffer:[],complete:!1},c=function(e){n.next(e),n.complete()},l=function(e,t){var i=o.createOperatorSubscriber(n,(function(n){var o=t.buffer,i=t.complete;0===o.length?i?c(!1):e.buffer.push(n):!r(n,o.shift())&&c(!1)}),(function(){e.complete=!0;var r=t.complete,n=t.buffer;r&&c(0===n.length),null==i||i.unsubscribe()}));return i};t.subscribe(l(u,a)),i.innerFrom(e).subscribe(l(a,u))}))}},5137:function(e,r,t){var n=this&&this.__read||function(e,r){var t="function"==typeof Symbol&&e[Symbol.iterator];if(!t)return e;var n,o,i=t.call(e),u=[];try{for(;(void 0===r||r-- >0)&&!(n=i.next()).done;)u.push(n.value)}catch(e){o={error:e}}finally{try{n&&!n.done&&(t=i.return)&&t.call(i)}finally{if(o)throw o.error}}return u},o=this&&this.__spreadArray||function(e,r){for(var t=0,n=r.length,o=e.length;t<n;t++,o++)e[o]=r[t];return e};Object.defineProperty(r,"__esModule",{value:!0}),r.share=void 0;var i=t(7103),u=t(3032),a=t(5125),c=t(4935);function l(e,r){for(var t=[],u=2;u<arguments.length;u++)t[u-2]=arguments[u];if(!0!==r){if(!1!==r){var c=new a.SafeSubscriber({next:function(){c.unsubscribe(),e()}});return i.innerFrom(r.apply(void 0,o([],n(t)))).subscribe(c)}}else e()}r.share=function(e){void 0===e&&(e={});var r=e.connector,t=void 0===r?function(){return new u.Subject}:r,n=e.resetOnError,o=void 0===n||n,s=e.resetOnComplete,f=void 0===s||s,d=e.resetOnRefCountZero,p=void 0===d||d;return function(e){var r,n,u,s=0,d=!1,v=!1,b=function(){null==n||n.unsubscribe(),n=void 0},h=function(){b(),r=u=void 0,d=v=!1},y=function(){var e=r;h(),null==e||e.unsubscribe()};return c.operate((function(e,c){s++,v||d||b();var m=u=null!=u?u:t();c.add((function(){0!=--s||v||d||(n=l(y,p))})),m.subscribe(c),!r&&s>0&&(r=new a.SafeSubscriber({next:function(e){return m.next(e)},error:function(e){v=!0,b(),n=l(h,o,e),m.error(e)},complete:function(){d=!0,b(),n=l(h,f),m.complete()}}),i.innerFrom(e).subscribe(r))}))(e)}}},1348:(e,r,t)=>{Object.defineProperty(r,"__esModule",{value:!0}),r.shareReplay=void 0;var n=t(3274),o=t(5137);r.shareReplay=function(e,r,t){var i,u,a,c,l=!1;return e&&"object"==typeof e?(i=e.bufferSize,c=void 0===i?1/0:i,u=e.windowTime,r=void 0===u?1/0:u,l=void 0!==(a=e.refCount)&&a,t=e.scheduler):c=null!=e?e:1/0,o.share({connector:function(){return new n.ReplaySubject(c,r,t)},resetOnError:!0,resetOnComplete:!1,resetOnRefCountZero:l})}},8242:(e,r,t)=>{Object.defineProperty(r,"__esModule",{value:!0}),r.single=void 0;var n=t(9474),o=t(6156),i=t(8598),u=t(4935),a=t(4990);r.single=function(e){return u.operate((function(r,t){var u,c=!1,l=!1,s=0;r.subscribe(a.createOperatorSubscriber(t,(function(n){l=!0,e&&!e(n,s++,r)||(c&&t.error(new o.SequenceError("Too many matching values")),c=!0,u=n)}),(function(){c?(t.next(u),t.complete()):t.error(l?new i.NotFoundError("No matching values"):new n.EmptyError)})))}))}},3169:(e,r,t)=>{Object.defineProperty(r,"__esModule",{value:!0}),r.skip=void 0;var n=t(9154);r.skip=function(e){return n.filter((function(r,t){return e<=t}))}},2454:(e,r,t)=>{Object.defineProperty(r,"__esModule",{value:!0}),r.skipLast=void 0;var n=t(4781),o=t(4935),i=t(4990);r.skipLast=function(e){return e<=0?n.identity:o.operate((function(r,t){var n=new Array(e),o=0;return r.subscribe(i.createOperatorSubscriber(t,(function(r){var i=o++;if(i<e)n[i]=r;else{var u=i%e,a=n[u];n[u]=r,t.next(a)}}))),function(){n=null}}))}},6931:(e,r,t)=>{Object.defineProperty(r,"__esModule",{value:!0}),r.skipUntil=void 0;var n=t(4935),o=t(4990),i=t(7103),u=t(2576);r.skipUntil=function(e){return n.operate((function(r,t){var n=!1,a=o.createOperatorSubscriber(t,(function(){null==a||a.unsubscribe(),n=!0}),u.noop);i.innerFrom(e).subscribe(a),r.subscribe(o.createOperatorSubscriber(t,(function(e){return n&&t.next(e)})))}))}},7913:(e,r,t)=>{Object.defineProperty(r,"__esModule",{value:!0}),r.skipWhile=void 0;var n=t(4935),o=t(4990);r.skipWhile=function(e){return n.operate((function(r,t){var n=!1,i=0;r.subscribe(o.createOperatorSubscriber(t,(function(r){return(n||(n=!e(r,i++)))&&t.next(r)})))}))}},9234:(e,r,t)=>{Object.defineProperty(r,"__esModule",{value:!0}),r.startWith=void 0;var n=t(2239),o=t(2433),i=t(4935);r.startWith=function(){for(var e=[],r=0;r<arguments.length;r++)e[r]=arguments[r];var t=o.popScheduler(e);return i.operate((function(r,o){(t?n.concat(e,r,t):n.concat(e,r)).subscribe(o)}))}},276:(e,r,t)=>{Object.defineProperty(r,"__esModule",{value:!0}),r.subscribeOn=void 0;var n=t(4935);r.subscribeOn=function(e,r){return void 0===r&&(r=0),n.operate((function(t,n){n.add(e.schedule((function(){return t.subscribe(n)}),r))}))}},9253:(e,r,t)=>{Object.defineProperty(r,"__esModule",{value:!0}),r.switchAll=void 0;var n=t(8518),o=t(4781);r.switchAll=function(){return n.switchMap(o.identity)}},8518:(e,r,t)=>{Object.defineProperty(r,"__esModule",{value:!0}),r.switchMap=void 0;var n=t(7103),o=t(4935),i=t(4990);r.switchMap=function(e,r){return o.operate((function(t,o){var u=null,a=0,c=!1,l=function(){return c&&!u&&o.complete()};t.subscribe(i.createOperatorSubscriber(o,(function(t){null==u||u.unsubscribe();var c=0,s=a++;n.innerFrom(e(t,s)).subscribe(u=i.createOperatorSubscriber(o,(function(e){return o.next(r?r(t,e,s,c++):e)}),(function(){u=null,l()})))}),(function(){c=!0,l()})))}))}},1173:(e,r,t)=>{Object.defineProperty(r,"__esModule",{value:!0}),r.switchMapTo=void 0;var n=t(8518),o=t(3005);r.switchMapTo=function(e,r){return o.isFunction(r)?n.switchMap((function(){return e}),r):n.switchMap((function(){return e}))}},3855:(e,r,t)=>{Object.defineProperty(r,"__esModule",{value:!0}),r.switchScan=void 0;var n=t(8518),o=t(4935);r.switchScan=function(e,r){return o.operate((function(t,o){var i=r;return n.switchMap((function(r,t){return e(i,r,t)}),(function(e,r){return i=r,r}))(t).subscribe(o),function(){i=null}}))}},4783:(e,r,t)=>{Object.defineProperty(r,"__esModule",{value:!0}),r.take=void 0;var n=t(6332),o=t(4935),i=t(4990);r.take=function(e){return e<=0?function(){return n.EMPTY}:o.operate((function(r,t){var n=0;r.subscribe(i.createOperatorSubscriber(t,(function(r){++n<=e&&(t.next(r),e<=n&&t.complete())})))}))}},1980:function(e,r,t){var n=this&&this.__values||function(e){var r="function"==typeof Symbol&&Symbol.iterator,t=r&&e[r],n=0;if(t)return t.call(e);if(e&&"number"==typeof e.length)return{next:function(){return e&&n>=e.length&&(e=void 0),{value:e&&e[n++],done:!e}}};throw new TypeError(r?"Object is not iterable.":"Symbol.iterator is not defined.")};Object.defineProperty(r,"__esModule",{value:!0}),r.takeLast=void 0;var o=t(6332),i=t(4935),u=t(4990);r.takeLast=function(e){return e<=0?function(){return o.EMPTY}:i.operate((function(r,t){var o=[];r.subscribe(u.createOperatorSubscriber(t,(function(r){o.push(r),e<o.length&&o.shift()}),(function(){var e,r;try{for(var i=n(o),u=i.next();!u.done;u=i.next()){var a=u.value;t.next(a)}}catch(r){e={error:r}}finally{try{u&&!u.done&&(r=i.return)&&r.call(i)}finally{if(e)throw e.error}}t.complete()}),void 0,(function(){o=null})))}))}},9845:(e,r,t)=>{Object.defineProperty(r,"__esModule",{value:!0}),r.takeUntil=void 0;var n=t(4935),o=t(4990),i=t(7103),u=t(2576);r.takeUntil=function(e){return n.operate((function(r,t){i.innerFrom(e).subscribe(o.createOperatorSubscriber(t,(function(){return t.complete()}),u.noop)),!t.closed&&r.subscribe(t)}))}},6060:(e,r,t)=>{Object.defineProperty(r,"__esModule",{value:!0}),r.takeWhile=void 0;var n=t(4935),o=t(4990);r.takeWhile=function(e,r){return void 0===r&&(r=!1),n.operate((function(t,n){var i=0;t.subscribe(o.createOperatorSubscriber(n,(function(t){var o=e(t,i++);(o||r)&&n.next(t),!o&&n.complete()})))}))}},1138:(e,r,t)=>{Object.defineProperty(r,"__esModule",{value:!0}),r.tap=void 0;var n=t(3005),o=t(4935),i=t(4990),u=t(4781);r.tap=function(e,r,t){var a=n.isFunction(e)||r||t?{next:e,error:r,complete:t}:e;return a?o.operate((function(e,r){var t;null===(t=a.subscribe)||void 0===t||t.call(a);var n=!0;e.subscribe(i.createOperatorSubscriber(r,(function(e){var t;null===(t=a.next)||void 0===t||t.call(a,e),r.next(e)}),(function(){var e;n=!1,null===(e=a.complete)||void 0===e||e.call(a),r.complete()}),(function(e){var t;n=!1,null===(t=a.error)||void 0===t||t.call(a,e),r.error(e)}),(function(){var e,r;n&&(null===(e=a.unsubscribe)||void 0===e||e.call(a)),null===(r=a.finalize)||void 0===r||r.call(a)})))})):u.identity}},7306:(e,r,t)=>{Object.defineProperty(r,"__esModule",{value:!0}),r.throttle=void 0;var n=t(4935),o=t(4990),i=t(7103);r.throttle=function(e,r){return n.operate((function(t,n){var u=null!=r?r:{},a=u.leading,c=void 0===a||a,l=u.trailing,s=void 0!==l&&l,f=!1,d=null,p=null,v=!1,b=function(){null==p||p.unsubscribe(),p=null,s&&(m(),v&&n.complete())},h=function(){p=null,v&&n.complete()},y=function(r){return p=i.innerFrom(e(r)).subscribe(o.createOperatorSubscriber(n,b,h))},m=function(){if(f){f=!1;var e=d;d=null,n.next(e),!v&&y(e)}};t.subscribe(o.createOperatorSubscriber(n,(function(e){f=!0,d=e,(!p||p.closed)&&(c?m():y(e))}),(function(){v=!0,(!(s&&f&&p)||p.closed)&&n.complete()})))}))}},8968:(e,r,t)=>{Object.defineProperty(r,"__esModule",{value:!0}),r.throttleTime=void 0;var n=t(2445),o=t(7306),i=t(7513);r.throttleTime=function(e,r,t){void 0===r&&(r=n.asyncScheduler);var u=i.timer(e,r);return o.throttle((function(){return u}),t)}},1779:(e,r,t)=>{Object.defineProperty(r,"__esModule",{value:!0}),r.throwIfEmpty=void 0;var n=t(9474),o=t(4935),i=t(4990);function u(){return new n.EmptyError}r.throwIfEmpty=function(e){return void 0===e&&(e=u),o.operate((function(r,t){var n=!1;r.subscribe(i.createOperatorSubscriber(t,(function(e){n=!0,t.next(e)}),(function(){return n?t.complete():t.error(e())})))}))}},8005:(e,r,t)=>{Object.defineProperty(r,"__esModule",{value:!0}),r.TimeInterval=r.timeInterval=void 0;var n=t(2445),o=t(4935),i=t(4990);r.timeInterval=function(e){return void 0===e&&(e=n.asyncScheduler),o.operate((function(r,t){var n=e.now();r.subscribe(i.createOperatorSubscriber(t,(function(r){var o=e.now(),i=o-n;n=o,t.next(new u(r,i))})))}))};var u=function(e,r){this.value=e,this.interval=r};r.TimeInterval=u},4173:(e,r,t)=>{Object.defineProperty(r,"__esModule",{value:!0}),r.timeout=r.TimeoutError=void 0;var n=t(2445),o=t(1677),i=t(4935),u=t(7103),a=t(7029),c=t(4990),l=t(7738);function s(e){throw new r.TimeoutError(e)}r.TimeoutError=a.createErrorClass((function(e){return function(r){void 0===r&&(r=null),e(this),this.message="Timeout has occurred",this.name="TimeoutError",this.info=r}})),r.timeout=function(e,r){var t=o.isValidDate(e)?{first:e}:"number"==typeof e?{each:e}:e,a=t.first,f=t.each,d=t.with,p=void 0===d?s:d,v=t.scheduler,b=void 0===v?null!=r?r:n.asyncScheduler:v,h=t.meta,y=void 0===h?null:h;if(null==a&&null==f)throw new TypeError("No timeout provided.");return i.operate((function(e,r){var t,n,o=null,i=0,s=function(e){n=l.executeSchedule(r,b,(function(){try{t.unsubscribe(),u.innerFrom(p({meta:y,lastValue:o,seen:i})).subscribe(r)}catch(e){r.error(e)}}),e)};t=e.subscribe(c.createOperatorSubscriber(r,(function(e){null==n||n.unsubscribe(),i++,r.next(o=e),f>0&&s(f)}),void 0,void 0,(function(){(null==n?void 0:n.closed)||null==n||n.unsubscribe(),o=null}))),!i&&s(null!=a?"number"==typeof a?a:+a-b.now():f)}))}},7223:(e,r,t)=>{Object.defineProperty(r,"__esModule",{value:!0}),r.timeoutWith=void 0;var n=t(2445),o=t(1677),i=t(4173);r.timeoutWith=function(e,r,t){var u,a,c;if(t=null!=t?t:n.async,o.isValidDate(e)?u=e:"number"==typeof e&&(a=e),!r)throw new TypeError("No observable provided to switch to");if(c=function(){return r},null==u&&null==a)throw new TypeError("No timeout provided.");return i.timeout({first:u,each:a,scheduler:t,with:c})}},8975:(e,r,t)=>{Object.defineProperty(r,"__esModule",{value:!0}),r.timestamp=void 0;var n=t(7950),o=t(7291);r.timestamp=function(e){return void 0===e&&(e=n.dateTimestampProvider),o.map((function(r){return{value:r,timestamp:e.now()}}))}},2:(e,r,t)=>{Object.defineProperty(r,"__esModule",{value:!0}),r.toArray=void 0;var n=t(122),o=t(4935),i=function(e,r){return e.push(r),e};r.toArray=function(){return o.operate((function(e,r){n.reduce(i,[])(e).subscribe(r)}))}},2826:(e,r,t)=>{Object.defineProperty(r,"__esModule",{value:!0}),r.window=void 0;var n=t(3032),o=t(4935),i=t(4990),u=t(2576),a=t(7103);r.window=function(e){return o.operate((function(r,t){var o=new n.Subject;t.next(o.asObservable());var c=function(e){o.error(e),t.error(e)};return r.subscribe(i.createOperatorSubscriber(t,(function(e){return null==o?void 0:o.next(e)}),(function(){o.complete(),t.complete()}),c)),a.innerFrom(e).subscribe(i.createOperatorSubscriber(t,(function(){o.complete(),t.next(o=new n.Subject)}),u.noop,c)),function(){null==o||o.unsubscribe(),o=null}}))}},7526:function(e,r,t){var n=this&&this.__values||function(e){var r="function"==typeof Symbol&&Symbol.iterator,t=r&&e[r],n=0;if(t)return t.call(e);if(e&&"number"==typeof e.length)return{next:function(){return e&&n>=e.length&&(e=void 0),{value:e&&e[n++],done:!e}}};throw new TypeError(r?"Object is not iterable.":"Symbol.iterator is not defined.")};Object.defineProperty(r,"__esModule",{value:!0}),r.windowCount=void 0;var o=t(3032),i=t(4935),u=t(4990);r.windowCount=function(e,r){void 0===r&&(r=0);var t=r>0?r:e;return i.operate((function(r,i){var a=[new o.Subject],c=0;i.next(a[0].asObservable()),r.subscribe(u.createOperatorSubscriber(i,(function(r){var u,l;try{for(var s=n(a),f=s.next();!f.done;f=s.next())f.value.next(r)}catch(e){u={error:e}}finally{try{f&&!f.done&&(l=s.return)&&l.call(s)}finally{if(u)throw u.error}}var d=c-e+1;if(d>=0&&d%t==0&&a.shift().complete(),++c%t==0){var p=new o.Subject;a.push(p),i.next(p.asObservable())}}),(function(){for(;a.length>0;)a.shift().complete();i.complete()}),(function(e){for(;a.length>0;)a.shift().error(e);i.error(e)}),(function(){a=null})))}))}},8294:(e,r,t)=>{Object.defineProperty(r,"__esModule",{value:!0}),r.windowTime=void 0;var n=t(3032),o=t(2445),i=t(3865),u=t(4935),a=t(4990),c=t(6967),l=t(2433),s=t(7738);r.windowTime=function(e){for(var r,t,f=[],d=1;d<arguments.length;d++)f[d-1]=arguments[d];var p=null!==(r=l.popScheduler(f))&&void 0!==r?r:o.asyncScheduler,v=null!==(t=f[0])&&void 0!==t?t:null,b=f[1]||1/0;return u.operate((function(r,t){var o=[],u=!1,l=function(e){var r=e.window,t=e.subs;r.complete(),t.unsubscribe(),c.arrRemove(o,e),u&&f()},f=function(){if(o){var r=new i.Subscription;t.add(r);var u=new n.Subject,a={window:u,subs:r,seen:0};o.push(a),t.next(u.asObservable()),s.executeSchedule(r,p,(function(){return l(a)}),e)}};null!==v&&v>=0?s.executeSchedule(t,p,f,v,!0):u=!0,f();var d=function(e){return o.slice().forEach(e)},h=function(e){d((function(r){var t=r.window;return e(t)})),e(t),t.unsubscribe()};return r.subscribe(a.createOperatorSubscriber(t,(function(e){d((function(r){r.window.next(e),b<=++r.seen&&l(r)}))}),(function(){return h((function(e){return e.complete()}))}),(function(e){return h((function(r){return r.error(e)}))}))),function(){o=null}}))}},1883:function(e,r,t){var n=this&&this.__values||function(e){var r="function"==typeof Symbol&&Symbol.iterator,t=r&&e[r],n=0;if(t)return t.call(e);if(e&&"number"==typeof e.length)return{next:function(){return e&&n>=e.length&&(e=void 0),{value:e&&e[n++],done:!e}}};throw new TypeError(r?"Object is not iterable.":"Symbol.iterator is not defined.")};Object.defineProperty(r,"__esModule",{value:!0}),r.windowToggle=void 0;var o=t(3032),i=t(3865),u=t(4935),a=t(7103),c=t(4990),l=t(2576),s=t(6967);r.windowToggle=function(e,r){return u.operate((function(t,u){var f=[],d=function(e){for(;0<f.length;)f.shift().error(e);u.error(e)};a.innerFrom(e).subscribe(c.createOperatorSubscriber(u,(function(e){var t=new o.Subject;f.push(t);var n,p=new i.Subscription;try{n=a.innerFrom(r(e))}catch(e){return void d(e)}u.next(t.asObservable()),p.add(n.subscribe(c.createOperatorSubscriber(u,(function(){s.arrRemove(f,t),t.complete(),p.unsubscribe()}),l.noop,d)))}),l.noop)),t.subscribe(c.createOperatorSubscriber(u,(function(e){var r,t,o=f.slice();try{for(var i=n(o),u=i.next();!u.done;u=i.next())u.value.next(e)}catch(e){r={error:e}}finally{try{u&&!u.done&&(t=i.return)&&t.call(i)}finally{if(r)throw r.error}}}),(function(){for(;0<f.length;)f.shift().complete();u.complete()}),d,(function(){for(;0<f.length;)f.shift().unsubscribe()})))}))}},4309:(e,r,t)=>{Object.defineProperty(r,"__esModule",{value:!0}),r.windowWhen=void 0;var n=t(3032),o=t(4935),i=t(4990),u=t(7103);r.windowWhen=function(e){return o.operate((function(r,t){var o,a,c=function(e){o.error(e),t.error(e)},l=function(){var r;null==a||a.unsubscribe(),null==o||o.complete(),o=new n.Subject,t.next(o.asObservable());try{r=u.innerFrom(e())}catch(e){return void c(e)}r.subscribe(a=i.createOperatorSubscriber(t,l,l,c))};l(),r.subscribe(i.createOperatorSubscriber(t,(function(e){return o.next(e)}),(function(){o.complete(),t.complete()}),c,(function(){null==a||a.unsubscribe(),o=null})))}))}},3041:function(e,r,t){var n=this&&this.__read||function(e,r){var t="function"==typeof Symbol&&e[Symbol.iterator];if(!t)return e;var n,o,i=t.call(e),u=[];try{for(;(void 0===r||r-- >0)&&!(n=i.next()).done;)u.push(n.value)}catch(e){o={error:e}}finally{try{n&&!n.done&&(t=i.return)&&t.call(i)}finally{if(o)throw o.error}}return u},o=this&&this.__spreadArray||function(e,r){for(var t=0,n=r.length,o=e.length;t<n;t++,o++)e[o]=r[t];return e};Object.defineProperty(r,"__esModule",{value:!0}),r.withLatestFrom=void 0;var i=t(4935),u=t(4990),a=t(7103),c=t(4781),l=t(2576),s=t(2433);r.withLatestFrom=function(){for(var e=[],r=0;r<arguments.length;r++)e[r]=arguments[r];var t=s.popResultSelector(e);return i.operate((function(r,i){for(var s=e.length,f=new Array(s),d=e.map((function(){return!1})),p=!1,v=function(r){a.innerFrom(e[r]).subscribe(u.createOperatorSubscriber(i,(function(e){f[r]=e,p||d[r]||(d[r]=!0,(p=d.every(c.identity))&&(d=null))}),l.noop))},b=0;b<s;b++)v(b);r.subscribe(u.createOperatorSubscriber(i,(function(e){if(p){var r=o([e],n(f));i.next(t?t.apply(void 0,o([],n(r))):r)}})))}))}},4400:function(e,r,t){var n=this&&this.__read||function(e,r){var t="function"==typeof Symbol&&e[Symbol.iterator];if(!t)return e;var n,o,i=t.call(e),u=[];try{for(;(void 0===r||r-- >0)&&!(n=i.next()).done;)u.push(n.value)}catch(e){o={error:e}}finally{try{n&&!n.done&&(t=i.return)&&t.call(i)}finally{if(o)throw o.error}}return u},o=this&&this.__spreadArray||function(e,r){for(var t=0,n=r.length,o=e.length;t<n;t++,o++)e[o]=r[t];return e};Object.defineProperty(r,"__esModule",{value:!0}),r.zip=void 0;var i=t(7654),u=t(4935);r.zip=function(){for(var e=[],r=0;r<arguments.length;r++)e[r]=arguments[r];return u.operate((function(r,t){i.zip.apply(void 0,o([r],n(e))).subscribe(t)}))}},8593:(e,r,t)=>{Object.defineProperty(r,"__esModule",{value:!0}),r.zipAll=void 0;var n=t(7654),o=t(2069);r.zipAll=function(e){return o.joinAllInternals(n.zip,e)}},8096:function(e,r,t){var n=this&&this.__read||function(e,r){var t="function"==typeof Symbol&&e[Symbol.iterator];if(!t)return e;var n,o,i=t.call(e),u=[];try{for(;(void 0===r||r-- >0)&&!(n=i.next()).done;)u.push(n.value)}catch(e){o={error:e}}finally{try{n&&!n.done&&(t=i.return)&&t.call(i)}finally{if(o)throw o.error}}return u},o=this&&this.__spreadArray||function(e,r){for(var t=0,n=r.length,o=e.length;t<n;t++,o++)e[o]=r[t];return e};Object.defineProperty(r,"__esModule",{value:!0}),r.zipWith=void 0;var i=t(4400);r.zipWith=function(){for(var e=[],r=0;r<arguments.length;r++)e[r]=arguments[r];return i.zip.apply(void 0,o([],n(e)))}},7631:(e,r,t)=>{Object.defineProperty(r,"__esModule",{value:!0}),r.scheduleArray=void 0;var n=t(2419);r.scheduleArray=function(e,r){return new n.Observable((function(t){var n=0;return r.schedule((function(){n===e.length?t.complete():(t.next(e[n++]),t.closed||this.schedule())}))}))}},8489:(e,r,t)=>{Object.defineProperty(r,"__esModule",{value:!0}),r.scheduleAsyncIterable=void 0;var n=t(2419),o=t(7738);r.scheduleAsyncIterable=function(e,r){if(!e)throw new Error("Iterable cannot be null");return new n.Observable((function(t){o.executeSchedule(t,r,(function(){var n=e[Symbol.asyncIterator]();o.executeSchedule(t,r,(function(){n.next().then((function(e){e.done?t.complete():t.next(e.value)}))}),0,!0)}))}))}},1297:(e,r,t)=>{Object.defineProperty(r,"__esModule",{value:!0}),r.scheduleIterable=void 0;var n=t(2419),o=t(3725),i=t(3005),u=t(7738);r.scheduleIterable=function(e,r){return new n.Observable((function(t){var n;return u.executeSchedule(t,r,(function(){n=e[o.iterator](),u.executeSchedule(t,r,(function(){var e,r,o;try{r=(e=n.next()).value,o=e.done}catch(e){return void t.error(e)}o?t.complete():t.next(r)}),0,!0)})),function(){return i.isFunction(null==n?void 0:n.return)&&n.return()}}))}},4001:(e,r,t)=>{Object.defineProperty(r,"__esModule",{value:!0}),r.scheduleObservable=void 0;var n=t(7103),o=t(1184),i=t(276);r.scheduleObservable=function(e,r){return n.innerFrom(e).pipe(i.subscribeOn(r),o.observeOn(r))}},5143:(e,r,t)=>{Object.defineProperty(r,"__esModule",{value:!0}),r.schedulePromise=void 0;var n=t(7103),o=t(1184),i=t(276);r.schedulePromise=function(e,r){return n.innerFrom(e).pipe(i.subscribeOn(r),o.observeOn(r))}},3676:(e,r,t)=>{Object.defineProperty(r,"__esModule",{value:!0}),r.scheduleReadableStreamLike=void 0;var n=t(8489),o=t(7823);r.scheduleReadableStreamLike=function(e,r){return n.scheduleAsyncIterable(o.readableStreamLikeToAsyncGenerator(e),r)}},5207:(e,r,t)=>{Object.defineProperty(r,"__esModule",{value:!0}),r.scheduled=void 0;var n=t(4001),o=t(5143),i=t(7631),u=t(1297),a=t(8489),c=t(9500),l=t(6018),s=t(3909),f=t(2743),d=t(9595),p=t(9906),v=t(7823),b=t(3676);r.scheduled=function(e,r){if(null!=e){if(c.isInteropObservable(e))return n.scheduleObservable(e,r);if(s.isArrayLike(e))return i.scheduleArray(e,r);if(l.isPromise(e))return o.schedulePromise(e,r);if(d.isAsyncIterable(e))return a.scheduleAsyncIterable(e,r);if(f.isIterable(e))return u.scheduleIterable(e,r);if(v.isReadableStreamLike(e))return b.scheduleReadableStreamLike(e,r)}throw p.createInvalidObservableTypeError(e)}},1986:function(e,r,t){var n,o=this&&this.__extends||(n=function(e,r){return n=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,r){e.__proto__=r}||function(e,r){for(var t in r)Object.prototype.hasOwnProperty.call(r,t)&&(e[t]=r[t])},n(e,r)},function(e,r){if("function"!=typeof r&&null!==r)throw new TypeError("Class extends value "+String(r)+" is not a constructor or null");function t(){this.constructor=e}n(e,r),e.prototype=null===r?Object.create(r):(t.prototype=r.prototype,new t)});Object.defineProperty(r,"__esModule",{value:!0}),r.Action=void 0;var i=function(e){function r(r,t){return e.call(this)||this}return o(r,e),r.prototype.schedule=function(e,r){return void 0===r&&(r=0),this},r}(t(3865).Subscription);r.Action=i},7574:function(e,r,t){var n,o=this&&this.__extends||(n=function(e,r){return n=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,r){e.__proto__=r}||function(e,r){for(var t in r)Object.prototype.hasOwnProperty.call(r,t)&&(e[t]=r[t])},n(e,r)},function(e,r){if("function"!=typeof r&&null!==r)throw new TypeError("Class extends value "+String(r)+" is not a constructor or null");function t(){this.constructor=e}n(e,r),e.prototype=null===r?Object.create(r):(t.prototype=r.prototype,new t)});Object.defineProperty(r,"__esModule",{value:!0}),r.AnimationFrameAction=void 0;var i=t(9702),u=t(505),a=function(e){function r(r,t){var n=e.call(this,r,t)||this;return n.scheduler=r,n.work=t,n}return o(r,e),r.prototype.requestAsyncId=function(r,t,n){return void 0===n&&(n=0),null!==n&&n>0?e.prototype.requestAsyncId.call(this,r,t,n):(r.actions.push(this),r._scheduled||(r._scheduled=u.animationFrameProvider.requestAnimationFrame((function(){return r.flush(void 0)}))))},r.prototype.recycleAsyncId=function(r,t,n){var o;if(void 0===n&&(n=0),null!=n?n>0:this.delay>0)return e.prototype.recycleAsyncId.call(this,r,t,n);var i=r.actions;null!=t&&(null===(o=i[i.length-1])||void 0===o?void 0:o.id)!==t&&(u.animationFrameProvider.cancelAnimationFrame(t),r._scheduled=void 0)},r}(i.AsyncAction);r.AnimationFrameAction=a},2934:function(e,r,t){var n,o=this&&this.__extends||(n=function(e,r){return n=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,r){e.__proto__=r}||function(e,r){for(var t in r)Object.prototype.hasOwnProperty.call(r,t)&&(e[t]=r[t])},n(e,r)},function(e,r){if("function"!=typeof r&&null!==r)throw new TypeError("Class extends value "+String(r)+" is not a constructor or null");function t(){this.constructor=e}n(e,r),e.prototype=null===r?Object.create(r):(t.prototype=r.prototype,new t)});Object.defineProperty(r,"__esModule",{value:!0}),r.AnimationFrameScheduler=void 0;var i=function(e){function r(){return null!==e&&e.apply(this,arguments)||this}return o(r,e),r.prototype.flush=function(e){this._active=!0;var r=this._scheduled;this._scheduled=void 0;var t,n=this.actions;e=e||n.shift();do{if(t=e.execute(e.state,e.delay))break}while((e=n[0])&&e.id===r&&n.shift());if(this._active=!1,t){for(;(e=n[0])&&e.id===r&&n.shift();)e.unsubscribe();throw t}},r}(t(3643).AsyncScheduler);r.AnimationFrameScheduler=i},2189:function(e,r,t){var n,o=this&&this.__extends||(n=function(e,r){return n=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,r){e.__proto__=r}||function(e,r){for(var t in r)Object.prototype.hasOwnProperty.call(r,t)&&(e[t]=r[t])},n(e,r)},function(e,r){if("function"!=typeof r&&null!==r)throw new TypeError("Class extends value "+String(r)+" is not a constructor or null");function t(){this.constructor=e}n(e,r),e.prototype=null===r?Object.create(r):(t.prototype=r.prototype,new t)});Object.defineProperty(r,"__esModule",{value:!0}),r.AsapAction=void 0;var i=t(9702),u=t(8908),a=function(e){function r(r,t){var n=e.call(this,r,t)||this;return n.scheduler=r,n.work=t,n}return o(r,e),r.prototype.requestAsyncId=function(r,t,n){return void 0===n&&(n=0),null!==n&&n>0?e.prototype.requestAsyncId.call(this,r,t,n):(r.actions.push(this),r._scheduled||(r._scheduled=u.immediateProvider.setImmediate(r.flush.bind(r,void 0))))},r.prototype.recycleAsyncId=function(r,t,n){var o;if(void 0===n&&(n=0),null!=n?n>0:this.delay>0)return e.prototype.recycleAsyncId.call(this,r,t,n);var i=r.actions;null!=t&&(null===(o=i[i.length-1])||void 0===o?void 0:o.id)!==t&&(u.immediateProvider.clearImmediate(t),r._scheduled===t&&(r._scheduled=void 0))},r}(i.AsyncAction);r.AsapAction=a},5523:function(e,r,t){var n,o=this&&this.__extends||(n=function(e,r){return n=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,r){e.__proto__=r}||function(e,r){for(var t in r)Object.prototype.hasOwnProperty.call(r,t)&&(e[t]=r[t])},n(e,r)},function(e,r){if("function"!=typeof r&&null!==r)throw new TypeError("Class extends value "+String(r)+" is not a constructor or null");function t(){this.constructor=e}n(e,r),e.prototype=null===r?Object.create(r):(t.prototype=r.prototype,new t)});Object.defineProperty(r,"__esModule",{value:!0}),r.AsapScheduler=void 0;var i=function(e){function r(){return null!==e&&e.apply(this,arguments)||this}return o(r,e),r.prototype.flush=function(e){this._active=!0;var r=this._scheduled;this._scheduled=void 0;var t,n=this.actions;e=e||n.shift();do{if(t=e.execute(e.state,e.delay))break}while((e=n[0])&&e.id===r&&n.shift());if(this._active=!1,t){for(;(e=n[0])&&e.id===r&&n.shift();)e.unsubscribe();throw t}},r}(t(3643).AsyncScheduler);r.AsapScheduler=i},9702:function(e,r,t){var n,o=this&&this.__extends||(n=function(e,r){return n=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,r){e.__proto__=r}||function(e,r){for(var t in r)Object.prototype.hasOwnProperty.call(r,t)&&(e[t]=r[t])},n(e,r)},function(e,r){if("function"!=typeof r&&null!==r)throw new TypeError("Class extends value "+String(r)+" is not a constructor or null");function t(){this.constructor=e}n(e,r),e.prototype=null===r?Object.create(r):(t.prototype=r.prototype,new t)});Object.defineProperty(r,"__esModule",{value:!0}),r.AsyncAction=void 0;var i=t(1986),u=t(8203),a=t(6967),c=function(e){function r(r,t){var n=e.call(this,r,t)||this;return n.scheduler=r,n.work=t,n.pending=!1,n}return o(r,e),r.prototype.schedule=function(e,r){var t;if(void 0===r&&(r=0),this.closed)return this;this.state=e;var n=this.id,o=this.scheduler;return null!=n&&(this.id=this.recycleAsyncId(o,n,r)),this.pending=!0,this.delay=r,this.id=null!==(t=this.id)&&void 0!==t?t:this.requestAsyncId(o,this.id,r),this},r.prototype.requestAsyncId=function(e,r,t){return void 0===t&&(t=0),u.intervalProvider.setInterval(e.flush.bind(e,this),t)},r.prototype.recycleAsyncId=function(e,r,t){if(void 0===t&&(t=0),null!=t&&this.delay===t&&!1===this.pending)return r;null!=r&&u.intervalProvider.clearInterval(r)},r.prototype.execute=function(e,r){if(this.closed)return new Error("executing a cancelled action");this.pending=!1;var t=this._execute(e,r);if(t)return t;!1===this.pending&&null!=this.id&&(this.id=this.recycleAsyncId(this.scheduler,this.id,null))},r.prototype._execute=function(e,r){var t,n=!1;try{this.work(e)}catch(e){n=!0,t=e||new Error("Scheduled action threw falsy error")}if(n)return this.unsubscribe(),t},r.prototype.unsubscribe=function(){if(!this.closed){var r=this.id,t=this.scheduler,n=t.actions;this.work=this.state=this.scheduler=null,this.pending=!1,a.arrRemove(n,this),null!=r&&(this.id=this.recycleAsyncId(t,r,null)),this.delay=null,e.prototype.unsubscribe.call(this)}},r}(i.Action);r.AsyncAction=c},3643:function(e,r,t){var n,o=this&&this.__extends||(n=function(e,r){return n=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,r){e.__proto__=r}||function(e,r){for(var t in r)Object.prototype.hasOwnProperty.call(r,t)&&(e[t]=r[t])},n(e,r)},function(e,r){if("function"!=typeof r&&null!==r)throw new TypeError("Class extends value "+String(r)+" is not a constructor or null");function t(){this.constructor=e}n(e,r),e.prototype=null===r?Object.create(r):(t.prototype=r.prototype,new t)});Object.defineProperty(r,"__esModule",{value:!0}),r.AsyncScheduler=void 0;var i=t(218),u=function(e){function r(r,t){void 0===t&&(t=i.Scheduler.now);var n=e.call(this,r,t)||this;return n.actions=[],n._active=!1,n}return o(r,e),r.prototype.flush=function(e){var r=this.actions;if(this._active)r.push(e);else{var t;this._active=!0;do{if(t=e.execute(e.state,e.delay))break}while(e=r.shift());if(this._active=!1,t){for(;e=r.shift();)e.unsubscribe();throw t}}},r}(i.Scheduler);r.AsyncScheduler=u},6201:function(e,r,t){var n,o=this&&this.__extends||(n=function(e,r){return n=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,r){e.__proto__=r}||function(e,r){for(var t in r)Object.prototype.hasOwnProperty.call(r,t)&&(e[t]=r[t])},n(e,r)},function(e,r){if("function"!=typeof r&&null!==r)throw new TypeError("Class extends value "+String(r)+" is not a constructor or null");function t(){this.constructor=e}n(e,r),e.prototype=null===r?Object.create(r):(t.prototype=r.prototype,new t)});Object.defineProperty(r,"__esModule",{value:!0}),r.QueueAction=void 0;var i=function(e){function r(r,t){var n=e.call(this,r,t)||this;return n.scheduler=r,n.work=t,n}return o(r,e),r.prototype.schedule=function(r,t){return void 0===t&&(t=0),t>0?e.prototype.schedule.call(this,r,t):(this.delay=t,this.state=r,this.scheduler.flush(this),this)},r.prototype.execute=function(r,t){return t>0||this.closed?e.prototype.execute.call(this,r,t):this._execute(r,t)},r.prototype.requestAsyncId=function(r,t,n){return void 0===n&&(n=0),null!=n&&n>0||null==n&&this.delay>0?e.prototype.requestAsyncId.call(this,r,t,n):(r.flush(this),0)},r}(t(9702).AsyncAction);r.QueueAction=i},5860:function(e,r,t){var n,o=this&&this.__extends||(n=function(e,r){return n=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,r){e.__proto__=r}||function(e,r){for(var t in r)Object.prototype.hasOwnProperty.call(r,t)&&(e[t]=r[t])},n(e,r)},function(e,r){if("function"!=typeof r&&null!==r)throw new TypeError("Class extends value "+String(r)+" is not a constructor or null");function t(){this.constructor=e}n(e,r),e.prototype=null===r?Object.create(r):(t.prototype=r.prototype,new t)});Object.defineProperty(r,"__esModule",{value:!0}),r.QueueScheduler=void 0;var i=function(e){function r(){return null!==e&&e.apply(this,arguments)||this}return o(r,e),r}(t(3643).AsyncScheduler);r.QueueScheduler=i},4123:function(e,r,t){var n,o=this&&this.__extends||(n=function(e,r){return n=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,r){e.__proto__=r}||function(e,r){for(var t in r)Object.prototype.hasOwnProperty.call(r,t)&&(e[t]=r[t])},n(e,r)},function(e,r){if("function"!=typeof r&&null!==r)throw new TypeError("Class extends value "+String(r)+" is not a constructor or null");function t(){this.constructor=e}n(e,r),e.prototype=null===r?Object.create(r):(t.prototype=r.prototype,new t)});Object.defineProperty(r,"__esModule",{value:!0}),r.VirtualAction=r.VirtualTimeScheduler=void 0;var i=t(9702),u=t(3865),a=function(e){function r(r,t){void 0===r&&(r=c),void 0===t&&(t=1/0);var n=e.call(this,r,(function(){return n.frame}))||this;return n.maxFrames=t,n.frame=0,n.index=-1,n}return o(r,e),r.prototype.flush=function(){for(var e,r,t=this.actions,n=this.maxFrames;(r=t[0])&&r.delay<=n&&(t.shift(),this.frame=r.delay,!(e=r.execute(r.state,r.delay))););if(e){for(;r=t.shift();)r.unsubscribe();throw e}},r.frameTimeFactor=10,r}(t(3643).AsyncScheduler);r.VirtualTimeScheduler=a;var c=function(e){function r(r,t,n){void 0===n&&(n=r.index+=1);var o=e.call(this,r,t)||this;return o.scheduler=r,o.work=t,o.index=n,o.active=!0,o.index=r.index=n,o}return o(r,e),r.prototype.schedule=function(t,n){if(void 0===n&&(n=0),Number.isFinite(n)){if(!this.id)return e.prototype.schedule.call(this,t,n);this.active=!1;var o=new r(this.scheduler,this.work);return this.add(o),o.schedule(t,n)}return u.Subscription.EMPTY},r.prototype.requestAsyncId=function(e,t,n){void 0===n&&(n=0),this.delay=e.frame+n;var o=e.actions;return o.push(this),o.sort(r.sortActions),1},r.prototype.recycleAsyncId=function(e,r,t){void 0===t&&(t=0)},r.prototype._execute=function(r,t){if(!0===this.active)return e.prototype._execute.call(this,r,t)},r.sortActions=function(e,r){return e.delay===r.delay?e.index===r.index?0:e.index>r.index?1:-1:e.delay>r.delay?1:-1},r}(i.AsyncAction);r.VirtualAction=c},3660:(e,r,t)=>{Object.defineProperty(r,"__esModule",{value:!0}),r.animationFrame=r.animationFrameScheduler=void 0;var n=t(7574),o=t(2934);r.animationFrameScheduler=new o.AnimationFrameScheduler(n.AnimationFrameAction),r.animationFrame=r.animationFrameScheduler},505:function(e,r,t){var n=this&&this.__read||function(e,r){var t="function"==typeof Symbol&&e[Symbol.iterator];if(!t)return e;var n,o,i=t.call(e),u=[];try{for(;(void 0===r||r-- >0)&&!(n=i.next()).done;)u.push(n.value)}catch(e){o={error:e}}finally{try{n&&!n.done&&(t=i.return)&&t.call(i)}finally{if(o)throw o.error}}return u},o=this&&this.__spreadArray||function(e,r){for(var t=0,n=r.length,o=e.length;t<n;t++,o++)e[o]=r[t];return e};Object.defineProperty(r,"__esModule",{value:!0}),r.animationFrameProvider=void 0;var i=t(3865);r.animationFrameProvider={schedule:function(e){var t=requestAnimationFrame,n=cancelAnimationFrame,o=r.animationFrameProvider.delegate;o&&(t=o.requestAnimationFrame,n=o.cancelAnimationFrame);var u=t((function(r){n=void 0,e(r)}));return new i.Subscription((function(){return null==n?void 0:n(u)}))},requestAnimationFrame:function(){for(var e=[],t=0;t<arguments.length;t++)e[t]=arguments[t];var i=r.animationFrameProvider.delegate;return((null==i?void 0:i.requestAnimationFrame)||requestAnimationFrame).apply(void 0,o([],n(e)))},cancelAnimationFrame:function(){for(var e=[],t=0;t<arguments.length;t++)e[t]=arguments[t];var i=r.animationFrameProvider.delegate;return((null==i?void 0:i.cancelAnimationFrame)||cancelAnimationFrame).apply(void 0,o([],n(e)))},delegate:void 0}},580:(e,r,t)=>{Object.defineProperty(r,"__esModule",{value:!0}),r.asap=r.asapScheduler=void 0;var n=t(2189),o=t(5523);r.asapScheduler=new o.AsapScheduler(n.AsapAction),r.asap=r.asapScheduler},2445:(e,r,t)=>{Object.defineProperty(r,"__esModule",{value:!0}),r.async=r.asyncScheduler=void 0;var n=t(9702),o=t(3643);r.asyncScheduler=new o.AsyncScheduler(n.AsyncAction),r.async=r.asyncScheduler},7950:(e,r)=>{Object.defineProperty(r,"__esModule",{value:!0}),r.dateTimestampProvider=void 0,r.dateTimestampProvider={now:function(){return(r.dateTimestampProvider.delegate||Date).now()},delegate:void 0}},8908:function(e,r,t){var n=this&&this.__read||function(e,r){var t="function"==typeof Symbol&&e[Symbol.iterator];if(!t)return e;var n,o,i=t.call(e),u=[];try{for(;(void 0===r||r-- >0)&&!(n=i.next()).done;)u.push(n.value)}catch(e){o={error:e}}finally{try{n&&!n.done&&(t=i.return)&&t.call(i)}finally{if(o)throw o.error}}return u},o=this&&this.__spreadArray||function(e,r){for(var t=0,n=r.length,o=e.length;t<n;t++,o++)e[o]=r[t];return e};Object.defineProperty(r,"__esModule",{value:!0}),r.immediateProvider=void 0;var i=t(7629),u=i.Immediate.setImmediate,a=i.Immediate.clearImmediate;r.immediateProvider={setImmediate:function(){for(var e=[],t=0;t<arguments.length;t++)e[t]=arguments[t];var i=r.immediateProvider.delegate;return((null==i?void 0:i.setImmediate)||u).apply(void 0,o([],n(e)))},clearImmediate:function(e){var t=r.immediateProvider.delegate;return((null==t?void 0:t.clearImmediate)||a)(e)},delegate:void 0}},8203:function(e,r){var t=this&&this.__read||function(e,r){var t="function"==typeof Symbol&&e[Symbol.iterator];if(!t)return e;var n,o,i=t.call(e),u=[];try{for(;(void 0===r||r-- >0)&&!(n=i.next()).done;)u.push(n.value)}catch(e){o={error:e}}finally{try{n&&!n.done&&(t=i.return)&&t.call(i)}finally{if(o)throw o.error}}return u},n=this&&this.__spreadArray||function(e,r){for(var t=0,n=r.length,o=e.length;t<n;t++,o++)e[o]=r[t];return e};Object.defineProperty(r,"__esModule",{value:!0}),r.intervalProvider=void 0,r.intervalProvider={setInterval:function(e,o){for(var i=[],u=2;u<arguments.length;u++)i[u-2]=arguments[u];var a=r.intervalProvider.delegate;return(null==a?void 0:a.setInterval)?a.setInterval.apply(a,n([e,o],t(i))):setInterval.apply(void 0,n([e,o],t(i)))},clearInterval:function(e){var t=r.intervalProvider.delegate;return((null==t?void 0:t.clearInterval)||clearInterval)(e)},delegate:void 0}},6813:(e,r)=>{Object.defineProperty(r,"__esModule",{value:!0}),r.performanceTimestampProvider=void 0,r.performanceTimestampProvider={now:function(){return(r.performanceTimestampProvider.delegate||performance).now()},delegate:void 0}},8615:(e,r,t)=>{Object.defineProperty(r,"__esModule",{value:!0}),r.queue=r.queueScheduler=void 0;var n=t(6201),o=t(5860);r.queueScheduler=new o.QueueScheduler(n.QueueAction),r.queue=r.queueScheduler},4590:function(e,r){var t=this&&this.__read||function(e,r){var t="function"==typeof Symbol&&e[Symbol.iterator];if(!t)return e;var n,o,i=t.call(e),u=[];try{for(;(void 0===r||r-- >0)&&!(n=i.next()).done;)u.push(n.value)}catch(e){o={error:e}}finally{try{n&&!n.done&&(t=i.return)&&t.call(i)}finally{if(o)throw o.error}}return u},n=this&&this.__spreadArray||function(e,r){for(var t=0,n=r.length,o=e.length;t<n;t++,o++)e[o]=r[t];return e};Object.defineProperty(r,"__esModule",{value:!0}),r.timeoutProvider=void 0,r.timeoutProvider={setTimeout:function(e,o){for(var i=[],u=2;u<arguments.length;u++)i[u-2]=arguments[u];var a=r.timeoutProvider.delegate;return(null==a?void 0:a.setTimeout)?a.setTimeout.apply(a,n([e,o],t(i))):setTimeout.apply(void 0,n([e,o],t(i)))},clearTimeout:function(e){var t=r.timeoutProvider.delegate;return((null==t?void 0:t.clearTimeout)||clearTimeout)(e)},delegate:void 0}},3725:(e,r)=>{function t(){return"function"==typeof Symbol&&Symbol.iterator?Symbol.iterator:"@@iterator"}Object.defineProperty(r,"__esModule",{value:!0}),r.iterator=r.getSymbolIterator=void 0,r.getSymbolIterator=t,r.iterator=t()},2801:(e,r)=>{Object.defineProperty(r,"__esModule",{value:!0}),r.observable=void 0,r.observable="function"==typeof Symbol&&Symbol.observable||"@@observable"},8433:(e,r)=>{Object.defineProperty(r,"__esModule",{value:!0})},2351:(e,r,t)=>{Object.defineProperty(r,"__esModule",{value:!0}),r.ArgumentOutOfRangeError=void 0;var n=t(7029);r.ArgumentOutOfRangeError=n.createErrorClass((function(e){return function(){e(this),this.name="ArgumentOutOfRangeError",this.message="argument out of range"}}))},9474:(e,r,t)=>{Object.defineProperty(r,"__esModule",{value:!0}),r.EmptyError=void 0;var n=t(7029);r.EmptyError=n.createErrorClass((function(e){return function(){e(this),this.name="EmptyError",this.message="no elements in sequence"}}))},7629:(e,r)=>{Object.defineProperty(r,"__esModule",{value:!0}),r.TestTools=r.Immediate=void 0;var t,n=1,o={};function i(e){return e in o&&(delete o[e],!0)}r.Immediate={setImmediate:function(e){var r=n++;return o[r]=!0,t||(t=Promise.resolve()),t.then((function(){return i(r)&&e()})),r},clearImmediate:function(e){i(e)}},r.TestTools={pending:function(){return Object.keys(o).length}}},8598:(e,r,t)=>{Object.defineProperty(r,"__esModule",{value:!0}),r.NotFoundError=void 0;var n=t(7029);r.NotFoundError=n.createErrorClass((function(e){return function(r){e(this),this.name="NotFoundError",this.message=r}}))},2642:(e,r,t)=>{Object.defineProperty(r,"__esModule",{value:!0}),r.ObjectUnsubscribedError=void 0;var n=t(7029);r.ObjectUnsubscribedError=n.createErrorClass((function(e){return function(){e(this),this.name="ObjectUnsubscribedError",this.message="object unsubscribed"}}))},6156:(e,r,t)=>{Object.defineProperty(r,"__esModule",{value:!0}),r.SequenceError=void 0;var n=t(7029);r.SequenceError=n.createErrorClass((function(e){return function(r){e(this),this.name="SequenceError",this.message=r}}))},4805:(e,r,t)=>{Object.defineProperty(r,"__esModule",{value:!0}),r.UnsubscriptionError=void 0;var n=t(7029);r.UnsubscriptionError=n.createErrorClass((function(e){return function(r){e(this),this.message=r?r.length+" errors occurred during unsubscription:\n"+r.map((function(e,r){return r+1+") "+e.toString()})).join("\n  "):"",this.name="UnsubscriptionError",this.errors=r}}))},2433:(e,r,t)=>{Object.defineProperty(r,"__esModule",{value:!0}),r.popNumber=r.popScheduler=r.popResultSelector=void 0;var n=t(3005),o=t(9016);function i(e){return e[e.length-1]}r.popResultSelector=function(e){return n.isFunction(i(e))?e.pop():void 0},r.popScheduler=function(e){return o.isScheduler(i(e))?e.pop():void 0},r.popNumber=function(e,r){return"number"==typeof i(e)?e.pop():r}},1203:(e,r)=>{Object.defineProperty(r,"__esModule",{value:!0}),r.argsArgArrayOrObject=void 0;var t=Array.isArray,n=Object.getPrototypeOf,o=Object.prototype,i=Object.keys;r.argsArgArrayOrObject=function(e){if(1===e.length){var r=e[0];if(t(r))return{args:r,keys:null};if((a=r)&&"object"==typeof a&&n(a)===o){var u=i(r);return{args:u.map((function(e){return r[e]})),keys:u}}}var a;return{args:e,keys:null}}},5498:(e,r)=>{Object.defineProperty(r,"__esModule",{value:!0}),r.argsOrArgArray=void 0;var t=Array.isArray;r.argsOrArgArray=function(e){return 1===e.length&&t(e[0])?e[0]:e}},6967:(e,r)=>{Object.defineProperty(r,"__esModule",{value:!0}),r.arrRemove=void 0,r.arrRemove=function(e,r){if(e){var t=e.indexOf(r);0<=t&&e.splice(t,1)}}},7029:(e,r)=>{Object.defineProperty(r,"__esModule",{value:!0}),r.createErrorClass=void 0,r.createErrorClass=function(e){var r=e((function(e){Error.call(e),e.stack=(new Error).stack}));return r.prototype=Object.create(Error.prototype),r.prototype.constructor=r,r}},641:(e,r)=>{Object.defineProperty(r,"__esModule",{value:!0}),r.createObject=void 0,r.createObject=function(e,r){return e.reduce((function(e,t,n){return e[t]=r[n],e}),{})}},6110:(e,r,t)=>{Object.defineProperty(r,"__esModule",{value:!0}),r.captureError=r.errorContext=void 0;var n=t(3280),o=null;r.errorContext=function(e){if(n.config.useDeprecatedSynchronousErrorHandling){var r=!o;if(r&&(o={errorThrown:!1,error:null}),e(),r){var t=o,i=t.errorThrown,u=t.error;if(o=null,i)throw u}}else e()},r.captureError=function(e){n.config.useDeprecatedSynchronousErrorHandling&&o&&(o.errorThrown=!0,o.error=e)}},7738:(e,r)=>{Object.defineProperty(r,"__esModule",{value:!0}),r.executeSchedule=void 0,r.executeSchedule=function(e,r,t,n,o){void 0===n&&(n=0),void 0===o&&(o=!1);var i=r.schedule((function(){t(),o?e.add(this.schedule(null,n)):this.unsubscribe()}),n);if(e.add(i),!o)return i}},4781:(e,r)=>{Object.defineProperty(r,"__esModule",{value:!0}),r.identity=void 0,r.identity=function(e){return e}},3909:(e,r)=>{Object.defineProperty(r,"__esModule",{value:!0}),r.isArrayLike=void 0,r.isArrayLike=function(e){return e&&"number"==typeof e.length&&"function"!=typeof e}},9595:(e,r,t)=>{Object.defineProperty(r,"__esModule",{value:!0}),r.isAsyncIterable=void 0;var n=t(3005);r.isAsyncIterable=function(e){return Symbol.asyncIterator&&n.isFunction(null==e?void 0:e[Symbol.asyncIterator])}},1677:(e,r)=>{Object.defineProperty(r,"__esModule",{value:!0}),r.isValidDate=void 0,r.isValidDate=function(e){return e instanceof Date&&!isNaN(e)}},3005:(e,r)=>{Object.defineProperty(r,"__esModule",{value:!0}),r.isFunction=void 0,r.isFunction=function(e){return"function"==typeof e}},9500:(e,r,t)=>{Object.defineProperty(r,"__esModule",{value:!0}),r.isInteropObservable=void 0;var n=t(2801),o=t(3005);r.isInteropObservable=function(e){return o.isFunction(e[n.observable])}},2743:(e,r,t)=>{Object.defineProperty(r,"__esModule",{value:!0}),r.isIterable=void 0;var n=t(3725),o=t(3005);r.isIterable=function(e){return o.isFunction(null==e?void 0:e[n.iterator])}},8386:(e,r,t)=>{Object.defineProperty(r,"__esModule",{value:!0}),r.isObservable=void 0;var n=t(2419),o=t(3005);r.isObservable=function(e){return!!e&&(e instanceof n.Observable||o.isFunction(e.lift)&&o.isFunction(e.subscribe))}},6018:(e,r,t)=>{Object.defineProperty(r,"__esModule",{value:!0}),r.isPromise=void 0;var n=t(3005);r.isPromise=function(e){return n.isFunction(null==e?void 0:e.then)}},7823:function(e,r,t){var n=this&&this.__generator||function(e,r){var t,n,o,i,u={label:0,sent:function(){if(1&o[0])throw o[1];return o[1]},trys:[],ops:[]};return i={next:a(0),throw:a(1),return:a(2)},"function"==typeof Symbol&&(i[Symbol.iterator]=function(){return this}),i;function a(i){return function(a){return function(i){if(t)throw new TypeError("Generator is already executing.");for(;u;)try{if(t=1,n&&(o=2&i[0]?n.return:i[0]?n.throw||((o=n.return)&&o.call(n),0):n.next)&&!(o=o.call(n,i[1])).done)return o;switch(n=0,o&&(i=[2&i[0],o.value]),i[0]){case 0:case 1:o=i;break;case 4:return u.label++,{value:i[1],done:!1};case 5:u.label++,n=i[1],i=[0];continue;case 7:i=u.ops.pop(),u.trys.pop();continue;default:if(!((o=(o=u.trys).length>0&&o[o.length-1])||6!==i[0]&&2!==i[0])){u=0;continue}if(3===i[0]&&(!o||i[1]>o[0]&&i[1]<o[3])){u.label=i[1];break}if(6===i[0]&&u.label<o[1]){u.label=o[1],o=i;break}if(o&&u.label<o[2]){u.label=o[2],u.ops.push(i);break}o[2]&&u.ops.pop(),u.trys.pop();continue}i=r.call(e,u)}catch(e){i=[6,e],n=0}finally{t=o=0}if(5&i[0])throw i[1];return{value:i[0]?i[1]:void 0,done:!0}}([i,a])}}},o=this&&this.__await||function(e){return this instanceof o?(this.v=e,this):new o(e)},i=this&&this.__asyncGenerator||function(e,r,t){if(!Symbol.asyncIterator)throw new TypeError("Symbol.asyncIterator is not defined.");var n,i=t.apply(e,r||[]),u=[];return n={},a("next"),a("throw"),a("return"),n[Symbol.asyncIterator]=function(){return this},n;function a(e){i[e]&&(n[e]=function(r){return new Promise((function(t,n){u.push([e,r,t,n])>1||c(e,r)}))})}function c(e,r){try{(t=i[e](r)).value instanceof o?Promise.resolve(t.value.v).then(l,s):f(u[0][2],t)}catch(e){f(u[0][3],e)}var t}function l(e){c("next",e)}function s(e){c("throw",e)}function f(e,r){e(r),u.shift(),u.length&&c(u[0][0],u[0][1])}};Object.defineProperty(r,"__esModule",{value:!0}),r.isReadableStreamLike=r.readableStreamLikeToAsyncGenerator=void 0;var u=t(3005);r.readableStreamLikeToAsyncGenerator=function(e){return i(this,arguments,(function(){var r,t,i;return n(this,(function(n){switch(n.label){case 0:r=e.getReader(),n.label=1;case 1:n.trys.push([1,,9,10]),n.label=2;case 2:return[4,o(r.read())];case 3:return t=n.sent(),i=t.value,t.done?[4,o(void 0)]:[3,5];case 4:return[2,n.sent()];case 5:return[4,o(i)];case 6:return[4,n.sent()];case 7:return n.sent(),[3,2];case 8:return[3,10];case 9:return r.releaseLock(),[7];case 10:return[2]}}))}))},r.isReadableStreamLike=function(e){return u.isFunction(null==e?void 0:e.getReader)}},9016:(e,r,t)=>{Object.defineProperty(r,"__esModule",{value:!0}),r.isScheduler=void 0;var n=t(3005);r.isScheduler=function(e){return e&&n.isFunction(e.schedule)}},4935:(e,r,t)=>{Object.defineProperty(r,"__esModule",{value:!0}),r.operate=r.hasLift=void 0;var n=t(3005);function o(e){return n.isFunction(null==e?void 0:e.lift)}r.hasLift=o,r.operate=function(e){return function(r){if(o(r))return r.lift((function(r){try{return e(r,this)}catch(e){this.error(e)}}));throw new TypeError("Unable to lift unknown Observable type")}}},1914:function(e,r,t){var n=this&&this.__read||function(e,r){var t="function"==typeof Symbol&&e[Symbol.iterator];if(!t)return e;var n,o,i=t.call(e),u=[];try{for(;(void 0===r||r-- >0)&&!(n=i.next()).done;)u.push(n.value)}catch(e){o={error:e}}finally{try{n&&!n.done&&(t=i.return)&&t.call(i)}finally{if(o)throw o.error}}return u},o=this&&this.__spreadArray||function(e,r){for(var t=0,n=r.length,o=e.length;t<n;t++,o++)e[o]=r[t];return e};Object.defineProperty(r,"__esModule",{value:!0}),r.mapOneOrManyArgs=void 0;var i=t(7291),u=Array.isArray;r.mapOneOrManyArgs=function(e){return i.map((function(r){return function(e,r){return u(r)?e.apply(void 0,o([],n(r))):e(r)}(e,r)}))}},2576:(e,r)=>{Object.defineProperty(r,"__esModule",{value:!0}),r.noop=void 0,r.noop=function(){}},8634:(e,r)=>{Object.defineProperty(r,"__esModule",{value:!0}),r.not=void 0,r.not=function(e,r){return function(t,n){return!e.call(r,t,n)}}},9985:(e,r,t)=>{Object.defineProperty(r,"__esModule",{value:!0}),r.pipeFromArray=r.pipe=void 0;var n=t(4781);function o(e){return 0===e.length?n.identity:1===e.length?e[0]:function(r){return e.reduce((function(e,r){return r(e)}),r)}}r.pipe=function(){for(var e=[],r=0;r<arguments.length;r++)e[r]=arguments[r];return o(e)},r.pipeFromArray=o},7968:(e,r,t)=>{Object.defineProperty(r,"__esModule",{value:!0}),r.reportUnhandledError=void 0;var n=t(3280),o=t(4590);r.reportUnhandledError=function(e){o.timeoutProvider.setTimeout((function(){var r=n.config.onUnhandledError;if(!r)throw e;r(e)}))}},9906:(e,r)=>{Object.defineProperty(r,"__esModule",{value:!0}),r.createInvalidObservableTypeError=void 0,r.createInvalidObservableTypeError=function(e){return new TypeError("You provided "+(null!==e&&"object"==typeof e?"an invalid object":"'"+e+"'")+" where a stream was expected. You can provide an Observable, Promise, ReadableStream, Array, AsyncIterable, or Iterable.")}},3445:function(e,r,t){var n,o=this&&this.__extends||(n=function(e,r){return n=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,r){e.__proto__=r}||function(e,r){for(var t in r)Object.prototype.hasOwnProperty.call(r,t)&&(e[t]=r[t])},n(e,r)},function(e,r){if("function"!=typeof r&&null!==r)throw new TypeError("Class extends value "+String(r)+" is not a constructor or null");function t(){this.constructor=e}n(e,r),e.prototype=null===r?Object.create(r):(t.prototype=r.prototype,new t)});Object.defineProperty(r,"__esModule",{value:!0}),r.Background=void 0;var i=t(8913),u=t(4575),a=function(e){function r(r,t,n){var o=e.call(this,r,t)||this;return o._image=n,o}return o(r,e),r.prototype.onCreate=function(){},r.prototype.onResize=function(e,r){var t=r*i.BACKGROUND_ASPECT_RATIO,n=r;this._rect=[{x:(e-t)/2,y:0,width:t,height:n}]},r.prototype.update=function(e,r){},r.prototype.render=function(){var e=this;this._rect.forEach((function(r){r.x<=e.ctx.canvas.width&&(0,u.drawImage)(e.ctx,e._image,r)}))},r}(t(9334).Component);r.Background=a},9334:(e,r)=>{Object.defineProperty(r,"__esModule",{value:!0}),r.Component=void 0;r.Component=function(e,r,t){this.ctx=e,this.gameState=r,this.props=t,this.onCreate(),this.onResize(e.canvas.width,e.canvas.height)}},1490:function(e,r,t){var n,o=this&&this.__extends||(n=function(e,r){return n=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,r){e.__proto__=r}||function(e,r){for(var t in r)Object.prototype.hasOwnProperty.call(r,t)&&(e[t]=r[t])},n(e,r)},function(e,r){if("function"!=typeof r&&null!==r)throw new TypeError("Class extends value "+String(r)+" is not a constructor or null");function t(){this.constructor=e}n(e,r),e.prototype=null===r?Object.create(r):(t.prototype=r.prototype,new t)}),i=this&&this.__assign||function(){return i=Object.assign||function(e){for(var r,t=1,n=arguments.length;t<n;t++)for(var o in r=arguments[t])Object.prototype.hasOwnProperty.call(r,o)&&(e[o]=r[o]);return e},i.apply(this,arguments)};Object.defineProperty(r,"__esModule",{value:!0}),r.EnterUsername=void 0;var u=t(2872),a=t(1600),c=t(7419),l=t(9334),s=t(4575),f=t(8913),d=function(e){function r(){return null!==e&&e.apply(this,arguments)||this}return o(r,e),r.prototype.onCreate=function(){},r.prototype.onResize=function(e,r){},r.prototype.update=function(e,r){var t=this;this.gameState.currentState===a.GamePhase.ENTER_NAME&&r.keys.forEach((function(e){1===e.length?t._username+=e:"Backspace"===e?t.removeLastChar():"Enter"===e&&t.submitUsername()}))},r.prototype.render=function(){this.gameState.currentState===a.GamePhase.ENTER_NAME&&((0,s.drawCenteredText)(this.ctx,"Enter username",f.MEDIUM_TEXT_FONT,this.ctx.canvas.width/2,this.ctx.canvas.height/2-60),(0,s.drawCenteredText)(this.ctx,this._username,f.MEDIUM_TEXT_FONT,this.ctx.canvas.width/2,this.ctx.canvas.height))},r.prototype.removeLastChar=function(){this._username.length>0&&(this._username=this._username.substring(0,this._username.length-1))},r.prototype.submitUsername=function(){var e=this;this._username.length>0&&(this.gameState.player.username=this._username,this.gameState.currentState=a.GamePhase.READY,(0,c.fetchPlayerProfile$)(this.gameState.player.username).pipe((0,u.tap)((function(r){e.gameState.player=i(i({},r),{score:0})})),(0,u.catchError)((function(r){return console.error("Profile not found"),e.gameState.player={id:-1,score:0,linesCleared:0,elementsDroped:0,timePlaying:0,highscore:0,username:e._username},(0,u.of)(e.gameState.player)}))).subscribe((function(e){console.log(e)})))},r}(l.Component);r.EnterUsername=d},8860:function(e,r,t){var n,o=this&&this.__extends||(n=function(e,r){return n=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,r){e.__proto__=r}||function(e,r){for(var t in r)Object.prototype.hasOwnProperty.call(r,t)&&(e[t]=r[t])},n(e,r)},function(e,r){if("function"!=typeof r&&null!==r)throw new TypeError("Class extends value "+String(r)+" is not a constructor or null");function t(){this.constructor=e}n(e,r),e.prototype=null===r?Object.create(r):(t.prototype=r.prototype,new t)});Object.defineProperty(r,"__esModule",{value:!0}),r.Highscores=void 0;var i=t(1600),u=t(7419),a=t(9334),c=t(4575),l=t(8913),s=function(e){function r(){return null!==e&&e.apply(this,arguments)||this}return o(r,e),r.prototype.onCreate=function(){this._shown=!1},r.prototype.onResize=function(e,r){},r.prototype.update=function(e,r){var t=this;this.gameState.currentState===i.GamePhase.READY&&"KeyH"==r[0]&&(this._shown=!this._shown,this._shown&&(0,u.fetchHighScore$)().pipe().subscribe((function(e){t._highscores=e})))},r.prototype.render=function(){var e=this;this._shown&&this._highscores&&((0,c.drawText)(this.ctx,"Highscores:",l.MEDIUM_TEXT_FONT,.6*this.ctx.canvas.width,100),this._highscores.forEach((function(r,t){(0,c.drawText)(e.ctx,"".concat(t+1,". ").concat(r.username.padEnd(5),"- ").concat(r.highscore.toString().padStart(2)),l.MEDIUM_TEXT_FONT,.6*e.ctx.canvas.width,Math.pow(50,t)+150)})))},r}(a.Component);r.Highscores=s},4083:function(e,r,t){var n,o=this&&this.__extends||(n=function(e,r){return n=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,r){e.__proto__=r}||function(e,r){for(var t in r)Object.prototype.hasOwnProperty.call(r,t)&&(e[t]=r[t])},n(e,r)},function(e,r){if("function"!=typeof r&&null!==r)throw new TypeError("Class extends value "+String(r)+" is not a constructor or null");function t(){this.constructor=e}n(e,r),e.prototype=null===r?Object.create(r):(t.prototype=r.prototype,new t)});Object.defineProperty(r,"__esModule",{value:!0}),r.Overlay=void 0;var i=t(8913),u=t(1600),a=t(4575),c=function(e){function r(){return null!==e&&e.apply(this,arguments)||this}return o(r,e),r.prototype.onCreate=function(){},r.prototype.onResize=function(e,r){},r.prototype.update=function(e,r){},r.prototype.render=function(){switch(this.gameState.currentState){case u.GamePhase.READY:this.renderDarkenScreen(),this.renderHighscore(),this.renderControls(),this.renderInfo();break;case u.GamePhase.PLAYING:this.renderCurrentScore();break;case u.GamePhase.GAME_OVER:this.renderDarkenScreen(),this.renderGameOver(),this.renderHighscore(),this.renderControls(),this.renderInfo();break;case u.GamePhase.ENTER_NAME:this.renderDarkenScreen()}},r.prototype.renderControls=function(){(0,a.drawText)(this.ctx,"[H]-Highscores",i.SMALL_TEXT_FONT,10,this.ctx.canvas.height-30)},r.prototype.renderCurrentScore=function(){var e=this.gameState.score.toString();(0,a.drawText)(this.ctx,e,i.LARGE_TEXT_FONT,this.ctx.canvas.width+5,this.ctx.canvas.height+5)},r.prototype.renderEnterToStart=function(){(0,a.drawCenteredText)(this.ctx,"Press Enter To Start",i.MEDIUM_TEXT_FONT,this.ctx.canvas.width/2,this.ctx.canvas.height/2)},r.prototype.renderHighscore=function(){var e="Highscore: ".concat(this.gameState.player.highscore);(0,a.drawCenteredText)(this.ctx,this.gameState.player.username,i.MEDIUM_TEXT_FONT,this.ctx.canvas.width/2,this.ctx.canvas.height/2-100),(0,a.drawCenteredText)(this.ctx,e,i.MEDIUM_TEXT_FONT,this.ctx.canvas.width/2,this.ctx.canvas.height/2-50)},r.prototype.renderInfo=function(){var e="Lines cleared: ".concat(this.gameState.player.linesCleared);(0,a.drawCenteredText)(this.ctx,e,i.SMALL_TEXT_FONT,this.ctx.canvas.width/2,this.ctx.canvas.height-10)},r.prototype.renderGameOver=function(){var e="Score: ".concat(this.gameState.score);(0,a.drawCenteredText)(this.ctx,"GAME OVER",i.LARGE_TEXT_FONT,this.ctx.canvas.width/2,100),(0,a.drawCenteredText)(this.ctx,e,i.MEDIUM_TEXT_FONT,this.ctx.canvas.width/2,150)},r.prototype.renderDarkenScreen=function(){this.ctx.globalAlpha=.3,this.ctx.fillStyle="black",this.ctx.fillRect(0,0,this.ctx.canvas.width,this.ctx.canvas.height),this.ctx.globalAlpha=1},r}(t(9334).Component);r.Overlay=c},8913:(e,r,t)=>{Object.defineProperty(r,"__esModule",{value:!0}),r.INITIAL_GAME_STATE=r.NUM_SHAPES=r.INITIAL_TIME_MS=r.MIN_INTERVAL_MS=r.STARTING_DELTA_TIME=r.FONT_SHADOW_SIZE=r.FONT_SHADOW_COLOR=r.FONT_COLOR=r.LARGE_TEXT_FONT=r.MEDIUM_TEXT_FONT=r.SMALL_TEXT_FONT=r.BOARD_BORDER_SHIFT_Y=r.BOARD_BORDER_SHIFT_X=r.BOARD_BLOCKS_HEIGHt=r.BOARD_BLOCKS_WIDTH=r.BACKGROUND_ASPECT_RATIO=r.API_URL=void 0;var n=t(1600);r.API_URL="http://localhost:3000",r.BACKGROUND_ASPECT_RATIO=3.125,r.BOARD_BLOCKS_WIDTH=10,r.BOARD_BLOCKS_HEIGHt=20,r.BOARD_BORDER_SHIFT_X=1/12,r.BOARD_BORDER_SHIFT_Y=1/22,r.SMALL_TEXT_FONT='1rem "Press Start 2P"',r.MEDIUM_TEXT_FONT='2rem "Press Start 2P"',r.LARGE_TEXT_FONT='3rem "Press Start 2P"',r.FONT_COLOR="white",r.FONT_SHADOW_COLOR="gray",r.FONT_SHADOW_SIZE=3,r.STARTING_DELTA_TIME=.8,r.MIN_INTERVAL_MS=50,r.INITIAL_TIME_MS=800,r.NUM_SHAPES=7,r.INITIAL_GAME_STATE={currentState:n.GamePhase.ENTER_NAME,score:0,player:{id:0,username:"",score:0,linesCleared:0,elementsDroped:0,timePlaying:0,highscore:0}}},1600:(e,r)=>{var t;Object.defineProperty(r,"__esModule",{value:!0}),r.GamePhase=void 0,function(e){e[e.ENTER_NAME=0]="ENTER_NAME",e[e.READY=1]="READY",e[e.PLAYING=2]="PLAYING",e[e.GAME_OVER=3]="GAME_OVER"}(t||(r.GamePhase=t={}))},7769:(e,r,t)=>{Object.defineProperty(r,"__esModule",{value:!0}),r.Game=void 0;var n=t(2872),o=t(4555),i=t(1490),u=t(8860),a=t(4083),c=t(3445),l=t(8913),s=t(5939),f=t(166),d=t(5757),p=function(){function e(e){if(!e.getContext)throw new Error("Canvas is not supported in this browser");this.canvas=e,this.ctx=e.getContext("2d"),this.ctx.imageSmoothingEnabled=!1,this.gameState=l.INITIAL_GAME_STATE,this.background=null,this.shapes=[],this.enterUsername=new i.EnterUsername(this.ctx,this.gameState),this.highscores=new u.Highscores(this.ctx,this.gameState),this.overlay=new a.Overlay(this.ctx,this.gameState),this.gameTick$=(0,s.decreasingIntervalObservable)(l.MIN_INTERVAL_MS,s.formula),this.shapeSpawner$=(0,f.shapeSpawner)()}return e.prototype.init=function(){var e=this;(0,n.fromEvent)(window,"resize").pipe((0,n.debounceTime)(100)).subscribe((function(){e.resize(window.innerWidth,window.innerHeight)})),(0,o.loadBackgroundImage$)().subscribe((function(r){e.background=new c.Background(e.ctx,e.gameState,r)})),this.keyboardInput$=(0,d.getKeysDown)()},e.prototype.startRound=function(){this.shapeSpawner$.pipe((0,n.switchMap)((function(e){return(0,o.loadShapeSprites$)().pipe((0,n.toArray)(),(0,n.map)((function(r){return[r,e]})))})),(0,n.map)((function(e){console.log(e)})))},e.prototype.resize=function(e,r){this.canvas.width=e,this.canvas.height=r,this.ctx.imageSmoothingEnabled=!1},e}();r.Game=p},7419:function(e,r,t){var n=this&&this.__awaiter||function(e,r,t,n){return new(t||(t=Promise))((function(o,i){function u(e){try{c(n.next(e))}catch(e){i(e)}}function a(e){try{c(n.throw(e))}catch(e){i(e)}}function c(e){var r;e.done?o(e.value):(r=e.value,r instanceof t?r:new t((function(e){e(r)}))).then(u,a)}c((n=n.apply(e,r||[])).next())}))},o=this&&this.__generator||function(e,r){var t,n,o,i,u={label:0,sent:function(){if(1&o[0])throw o[1];return o[1]},trys:[],ops:[]};return i={next:a(0),throw:a(1),return:a(2)},"function"==typeof Symbol&&(i[Symbol.iterator]=function(){return this}),i;function a(a){return function(c){return function(a){if(t)throw new TypeError("Generator is already executing.");for(;i&&(i=0,a[0]&&(u=0)),u;)try{if(t=1,n&&(o=2&a[0]?n.return:a[0]?n.throw||((o=n.return)&&o.call(n),0):n.next)&&!(o=o.call(n,a[1])).done)return o;switch(n=0,o&&(a=[2&a[0],o.value]),a[0]){case 0:case 1:o=a;break;case 4:return u.label++,{value:a[1],done:!1};case 5:u.label++,n=a[1],a=[0];continue;case 7:a=u.ops.pop(),u.trys.pop();continue;default:if(!((o=(o=u.trys).length>0&&o[o.length-1])||6!==a[0]&&2!==a[0])){u=0;continue}if(3===a[0]&&(!o||a[1]>o[0]&&a[1]<o[3])){u.label=a[1];break}if(6===a[0]&&u.label<o[1]){u.label=o[1],o=a;break}if(o&&u.label<o[2]){u.label=o[2],u.ops.push(a);break}o[2]&&u.ops.pop(),u.trys.pop();continue}a=r.call(e,u)}catch(e){a=[6,e],n=0}finally{t=o=0}if(5&a[0])throw a[1];return{value:a[0]?a[1]:void 0,done:!0}}([a,c])}}};Object.defineProperty(r,"__esModule",{value:!0}),r.putPlayerProfile=r.fetchSprite$=r.fetchHighScore$=r.fetchPlayerProfile$=r.fetchFromApi$=void 0;var i=t(2872),u=t(8913),a=function(e,r){return(0,i.from)(fetch("".concat(u.API_URL,"/").concat(e)).then((function(e){if(e.ok)return e.json();throw new Error("Failed to fetch")})).catch((function(e){return console.error(e)})))};r.fetchFromApi$=a,r.fetchPlayerProfile$=function(e){return a("users?username=".concat(e))},r.fetchHighScore$=function(){return a("users?_sort=highscore&_order=desc&_limit=10")},r.fetchSprite$=function(){return a("sprites")},r.putPlayerProfile=function(e){var r,t,i,a;return 0!==e.id&&(r="PUT",t="/users"),i=t,a={method:r,body:JSON.stringify(e),headers:{"Content-Type":"application/json"}},n(void 0,void 0,void 0,(function(){var e;return o(this,(function(r){switch(r.label){case 0:return[4,fetch(u.API_URL+i,a)];case 1:if(!(e=r.sent()).ok)throw new Error("An error occured while fetching: "+e.status);return[2,e.json()]}}))}))}},5939:(e,r,t)=>{Object.defineProperty(r,"__esModule",{value:!0}),r.formula=r.decreasingIntervalObservable=void 0;var n=t(2872),o=t(8913);r.decreasingIntervalObservable=function(e,r){return(0,n.defer)((function(){return(0,n.interval)(e).pipe((0,n.map)((function(e){return r(o.INITIAL_TIME_MS,e)})),(0,n.concatMap)((function(e){return(0,n.timer)(e)})))}))},r.formula=function(e,r){return e/(1+(r-r%5)/5)}},4555:(e,r,t)=>{Object.defineProperty(r,"__esModule",{value:!0}),r.loadShapeSprites$=r.loadBackgroundImage$=void 0;var n=t(2872),o=t(7419);r.loadBackgroundImage$=function(){return(0,n.from)((0,o.fetchSprite$)()).pipe((0,n.mergeMap)((function(e){var r=e.path+e.board,t=new Image;return t.src=r,(0,n.fromEvent)(t,"load").pipe((0,n.map)((function(e){return e.target})))})))},r.loadShapeSprites$=function(){return(0,n.from)((0,o.fetchSprite$)()).pipe((0,n.mergeMap)((function(e){var r=e.shapes.map((function(r){return e.path+r.image})),t=[];return r.forEach((function(e,r){var n=new Image;n.src=e,t.push(n)})),(0,n.fromEvent)(t,"load").pipe((0,n.map)((function(e){return e.target})))})))}},5757:(e,r,t)=>{Object.defineProperty(r,"__esModule",{value:!0}),r.getKeysDown=void 0;var n=t(2872);r.getKeysDown=function(){return(0,n.fromEvent)(document,"keydown").pipe((0,n.throttleTime)(10),(0,n.map)((function(e){return{code:e.code,key:e.key}})))}},4575:(e,r,t)=>{Object.defineProperty(r,"__esModule",{value:!0}),r.drawCenteredText=r.drawText=r.drawImageRegion=r.drawImage=r.fillRect=void 0;var n=t(8913);r.fillRect=function(e,r){e.fillRect(r.x,r.y,r.width,r.height)},r.drawImage=function(e,r,t){e.drawImage(r,t.x,t.y,t.width,t.height)},r.drawImageRegion=function(e,r,t,n){e.drawImage(r,n.x,n.y,n.width,n.height,t.x,t.y,t.width,t.height)};var o=function(e,r){e.font=r,e.fillStyle=n.FONT_COLOR,e.shadowColor=n.FONT_SHADOW_COLOR,e.shadowOffsetX=n.FONT_SHADOW_SIZE,e.shadowOffsetY=n.FONT_SHADOW_SIZE},i=function(e){e.shadowColor=void 0,e.shadowOffsetX=0,e.shadowOffsetY=0};r.drawText=function(e,r,t,n,u){o(e,t),e.fillText(r,n,u),i(e)},r.drawCenteredText=function(e,r,t,n,u){o(e,t),e.fillText(r,n-e.measureText(r).width/2,u),i(e)}},166:(e,r,t)=>{Object.defineProperty(r,"__esModule",{value:!0}),r.shapeSpawner=void 0;var n=t(2872);r.shapeSpawner=function(){return(0,n.defer)((function(){return(0,n.of)(Math.floor(7*Math.random()))}))}}},i={};function u(e){var r=i[e];if(void 0!==r)return r.exports;var t=i[e]={exports:{}};return o[e].call(t.exports,t,t.exports,u),t.exports}e=u(2872),r=u(7769),t=u(166),n=u(4555),(0,e.fromEvent)(window,"load").subscribe((function(){var e=document.createElement("canvas");e.id="game-container",e.width=window.innerWidth,e.height=window.innerHeight,document.body.appendChild(e),new r.Game(e).init()})),console.log("ccccccccccc"),(0,t.shapeSpawner)().pipe((0,e.switchMap)((function(r){return(0,n.loadShapeSprites$)().pipe((0,e.toArray)(),(0,e.map)((function(e){return console.log(e),[e,r]})))})),(0,e.map)((function(e){e[0],0===e[1]&&console.log("aaaaa")}))).subscribe((function(e){console.log("wot")})),console.log("ddddd")})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,