(()=>{"use strict";var e,t,r={2872:function(e,t,r){var n=this&&this.__createBinding||(Object.create?function(e,t,r,n){void 0===n&&(n=r),Object.defineProperty(e,n,{enumerable:!0,get:function(){return t[r]}})}:function(e,t,r,n){void 0===n&&(n=r),e[n]=t[r]}),o=this&&this.__exportStar||function(e,t){for(var r in e)"default"===r||Object.prototype.hasOwnProperty.call(t,r)||n(t,e,r)};Object.defineProperty(t,"__esModule",{value:!0}),t.interval=t.iif=t.generate=t.fromEventPattern=t.fromEvent=t.from=t.forkJoin=t.empty=t.defer=t.connectable=t.concat=t.combineLatest=t.bindNodeCallback=t.bindCallback=t.UnsubscriptionError=t.TimeoutError=t.SequenceError=t.ObjectUnsubscribedError=t.NotFoundError=t.EmptyError=t.ArgumentOutOfRangeError=t.firstValueFrom=t.lastValueFrom=t.isObservable=t.identity=t.noop=t.pipe=t.NotificationKind=t.Notification=t.Subscriber=t.Subscription=t.Scheduler=t.VirtualAction=t.VirtualTimeScheduler=t.animationFrameScheduler=t.animationFrame=t.queueScheduler=t.queue=t.asyncScheduler=t.async=t.asapScheduler=t.asap=t.AsyncSubject=t.ReplaySubject=t.BehaviorSubject=t.Subject=t.animationFrames=t.observable=t.ConnectableObservable=t.Observable=void 0,t.filter=t.expand=t.exhaustMap=t.exhaustAll=t.exhaust=t.every=t.endWith=t.elementAt=t.distinctUntilKeyChanged=t.distinctUntilChanged=t.distinct=t.dematerialize=t.delayWhen=t.delay=t.defaultIfEmpty=t.debounceTime=t.debounce=t.count=t.connect=t.concatWith=t.concatMapTo=t.concatMap=t.concatAll=t.combineLatestWith=t.combineLatestAll=t.combineAll=t.catchError=t.bufferWhen=t.bufferToggle=t.bufferTime=t.bufferCount=t.buffer=t.auditTime=t.audit=t.config=t.NEVER=t.EMPTY=t.scheduled=t.zip=t.using=t.timer=t.throwError=t.range=t.race=t.partition=t.pairs=t.onErrorResumeNext=t.of=t.never=t.merge=void 0,t.switchMap=t.switchAll=t.subscribeOn=t.startWith=t.skipWhile=t.skipUntil=t.skipLast=t.skip=t.single=t.shareReplay=t.share=t.sequenceEqual=t.scan=t.sampleTime=t.sample=t.refCount=t.retryWhen=t.retry=t.repeatWhen=t.repeat=t.reduce=t.raceWith=t.publishReplay=t.publishLast=t.publishBehavior=t.publish=t.pluck=t.pairwise=t.onErrorResumeNextWith=t.observeOn=t.multicast=t.min=t.mergeWith=t.mergeScan=t.mergeMapTo=t.mergeMap=t.flatMap=t.mergeAll=t.max=t.materialize=t.mapTo=t.map=t.last=t.isEmpty=t.ignoreElements=t.groupBy=t.first=t.findIndex=t.find=t.finalize=void 0,t.zipWith=t.zipAll=t.withLatestFrom=t.windowWhen=t.windowToggle=t.windowTime=t.windowCount=t.window=t.toArray=t.timestamp=t.timeoutWith=t.timeout=t.timeInterval=t.throwIfEmpty=t.throttleTime=t.throttle=t.tap=t.takeWhile=t.takeUntil=t.takeLast=t.take=t.switchScan=t.switchMapTo=void 0;var i=r(2419);Object.defineProperty(t,"Observable",{enumerable:!0,get:function(){return i.Observable}});var u=r(9518);Object.defineProperty(t,"ConnectableObservable",{enumerable:!0,get:function(){return u.ConnectableObservable}});var a=r(2801);Object.defineProperty(t,"observable",{enumerable:!0,get:function(){return a.observable}});var c=r(9106);Object.defineProperty(t,"animationFrames",{enumerable:!0,get:function(){return c.animationFrames}});var s=r(3032);Object.defineProperty(t,"Subject",{enumerable:!0,get:function(){return s.Subject}});var l=r(5240);Object.defineProperty(t,"BehaviorSubject",{enumerable:!0,get:function(){return l.BehaviorSubject}});var f=r(3274);Object.defineProperty(t,"ReplaySubject",{enumerable:!0,get:function(){return f.ReplaySubject}});var d=r(280);Object.defineProperty(t,"AsyncSubject",{enumerable:!0,get:function(){return d.AsyncSubject}});var p=r(580);Object.defineProperty(t,"asap",{enumerable:!0,get:function(){return p.asap}}),Object.defineProperty(t,"asapScheduler",{enumerable:!0,get:function(){return p.asapScheduler}});var h=r(2445);Object.defineProperty(t,"async",{enumerable:!0,get:function(){return h.async}}),Object.defineProperty(t,"asyncScheduler",{enumerable:!0,get:function(){return h.asyncScheduler}});var v=r(8615);Object.defineProperty(t,"queue",{enumerable:!0,get:function(){return v.queue}}),Object.defineProperty(t,"queueScheduler",{enumerable:!0,get:function(){return v.queueScheduler}});var b=r(3660);Object.defineProperty(t,"animationFrame",{enumerable:!0,get:function(){return b.animationFrame}}),Object.defineProperty(t,"animationFrameScheduler",{enumerable:!0,get:function(){return b.animationFrameScheduler}});var y=r(4123);Object.defineProperty(t,"VirtualTimeScheduler",{enumerable:!0,get:function(){return y.VirtualTimeScheduler}}),Object.defineProperty(t,"VirtualAction",{enumerable:!0,get:function(){return y.VirtualAction}});var m=r(218);Object.defineProperty(t,"Scheduler",{enumerable:!0,get:function(){return m.Scheduler}});var _=r(3865);Object.defineProperty(t,"Subscription",{enumerable:!0,get:function(){return _.Subscription}});var O=r(5125);Object.defineProperty(t,"Subscriber",{enumerable:!0,get:function(){return O.Subscriber}});var g=r(3104);Object.defineProperty(t,"Notification",{enumerable:!0,get:function(){return g.Notification}}),Object.defineProperty(t,"NotificationKind",{enumerable:!0,get:function(){return g.NotificationKind}});var S=r(9985);Object.defineProperty(t,"pipe",{enumerable:!0,get:function(){return S.pipe}});var w=r(2576);Object.defineProperty(t,"noop",{enumerable:!0,get:function(){return w.noop}});var P=r(4781);Object.defineProperty(t,"identity",{enumerable:!0,get:function(){return P.identity}});var j=r(8386);Object.defineProperty(t,"isObservable",{enumerable:!0,get:function(){return j.isObservable}});var A=r(9309);Object.defineProperty(t,"lastValueFrom",{enumerable:!0,get:function(){return A.lastValueFrom}});var x=r(8182);Object.defineProperty(t,"firstValueFrom",{enumerable:!0,get:function(){return x.firstValueFrom}});var E=r(2351);Object.defineProperty(t,"ArgumentOutOfRangeError",{enumerable:!0,get:function(){return E.ArgumentOutOfRangeError}});var M=r(9474);Object.defineProperty(t,"EmptyError",{enumerable:!0,get:function(){return M.EmptyError}});var T=r(8598);Object.defineProperty(t,"NotFoundError",{enumerable:!0,get:function(){return T.NotFoundError}});var I=r(2642);Object.defineProperty(t,"ObjectUnsubscribedError",{enumerable:!0,get:function(){return I.ObjectUnsubscribedError}});var C=r(6156);Object.defineProperty(t,"SequenceError",{enumerable:!0,get:function(){return C.SequenceError}});var R=r(4173);Object.defineProperty(t,"TimeoutError",{enumerable:!0,get:function(){return R.TimeoutError}});var F=r(4805);Object.defineProperty(t,"UnsubscriptionError",{enumerable:!0,get:function(){return F.UnsubscriptionError}});var k=r(3050);Object.defineProperty(t,"bindCallback",{enumerable:!0,get:function(){return k.bindCallback}});var B=r(8130);Object.defineProperty(t,"bindNodeCallback",{enumerable:!0,get:function(){return B.bindNodeCallback}});var L=r(9258);Object.defineProperty(t,"combineLatest",{enumerable:!0,get:function(){return L.combineLatest}});var N=r(2239);Object.defineProperty(t,"concat",{enumerable:!0,get:function(){return N.concat}});var D=r(2873);Object.defineProperty(t,"connectable",{enumerable:!0,get:function(){return D.connectable}});var G=r(7885);Object.defineProperty(t,"defer",{enumerable:!0,get:function(){return G.defer}});var W=r(6332);Object.defineProperty(t,"empty",{enumerable:!0,get:function(){return W.empty}});var U=r(7245);Object.defineProperty(t,"forkJoin",{enumerable:!0,get:function(){return U.forkJoin}});var H=r(5432);Object.defineProperty(t,"from",{enumerable:!0,get:function(){return H.from}});var z=r(3267);Object.defineProperty(t,"fromEvent",{enumerable:!0,get:function(){return z.fromEvent}});var Y=r(470);Object.defineProperty(t,"fromEventPattern",{enumerable:!0,get:function(){return Y.fromEventPattern}});var K=r(4303);Object.defineProperty(t,"generate",{enumerable:!0,get:function(){return K.generate}});var X=r(1757);Object.defineProperty(t,"iif",{enumerable:!0,get:function(){return X.iif}});var V=r(8990);Object.defineProperty(t,"interval",{enumerable:!0,get:function(){return V.interval}});var q=r(1846);Object.defineProperty(t,"merge",{enumerable:!0,get:function(){return q.merge}});var $=r(1339);Object.defineProperty(t,"never",{enumerable:!0,get:function(){return $.never}});var J=r(5726);Object.defineProperty(t,"of",{enumerable:!0,get:function(){return J.of}});var Z=r(724);Object.defineProperty(t,"onErrorResumeNext",{enumerable:!0,get:function(){return Z.onErrorResumeNext}});var Q=r(4380);Object.defineProperty(t,"pairs",{enumerable:!0,get:function(){return Q.pairs}});var ee=r(7273);Object.defineProperty(t,"partition",{enumerable:!0,get:function(){return ee.partition}});var te=r(5182);Object.defineProperty(t,"race",{enumerable:!0,get:function(){return te.race}});var re=r(322);Object.defineProperty(t,"range",{enumerable:!0,get:function(){return re.range}});var ne=r(2098);Object.defineProperty(t,"throwError",{enumerable:!0,get:function(){return ne.throwError}});var oe=r(7513);Object.defineProperty(t,"timer",{enumerable:!0,get:function(){return oe.timer}});var ie=r(2962);Object.defineProperty(t,"using",{enumerable:!0,get:function(){return ie.using}});var ue=r(7654);Object.defineProperty(t,"zip",{enumerable:!0,get:function(){return ue.zip}});var ae=r(5207);Object.defineProperty(t,"scheduled",{enumerable:!0,get:function(){return ae.scheduled}});var ce=r(6332);Object.defineProperty(t,"EMPTY",{enumerable:!0,get:function(){return ce.EMPTY}});var se=r(1339);Object.defineProperty(t,"NEVER",{enumerable:!0,get:function(){return se.NEVER}}),o(r(8433),t);var le=r(3280);Object.defineProperty(t,"config",{enumerable:!0,get:function(){return le.config}});var fe=r(6474);Object.defineProperty(t,"audit",{enumerable:!0,get:function(){return fe.audit}});var de=r(5382);Object.defineProperty(t,"auditTime",{enumerable:!0,get:function(){return de.auditTime}});var pe=r(9715);Object.defineProperty(t,"buffer",{enumerable:!0,get:function(){return pe.buffer}});var he=r(3814);Object.defineProperty(t,"bufferCount",{enumerable:!0,get:function(){return he.bufferCount}});var ve=r(7211);Object.defineProperty(t,"bufferTime",{enumerable:!0,get:function(){return ve.bufferTime}});var be=r(4943);Object.defineProperty(t,"bufferToggle",{enumerable:!0,get:function(){return be.bufferToggle}});var ye=r(1240);Object.defineProperty(t,"bufferWhen",{enumerable:!0,get:function(){return ye.bufferWhen}});var me=r(9548);Object.defineProperty(t,"catchError",{enumerable:!0,get:function(){return me.catchError}});var _e=r(2128);Object.defineProperty(t,"combineAll",{enumerable:!0,get:function(){return _e.combineAll}});var Oe=r(3240);Object.defineProperty(t,"combineLatestAll",{enumerable:!0,get:function(){return Oe.combineLatestAll}});var ge=r(5024);Object.defineProperty(t,"combineLatestWith",{enumerable:!0,get:function(){return ge.combineLatestWith}});var Se=r(4413);Object.defineProperty(t,"concatAll",{enumerable:!0,get:function(){return Se.concatAll}});var we=r(7498);Object.defineProperty(t,"concatMap",{enumerable:!0,get:function(){return we.concatMap}});var Pe=r(6109);Object.defineProperty(t,"concatMapTo",{enumerable:!0,get:function(){return Pe.concatMapTo}});var je=r(9664);Object.defineProperty(t,"concatWith",{enumerable:!0,get:function(){return je.concatWith}});var Ae=r(1995);Object.defineProperty(t,"connect",{enumerable:!0,get:function(){return Ae.connect}});var xe=r(993);Object.defineProperty(t,"count",{enumerable:!0,get:function(){return xe.count}});var Ee=r(496);Object.defineProperty(t,"debounce",{enumerable:!0,get:function(){return Ee.debounce}});var Me=r(1385);Object.defineProperty(t,"debounceTime",{enumerable:!0,get:function(){return Me.debounceTime}});var Te=r(1658);Object.defineProperty(t,"defaultIfEmpty",{enumerable:!0,get:function(){return Te.defaultIfEmpty}});var Ie=r(5841);Object.defineProperty(t,"delay",{enumerable:!0,get:function(){return Ie.delay}});var Ce=r(8798);Object.defineProperty(t,"delayWhen",{enumerable:!0,get:function(){return Ce.delayWhen}});var Re=r(1080);Object.defineProperty(t,"dematerialize",{enumerable:!0,get:function(){return Re.dematerialize}});var Fe=r(3054);Object.defineProperty(t,"distinct",{enumerable:!0,get:function(){return Fe.distinct}});var ke=r(8737);Object.defineProperty(t,"distinctUntilChanged",{enumerable:!0,get:function(){return ke.distinctUntilChanged}});var Be=r(7957);Object.defineProperty(t,"distinctUntilKeyChanged",{enumerable:!0,get:function(){return Be.distinctUntilKeyChanged}});var Le=r(8633);Object.defineProperty(t,"elementAt",{enumerable:!0,get:function(){return Le.elementAt}});var Ne=r(911);Object.defineProperty(t,"endWith",{enumerable:!0,get:function(){return Ne.endWith}});var De=r(2096);Object.defineProperty(t,"every",{enumerable:!0,get:function(){return De.every}});var Ge=r(67);Object.defineProperty(t,"exhaust",{enumerable:!0,get:function(){return Ge.exhaust}});var We=r(5337);Object.defineProperty(t,"exhaustAll",{enumerable:!0,get:function(){return We.exhaustAll}});var Ue=r(5635);Object.defineProperty(t,"exhaustMap",{enumerable:!0,get:function(){return Ue.exhaustMap}});var He=r(9745);Object.defineProperty(t,"expand",{enumerable:!0,get:function(){return He.expand}});var ze=r(9154);Object.defineProperty(t,"filter",{enumerable:!0,get:function(){return ze.filter}});var Ye=r(9283);Object.defineProperty(t,"finalize",{enumerable:!0,get:function(){return Ye.finalize}});var Ke=r(7119);Object.defineProperty(t,"find",{enumerable:!0,get:function(){return Ke.find}});var Xe=r(4706);Object.defineProperty(t,"findIndex",{enumerable:!0,get:function(){return Xe.findIndex}});var Ve=r(9219);Object.defineProperty(t,"first",{enumerable:!0,get:function(){return Ve.first}});var qe=r(9749);Object.defineProperty(t,"groupBy",{enumerable:!0,get:function(){return qe.groupBy}});var $e=r(9438);Object.defineProperty(t,"ignoreElements",{enumerable:!0,get:function(){return $e.ignoreElements}});var Je=r(8515);Object.defineProperty(t,"isEmpty",{enumerable:!0,get:function(){return Je.isEmpty}});var Ze=r(2435);Object.defineProperty(t,"last",{enumerable:!0,get:function(){return Ze.last}});var Qe=r(7291);Object.defineProperty(t,"map",{enumerable:!0,get:function(){return Qe.map}});var et=r(8313);Object.defineProperty(t,"mapTo",{enumerable:!0,get:function(){return et.mapTo}});var tt=r(3209);Object.defineProperty(t,"materialize",{enumerable:!0,get:function(){return tt.materialize}});var rt=r(2620);Object.defineProperty(t,"max",{enumerable:!0,get:function(){return rt.max}});var nt=r(3783);Object.defineProperty(t,"mergeAll",{enumerable:!0,get:function(){return nt.mergeAll}});var ot=r(1788);Object.defineProperty(t,"flatMap",{enumerable:!0,get:function(){return ot.flatMap}});var it=r(9475);Object.defineProperty(t,"mergeMap",{enumerable:!0,get:function(){return it.mergeMap}});var ut=r(1211);Object.defineProperty(t,"mergeMapTo",{enumerable:!0,get:function(){return ut.mergeMapTo}});var at=r(7267);Object.defineProperty(t,"mergeScan",{enumerable:!0,get:function(){return at.mergeScan}});var ct=r(9303);Object.defineProperty(t,"mergeWith",{enumerable:!0,get:function(){return ct.mergeWith}});var st=r(9714);Object.defineProperty(t,"min",{enumerable:!0,get:function(){return st.min}});var lt=r(3848);Object.defineProperty(t,"multicast",{enumerable:!0,get:function(){return lt.multicast}});var ft=r(1184);Object.defineProperty(t,"observeOn",{enumerable:!0,get:function(){return ft.observeOn}});var dt=r(7582);Object.defineProperty(t,"onErrorResumeNextWith",{enumerable:!0,get:function(){return dt.onErrorResumeNextWith}});var pt=r(2731);Object.defineProperty(t,"pairwise",{enumerable:!0,get:function(){return pt.pairwise}});var ht=r(4691);Object.defineProperty(t,"pluck",{enumerable:!0,get:function(){return ht.pluck}});var vt=r(4474);Object.defineProperty(t,"publish",{enumerable:!0,get:function(){return vt.publish}});var bt=r(52);Object.defineProperty(t,"publishBehavior",{enumerable:!0,get:function(){return bt.publishBehavior}});var yt=r(2110);Object.defineProperty(t,"publishLast",{enumerable:!0,get:function(){return yt.publishLast}});var mt=r(9864);Object.defineProperty(t,"publishReplay",{enumerable:!0,get:function(){return mt.publishReplay}});var _t=r(179);Object.defineProperty(t,"raceWith",{enumerable:!0,get:function(){return _t.raceWith}});var Ot=r(122);Object.defineProperty(t,"reduce",{enumerable:!0,get:function(){return Ot.reduce}});var gt=r(5313);Object.defineProperty(t,"repeat",{enumerable:!0,get:function(){return gt.repeat}});var St=r(4068);Object.defineProperty(t,"repeatWhen",{enumerable:!0,get:function(){return St.repeatWhen}});var wt=r(64);Object.defineProperty(t,"retry",{enumerable:!0,get:function(){return wt.retry}});var Pt=r(1188);Object.defineProperty(t,"retryWhen",{enumerable:!0,get:function(){return Pt.retryWhen}});var jt=r(8739);Object.defineProperty(t,"refCount",{enumerable:!0,get:function(){return jt.refCount}});var At=r(4193);Object.defineProperty(t,"sample",{enumerable:!0,get:function(){return At.sample}});var xt=r(6170);Object.defineProperty(t,"sampleTime",{enumerable:!0,get:function(){return xt.sampleTime}});var Et=r(5876);Object.defineProperty(t,"scan",{enumerable:!0,get:function(){return Et.scan}});var Mt=r(1791);Object.defineProperty(t,"sequenceEqual",{enumerable:!0,get:function(){return Mt.sequenceEqual}});var Tt=r(5137);Object.defineProperty(t,"share",{enumerable:!0,get:function(){return Tt.share}});var It=r(1348);Object.defineProperty(t,"shareReplay",{enumerable:!0,get:function(){return It.shareReplay}});var Ct=r(8242);Object.defineProperty(t,"single",{enumerable:!0,get:function(){return Ct.single}});var Rt=r(3169);Object.defineProperty(t,"skip",{enumerable:!0,get:function(){return Rt.skip}});var Ft=r(2454);Object.defineProperty(t,"skipLast",{enumerable:!0,get:function(){return Ft.skipLast}});var kt=r(6931);Object.defineProperty(t,"skipUntil",{enumerable:!0,get:function(){return kt.skipUntil}});var Bt=r(7913);Object.defineProperty(t,"skipWhile",{enumerable:!0,get:function(){return Bt.skipWhile}});var Lt=r(9234);Object.defineProperty(t,"startWith",{enumerable:!0,get:function(){return Lt.startWith}});var Nt=r(276);Object.defineProperty(t,"subscribeOn",{enumerable:!0,get:function(){return Nt.subscribeOn}});var Dt=r(9253);Object.defineProperty(t,"switchAll",{enumerable:!0,get:function(){return Dt.switchAll}});var Gt=r(8518);Object.defineProperty(t,"switchMap",{enumerable:!0,get:function(){return Gt.switchMap}});var Wt=r(1173);Object.defineProperty(t,"switchMapTo",{enumerable:!0,get:function(){return Wt.switchMapTo}});var Ut=r(3855);Object.defineProperty(t,"switchScan",{enumerable:!0,get:function(){return Ut.switchScan}});var Ht=r(4783);Object.defineProperty(t,"take",{enumerable:!0,get:function(){return Ht.take}});var zt=r(1980);Object.defineProperty(t,"takeLast",{enumerable:!0,get:function(){return zt.takeLast}});var Yt=r(9845);Object.defineProperty(t,"takeUntil",{enumerable:!0,get:function(){return Yt.takeUntil}});var Kt=r(6060);Object.defineProperty(t,"takeWhile",{enumerable:!0,get:function(){return Kt.takeWhile}});var Xt=r(1138);Object.defineProperty(t,"tap",{enumerable:!0,get:function(){return Xt.tap}});var Vt=r(7306);Object.defineProperty(t,"throttle",{enumerable:!0,get:function(){return Vt.throttle}});var qt=r(8968);Object.defineProperty(t,"throttleTime",{enumerable:!0,get:function(){return qt.throttleTime}});var $t=r(1779);Object.defineProperty(t,"throwIfEmpty",{enumerable:!0,get:function(){return $t.throwIfEmpty}});var Jt=r(8005);Object.defineProperty(t,"timeInterval",{enumerable:!0,get:function(){return Jt.timeInterval}});var Zt=r(4173);Object.defineProperty(t,"timeout",{enumerable:!0,get:function(){return Zt.timeout}});var Qt=r(7223);Object.defineProperty(t,"timeoutWith",{enumerable:!0,get:function(){return Qt.timeoutWith}});var er=r(8975);Object.defineProperty(t,"timestamp",{enumerable:!0,get:function(){return er.timestamp}});var tr=r(2);Object.defineProperty(t,"toArray",{enumerable:!0,get:function(){return tr.toArray}});var rr=r(2826);Object.defineProperty(t,"window",{enumerable:!0,get:function(){return rr.window}});var nr=r(7526);Object.defineProperty(t,"windowCount",{enumerable:!0,get:function(){return nr.windowCount}});var or=r(8294);Object.defineProperty(t,"windowTime",{enumerable:!0,get:function(){return or.windowTime}});var ir=r(1883);Object.defineProperty(t,"windowToggle",{enumerable:!0,get:function(){return ir.windowToggle}});var ur=r(4309);Object.defineProperty(t,"windowWhen",{enumerable:!0,get:function(){return ur.windowWhen}});var ar=r(3041);Object.defineProperty(t,"withLatestFrom",{enumerable:!0,get:function(){return ar.withLatestFrom}});var cr=r(8593);Object.defineProperty(t,"zipAll",{enumerable:!0,get:function(){return cr.zipAll}});var sr=r(8096);Object.defineProperty(t,"zipWith",{enumerable:!0,get:function(){return sr.zipWith}})},280:function(e,t,r){var n,o=this&&this.__extends||(n=function(e,t){return n=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,t){e.__proto__=t}||function(e,t){for(var r in t)Object.prototype.hasOwnProperty.call(t,r)&&(e[r]=t[r])},n(e,t)},function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Class extends value "+String(t)+" is not a constructor or null");function r(){this.constructor=e}n(e,t),e.prototype=null===t?Object.create(t):(r.prototype=t.prototype,new r)});Object.defineProperty(t,"__esModule",{value:!0}),t.AsyncSubject=void 0;var i=function(e){function t(){var t=null!==e&&e.apply(this,arguments)||this;return t._value=null,t._hasValue=!1,t._isComplete=!1,t}return o(t,e),t.prototype._checkFinalizedStatuses=function(e){var t=this,r=t.hasError,n=t._hasValue,o=t._value,i=t.thrownError,u=t.isStopped,a=t._isComplete;r?e.error(i):(u||a)&&(n&&e.next(o),e.complete())},t.prototype.next=function(e){this.isStopped||(this._value=e,this._hasValue=!0)},t.prototype.complete=function(){var t=this,r=t._hasValue,n=t._value;t._isComplete||(this._isComplete=!0,r&&e.prototype.next.call(this,n),e.prototype.complete.call(this))},t}(r(3032).Subject);t.AsyncSubject=i},5240:function(e,t,r){var n,o=this&&this.__extends||(n=function(e,t){return n=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,t){e.__proto__=t}||function(e,t){for(var r in t)Object.prototype.hasOwnProperty.call(t,r)&&(e[r]=t[r])},n(e,t)},function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Class extends value "+String(t)+" is not a constructor or null");function r(){this.constructor=e}n(e,t),e.prototype=null===t?Object.create(t):(r.prototype=t.prototype,new r)});Object.defineProperty(t,"__esModule",{value:!0}),t.BehaviorSubject=void 0;var i=function(e){function t(t){var r=e.call(this)||this;return r._value=t,r}return o(t,e),Object.defineProperty(t.prototype,"value",{get:function(){return this.getValue()},enumerable:!1,configurable:!0}),t.prototype._subscribe=function(t){var r=e.prototype._subscribe.call(this,t);return!r.closed&&t.next(this._value),r},t.prototype.getValue=function(){var e=this,t=e.hasError,r=e.thrownError,n=e._value;if(t)throw r;return this._throwIfClosed(),n},t.prototype.next=function(t){e.prototype.next.call(this,this._value=t)},t}(r(3032).Subject);t.BehaviorSubject=i},3104:(e,t,r)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.observeNotification=t.Notification=t.NotificationKind=void 0;var n,o=r(6332),i=r(5726),u=r(2098),a=r(3005);(n=t.NotificationKind||(t.NotificationKind={})).NEXT="N",n.ERROR="E",n.COMPLETE="C";var c=function(){function e(e,t,r){this.kind=e,this.value=t,this.error=r,this.hasValue="N"===e}return e.prototype.observe=function(e){return s(this,e)},e.prototype.do=function(e,t,r){var n=this,o=n.kind,i=n.value,u=n.error;return"N"===o?null==e?void 0:e(i):"E"===o?null==t?void 0:t(u):null==r?void 0:r()},e.prototype.accept=function(e,t,r){var n;return a.isFunction(null===(n=e)||void 0===n?void 0:n.next)?this.observe(e):this.do(e,t,r)},e.prototype.toObservable=function(){var e=this,t=e.kind,r=e.value,n=e.error,a="N"===t?i.of(r):"E"===t?u.throwError((function(){return n})):"C"===t?o.EMPTY:0;if(!a)throw new TypeError("Unexpected notification kind "+t);return a},e.createNext=function(t){return new e("N",t)},e.createError=function(t){return new e("E",void 0,t)},e.createComplete=function(){return e.completeNotification},e.completeNotification=new e("C"),e}();function s(e,t){var r,n,o,i=e,u=i.kind,a=i.value,c=i.error;if("string"!=typeof u)throw new TypeError('Invalid notification, missing "kind"');"N"===u?null===(r=t.next)||void 0===r||r.call(t,a):"E"===u?null===(n=t.error)||void 0===n||n.call(t,c):null===(o=t.complete)||void 0===o||o.call(t)}t.Notification=c,t.observeNotification=s},7286:(e,t)=>{function r(e,t,r){return{kind:e,value:t,error:r}}Object.defineProperty(t,"__esModule",{value:!0}),t.createNotification=t.nextNotification=t.errorNotification=t.COMPLETE_NOTIFICATION=void 0,t.COMPLETE_NOTIFICATION=r("C",void 0,void 0),t.errorNotification=function(e){return r("E",void 0,e)},t.nextNotification=function(e){return r("N",e,void 0)},t.createNotification=r},2419:(e,t,r)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.Observable=void 0;var n=r(5125),o=r(3865),i=r(2801),u=r(9985),a=r(3280),c=r(3005),s=r(6110),l=function(){function e(e){e&&(this._subscribe=e)}return e.prototype.lift=function(t){var r=new e;return r.source=this,r.operator=t,r},e.prototype.subscribe=function(e,t,r){var i,u=this,a=(i=e)&&i instanceof n.Subscriber||function(e){return e&&c.isFunction(e.next)&&c.isFunction(e.error)&&c.isFunction(e.complete)}(i)&&o.isSubscription(i)?e:new n.SafeSubscriber(e,t,r);return s.errorContext((function(){var e=u,t=e.operator,r=e.source;a.add(t?t.call(a,r):r?u._subscribe(a):u._trySubscribe(a))})),a},e.prototype._trySubscribe=function(e){try{return this._subscribe(e)}catch(t){e.error(t)}},e.prototype.forEach=function(e,t){var r=this;return new(t=f(t))((function(t,o){var i=new n.SafeSubscriber({next:function(t){try{e(t)}catch(e){o(e),i.unsubscribe()}},error:o,complete:t});r.subscribe(i)}))},e.prototype._subscribe=function(e){var t;return null===(t=this.source)||void 0===t?void 0:t.subscribe(e)},e.prototype[i.observable]=function(){return this},e.prototype.pipe=function(){for(var e=[],t=0;t<arguments.length;t++)e[t]=arguments[t];return u.pipeFromArray(e)(this)},e.prototype.toPromise=function(e){var t=this;return new(e=f(e))((function(e,r){var n;t.subscribe((function(e){return n=e}),(function(e){return r(e)}),(function(){return e(n)}))}))},e.create=function(t){return new e(t)},e}();function f(e){var t;return null!==(t=null!=e?e:a.config.Promise)&&void 0!==t?t:Promise}t.Observable=l},3274:function(e,t,r){var n,o=this&&this.__extends||(n=function(e,t){return n=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,t){e.__proto__=t}||function(e,t){for(var r in t)Object.prototype.hasOwnProperty.call(t,r)&&(e[r]=t[r])},n(e,t)},function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Class extends value "+String(t)+" is not a constructor or null");function r(){this.constructor=e}n(e,t),e.prototype=null===t?Object.create(t):(r.prototype=t.prototype,new r)});Object.defineProperty(t,"__esModule",{value:!0}),t.ReplaySubject=void 0;var i=r(3032),u=r(7950),a=function(e){function t(t,r,n){void 0===t&&(t=1/0),void 0===r&&(r=1/0),void 0===n&&(n=u.dateTimestampProvider);var o=e.call(this)||this;return o._bufferSize=t,o._windowTime=r,o._timestampProvider=n,o._buffer=[],o._infiniteTimeWindow=!0,o._infiniteTimeWindow=r===1/0,o._bufferSize=Math.max(1,t),o._windowTime=Math.max(1,r),o}return o(t,e),t.prototype.next=function(t){var r=this,n=r.isStopped,o=r._buffer,i=r._infiniteTimeWindow,u=r._timestampProvider,a=r._windowTime;n||(o.push(t),!i&&o.push(u.now()+a)),this._trimBuffer(),e.prototype.next.call(this,t)},t.prototype._subscribe=function(e){this._throwIfClosed(),this._trimBuffer();for(var t=this._innerSubscribe(e),r=this._infiniteTimeWindow,n=this._buffer.slice(),o=0;o<n.length&&!e.closed;o+=r?1:2)e.next(n[o]);return this._checkFinalizedStatuses(e),t},t.prototype._trimBuffer=function(){var e=this,t=e._bufferSize,r=e._timestampProvider,n=e._buffer,o=e._infiniteTimeWindow,i=(o?1:2)*t;if(t<1/0&&i<n.length&&n.splice(0,n.length-i),!o){for(var u=r.now(),a=0,c=1;c<n.length&&n[c]<=u;c+=2)a=c;a&&n.splice(0,a+1)}},t}(i.Subject);t.ReplaySubject=a},218:(e,t,r)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.Scheduler=void 0;var n=r(7950),o=function(){function e(t,r){void 0===r&&(r=e.now),this.schedulerActionCtor=t,this.now=r}return e.prototype.schedule=function(e,t,r){return void 0===t&&(t=0),new this.schedulerActionCtor(this,e).schedule(r,t)},e.now=n.dateTimestampProvider.now,e}();t.Scheduler=o},3032:function(e,t,r){var n,o=this&&this.__extends||(n=function(e,t){return n=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,t){e.__proto__=t}||function(e,t){for(var r in t)Object.prototype.hasOwnProperty.call(t,r)&&(e[r]=t[r])},n(e,t)},function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Class extends value "+String(t)+" is not a constructor or null");function r(){this.constructor=e}n(e,t),e.prototype=null===t?Object.create(t):(r.prototype=t.prototype,new r)}),i=this&&this.__values||function(e){var t="function"==typeof Symbol&&Symbol.iterator,r=t&&e[t],n=0;if(r)return r.call(e);if(e&&"number"==typeof e.length)return{next:function(){return e&&n>=e.length&&(e=void 0),{value:e&&e[n++],done:!e}}};throw new TypeError(t?"Object is not iterable.":"Symbol.iterator is not defined.")};Object.defineProperty(t,"__esModule",{value:!0}),t.AnonymousSubject=t.Subject=void 0;var u=r(2419),a=r(3865),c=r(2642),s=r(6967),l=r(6110),f=function(e){function t(){var t=e.call(this)||this;return t.closed=!1,t.currentObservers=null,t.observers=[],t.isStopped=!1,t.hasError=!1,t.thrownError=null,t}return o(t,e),t.prototype.lift=function(e){var t=new d(this,this);return t.operator=e,t},t.prototype._throwIfClosed=function(){if(this.closed)throw new c.ObjectUnsubscribedError},t.prototype.next=function(e){var t=this;l.errorContext((function(){var r,n;if(t._throwIfClosed(),!t.isStopped){t.currentObservers||(t.currentObservers=Array.from(t.observers));try{for(var o=i(t.currentObservers),u=o.next();!u.done;u=o.next())u.value.next(e)}catch(e){r={error:e}}finally{try{u&&!u.done&&(n=o.return)&&n.call(o)}finally{if(r)throw r.error}}}}))},t.prototype.error=function(e){var t=this;l.errorContext((function(){if(t._throwIfClosed(),!t.isStopped){t.hasError=t.isStopped=!0,t.thrownError=e;for(var r=t.observers;r.length;)r.shift().error(e)}}))},t.prototype.complete=function(){var e=this;l.errorContext((function(){if(e._throwIfClosed(),!e.isStopped){e.isStopped=!0;for(var t=e.observers;t.length;)t.shift().complete()}}))},t.prototype.unsubscribe=function(){this.isStopped=this.closed=!0,this.observers=this.currentObservers=null},Object.defineProperty(t.prototype,"observed",{get:function(){var e;return(null===(e=this.observers)||void 0===e?void 0:e.length)>0},enumerable:!1,configurable:!0}),t.prototype._trySubscribe=function(t){return this._throwIfClosed(),e.prototype._trySubscribe.call(this,t)},t.prototype._subscribe=function(e){return this._throwIfClosed(),this._checkFinalizedStatuses(e),this._innerSubscribe(e)},t.prototype._innerSubscribe=function(e){var t=this,r=this,n=r.hasError,o=r.isStopped,i=r.observers;return n||o?a.EMPTY_SUBSCRIPTION:(this.currentObservers=null,i.push(e),new a.Subscription((function(){t.currentObservers=null,s.arrRemove(i,e)})))},t.prototype._checkFinalizedStatuses=function(e){var t=this,r=t.hasError,n=t.thrownError,o=t.isStopped;r?e.error(n):o&&e.complete()},t.prototype.asObservable=function(){var e=new u.Observable;return e.source=this,e},t.create=function(e,t){return new d(e,t)},t}(u.Observable);t.Subject=f;var d=function(e){function t(t,r){var n=e.call(this)||this;return n.destination=t,n.source=r,n}return o(t,e),t.prototype.next=function(e){var t,r;null===(r=null===(t=this.destination)||void 0===t?void 0:t.next)||void 0===r||r.call(t,e)},t.prototype.error=function(e){var t,r;null===(r=null===(t=this.destination)||void 0===t?void 0:t.error)||void 0===r||r.call(t,e)},t.prototype.complete=function(){var e,t;null===(t=null===(e=this.destination)||void 0===e?void 0:e.complete)||void 0===t||t.call(e)},t.prototype._subscribe=function(e){var t,r;return null!==(r=null===(t=this.source)||void 0===t?void 0:t.subscribe(e))&&void 0!==r?r:a.EMPTY_SUBSCRIPTION},t}(f);t.AnonymousSubject=d},5125:function(e,t,r){var n,o=this&&this.__extends||(n=function(e,t){return n=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,t){e.__proto__=t}||function(e,t){for(var r in t)Object.prototype.hasOwnProperty.call(t,r)&&(e[r]=t[r])},n(e,t)},function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Class extends value "+String(t)+" is not a constructor or null");function r(){this.constructor=e}n(e,t),e.prototype=null===t?Object.create(t):(r.prototype=t.prototype,new r)});Object.defineProperty(t,"__esModule",{value:!0}),t.EMPTY_OBSERVER=t.SafeSubscriber=t.Subscriber=void 0;var i=r(3005),u=r(3865),a=r(3280),c=r(7968),s=r(2576),l=r(7286),f=r(4590),d=r(6110),p=function(e){function r(r){var n=e.call(this)||this;return n.isStopped=!1,r?(n.destination=r,u.isSubscription(r)&&r.add(n)):n.destination=t.EMPTY_OBSERVER,n}return o(r,e),r.create=function(e,t,r){return new y(e,t,r)},r.prototype.next=function(e){this.isStopped?_(l.nextNotification(e),this):this._next(e)},r.prototype.error=function(e){this.isStopped?_(l.errorNotification(e),this):(this.isStopped=!0,this._error(e))},r.prototype.complete=function(){this.isStopped?_(l.COMPLETE_NOTIFICATION,this):(this.isStopped=!0,this._complete())},r.prototype.unsubscribe=function(){this.closed||(this.isStopped=!0,e.prototype.unsubscribe.call(this),this.destination=null)},r.prototype._next=function(e){this.destination.next(e)},r.prototype._error=function(e){try{this.destination.error(e)}finally{this.unsubscribe()}},r.prototype._complete=function(){try{this.destination.complete()}finally{this.unsubscribe()}},r}(u.Subscription);t.Subscriber=p;var h=Function.prototype.bind;function v(e,t){return h.call(e,t)}var b=function(){function e(e){this.partialObserver=e}return e.prototype.next=function(e){var t=this.partialObserver;if(t.next)try{t.next(e)}catch(e){m(e)}},e.prototype.error=function(e){var t=this.partialObserver;if(t.error)try{t.error(e)}catch(e){m(e)}else m(e)},e.prototype.complete=function(){var e=this.partialObserver;if(e.complete)try{e.complete()}catch(e){m(e)}},e}(),y=function(e){function t(t,r,n){var o,u,c=e.call(this)||this;return i.isFunction(t)||!t?o={next:null!=t?t:void 0,error:null!=r?r:void 0,complete:null!=n?n:void 0}:c&&a.config.useDeprecatedNextContext?((u=Object.create(t)).unsubscribe=function(){return c.unsubscribe()},o={next:t.next&&v(t.next,u),error:t.error&&v(t.error,u),complete:t.complete&&v(t.complete,u)}):o=t,c.destination=new b(o),c}return o(t,e),t}(p);function m(e){a.config.useDeprecatedSynchronousErrorHandling?d.captureError(e):c.reportUnhandledError(e)}function _(e,t){var r=a.config.onStoppedNotification;r&&f.timeoutProvider.setTimeout((function(){return r(e,t)}))}t.SafeSubscriber=y,t.EMPTY_OBSERVER={closed:!0,next:s.noop,error:function(e){throw e},complete:s.noop}},3865:function(e,t,r){var n=this&&this.__values||function(e){var t="function"==typeof Symbol&&Symbol.iterator,r=t&&e[t],n=0;if(r)return r.call(e);if(e&&"number"==typeof e.length)return{next:function(){return e&&n>=e.length&&(e=void 0),{value:e&&e[n++],done:!e}}};throw new TypeError(t?"Object is not iterable.":"Symbol.iterator is not defined.")},o=this&&this.__read||function(e,t){var r="function"==typeof Symbol&&e[Symbol.iterator];if(!r)return e;var n,o,i=r.call(e),u=[];try{for(;(void 0===t||t-- >0)&&!(n=i.next()).done;)u.push(n.value)}catch(e){o={error:e}}finally{try{n&&!n.done&&(r=i.return)&&r.call(i)}finally{if(o)throw o.error}}return u},i=this&&this.__spreadArray||function(e,t){for(var r=0,n=t.length,o=e.length;r<n;r++,o++)e[o]=t[r];return e};Object.defineProperty(t,"__esModule",{value:!0}),t.isSubscription=t.EMPTY_SUBSCRIPTION=t.Subscription=void 0;var u=r(3005),a=r(4805),c=r(6967),s=function(){function e(e){this.initialTeardown=e,this.closed=!1,this._parentage=null,this._finalizers=null}var t;return e.prototype.unsubscribe=function(){var e,t,r,c,s;if(!this.closed){this.closed=!0;var f=this._parentage;if(f)if(this._parentage=null,Array.isArray(f))try{for(var d=n(f),p=d.next();!p.done;p=d.next())p.value.remove(this)}catch(t){e={error:t}}finally{try{p&&!p.done&&(t=d.return)&&t.call(d)}finally{if(e)throw e.error}}else f.remove(this);var h=this.initialTeardown;if(u.isFunction(h))try{h()}catch(e){s=e instanceof a.UnsubscriptionError?e.errors:[e]}var v=this._finalizers;if(v){this._finalizers=null;try{for(var b=n(v),y=b.next();!y.done;y=b.next()){var m=y.value;try{l(m)}catch(e){s=null!=s?s:[],e instanceof a.UnsubscriptionError?s=i(i([],o(s)),o(e.errors)):s.push(e)}}}catch(e){r={error:e}}finally{try{y&&!y.done&&(c=b.return)&&c.call(b)}finally{if(r)throw r.error}}}if(s)throw new a.UnsubscriptionError(s)}},e.prototype.add=function(t){var r;if(t&&t!==this)if(this.closed)l(t);else{if(t instanceof e){if(t.closed||t._hasParent(this))return;t._addParent(this)}(this._finalizers=null!==(r=this._finalizers)&&void 0!==r?r:[]).push(t)}},e.prototype._hasParent=function(e){var t=this._parentage;return t===e||Array.isArray(t)&&t.includes(e)},e.prototype._addParent=function(e){var t=this._parentage;this._parentage=Array.isArray(t)?(t.push(e),t):t?[t,e]:e},e.prototype._removeParent=function(e){var t=this._parentage;t===e?this._parentage=null:Array.isArray(t)&&c.arrRemove(t,e)},e.prototype.remove=function(t){var r=this._finalizers;r&&c.arrRemove(r,t),t instanceof e&&t._removeParent(this)},e.EMPTY=((t=new e).closed=!0,t),e}();function l(e){u.isFunction(e)?e():e.unsubscribe()}t.Subscription=s,t.EMPTY_SUBSCRIPTION=s.EMPTY,t.isSubscription=function(e){return e instanceof s||e&&"closed"in e&&u.isFunction(e.remove)&&u.isFunction(e.add)&&u.isFunction(e.unsubscribe)}},3280:(e,t)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.config=void 0,t.config={onUnhandledError:null,onStoppedNotification:null,Promise:void 0,useDeprecatedSynchronousErrorHandling:!1,useDeprecatedNextContext:!1}},8182:(e,t,r)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.firstValueFrom=void 0;var n=r(9474),o=r(5125);t.firstValueFrom=function(e,t){var r="object"==typeof t;return new Promise((function(i,u){var a=new o.SafeSubscriber({next:function(e){i(e),a.unsubscribe()},error:u,complete:function(){r?i(t.defaultValue):u(new n.EmptyError)}});e.subscribe(a)}))}},9309:(e,t,r)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.lastValueFrom=void 0;var n=r(9474);t.lastValueFrom=function(e,t){var r="object"==typeof t;return new Promise((function(o,i){var u,a=!1;e.subscribe({next:function(e){u=e,a=!0},error:i,complete:function(){a?o(u):r?o(t.defaultValue):i(new n.EmptyError)}})}))}},9518:function(e,t,r){var n,o=this&&this.__extends||(n=function(e,t){return n=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,t){e.__proto__=t}||function(e,t){for(var r in t)Object.prototype.hasOwnProperty.call(t,r)&&(e[r]=t[r])},n(e,t)},function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Class extends value "+String(t)+" is not a constructor or null");function r(){this.constructor=e}n(e,t),e.prototype=null===t?Object.create(t):(r.prototype=t.prototype,new r)});Object.defineProperty(t,"__esModule",{value:!0}),t.ConnectableObservable=void 0;var i=r(2419),u=r(3865),a=r(8739),c=r(4990),s=r(4935),l=function(e){function t(t,r){var n=e.call(this)||this;return n.source=t,n.subjectFactory=r,n._subject=null,n._refCount=0,n._connection=null,s.hasLift(t)&&(n.lift=t.lift),n}return o(t,e),t.prototype._subscribe=function(e){return this.getSubject().subscribe(e)},t.prototype.getSubject=function(){var e=this._subject;return e&&!e.isStopped||(this._subject=this.subjectFactory()),this._subject},t.prototype._teardown=function(){this._refCount=0;var e=this._connection;this._subject=this._connection=null,null==e||e.unsubscribe()},t.prototype.connect=function(){var e=this,t=this._connection;if(!t){t=this._connection=new u.Subscription;var r=this.getSubject();t.add(this.source.subscribe(c.createOperatorSubscriber(r,void 0,(function(){e._teardown(),r.complete()}),(function(t){e._teardown(),r.error(t)}),(function(){return e._teardown()})))),t.closed&&(this._connection=null,t=u.Subscription.EMPTY)}return t},t.prototype.refCount=function(){return a.refCount()(this)},t}(i.Observable);t.ConnectableObservable=l},3050:(e,t,r)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.bindCallback=void 0;var n=r(9592);t.bindCallback=function(e,t,r){return n.bindCallbackInternals(!1,e,t,r)}},9592:function(e,t,r){var n=this&&this.__read||function(e,t){var r="function"==typeof Symbol&&e[Symbol.iterator];if(!r)return e;var n,o,i=r.call(e),u=[];try{for(;(void 0===t||t-- >0)&&!(n=i.next()).done;)u.push(n.value)}catch(e){o={error:e}}finally{try{n&&!n.done&&(r=i.return)&&r.call(i)}finally{if(o)throw o.error}}return u},o=this&&this.__spreadArray||function(e,t){for(var r=0,n=t.length,o=e.length;r<n;r++,o++)e[o]=t[r];return e};Object.defineProperty(t,"__esModule",{value:!0}),t.bindCallbackInternals=void 0;var i=r(9016),u=r(2419),a=r(276),c=r(1914),s=r(1184),l=r(280);t.bindCallbackInternals=function e(t,r,f,d){if(f){if(!i.isScheduler(f))return function(){for(var n=[],o=0;o<arguments.length;o++)n[o]=arguments[o];return e(t,r,d).apply(this,n).pipe(c.mapOneOrManyArgs(f))};d=f}return d?function(){for(var n=[],o=0;o<arguments.length;o++)n[o]=arguments[o];return e(t,r).apply(this,n).pipe(a.subscribeOn(d),s.observeOn(d))}:function(){for(var e=this,i=[],a=0;a<arguments.length;a++)i[a]=arguments[a];var c=new l.AsyncSubject,s=!0;return new u.Observable((function(u){var a=c.subscribe(u);if(s){s=!1;var l=!1,f=!1;r.apply(e,o(o([],n(i)),[function(){for(var e=[],r=0;r<arguments.length;r++)e[r]=arguments[r];if(t){var n=e.shift();if(null!=n)return void c.error(n)}c.next(1<e.length?e:e[0]),f=!0,l&&c.complete()}])),f&&c.complete(),l=!0}return a}))}}},8130:(e,t,r)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.bindNodeCallback=void 0;var n=r(9592);t.bindNodeCallback=function(e,t,r){return n.bindCallbackInternals(!0,e,t,r)}},9258:(e,t,r)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.combineLatestInit=t.combineLatest=void 0;var n=r(2419),o=r(1203),i=r(5432),u=r(4781),a=r(1914),c=r(2433),s=r(641),l=r(4990),f=r(7738);function d(e,t,r){return void 0===r&&(r=u.identity),function(n){p(t,(function(){for(var o=e.length,u=new Array(o),a=o,c=o,s=function(o){p(t,(function(){var s=i.from(e[o],t),f=!1;s.subscribe(l.createOperatorSubscriber(n,(function(e){u[o]=e,f||(f=!0,c--),c||n.next(r(u.slice()))}),(function(){--a||n.complete()})))}),n)},f=0;f<o;f++)s(f)}),n)}}function p(e,t,r){e?f.executeSchedule(r,e,t):t()}t.combineLatest=function(){for(var e=[],t=0;t<arguments.length;t++)e[t]=arguments[t];var r=c.popScheduler(e),l=c.popResultSelector(e),f=o.argsArgArrayOrObject(e),p=f.args,h=f.keys;if(0===p.length)return i.from([],r);var v=new n.Observable(d(p,r,h?function(e){return s.createObject(h,e)}:u.identity));return l?v.pipe(a.mapOneOrManyArgs(l)):v},t.combineLatestInit=d},2239:(e,t,r)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.concat=void 0;var n=r(4413),o=r(2433),i=r(5432);t.concat=function(){for(var e=[],t=0;t<arguments.length;t++)e[t]=arguments[t];return n.concatAll()(i.from(e,o.popScheduler(e)))}},2873:(e,t,r)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.connectable=void 0;var n=r(3032),o=r(2419),i=r(7885),u={connector:function(){return new n.Subject},resetOnDisconnect:!0};t.connectable=function(e,t){void 0===t&&(t=u);var r=null,n=t.connector,a=t.resetOnDisconnect,c=void 0===a||a,s=n(),l=new o.Observable((function(e){return s.subscribe(e)}));return l.connect=function(){return r&&!r.closed||(r=i.defer((function(){return e})).subscribe(s),c&&r.add((function(){return s=n()}))),r},l}},7885:(e,t,r)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.defer=void 0;var n=r(2419),o=r(7103);t.defer=function(e){return new n.Observable((function(t){o.innerFrom(e()).subscribe(t)}))}},9106:(e,t,r)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.animationFrames=void 0;var n=r(2419),o=r(6813),i=r(505);function u(e){return new n.Observable((function(t){var r=e||o.performanceTimestampProvider,n=r.now(),u=0,a=function(){t.closed||(u=i.animationFrameProvider.requestAnimationFrame((function(o){u=0;var i=r.now();t.next({timestamp:e?i:o,elapsed:i-n}),a()})))};return a(),function(){u&&i.animationFrameProvider.cancelAnimationFrame(u)}}))}t.animationFrames=function(e){return e?u(e):a};var a=u()},6332:(e,t,r)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.empty=t.EMPTY=void 0;var n=r(2419);t.EMPTY=new n.Observable((function(e){return e.complete()})),t.empty=function(e){return e?function(e){return new n.Observable((function(t){return e.schedule((function(){return t.complete()}))}))}(e):t.EMPTY}},7245:(e,t,r)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.forkJoin=void 0;var n=r(2419),o=r(1203),i=r(7103),u=r(2433),a=r(4990),c=r(1914),s=r(641);t.forkJoin=function(){for(var e=[],t=0;t<arguments.length;t++)e[t]=arguments[t];var r=u.popResultSelector(e),l=o.argsArgArrayOrObject(e),f=l.args,d=l.keys,p=new n.Observable((function(e){var t=f.length;if(t)for(var r=new Array(t),n=t,o=t,u=function(t){var u=!1;i.innerFrom(f[t]).subscribe(a.createOperatorSubscriber(e,(function(e){u||(u=!0,o--),r[t]=e}),(function(){return n--}),void 0,(function(){n&&u||(o||e.next(d?s.createObject(d,r):r),e.complete())})))},c=0;c<t;c++)u(c);else e.complete()}));return r?p.pipe(c.mapOneOrManyArgs(r)):p}},5432:(e,t,r)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.from=void 0;var n=r(5207),o=r(7103);t.from=function(e,t){return t?n.scheduled(e,t):o.innerFrom(e)}},3267:function(e,t,r){var n=this&&this.__read||function(e,t){var r="function"==typeof Symbol&&e[Symbol.iterator];if(!r)return e;var n,o,i=r.call(e),u=[];try{for(;(void 0===t||t-- >0)&&!(n=i.next()).done;)u.push(n.value)}catch(e){o={error:e}}finally{try{n&&!n.done&&(r=i.return)&&r.call(i)}finally{if(o)throw o.error}}return u};Object.defineProperty(t,"__esModule",{value:!0}),t.fromEvent=void 0;var o=r(7103),i=r(2419),u=r(9475),a=r(3909),c=r(3005),s=r(1914),l=["addListener","removeListener"],f=["addEventListener","removeEventListener"],d=["on","off"];function p(e,t){return function(r){return function(n){return e[r](t,n)}}}t.fromEvent=function e(t,r,h,v){if(c.isFunction(h)&&(v=h,h=void 0),v)return e(t,r,h).pipe(s.mapOneOrManyArgs(v));var b=n(function(e){return c.isFunction(e.addEventListener)&&c.isFunction(e.removeEventListener)}(t)?f.map((function(e){return function(n){return t[e](r,n,h)}})):function(e){return c.isFunction(e.addListener)&&c.isFunction(e.removeListener)}(t)?l.map(p(t,r)):function(e){return c.isFunction(e.on)&&c.isFunction(e.off)}(t)?d.map(p(t,r)):[],2),y=b[0],m=b[1];if(!y&&a.isArrayLike(t))return u.mergeMap((function(t){return e(t,r,h)}))(o.innerFrom(t));if(!y)throw new TypeError("Invalid event target");return new i.Observable((function(e){var t=function(){for(var t=[],r=0;r<arguments.length;r++)t[r]=arguments[r];return e.next(1<t.length?t:t[0])};return y(t),function(){return m(t)}}))}},470:(e,t,r)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.fromEventPattern=void 0;var n=r(2419),o=r(3005),i=r(1914);t.fromEventPattern=function e(t,r,u){return u?e(t,r).pipe(i.mapOneOrManyArgs(u)):new n.Observable((function(e){var n=function(){for(var t=[],r=0;r<arguments.length;r++)t[r]=arguments[r];return e.next(1===t.length?t[0]:t)},i=t(n);return o.isFunction(r)?function(){return r(n,i)}:void 0}))}},851:(e,t,r)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.fromSubscribable=void 0;var n=r(2419);t.fromSubscribable=function(e){return new n.Observable((function(t){return e.subscribe(t)}))}},4303:function(e,t,r){var n=this&&this.__generator||function(e,t){var r,n,o,i,u={label:0,sent:function(){if(1&o[0])throw o[1];return o[1]},trys:[],ops:[]};return i={next:a(0),throw:a(1),return:a(2)},"function"==typeof Symbol&&(i[Symbol.iterator]=function(){return this}),i;function a(i){return function(a){return function(i){if(r)throw new TypeError("Generator is already executing.");for(;u;)try{if(r=1,n&&(o=2&i[0]?n.return:i[0]?n.throw||((o=n.return)&&o.call(n),0):n.next)&&!(o=o.call(n,i[1])).done)return o;switch(n=0,o&&(i=[2&i[0],o.value]),i[0]){case 0:case 1:o=i;break;case 4:return u.label++,{value:i[1],done:!1};case 5:u.label++,n=i[1],i=[0];continue;case 7:i=u.ops.pop(),u.trys.pop();continue;default:if(!((o=(o=u.trys).length>0&&o[o.length-1])||6!==i[0]&&2!==i[0])){u=0;continue}if(3===i[0]&&(!o||i[1]>o[0]&&i[1]<o[3])){u.label=i[1];break}if(6===i[0]&&u.label<o[1]){u.label=o[1],o=i;break}if(o&&u.label<o[2]){u.label=o[2],u.ops.push(i);break}o[2]&&u.ops.pop(),u.trys.pop();continue}i=t.call(e,u)}catch(e){i=[6,e],n=0}finally{r=o=0}if(5&i[0])throw i[1];return{value:i[0]?i[1]:void 0,done:!0}}([i,a])}}};Object.defineProperty(t,"__esModule",{value:!0}),t.generate=void 0;var o=r(4781),i=r(9016),u=r(7885),a=r(1297);t.generate=function(e,t,r,c,s){var l,f,d,p;function h(){var e;return n(this,(function(n){switch(n.label){case 0:e=p,n.label=1;case 1:return t&&!t(e)?[3,4]:[4,d(e)];case 2:n.sent(),n.label=3;case 3:return e=r(e),[3,1];case 4:return[2]}}))}return 1===arguments.length?(p=(l=e).initialState,t=l.condition,r=l.iterate,f=l.resultSelector,d=void 0===f?o.identity:f,s=l.scheduler):(p=e,!c||i.isScheduler(c)?(d=o.identity,s=c):d=c),u.defer(s?function(){return a.scheduleIterable(h(),s)}:h)}},1757:(e,t,r)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.iif=void 0;var n=r(7885);t.iif=function(e,t,r){return n.defer((function(){return e()?t:r}))}},7103:function(e,t,r){var n=this&&this.__awaiter||function(e,t,r,n){return new(r||(r=Promise))((function(o,i){function u(e){try{c(n.next(e))}catch(e){i(e)}}function a(e){try{c(n.throw(e))}catch(e){i(e)}}function c(e){var t;e.done?o(e.value):(t=e.value,t instanceof r?t:new r((function(e){e(t)}))).then(u,a)}c((n=n.apply(e,t||[])).next())}))},o=this&&this.__generator||function(e,t){var r,n,o,i,u={label:0,sent:function(){if(1&o[0])throw o[1];return o[1]},trys:[],ops:[]};return i={next:a(0),throw:a(1),return:a(2)},"function"==typeof Symbol&&(i[Symbol.iterator]=function(){return this}),i;function a(i){return function(a){return function(i){if(r)throw new TypeError("Generator is already executing.");for(;u;)try{if(r=1,n&&(o=2&i[0]?n.return:i[0]?n.throw||((o=n.return)&&o.call(n),0):n.next)&&!(o=o.call(n,i[1])).done)return o;switch(n=0,o&&(i=[2&i[0],o.value]),i[0]){case 0:case 1:o=i;break;case 4:return u.label++,{value:i[1],done:!1};case 5:u.label++,n=i[1],i=[0];continue;case 7:i=u.ops.pop(),u.trys.pop();continue;default:if(!((o=(o=u.trys).length>0&&o[o.length-1])||6!==i[0]&&2!==i[0])){u=0;continue}if(3===i[0]&&(!o||i[1]>o[0]&&i[1]<o[3])){u.label=i[1];break}if(6===i[0]&&u.label<o[1]){u.label=o[1],o=i;break}if(o&&u.label<o[2]){u.label=o[2],u.ops.push(i);break}o[2]&&u.ops.pop(),u.trys.pop();continue}i=t.call(e,u)}catch(e){i=[6,e],n=0}finally{r=o=0}if(5&i[0])throw i[1];return{value:i[0]?i[1]:void 0,done:!0}}([i,a])}}},i=this&&this.__asyncValues||function(e){if(!Symbol.asyncIterator)throw new TypeError("Symbol.asyncIterator is not defined.");var t,r=e[Symbol.asyncIterator];return r?r.call(e):(e="function"==typeof u?u(e):e[Symbol.iterator](),t={},n("next"),n("throw"),n("return"),t[Symbol.asyncIterator]=function(){return this},t);function n(r){t[r]=e[r]&&function(t){return new Promise((function(n,o){!function(e,t,r,n){Promise.resolve(n).then((function(t){e({value:t,done:r})}),t)}(n,o,(t=e[r](t)).done,t.value)}))}}},u=this&&this.__values||function(e){var t="function"==typeof Symbol&&Symbol.iterator,r=t&&e[t],n=0;if(r)return r.call(e);if(e&&"number"==typeof e.length)return{next:function(){return e&&n>=e.length&&(e=void 0),{value:e&&e[n++],done:!e}}};throw new TypeError(t?"Object is not iterable.":"Symbol.iterator is not defined.")};Object.defineProperty(t,"__esModule",{value:!0}),t.fromReadableStreamLike=t.fromAsyncIterable=t.fromIterable=t.fromPromise=t.fromArrayLike=t.fromInteropObservable=t.innerFrom=void 0;var a=r(3909),c=r(6018),s=r(2419),l=r(9500),f=r(9595),d=r(9906),p=r(2743),h=r(7823),v=r(3005),b=r(7968),y=r(2801);function m(e){return new s.Observable((function(t){var r=e[y.observable]();if(v.isFunction(r.subscribe))return r.subscribe(t);throw new TypeError("Provided object does not correctly implement Symbol.observable")}))}function _(e){return new s.Observable((function(t){for(var r=0;r<e.length&&!t.closed;r++)t.next(e[r]);t.complete()}))}function O(e){return new s.Observable((function(t){e.then((function(e){t.closed||(t.next(e),t.complete())}),(function(e){return t.error(e)})).then(null,b.reportUnhandledError)}))}function g(e){return new s.Observable((function(t){var r,n;try{for(var o=u(e),i=o.next();!i.done;i=o.next()){var a=i.value;if(t.next(a),t.closed)return}}catch(e){r={error:e}}finally{try{i&&!i.done&&(n=o.return)&&n.call(o)}finally{if(r)throw r.error}}t.complete()}))}function S(e){return new s.Observable((function(t){(function(e,t){var r,u,a,c;return n(this,void 0,void 0,(function(){var n,s;return o(this,(function(o){switch(o.label){case 0:o.trys.push([0,5,6,11]),r=i(e),o.label=1;case 1:return[4,r.next()];case 2:if((u=o.sent()).done)return[3,4];if(n=u.value,t.next(n),t.closed)return[2];o.label=3;case 3:return[3,1];case 4:return[3,11];case 5:return s=o.sent(),a={error:s},[3,11];case 6:return o.trys.push([6,,9,10]),u&&!u.done&&(c=r.return)?[4,c.call(r)]:[3,8];case 7:o.sent(),o.label=8;case 8:return[3,10];case 9:if(a)throw a.error;return[7];case 10:return[7];case 11:return t.complete(),[2]}}))}))})(e,t).catch((function(e){return t.error(e)}))}))}function w(e){return S(h.readableStreamLikeToAsyncGenerator(e))}t.innerFrom=function(e){if(e instanceof s.Observable)return e;if(null!=e){if(l.isInteropObservable(e))return m(e);if(a.isArrayLike(e))return _(e);if(c.isPromise(e))return O(e);if(f.isAsyncIterable(e))return S(e);if(p.isIterable(e))return g(e);if(h.isReadableStreamLike(e))return w(e)}throw d.createInvalidObservableTypeError(e)},t.fromInteropObservable=m,t.fromArrayLike=_,t.fromPromise=O,t.fromIterable=g,t.fromAsyncIterable=S,t.fromReadableStreamLike=w},8990:(e,t,r)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.interval=void 0;var n=r(2445),o=r(7513);t.interval=function(e,t){return void 0===e&&(e=0),void 0===t&&(t=n.asyncScheduler),e<0&&(e=0),o.timer(e,e,t)}},1846:(e,t,r)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.merge=void 0;var n=r(3783),o=r(7103),i=r(6332),u=r(2433),a=r(5432);t.merge=function(){for(var e=[],t=0;t<arguments.length;t++)e[t]=arguments[t];var r=u.popScheduler(e),c=u.popNumber(e,1/0),s=e;return s.length?1===s.length?o.innerFrom(s[0]):n.mergeAll(c)(a.from(s,r)):i.EMPTY}},1339:(e,t,r)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.never=t.NEVER=void 0;var n=r(2419),o=r(2576);t.NEVER=new n.Observable(o.noop),t.never=function(){return t.NEVER}},5726:(e,t,r)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.of=void 0;var n=r(2433),o=r(5432);t.of=function(){for(var e=[],t=0;t<arguments.length;t++)e[t]=arguments[t];var r=n.popScheduler(e);return o.from(e,r)}},724:(e,t,r)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.onErrorResumeNext=void 0;var n=r(2419),o=r(5498),i=r(4990),u=r(2576),a=r(7103);t.onErrorResumeNext=function(){for(var e=[],t=0;t<arguments.length;t++)e[t]=arguments[t];var r=o.argsOrArgArray(e);return new n.Observable((function(e){var t=0,n=function(){if(t<r.length){var o=void 0;try{o=a.innerFrom(r[t++])}catch(e){return void n()}var c=new i.OperatorSubscriber(e,void 0,u.noop,u.noop);o.subscribe(c),c.add(n)}else e.complete()};n()}))}},4380:(e,t,r)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.pairs=void 0;var n=r(5432);t.pairs=function(e,t){return n.from(Object.entries(e),t)}},7273:(e,t,r)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.partition=void 0;var n=r(8634),o=r(9154),i=r(7103);t.partition=function(e,t,r){return[o.filter(t,r)(i.innerFrom(e)),o.filter(n.not(t,r))(i.innerFrom(e))]}},5182:(e,t,r)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.raceInit=t.race=void 0;var n=r(2419),o=r(7103),i=r(5498),u=r(4990);function a(e){return function(t){for(var r=[],n=function(n){r.push(o.innerFrom(e[n]).subscribe(u.createOperatorSubscriber(t,(function(e){if(r){for(var o=0;o<r.length;o++)o!==n&&r[o].unsubscribe();r=null}t.next(e)}))))},i=0;r&&!t.closed&&i<e.length;i++)n(i)}}t.race=function(){for(var e=[],t=0;t<arguments.length;t++)e[t]=arguments[t];return 1===(e=i.argsOrArgArray(e)).length?o.innerFrom(e[0]):new n.Observable(a(e))},t.raceInit=a},322:(e,t,r)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.range=void 0;var n=r(2419),o=r(6332);t.range=function(e,t,r){if(null==t&&(t=e,e=0),t<=0)return o.EMPTY;var i=t+e;return new n.Observable(r?function(t){var n=e;return r.schedule((function(){n<i?(t.next(n++),this.schedule()):t.complete()}))}:function(t){for(var r=e;r<i&&!t.closed;)t.next(r++);t.complete()})}},2098:(e,t,r)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.throwError=void 0;var n=r(2419),o=r(3005);t.throwError=function(e,t){var r=o.isFunction(e)?e:function(){return e},i=function(e){return e.error(r())};return new n.Observable(t?function(e){return t.schedule(i,0,e)}:i)}},7513:(e,t,r)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.timer=void 0;var n=r(2419),o=r(2445),i=r(9016),u=r(1677);t.timer=function(e,t,r){void 0===e&&(e=0),void 0===r&&(r=o.async);var a=-1;return null!=t&&(i.isScheduler(t)?r=t:a=t),new n.Observable((function(t){var n=u.isValidDate(e)?+e-r.now():e;n<0&&(n=0);var o=0;return r.schedule((function(){t.closed||(t.next(o++),0<=a?this.schedule(void 0,a):t.complete())}),n)}))}},2962:(e,t,r)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.using=void 0;var n=r(2419),o=r(7103),i=r(6332);t.using=function(e,t){return new n.Observable((function(r){var n=e(),u=t(n);return(u?o.innerFrom(u):i.EMPTY).subscribe(r),function(){n&&n.unsubscribe()}}))}},7654:function(e,t,r){var n=this&&this.__read||function(e,t){var r="function"==typeof Symbol&&e[Symbol.iterator];if(!r)return e;var n,o,i=r.call(e),u=[];try{for(;(void 0===t||t-- >0)&&!(n=i.next()).done;)u.push(n.value)}catch(e){o={error:e}}finally{try{n&&!n.done&&(r=i.return)&&r.call(i)}finally{if(o)throw o.error}}return u},o=this&&this.__spreadArray||function(e,t){for(var r=0,n=t.length,o=e.length;r<n;r++,o++)e[o]=t[r];return e};Object.defineProperty(t,"__esModule",{value:!0}),t.zip=void 0;var i=r(2419),u=r(7103),a=r(5498),c=r(6332),s=r(4990),l=r(2433);t.zip=function(){for(var e=[],t=0;t<arguments.length;t++)e[t]=arguments[t];var r=l.popResultSelector(e),f=a.argsOrArgArray(e);return f.length?new i.Observable((function(e){var t=f.map((function(){return[]})),i=f.map((function(){return!1}));e.add((function(){t=i=null}));for(var a=function(a){u.innerFrom(f[a]).subscribe(s.createOperatorSubscriber(e,(function(u){if(t[a].push(u),t.every((function(e){return e.length}))){var c=t.map((function(e){return e.shift()}));e.next(r?r.apply(void 0,o([],n(c))):c),t.some((function(e,t){return!e.length&&i[t]}))&&e.complete()}}),(function(){i[a]=!0,!t[a].length&&e.complete()})))},c=0;!e.closed&&c<f.length;c++)a(c);return function(){t=i=null}})):c.EMPTY}},4990:function(e,t,r){var n,o=this&&this.__extends||(n=function(e,t){return n=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,t){e.__proto__=t}||function(e,t){for(var r in t)Object.prototype.hasOwnProperty.call(t,r)&&(e[r]=t[r])},n(e,t)},function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Class extends value "+String(t)+" is not a constructor or null");function r(){this.constructor=e}n(e,t),e.prototype=null===t?Object.create(t):(r.prototype=t.prototype,new r)});Object.defineProperty(t,"__esModule",{value:!0}),t.OperatorSubscriber=t.createOperatorSubscriber=void 0;var i=r(5125);t.createOperatorSubscriber=function(e,t,r,n,o){return new u(e,t,r,n,o)};var u=function(e){function t(t,r,n,o,i,u){var a=e.call(this,t)||this;return a.onFinalize=i,a.shouldUnsubscribe=u,a._next=r?function(e){try{r(e)}catch(e){t.error(e)}}:e.prototype._next,a._error=o?function(e){try{o(e)}catch(e){t.error(e)}finally{this.unsubscribe()}}:e.prototype._error,a._complete=n?function(){try{n()}catch(e){t.error(e)}finally{this.unsubscribe()}}:e.prototype._complete,a}return o(t,e),t.prototype.unsubscribe=function(){var t;if(!this.shouldUnsubscribe||this.shouldUnsubscribe()){var r=this.closed;e.prototype.unsubscribe.call(this),!r&&(null===(t=this.onFinalize)||void 0===t||t.call(this))}},t}(i.Subscriber);t.OperatorSubscriber=u},6474:(e,t,r)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.audit=void 0;var n=r(4935),o=r(7103),i=r(4990);t.audit=function(e){return n.operate((function(t,r){var n=!1,u=null,a=null,c=!1,s=function(){if(null==a||a.unsubscribe(),a=null,n){n=!1;var e=u;u=null,r.next(e)}c&&r.complete()},l=function(){a=null,c&&r.complete()};t.subscribe(i.createOperatorSubscriber(r,(function(t){n=!0,u=t,a||o.innerFrom(e(t)).subscribe(a=i.createOperatorSubscriber(r,s,l))}),(function(){c=!0,(!n||!a||a.closed)&&r.complete()})))}))}},5382:(e,t,r)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.auditTime=void 0;var n=r(2445),o=r(6474),i=r(7513);t.auditTime=function(e,t){return void 0===t&&(t=n.asyncScheduler),o.audit((function(){return i.timer(e,t)}))}},9715:(e,t,r)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.buffer=void 0;var n=r(4935),o=r(2576),i=r(4990),u=r(7103);t.buffer=function(e){return n.operate((function(t,r){var n=[];return t.subscribe(i.createOperatorSubscriber(r,(function(e){return n.push(e)}),(function(){r.next(n),r.complete()}))),u.innerFrom(e).subscribe(i.createOperatorSubscriber(r,(function(){var e=n;n=[],r.next(e)}),o.noop)),function(){n=null}}))}},3814:function(e,t,r){var n=this&&this.__values||function(e){var t="function"==typeof Symbol&&Symbol.iterator,r=t&&e[t],n=0;if(r)return r.call(e);if(e&&"number"==typeof e.length)return{next:function(){return e&&n>=e.length&&(e=void 0),{value:e&&e[n++],done:!e}}};throw new TypeError(t?"Object is not iterable.":"Symbol.iterator is not defined.")};Object.defineProperty(t,"__esModule",{value:!0}),t.bufferCount=void 0;var o=r(4935),i=r(4990),u=r(6967);t.bufferCount=function(e,t){return void 0===t&&(t=null),t=null!=t?t:e,o.operate((function(r,o){var a=[],c=0;r.subscribe(i.createOperatorSubscriber(o,(function(r){var i,s,l,f,d=null;c++%t==0&&a.push([]);try{for(var p=n(a),h=p.next();!h.done;h=p.next())(y=h.value).push(r),e<=y.length&&(d=null!=d?d:[]).push(y)}catch(e){i={error:e}}finally{try{h&&!h.done&&(s=p.return)&&s.call(p)}finally{if(i)throw i.error}}if(d)try{for(var v=n(d),b=v.next();!b.done;b=v.next()){var y=b.value;u.arrRemove(a,y),o.next(y)}}catch(e){l={error:e}}finally{try{b&&!b.done&&(f=v.return)&&f.call(v)}finally{if(l)throw l.error}}}),(function(){var e,t;try{for(var r=n(a),i=r.next();!i.done;i=r.next()){var u=i.value;o.next(u)}}catch(t){e={error:t}}finally{try{i&&!i.done&&(t=r.return)&&t.call(r)}finally{if(e)throw e.error}}o.complete()}),void 0,(function(){a=null})))}))}},7211:function(e,t,r){var n=this&&this.__values||function(e){var t="function"==typeof Symbol&&Symbol.iterator,r=t&&e[t],n=0;if(r)return r.call(e);if(e&&"number"==typeof e.length)return{next:function(){return e&&n>=e.length&&(e=void 0),{value:e&&e[n++],done:!e}}};throw new TypeError(t?"Object is not iterable.":"Symbol.iterator is not defined.")};Object.defineProperty(t,"__esModule",{value:!0}),t.bufferTime=void 0;var o=r(3865),i=r(4935),u=r(4990),a=r(6967),c=r(2445),s=r(2433),l=r(7738);t.bufferTime=function(e){for(var t,r,f=[],d=1;d<arguments.length;d++)f[d-1]=arguments[d];var p=null!==(t=s.popScheduler(f))&&void 0!==t?t:c.asyncScheduler,h=null!==(r=f[0])&&void 0!==r?r:null,v=f[1]||1/0;return i.operate((function(t,r){var i=[],c=!1,s=function(e){var t=e.buffer;e.subs.unsubscribe(),a.arrRemove(i,e),r.next(t),c&&f()},f=function(){if(i){var t=new o.Subscription;r.add(t);var n={buffer:[],subs:t};i.push(n),l.executeSchedule(t,p,(function(){return s(n)}),e)}};null!==h&&h>=0?l.executeSchedule(r,p,f,h,!0):c=!0,f();var d=u.createOperatorSubscriber(r,(function(e){var t,r,o=i.slice();try{for(var u=n(o),a=u.next();!a.done;a=u.next()){var c=a.value,l=c.buffer;l.push(e),v<=l.length&&s(c)}}catch(e){t={error:e}}finally{try{a&&!a.done&&(r=u.return)&&r.call(u)}finally{if(t)throw t.error}}}),(function(){for(;null==i?void 0:i.length;)r.next(i.shift().buffer);null==d||d.unsubscribe(),r.complete(),r.unsubscribe()}),void 0,(function(){return i=null}));t.subscribe(d)}))}},4943:function(e,t,r){var n=this&&this.__values||function(e){var t="function"==typeof Symbol&&Symbol.iterator,r=t&&e[t],n=0;if(r)return r.call(e);if(e&&"number"==typeof e.length)return{next:function(){return e&&n>=e.length&&(e=void 0),{value:e&&e[n++],done:!e}}};throw new TypeError(t?"Object is not iterable.":"Symbol.iterator is not defined.")};Object.defineProperty(t,"__esModule",{value:!0}),t.bufferToggle=void 0;var o=r(3865),i=r(4935),u=r(7103),a=r(4990),c=r(2576),s=r(6967);t.bufferToggle=function(e,t){return i.operate((function(r,i){var l=[];u.innerFrom(e).subscribe(a.createOperatorSubscriber(i,(function(e){var r=[];l.push(r);var n=new o.Subscription;n.add(u.innerFrom(t(e)).subscribe(a.createOperatorSubscriber(i,(function(){s.arrRemove(l,r),i.next(r),n.unsubscribe()}),c.noop)))}),c.noop)),r.subscribe(a.createOperatorSubscriber(i,(function(e){var t,r;try{for(var o=n(l),i=o.next();!i.done;i=o.next())i.value.push(e)}catch(e){t={error:e}}finally{try{i&&!i.done&&(r=o.return)&&r.call(o)}finally{if(t)throw t.error}}}),(function(){for(;l.length>0;)i.next(l.shift());i.complete()})))}))}},1240:(e,t,r)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.bufferWhen=void 0;var n=r(4935),o=r(2576),i=r(4990),u=r(7103);t.bufferWhen=function(e){return n.operate((function(t,r){var n=null,a=null,c=function(){null==a||a.unsubscribe();var t=n;n=[],t&&r.next(t),u.innerFrom(e()).subscribe(a=i.createOperatorSubscriber(r,c,o.noop))};c(),t.subscribe(i.createOperatorSubscriber(r,(function(e){return null==n?void 0:n.push(e)}),(function(){n&&r.next(n),r.complete()}),void 0,(function(){return n=a=null})))}))}},9548:(e,t,r)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.catchError=void 0;var n=r(7103),o=r(4990),i=r(4935);t.catchError=function e(t){return i.operate((function(r,i){var u,a=null,c=!1;a=r.subscribe(o.createOperatorSubscriber(i,void 0,void 0,(function(o){u=n.innerFrom(t(o,e(t)(r))),a?(a.unsubscribe(),a=null,u.subscribe(i)):c=!0}))),c&&(a.unsubscribe(),a=null,u.subscribe(i))}))}},2128:(e,t,r)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.combineAll=void 0;var n=r(3240);t.combineAll=n.combineLatestAll},6318:function(e,t,r){var n=this&&this.__read||function(e,t){var r="function"==typeof Symbol&&e[Symbol.iterator];if(!r)return e;var n,o,i=r.call(e),u=[];try{for(;(void 0===t||t-- >0)&&!(n=i.next()).done;)u.push(n.value)}catch(e){o={error:e}}finally{try{n&&!n.done&&(r=i.return)&&r.call(i)}finally{if(o)throw o.error}}return u},o=this&&this.__spreadArray||function(e,t){for(var r=0,n=t.length,o=e.length;r<n;r++,o++)e[o]=t[r];return e};Object.defineProperty(t,"__esModule",{value:!0}),t.combineLatest=void 0;var i=r(9258),u=r(4935),a=r(5498),c=r(1914),s=r(9985),l=r(2433);t.combineLatest=function e(){for(var t=[],r=0;r<arguments.length;r++)t[r]=arguments[r];var f=l.popResultSelector(t);return f?s.pipe(e.apply(void 0,o([],n(t))),c.mapOneOrManyArgs(f)):u.operate((function(e,r){i.combineLatestInit(o([e],n(a.argsOrArgArray(t))))(r)}))}},3240:(e,t,r)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.combineLatestAll=void 0;var n=r(9258),o=r(2069);t.combineLatestAll=function(e){return o.joinAllInternals(n.combineLatest,e)}},5024:function(e,t,r){var n=this&&this.__read||function(e,t){var r="function"==typeof Symbol&&e[Symbol.iterator];if(!r)return e;var n,o,i=r.call(e),u=[];try{for(;(void 0===t||t-- >0)&&!(n=i.next()).done;)u.push(n.value)}catch(e){o={error:e}}finally{try{n&&!n.done&&(r=i.return)&&r.call(i)}finally{if(o)throw o.error}}return u},o=this&&this.__spreadArray||function(e,t){for(var r=0,n=t.length,o=e.length;r<n;r++,o++)e[o]=t[r];return e};Object.defineProperty(t,"__esModule",{value:!0}),t.combineLatestWith=void 0;var i=r(6318);t.combineLatestWith=function(){for(var e=[],t=0;t<arguments.length;t++)e[t]=arguments[t];return i.combineLatest.apply(void 0,o([],n(e)))}},4919:function(e,t,r){var n=this&&this.__read||function(e,t){var r="function"==typeof Symbol&&e[Symbol.iterator];if(!r)return e;var n,o,i=r.call(e),u=[];try{for(;(void 0===t||t-- >0)&&!(n=i.next()).done;)u.push(n.value)}catch(e){o={error:e}}finally{try{n&&!n.done&&(r=i.return)&&r.call(i)}finally{if(o)throw o.error}}return u},o=this&&this.__spreadArray||function(e,t){for(var r=0,n=t.length,o=e.length;r<n;r++,o++)e[o]=t[r];return e};Object.defineProperty(t,"__esModule",{value:!0}),t.concat=void 0;var i=r(4935),u=r(4413),a=r(2433),c=r(5432);t.concat=function(){for(var e=[],t=0;t<arguments.length;t++)e[t]=arguments[t];var r=a.popScheduler(e);return i.operate((function(t,i){u.concatAll()(c.from(o([t],n(e)),r)).subscribe(i)}))}},4413:(e,t,r)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.concatAll=void 0;var n=r(3783);t.concatAll=function(){return n.mergeAll(1)}},7498:(e,t,r)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.concatMap=void 0;var n=r(9475),o=r(3005);t.concatMap=function(e,t){return o.isFunction(t)?n.mergeMap(e,t,1):n.mergeMap(e,1)}},6109:(e,t,r)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.concatMapTo=void 0;var n=r(7498),o=r(3005);t.concatMapTo=function(e,t){return o.isFunction(t)?n.concatMap((function(){return e}),t):n.concatMap((function(){return e}))}},9664:function(e,t,r){var n=this&&this.__read||function(e,t){var r="function"==typeof Symbol&&e[Symbol.iterator];if(!r)return e;var n,o,i=r.call(e),u=[];try{for(;(void 0===t||t-- >0)&&!(n=i.next()).done;)u.push(n.value)}catch(e){o={error:e}}finally{try{n&&!n.done&&(r=i.return)&&r.call(i)}finally{if(o)throw o.error}}return u},o=this&&this.__spreadArray||function(e,t){for(var r=0,n=t.length,o=e.length;r<n;r++,o++)e[o]=t[r];return e};Object.defineProperty(t,"__esModule",{value:!0}),t.concatWith=void 0;var i=r(4919);t.concatWith=function(){for(var e=[],t=0;t<arguments.length;t++)e[t]=arguments[t];return i.concat.apply(void 0,o([],n(e)))}},1995:(e,t,r)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.connect=void 0;var n=r(3032),o=r(7103),i=r(4935),u=r(851),a={connector:function(){return new n.Subject}};t.connect=function(e,t){void 0===t&&(t=a);var r=t.connector;return i.operate((function(t,n){var i=r();o.innerFrom(e(u.fromSubscribable(i))).subscribe(n),n.add(t.subscribe(i))}))}},993:(e,t,r)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.count=void 0;var n=r(122);t.count=function(e){return n.reduce((function(t,r,n){return!e||e(r,n)?t+1:t}),0)}},496:(e,t,r)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.debounce=void 0;var n=r(4935),o=r(2576),i=r(4990),u=r(7103);t.debounce=function(e){return n.operate((function(t,r){var n=!1,a=null,c=null,s=function(){if(null==c||c.unsubscribe(),c=null,n){n=!1;var e=a;a=null,r.next(e)}};t.subscribe(i.createOperatorSubscriber(r,(function(t){null==c||c.unsubscribe(),n=!0,a=t,c=i.createOperatorSubscriber(r,s,o.noop),u.innerFrom(e(t)).subscribe(c)}),(function(){s(),r.complete()}),void 0,(function(){a=c=null})))}))}},1385:(e,t,r)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.debounceTime=void 0;var n=r(2445),o=r(4935),i=r(4990);t.debounceTime=function(e,t){return void 0===t&&(t=n.asyncScheduler),o.operate((function(r,n){var o=null,u=null,a=null,c=function(){if(o){o.unsubscribe(),o=null;var e=u;u=null,n.next(e)}};function s(){var r=a+e,i=t.now();if(i<r)return o=this.schedule(void 0,r-i),void n.add(o);c()}r.subscribe(i.createOperatorSubscriber(n,(function(r){u=r,a=t.now(),o||(o=t.schedule(s,e),n.add(o))}),(function(){c(),n.complete()}),void 0,(function(){u=o=null})))}))}},1658:(e,t,r)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.defaultIfEmpty=void 0;var n=r(4935),o=r(4990);t.defaultIfEmpty=function(e){return n.operate((function(t,r){var n=!1;t.subscribe(o.createOperatorSubscriber(r,(function(e){n=!0,r.next(e)}),(function(){n||r.next(e),r.complete()})))}))}},5841:(e,t,r)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.delay=void 0;var n=r(2445),o=r(8798),i=r(7513);t.delay=function(e,t){void 0===t&&(t=n.asyncScheduler);var r=i.timer(e,t);return o.delayWhen((function(){return r}))}},8798:(e,t,r)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.delayWhen=void 0;var n=r(2239),o=r(4783),i=r(9438),u=r(8313),a=r(9475),c=r(7103);t.delayWhen=function e(t,r){return r?function(u){return n.concat(r.pipe(o.take(1),i.ignoreElements()),u.pipe(e(t)))}:a.mergeMap((function(e,r){return c.innerFrom(t(e,r)).pipe(o.take(1),u.mapTo(e))}))}},1080:(e,t,r)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.dematerialize=void 0;var n=r(3104),o=r(4935),i=r(4990);t.dematerialize=function(){return o.operate((function(e,t){e.subscribe(i.createOperatorSubscriber(t,(function(e){return n.observeNotification(e,t)})))}))}},3054:(e,t,r)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.distinct=void 0;var n=r(4935),o=r(4990),i=r(2576),u=r(7103);t.distinct=function(e,t){return n.operate((function(r,n){var a=new Set;r.subscribe(o.createOperatorSubscriber(n,(function(t){var r=e?e(t):t;a.has(r)||(a.add(r),n.next(t))}))),t&&u.innerFrom(t).subscribe(o.createOperatorSubscriber(n,(function(){return a.clear()}),i.noop))}))}},8737:(e,t,r)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.distinctUntilChanged=void 0;var n=r(4781),o=r(4935),i=r(4990);function u(e,t){return e===t}t.distinctUntilChanged=function(e,t){return void 0===t&&(t=n.identity),e=null!=e?e:u,o.operate((function(r,n){var o,u=!0;r.subscribe(i.createOperatorSubscriber(n,(function(r){var i=t(r);!u&&e(o,i)||(u=!1,o=i,n.next(r))})))}))}},7957:(e,t,r)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.distinctUntilKeyChanged=void 0;var n=r(8737);t.distinctUntilKeyChanged=function(e,t){return n.distinctUntilChanged((function(r,n){return t?t(r[e],n[e]):r[e]===n[e]}))}},8633:(e,t,r)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.elementAt=void 0;var n=r(2351),o=r(9154),i=r(1779),u=r(1658),a=r(4783);t.elementAt=function(e,t){if(e<0)throw new n.ArgumentOutOfRangeError;var r=arguments.length>=2;return function(c){return c.pipe(o.filter((function(t,r){return r===e})),a.take(1),r?u.defaultIfEmpty(t):i.throwIfEmpty((function(){return new n.ArgumentOutOfRangeError})))}}},911:function(e,t,r){var n=this&&this.__read||function(e,t){var r="function"==typeof Symbol&&e[Symbol.iterator];if(!r)return e;var n,o,i=r.call(e),u=[];try{for(;(void 0===t||t-- >0)&&!(n=i.next()).done;)u.push(n.value)}catch(e){o={error:e}}finally{try{n&&!n.done&&(r=i.return)&&r.call(i)}finally{if(o)throw o.error}}return u},o=this&&this.__spreadArray||function(e,t){for(var r=0,n=t.length,o=e.length;r<n;r++,o++)e[o]=t[r];return e};Object.defineProperty(t,"__esModule",{value:!0}),t.endWith=void 0;var i=r(2239),u=r(5726);t.endWith=function(){for(var e=[],t=0;t<arguments.length;t++)e[t]=arguments[t];return function(t){return i.concat(t,u.of.apply(void 0,o([],n(e))))}}},2096:(e,t,r)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.every=void 0;var n=r(4935),o=r(4990);t.every=function(e,t){return n.operate((function(r,n){var i=0;r.subscribe(o.createOperatorSubscriber(n,(function(o){e.call(t,o,i++,r)||(n.next(!1),n.complete())}),(function(){n.next(!0),n.complete()})))}))}},67:(e,t,r)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.exhaust=void 0;var n=r(5337);t.exhaust=n.exhaustAll},5337:(e,t,r)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.exhaustAll=void 0;var n=r(5635),o=r(4781);t.exhaustAll=function(){return n.exhaustMap(o.identity)}},5635:(e,t,r)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.exhaustMap=void 0;var n=r(7291),o=r(7103),i=r(4935),u=r(4990);t.exhaustMap=function e(t,r){return r?function(i){return i.pipe(e((function(e,i){return o.innerFrom(t(e,i)).pipe(n.map((function(t,n){return r(e,t,i,n)})))})))}:i.operate((function(e,r){var n=0,i=null,a=!1;e.subscribe(u.createOperatorSubscriber(r,(function(e){i||(i=u.createOperatorSubscriber(r,void 0,(function(){i=null,a&&r.complete()})),o.innerFrom(t(e,n++)).subscribe(i))}),(function(){a=!0,!i&&r.complete()})))}))}},9745:(e,t,r)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.expand=void 0;var n=r(4935),o=r(7788);t.expand=function(e,t,r){return void 0===t&&(t=1/0),t=(t||0)<1?1/0:t,n.operate((function(n,i){return o.mergeInternals(n,i,e,t,void 0,!0,r)}))}},9154:(e,t,r)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.filter=void 0;var n=r(4935),o=r(4990);t.filter=function(e,t){return n.operate((function(r,n){var i=0;r.subscribe(o.createOperatorSubscriber(n,(function(r){return e.call(t,r,i++)&&n.next(r)})))}))}},9283:(e,t,r)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.finalize=void 0;var n=r(4935);t.finalize=function(e){return n.operate((function(t,r){try{t.subscribe(r)}finally{r.add(e)}}))}},7119:(e,t,r)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.createFind=t.find=void 0;var n=r(4935),o=r(4990);function i(e,t,r){var n="index"===r;return function(r,i){var u=0;r.subscribe(o.createOperatorSubscriber(i,(function(o){var a=u++;e.call(t,o,a,r)&&(i.next(n?a:o),i.complete())}),(function(){i.next(n?-1:void 0),i.complete()})))}}t.find=function(e,t){return n.operate(i(e,t,"value"))},t.createFind=i},4706:(e,t,r)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.findIndex=void 0;var n=r(4935),o=r(7119);t.findIndex=function(e,t){return n.operate(o.createFind(e,t,"index"))}},9219:(e,t,r)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.first=void 0;var n=r(9474),o=r(9154),i=r(4783),u=r(1658),a=r(1779),c=r(4781);t.first=function(e,t){var r=arguments.length>=2;return function(s){return s.pipe(e?o.filter((function(t,r){return e(t,r,s)})):c.identity,i.take(1),r?u.defaultIfEmpty(t):a.throwIfEmpty((function(){return new n.EmptyError})))}}},1788:(e,t,r)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.flatMap=void 0;var n=r(9475);t.flatMap=n.mergeMap},9749:(e,t,r)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.groupBy=void 0;var n=r(2419),o=r(7103),i=r(3032),u=r(4935),a=r(4990);t.groupBy=function(e,t,r,c){return u.operate((function(u,s){var l;t&&"function"!=typeof t?(r=t.duration,l=t.element,c=t.connector):l=t;var f=new Map,d=function(e){f.forEach(e),e(s)},p=function(e){return d((function(t){return t.error(e)}))},h=0,v=!1,b=new a.OperatorSubscriber(s,(function(t){try{var u=e(t),d=f.get(u);if(!d){f.set(u,d=c?c():new i.Subject);var y=(_=u,O=d,(g=new n.Observable((function(e){h++;var t=O.subscribe(e);return function(){t.unsubscribe(),0==--h&&v&&b.unsubscribe()}}))).key=_,g);if(s.next(y),r){var m=a.createOperatorSubscriber(d,(function(){d.complete(),null==m||m.unsubscribe()}),void 0,void 0,(function(){return f.delete(u)}));b.add(o.innerFrom(r(y)).subscribe(m))}}d.next(l?l(t):t)}catch(e){p(e)}var _,O,g}),(function(){return d((function(e){return e.complete()}))}),p,(function(){return f.clear()}),(function(){return v=!0,0===h}));u.subscribe(b)}))}},9438:(e,t,r)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.ignoreElements=void 0;var n=r(4935),o=r(4990),i=r(2576);t.ignoreElements=function(){return n.operate((function(e,t){e.subscribe(o.createOperatorSubscriber(t,i.noop))}))}},8515:(e,t,r)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.isEmpty=void 0;var n=r(4935),o=r(4990);t.isEmpty=function(){return n.operate((function(e,t){e.subscribe(o.createOperatorSubscriber(t,(function(){t.next(!1),t.complete()}),(function(){t.next(!0),t.complete()})))}))}},2069:(e,t,r)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.joinAllInternals=void 0;var n=r(4781),o=r(1914),i=r(9985),u=r(9475),a=r(2);t.joinAllInternals=function(e,t){return i.pipe(a.toArray(),u.mergeMap((function(t){return e(t)})),t?o.mapOneOrManyArgs(t):n.identity)}},2435:(e,t,r)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.last=void 0;var n=r(9474),o=r(9154),i=r(1980),u=r(1779),a=r(1658),c=r(4781);t.last=function(e,t){var r=arguments.length>=2;return function(s){return s.pipe(e?o.filter((function(t,r){return e(t,r,s)})):c.identity,i.takeLast(1),r?a.defaultIfEmpty(t):u.throwIfEmpty((function(){return new n.EmptyError})))}}},7291:(e,t,r)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.map=void 0;var n=r(4935),o=r(4990);t.map=function(e,t){return n.operate((function(r,n){var i=0;r.subscribe(o.createOperatorSubscriber(n,(function(r){n.next(e.call(t,r,i++))})))}))}},8313:(e,t,r)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.mapTo=void 0;var n=r(7291);t.mapTo=function(e){return n.map((function(){return e}))}},3209:(e,t,r)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.materialize=void 0;var n=r(3104),o=r(4935),i=r(4990);t.materialize=function(){return o.operate((function(e,t){e.subscribe(i.createOperatorSubscriber(t,(function(e){t.next(n.Notification.createNext(e))}),(function(){t.next(n.Notification.createComplete()),t.complete()}),(function(e){t.next(n.Notification.createError(e)),t.complete()})))}))}},2620:(e,t,r)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.max=void 0;var n=r(122),o=r(3005);t.max=function(e){return n.reduce(o.isFunction(e)?function(t,r){return e(t,r)>0?t:r}:function(e,t){return e>t?e:t})}},9821:function(e,t,r){var n=this&&this.__read||function(e,t){var r="function"==typeof Symbol&&e[Symbol.iterator];if(!r)return e;var n,o,i=r.call(e),u=[];try{for(;(void 0===t||t-- >0)&&!(n=i.next()).done;)u.push(n.value)}catch(e){o={error:e}}finally{try{n&&!n.done&&(r=i.return)&&r.call(i)}finally{if(o)throw o.error}}return u},o=this&&this.__spreadArray||function(e,t){for(var r=0,n=t.length,o=e.length;r<n;r++,o++)e[o]=t[r];return e};Object.defineProperty(t,"__esModule",{value:!0}),t.merge=void 0;var i=r(4935),u=r(5498),a=r(3783),c=r(2433),s=r(5432);t.merge=function(){for(var e=[],t=0;t<arguments.length;t++)e[t]=arguments[t];var r=c.popScheduler(e),l=c.popNumber(e,1/0);return e=u.argsOrArgArray(e),i.operate((function(t,i){a.mergeAll(l)(s.from(o([t],n(e)),r)).subscribe(i)}))}},3783:(e,t,r)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.mergeAll=void 0;var n=r(9475),o=r(4781);t.mergeAll=function(e){return void 0===e&&(e=1/0),n.mergeMap(o.identity,e)}},7788:(e,t,r)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.mergeInternals=void 0;var n=r(7103),o=r(7738),i=r(4990);t.mergeInternals=function(e,t,r,u,a,c,s,l){var f=[],d=0,p=0,h=!1,v=function(){!h||f.length||d||t.complete()},b=function(e){return d<u?y(e):f.push(e)},y=function(e){c&&t.next(e),d++;var l=!1;n.innerFrom(r(e,p++)).subscribe(i.createOperatorSubscriber(t,(function(e){null==a||a(e),c?b(e):t.next(e)}),(function(){l=!0}),void 0,(function(){if(l)try{d--;for(var e=function(){var e=f.shift();s?o.executeSchedule(t,s,(function(){return y(e)})):y(e)};f.length&&d<u;)e();v()}catch(e){t.error(e)}})))};return e.subscribe(i.createOperatorSubscriber(t,b,(function(){h=!0,v()}))),function(){null==l||l()}}},9475:(e,t,r)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.mergeMap=void 0;var n=r(7291),o=r(7103),i=r(4935),u=r(7788),a=r(3005);t.mergeMap=function e(t,r,c){return void 0===c&&(c=1/0),a.isFunction(r)?e((function(e,i){return n.map((function(t,n){return r(e,t,i,n)}))(o.innerFrom(t(e,i)))}),c):("number"==typeof r&&(c=r),i.operate((function(e,r){return u.mergeInternals(e,r,t,c)})))}},1211:(e,t,r)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.mergeMapTo=void 0;var n=r(9475),o=r(3005);t.mergeMapTo=function(e,t,r){return void 0===r&&(r=1/0),o.isFunction(t)?n.mergeMap((function(){return e}),t,r):("number"==typeof t&&(r=t),n.mergeMap((function(){return e}),r))}},7267:(e,t,r)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.mergeScan=void 0;var n=r(4935),o=r(7788);t.mergeScan=function(e,t,r){return void 0===r&&(r=1/0),n.operate((function(n,i){var u=t;return o.mergeInternals(n,i,(function(t,r){return e(u,t,r)}),r,(function(e){u=e}),!1,void 0,(function(){return u=null}))}))}},9303:function(e,t,r){var n=this&&this.__read||function(e,t){var r="function"==typeof Symbol&&e[Symbol.iterator];if(!r)return e;var n,o,i=r.call(e),u=[];try{for(;(void 0===t||t-- >0)&&!(n=i.next()).done;)u.push(n.value)}catch(e){o={error:e}}finally{try{n&&!n.done&&(r=i.return)&&r.call(i)}finally{if(o)throw o.error}}return u},o=this&&this.__spreadArray||function(e,t){for(var r=0,n=t.length,o=e.length;r<n;r++,o++)e[o]=t[r];return e};Object.defineProperty(t,"__esModule",{value:!0}),t.mergeWith=void 0;var i=r(9821);t.mergeWith=function(){for(var e=[],t=0;t<arguments.length;t++)e[t]=arguments[t];return i.merge.apply(void 0,o([],n(e)))}},9714:(e,t,r)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.min=void 0;var n=r(122),o=r(3005);t.min=function(e){return n.reduce(o.isFunction(e)?function(t,r){return e(t,r)<0?t:r}:function(e,t){return e<t?e:t})}},3848:(e,t,r)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.multicast=void 0;var n=r(9518),o=r(3005),i=r(1995);t.multicast=function(e,t){var r=o.isFunction(e)?e:function(){return e};return o.isFunction(t)?i.connect(t,{connector:r}):function(e){return new n.ConnectableObservable(e,r)}}},1184:(e,t,r)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.observeOn=void 0;var n=r(7738),o=r(4935),i=r(4990);t.observeOn=function(e,t){return void 0===t&&(t=0),o.operate((function(r,o){r.subscribe(i.createOperatorSubscriber(o,(function(r){return n.executeSchedule(o,e,(function(){return o.next(r)}),t)}),(function(){return n.executeSchedule(o,e,(function(){return o.complete()}),t)}),(function(r){return n.executeSchedule(o,e,(function(){return o.error(r)}),t)})))}))}},7582:function(e,t,r){var n=this&&this.__read||function(e,t){var r="function"==typeof Symbol&&e[Symbol.iterator];if(!r)return e;var n,o,i=r.call(e),u=[];try{for(;(void 0===t||t-- >0)&&!(n=i.next()).done;)u.push(n.value)}catch(e){o={error:e}}finally{try{n&&!n.done&&(r=i.return)&&r.call(i)}finally{if(o)throw o.error}}return u},o=this&&this.__spreadArray||function(e,t){for(var r=0,n=t.length,o=e.length;r<n;r++,o++)e[o]=t[r];return e};Object.defineProperty(t,"__esModule",{value:!0}),t.onErrorResumeNext=t.onErrorResumeNextWith=void 0;var i=r(5498),u=r(724);function a(){for(var e=[],t=0;t<arguments.length;t++)e[t]=arguments[t];var r=i.argsOrArgArray(e);return function(e){return u.onErrorResumeNext.apply(void 0,o([e],n(r)))}}t.onErrorResumeNextWith=a,t.onErrorResumeNext=a},2731:(e,t,r)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.pairwise=void 0;var n=r(4935),o=r(4990);t.pairwise=function(){return n.operate((function(e,t){var r,n=!1;e.subscribe(o.createOperatorSubscriber(t,(function(e){var o=r;r=e,n&&t.next([o,e]),n=!0})))}))}},4691:(e,t,r)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.pluck=void 0;var n=r(7291);t.pluck=function(){for(var e=[],t=0;t<arguments.length;t++)e[t]=arguments[t];var r=e.length;if(0===r)throw new Error("list of properties cannot be empty.");return n.map((function(t){for(var n=t,o=0;o<r;o++){var i=null==n?void 0:n[e[o]];if(void 0===i)return;n=i}return n}))}},4474:(e,t,r)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.publish=void 0;var n=r(3032),o=r(3848),i=r(1995);t.publish=function(e){return e?function(t){return i.connect(e)(t)}:function(e){return o.multicast(new n.Subject)(e)}}},52:(e,t,r)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.publishBehavior=void 0;var n=r(5240),o=r(9518);t.publishBehavior=function(e){return function(t){var r=new n.BehaviorSubject(e);return new o.ConnectableObservable(t,(function(){return r}))}}},2110:(e,t,r)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.publishLast=void 0;var n=r(280),o=r(9518);t.publishLast=function(){return function(e){var t=new n.AsyncSubject;return new o.ConnectableObservable(e,(function(){return t}))}}},9864:(e,t,r)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.publishReplay=void 0;var n=r(3274),o=r(3848),i=r(3005);t.publishReplay=function(e,t,r,u){r&&!i.isFunction(r)&&(u=r);var a=i.isFunction(r)?r:void 0;return function(r){return o.multicast(new n.ReplaySubject(e,t,u),a)(r)}}},179:function(e,t,r){var n=this&&this.__read||function(e,t){var r="function"==typeof Symbol&&e[Symbol.iterator];if(!r)return e;var n,o,i=r.call(e),u=[];try{for(;(void 0===t||t-- >0)&&!(n=i.next()).done;)u.push(n.value)}catch(e){o={error:e}}finally{try{n&&!n.done&&(r=i.return)&&r.call(i)}finally{if(o)throw o.error}}return u},o=this&&this.__spreadArray||function(e,t){for(var r=0,n=t.length,o=e.length;r<n;r++,o++)e[o]=t[r];return e};Object.defineProperty(t,"__esModule",{value:!0}),t.raceWith=void 0;var i=r(5182),u=r(4935),a=r(4781);t.raceWith=function(){for(var e=[],t=0;t<arguments.length;t++)e[t]=arguments[t];return e.length?u.operate((function(t,r){i.raceInit(o([t],n(e)))(r)})):a.identity}},122:(e,t,r)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.reduce=void 0;var n=r(8345),o=r(4935);t.reduce=function(e,t){return o.operate(n.scanInternals(e,t,arguments.length>=2,!1,!0))}},8739:(e,t,r)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.refCount=void 0;var n=r(4935),o=r(4990);t.refCount=function(){return n.operate((function(e,t){var r=null;e._refCount++;var n=o.createOperatorSubscriber(t,void 0,void 0,void 0,(function(){if(!e||e._refCount<=0||0<--e._refCount)r=null;else{var n=e._connection,o=r;r=null,!n||o&&n!==o||n.unsubscribe(),t.unsubscribe()}}));e.subscribe(n),n.closed||(r=e.connect())}))}},5313:(e,t,r)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.repeat=void 0;var n=r(6332),o=r(4935),i=r(4990),u=r(7103),a=r(7513);t.repeat=function(e){var t,r,c=1/0;return null!=e&&("object"==typeof e?(t=e.count,c=void 0===t?1/0:t,r=e.delay):c=e),c<=0?function(){return n.EMPTY}:o.operate((function(e,t){var n,o=0,s=function(){if(null==n||n.unsubscribe(),n=null,null!=r){var e="number"==typeof r?a.timer(r):u.innerFrom(r(o)),c=i.createOperatorSubscriber(t,(function(){c.unsubscribe(),l()}));e.subscribe(c)}else l()},l=function(){var r=!1;n=e.subscribe(i.createOperatorSubscriber(t,void 0,(function(){++o<c?n?s():r=!0:t.complete()}))),r&&s()};l()}))}},4068:(e,t,r)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.repeatWhen=void 0;var n=r(7103),o=r(3032),i=r(4935),u=r(4990);t.repeatWhen=function(e){return i.operate((function(t,r){var i,a,c=!1,s=!1,l=!1,f=function(){return l&&s&&(r.complete(),!0)},d=function(){l=!1,i=t.subscribe(u.createOperatorSubscriber(r,void 0,(function(){l=!0,!f()&&(a||(a=new o.Subject,n.innerFrom(e(a)).subscribe(u.createOperatorSubscriber(r,(function(){i?d():c=!0}),(function(){s=!0,f()})))),a).next()}))),c&&(i.unsubscribe(),i=null,c=!1,d())};d()}))}},64:(e,t,r)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.retry=void 0;var n=r(4935),o=r(4990),i=r(4781),u=r(7513),a=r(7103);t.retry=function(e){var t;void 0===e&&(e=1/0);var r=(t=e&&"object"==typeof e?e:{count:e}).count,c=void 0===r?1/0:r,s=t.delay,l=t.resetOnSuccess,f=void 0!==l&&l;return c<=0?i.identity:n.operate((function(e,t){var r,n=0,i=function(){var l=!1;r=e.subscribe(o.createOperatorSubscriber(t,(function(e){f&&(n=0),t.next(e)}),void 0,(function(e){if(n++<c){var f=function(){r?(r.unsubscribe(),r=null,i()):l=!0};if(null!=s){var d="number"==typeof s?u.timer(s):a.innerFrom(s(e,n)),p=o.createOperatorSubscriber(t,(function(){p.unsubscribe(),f()}),(function(){t.complete()}));d.subscribe(p)}else f()}else t.error(e)}))),l&&(r.unsubscribe(),r=null,i())};i()}))}},1188:(e,t,r)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.retryWhen=void 0;var n=r(7103),o=r(3032),i=r(4935),u=r(4990);t.retryWhen=function(e){return i.operate((function(t,r){var i,a,c=!1,s=function(){i=t.subscribe(u.createOperatorSubscriber(r,void 0,void 0,(function(t){a||(a=new o.Subject,n.innerFrom(e(a)).subscribe(u.createOperatorSubscriber(r,(function(){return i?s():c=!0})))),a&&a.next(t)}))),c&&(i.unsubscribe(),i=null,c=!1,s())};s()}))}},4193:(e,t,r)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.sample=void 0;var n=r(7103),o=r(4935),i=r(2576),u=r(4990);t.sample=function(e){return o.operate((function(t,r){var o=!1,a=null;t.subscribe(u.createOperatorSubscriber(r,(function(e){o=!0,a=e}))),n.innerFrom(e).subscribe(u.createOperatorSubscriber(r,(function(){if(o){o=!1;var e=a;a=null,r.next(e)}}),i.noop))}))}},6170:(e,t,r)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.sampleTime=void 0;var n=r(2445),o=r(4193),i=r(8990);t.sampleTime=function(e,t){return void 0===t&&(t=n.asyncScheduler),o.sample(i.interval(e,t))}},5876:(e,t,r)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.scan=void 0;var n=r(4935),o=r(8345);t.scan=function(e,t){return n.operate(o.scanInternals(e,t,arguments.length>=2,!0))}},8345:(e,t,r)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.scanInternals=void 0;var n=r(4990);t.scanInternals=function(e,t,r,o,i){return function(u,a){var c=r,s=t,l=0;u.subscribe(n.createOperatorSubscriber(a,(function(t){var r=l++;s=c?e(s,t,r):(c=!0,t),o&&a.next(s)}),i&&function(){c&&a.next(s),a.complete()}))}}},1791:(e,t,r)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.sequenceEqual=void 0;var n=r(4935),o=r(4990),i=r(7103);t.sequenceEqual=function(e,t){return void 0===t&&(t=function(e,t){return e===t}),n.operate((function(r,n){var u={buffer:[],complete:!1},a={buffer:[],complete:!1},c=function(e){n.next(e),n.complete()},s=function(e,r){var i=o.createOperatorSubscriber(n,(function(n){var o=r.buffer,i=r.complete;0===o.length?i?c(!1):e.buffer.push(n):!t(n,o.shift())&&c(!1)}),(function(){e.complete=!0;var t=r.complete,n=r.buffer;t&&c(0===n.length),null==i||i.unsubscribe()}));return i};r.subscribe(s(u,a)),i.innerFrom(e).subscribe(s(a,u))}))}},5137:function(e,t,r){var n=this&&this.__read||function(e,t){var r="function"==typeof Symbol&&e[Symbol.iterator];if(!r)return e;var n,o,i=r.call(e),u=[];try{for(;(void 0===t||t-- >0)&&!(n=i.next()).done;)u.push(n.value)}catch(e){o={error:e}}finally{try{n&&!n.done&&(r=i.return)&&r.call(i)}finally{if(o)throw o.error}}return u},o=this&&this.__spreadArray||function(e,t){for(var r=0,n=t.length,o=e.length;r<n;r++,o++)e[o]=t[r];return e};Object.defineProperty(t,"__esModule",{value:!0}),t.share=void 0;var i=r(7103),u=r(3032),a=r(5125),c=r(4935);function s(e,t){for(var r=[],u=2;u<arguments.length;u++)r[u-2]=arguments[u];if(!0!==t){if(!1!==t){var c=new a.SafeSubscriber({next:function(){c.unsubscribe(),e()}});return i.innerFrom(t.apply(void 0,o([],n(r)))).subscribe(c)}}else e()}t.share=function(e){void 0===e&&(e={});var t=e.connector,r=void 0===t?function(){return new u.Subject}:t,n=e.resetOnError,o=void 0===n||n,l=e.resetOnComplete,f=void 0===l||l,d=e.resetOnRefCountZero,p=void 0===d||d;return function(e){var t,n,u,l=0,d=!1,h=!1,v=function(){null==n||n.unsubscribe(),n=void 0},b=function(){v(),t=u=void 0,d=h=!1},y=function(){var e=t;b(),null==e||e.unsubscribe()};return c.operate((function(e,c){l++,h||d||v();var m=u=null!=u?u:r();c.add((function(){0!=--l||h||d||(n=s(y,p))})),m.subscribe(c),!t&&l>0&&(t=new a.SafeSubscriber({next:function(e){return m.next(e)},error:function(e){h=!0,v(),n=s(b,o,e),m.error(e)},complete:function(){d=!0,v(),n=s(b,f),m.complete()}}),i.innerFrom(e).subscribe(t))}))(e)}}},1348:(e,t,r)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.shareReplay=void 0;var n=r(3274),o=r(5137);t.shareReplay=function(e,t,r){var i,u,a,c,s=!1;return e&&"object"==typeof e?(i=e.bufferSize,c=void 0===i?1/0:i,u=e.windowTime,t=void 0===u?1/0:u,s=void 0!==(a=e.refCount)&&a,r=e.scheduler):c=null!=e?e:1/0,o.share({connector:function(){return new n.ReplaySubject(c,t,r)},resetOnError:!0,resetOnComplete:!1,resetOnRefCountZero:s})}},8242:(e,t,r)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.single=void 0;var n=r(9474),o=r(6156),i=r(8598),u=r(4935),a=r(4990);t.single=function(e){return u.operate((function(t,r){var u,c=!1,s=!1,l=0;t.subscribe(a.createOperatorSubscriber(r,(function(n){s=!0,e&&!e(n,l++,t)||(c&&r.error(new o.SequenceError("Too many matching values")),c=!0,u=n)}),(function(){c?(r.next(u),r.complete()):r.error(s?new i.NotFoundError("No matching values"):new n.EmptyError)})))}))}},3169:(e,t,r)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.skip=void 0;var n=r(9154);t.skip=function(e){return n.filter((function(t,r){return e<=r}))}},2454:(e,t,r)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.skipLast=void 0;var n=r(4781),o=r(4935),i=r(4990);t.skipLast=function(e){return e<=0?n.identity:o.operate((function(t,r){var n=new Array(e),o=0;return t.subscribe(i.createOperatorSubscriber(r,(function(t){var i=o++;if(i<e)n[i]=t;else{var u=i%e,a=n[u];n[u]=t,r.next(a)}}))),function(){n=null}}))}},6931:(e,t,r)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.skipUntil=void 0;var n=r(4935),o=r(4990),i=r(7103),u=r(2576);t.skipUntil=function(e){return n.operate((function(t,r){var n=!1,a=o.createOperatorSubscriber(r,(function(){null==a||a.unsubscribe(),n=!0}),u.noop);i.innerFrom(e).subscribe(a),t.subscribe(o.createOperatorSubscriber(r,(function(e){return n&&r.next(e)})))}))}},7913:(e,t,r)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.skipWhile=void 0;var n=r(4935),o=r(4990);t.skipWhile=function(e){return n.operate((function(t,r){var n=!1,i=0;t.subscribe(o.createOperatorSubscriber(r,(function(t){return(n||(n=!e(t,i++)))&&r.next(t)})))}))}},9234:(e,t,r)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.startWith=void 0;var n=r(2239),o=r(2433),i=r(4935);t.startWith=function(){for(var e=[],t=0;t<arguments.length;t++)e[t]=arguments[t];var r=o.popScheduler(e);return i.operate((function(t,o){(r?n.concat(e,t,r):n.concat(e,t)).subscribe(o)}))}},276:(e,t,r)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.subscribeOn=void 0;var n=r(4935);t.subscribeOn=function(e,t){return void 0===t&&(t=0),n.operate((function(r,n){n.add(e.schedule((function(){return r.subscribe(n)}),t))}))}},9253:(e,t,r)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.switchAll=void 0;var n=r(8518),o=r(4781);t.switchAll=function(){return n.switchMap(o.identity)}},8518:(e,t,r)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.switchMap=void 0;var n=r(7103),o=r(4935),i=r(4990);t.switchMap=function(e,t){return o.operate((function(r,o){var u=null,a=0,c=!1,s=function(){return c&&!u&&o.complete()};r.subscribe(i.createOperatorSubscriber(o,(function(r){null==u||u.unsubscribe();var c=0,l=a++;n.innerFrom(e(r,l)).subscribe(u=i.createOperatorSubscriber(o,(function(e){return o.next(t?t(r,e,l,c++):e)}),(function(){u=null,s()})))}),(function(){c=!0,s()})))}))}},1173:(e,t,r)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.switchMapTo=void 0;var n=r(8518),o=r(3005);t.switchMapTo=function(e,t){return o.isFunction(t)?n.switchMap((function(){return e}),t):n.switchMap((function(){return e}))}},3855:(e,t,r)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.switchScan=void 0;var n=r(8518),o=r(4935);t.switchScan=function(e,t){return o.operate((function(r,o){var i=t;return n.switchMap((function(t,r){return e(i,t,r)}),(function(e,t){return i=t,t}))(r).subscribe(o),function(){i=null}}))}},4783:(e,t,r)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.take=void 0;var n=r(6332),o=r(4935),i=r(4990);t.take=function(e){return e<=0?function(){return n.EMPTY}:o.operate((function(t,r){var n=0;t.subscribe(i.createOperatorSubscriber(r,(function(t){++n<=e&&(r.next(t),e<=n&&r.complete())})))}))}},1980:function(e,t,r){var n=this&&this.__values||function(e){var t="function"==typeof Symbol&&Symbol.iterator,r=t&&e[t],n=0;if(r)return r.call(e);if(e&&"number"==typeof e.length)return{next:function(){return e&&n>=e.length&&(e=void 0),{value:e&&e[n++],done:!e}}};throw new TypeError(t?"Object is not iterable.":"Symbol.iterator is not defined.")};Object.defineProperty(t,"__esModule",{value:!0}),t.takeLast=void 0;var o=r(6332),i=r(4935),u=r(4990);t.takeLast=function(e){return e<=0?function(){return o.EMPTY}:i.operate((function(t,r){var o=[];t.subscribe(u.createOperatorSubscriber(r,(function(t){o.push(t),e<o.length&&o.shift()}),(function(){var e,t;try{for(var i=n(o),u=i.next();!u.done;u=i.next()){var a=u.value;r.next(a)}}catch(t){e={error:t}}finally{try{u&&!u.done&&(t=i.return)&&t.call(i)}finally{if(e)throw e.error}}r.complete()}),void 0,(function(){o=null})))}))}},9845:(e,t,r)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.takeUntil=void 0;var n=r(4935),o=r(4990),i=r(7103),u=r(2576);t.takeUntil=function(e){return n.operate((function(t,r){i.innerFrom(e).subscribe(o.createOperatorSubscriber(r,(function(){return r.complete()}),u.noop)),!r.closed&&t.subscribe(r)}))}},6060:(e,t,r)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.takeWhile=void 0;var n=r(4935),o=r(4990);t.takeWhile=function(e,t){return void 0===t&&(t=!1),n.operate((function(r,n){var i=0;r.subscribe(o.createOperatorSubscriber(n,(function(r){var o=e(r,i++);(o||t)&&n.next(r),!o&&n.complete()})))}))}},1138:(e,t,r)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.tap=void 0;var n=r(3005),o=r(4935),i=r(4990),u=r(4781);t.tap=function(e,t,r){var a=n.isFunction(e)||t||r?{next:e,error:t,complete:r}:e;return a?o.operate((function(e,t){var r;null===(r=a.subscribe)||void 0===r||r.call(a);var n=!0;e.subscribe(i.createOperatorSubscriber(t,(function(e){var r;null===(r=a.next)||void 0===r||r.call(a,e),t.next(e)}),(function(){var e;n=!1,null===(e=a.complete)||void 0===e||e.call(a),t.complete()}),(function(e){var r;n=!1,null===(r=a.error)||void 0===r||r.call(a,e),t.error(e)}),(function(){var e,t;n&&(null===(e=a.unsubscribe)||void 0===e||e.call(a)),null===(t=a.finalize)||void 0===t||t.call(a)})))})):u.identity}},7306:(e,t,r)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.throttle=void 0;var n=r(4935),o=r(4990),i=r(7103);t.throttle=function(e,t){return n.operate((function(r,n){var u=null!=t?t:{},a=u.leading,c=void 0===a||a,s=u.trailing,l=void 0!==s&&s,f=!1,d=null,p=null,h=!1,v=function(){null==p||p.unsubscribe(),p=null,l&&(m(),h&&n.complete())},b=function(){p=null,h&&n.complete()},y=function(t){return p=i.innerFrom(e(t)).subscribe(o.createOperatorSubscriber(n,v,b))},m=function(){if(f){f=!1;var e=d;d=null,n.next(e),!h&&y(e)}};r.subscribe(o.createOperatorSubscriber(n,(function(e){f=!0,d=e,(!p||p.closed)&&(c?m():y(e))}),(function(){h=!0,(!(l&&f&&p)||p.closed)&&n.complete()})))}))}},8968:(e,t,r)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.throttleTime=void 0;var n=r(2445),o=r(7306),i=r(7513);t.throttleTime=function(e,t,r){void 0===t&&(t=n.asyncScheduler);var u=i.timer(e,t);return o.throttle((function(){return u}),r)}},1779:(e,t,r)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.throwIfEmpty=void 0;var n=r(9474),o=r(4935),i=r(4990);function u(){return new n.EmptyError}t.throwIfEmpty=function(e){return void 0===e&&(e=u),o.operate((function(t,r){var n=!1;t.subscribe(i.createOperatorSubscriber(r,(function(e){n=!0,r.next(e)}),(function(){return n?r.complete():r.error(e())})))}))}},8005:(e,t,r)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.TimeInterval=t.timeInterval=void 0;var n=r(2445),o=r(4935),i=r(4990);t.timeInterval=function(e){return void 0===e&&(e=n.asyncScheduler),o.operate((function(t,r){var n=e.now();t.subscribe(i.createOperatorSubscriber(r,(function(t){var o=e.now(),i=o-n;n=o,r.next(new u(t,i))})))}))};var u=function(e,t){this.value=e,this.interval=t};t.TimeInterval=u},4173:(e,t,r)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.timeout=t.TimeoutError=void 0;var n=r(2445),o=r(1677),i=r(4935),u=r(7103),a=r(7029),c=r(4990),s=r(7738);function l(e){throw new t.TimeoutError(e)}t.TimeoutError=a.createErrorClass((function(e){return function(t){void 0===t&&(t=null),e(this),this.message="Timeout has occurred",this.name="TimeoutError",this.info=t}})),t.timeout=function(e,t){var r=o.isValidDate(e)?{first:e}:"number"==typeof e?{each:e}:e,a=r.first,f=r.each,d=r.with,p=void 0===d?l:d,h=r.scheduler,v=void 0===h?null!=t?t:n.asyncScheduler:h,b=r.meta,y=void 0===b?null:b;if(null==a&&null==f)throw new TypeError("No timeout provided.");return i.operate((function(e,t){var r,n,o=null,i=0,l=function(e){n=s.executeSchedule(t,v,(function(){try{r.unsubscribe(),u.innerFrom(p({meta:y,lastValue:o,seen:i})).subscribe(t)}catch(e){t.error(e)}}),e)};r=e.subscribe(c.createOperatorSubscriber(t,(function(e){null==n||n.unsubscribe(),i++,t.next(o=e),f>0&&l(f)}),void 0,void 0,(function(){(null==n?void 0:n.closed)||null==n||n.unsubscribe(),o=null}))),!i&&l(null!=a?"number"==typeof a?a:+a-v.now():f)}))}},7223:(e,t,r)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.timeoutWith=void 0;var n=r(2445),o=r(1677),i=r(4173);t.timeoutWith=function(e,t,r){var u,a,c;if(r=null!=r?r:n.async,o.isValidDate(e)?u=e:"number"==typeof e&&(a=e),!t)throw new TypeError("No observable provided to switch to");if(c=function(){return t},null==u&&null==a)throw new TypeError("No timeout provided.");return i.timeout({first:u,each:a,scheduler:r,with:c})}},8975:(e,t,r)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.timestamp=void 0;var n=r(7950),o=r(7291);t.timestamp=function(e){return void 0===e&&(e=n.dateTimestampProvider),o.map((function(t){return{value:t,timestamp:e.now()}}))}},2:(e,t,r)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.toArray=void 0;var n=r(122),o=r(4935),i=function(e,t){return e.push(t),e};t.toArray=function(){return o.operate((function(e,t){n.reduce(i,[])(e).subscribe(t)}))}},2826:(e,t,r)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.window=void 0;var n=r(3032),o=r(4935),i=r(4990),u=r(2576),a=r(7103);t.window=function(e){return o.operate((function(t,r){var o=new n.Subject;r.next(o.asObservable());var c=function(e){o.error(e),r.error(e)};return t.subscribe(i.createOperatorSubscriber(r,(function(e){return null==o?void 0:o.next(e)}),(function(){o.complete(),r.complete()}),c)),a.innerFrom(e).subscribe(i.createOperatorSubscriber(r,(function(){o.complete(),r.next(o=new n.Subject)}),u.noop,c)),function(){null==o||o.unsubscribe(),o=null}}))}},7526:function(e,t,r){var n=this&&this.__values||function(e){var t="function"==typeof Symbol&&Symbol.iterator,r=t&&e[t],n=0;if(r)return r.call(e);if(e&&"number"==typeof e.length)return{next:function(){return e&&n>=e.length&&(e=void 0),{value:e&&e[n++],done:!e}}};throw new TypeError(t?"Object is not iterable.":"Symbol.iterator is not defined.")};Object.defineProperty(t,"__esModule",{value:!0}),t.windowCount=void 0;var o=r(3032),i=r(4935),u=r(4990);t.windowCount=function(e,t){void 0===t&&(t=0);var r=t>0?t:e;return i.operate((function(t,i){var a=[new o.Subject],c=0;i.next(a[0].asObservable()),t.subscribe(u.createOperatorSubscriber(i,(function(t){var u,s;try{for(var l=n(a),f=l.next();!f.done;f=l.next())f.value.next(t)}catch(e){u={error:e}}finally{try{f&&!f.done&&(s=l.return)&&s.call(l)}finally{if(u)throw u.error}}var d=c-e+1;if(d>=0&&d%r==0&&a.shift().complete(),++c%r==0){var p=new o.Subject;a.push(p),i.next(p.asObservable())}}),(function(){for(;a.length>0;)a.shift().complete();i.complete()}),(function(e){for(;a.length>0;)a.shift().error(e);i.error(e)}),(function(){a=null})))}))}},8294:(e,t,r)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.windowTime=void 0;var n=r(3032),o=r(2445),i=r(3865),u=r(4935),a=r(4990),c=r(6967),s=r(2433),l=r(7738);t.windowTime=function(e){for(var t,r,f=[],d=1;d<arguments.length;d++)f[d-1]=arguments[d];var p=null!==(t=s.popScheduler(f))&&void 0!==t?t:o.asyncScheduler,h=null!==(r=f[0])&&void 0!==r?r:null,v=f[1]||1/0;return u.operate((function(t,r){var o=[],u=!1,s=function(e){var t=e.window,r=e.subs;t.complete(),r.unsubscribe(),c.arrRemove(o,e),u&&f()},f=function(){if(o){var t=new i.Subscription;r.add(t);var u=new n.Subject,a={window:u,subs:t,seen:0};o.push(a),r.next(u.asObservable()),l.executeSchedule(t,p,(function(){return s(a)}),e)}};null!==h&&h>=0?l.executeSchedule(r,p,f,h,!0):u=!0,f();var d=function(e){return o.slice().forEach(e)},b=function(e){d((function(t){var r=t.window;return e(r)})),e(r),r.unsubscribe()};return t.subscribe(a.createOperatorSubscriber(r,(function(e){d((function(t){t.window.next(e),v<=++t.seen&&s(t)}))}),(function(){return b((function(e){return e.complete()}))}),(function(e){return b((function(t){return t.error(e)}))}))),function(){o=null}}))}},1883:function(e,t,r){var n=this&&this.__values||function(e){var t="function"==typeof Symbol&&Symbol.iterator,r=t&&e[t],n=0;if(r)return r.call(e);if(e&&"number"==typeof e.length)return{next:function(){return e&&n>=e.length&&(e=void 0),{value:e&&e[n++],done:!e}}};throw new TypeError(t?"Object is not iterable.":"Symbol.iterator is not defined.")};Object.defineProperty(t,"__esModule",{value:!0}),t.windowToggle=void 0;var o=r(3032),i=r(3865),u=r(4935),a=r(7103),c=r(4990),s=r(2576),l=r(6967);t.windowToggle=function(e,t){return u.operate((function(r,u){var f=[],d=function(e){for(;0<f.length;)f.shift().error(e);u.error(e)};a.innerFrom(e).subscribe(c.createOperatorSubscriber(u,(function(e){var r=new o.Subject;f.push(r);var n,p=new i.Subscription;try{n=a.innerFrom(t(e))}catch(e){return void d(e)}u.next(r.asObservable()),p.add(n.subscribe(c.createOperatorSubscriber(u,(function(){l.arrRemove(f,r),r.complete(),p.unsubscribe()}),s.noop,d)))}),s.noop)),r.subscribe(c.createOperatorSubscriber(u,(function(e){var t,r,o=f.slice();try{for(var i=n(o),u=i.next();!u.done;u=i.next())u.value.next(e)}catch(e){t={error:e}}finally{try{u&&!u.done&&(r=i.return)&&r.call(i)}finally{if(t)throw t.error}}}),(function(){for(;0<f.length;)f.shift().complete();u.complete()}),d,(function(){for(;0<f.length;)f.shift().unsubscribe()})))}))}},4309:(e,t,r)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.windowWhen=void 0;var n=r(3032),o=r(4935),i=r(4990),u=r(7103);t.windowWhen=function(e){return o.operate((function(t,r){var o,a,c=function(e){o.error(e),r.error(e)},s=function(){var t;null==a||a.unsubscribe(),null==o||o.complete(),o=new n.Subject,r.next(o.asObservable());try{t=u.innerFrom(e())}catch(e){return void c(e)}t.subscribe(a=i.createOperatorSubscriber(r,s,s,c))};s(),t.subscribe(i.createOperatorSubscriber(r,(function(e){return o.next(e)}),(function(){o.complete(),r.complete()}),c,(function(){null==a||a.unsubscribe(),o=null})))}))}},3041:function(e,t,r){var n=this&&this.__read||function(e,t){var r="function"==typeof Symbol&&e[Symbol.iterator];if(!r)return e;var n,o,i=r.call(e),u=[];try{for(;(void 0===t||t-- >0)&&!(n=i.next()).done;)u.push(n.value)}catch(e){o={error:e}}finally{try{n&&!n.done&&(r=i.return)&&r.call(i)}finally{if(o)throw o.error}}return u},o=this&&this.__spreadArray||function(e,t){for(var r=0,n=t.length,o=e.length;r<n;r++,o++)e[o]=t[r];return e};Object.defineProperty(t,"__esModule",{value:!0}),t.withLatestFrom=void 0;var i=r(4935),u=r(4990),a=r(7103),c=r(4781),s=r(2576),l=r(2433);t.withLatestFrom=function(){for(var e=[],t=0;t<arguments.length;t++)e[t]=arguments[t];var r=l.popResultSelector(e);return i.operate((function(t,i){for(var l=e.length,f=new Array(l),d=e.map((function(){return!1})),p=!1,h=function(t){a.innerFrom(e[t]).subscribe(u.createOperatorSubscriber(i,(function(e){f[t]=e,p||d[t]||(d[t]=!0,(p=d.every(c.identity))&&(d=null))}),s.noop))},v=0;v<l;v++)h(v);t.subscribe(u.createOperatorSubscriber(i,(function(e){if(p){var t=o([e],n(f));i.next(r?r.apply(void 0,o([],n(t))):t)}})))}))}},4400:function(e,t,r){var n=this&&this.__read||function(e,t){var r="function"==typeof Symbol&&e[Symbol.iterator];if(!r)return e;var n,o,i=r.call(e),u=[];try{for(;(void 0===t||t-- >0)&&!(n=i.next()).done;)u.push(n.value)}catch(e){o={error:e}}finally{try{n&&!n.done&&(r=i.return)&&r.call(i)}finally{if(o)throw o.error}}return u},o=this&&this.__spreadArray||function(e,t){for(var r=0,n=t.length,o=e.length;r<n;r++,o++)e[o]=t[r];return e};Object.defineProperty(t,"__esModule",{value:!0}),t.zip=void 0;var i=r(7654),u=r(4935);t.zip=function(){for(var e=[],t=0;t<arguments.length;t++)e[t]=arguments[t];return u.operate((function(t,r){i.zip.apply(void 0,o([t],n(e))).subscribe(r)}))}},8593:(e,t,r)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.zipAll=void 0;var n=r(7654),o=r(2069);t.zipAll=function(e){return o.joinAllInternals(n.zip,e)}},8096:function(e,t,r){var n=this&&this.__read||function(e,t){var r="function"==typeof Symbol&&e[Symbol.iterator];if(!r)return e;var n,o,i=r.call(e),u=[];try{for(;(void 0===t||t-- >0)&&!(n=i.next()).done;)u.push(n.value)}catch(e){o={error:e}}finally{try{n&&!n.done&&(r=i.return)&&r.call(i)}finally{if(o)throw o.error}}return u},o=this&&this.__spreadArray||function(e,t){for(var r=0,n=t.length,o=e.length;r<n;r++,o++)e[o]=t[r];return e};Object.defineProperty(t,"__esModule",{value:!0}),t.zipWith=void 0;var i=r(4400);t.zipWith=function(){for(var e=[],t=0;t<arguments.length;t++)e[t]=arguments[t];return i.zip.apply(void 0,o([],n(e)))}},7631:(e,t,r)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.scheduleArray=void 0;var n=r(2419);t.scheduleArray=function(e,t){return new n.Observable((function(r){var n=0;return t.schedule((function(){n===e.length?r.complete():(r.next(e[n++]),r.closed||this.schedule())}))}))}},8489:(e,t,r)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.scheduleAsyncIterable=void 0;var n=r(2419),o=r(7738);t.scheduleAsyncIterable=function(e,t){if(!e)throw new Error("Iterable cannot be null");return new n.Observable((function(r){o.executeSchedule(r,t,(function(){var n=e[Symbol.asyncIterator]();o.executeSchedule(r,t,(function(){n.next().then((function(e){e.done?r.complete():r.next(e.value)}))}),0,!0)}))}))}},1297:(e,t,r)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.scheduleIterable=void 0;var n=r(2419),o=r(3725),i=r(3005),u=r(7738);t.scheduleIterable=function(e,t){return new n.Observable((function(r){var n;return u.executeSchedule(r,t,(function(){n=e[o.iterator](),u.executeSchedule(r,t,(function(){var e,t,o;try{t=(e=n.next()).value,o=e.done}catch(e){return void r.error(e)}o?r.complete():r.next(t)}),0,!0)})),function(){return i.isFunction(null==n?void 0:n.return)&&n.return()}}))}},4001:(e,t,r)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.scheduleObservable=void 0;var n=r(7103),o=r(1184),i=r(276);t.scheduleObservable=function(e,t){return n.innerFrom(e).pipe(i.subscribeOn(t),o.observeOn(t))}},5143:(e,t,r)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.schedulePromise=void 0;var n=r(7103),o=r(1184),i=r(276);t.schedulePromise=function(e,t){return n.innerFrom(e).pipe(i.subscribeOn(t),o.observeOn(t))}},3676:(e,t,r)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.scheduleReadableStreamLike=void 0;var n=r(8489),o=r(7823);t.scheduleReadableStreamLike=function(e,t){return n.scheduleAsyncIterable(o.readableStreamLikeToAsyncGenerator(e),t)}},5207:(e,t,r)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.scheduled=void 0;var n=r(4001),o=r(5143),i=r(7631),u=r(1297),a=r(8489),c=r(9500),s=r(6018),l=r(3909),f=r(2743),d=r(9595),p=r(9906),h=r(7823),v=r(3676);t.scheduled=function(e,t){if(null!=e){if(c.isInteropObservable(e))return n.scheduleObservable(e,t);if(l.isArrayLike(e))return i.scheduleArray(e,t);if(s.isPromise(e))return o.schedulePromise(e,t);if(d.isAsyncIterable(e))return a.scheduleAsyncIterable(e,t);if(f.isIterable(e))return u.scheduleIterable(e,t);if(h.isReadableStreamLike(e))return v.scheduleReadableStreamLike(e,t)}throw p.createInvalidObservableTypeError(e)}},1986:function(e,t,r){var n,o=this&&this.__extends||(n=function(e,t){return n=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,t){e.__proto__=t}||function(e,t){for(var r in t)Object.prototype.hasOwnProperty.call(t,r)&&(e[r]=t[r])},n(e,t)},function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Class extends value "+String(t)+" is not a constructor or null");function r(){this.constructor=e}n(e,t),e.prototype=null===t?Object.create(t):(r.prototype=t.prototype,new r)});Object.defineProperty(t,"__esModule",{value:!0}),t.Action=void 0;var i=function(e){function t(t,r){return e.call(this)||this}return o(t,e),t.prototype.schedule=function(e,t){return void 0===t&&(t=0),this},t}(r(3865).Subscription);t.Action=i},7574:function(e,t,r){var n,o=this&&this.__extends||(n=function(e,t){return n=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,t){e.__proto__=t}||function(e,t){for(var r in t)Object.prototype.hasOwnProperty.call(t,r)&&(e[r]=t[r])},n(e,t)},function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Class extends value "+String(t)+" is not a constructor or null");function r(){this.constructor=e}n(e,t),e.prototype=null===t?Object.create(t):(r.prototype=t.prototype,new r)});Object.defineProperty(t,"__esModule",{value:!0}),t.AnimationFrameAction=void 0;var i=r(9702),u=r(505),a=function(e){function t(t,r){var n=e.call(this,t,r)||this;return n.scheduler=t,n.work=r,n}return o(t,e),t.prototype.requestAsyncId=function(t,r,n){return void 0===n&&(n=0),null!==n&&n>0?e.prototype.requestAsyncId.call(this,t,r,n):(t.actions.push(this),t._scheduled||(t._scheduled=u.animationFrameProvider.requestAnimationFrame((function(){return t.flush(void 0)}))))},t.prototype.recycleAsyncId=function(t,r,n){var o;if(void 0===n&&(n=0),null!=n?n>0:this.delay>0)return e.prototype.recycleAsyncId.call(this,t,r,n);var i=t.actions;null!=r&&(null===(o=i[i.length-1])||void 0===o?void 0:o.id)!==r&&(u.animationFrameProvider.cancelAnimationFrame(r),t._scheduled=void 0)},t}(i.AsyncAction);t.AnimationFrameAction=a},2934:function(e,t,r){var n,o=this&&this.__extends||(n=function(e,t){return n=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,t){e.__proto__=t}||function(e,t){for(var r in t)Object.prototype.hasOwnProperty.call(t,r)&&(e[r]=t[r])},n(e,t)},function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Class extends value "+String(t)+" is not a constructor or null");function r(){this.constructor=e}n(e,t),e.prototype=null===t?Object.create(t):(r.prototype=t.prototype,new r)});Object.defineProperty(t,"__esModule",{value:!0}),t.AnimationFrameScheduler=void 0;var i=function(e){function t(){return null!==e&&e.apply(this,arguments)||this}return o(t,e),t.prototype.flush=function(e){this._active=!0;var t=this._scheduled;this._scheduled=void 0;var r,n=this.actions;e=e||n.shift();do{if(r=e.execute(e.state,e.delay))break}while((e=n[0])&&e.id===t&&n.shift());if(this._active=!1,r){for(;(e=n[0])&&e.id===t&&n.shift();)e.unsubscribe();throw r}},t}(r(3643).AsyncScheduler);t.AnimationFrameScheduler=i},2189:function(e,t,r){var n,o=this&&this.__extends||(n=function(e,t){return n=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,t){e.__proto__=t}||function(e,t){for(var r in t)Object.prototype.hasOwnProperty.call(t,r)&&(e[r]=t[r])},n(e,t)},function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Class extends value "+String(t)+" is not a constructor or null");function r(){this.constructor=e}n(e,t),e.prototype=null===t?Object.create(t):(r.prototype=t.prototype,new r)});Object.defineProperty(t,"__esModule",{value:!0}),t.AsapAction=void 0;var i=r(9702),u=r(8908),a=function(e){function t(t,r){var n=e.call(this,t,r)||this;return n.scheduler=t,n.work=r,n}return o(t,e),t.prototype.requestAsyncId=function(t,r,n){return void 0===n&&(n=0),null!==n&&n>0?e.prototype.requestAsyncId.call(this,t,r,n):(t.actions.push(this),t._scheduled||(t._scheduled=u.immediateProvider.setImmediate(t.flush.bind(t,void 0))))},t.prototype.recycleAsyncId=function(t,r,n){var o;if(void 0===n&&(n=0),null!=n?n>0:this.delay>0)return e.prototype.recycleAsyncId.call(this,t,r,n);var i=t.actions;null!=r&&(null===(o=i[i.length-1])||void 0===o?void 0:o.id)!==r&&(u.immediateProvider.clearImmediate(r),t._scheduled===r&&(t._scheduled=void 0))},t}(i.AsyncAction);t.AsapAction=a},5523:function(e,t,r){var n,o=this&&this.__extends||(n=function(e,t){return n=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,t){e.__proto__=t}||function(e,t){for(var r in t)Object.prototype.hasOwnProperty.call(t,r)&&(e[r]=t[r])},n(e,t)},function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Class extends value "+String(t)+" is not a constructor or null");function r(){this.constructor=e}n(e,t),e.prototype=null===t?Object.create(t):(r.prototype=t.prototype,new r)});Object.defineProperty(t,"__esModule",{value:!0}),t.AsapScheduler=void 0;var i=function(e){function t(){return null!==e&&e.apply(this,arguments)||this}return o(t,e),t.prototype.flush=function(e){this._active=!0;var t=this._scheduled;this._scheduled=void 0;var r,n=this.actions;e=e||n.shift();do{if(r=e.execute(e.state,e.delay))break}while((e=n[0])&&e.id===t&&n.shift());if(this._active=!1,r){for(;(e=n[0])&&e.id===t&&n.shift();)e.unsubscribe();throw r}},t}(r(3643).AsyncScheduler);t.AsapScheduler=i},9702:function(e,t,r){var n,o=this&&this.__extends||(n=function(e,t){return n=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,t){e.__proto__=t}||function(e,t){for(var r in t)Object.prototype.hasOwnProperty.call(t,r)&&(e[r]=t[r])},n(e,t)},function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Class extends value "+String(t)+" is not a constructor or null");function r(){this.constructor=e}n(e,t),e.prototype=null===t?Object.create(t):(r.prototype=t.prototype,new r)});Object.defineProperty(t,"__esModule",{value:!0}),t.AsyncAction=void 0;var i=r(1986),u=r(8203),a=r(6967),c=function(e){function t(t,r){var n=e.call(this,t,r)||this;return n.scheduler=t,n.work=r,n.pending=!1,n}return o(t,e),t.prototype.schedule=function(e,t){var r;if(void 0===t&&(t=0),this.closed)return this;this.state=e;var n=this.id,o=this.scheduler;return null!=n&&(this.id=this.recycleAsyncId(o,n,t)),this.pending=!0,this.delay=t,this.id=null!==(r=this.id)&&void 0!==r?r:this.requestAsyncId(o,this.id,t),this},t.prototype.requestAsyncId=function(e,t,r){return void 0===r&&(r=0),u.intervalProvider.setInterval(e.flush.bind(e,this),r)},t.prototype.recycleAsyncId=function(e,t,r){if(void 0===r&&(r=0),null!=r&&this.delay===r&&!1===this.pending)return t;null!=t&&u.intervalProvider.clearInterval(t)},t.prototype.execute=function(e,t){if(this.closed)return new Error("executing a cancelled action");this.pending=!1;var r=this._execute(e,t);if(r)return r;!1===this.pending&&null!=this.id&&(this.id=this.recycleAsyncId(this.scheduler,this.id,null))},t.prototype._execute=function(e,t){var r,n=!1;try{this.work(e)}catch(e){n=!0,r=e||new Error("Scheduled action threw falsy error")}if(n)return this.unsubscribe(),r},t.prototype.unsubscribe=function(){if(!this.closed){var t=this.id,r=this.scheduler,n=r.actions;this.work=this.state=this.scheduler=null,this.pending=!1,a.arrRemove(n,this),null!=t&&(this.id=this.recycleAsyncId(r,t,null)),this.delay=null,e.prototype.unsubscribe.call(this)}},t}(i.Action);t.AsyncAction=c},3643:function(e,t,r){var n,o=this&&this.__extends||(n=function(e,t){return n=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,t){e.__proto__=t}||function(e,t){for(var r in t)Object.prototype.hasOwnProperty.call(t,r)&&(e[r]=t[r])},n(e,t)},function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Class extends value "+String(t)+" is not a constructor or null");function r(){this.constructor=e}n(e,t),e.prototype=null===t?Object.create(t):(r.prototype=t.prototype,new r)});Object.defineProperty(t,"__esModule",{value:!0}),t.AsyncScheduler=void 0;var i=r(218),u=function(e){function t(t,r){void 0===r&&(r=i.Scheduler.now);var n=e.call(this,t,r)||this;return n.actions=[],n._active=!1,n}return o(t,e),t.prototype.flush=function(e){var t=this.actions;if(this._active)t.push(e);else{var r;this._active=!0;do{if(r=e.execute(e.state,e.delay))break}while(e=t.shift());if(this._active=!1,r){for(;e=t.shift();)e.unsubscribe();throw r}}},t}(i.Scheduler);t.AsyncScheduler=u},6201:function(e,t,r){var n,o=this&&this.__extends||(n=function(e,t){return n=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,t){e.__proto__=t}||function(e,t){for(var r in t)Object.prototype.hasOwnProperty.call(t,r)&&(e[r]=t[r])},n(e,t)},function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Class extends value "+String(t)+" is not a constructor or null");function r(){this.constructor=e}n(e,t),e.prototype=null===t?Object.create(t):(r.prototype=t.prototype,new r)});Object.defineProperty(t,"__esModule",{value:!0}),t.QueueAction=void 0;var i=function(e){function t(t,r){var n=e.call(this,t,r)||this;return n.scheduler=t,n.work=r,n}return o(t,e),t.prototype.schedule=function(t,r){return void 0===r&&(r=0),r>0?e.prototype.schedule.call(this,t,r):(this.delay=r,this.state=t,this.scheduler.flush(this),this)},t.prototype.execute=function(t,r){return r>0||this.closed?e.prototype.execute.call(this,t,r):this._execute(t,r)},t.prototype.requestAsyncId=function(t,r,n){return void 0===n&&(n=0),null!=n&&n>0||null==n&&this.delay>0?e.prototype.requestAsyncId.call(this,t,r,n):(t.flush(this),0)},t}(r(9702).AsyncAction);t.QueueAction=i},5860:function(e,t,r){var n,o=this&&this.__extends||(n=function(e,t){return n=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,t){e.__proto__=t}||function(e,t){for(var r in t)Object.prototype.hasOwnProperty.call(t,r)&&(e[r]=t[r])},n(e,t)},function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Class extends value "+String(t)+" is not a constructor or null");function r(){this.constructor=e}n(e,t),e.prototype=null===t?Object.create(t):(r.prototype=t.prototype,new r)});Object.defineProperty(t,"__esModule",{value:!0}),t.QueueScheduler=void 0;var i=function(e){function t(){return null!==e&&e.apply(this,arguments)||this}return o(t,e),t}(r(3643).AsyncScheduler);t.QueueScheduler=i},4123:function(e,t,r){var n,o=this&&this.__extends||(n=function(e,t){return n=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,t){e.__proto__=t}||function(e,t){for(var r in t)Object.prototype.hasOwnProperty.call(t,r)&&(e[r]=t[r])},n(e,t)},function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Class extends value "+String(t)+" is not a constructor or null");function r(){this.constructor=e}n(e,t),e.prototype=null===t?Object.create(t):(r.prototype=t.prototype,new r)});Object.defineProperty(t,"__esModule",{value:!0}),t.VirtualAction=t.VirtualTimeScheduler=void 0;var i=r(9702),u=r(3865),a=function(e){function t(t,r){void 0===t&&(t=c),void 0===r&&(r=1/0);var n=e.call(this,t,(function(){return n.frame}))||this;return n.maxFrames=r,n.frame=0,n.index=-1,n}return o(t,e),t.prototype.flush=function(){for(var e,t,r=this.actions,n=this.maxFrames;(t=r[0])&&t.delay<=n&&(r.shift(),this.frame=t.delay,!(e=t.execute(t.state,t.delay))););if(e){for(;t=r.shift();)t.unsubscribe();throw e}},t.frameTimeFactor=10,t}(r(3643).AsyncScheduler);t.VirtualTimeScheduler=a;var c=function(e){function t(t,r,n){void 0===n&&(n=t.index+=1);var o=e.call(this,t,r)||this;return o.scheduler=t,o.work=r,o.index=n,o.active=!0,o.index=t.index=n,o}return o(t,e),t.prototype.schedule=function(r,n){if(void 0===n&&(n=0),Number.isFinite(n)){if(!this.id)return e.prototype.schedule.call(this,r,n);this.active=!1;var o=new t(this.scheduler,this.work);return this.add(o),o.schedule(r,n)}return u.Subscription.EMPTY},t.prototype.requestAsyncId=function(e,r,n){void 0===n&&(n=0),this.delay=e.frame+n;var o=e.actions;return o.push(this),o.sort(t.sortActions),1},t.prototype.recycleAsyncId=function(e,t,r){void 0===r&&(r=0)},t.prototype._execute=function(t,r){if(!0===this.active)return e.prototype._execute.call(this,t,r)},t.sortActions=function(e,t){return e.delay===t.delay?e.index===t.index?0:e.index>t.index?1:-1:e.delay>t.delay?1:-1},t}(i.AsyncAction);t.VirtualAction=c},3660:(e,t,r)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.animationFrame=t.animationFrameScheduler=void 0;var n=r(7574),o=r(2934);t.animationFrameScheduler=new o.AnimationFrameScheduler(n.AnimationFrameAction),t.animationFrame=t.animationFrameScheduler},505:function(e,t,r){var n=this&&this.__read||function(e,t){var r="function"==typeof Symbol&&e[Symbol.iterator];if(!r)return e;var n,o,i=r.call(e),u=[];try{for(;(void 0===t||t-- >0)&&!(n=i.next()).done;)u.push(n.value)}catch(e){o={error:e}}finally{try{n&&!n.done&&(r=i.return)&&r.call(i)}finally{if(o)throw o.error}}return u},o=this&&this.__spreadArray||function(e,t){for(var r=0,n=t.length,o=e.length;r<n;r++,o++)e[o]=t[r];return e};Object.defineProperty(t,"__esModule",{value:!0}),t.animationFrameProvider=void 0;var i=r(3865);t.animationFrameProvider={schedule:function(e){var r=requestAnimationFrame,n=cancelAnimationFrame,o=t.animationFrameProvider.delegate;o&&(r=o.requestAnimationFrame,n=o.cancelAnimationFrame);var u=r((function(t){n=void 0,e(t)}));return new i.Subscription((function(){return null==n?void 0:n(u)}))},requestAnimationFrame:function(){for(var e=[],r=0;r<arguments.length;r++)e[r]=arguments[r];var i=t.animationFrameProvider.delegate;return((null==i?void 0:i.requestAnimationFrame)||requestAnimationFrame).apply(void 0,o([],n(e)))},cancelAnimationFrame:function(){for(var e=[],r=0;r<arguments.length;r++)e[r]=arguments[r];var i=t.animationFrameProvider.delegate;return((null==i?void 0:i.cancelAnimationFrame)||cancelAnimationFrame).apply(void 0,o([],n(e)))},delegate:void 0}},580:(e,t,r)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.asap=t.asapScheduler=void 0;var n=r(2189),o=r(5523);t.asapScheduler=new o.AsapScheduler(n.AsapAction),t.asap=t.asapScheduler},2445:(e,t,r)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.async=t.asyncScheduler=void 0;var n=r(9702),o=r(3643);t.asyncScheduler=new o.AsyncScheduler(n.AsyncAction),t.async=t.asyncScheduler},7950:(e,t)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.dateTimestampProvider=void 0,t.dateTimestampProvider={now:function(){return(t.dateTimestampProvider.delegate||Date).now()},delegate:void 0}},8908:function(e,t,r){var n=this&&this.__read||function(e,t){var r="function"==typeof Symbol&&e[Symbol.iterator];if(!r)return e;var n,o,i=r.call(e),u=[];try{for(;(void 0===t||t-- >0)&&!(n=i.next()).done;)u.push(n.value)}catch(e){o={error:e}}finally{try{n&&!n.done&&(r=i.return)&&r.call(i)}finally{if(o)throw o.error}}return u},o=this&&this.__spreadArray||function(e,t){for(var r=0,n=t.length,o=e.length;r<n;r++,o++)e[o]=t[r];return e};Object.defineProperty(t,"__esModule",{value:!0}),t.immediateProvider=void 0;var i=r(7629),u=i.Immediate.setImmediate,a=i.Immediate.clearImmediate;t.immediateProvider={setImmediate:function(){for(var e=[],r=0;r<arguments.length;r++)e[r]=arguments[r];var i=t.immediateProvider.delegate;return((null==i?void 0:i.setImmediate)||u).apply(void 0,o([],n(e)))},clearImmediate:function(e){var r=t.immediateProvider.delegate;return((null==r?void 0:r.clearImmediate)||a)(e)},delegate:void 0}},8203:function(e,t){var r=this&&this.__read||function(e,t){var r="function"==typeof Symbol&&e[Symbol.iterator];if(!r)return e;var n,o,i=r.call(e),u=[];try{for(;(void 0===t||t-- >0)&&!(n=i.next()).done;)u.push(n.value)}catch(e){o={error:e}}finally{try{n&&!n.done&&(r=i.return)&&r.call(i)}finally{if(o)throw o.error}}return u},n=this&&this.__spreadArray||function(e,t){for(var r=0,n=t.length,o=e.length;r<n;r++,o++)e[o]=t[r];return e};Object.defineProperty(t,"__esModule",{value:!0}),t.intervalProvider=void 0,t.intervalProvider={setInterval:function(e,o){for(var i=[],u=2;u<arguments.length;u++)i[u-2]=arguments[u];var a=t.intervalProvider.delegate;return(null==a?void 0:a.setInterval)?a.setInterval.apply(a,n([e,o],r(i))):setInterval.apply(void 0,n([e,o],r(i)))},clearInterval:function(e){var r=t.intervalProvider.delegate;return((null==r?void 0:r.clearInterval)||clearInterval)(e)},delegate:void 0}},6813:(e,t)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.performanceTimestampProvider=void 0,t.performanceTimestampProvider={now:function(){return(t.performanceTimestampProvider.delegate||performance).now()},delegate:void 0}},8615:(e,t,r)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.queue=t.queueScheduler=void 0;var n=r(6201),o=r(5860);t.queueScheduler=new o.QueueScheduler(n.QueueAction),t.queue=t.queueScheduler},4590:function(e,t){var r=this&&this.__read||function(e,t){var r="function"==typeof Symbol&&e[Symbol.iterator];if(!r)return e;var n,o,i=r.call(e),u=[];try{for(;(void 0===t||t-- >0)&&!(n=i.next()).done;)u.push(n.value)}catch(e){o={error:e}}finally{try{n&&!n.done&&(r=i.return)&&r.call(i)}finally{if(o)throw o.error}}return u},n=this&&this.__spreadArray||function(e,t){for(var r=0,n=t.length,o=e.length;r<n;r++,o++)e[o]=t[r];return e};Object.defineProperty(t,"__esModule",{value:!0}),t.timeoutProvider=void 0,t.timeoutProvider={setTimeout:function(e,o){for(var i=[],u=2;u<arguments.length;u++)i[u-2]=arguments[u];var a=t.timeoutProvider.delegate;return(null==a?void 0:a.setTimeout)?a.setTimeout.apply(a,n([e,o],r(i))):setTimeout.apply(void 0,n([e,o],r(i)))},clearTimeout:function(e){var r=t.timeoutProvider.delegate;return((null==r?void 0:r.clearTimeout)||clearTimeout)(e)},delegate:void 0}},3725:(e,t)=>{function r(){return"function"==typeof Symbol&&Symbol.iterator?Symbol.iterator:"@@iterator"}Object.defineProperty(t,"__esModule",{value:!0}),t.iterator=t.getSymbolIterator=void 0,t.getSymbolIterator=r,t.iterator=r()},2801:(e,t)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.observable=void 0,t.observable="function"==typeof Symbol&&Symbol.observable||"@@observable"},8433:(e,t)=>{Object.defineProperty(t,"__esModule",{value:!0})},2351:(e,t,r)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.ArgumentOutOfRangeError=void 0;var n=r(7029);t.ArgumentOutOfRangeError=n.createErrorClass((function(e){return function(){e(this),this.name="ArgumentOutOfRangeError",this.message="argument out of range"}}))},9474:(e,t,r)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.EmptyError=void 0;var n=r(7029);t.EmptyError=n.createErrorClass((function(e){return function(){e(this),this.name="EmptyError",this.message="no elements in sequence"}}))},7629:(e,t)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.TestTools=t.Immediate=void 0;var r,n=1,o={};function i(e){return e in o&&(delete o[e],!0)}t.Immediate={setImmediate:function(e){var t=n++;return o[t]=!0,r||(r=Promise.resolve()),r.then((function(){return i(t)&&e()})),t},clearImmediate:function(e){i(e)}},t.TestTools={pending:function(){return Object.keys(o).length}}},8598:(e,t,r)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.NotFoundError=void 0;var n=r(7029);t.NotFoundError=n.createErrorClass((function(e){return function(t){e(this),this.name="NotFoundError",this.message=t}}))},2642:(e,t,r)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.ObjectUnsubscribedError=void 0;var n=r(7029);t.ObjectUnsubscribedError=n.createErrorClass((function(e){return function(){e(this),this.name="ObjectUnsubscribedError",this.message="object unsubscribed"}}))},6156:(e,t,r)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.SequenceError=void 0;var n=r(7029);t.SequenceError=n.createErrorClass((function(e){return function(t){e(this),this.name="SequenceError",this.message=t}}))},4805:(e,t,r)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.UnsubscriptionError=void 0;var n=r(7029);t.UnsubscriptionError=n.createErrorClass((function(e){return function(t){e(this),this.message=t?t.length+" errors occurred during unsubscription:\n"+t.map((function(e,t){return t+1+") "+e.toString()})).join("\n  "):"",this.name="UnsubscriptionError",this.errors=t}}))},2433:(e,t,r)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.popNumber=t.popScheduler=t.popResultSelector=void 0;var n=r(3005),o=r(9016);function i(e){return e[e.length-1]}t.popResultSelector=function(e){return n.isFunction(i(e))?e.pop():void 0},t.popScheduler=function(e){return o.isScheduler(i(e))?e.pop():void 0},t.popNumber=function(e,t){return"number"==typeof i(e)?e.pop():t}},1203:(e,t)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.argsArgArrayOrObject=void 0;var r=Array.isArray,n=Object.getPrototypeOf,o=Object.prototype,i=Object.keys;t.argsArgArrayOrObject=function(e){if(1===e.length){var t=e[0];if(r(t))return{args:t,keys:null};if((a=t)&&"object"==typeof a&&n(a)===o){var u=i(t);return{args:u.map((function(e){return t[e]})),keys:u}}}var a;return{args:e,keys:null}}},5498:(e,t)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.argsOrArgArray=void 0;var r=Array.isArray;t.argsOrArgArray=function(e){return 1===e.length&&r(e[0])?e[0]:e}},6967:(e,t)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.arrRemove=void 0,t.arrRemove=function(e,t){if(e){var r=e.indexOf(t);0<=r&&e.splice(r,1)}}},7029:(e,t)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.createErrorClass=void 0,t.createErrorClass=function(e){var t=e((function(e){Error.call(e),e.stack=(new Error).stack}));return t.prototype=Object.create(Error.prototype),t.prototype.constructor=t,t}},641:(e,t)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.createObject=void 0,t.createObject=function(e,t){return e.reduce((function(e,r,n){return e[r]=t[n],e}),{})}},6110:(e,t,r)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.captureError=t.errorContext=void 0;var n=r(3280),o=null;t.errorContext=function(e){if(n.config.useDeprecatedSynchronousErrorHandling){var t=!o;if(t&&(o={errorThrown:!1,error:null}),e(),t){var r=o,i=r.errorThrown,u=r.error;if(o=null,i)throw u}}else e()},t.captureError=function(e){n.config.useDeprecatedSynchronousErrorHandling&&o&&(o.errorThrown=!0,o.error=e)}},7738:(e,t)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.executeSchedule=void 0,t.executeSchedule=function(e,t,r,n,o){void 0===n&&(n=0),void 0===o&&(o=!1);var i=t.schedule((function(){r(),o?e.add(this.schedule(null,n)):this.unsubscribe()}),n);if(e.add(i),!o)return i}},4781:(e,t)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.identity=void 0,t.identity=function(e){return e}},3909:(e,t)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.isArrayLike=void 0,t.isArrayLike=function(e){return e&&"number"==typeof e.length&&"function"!=typeof e}},9595:(e,t,r)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.isAsyncIterable=void 0;var n=r(3005);t.isAsyncIterable=function(e){return Symbol.asyncIterator&&n.isFunction(null==e?void 0:e[Symbol.asyncIterator])}},1677:(e,t)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.isValidDate=void 0,t.isValidDate=function(e){return e instanceof Date&&!isNaN(e)}},3005:(e,t)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.isFunction=void 0,t.isFunction=function(e){return"function"==typeof e}},9500:(e,t,r)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.isInteropObservable=void 0;var n=r(2801),o=r(3005);t.isInteropObservable=function(e){return o.isFunction(e[n.observable])}},2743:(e,t,r)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.isIterable=void 0;var n=r(3725),o=r(3005);t.isIterable=function(e){return o.isFunction(null==e?void 0:e[n.iterator])}},8386:(e,t,r)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.isObservable=void 0;var n=r(2419),o=r(3005);t.isObservable=function(e){return!!e&&(e instanceof n.Observable||o.isFunction(e.lift)&&o.isFunction(e.subscribe))}},6018:(e,t,r)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.isPromise=void 0;var n=r(3005);t.isPromise=function(e){return n.isFunction(null==e?void 0:e.then)}},7823:function(e,t,r){var n=this&&this.__generator||function(e,t){var r,n,o,i,u={label:0,sent:function(){if(1&o[0])throw o[1];return o[1]},trys:[],ops:[]};return i={next:a(0),throw:a(1),return:a(2)},"function"==typeof Symbol&&(i[Symbol.iterator]=function(){return this}),i;function a(i){return function(a){return function(i){if(r)throw new TypeError("Generator is already executing.");for(;u;)try{if(r=1,n&&(o=2&i[0]?n.return:i[0]?n.throw||((o=n.return)&&o.call(n),0):n.next)&&!(o=o.call(n,i[1])).done)return o;switch(n=0,o&&(i=[2&i[0],o.value]),i[0]){case 0:case 1:o=i;break;case 4:return u.label++,{value:i[1],done:!1};case 5:u.label++,n=i[1],i=[0];continue;case 7:i=u.ops.pop(),u.trys.pop();continue;default:if(!((o=(o=u.trys).length>0&&o[o.length-1])||6!==i[0]&&2!==i[0])){u=0;continue}if(3===i[0]&&(!o||i[1]>o[0]&&i[1]<o[3])){u.label=i[1];break}if(6===i[0]&&u.label<o[1]){u.label=o[1],o=i;break}if(o&&u.label<o[2]){u.label=o[2],u.ops.push(i);break}o[2]&&u.ops.pop(),u.trys.pop();continue}i=t.call(e,u)}catch(e){i=[6,e],n=0}finally{r=o=0}if(5&i[0])throw i[1];return{value:i[0]?i[1]:void 0,done:!0}}([i,a])}}},o=this&&this.__await||function(e){return this instanceof o?(this.v=e,this):new o(e)},i=this&&this.__asyncGenerator||function(e,t,r){if(!Symbol.asyncIterator)throw new TypeError("Symbol.asyncIterator is not defined.");var n,i=r.apply(e,t||[]),u=[];return n={},a("next"),a("throw"),a("return"),n[Symbol.asyncIterator]=function(){return this},n;function a(e){i[e]&&(n[e]=function(t){return new Promise((function(r,n){u.push([e,t,r,n])>1||c(e,t)}))})}function c(e,t){try{(r=i[e](t)).value instanceof o?Promise.resolve(r.value.v).then(s,l):f(u[0][2],r)}catch(e){f(u[0][3],e)}var r}function s(e){c("next",e)}function l(e){c("throw",e)}function f(e,t){e(t),u.shift(),u.length&&c(u[0][0],u[0][1])}};Object.defineProperty(t,"__esModule",{value:!0}),t.isReadableStreamLike=t.readableStreamLikeToAsyncGenerator=void 0;var u=r(3005);t.readableStreamLikeToAsyncGenerator=function(e){return i(this,arguments,(function(){var t,r,i;return n(this,(function(n){switch(n.label){case 0:t=e.getReader(),n.label=1;case 1:n.trys.push([1,,9,10]),n.label=2;case 2:return[4,o(t.read())];case 3:return r=n.sent(),i=r.value,r.done?[4,o(void 0)]:[3,5];case 4:return[2,n.sent()];case 5:return[4,o(i)];case 6:return[4,n.sent()];case 7:return n.sent(),[3,2];case 8:return[3,10];case 9:return t.releaseLock(),[7];case 10:return[2]}}))}))},t.isReadableStreamLike=function(e){return u.isFunction(null==e?void 0:e.getReader)}},9016:(e,t,r)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.isScheduler=void 0;var n=r(3005);t.isScheduler=function(e){return e&&n.isFunction(e.schedule)}},4935:(e,t,r)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.operate=t.hasLift=void 0;var n=r(3005);function o(e){return n.isFunction(null==e?void 0:e.lift)}t.hasLift=o,t.operate=function(e){return function(t){if(o(t))return t.lift((function(t){try{return e(t,this)}catch(e){this.error(e)}}));throw new TypeError("Unable to lift unknown Observable type")}}},1914:function(e,t,r){var n=this&&this.__read||function(e,t){var r="function"==typeof Symbol&&e[Symbol.iterator];if(!r)return e;var n,o,i=r.call(e),u=[];try{for(;(void 0===t||t-- >0)&&!(n=i.next()).done;)u.push(n.value)}catch(e){o={error:e}}finally{try{n&&!n.done&&(r=i.return)&&r.call(i)}finally{if(o)throw o.error}}return u},o=this&&this.__spreadArray||function(e,t){for(var r=0,n=t.length,o=e.length;r<n;r++,o++)e[o]=t[r];return e};Object.defineProperty(t,"__esModule",{value:!0}),t.mapOneOrManyArgs=void 0;var i=r(7291),u=Array.isArray;t.mapOneOrManyArgs=function(e){return i.map((function(t){return function(e,t){return u(t)?e.apply(void 0,o([],n(t))):e(t)}(e,t)}))}},2576:(e,t)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.noop=void 0,t.noop=function(){}},8634:(e,t)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.not=void 0,t.not=function(e,t){return function(r,n){return!e.call(t,r,n)}}},9985:(e,t,r)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.pipeFromArray=t.pipe=void 0;var n=r(4781);function o(e){return 0===e.length?n.identity:1===e.length?e[0]:function(t){return e.reduce((function(e,t){return t(e)}),t)}}t.pipe=function(){for(var e=[],t=0;t<arguments.length;t++)e[t]=arguments[t];return o(e)},t.pipeFromArray=o},7968:(e,t,r)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.reportUnhandledError=void 0;var n=r(3280),o=r(4590);t.reportUnhandledError=function(e){o.timeoutProvider.setTimeout((function(){var t=n.config.onUnhandledError;if(!t)throw e;t(e)}))}},9906:(e,t)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.createInvalidObservableTypeError=void 0,t.createInvalidObservableTypeError=function(e){return new TypeError("You provided "+(null!==e&&"object"==typeof e?"an invalid object":"'"+e+"'")+" where a stream was expected. You can provide an Observable, Promise, ReadableStream, Array, AsyncIterable, or Iterable.")}},1881:(e,t,r)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.TickerReset=void 0;var n=r(2872);t.TickerReset=function(){function e(){}return e.start=function(){e._start.next()},e.stop=function(){e._stop.next()},e._stop=new n.Subject,e._start=new n.Subject,e}()},3445:function(e,t,r){var n,o=this&&this.__extends||(n=function(e,t){return n=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,t){e.__proto__=t}||function(e,t){for(var r in t)Object.prototype.hasOwnProperty.call(t,r)&&(e[r]=t[r])},n(e,t)},function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Class extends value "+String(t)+" is not a constructor or null");function r(){this.constructor=e}n(e,t),e.prototype=null===t?Object.create(t):(r.prototype=t.prototype,new r)});Object.defineProperty(t,"__esModule",{value:!0}),t.Background=void 0;var i=r(8913),u=r(4575),a=function(e){function t(t,r,n){var o=e.call(this,t,r)||this;return o._image=n,o}return o(t,e),t.prototype.onCreate=function(){},t.prototype.onResize=function(e,t){var r=t*i.BACKGROUND_ASPECT_RATIO,n=t;this._rect=[{x:(e-r)/2,y:0,width:r,height:n}]},t.prototype.update=function(e,t){},t.prototype.render=function(){var e=this;this._rect.forEach((function(t){t.x<=e.ctx.canvas.width&&(0,u.drawImage)(e.ctx,e._image,t)}))},t.prototype.getRect=function(){return this._rect},t}(r(9334).Component);t.Background=a},6250:function(e,t,r){var n,o=this&&this.__extends||(n=function(e,t){return n=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,t){e.__proto__=t}||function(e,t){for(var r in t)Object.prototype.hasOwnProperty.call(t,r)&&(e[r]=t[r])},n(e,t)},function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Class extends value "+String(t)+" is not a constructor or null");function r(){this.constructor=e}n(e,t),e.prototype=null===t?Object.create(t):(r.prototype=t.prototype,new r)});Object.defineProperty(t,"__esModule",{value:!0}),t.Board=void 0;var i=r(9334),u=r(2958),a=r(7769),c=r(6618),s=r(6211),l=r(759),f=function(e){function t(t,r,n,o){var i=e.call(this,t,r)||this;i.images=new Map,i._sizeX=n,i._sizeY=o,i._board=new Array(o+1).fill([]).map((function(){return new Array(n).fill(!1)})),i._blocks=new Array(o).fill([]).map((function(){return new Array(n).fill(null)}));for(var u=0;u<i._sizeY;u++)for(var a=0;a<i._sizeX;a++)i._board[u][a]=!1,i._blocks[u][a]=null;for(u=0;u<i._sizeX;u++)i._board[i._sizeY][u]=!0;return i}return o(t,e),t.prototype.onCreate=function(){},t.prototype.onResize=function(e,t){if(void 0!==this._blocks)for(var r=0;r<this._blocks.length;r++)for(var n=0;n<this._blocks[0].length;n++)null!==this._blocks[r][n]&&this._blocks[r][n].onResize(e,t)},t.prototype.update=function(e,t){},t.prototype.render=function(){for(var e=0;e<this._blocks.length;e++)for(var t=0;t<this._blocks[0].length;t++)null!==this._blocks[e][t]&&this._blocks[e][t].render()},t.prototype.tryPosition=function(e,t,r){for(var n=r.length,o=r[0].length,i=!0,u=0;u<n;u++)for(var a=0;a<o;a++){if(1===r[u][a]&&this._board[u+t][a+e])return!1;if(1===r[u][a]&&(u+t>=this._sizeY||a+e>=this._sizeX))return!1;if(1===r[u][a]&&(u+t<0||a+e<0))return!1}return i},t.prototype.canAdd=function(e,t,r){if(!this.tryPosition(e,t,r))return!1;for(var n=r.length,o=r[0].length,i=!1,u=0;u<n;u++)for(var a=0;a<o;a++)if(1===r[u][a]&&this._board[u+t+1][a+e])return!0;return i},t.prototype.tryAdd=function(e,t,r,n){var o=n.length,i=n[0].length;if(this.canAdd){for(var u=0;u<o;u++)for(var a=0;a<i;a++)1===n[u][a]&&(this._board[u+r][a+t]=!0);return this.switchShapeWithBlocks(e),{check:!0,num:this.removeFullRows()}}return{check:!1,num:0}},t.prototype.removeFullRows=function(){for(var e=0,t=0;t<this._sizeY;t++){for(var r=!0,n=0;n<this._sizeX;n++)if(!this._board[t][n]){r=!1;break}if(r){for(e++,n=0;n<this._sizeX;n++)this._board[t][n]=!1,this._blocks[t][n]=null;this.lowerFlyingRows(t)}}return this.gameState.score+=(0,l.scoreFormula)(e),this.gameState.player.score+=(0,l.scoreFormula)(e),a.Game.gameState.player.linesCleared+=e,e},t.prototype.lowerFlyingRows=function(e){for(var t=e;t>0;t--)for(var r=0;r<this._sizeX;r++)this._board[t][r]=this._board[t-1][r],null===this._blocks[t-1][r]?this._blocks[t][r]=null:this._blocks[t][r]=new u.Block(this.ctx,this.gameState,this._blocks[t-1][r].getImage(),this._blocks[t-1][r].getBlock(),0,!1,this,this._blocks[t-1][r].getBgBounds(),this._blocks[t-1][r].posX,this._blocks[t-1][r].posY+1,this._blocks[t-1][r].getType());for(t=0;t<this._sizeX;t++)this._board[0][t]=!1,this._blocks[0][t]=null},t.prototype.getBoard=function(){return this._board},t.prototype.getSizeX=function(){return this._sizeX},t.prototype.getSizeY=function(){return this._sizeY},t.prototype.switchShapeWithBlocks=function(e){for(var t=0;t<e.colisionDetectionMatrix.length;t++)for(var r=0;r<e.colisionDetectionMatrix[0].length;r++)1===e.colisionDetectionMatrix[t][r]&&(this._blocks[t+e.posY][r+e.posX]=new u.Block(this.ctx,this.gameState,c.GlobalImageMap.imageMap.get(s.Shapes[e.block]+"block"),e.block,0,!1,this,e.bgBound,e.posX+r,e.posY+t,e.block.toString()),this._blocks[t+e.posY][r+e.posX].render())},t.prototype.clear=function(){var e=this;this._board=new Array(this._sizeY+1).fill([]).map((function(){return new Array(e._sizeX).fill(!1)})),this._blocks=new Array(this._sizeY).fill([]).map((function(){return new Array(e._sizeX).fill(null)}));for(var t=0;t<this._sizeY;t++)for(var r=0;r<this._sizeX;r++)this._board[t][r]=!1,this._blocks[t][r]=null;for(t=0;t<this._sizeX;t++)this._board[this._sizeY][t]=!0},t}(i.Component);t.Board=f},9334:(e,t)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.Component=void 0;t.Component=function(e,t,r){this.ctx=e,this.gameState=t,this.props=r,this.onCreate(),this.onResize(e.canvas.width,e.canvas.height)}},1490:function(e,t,r){var n,o=this&&this.__extends||(n=function(e,t){return n=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,t){e.__proto__=t}||function(e,t){for(var r in t)Object.prototype.hasOwnProperty.call(t,r)&&(e[r]=t[r])},n(e,t)},function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Class extends value "+String(t)+" is not a constructor or null");function r(){this.constructor=e}n(e,t),e.prototype=null===t?Object.create(t):(r.prototype=t.prototype,new r)}),i=this&&this.__assign||function(){return i=Object.assign||function(e){for(var t,r=1,n=arguments.length;r<n;r++)for(var o in t=arguments[r])Object.prototype.hasOwnProperty.call(t,o)&&(e[o]=t[o]);return e},i.apply(this,arguments)};Object.defineProperty(t,"__esModule",{value:!0}),t.EnterUsername=void 0;var u=r(2872),a=r(1600),c=r(7419),s=r(9334),l=r(4575),f=r(8913),d=function(e){function t(){return null!==e&&e.apply(this,arguments)||this}return o(t,e),t.prototype.onCreate=function(){this._username=""},t.prototype.onResize=function(e,t){},t.prototype.update=function(e,t){var r=this;this.gameState.currentState===a.GamePhase.ENTER_NAME&&t.keys.forEach((function(e){1===e.length?r._username+=e:"Backspace"===e?r.removeLastChar():"Enter"===e&&r.submitUsername()}))},t.prototype.render=function(){this.gameState.currentState===a.GamePhase.ENTER_NAME&&((0,l.drawCenteredText)(this.ctx,"Enter username",f.MEDIUM_TEXT_FONT,this.ctx.canvas.width/2,this.ctx.canvas.height/2-60),(0,l.drawCenteredText)(this.ctx,this._username,f.MEDIUM_TEXT_FONT,this.ctx.canvas.width/2,this.ctx.canvas.height/2))},t.prototype.removeLastChar=function(){this._username.length>0&&(this._username=this._username.substring(0,this._username.length-1))},t.prototype.submitUsername=function(){var e=this;this._username.length>0&&(this.gameState.player.username=this._username,this.gameState.currentState=a.GamePhase.READY,(0,c.fetchPlayerProfile$)(this.gameState.player.username).pipe((0,u.tap)((function(t){0===t.length?e.gameState.player={id:0,score:0,linesCleared:0,elementsDroped:0,timePlaying:0,highscore:0,username:e._username}:e.gameState.player=i(i({},t[0]),{score:0})})),(0,u.catchError)((function(t){return console.error("Profile not found"),e.gameState.player={id:0,score:0,linesCleared:0,elementsDroped:0,timePlaying:0,highscore:0,username:e._username},(0,u.of)(e.gameState.player)}))).subscribe((function(e){console.log(e)})))},t}(s.Component);t.EnterUsername=d},6618:(e,t)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.GlobalImageMap=void 0,t.GlobalImageMap=function(){function e(){}return e.imageMap=new Map,e}()},8860:function(e,t,r){var n,o=this&&this.__extends||(n=function(e,t){return n=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,t){e.__proto__=t}||function(e,t){for(var r in t)Object.prototype.hasOwnProperty.call(t,r)&&(e[r]=t[r])},n(e,t)},function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Class extends value "+String(t)+" is not a constructor or null");function r(){this.constructor=e}n(e,t),e.prototype=null===t?Object.create(t):(r.prototype=t.prototype,new r)});Object.defineProperty(t,"__esModule",{value:!0}),t.Highscores=void 0;var i=r(1600),u=r(7419),a=r(9334),c=r(4575),s=r(8913),l=r(7769),f=function(e){function t(){return null!==e&&e.apply(this,arguments)||this}return o(t,e),t.prototype.onCreate=function(){this._shown=!1},t.prototype.onResize=function(e,t){},t.prototype.update=function(e,t){var r=this;l.Game.gameState.currentState===i.GamePhase.READY||l.Game.gameState.currentState===i.GamePhase.GAME_OVER?t.KeyH&&(this._shown=!this._shown,this._shown&&(0,u.fetchHighScore$)().pipe().subscribe((function(e){r._highscores=e,console.log(e),console.log(r._highscores)}))):this._shown=!1},t.prototype.render=function(){var e=this;this._shown&&this._highscores&&((0,c.drawText)(this.ctx,"Highscores:",s.MEDIUM_TEXT_FONT,.6*this.ctx.canvas.width,100),this._highscores.forEach((function(t,r){(0,c.drawText)(e.ctx,"".concat(r+1,". ").concat(t.username.padEnd(5),"- ").concat(t.highscore.toString().padStart(2)),s.MEDIUM_TEXT_FONT,.6*e.ctx.canvas.width,50*r+150)})))},t}(a.Component);t.Highscores=f},4083:function(e,t,r){var n,o=this&&this.__extends||(n=function(e,t){return n=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,t){e.__proto__=t}||function(e,t){for(var r in t)Object.prototype.hasOwnProperty.call(t,r)&&(e[r]=t[r])},n(e,t)},function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Class extends value "+String(t)+" is not a constructor or null");function r(){this.constructor=e}n(e,t),e.prototype=null===t?Object.create(t):(r.prototype=t.prototype,new r)});Object.defineProperty(t,"__esModule",{value:!0}),t.Overlay=void 0;var i=r(8913),u=r(1600),a=r(7769),c=r(4575),s=function(e){function t(){return null!==e&&e.apply(this,arguments)||this}return o(t,e),t.prototype.onCreate=function(){},t.prototype.onResize=function(e,t){},t.prototype.update=function(e,t){},t.prototype.render=function(){switch(this.gameState.currentState){case u.GamePhase.READY:this.renderDarkenScreen(),this.renderHighscore(),this.renderControls(),this.renderInfo();break;case u.GamePhase.PLAYING:this.renderCurrentScore();break;case u.GamePhase.GAME_OVER:this.renderDarkenScreen(),this.renderGameOver(),this.renderHighscore(),this.renderControls(),this.renderInfo();break;case u.GamePhase.ENTER_NAME:this.renderDarkenScreen()}},t.prototype.renderControls=function(){(0,c.drawText)(this.ctx,"[H]-Highscores",i.SMALL_TEXT_FONT,10,this.ctx.canvas.height-30),(0,c.drawText)(this.ctx,"[Space]-Start",i.SMALL_TEXT_FONT,10,this.ctx.canvas.height-55)},t.prototype.renderCurrentScore=function(){var e=a.Game.gameState.score.toString();(0,c.drawText)(this.ctx,e,i.LARGE_TEXT_FONT,70,70)},t.prototype.renderEnterToStart=function(){(0,c.drawCenteredText)(this.ctx,"Press Enter To Start",i.MEDIUM_TEXT_FONT,this.ctx.canvas.width/2,this.ctx.canvas.height/2)},t.prototype.renderHighscore=function(){var e="Highscore: ".concat(this.gameState.player.highscore);(0,c.drawCenteredText)(this.ctx,this.gameState.player.username,i.MEDIUM_TEXT_FONT,this.ctx.canvas.width/2,this.ctx.canvas.height/2-100),(0,c.drawCenteredText)(this.ctx,e,i.MEDIUM_TEXT_FONT,this.ctx.canvas.width/2,this.ctx.canvas.height/2-50)},t.prototype.renderInfo=function(){var e="Lines cleared: ".concat(this.gameState.player.linesCleared);(0,c.drawCenteredText)(this.ctx,e,i.SMALL_TEXT_FONT,this.ctx.canvas.width/2,this.ctx.canvas.height-10)},t.prototype.renderGameOver=function(){var e="Score: ".concat(this.gameState.score);(0,c.drawCenteredText)(this.ctx,"GAME OVER",i.LARGE_TEXT_FONT,this.ctx.canvas.width/2,100),(0,c.drawCenteredText)(this.ctx,e,i.MEDIUM_TEXT_FONT,this.ctx.canvas.width/2,150)},t.prototype.renderDarkenScreen=function(){this.ctx.globalAlpha=.3,this.ctx.fillStyle="black",this.ctx.fillRect(0,0,this.ctx.canvas.width,this.ctx.canvas.height),this.ctx.globalAlpha=1},t}(r(9334).Component);t.Overlay=s},2958:function(e,t,r){var n,o=this&&this.__extends||(n=function(e,t){return n=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,t){e.__proto__=t}||function(e,t){for(var r in t)Object.prototype.hasOwnProperty.call(t,r)&&(e[r]=t[r])},n(e,t)},function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Class extends value "+String(t)+" is not a constructor or null");function r(){this.constructor=e}n(e,t),e.prototype=null===t?Object.create(t):(r.prototype=t.prototype,new r)});Object.defineProperty(t,"__esModule",{value:!0}),t.Block=t.Shape=void 0;var i=r(9334),u=r(8913),a=r(4575),c=r(1600),s=r(7769),l=function(e){function t(t,r,n,o,i,a,c,l,f,d,p){var h=e.call(this,t,r)||this;return h.image=n,h.posX=d,h.posY=p,h.rotation=0,h.block=o,h.tickTime=i,h.colisionDetectionMatrix=a,h.moving=c,s.Game.canSpawn.val=!c,h.board=l,h.bgBound=f,h.shapeBound={x:f.width*u.BOARD_BLOCK_SHIFT_X+h.posX*u.BOARD_BLOCK_SHIFT_X*h.bgBound.width,y:f.height*u.BOARD_BLOCK_SHIFT_Y+h.posY*u.BOARD_BLOCK_SHIFT_Y*h.bgBound.height,width:h.colisionDetectionMatrix.length*f.width/u.BOARD_BLOCKS_WIDTH,height:h.colisionDetectionMatrix[0].length*f.height/u.BOARD_BLOCKS_HEIGHt},h.onCreate(),h}return o(t,e),t.prototype.onCreate=function(){if(this.board)return this.board.tryPosition(this.posX,this.posY,this.colisionDetectionMatrix)},t.prototype.onResize=function(e,t){var r=t*u.BACKGROUND_ASPECT_RATIO,n=t;this.bgBound={x:(e-r)/2,y:0,width:r,height:n},this.shapeBound&&(this.shapeBound.x=this.bgBound.x+this.bgBound.width*u.BOARD_BLOCK_SHIFT_X+this.posX*u.BOARD_BLOCK_SHIFT_X*this.bgBound.width,this.shapeBound.y=this.posY*u.BOARD_BLOCK_SHIFT_Y*this.bgBound.height,this.shapeBound.width=this.colisionDetectionMatrix.length*this.bgBound.width/u.BACKGROUND_BLOCKS_WIDTH,this.shapeBound.height=this.colisionDetectionMatrix[0].length*this.bgBound.height/u.BACKGROUND_BLOCKS_HEIGHT)},t.prototype.update=function(e,t){var r;if(this.gameState.currentState===c.GamePhase.PLAYING&&this.moving){if(t.ArrowUp)return this.rotate(),-1;if(t.ArrowDown){if(this.board.tryPosition(this.posX,this.posY+1,this.colisionDetectionMatrix))return this.posY++,this.onResize(this.ctx.canvas.width,this.ctx.canvas.height),this.render(),-1;var n=this.board.tryAdd(this,this.posX,this.posY,this.colisionDetectionMatrix),o=n.check,i=n.num;if(!o)throw new Error("Impossible position");return this.moving=!1,this.tickTime=1/0,s.Game.canSpawn.val=!0,i}if(t.ArrowLeft)this.board.tryPosition(this.posX-1,this.posY,this.colisionDetectionMatrix)&&(this.posX--,this.onResize(this.ctx.canvas.width,this.ctx.canvas.height),this.render());else if(t.ArrowRight)this.board.tryPosition(this.posX+1,this.posY,this.colisionDetectionMatrix)&&(this.posX++,this.onResize(this.ctx.canvas.width,this.ctx.canvas.height),this.render());else if(t.Space){i=0;do{i=this.update(0,((r={keys:["ArrowDown"]}).ArrowDown=!0,r))}while(-1===i);return this.moving=!1,this.tickTime=1/0,s.Game.canSpawn.val=!0,i}return-1}},t.prototype.calculateWidthCoef=function(){for(var e=this.colisionDetectionMatrix[0].length,t=-1,r=0;r<this.colisionDetectionMatrix[0].length;r++){for(var n=!1,o=0;o<this.colisionDetectionMatrix.length;o++)if(1===this.colisionDetectionMatrix[o][r]){n=!0;break}n&&(r<e&&(e=r),r>t&&(t=r))}if(e>t)throw new Error("Impossbiel shape");return(t-e+1)/this.colisionDetectionMatrix[0].length},t.prototype.calculateHeightCoef=function(){for(var e=this.colisionDetectionMatrix.length+1,t=-1,r=0;r<this.colisionDetectionMatrix.length;r++){for(var n=!1,o=0;o<this.colisionDetectionMatrix[r].length;o++)if(1===this.colisionDetectionMatrix[r][o]){n=!0;break}n&&(r<e&&(e=r),r>t&&(t=r))}if(e>t)throw new Error("Impossible shape");return(t-e+1)/this.colisionDetectionMatrix.length},t.prototype.render=function(){var e=this;if(this.bgBound.x<=this.ctx.canvas.width&&this.moving){this.shapeBound&&(this.shapeBound.x=this.bgBound.x+this.bgBound.width*u.BOARD_BLOCK_SHIFT_X+this.posX*u.BOARD_BLOCK_SHIFT_X*this.bgBound.width,this.shapeBound.y=this.posY*u.BOARD_BLOCK_SHIFT_Y*this.bgBound.height,this.shapeBound.width=this.colisionDetectionMatrix.length*this.bgBound.width/u.BACKGROUND_BLOCKS_WIDTH,this.shapeBound.height=this.colisionDetectionMatrix[0].length*this.bgBound.height/u.BACKGROUND_BLOCKS_HEIGHT);var t=null;this.calculateHeightCoef(),this.calculateWidthCoef(),this.colisionDetectionMatrix.forEach((function(r,n){r.forEach((function(r,o){1===r&&(t={x:e.shapeBound.x+o*e.shapeBound.width/e.colisionDetectionMatrix.length,y:e.shapeBound.y+n*e.shapeBound.height/e.colisionDetectionMatrix[n].length,height:e.bgBound.height/u.BACKGROUND_BLOCKS_HEIGHT,width:e.bgBound.width/u.BACKGROUND_BLOCKS_WIDTH},(0,a.drawImage)(e.ctx,e.image,t))}))}))}},t.prototype.rotateMatrixCounterClockwise=function(e){for(var t=e.length,r=e[0].length,n=new Array(r).fill(null).map((function(){return[]})),o=0;o<t;o++)for(var i=0;i<r;i++)n[r-i-1].push(e[o][i]);return n},t.prototype.shiftColMatrixUp=function(e){var t=e.length,r=e[0].length,n=new Array(t).fill(0).map((function(){return new Array(r).fill(0)}));e.forEach((function(e,t){return e.forEach((function(e,r){return n[t][r]=e}))}));var o=!1;do{for(var i=0;i<n[0].length;i++)if(1===n[0][i]){o=!0;break}if(!o){for(i=0;i<n.length-1;i++)for(var u=0;u<n[i].length;u++)n[i][u]=n[i+1][u];for(u=0;u<n[0].length;u++)n[n.length-1][u]=0}}while(!o);return n},t.prototype.shiftColMatLeft=function(e){var t=e.length,r=e[0].length,n=new Array(t).fill(0).map((function(){return new Array(r).fill(0)}));e.forEach((function(e,t){return e.forEach((function(e,r){return n[t][r]=e}))}));var o=!1;do{for(var i=0;i<n.length;i++)if(1===n[i][0]){o=!0;break}if(!o){for(i=0;i<n[0].length-1;i++)for(var u=0;u<n.length;u++)n[u][i]=n[u][i+1];for(u=0;u<n.length;u++)n[u][n[0].length-1]=0}}while(!o);return n},t.prototype.rightestMatrixPoint=function(e){var t=0;return e.forEach((function(e){e.forEach((function(e,r){1===e&&r>t&&(t=r)}))})),t},t.prototype.lowestMatrixPoint=function(e){var t=0;return e.forEach((function(e,r){e.forEach((function(e){console.log(e),1===e&&r>t&&(t=r)}))})),t},t.prototype.rotate=function(){var e=(this.rotation+1)%4,t=this.rotateMatrixCounterClockwise(this.colisionDetectionMatrix);t=this.shiftColMatLeft(t),t=this.shiftColMatrixUp(t);var r=this.posX+this.rightestMatrixPoint(t)+1-this.board.getSizeX();r=Math.max(0,r),this.board.tryPosition(this.posX-r,this.posY,t)&&(this.rotation=e,this.colisionDetectionMatrix=t,this.posX-=r),this.render()},t.prototype.hasColided=function(){return this.moving},t}(i.Component);t.Shape=l;var f=function(e){function t(t,r,n,o,i,u,a,c,s,l,f){var d=e.call(this,t,r,n,o,i,[[1]],u,a,c,s,l)||this;return d.type=f,d}return o(t,e),t.prototype.getImage=function(){return this.image},t.prototype.getBlock=function(){return this.block},t.prototype.getBgBounds=function(){return this.bgBound},t.prototype.getType=function(){return this.type},t.prototype.onCreate=function(){if(this.board)return this.board.tryPosition(this.posX,this.posY,this.colisionDetectionMatrix)},t.prototype.onResize=function(e,t){var r=t*u.BACKGROUND_ASPECT_RATIO,n=t;this.bgBound={x:(e-r)/2,y:0,width:r,height:n},this.shapeBound&&(this.shapeBound.x=this.bgBound.x+this.bgBound.width*u.BOARD_BLOCK_SHIFT_X+this.posX*u.BOARD_BLOCK_SHIFT_X*this.bgBound.width,this.shapeBound.y=this.posY*u.BOARD_BLOCK_SHIFT_Y*this.bgBound.height,this.shapeBound.width=this.colisionDetectionMatrix.length*this.bgBound.width/u.BACKGROUND_BLOCKS_WIDTH,this.shapeBound.height=this.colisionDetectionMatrix[0].length*this.bgBound.height/u.BACKGROUND_BLOCKS_HEIGHT)},t.prototype.render=function(){this.bgBound.x<=this.ctx.canvas.width&&this.shapeBound&&(this.shapeBound.x=this.bgBound.x+this.bgBound.width*u.BOARD_BLOCK_SHIFT_X+this.posX*u.BOARD_BLOCK_SHIFT_X*this.bgBound.width,this.shapeBound.y=this.posY*u.BOARD_BLOCK_SHIFT_Y*this.bgBound.height,this.shapeBound.width=this.colisionDetectionMatrix.length*this.bgBound.width/u.BACKGROUND_BLOCKS_WIDTH,this.shapeBound.height=this.colisionDetectionMatrix[0].length*this.bgBound.height/u.BACKGROUND_BLOCKS_HEIGHT,(0,a.drawImage)(this.ctx,this.image,this.shapeBound))},t.prototype.update=function(e,t){return 1},t.prototype.rotate=function(){},t.prototype.hasColided=function(){return!0},t}(l);t.Block=f},8913:(e,t,r)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.LINE_CLEAR_OFFSET=t.LINE_CLEAR_COEF=t.SHAPE_DROP_SCORE=t.GAME_SPEED=t.MAXIMUM_DELTA_TIME=t.INITIAL_GAME_STATE=t.INITAIAL_SHAPES=t.NUM_SHAPES=t.INITIAL_TIME_MS=t.MIN_INTERVAL_MS=t.STARTING_DELTA_TIME=t.FONT_SHADOW_SIZE=t.FONT_SHADOW_COLOR=t.FONT_COLOR=t.LARGE_TEXT_FONT=t.MEDIUM_TEXT_FONT=t.SMALL_TEXT_FONT=t.BOARD_BLOCK_SHIFT_Y=t.BOARD_BLOCK_SHIFT_X=t.BOARD_BORDER_SHIFT_Y=t.BOARD_BORDER_SHIFT_Y_ALT=t.BOARD_BORDER_SHIFT_X=t.BACKGROUND_BLOCKS_WIDTH=t.BACKGROUND_BLOCKS_HEIGHT=t.BOARD_BLOCKS_HEIGHt=t.BOARD_BLOCKS_HEIGHt_ALT=t.BOARD_BLOCKS_WIDTH=t.BACKGROUND_ASPECT_RATIO=t.BACKGROUND_ASPECT_RATIO_ALT=t.API_URL=void 0;var n=r(1600);t.API_URL="http://localhost:3000",t.BACKGROUND_ASPECT_RATIO_ALT=6/11,t.BACKGROUND_ASPECT_RATIO=12/19,t.BOARD_BLOCKS_WIDTH=10,t.BOARD_BLOCKS_HEIGHt_ALT=20,t.BOARD_BLOCKS_HEIGHt=18,t.BACKGROUND_BLOCKS_HEIGHT=19,t.BACKGROUND_BLOCKS_WIDTH=12,t.BOARD_BORDER_SHIFT_X=1/12,t.BOARD_BORDER_SHIFT_Y_ALT=1/22,t.BOARD_BORDER_SHIFT_Y=0,t.BOARD_BLOCK_SHIFT_X=1/12,t.BOARD_BLOCK_SHIFT_Y=1/19,t.SMALL_TEXT_FONT='1rem "Press Start 2P"',t.MEDIUM_TEXT_FONT='2rem "Press Start 2P"',t.LARGE_TEXT_FONT='3rem "Press Start 2P"',t.FONT_COLOR="white",t.FONT_SHADOW_COLOR="gray",t.FONT_SHADOW_SIZE=3,t.STARTING_DELTA_TIME=.8,t.MIN_INTERVAL_MS=50,t.INITIAL_TIME_MS=5e3,t.NUM_SHAPES=7,t.INITAIAL_SHAPES=new Map([["I",[[1,1,1,1],[0,0,0,0],[0,0,0,0],[0,0,0,0]]],["T",[[0,1,0],[1,1,1],[0,0,0]]],["O",[[1,1],[1,1]]],["S",[[0,1,1],[1,1,0],[0,0,0]]],["Z",[[1,1,0],[0,1,1],[0,0,0]]],["L",[[0,0,1],[1,1,1],[0,0,0]]],["J",[[1,0,0],[1,1,1],[0,0,0]]]]),t.INITIAL_GAME_STATE={currentState:n.GamePhase.ENTER_NAME,score:0,player:{id:0,username:"",score:0,linesCleared:0,elementsDroped:0,timePlaying:0,highscore:0}},t.MAXIMUM_DELTA_TIME=1/30,t.GAME_SPEED=1,t.SHAPE_DROP_SCORE=40,t.LINE_CLEAR_COEF=100,t.LINE_CLEAR_OFFSET=50},1600:(e,t)=>{var r;Object.defineProperty(t,"__esModule",{value:!0}),t.GamePhase=void 0,function(e){e[e.ENTER_NAME=0]="ENTER_NAME",e[e.READY=1]="READY",e[e.PLAYING=2]="PLAYING",e[e.GAME_OVER=3]="GAME_OVER"}(r||(t.GamePhase=r={}))},6211:(e,t)=>{var r;Object.defineProperty(t,"__esModule",{value:!0}),t.Shapes=void 0,function(e){e[e.I=0]="I",e[e.T=1]="T",e[e.O=2]="O",e[e.S=3]="S",e[e.Z=4]="Z",e[e.L=5]="L",e[e.J=6]="J"}(r||(t.Shapes=r={}))},7769:function(e,t,r){var n=this&&this.__assign||function(){return n=Object.assign||function(e){for(var t,r=1,n=arguments.length;r<n;r++)for(var o in t=arguments[r])Object.prototype.hasOwnProperty.call(t,o)&&(e[o]=t[o]);return e},n.apply(this,arguments)};Object.defineProperty(t,"__esModule",{value:!0}),t.Game=void 0;var o=r(2872),i=r(1600),u=r(4555),a=r(1490),c=r(8860),s=r(4083),l=r(3445),f=r(8913),d=r(6338),p=r(7419),h=r(6250),v=r(166),b=r(1881);t.Game=function(){function e(t){if(!t.getContext)throw new Error("Canvas is not supported in this browser");this.canvas=t,this.ctx=t.getContext("2d"),this.ctx.imageSmoothingEnabled=!1,e.gameState=f.INITIAL_GAME_STATE,this.background=null,this.shapes=[],this.enterUsername=new a.EnterUsername(this.ctx,e.gameState),this.highscores=new c.Highscores(this.ctx,e.gameState),this.overlay=new s.Overlay(this.ctx,e.gameState),this.board=new h.Board(this.ctx,e.gameState,f.BOARD_BLOCKS_WIDTH,f.BOARD_BLOCKS_HEIGHt),e.canSpawn.val=!0,this.mainLoop$=(0,d.initializeMainLoop)(),b.TickerReset.stop()}return e.prototype.init=function(){var t=this;(0,o.fromEvent)(window,"resize").pipe((0,o.debounceTime)(100)).subscribe((function(){t.resize(window.innerWidth,window.innerHeight)})),this.mainLoop$.subscribe((function(e){var r=e[0],n=e[1],o=r*f.GAME_SPEED;t.update(o,n),t.render()})),(0,u.loadBackgroundImage$)().subscribe((function(r){t.background=new l.Background(t.ctx,e.gameState,r),t.shapeSpawner$=(0,v.startSpawningShapes)(t.ctx,e.gameState,t.board,t.background.getRect()[0])}))},e.prototype.startRound=function(){var t=this;this.shapeSpawner$?(e.canSpawn.val=!0,e.gameState.currentState=i.GamePhase.PLAYING,b.TickerReset.stop(),b.TickerReset.start(),this.shapeSubscription=this.shapeSpawner$.subscribe((function(r){r&&(!1===r.onCreate()&&t.die(),t.shapes.push(r),e.gameState.player.score+=f.SHAPE_DROP_SCORE,e.gameState.score+=f.SHAPE_DROP_SCORE,e.gameState.player.elementsDroped+=1,console.log("SHAPE LENGth",t.shapes.length))})),e.gameState.score=0,e.gameState.player.score=0):console.log(":(")},e.prototype.updateLogic=function(t,r){switch(e.gameState.currentState){case i.GamePhase.PLAYING:break;case i.GamePhase.READY:case i.GamePhase.GAME_OVER:e.canSpawn.val=!1,r.Space&&(this.cleanShapesAndBoard(),this.startRound());break;case i.GamePhase.ENTER_NAME:e.canSpawn.val=!1}},e.prototype.resize=function(e,t){this.canvas.width=e,this.canvas.height=t,this.ctx.imageSmoothingEnabled=!1,this.background.onResize(e,t),this.shapes.forEach((function(r){return r.onResize(e,t)})),this.enterUsername.onResize(e,t),this.highscores.onResize(e,t),this.overlay.onResize(e,t),this.board.onResize(e,t)},e.prototype.render=function(){var e=this.ctx.canvas.width,t=this.ctx.canvas.height;this.ctx.clearRect(0,0,e,t),this.background&&this.background.render(),this.shapes.forEach((function(e){return e.render()})),this.overlay.render(),this.highscores.render(),this.enterUsername.render(),this.board.render()},e.prototype.update=function(e,t){this.background&&this.background.update(e,t),this.shapes.forEach((function(r){return r.update(e,t)})),this.overlay.update(e,t),this.enterUsername.update(e,t),this.highscores.update(e,t),this.board.update(e,t),this.updateLogic(e,t)},e.prototype.die=function(){if(b.TickerReset.stop(),this.shapes=[],this.shapeSubscription.unsubscribe(),e.gameState.currentState=i.GamePhase.GAME_OVER,e.gameState.score>e.gameState.player.highscore){e.gameState.player.highscore=e.gameState.score;var t={id:e.gameState.player.id,username:e.gameState.player.username,highscore:e.gameState.player.highscore,linesCleared:e.gameState.player.linesCleared,elementsDroped:e.gameState.player.elementsDroped,timePlaying:e.gameState.player.timePlaying};(0,p.putPlayerProfile)(t).then((function(t){e.gameState.player=n(n({},t),{score:e.gameState.score})}))}this.cleanShapesAndBoard()},e.prototype.cleanShapesAndBoard=function(){this.shapes=[],this.board.clear()},e.gameState=f.INITIAL_GAME_STATE,e.canSpawn={val:!0},e}()},7419:function(e,t,r){var n=this&&this.__awaiter||function(e,t,r,n){return new(r||(r=Promise))((function(o,i){function u(e){try{c(n.next(e))}catch(e){i(e)}}function a(e){try{c(n.throw(e))}catch(e){i(e)}}function c(e){var t;e.done?o(e.value):(t=e.value,t instanceof r?t:new r((function(e){e(t)}))).then(u,a)}c((n=n.apply(e,t||[])).next())}))},o=this&&this.__generator||function(e,t){var r,n,o,i,u={label:0,sent:function(){if(1&o[0])throw o[1];return o[1]},trys:[],ops:[]};return i={next:a(0),throw:a(1),return:a(2)},"function"==typeof Symbol&&(i[Symbol.iterator]=function(){return this}),i;function a(a){return function(c){return function(a){if(r)throw new TypeError("Generator is already executing.");for(;i&&(i=0,a[0]&&(u=0)),u;)try{if(r=1,n&&(o=2&a[0]?n.return:a[0]?n.throw||((o=n.return)&&o.call(n),0):n.next)&&!(o=o.call(n,a[1])).done)return o;switch(n=0,o&&(a=[2&a[0],o.value]),a[0]){case 0:case 1:o=a;break;case 4:return u.label++,{value:a[1],done:!1};case 5:u.label++,n=a[1],a=[0];continue;case 7:a=u.ops.pop(),u.trys.pop();continue;default:if(!((o=(o=u.trys).length>0&&o[o.length-1])||6!==a[0]&&2!==a[0])){u=0;continue}if(3===a[0]&&(!o||a[1]>o[0]&&a[1]<o[3])){u.label=a[1];break}if(6===a[0]&&u.label<o[1]){u.label=o[1],o=a;break}if(o&&u.label<o[2]){u.label=o[2],u.ops.push(a);break}o[2]&&u.ops.pop(),u.trys.pop();continue}a=t.call(e,u)}catch(e){a=[6,e],n=0}finally{r=o=0}if(5&a[0])throw a[1];return{value:a[0]?a[1]:void 0,done:!0}}([a,c])}}};Object.defineProperty(t,"__esModule",{value:!0}),t.putPlayerProfile=t.fetchSprite$=t.fetchHighScore$=t.fetchPlayerProfile$=t.fetchFromApi$=void 0;var i=r(2872),u=r(8913),a=function(e,t){return(0,i.from)(fetch("".concat(u.API_URL,"/").concat(e)).then((function(e){if(e.ok)return e.json();throw new Error("Failed to fetch")})).catch((function(e){return console.error(e)})))};t.fetchFromApi$=a,t.fetchPlayerProfile$=function(e){return a("users?username=".concat(e))},t.fetchHighScore$=function(){return a("users?_sort=highscore&_order=desc&_limit=5")},t.fetchSprite$=function(){return a("sprites")},t.putPlayerProfile=function(e){var t,r,i,a;return 0!==e.id?(t="PUT",r="/users/".concat(e.id)):(t="POST",r="/users"),i=r,a={method:t,body:JSON.stringify(e),headers:{"Content-Type":"application/json"}},n(void 0,void 0,void 0,(function(){var e;return o(this,(function(t){switch(t.label){case 0:return[4,fetch(u.API_URL+i,a)];case 1:if(!(e=t.sent()).ok)throw new Error("An error occured while fetching: "+e.status);return[2,e.json()]}}))}))}},5939:(e,t,r)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.formula=t.decreasingIntervalObservable=void 0;var n=r(2872),o=r(8913),i=r(1600),u=r(7769),a=r(1881);t.decreasingIntervalObservable=function(e,t){return(0,n.interval)(e).pipe((0,n.skipWhile)((function(){return u.Game.gameState.currentState!==i.GamePhase.PLAYING})),(0,n.repeat)({delay:function(){return(0,n.of)(u.Game.gameState.currentState===i.GamePhase.PLAYING)}}),(0,n.map)((function(e){return t(o.INITIAL_TIME_MS,e)})),(0,n.concatMap)((function(e){return(0,n.timer)(e)})),(0,n.takeUntil)(a.TickerReset._stop),(0,n.repeat)({delay:function(){return a.TickerReset._start}}))},t.formula=function(e,t){return e/(1+(t-t%5)/5)}},4555:(e,t,r)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.loadShapeSprites$=t.loadBackgroundImage$=void 0;var n=r(2872),o=r(7419);t.loadBackgroundImage$=function(){return(0,n.from)((0,o.fetchSprite$)()).pipe((0,n.mergeMap)((function(e){var t=e.path+e.board,r=new Image;return r.src=t,(0,n.fromEvent)(r,"load").pipe((0,n.map)((function(e){return e.target})))})))},t.loadShapeSprites$=function(){return(0,n.from)((0,o.fetchSprite$)()).pipe((0,n.mergeMap)((function(e){var t=e.shapes.map((function(t){return{type:t.type,image:e.path+t.image}})),r=[];return t.forEach((function(e,t){var n=new Image;n.src=e.image,r.push(n)})),(0,n.fromEvent)(r,"load").pipe((0,n.map)((function(t,r){return{type:e.shapes[r].type.toString(),img:t.target}})))})))}},6338:(e,t,r)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.initializeMainLoop=void 0;var n=r(2872),o=r(8913),i=r(5939);t.initializeMainLoop=function(){var e=u(),t=(0,i.decreasingIntervalObservable)(o.MIN_INTERVAL_MS,i.formula).pipe((0,n.map)((function(e){var t;return[0,(t={keys:["ArrowDown"]},t.ArrowDown=!0,t)]}))),r=a(e);return(0,n.merge)(t,e.pipe((0,n.withLatestFrom)(r)))};var u=function(){return(0,n.of)(void 0).pipe((0,n.expand)((function(e){return t=e,new n.Observable((function(e){window.requestAnimationFrame((function(r){var n=(t?r-t.timeStamp:0)/1e3;e.next({timeStamp:r,deltaTime:n})}))}));var t})),(0,n.filter)((function(e){return void 0!==e})),(0,n.map)((function(e){return Math.min(e.deltaTime,o.MAXIMUM_DELTA_TIME)})))},a=function(e){return(0,n.fromEvent)(document,"keydown").pipe((0,n.map)((function(e){return{code:e.code,key:e.key}}))).pipe((0,n.buffer)(e),(0,n.map)((function(e){return e.reduce((function(e,t){return e.keys.push(t.key),e[t.code]=!0,e}),{keys:[]})})))}},4575:(e,t,r)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.drawCenteredText=t.drawText=t.drawImageRegion=t.drawImage=t.fillRect=void 0;var n=r(8913);t.fillRect=function(e,t){e.fillRect(t.x,t.y,t.width,t.height)},t.drawImage=function(e,t,r){e.drawImage(t,r.x,r.y,r.width,r.height)},t.drawImageRegion=function(e,t,r,n){e.drawImage(t,n.x,n.y,n.width,n.height,r.x,r.y,r.width,r.height)};var o=function(e,t){e.font=t,e.fillStyle=n.FONT_COLOR,e.shadowColor=n.FONT_SHADOW_COLOR,e.shadowOffsetX=n.FONT_SHADOW_SIZE,e.shadowOffsetY=n.FONT_SHADOW_SIZE},i=function(e){e.shadowColor=void 0,e.shadowOffsetX=0,e.shadowOffsetY=0};t.drawText=function(e,t,r,n,u){o(e,r),e.fillText(t,n,u),i(e)},t.drawCenteredText=function(e,t,r,n,u){o(e,r),e.fillText(t,n-e.measureText(t).width/2,u),i(e)}},759:(e,t,r)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.scoreFormula=void 0;var n=r(8913);t.scoreFormula=function(e){return n.LINE_CLEAR_COEF*e*e/2+e*n.LINE_CLEAR_OFFSET}},166:(e,t,r)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.startSpawningShapes=void 0;var n=r(2872),o=r(2958),i=r(4555),u=r(6211),a=r(8913),c=r(7769),s=r(6618);t.startSpawningShapes=function(e,t,r,l){return(0,n.interval)(a.MIN_INTERVAL_MS).pipe((0,n.filter)((function(){return c.Game.canSpawn.val})),(0,n.tap)((function(){return c.Game.canSpawn.val=!1})),(0,n.switchMap)((function(){return function(e,t,r,c,l){return(0,i.loadShapeSprites$)().pipe((0,n.switchMap)((function(i){console.log(i,"AAAAAAAAAAAAAA");var f,d=new Map;d.set(i.type,i.img),s.GlobalImageMap.imageMap.set(i.type,i.img);var p=u.Shapes[e];return i.type===p.toString()+"block"&&(f=new o.Shape(t,r,d.get(p.toString()+"block"),u.Shapes[p],0,a.INITAIAL_SHAPES.get(p),!0,c,l,3,0)),(0,n.of)(f)})))}(Math.floor(Math.random()*a.NUM_SHAPES),e,t,r,l)})))}}},n={};function o(e){var t=n[e];if(void 0!==t)return t.exports;var i=n[e]={exports:{}};return r[e].call(i.exports,i,i.exports,o),i.exports}e=o(2872),t=o(7769),(0,e.fromEvent)(window,"load").subscribe((function(){var e=document.createElement("canvas");e.id="game-container",e.width=window.innerWidth,e.height=window.innerHeight,document.body.appendChild(e),new t.Game(e).init()}))})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,