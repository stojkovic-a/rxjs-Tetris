(()=>{"use strict";var e,t,r={2872:function(e,t,r){var n=this&&this.__createBinding||(Object.create?function(e,t,r,n){void 0===n&&(n=r),Object.defineProperty(e,n,{enumerable:!0,get:function(){return t[r]}})}:function(e,t,r,n){void 0===n&&(n=r),e[n]=t[r]}),i=this&&this.__exportStar||function(e,t){for(var r in e)"default"===r||Object.prototype.hasOwnProperty.call(t,r)||n(t,e,r)};Object.defineProperty(t,"__esModule",{value:!0}),t.interval=t.iif=t.generate=t.fromEventPattern=t.fromEvent=t.from=t.forkJoin=t.empty=t.defer=t.connectable=t.concat=t.combineLatest=t.bindNodeCallback=t.bindCallback=t.UnsubscriptionError=t.TimeoutError=t.SequenceError=t.ObjectUnsubscribedError=t.NotFoundError=t.EmptyError=t.ArgumentOutOfRangeError=t.firstValueFrom=t.lastValueFrom=t.isObservable=t.identity=t.noop=t.pipe=t.NotificationKind=t.Notification=t.Subscriber=t.Subscription=t.Scheduler=t.VirtualAction=t.VirtualTimeScheduler=t.animationFrameScheduler=t.animationFrame=t.queueScheduler=t.queue=t.asyncScheduler=t.async=t.asapScheduler=t.asap=t.AsyncSubject=t.ReplaySubject=t.BehaviorSubject=t.Subject=t.animationFrames=t.observable=t.ConnectableObservable=t.Observable=void 0,t.filter=t.expand=t.exhaustMap=t.exhaustAll=t.exhaust=t.every=t.endWith=t.elementAt=t.distinctUntilKeyChanged=t.distinctUntilChanged=t.distinct=t.dematerialize=t.delayWhen=t.delay=t.defaultIfEmpty=t.debounceTime=t.debounce=t.count=t.connect=t.concatWith=t.concatMapTo=t.concatMap=t.concatAll=t.combineLatestWith=t.combineLatestAll=t.combineAll=t.catchError=t.bufferWhen=t.bufferToggle=t.bufferTime=t.bufferCount=t.buffer=t.auditTime=t.audit=t.config=t.NEVER=t.EMPTY=t.scheduled=t.zip=t.using=t.timer=t.throwError=t.range=t.race=t.partition=t.pairs=t.onErrorResumeNext=t.of=t.never=t.merge=void 0,t.switchMap=t.switchAll=t.subscribeOn=t.startWith=t.skipWhile=t.skipUntil=t.skipLast=t.skip=t.single=t.shareReplay=t.share=t.sequenceEqual=t.scan=t.sampleTime=t.sample=t.refCount=t.retryWhen=t.retry=t.repeatWhen=t.repeat=t.reduce=t.raceWith=t.publishReplay=t.publishLast=t.publishBehavior=t.publish=t.pluck=t.pairwise=t.onErrorResumeNextWith=t.observeOn=t.multicast=t.min=t.mergeWith=t.mergeScan=t.mergeMapTo=t.mergeMap=t.flatMap=t.mergeAll=t.max=t.materialize=t.mapTo=t.map=t.last=t.isEmpty=t.ignoreElements=t.groupBy=t.first=t.findIndex=t.find=t.finalize=void 0,t.zipWith=t.zipAll=t.withLatestFrom=t.windowWhen=t.windowToggle=t.windowTime=t.windowCount=t.window=t.toArray=t.timestamp=t.timeoutWith=t.timeout=t.timeInterval=t.throwIfEmpty=t.throttleTime=t.throttle=t.tap=t.takeWhile=t.takeUntil=t.takeLast=t.take=t.switchScan=t.switchMapTo=void 0;var o=r(2419);Object.defineProperty(t,"Observable",{enumerable:!0,get:function(){return o.Observable}});var a=r(9518);Object.defineProperty(t,"ConnectableObservable",{enumerable:!0,get:function(){return a.ConnectableObservable}});var u=r(2801);Object.defineProperty(t,"observable",{enumerable:!0,get:function(){return u.observable}});var s=r(9106);Object.defineProperty(t,"animationFrames",{enumerable:!0,get:function(){return s.animationFrames}});var c=r(3032);Object.defineProperty(t,"Subject",{enumerable:!0,get:function(){return c.Subject}});var l=r(5240);Object.defineProperty(t,"BehaviorSubject",{enumerable:!0,get:function(){return l.BehaviorSubject}});var h=r(3274);Object.defineProperty(t,"ReplaySubject",{enumerable:!0,get:function(){return h.ReplaySubject}});var f=r(280);Object.defineProperty(t,"AsyncSubject",{enumerable:!0,get:function(){return f.AsyncSubject}});var p=r(580);Object.defineProperty(t,"asap",{enumerable:!0,get:function(){return p.asap}}),Object.defineProperty(t,"asapScheduler",{enumerable:!0,get:function(){return p.asapScheduler}});var d=r(2445);Object.defineProperty(t,"async",{enumerable:!0,get:function(){return d.async}}),Object.defineProperty(t,"asyncScheduler",{enumerable:!0,get:function(){return d.asyncScheduler}});var b=r(8615);Object.defineProperty(t,"queue",{enumerable:!0,get:function(){return b.queue}}),Object.defineProperty(t,"queueScheduler",{enumerable:!0,get:function(){return b.queueScheduler}});var v=r(3660);Object.defineProperty(t,"animationFrame",{enumerable:!0,get:function(){return v.animationFrame}}),Object.defineProperty(t,"animationFrameScheduler",{enumerable:!0,get:function(){return v.animationFrameScheduler}});var y=r(4123);Object.defineProperty(t,"VirtualTimeScheduler",{enumerable:!0,get:function(){return y.VirtualTimeScheduler}}),Object.defineProperty(t,"VirtualAction",{enumerable:!0,get:function(){return y.VirtualAction}});var m=r(218);Object.defineProperty(t,"Scheduler",{enumerable:!0,get:function(){return m.Scheduler}});var _=r(3865);Object.defineProperty(t,"Subscription",{enumerable:!0,get:function(){return _.Subscription}});var g=r(5125);Object.defineProperty(t,"Subscriber",{enumerable:!0,get:function(){return g.Subscriber}});var O=r(3104);Object.defineProperty(t,"Notification",{enumerable:!0,get:function(){return O.Notification}}),Object.defineProperty(t,"NotificationKind",{enumerable:!0,get:function(){return O.NotificationKind}});var S=r(9985);Object.defineProperty(t,"pipe",{enumerable:!0,get:function(){return S.pipe}});var w=r(2576);Object.defineProperty(t,"noop",{enumerable:!0,get:function(){return w.noop}});var P=r(4781);Object.defineProperty(t,"identity",{enumerable:!0,get:function(){return P.identity}});var x=r(8386);Object.defineProperty(t,"isObservable",{enumerable:!0,get:function(){return x.isObservable}});var A=r(9309);Object.defineProperty(t,"lastValueFrom",{enumerable:!0,get:function(){return A.lastValueFrom}});var j=r(8182);Object.defineProperty(t,"firstValueFrom",{enumerable:!0,get:function(){return j.firstValueFrom}});var M=r(2351);Object.defineProperty(t,"ArgumentOutOfRangeError",{enumerable:!0,get:function(){return M.ArgumentOutOfRangeError}});var B=r(9474);Object.defineProperty(t,"EmptyError",{enumerable:!0,get:function(){return B.EmptyError}});var T=r(8598);Object.defineProperty(t,"NotFoundError",{enumerable:!0,get:function(){return T.NotFoundError}});var E=r(2642);Object.defineProperty(t,"ObjectUnsubscribedError",{enumerable:!0,get:function(){return E.ObjectUnsubscribedError}});var I=r(6156);Object.defineProperty(t,"SequenceError",{enumerable:!0,get:function(){return I.SequenceError}});var C=r(4173);Object.defineProperty(t,"TimeoutError",{enumerable:!0,get:function(){return C.TimeoutError}});var R=r(4805);Object.defineProperty(t,"UnsubscriptionError",{enumerable:!0,get:function(){return R.UnsubscriptionError}});var D=r(3050);Object.defineProperty(t,"bindCallback",{enumerable:!0,get:function(){return D.bindCallback}});var k=r(8130);Object.defineProperty(t,"bindNodeCallback",{enumerable:!0,get:function(){return k.bindNodeCallback}});var F=r(9258);Object.defineProperty(t,"combineLatest",{enumerable:!0,get:function(){return F.combineLatest}});var L=r(2239);Object.defineProperty(t,"concat",{enumerable:!0,get:function(){return L.concat}});var X=r(2873);Object.defineProperty(t,"connectable",{enumerable:!0,get:function(){return X.connectable}});var N=r(7885);Object.defineProperty(t,"defer",{enumerable:!0,get:function(){return N.defer}});var G=r(6332);Object.defineProperty(t,"empty",{enumerable:!0,get:function(){return G.empty}});var Y=r(7245);Object.defineProperty(t,"forkJoin",{enumerable:!0,get:function(){return Y.forkJoin}});var K=r(5432);Object.defineProperty(t,"from",{enumerable:!0,get:function(){return K.from}});var H=r(3267);Object.defineProperty(t,"fromEvent",{enumerable:!0,get:function(){return H.fromEvent}});var z=r(470);Object.defineProperty(t,"fromEventPattern",{enumerable:!0,get:function(){return z.fromEventPattern}});var U=r(4303);Object.defineProperty(t,"generate",{enumerable:!0,get:function(){return U.generate}});var W=r(1757);Object.defineProperty(t,"iif",{enumerable:!0,get:function(){return W.iif}});var V=r(8990);Object.defineProperty(t,"interval",{enumerable:!0,get:function(){return V.interval}});var q=r(1846);Object.defineProperty(t,"merge",{enumerable:!0,get:function(){return q.merge}});var $=r(1339);Object.defineProperty(t,"never",{enumerable:!0,get:function(){return $.never}});var J=r(5726);Object.defineProperty(t,"of",{enumerable:!0,get:function(){return J.of}});var Z=r(724);Object.defineProperty(t,"onErrorResumeNext",{enumerable:!0,get:function(){return Z.onErrorResumeNext}});var Q=r(4380);Object.defineProperty(t,"pairs",{enumerable:!0,get:function(){return Q.pairs}});var ee=r(7273);Object.defineProperty(t,"partition",{enumerable:!0,get:function(){return ee.partition}});var te=r(5182);Object.defineProperty(t,"race",{enumerable:!0,get:function(){return te.race}});var re=r(322);Object.defineProperty(t,"range",{enumerable:!0,get:function(){return re.range}});var ne=r(2098);Object.defineProperty(t,"throwError",{enumerable:!0,get:function(){return ne.throwError}});var ie=r(7513);Object.defineProperty(t,"timer",{enumerable:!0,get:function(){return ie.timer}});var oe=r(2962);Object.defineProperty(t,"using",{enumerable:!0,get:function(){return oe.using}});var ae=r(7654);Object.defineProperty(t,"zip",{enumerable:!0,get:function(){return ae.zip}});var ue=r(5207);Object.defineProperty(t,"scheduled",{enumerable:!0,get:function(){return ue.scheduled}});var se=r(6332);Object.defineProperty(t,"EMPTY",{enumerable:!0,get:function(){return se.EMPTY}});var ce=r(1339);Object.defineProperty(t,"NEVER",{enumerable:!0,get:function(){return ce.NEVER}}),i(r(8433),t);var le=r(3280);Object.defineProperty(t,"config",{enumerable:!0,get:function(){return le.config}});var he=r(6474);Object.defineProperty(t,"audit",{enumerable:!0,get:function(){return he.audit}});var fe=r(5382);Object.defineProperty(t,"auditTime",{enumerable:!0,get:function(){return fe.auditTime}});var pe=r(9715);Object.defineProperty(t,"buffer",{enumerable:!0,get:function(){return pe.buffer}});var de=r(3814);Object.defineProperty(t,"bufferCount",{enumerable:!0,get:function(){return de.bufferCount}});var be=r(7211);Object.defineProperty(t,"bufferTime",{enumerable:!0,get:function(){return be.bufferTime}});var ve=r(4943);Object.defineProperty(t,"bufferToggle",{enumerable:!0,get:function(){return ve.bufferToggle}});var ye=r(1240);Object.defineProperty(t,"bufferWhen",{enumerable:!0,get:function(){return ye.bufferWhen}});var me=r(9548);Object.defineProperty(t,"catchError",{enumerable:!0,get:function(){return me.catchError}});var _e=r(2128);Object.defineProperty(t,"combineAll",{enumerable:!0,get:function(){return _e.combineAll}});var ge=r(3240);Object.defineProperty(t,"combineLatestAll",{enumerable:!0,get:function(){return ge.combineLatestAll}});var Oe=r(5024);Object.defineProperty(t,"combineLatestWith",{enumerable:!0,get:function(){return Oe.combineLatestWith}});var Se=r(4413);Object.defineProperty(t,"concatAll",{enumerable:!0,get:function(){return Se.concatAll}});var we=r(7498);Object.defineProperty(t,"concatMap",{enumerable:!0,get:function(){return we.concatMap}});var Pe=r(6109);Object.defineProperty(t,"concatMapTo",{enumerable:!0,get:function(){return Pe.concatMapTo}});var xe=r(9664);Object.defineProperty(t,"concatWith",{enumerable:!0,get:function(){return xe.concatWith}});var Ae=r(1995);Object.defineProperty(t,"connect",{enumerable:!0,get:function(){return Ae.connect}});var je=r(993);Object.defineProperty(t,"count",{enumerable:!0,get:function(){return je.count}});var Me=r(496);Object.defineProperty(t,"debounce",{enumerable:!0,get:function(){return Me.debounce}});var Be=r(1385);Object.defineProperty(t,"debounceTime",{enumerable:!0,get:function(){return Be.debounceTime}});var Te=r(1658);Object.defineProperty(t,"defaultIfEmpty",{enumerable:!0,get:function(){return Te.defaultIfEmpty}});var Ee=r(5841);Object.defineProperty(t,"delay",{enumerable:!0,get:function(){return Ee.delay}});var Ie=r(8798);Object.defineProperty(t,"delayWhen",{enumerable:!0,get:function(){return Ie.delayWhen}});var Ce=r(1080);Object.defineProperty(t,"dematerialize",{enumerable:!0,get:function(){return Ce.dematerialize}});var Re=r(3054);Object.defineProperty(t,"distinct",{enumerable:!0,get:function(){return Re.distinct}});var De=r(8737);Object.defineProperty(t,"distinctUntilChanged",{enumerable:!0,get:function(){return De.distinctUntilChanged}});var ke=r(7957);Object.defineProperty(t,"distinctUntilKeyChanged",{enumerable:!0,get:function(){return ke.distinctUntilKeyChanged}});var Fe=r(8633);Object.defineProperty(t,"elementAt",{enumerable:!0,get:function(){return Fe.elementAt}});var Le=r(911);Object.defineProperty(t,"endWith",{enumerable:!0,get:function(){return Le.endWith}});var Xe=r(2096);Object.defineProperty(t,"every",{enumerable:!0,get:function(){return Xe.every}});var Ne=r(67);Object.defineProperty(t,"exhaust",{enumerable:!0,get:function(){return Ne.exhaust}});var Ge=r(5337);Object.defineProperty(t,"exhaustAll",{enumerable:!0,get:function(){return Ge.exhaustAll}});var Ye=r(5635);Object.defineProperty(t,"exhaustMap",{enumerable:!0,get:function(){return Ye.exhaustMap}});var Ke=r(9745);Object.defineProperty(t,"expand",{enumerable:!0,get:function(){return Ke.expand}});var He=r(9154);Object.defineProperty(t,"filter",{enumerable:!0,get:function(){return He.filter}});var ze=r(9283);Object.defineProperty(t,"finalize",{enumerable:!0,get:function(){return ze.finalize}});var Ue=r(7119);Object.defineProperty(t,"find",{enumerable:!0,get:function(){return Ue.find}});var We=r(4706);Object.defineProperty(t,"findIndex",{enumerable:!0,get:function(){return We.findIndex}});var Ve=r(9219);Object.defineProperty(t,"first",{enumerable:!0,get:function(){return Ve.first}});var qe=r(9749);Object.defineProperty(t,"groupBy",{enumerable:!0,get:function(){return qe.groupBy}});var $e=r(9438);Object.defineProperty(t,"ignoreElements",{enumerable:!0,get:function(){return $e.ignoreElements}});var Je=r(8515);Object.defineProperty(t,"isEmpty",{enumerable:!0,get:function(){return Je.isEmpty}});var Ze=r(2435);Object.defineProperty(t,"last",{enumerable:!0,get:function(){return Ze.last}});var Qe=r(7291);Object.defineProperty(t,"map",{enumerable:!0,get:function(){return Qe.map}});var et=r(8313);Object.defineProperty(t,"mapTo",{enumerable:!0,get:function(){return et.mapTo}});var tt=r(3209);Object.defineProperty(t,"materialize",{enumerable:!0,get:function(){return tt.materialize}});var rt=r(2620);Object.defineProperty(t,"max",{enumerable:!0,get:function(){return rt.max}});var nt=r(3783);Object.defineProperty(t,"mergeAll",{enumerable:!0,get:function(){return nt.mergeAll}});var it=r(1788);Object.defineProperty(t,"flatMap",{enumerable:!0,get:function(){return it.flatMap}});var ot=r(9475);Object.defineProperty(t,"mergeMap",{enumerable:!0,get:function(){return ot.mergeMap}});var at=r(1211);Object.defineProperty(t,"mergeMapTo",{enumerable:!0,get:function(){return at.mergeMapTo}});var ut=r(7267);Object.defineProperty(t,"mergeScan",{enumerable:!0,get:function(){return ut.mergeScan}});var st=r(9303);Object.defineProperty(t,"mergeWith",{enumerable:!0,get:function(){return st.mergeWith}});var ct=r(9714);Object.defineProperty(t,"min",{enumerable:!0,get:function(){return ct.min}});var lt=r(3848);Object.defineProperty(t,"multicast",{enumerable:!0,get:function(){return lt.multicast}});var ht=r(1184);Object.defineProperty(t,"observeOn",{enumerable:!0,get:function(){return ht.observeOn}});var ft=r(7582);Object.defineProperty(t,"onErrorResumeNextWith",{enumerable:!0,get:function(){return ft.onErrorResumeNextWith}});var pt=r(2731);Object.defineProperty(t,"pairwise",{enumerable:!0,get:function(){return pt.pairwise}});var dt=r(4691);Object.defineProperty(t,"pluck",{enumerable:!0,get:function(){return dt.pluck}});var bt=r(4474);Object.defineProperty(t,"publish",{enumerable:!0,get:function(){return bt.publish}});var vt=r(52);Object.defineProperty(t,"publishBehavior",{enumerable:!0,get:function(){return vt.publishBehavior}});var yt=r(2110);Object.defineProperty(t,"publishLast",{enumerable:!0,get:function(){return yt.publishLast}});var mt=r(9864);Object.defineProperty(t,"publishReplay",{enumerable:!0,get:function(){return mt.publishReplay}});var _t=r(179);Object.defineProperty(t,"raceWith",{enumerable:!0,get:function(){return _t.raceWith}});var gt=r(122);Object.defineProperty(t,"reduce",{enumerable:!0,get:function(){return gt.reduce}});var Ot=r(5313);Object.defineProperty(t,"repeat",{enumerable:!0,get:function(){return Ot.repeat}});var St=r(4068);Object.defineProperty(t,"repeatWhen",{enumerable:!0,get:function(){return St.repeatWhen}});var wt=r(64);Object.defineProperty(t,"retry",{enumerable:!0,get:function(){return wt.retry}});var Pt=r(1188);Object.defineProperty(t,"retryWhen",{enumerable:!0,get:function(){return Pt.retryWhen}});var xt=r(8739);Object.defineProperty(t,"refCount",{enumerable:!0,get:function(){return xt.refCount}});var At=r(4193);Object.defineProperty(t,"sample",{enumerable:!0,get:function(){return At.sample}});var jt=r(6170);Object.defineProperty(t,"sampleTime",{enumerable:!0,get:function(){return jt.sampleTime}});var Mt=r(5876);Object.defineProperty(t,"scan",{enumerable:!0,get:function(){return Mt.scan}});var Bt=r(1791);Object.defineProperty(t,"sequenceEqual",{enumerable:!0,get:function(){return Bt.sequenceEqual}});var Tt=r(5137);Object.defineProperty(t,"share",{enumerable:!0,get:function(){return Tt.share}});var Et=r(1348);Object.defineProperty(t,"shareReplay",{enumerable:!0,get:function(){return Et.shareReplay}});var It=r(8242);Object.defineProperty(t,"single",{enumerable:!0,get:function(){return It.single}});var Ct=r(3169);Object.defineProperty(t,"skip",{enumerable:!0,get:function(){return Ct.skip}});var Rt=r(2454);Object.defineProperty(t,"skipLast",{enumerable:!0,get:function(){return Rt.skipLast}});var Dt=r(6931);Object.defineProperty(t,"skipUntil",{enumerable:!0,get:function(){return Dt.skipUntil}});var kt=r(7913);Object.defineProperty(t,"skipWhile",{enumerable:!0,get:function(){return kt.skipWhile}});var Ft=r(9234);Object.defineProperty(t,"startWith",{enumerable:!0,get:function(){return Ft.startWith}});var Lt=r(276);Object.defineProperty(t,"subscribeOn",{enumerable:!0,get:function(){return Lt.subscribeOn}});var Xt=r(9253);Object.defineProperty(t,"switchAll",{enumerable:!0,get:function(){return Xt.switchAll}});var Nt=r(8518);Object.defineProperty(t,"switchMap",{enumerable:!0,get:function(){return Nt.switchMap}});var Gt=r(1173);Object.defineProperty(t,"switchMapTo",{enumerable:!0,get:function(){return Gt.switchMapTo}});var Yt=r(3855);Object.defineProperty(t,"switchScan",{enumerable:!0,get:function(){return Yt.switchScan}});var Kt=r(4783);Object.defineProperty(t,"take",{enumerable:!0,get:function(){return Kt.take}});var Ht=r(1980);Object.defineProperty(t,"takeLast",{enumerable:!0,get:function(){return Ht.takeLast}});var zt=r(9845);Object.defineProperty(t,"takeUntil",{enumerable:!0,get:function(){return zt.takeUntil}});var Ut=r(6060);Object.defineProperty(t,"takeWhile",{enumerable:!0,get:function(){return Ut.takeWhile}});var Wt=r(1138);Object.defineProperty(t,"tap",{enumerable:!0,get:function(){return Wt.tap}});var Vt=r(7306);Object.defineProperty(t,"throttle",{enumerable:!0,get:function(){return Vt.throttle}});var qt=r(8968);Object.defineProperty(t,"throttleTime",{enumerable:!0,get:function(){return qt.throttleTime}});var $t=r(1779);Object.defineProperty(t,"throwIfEmpty",{enumerable:!0,get:function(){return $t.throwIfEmpty}});var Jt=r(8005);Object.defineProperty(t,"timeInterval",{enumerable:!0,get:function(){return Jt.timeInterval}});var Zt=r(4173);Object.defineProperty(t,"timeout",{enumerable:!0,get:function(){return Zt.timeout}});var Qt=r(7223);Object.defineProperty(t,"timeoutWith",{enumerable:!0,get:function(){return Qt.timeoutWith}});var er=r(8975);Object.defineProperty(t,"timestamp",{enumerable:!0,get:function(){return er.timestamp}});var tr=r(2);Object.defineProperty(t,"toArray",{enumerable:!0,get:function(){return tr.toArray}});var rr=r(2826);Object.defineProperty(t,"window",{enumerable:!0,get:function(){return rr.window}});var nr=r(7526);Object.defineProperty(t,"windowCount",{enumerable:!0,get:function(){return nr.windowCount}});var ir=r(8294);Object.defineProperty(t,"windowTime",{enumerable:!0,get:function(){return ir.windowTime}});var or=r(1883);Object.defineProperty(t,"windowToggle",{enumerable:!0,get:function(){return or.windowToggle}});var ar=r(4309);Object.defineProperty(t,"windowWhen",{enumerable:!0,get:function(){return ar.windowWhen}});var ur=r(3041);Object.defineProperty(t,"withLatestFrom",{enumerable:!0,get:function(){return ur.withLatestFrom}});var sr=r(8593);Object.defineProperty(t,"zipAll",{enumerable:!0,get:function(){return sr.zipAll}});var cr=r(8096);Object.defineProperty(t,"zipWith",{enumerable:!0,get:function(){return cr.zipWith}})},280:function(e,t,r){var n,i=this&&this.__extends||(n=function(e,t){return n=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,t){e.__proto__=t}||function(e,t){for(var r in t)Object.prototype.hasOwnProperty.call(t,r)&&(e[r]=t[r])},n(e,t)},function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Class extends value "+String(t)+" is not a constructor or null");function r(){this.constructor=e}n(e,t),e.prototype=null===t?Object.create(t):(r.prototype=t.prototype,new r)});Object.defineProperty(t,"__esModule",{value:!0}),t.AsyncSubject=void 0;var o=function(e){function t(){var t=null!==e&&e.apply(this,arguments)||this;return t._value=null,t._hasValue=!1,t._isComplete=!1,t}return i(t,e),t.prototype._checkFinalizedStatuses=function(e){var t=this,r=t.hasError,n=t._hasValue,i=t._value,o=t.thrownError,a=t.isStopped,u=t._isComplete;r?e.error(o):(a||u)&&(n&&e.next(i),e.complete())},t.prototype.next=function(e){this.isStopped||(this._value=e,this._hasValue=!0)},t.prototype.complete=function(){var t=this,r=t._hasValue,n=t._value;t._isComplete||(this._isComplete=!0,r&&e.prototype.next.call(this,n),e.prototype.complete.call(this))},t}(r(3032).Subject);t.AsyncSubject=o},5240:function(e,t,r){var n,i=this&&this.__extends||(n=function(e,t){return n=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,t){e.__proto__=t}||function(e,t){for(var r in t)Object.prototype.hasOwnProperty.call(t,r)&&(e[r]=t[r])},n(e,t)},function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Class extends value "+String(t)+" is not a constructor or null");function r(){this.constructor=e}n(e,t),e.prototype=null===t?Object.create(t):(r.prototype=t.prototype,new r)});Object.defineProperty(t,"__esModule",{value:!0}),t.BehaviorSubject=void 0;var o=function(e){function t(t){var r=e.call(this)||this;return r._value=t,r}return i(t,e),Object.defineProperty(t.prototype,"value",{get:function(){return this.getValue()},enumerable:!1,configurable:!0}),t.prototype._subscribe=function(t){var r=e.prototype._subscribe.call(this,t);return!r.closed&&t.next(this._value),r},t.prototype.getValue=function(){var e=this,t=e.hasError,r=e.thrownError,n=e._value;if(t)throw r;return this._throwIfClosed(),n},t.prototype.next=function(t){e.prototype.next.call(this,this._value=t)},t}(r(3032).Subject);t.BehaviorSubject=o},3104:(e,t,r)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.observeNotification=t.Notification=t.NotificationKind=void 0;var n,i=r(6332),o=r(5726),a=r(2098),u=r(3005);(n=t.NotificationKind||(t.NotificationKind={})).NEXT="N",n.ERROR="E",n.COMPLETE="C";var s=function(){function e(e,t,r){this.kind=e,this.value=t,this.error=r,this.hasValue="N"===e}return e.prototype.observe=function(e){return c(this,e)},e.prototype.do=function(e,t,r){var n=this,i=n.kind,o=n.value,a=n.error;return"N"===i?null==e?void 0:e(o):"E"===i?null==t?void 0:t(a):null==r?void 0:r()},e.prototype.accept=function(e,t,r){var n;return u.isFunction(null===(n=e)||void 0===n?void 0:n.next)?this.observe(e):this.do(e,t,r)},e.prototype.toObservable=function(){var e=this,t=e.kind,r=e.value,n=e.error,u="N"===t?o.of(r):"E"===t?a.throwError((function(){return n})):"C"===t?i.EMPTY:0;if(!u)throw new TypeError("Unexpected notification kind "+t);return u},e.createNext=function(t){return new e("N",t)},e.createError=function(t){return new e("E",void 0,t)},e.createComplete=function(){return e.completeNotification},e.completeNotification=new e("C"),e}();function c(e,t){var r,n,i,o=e,a=o.kind,u=o.value,s=o.error;if("string"!=typeof a)throw new TypeError('Invalid notification, missing "kind"');"N"===a?null===(r=t.next)||void 0===r||r.call(t,u):"E"===a?null===(n=t.error)||void 0===n||n.call(t,s):null===(i=t.complete)||void 0===i||i.call(t)}t.Notification=s,t.observeNotification=c},7286:(e,t)=>{function r(e,t,r){return{kind:e,value:t,error:r}}Object.defineProperty(t,"__esModule",{value:!0}),t.createNotification=t.nextNotification=t.errorNotification=t.COMPLETE_NOTIFICATION=void 0,t.COMPLETE_NOTIFICATION=r("C",void 0,void 0),t.errorNotification=function(e){return r("E",void 0,e)},t.nextNotification=function(e){return r("N",e,void 0)},t.createNotification=r},2419:(e,t,r)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.Observable=void 0;var n=r(5125),i=r(3865),o=r(2801),a=r(9985),u=r(3280),s=r(3005),c=r(6110),l=function(){function e(e){e&&(this._subscribe=e)}return e.prototype.lift=function(t){var r=new e;return r.source=this,r.operator=t,r},e.prototype.subscribe=function(e,t,r){var o,a=this,u=(o=e)&&o instanceof n.Subscriber||function(e){return e&&s.isFunction(e.next)&&s.isFunction(e.error)&&s.isFunction(e.complete)}(o)&&i.isSubscription(o)?e:new n.SafeSubscriber(e,t,r);return c.errorContext((function(){var e=a,t=e.operator,r=e.source;u.add(t?t.call(u,r):r?a._subscribe(u):a._trySubscribe(u))})),u},e.prototype._trySubscribe=function(e){try{return this._subscribe(e)}catch(t){e.error(t)}},e.prototype.forEach=function(e,t){var r=this;return new(t=h(t))((function(t,i){var o=new n.SafeSubscriber({next:function(t){try{e(t)}catch(e){i(e),o.unsubscribe()}},error:i,complete:t});r.subscribe(o)}))},e.prototype._subscribe=function(e){var t;return null===(t=this.source)||void 0===t?void 0:t.subscribe(e)},e.prototype[o.observable]=function(){return this},e.prototype.pipe=function(){for(var e=[],t=0;t<arguments.length;t++)e[t]=arguments[t];return a.pipeFromArray(e)(this)},e.prototype.toPromise=function(e){var t=this;return new(e=h(e))((function(e,r){var n;t.subscribe((function(e){return n=e}),(function(e){return r(e)}),(function(){return e(n)}))}))},e.create=function(t){return new e(t)},e}();function h(e){var t;return null!==(t=null!=e?e:u.config.Promise)&&void 0!==t?t:Promise}t.Observable=l},3274:function(e,t,r){var n,i=this&&this.__extends||(n=function(e,t){return n=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,t){e.__proto__=t}||function(e,t){for(var r in t)Object.prototype.hasOwnProperty.call(t,r)&&(e[r]=t[r])},n(e,t)},function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Class extends value "+String(t)+" is not a constructor or null");function r(){this.constructor=e}n(e,t),e.prototype=null===t?Object.create(t):(r.prototype=t.prototype,new r)});Object.defineProperty(t,"__esModule",{value:!0}),t.ReplaySubject=void 0;var o=r(3032),a=r(7950),u=function(e){function t(t,r,n){void 0===t&&(t=1/0),void 0===r&&(r=1/0),void 0===n&&(n=a.dateTimestampProvider);var i=e.call(this)||this;return i._bufferSize=t,i._windowTime=r,i._timestampProvider=n,i._buffer=[],i._infiniteTimeWindow=!0,i._infiniteTimeWindow=r===1/0,i._bufferSize=Math.max(1,t),i._windowTime=Math.max(1,r),i}return i(t,e),t.prototype.next=function(t){var r=this,n=r.isStopped,i=r._buffer,o=r._infiniteTimeWindow,a=r._timestampProvider,u=r._windowTime;n||(i.push(t),!o&&i.push(a.now()+u)),this._trimBuffer(),e.prototype.next.call(this,t)},t.prototype._subscribe=function(e){this._throwIfClosed(),this._trimBuffer();for(var t=this._innerSubscribe(e),r=this._infiniteTimeWindow,n=this._buffer.slice(),i=0;i<n.length&&!e.closed;i+=r?1:2)e.next(n[i]);return this._checkFinalizedStatuses(e),t},t.prototype._trimBuffer=function(){var e=this,t=e._bufferSize,r=e._timestampProvider,n=e._buffer,i=e._infiniteTimeWindow,o=(i?1:2)*t;if(t<1/0&&o<n.length&&n.splice(0,n.length-o),!i){for(var a=r.now(),u=0,s=1;s<n.length&&n[s]<=a;s+=2)u=s;u&&n.splice(0,u+1)}},t}(o.Subject);t.ReplaySubject=u},218:(e,t,r)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.Scheduler=void 0;var n=r(7950),i=function(){function e(t,r){void 0===r&&(r=e.now),this.schedulerActionCtor=t,this.now=r}return e.prototype.schedule=function(e,t,r){return void 0===t&&(t=0),new this.schedulerActionCtor(this,e).schedule(r,t)},e.now=n.dateTimestampProvider.now,e}();t.Scheduler=i},3032:function(e,t,r){var n,i=this&&this.__extends||(n=function(e,t){return n=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,t){e.__proto__=t}||function(e,t){for(var r in t)Object.prototype.hasOwnProperty.call(t,r)&&(e[r]=t[r])},n(e,t)},function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Class extends value "+String(t)+" is not a constructor or null");function r(){this.constructor=e}n(e,t),e.prototype=null===t?Object.create(t):(r.prototype=t.prototype,new r)}),o=this&&this.__values||function(e){var t="function"==typeof Symbol&&Symbol.iterator,r=t&&e[t],n=0;if(r)return r.call(e);if(e&&"number"==typeof e.length)return{next:function(){return e&&n>=e.length&&(e=void 0),{value:e&&e[n++],done:!e}}};throw new TypeError(t?"Object is not iterable.":"Symbol.iterator is not defined.")};Object.defineProperty(t,"__esModule",{value:!0}),t.AnonymousSubject=t.Subject=void 0;var a=r(2419),u=r(3865),s=r(2642),c=r(6967),l=r(6110),h=function(e){function t(){var t=e.call(this)||this;return t.closed=!1,t.currentObservers=null,t.observers=[],t.isStopped=!1,t.hasError=!1,t.thrownError=null,t}return i(t,e),t.prototype.lift=function(e){var t=new f(this,this);return t.operator=e,t},t.prototype._throwIfClosed=function(){if(this.closed)throw new s.ObjectUnsubscribedError},t.prototype.next=function(e){var t=this;l.errorContext((function(){var r,n;if(t._throwIfClosed(),!t.isStopped){t.currentObservers||(t.currentObservers=Array.from(t.observers));try{for(var i=o(t.currentObservers),a=i.next();!a.done;a=i.next())a.value.next(e)}catch(e){r={error:e}}finally{try{a&&!a.done&&(n=i.return)&&n.call(i)}finally{if(r)throw r.error}}}}))},t.prototype.error=function(e){var t=this;l.errorContext((function(){if(t._throwIfClosed(),!t.isStopped){t.hasError=t.isStopped=!0,t.thrownError=e;for(var r=t.observers;r.length;)r.shift().error(e)}}))},t.prototype.complete=function(){var e=this;l.errorContext((function(){if(e._throwIfClosed(),!e.isStopped){e.isStopped=!0;for(var t=e.observers;t.length;)t.shift().complete()}}))},t.prototype.unsubscribe=function(){this.isStopped=this.closed=!0,this.observers=this.currentObservers=null},Object.defineProperty(t.prototype,"observed",{get:function(){var e;return(null===(e=this.observers)||void 0===e?void 0:e.length)>0},enumerable:!1,configurable:!0}),t.prototype._trySubscribe=function(t){return this._throwIfClosed(),e.prototype._trySubscribe.call(this,t)},t.prototype._subscribe=function(e){return this._throwIfClosed(),this._checkFinalizedStatuses(e),this._innerSubscribe(e)},t.prototype._innerSubscribe=function(e){var t=this,r=this,n=r.hasError,i=r.isStopped,o=r.observers;return n||i?u.EMPTY_SUBSCRIPTION:(this.currentObservers=null,o.push(e),new u.Subscription((function(){t.currentObservers=null,c.arrRemove(o,e)})))},t.prototype._checkFinalizedStatuses=function(e){var t=this,r=t.hasError,n=t.thrownError,i=t.isStopped;r?e.error(n):i&&e.complete()},t.prototype.asObservable=function(){var e=new a.Observable;return e.source=this,e},t.create=function(e,t){return new f(e,t)},t}(a.Observable);t.Subject=h;var f=function(e){function t(t,r){var n=e.call(this)||this;return n.destination=t,n.source=r,n}return i(t,e),t.prototype.next=function(e){var t,r;null===(r=null===(t=this.destination)||void 0===t?void 0:t.next)||void 0===r||r.call(t,e)},t.prototype.error=function(e){var t,r;null===(r=null===(t=this.destination)||void 0===t?void 0:t.error)||void 0===r||r.call(t,e)},t.prototype.complete=function(){var e,t;null===(t=null===(e=this.destination)||void 0===e?void 0:e.complete)||void 0===t||t.call(e)},t.prototype._subscribe=function(e){var t,r;return null!==(r=null===(t=this.source)||void 0===t?void 0:t.subscribe(e))&&void 0!==r?r:u.EMPTY_SUBSCRIPTION},t}(h);t.AnonymousSubject=f},5125:function(e,t,r){var n,i=this&&this.__extends||(n=function(e,t){return n=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,t){e.__proto__=t}||function(e,t){for(var r in t)Object.prototype.hasOwnProperty.call(t,r)&&(e[r]=t[r])},n(e,t)},function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Class extends value "+String(t)+" is not a constructor or null");function r(){this.constructor=e}n(e,t),e.prototype=null===t?Object.create(t):(r.prototype=t.prototype,new r)});Object.defineProperty(t,"__esModule",{value:!0}),t.EMPTY_OBSERVER=t.SafeSubscriber=t.Subscriber=void 0;var o=r(3005),a=r(3865),u=r(3280),s=r(7968),c=r(2576),l=r(7286),h=r(4590),f=r(6110),p=function(e){function r(r){var n=e.call(this)||this;return n.isStopped=!1,r?(n.destination=r,a.isSubscription(r)&&r.add(n)):n.destination=t.EMPTY_OBSERVER,n}return i(r,e),r.create=function(e,t,r){return new y(e,t,r)},r.prototype.next=function(e){this.isStopped?_(l.nextNotification(e),this):this._next(e)},r.prototype.error=function(e){this.isStopped?_(l.errorNotification(e),this):(this.isStopped=!0,this._error(e))},r.prototype.complete=function(){this.isStopped?_(l.COMPLETE_NOTIFICATION,this):(this.isStopped=!0,this._complete())},r.prototype.unsubscribe=function(){this.closed||(this.isStopped=!0,e.prototype.unsubscribe.call(this),this.destination=null)},r.prototype._next=function(e){this.destination.next(e)},r.prototype._error=function(e){try{this.destination.error(e)}finally{this.unsubscribe()}},r.prototype._complete=function(){try{this.destination.complete()}finally{this.unsubscribe()}},r}(a.Subscription);t.Subscriber=p;var d=Function.prototype.bind;function b(e,t){return d.call(e,t)}var v=function(){function e(e){this.partialObserver=e}return e.prototype.next=function(e){var t=this.partialObserver;if(t.next)try{t.next(e)}catch(e){m(e)}},e.prototype.error=function(e){var t=this.partialObserver;if(t.error)try{t.error(e)}catch(e){m(e)}else m(e)},e.prototype.complete=function(){var e=this.partialObserver;if(e.complete)try{e.complete()}catch(e){m(e)}},e}(),y=function(e){function t(t,r,n){var i,a,s=e.call(this)||this;return o.isFunction(t)||!t?i={next:null!=t?t:void 0,error:null!=r?r:void 0,complete:null!=n?n:void 0}:s&&u.config.useDeprecatedNextContext?((a=Object.create(t)).unsubscribe=function(){return s.unsubscribe()},i={next:t.next&&b(t.next,a),error:t.error&&b(t.error,a),complete:t.complete&&b(t.complete,a)}):i=t,s.destination=new v(i),s}return i(t,e),t}(p);function m(e){u.config.useDeprecatedSynchronousErrorHandling?f.captureError(e):s.reportUnhandledError(e)}function _(e,t){var r=u.config.onStoppedNotification;r&&h.timeoutProvider.setTimeout((function(){return r(e,t)}))}t.SafeSubscriber=y,t.EMPTY_OBSERVER={closed:!0,next:c.noop,error:function(e){throw e},complete:c.noop}},3865:function(e,t,r){var n=this&&this.__values||function(e){var t="function"==typeof Symbol&&Symbol.iterator,r=t&&e[t],n=0;if(r)return r.call(e);if(e&&"number"==typeof e.length)return{next:function(){return e&&n>=e.length&&(e=void 0),{value:e&&e[n++],done:!e}}};throw new TypeError(t?"Object is not iterable.":"Symbol.iterator is not defined.")},i=this&&this.__read||function(e,t){var r="function"==typeof Symbol&&e[Symbol.iterator];if(!r)return e;var n,i,o=r.call(e),a=[];try{for(;(void 0===t||t-- >0)&&!(n=o.next()).done;)a.push(n.value)}catch(e){i={error:e}}finally{try{n&&!n.done&&(r=o.return)&&r.call(o)}finally{if(i)throw i.error}}return a},o=this&&this.__spreadArray||function(e,t){for(var r=0,n=t.length,i=e.length;r<n;r++,i++)e[i]=t[r];return e};Object.defineProperty(t,"__esModule",{value:!0}),t.isSubscription=t.EMPTY_SUBSCRIPTION=t.Subscription=void 0;var a=r(3005),u=r(4805),s=r(6967),c=function(){function e(e){this.initialTeardown=e,this.closed=!1,this._parentage=null,this._finalizers=null}var t;return e.prototype.unsubscribe=function(){var e,t,r,s,c;if(!this.closed){this.closed=!0;var h=this._parentage;if(h)if(this._parentage=null,Array.isArray(h))try{for(var f=n(h),p=f.next();!p.done;p=f.next())p.value.remove(this)}catch(t){e={error:t}}finally{try{p&&!p.done&&(t=f.return)&&t.call(f)}finally{if(e)throw e.error}}else h.remove(this);var d=this.initialTeardown;if(a.isFunction(d))try{d()}catch(e){c=e instanceof u.UnsubscriptionError?e.errors:[e]}var b=this._finalizers;if(b){this._finalizers=null;try{for(var v=n(b),y=v.next();!y.done;y=v.next()){var m=y.value;try{l(m)}catch(e){c=null!=c?c:[],e instanceof u.UnsubscriptionError?c=o(o([],i(c)),i(e.errors)):c.push(e)}}}catch(e){r={error:e}}finally{try{y&&!y.done&&(s=v.return)&&s.call(v)}finally{if(r)throw r.error}}}if(c)throw new u.UnsubscriptionError(c)}},e.prototype.add=function(t){var r;if(t&&t!==this)if(this.closed)l(t);else{if(t instanceof e){if(t.closed||t._hasParent(this))return;t._addParent(this)}(this._finalizers=null!==(r=this._finalizers)&&void 0!==r?r:[]).push(t)}},e.prototype._hasParent=function(e){var t=this._parentage;return t===e||Array.isArray(t)&&t.includes(e)},e.prototype._addParent=function(e){var t=this._parentage;this._parentage=Array.isArray(t)?(t.push(e),t):t?[t,e]:e},e.prototype._removeParent=function(e){var t=this._parentage;t===e?this._parentage=null:Array.isArray(t)&&s.arrRemove(t,e)},e.prototype.remove=function(t){var r=this._finalizers;r&&s.arrRemove(r,t),t instanceof e&&t._removeParent(this)},e.EMPTY=((t=new e).closed=!0,t),e}();function l(e){a.isFunction(e)?e():e.unsubscribe()}t.Subscription=c,t.EMPTY_SUBSCRIPTION=c.EMPTY,t.isSubscription=function(e){return e instanceof c||e&&"closed"in e&&a.isFunction(e.remove)&&a.isFunction(e.add)&&a.isFunction(e.unsubscribe)}},3280:(e,t)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.config=void 0,t.config={onUnhandledError:null,onStoppedNotification:null,Promise:void 0,useDeprecatedSynchronousErrorHandling:!1,useDeprecatedNextContext:!1}},8182:(e,t,r)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.firstValueFrom=void 0;var n=r(9474),i=r(5125);t.firstValueFrom=function(e,t){var r="object"==typeof t;return new Promise((function(o,a){var u=new i.SafeSubscriber({next:function(e){o(e),u.unsubscribe()},error:a,complete:function(){r?o(t.defaultValue):a(new n.EmptyError)}});e.subscribe(u)}))}},9309:(e,t,r)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.lastValueFrom=void 0;var n=r(9474);t.lastValueFrom=function(e,t){var r="object"==typeof t;return new Promise((function(i,o){var a,u=!1;e.subscribe({next:function(e){a=e,u=!0},error:o,complete:function(){u?i(a):r?i(t.defaultValue):o(new n.EmptyError)}})}))}},9518:function(e,t,r){var n,i=this&&this.__extends||(n=function(e,t){return n=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,t){e.__proto__=t}||function(e,t){for(var r in t)Object.prototype.hasOwnProperty.call(t,r)&&(e[r]=t[r])},n(e,t)},function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Class extends value "+String(t)+" is not a constructor or null");function r(){this.constructor=e}n(e,t),e.prototype=null===t?Object.create(t):(r.prototype=t.prototype,new r)});Object.defineProperty(t,"__esModule",{value:!0}),t.ConnectableObservable=void 0;var o=r(2419),a=r(3865),u=r(8739),s=r(4990),c=r(4935),l=function(e){function t(t,r){var n=e.call(this)||this;return n.source=t,n.subjectFactory=r,n._subject=null,n._refCount=0,n._connection=null,c.hasLift(t)&&(n.lift=t.lift),n}return i(t,e),t.prototype._subscribe=function(e){return this.getSubject().subscribe(e)},t.prototype.getSubject=function(){var e=this._subject;return e&&!e.isStopped||(this._subject=this.subjectFactory()),this._subject},t.prototype._teardown=function(){this._refCount=0;var e=this._connection;this._subject=this._connection=null,null==e||e.unsubscribe()},t.prototype.connect=function(){var e=this,t=this._connection;if(!t){t=this._connection=new a.Subscription;var r=this.getSubject();t.add(this.source.subscribe(s.createOperatorSubscriber(r,void 0,(function(){e._teardown(),r.complete()}),(function(t){e._teardown(),r.error(t)}),(function(){return e._teardown()})))),t.closed&&(this._connection=null,t=a.Subscription.EMPTY)}return t},t.prototype.refCount=function(){return u.refCount()(this)},t}(o.Observable);t.ConnectableObservable=l},3050:(e,t,r)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.bindCallback=void 0;var n=r(9592);t.bindCallback=function(e,t,r){return n.bindCallbackInternals(!1,e,t,r)}},9592:function(e,t,r){var n=this&&this.__read||function(e,t){var r="function"==typeof Symbol&&e[Symbol.iterator];if(!r)return e;var n,i,o=r.call(e),a=[];try{for(;(void 0===t||t-- >0)&&!(n=o.next()).done;)a.push(n.value)}catch(e){i={error:e}}finally{try{n&&!n.done&&(r=o.return)&&r.call(o)}finally{if(i)throw i.error}}return a},i=this&&this.__spreadArray||function(e,t){for(var r=0,n=t.length,i=e.length;r<n;r++,i++)e[i]=t[r];return e};Object.defineProperty(t,"__esModule",{value:!0}),t.bindCallbackInternals=void 0;var o=r(9016),a=r(2419),u=r(276),s=r(1914),c=r(1184),l=r(280);t.bindCallbackInternals=function e(t,r,h,f){if(h){if(!o.isScheduler(h))return function(){for(var n=[],i=0;i<arguments.length;i++)n[i]=arguments[i];return e(t,r,f).apply(this,n).pipe(s.mapOneOrManyArgs(h))};f=h}return f?function(){for(var n=[],i=0;i<arguments.length;i++)n[i]=arguments[i];return e(t,r).apply(this,n).pipe(u.subscribeOn(f),c.observeOn(f))}:function(){for(var e=this,o=[],u=0;u<arguments.length;u++)o[u]=arguments[u];var s=new l.AsyncSubject,c=!0;return new a.Observable((function(a){var u=s.subscribe(a);if(c){c=!1;var l=!1,h=!1;r.apply(e,i(i([],n(o)),[function(){for(var e=[],r=0;r<arguments.length;r++)e[r]=arguments[r];if(t){var n=e.shift();if(null!=n)return void s.error(n)}s.next(1<e.length?e:e[0]),h=!0,l&&s.complete()}])),h&&s.complete(),l=!0}return u}))}}},8130:(e,t,r)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.bindNodeCallback=void 0;var n=r(9592);t.bindNodeCallback=function(e,t,r){return n.bindCallbackInternals(!0,e,t,r)}},9258:(e,t,r)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.combineLatestInit=t.combineLatest=void 0;var n=r(2419),i=r(1203),o=r(5432),a=r(4781),u=r(1914),s=r(2433),c=r(641),l=r(4990),h=r(7738);function f(e,t,r){return void 0===r&&(r=a.identity),function(n){p(t,(function(){for(var i=e.length,a=new Array(i),u=i,s=i,c=function(i){p(t,(function(){var c=o.from(e[i],t),h=!1;c.subscribe(l.createOperatorSubscriber(n,(function(e){a[i]=e,h||(h=!0,s--),s||n.next(r(a.slice()))}),(function(){--u||n.complete()})))}),n)},h=0;h<i;h++)c(h)}),n)}}function p(e,t,r){e?h.executeSchedule(r,e,t):t()}t.combineLatest=function(){for(var e=[],t=0;t<arguments.length;t++)e[t]=arguments[t];var r=s.popScheduler(e),l=s.popResultSelector(e),h=i.argsArgArrayOrObject(e),p=h.args,d=h.keys;if(0===p.length)return o.from([],r);var b=new n.Observable(f(p,r,d?function(e){return c.createObject(d,e)}:a.identity));return l?b.pipe(u.mapOneOrManyArgs(l)):b},t.combineLatestInit=f},2239:(e,t,r)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.concat=void 0;var n=r(4413),i=r(2433),o=r(5432);t.concat=function(){for(var e=[],t=0;t<arguments.length;t++)e[t]=arguments[t];return n.concatAll()(o.from(e,i.popScheduler(e)))}},2873:(e,t,r)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.connectable=void 0;var n=r(3032),i=r(2419),o=r(7885),a={connector:function(){return new n.Subject},resetOnDisconnect:!0};t.connectable=function(e,t){void 0===t&&(t=a);var r=null,n=t.connector,u=t.resetOnDisconnect,s=void 0===u||u,c=n(),l=new i.Observable((function(e){return c.subscribe(e)}));return l.connect=function(){return r&&!r.closed||(r=o.defer((function(){return e})).subscribe(c),s&&r.add((function(){return c=n()}))),r},l}},7885:(e,t,r)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.defer=void 0;var n=r(2419),i=r(7103);t.defer=function(e){return new n.Observable((function(t){i.innerFrom(e()).subscribe(t)}))}},9106:(e,t,r)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.animationFrames=void 0;var n=r(2419),i=r(6813),o=r(505);function a(e){return new n.Observable((function(t){var r=e||i.performanceTimestampProvider,n=r.now(),a=0,u=function(){t.closed||(a=o.animationFrameProvider.requestAnimationFrame((function(i){a=0;var o=r.now();t.next({timestamp:e?o:i,elapsed:o-n}),u()})))};return u(),function(){a&&o.animationFrameProvider.cancelAnimationFrame(a)}}))}t.animationFrames=function(e){return e?a(e):u};var u=a()},6332:(e,t,r)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.empty=t.EMPTY=void 0;var n=r(2419);t.EMPTY=new n.Observable((function(e){return e.complete()})),t.empty=function(e){return e?function(e){return new n.Observable((function(t){return e.schedule((function(){return t.complete()}))}))}(e):t.EMPTY}},7245:(e,t,r)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.forkJoin=void 0;var n=r(2419),i=r(1203),o=r(7103),a=r(2433),u=r(4990),s=r(1914),c=r(641);t.forkJoin=function(){for(var e=[],t=0;t<arguments.length;t++)e[t]=arguments[t];var r=a.popResultSelector(e),l=i.argsArgArrayOrObject(e),h=l.args,f=l.keys,p=new n.Observable((function(e){var t=h.length;if(t)for(var r=new Array(t),n=t,i=t,a=function(t){var a=!1;o.innerFrom(h[t]).subscribe(u.createOperatorSubscriber(e,(function(e){a||(a=!0,i--),r[t]=e}),(function(){return n--}),void 0,(function(){n&&a||(i||e.next(f?c.createObject(f,r):r),e.complete())})))},s=0;s<t;s++)a(s);else e.complete()}));return r?p.pipe(s.mapOneOrManyArgs(r)):p}},5432:(e,t,r)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.from=void 0;var n=r(5207),i=r(7103);t.from=function(e,t){return t?n.scheduled(e,t):i.innerFrom(e)}},3267:function(e,t,r){var n=this&&this.__read||function(e,t){var r="function"==typeof Symbol&&e[Symbol.iterator];if(!r)return e;var n,i,o=r.call(e),a=[];try{for(;(void 0===t||t-- >0)&&!(n=o.next()).done;)a.push(n.value)}catch(e){i={error:e}}finally{try{n&&!n.done&&(r=o.return)&&r.call(o)}finally{if(i)throw i.error}}return a};Object.defineProperty(t,"__esModule",{value:!0}),t.fromEvent=void 0;var i=r(7103),o=r(2419),a=r(9475),u=r(3909),s=r(3005),c=r(1914),l=["addListener","removeListener"],h=["addEventListener","removeEventListener"],f=["on","off"];function p(e,t){return function(r){return function(n){return e[r](t,n)}}}t.fromEvent=function e(t,r,d,b){if(s.isFunction(d)&&(b=d,d=void 0),b)return e(t,r,d).pipe(c.mapOneOrManyArgs(b));var v=n(function(e){return s.isFunction(e.addEventListener)&&s.isFunction(e.removeEventListener)}(t)?h.map((function(e){return function(n){return t[e](r,n,d)}})):function(e){return s.isFunction(e.addListener)&&s.isFunction(e.removeListener)}(t)?l.map(p(t,r)):function(e){return s.isFunction(e.on)&&s.isFunction(e.off)}(t)?f.map(p(t,r)):[],2),y=v[0],m=v[1];if(!y&&u.isArrayLike(t))return a.mergeMap((function(t){return e(t,r,d)}))(i.innerFrom(t));if(!y)throw new TypeError("Invalid event target");return new o.Observable((function(e){var t=function(){for(var t=[],r=0;r<arguments.length;r++)t[r]=arguments[r];return e.next(1<t.length?t:t[0])};return y(t),function(){return m(t)}}))}},470:(e,t,r)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.fromEventPattern=void 0;var n=r(2419),i=r(3005),o=r(1914);t.fromEventPattern=function e(t,r,a){return a?e(t,r).pipe(o.mapOneOrManyArgs(a)):new n.Observable((function(e){var n=function(){for(var t=[],r=0;r<arguments.length;r++)t[r]=arguments[r];return e.next(1===t.length?t[0]:t)},o=t(n);return i.isFunction(r)?function(){return r(n,o)}:void 0}))}},851:(e,t,r)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.fromSubscribable=void 0;var n=r(2419);t.fromSubscribable=function(e){return new n.Observable((function(t){return e.subscribe(t)}))}},4303:function(e,t,r){var n=this&&this.__generator||function(e,t){var r,n,i,o,a={label:0,sent:function(){if(1&i[0])throw i[1];return i[1]},trys:[],ops:[]};return o={next:u(0),throw:u(1),return:u(2)},"function"==typeof Symbol&&(o[Symbol.iterator]=function(){return this}),o;function u(o){return function(u){return function(o){if(r)throw new TypeError("Generator is already executing.");for(;a;)try{if(r=1,n&&(i=2&o[0]?n.return:o[0]?n.throw||((i=n.return)&&i.call(n),0):n.next)&&!(i=i.call(n,o[1])).done)return i;switch(n=0,i&&(o=[2&o[0],i.value]),o[0]){case 0:case 1:i=o;break;case 4:return a.label++,{value:o[1],done:!1};case 5:a.label++,n=o[1],o=[0];continue;case 7:o=a.ops.pop(),a.trys.pop();continue;default:if(!((i=(i=a.trys).length>0&&i[i.length-1])||6!==o[0]&&2!==o[0])){a=0;continue}if(3===o[0]&&(!i||o[1]>i[0]&&o[1]<i[3])){a.label=o[1];break}if(6===o[0]&&a.label<i[1]){a.label=i[1],i=o;break}if(i&&a.label<i[2]){a.label=i[2],a.ops.push(o);break}i[2]&&a.ops.pop(),a.trys.pop();continue}o=t.call(e,a)}catch(e){o=[6,e],n=0}finally{r=i=0}if(5&o[0])throw o[1];return{value:o[0]?o[1]:void 0,done:!0}}([o,u])}}};Object.defineProperty(t,"__esModule",{value:!0}),t.generate=void 0;var i=r(4781),o=r(9016),a=r(7885),u=r(1297);t.generate=function(e,t,r,s,c){var l,h,f,p;function d(){var e;return n(this,(function(n){switch(n.label){case 0:e=p,n.label=1;case 1:return t&&!t(e)?[3,4]:[4,f(e)];case 2:n.sent(),n.label=3;case 3:return e=r(e),[3,1];case 4:return[2]}}))}return 1===arguments.length?(p=(l=e).initialState,t=l.condition,r=l.iterate,h=l.resultSelector,f=void 0===h?i.identity:h,c=l.scheduler):(p=e,!s||o.isScheduler(s)?(f=i.identity,c=s):f=s),a.defer(c?function(){return u.scheduleIterable(d(),c)}:d)}},1757:(e,t,r)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.iif=void 0;var n=r(7885);t.iif=function(e,t,r){return n.defer((function(){return e()?t:r}))}},7103:function(e,t,r){var n=this&&this.__awaiter||function(e,t,r,n){return new(r||(r=Promise))((function(i,o){function a(e){try{s(n.next(e))}catch(e){o(e)}}function u(e){try{s(n.throw(e))}catch(e){o(e)}}function s(e){var t;e.done?i(e.value):(t=e.value,t instanceof r?t:new r((function(e){e(t)}))).then(a,u)}s((n=n.apply(e,t||[])).next())}))},i=this&&this.__generator||function(e,t){var r,n,i,o,a={label:0,sent:function(){if(1&i[0])throw i[1];return i[1]},trys:[],ops:[]};return o={next:u(0),throw:u(1),return:u(2)},"function"==typeof Symbol&&(o[Symbol.iterator]=function(){return this}),o;function u(o){return function(u){return function(o){if(r)throw new TypeError("Generator is already executing.");for(;a;)try{if(r=1,n&&(i=2&o[0]?n.return:o[0]?n.throw||((i=n.return)&&i.call(n),0):n.next)&&!(i=i.call(n,o[1])).done)return i;switch(n=0,i&&(o=[2&o[0],i.value]),o[0]){case 0:case 1:i=o;break;case 4:return a.label++,{value:o[1],done:!1};case 5:a.label++,n=o[1],o=[0];continue;case 7:o=a.ops.pop(),a.trys.pop();continue;default:if(!((i=(i=a.trys).length>0&&i[i.length-1])||6!==o[0]&&2!==o[0])){a=0;continue}if(3===o[0]&&(!i||o[1]>i[0]&&o[1]<i[3])){a.label=o[1];break}if(6===o[0]&&a.label<i[1]){a.label=i[1],i=o;break}if(i&&a.label<i[2]){a.label=i[2],a.ops.push(o);break}i[2]&&a.ops.pop(),a.trys.pop();continue}o=t.call(e,a)}catch(e){o=[6,e],n=0}finally{r=i=0}if(5&o[0])throw o[1];return{value:o[0]?o[1]:void 0,done:!0}}([o,u])}}},o=this&&this.__asyncValues||function(e){if(!Symbol.asyncIterator)throw new TypeError("Symbol.asyncIterator is not defined.");var t,r=e[Symbol.asyncIterator];return r?r.call(e):(e="function"==typeof a?a(e):e[Symbol.iterator](),t={},n("next"),n("throw"),n("return"),t[Symbol.asyncIterator]=function(){return this},t);function n(r){t[r]=e[r]&&function(t){return new Promise((function(n,i){!function(e,t,r,n){Promise.resolve(n).then((function(t){e({value:t,done:r})}),t)}(n,i,(t=e[r](t)).done,t.value)}))}}},a=this&&this.__values||function(e){var t="function"==typeof Symbol&&Symbol.iterator,r=t&&e[t],n=0;if(r)return r.call(e);if(e&&"number"==typeof e.length)return{next:function(){return e&&n>=e.length&&(e=void 0),{value:e&&e[n++],done:!e}}};throw new TypeError(t?"Object is not iterable.":"Symbol.iterator is not defined.")};Object.defineProperty(t,"__esModule",{value:!0}),t.fromReadableStreamLike=t.fromAsyncIterable=t.fromIterable=t.fromPromise=t.fromArrayLike=t.fromInteropObservable=t.innerFrom=void 0;var u=r(3909),s=r(6018),c=r(2419),l=r(9500),h=r(9595),f=r(9906),p=r(2743),d=r(7823),b=r(3005),v=r(7968),y=r(2801);function m(e){return new c.Observable((function(t){var r=e[y.observable]();if(b.isFunction(r.subscribe))return r.subscribe(t);throw new TypeError("Provided object does not correctly implement Symbol.observable")}))}function _(e){return new c.Observable((function(t){for(var r=0;r<e.length&&!t.closed;r++)t.next(e[r]);t.complete()}))}function g(e){return new c.Observable((function(t){e.then((function(e){t.closed||(t.next(e),t.complete())}),(function(e){return t.error(e)})).then(null,v.reportUnhandledError)}))}function O(e){return new c.Observable((function(t){var r,n;try{for(var i=a(e),o=i.next();!o.done;o=i.next()){var u=o.value;if(t.next(u),t.closed)return}}catch(e){r={error:e}}finally{try{o&&!o.done&&(n=i.return)&&n.call(i)}finally{if(r)throw r.error}}t.complete()}))}function S(e){return new c.Observable((function(t){(function(e,t){var r,a,u,s;return n(this,void 0,void 0,(function(){var n,c;return i(this,(function(i){switch(i.label){case 0:i.trys.push([0,5,6,11]),r=o(e),i.label=1;case 1:return[4,r.next()];case 2:if((a=i.sent()).done)return[3,4];if(n=a.value,t.next(n),t.closed)return[2];i.label=3;case 3:return[3,1];case 4:return[3,11];case 5:return c=i.sent(),u={error:c},[3,11];case 6:return i.trys.push([6,,9,10]),a&&!a.done&&(s=r.return)?[4,s.call(r)]:[3,8];case 7:i.sent(),i.label=8;case 8:return[3,10];case 9:if(u)throw u.error;return[7];case 10:return[7];case 11:return t.complete(),[2]}}))}))})(e,t).catch((function(e){return t.error(e)}))}))}function w(e){return S(d.readableStreamLikeToAsyncGenerator(e))}t.innerFrom=function(e){if(e instanceof c.Observable)return e;if(null!=e){if(l.isInteropObservable(e))return m(e);if(u.isArrayLike(e))return _(e);if(s.isPromise(e))return g(e);if(h.isAsyncIterable(e))return S(e);if(p.isIterable(e))return O(e);if(d.isReadableStreamLike(e))return w(e)}throw f.createInvalidObservableTypeError(e)},t.fromInteropObservable=m,t.fromArrayLike=_,t.fromPromise=g,t.fromIterable=O,t.fromAsyncIterable=S,t.fromReadableStreamLike=w},8990:(e,t,r)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.interval=void 0;var n=r(2445),i=r(7513);t.interval=function(e,t){return void 0===e&&(e=0),void 0===t&&(t=n.asyncScheduler),e<0&&(e=0),i.timer(e,e,t)}},1846:(e,t,r)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.merge=void 0;var n=r(3783),i=r(7103),o=r(6332),a=r(2433),u=r(5432);t.merge=function(){for(var e=[],t=0;t<arguments.length;t++)e[t]=arguments[t];var r=a.popScheduler(e),s=a.popNumber(e,1/0),c=e;return c.length?1===c.length?i.innerFrom(c[0]):n.mergeAll(s)(u.from(c,r)):o.EMPTY}},1339:(e,t,r)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.never=t.NEVER=void 0;var n=r(2419),i=r(2576);t.NEVER=new n.Observable(i.noop),t.never=function(){return t.NEVER}},5726:(e,t,r)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.of=void 0;var n=r(2433),i=r(5432);t.of=function(){for(var e=[],t=0;t<arguments.length;t++)e[t]=arguments[t];var r=n.popScheduler(e);return i.from(e,r)}},724:(e,t,r)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.onErrorResumeNext=void 0;var n=r(2419),i=r(5498),o=r(4990),a=r(2576),u=r(7103);t.onErrorResumeNext=function(){for(var e=[],t=0;t<arguments.length;t++)e[t]=arguments[t];var r=i.argsOrArgArray(e);return new n.Observable((function(e){var t=0,n=function(){if(t<r.length){var i=void 0;try{i=u.innerFrom(r[t++])}catch(e){return void n()}var s=new o.OperatorSubscriber(e,void 0,a.noop,a.noop);i.subscribe(s),s.add(n)}else e.complete()};n()}))}},4380:(e,t,r)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.pairs=void 0;var n=r(5432);t.pairs=function(e,t){return n.from(Object.entries(e),t)}},7273:(e,t,r)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.partition=void 0;var n=r(8634),i=r(9154),o=r(7103);t.partition=function(e,t,r){return[i.filter(t,r)(o.innerFrom(e)),i.filter(n.not(t,r))(o.innerFrom(e))]}},5182:(e,t,r)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.raceInit=t.race=void 0;var n=r(2419),i=r(7103),o=r(5498),a=r(4990);function u(e){return function(t){for(var r=[],n=function(n){r.push(i.innerFrom(e[n]).subscribe(a.createOperatorSubscriber(t,(function(e){if(r){for(var i=0;i<r.length;i++)i!==n&&r[i].unsubscribe();r=null}t.next(e)}))))},o=0;r&&!t.closed&&o<e.length;o++)n(o)}}t.race=function(){for(var e=[],t=0;t<arguments.length;t++)e[t]=arguments[t];return 1===(e=o.argsOrArgArray(e)).length?i.innerFrom(e[0]):new n.Observable(u(e))},t.raceInit=u},322:(e,t,r)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.range=void 0;var n=r(2419),i=r(6332);t.range=function(e,t,r){if(null==t&&(t=e,e=0),t<=0)return i.EMPTY;var o=t+e;return new n.Observable(r?function(t){var n=e;return r.schedule((function(){n<o?(t.next(n++),this.schedule()):t.complete()}))}:function(t){for(var r=e;r<o&&!t.closed;)t.next(r++);t.complete()})}},2098:(e,t,r)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.throwError=void 0;var n=r(2419),i=r(3005);t.throwError=function(e,t){var r=i.isFunction(e)?e:function(){return e},o=function(e){return e.error(r())};return new n.Observable(t?function(e){return t.schedule(o,0,e)}:o)}},7513:(e,t,r)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.timer=void 0;var n=r(2419),i=r(2445),o=r(9016),a=r(1677);t.timer=function(e,t,r){void 0===e&&(e=0),void 0===r&&(r=i.async);var u=-1;return null!=t&&(o.isScheduler(t)?r=t:u=t),new n.Observable((function(t){var n=a.isValidDate(e)?+e-r.now():e;n<0&&(n=0);var i=0;return r.schedule((function(){t.closed||(t.next(i++),0<=u?this.schedule(void 0,u):t.complete())}),n)}))}},2962:(e,t,r)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.using=void 0;var n=r(2419),i=r(7103),o=r(6332);t.using=function(e,t){return new n.Observable((function(r){var n=e(),a=t(n);return(a?i.innerFrom(a):o.EMPTY).subscribe(r),function(){n&&n.unsubscribe()}}))}},7654:function(e,t,r){var n=this&&this.__read||function(e,t){var r="function"==typeof Symbol&&e[Symbol.iterator];if(!r)return e;var n,i,o=r.call(e),a=[];try{for(;(void 0===t||t-- >0)&&!(n=o.next()).done;)a.push(n.value)}catch(e){i={error:e}}finally{try{n&&!n.done&&(r=o.return)&&r.call(o)}finally{if(i)throw i.error}}return a},i=this&&this.__spreadArray||function(e,t){for(var r=0,n=t.length,i=e.length;r<n;r++,i++)e[i]=t[r];return e};Object.defineProperty(t,"__esModule",{value:!0}),t.zip=void 0;var o=r(2419),a=r(7103),u=r(5498),s=r(6332),c=r(4990),l=r(2433);t.zip=function(){for(var e=[],t=0;t<arguments.length;t++)e[t]=arguments[t];var r=l.popResultSelector(e),h=u.argsOrArgArray(e);return h.length?new o.Observable((function(e){var t=h.map((function(){return[]})),o=h.map((function(){return!1}));e.add((function(){t=o=null}));for(var u=function(u){a.innerFrom(h[u]).subscribe(c.createOperatorSubscriber(e,(function(a){if(t[u].push(a),t.every((function(e){return e.length}))){var s=t.map((function(e){return e.shift()}));e.next(r?r.apply(void 0,i([],n(s))):s),t.some((function(e,t){return!e.length&&o[t]}))&&e.complete()}}),(function(){o[u]=!0,!t[u].length&&e.complete()})))},s=0;!e.closed&&s<h.length;s++)u(s);return function(){t=o=null}})):s.EMPTY}},4990:function(e,t,r){var n,i=this&&this.__extends||(n=function(e,t){return n=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,t){e.__proto__=t}||function(e,t){for(var r in t)Object.prototype.hasOwnProperty.call(t,r)&&(e[r]=t[r])},n(e,t)},function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Class extends value "+String(t)+" is not a constructor or null");function r(){this.constructor=e}n(e,t),e.prototype=null===t?Object.create(t):(r.prototype=t.prototype,new r)});Object.defineProperty(t,"__esModule",{value:!0}),t.OperatorSubscriber=t.createOperatorSubscriber=void 0;var o=r(5125);t.createOperatorSubscriber=function(e,t,r,n,i){return new a(e,t,r,n,i)};var a=function(e){function t(t,r,n,i,o,a){var u=e.call(this,t)||this;return u.onFinalize=o,u.shouldUnsubscribe=a,u._next=r?function(e){try{r(e)}catch(e){t.error(e)}}:e.prototype._next,u._error=i?function(e){try{i(e)}catch(e){t.error(e)}finally{this.unsubscribe()}}:e.prototype._error,u._complete=n?function(){try{n()}catch(e){t.error(e)}finally{this.unsubscribe()}}:e.prototype._complete,u}return i(t,e),t.prototype.unsubscribe=function(){var t;if(!this.shouldUnsubscribe||this.shouldUnsubscribe()){var r=this.closed;e.prototype.unsubscribe.call(this),!r&&(null===(t=this.onFinalize)||void 0===t||t.call(this))}},t}(o.Subscriber);t.OperatorSubscriber=a},6474:(e,t,r)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.audit=void 0;var n=r(4935),i=r(7103),o=r(4990);t.audit=function(e){return n.operate((function(t,r){var n=!1,a=null,u=null,s=!1,c=function(){if(null==u||u.unsubscribe(),u=null,n){n=!1;var e=a;a=null,r.next(e)}s&&r.complete()},l=function(){u=null,s&&r.complete()};t.subscribe(o.createOperatorSubscriber(r,(function(t){n=!0,a=t,u||i.innerFrom(e(t)).subscribe(u=o.createOperatorSubscriber(r,c,l))}),(function(){s=!0,(!n||!u||u.closed)&&r.complete()})))}))}},5382:(e,t,r)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.auditTime=void 0;var n=r(2445),i=r(6474),o=r(7513);t.auditTime=function(e,t){return void 0===t&&(t=n.asyncScheduler),i.audit((function(){return o.timer(e,t)}))}},9715:(e,t,r)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.buffer=void 0;var n=r(4935),i=r(2576),o=r(4990),a=r(7103);t.buffer=function(e){return n.operate((function(t,r){var n=[];return t.subscribe(o.createOperatorSubscriber(r,(function(e){return n.push(e)}),(function(){r.next(n),r.complete()}))),a.innerFrom(e).subscribe(o.createOperatorSubscriber(r,(function(){var e=n;n=[],r.next(e)}),i.noop)),function(){n=null}}))}},3814:function(e,t,r){var n=this&&this.__values||function(e){var t="function"==typeof Symbol&&Symbol.iterator,r=t&&e[t],n=0;if(r)return r.call(e);if(e&&"number"==typeof e.length)return{next:function(){return e&&n>=e.length&&(e=void 0),{value:e&&e[n++],done:!e}}};throw new TypeError(t?"Object is not iterable.":"Symbol.iterator is not defined.")};Object.defineProperty(t,"__esModule",{value:!0}),t.bufferCount=void 0;var i=r(4935),o=r(4990),a=r(6967);t.bufferCount=function(e,t){return void 0===t&&(t=null),t=null!=t?t:e,i.operate((function(r,i){var u=[],s=0;r.subscribe(o.createOperatorSubscriber(i,(function(r){var o,c,l,h,f=null;s++%t==0&&u.push([]);try{for(var p=n(u),d=p.next();!d.done;d=p.next())(y=d.value).push(r),e<=y.length&&(f=null!=f?f:[]).push(y)}catch(e){o={error:e}}finally{try{d&&!d.done&&(c=p.return)&&c.call(p)}finally{if(o)throw o.error}}if(f)try{for(var b=n(f),v=b.next();!v.done;v=b.next()){var y=v.value;a.arrRemove(u,y),i.next(y)}}catch(e){l={error:e}}finally{try{v&&!v.done&&(h=b.return)&&h.call(b)}finally{if(l)throw l.error}}}),(function(){var e,t;try{for(var r=n(u),o=r.next();!o.done;o=r.next()){var a=o.value;i.next(a)}}catch(t){e={error:t}}finally{try{o&&!o.done&&(t=r.return)&&t.call(r)}finally{if(e)throw e.error}}i.complete()}),void 0,(function(){u=null})))}))}},7211:function(e,t,r){var n=this&&this.__values||function(e){var t="function"==typeof Symbol&&Symbol.iterator,r=t&&e[t],n=0;if(r)return r.call(e);if(e&&"number"==typeof e.length)return{next:function(){return e&&n>=e.length&&(e=void 0),{value:e&&e[n++],done:!e}}};throw new TypeError(t?"Object is not iterable.":"Symbol.iterator is not defined.")};Object.defineProperty(t,"__esModule",{value:!0}),t.bufferTime=void 0;var i=r(3865),o=r(4935),a=r(4990),u=r(6967),s=r(2445),c=r(2433),l=r(7738);t.bufferTime=function(e){for(var t,r,h=[],f=1;f<arguments.length;f++)h[f-1]=arguments[f];var p=null!==(t=c.popScheduler(h))&&void 0!==t?t:s.asyncScheduler,d=null!==(r=h[0])&&void 0!==r?r:null,b=h[1]||1/0;return o.operate((function(t,r){var o=[],s=!1,c=function(e){var t=e.buffer;e.subs.unsubscribe(),u.arrRemove(o,e),r.next(t),s&&h()},h=function(){if(o){var t=new i.Subscription;r.add(t);var n={buffer:[],subs:t};o.push(n),l.executeSchedule(t,p,(function(){return c(n)}),e)}};null!==d&&d>=0?l.executeSchedule(r,p,h,d,!0):s=!0,h();var f=a.createOperatorSubscriber(r,(function(e){var t,r,i=o.slice();try{for(var a=n(i),u=a.next();!u.done;u=a.next()){var s=u.value,l=s.buffer;l.push(e),b<=l.length&&c(s)}}catch(e){t={error:e}}finally{try{u&&!u.done&&(r=a.return)&&r.call(a)}finally{if(t)throw t.error}}}),(function(){for(;null==o?void 0:o.length;)r.next(o.shift().buffer);null==f||f.unsubscribe(),r.complete(),r.unsubscribe()}),void 0,(function(){return o=null}));t.subscribe(f)}))}},4943:function(e,t,r){var n=this&&this.__values||function(e){var t="function"==typeof Symbol&&Symbol.iterator,r=t&&e[t],n=0;if(r)return r.call(e);if(e&&"number"==typeof e.length)return{next:function(){return e&&n>=e.length&&(e=void 0),{value:e&&e[n++],done:!e}}};throw new TypeError(t?"Object is not iterable.":"Symbol.iterator is not defined.")};Object.defineProperty(t,"__esModule",{value:!0}),t.bufferToggle=void 0;var i=r(3865),o=r(4935),a=r(7103),u=r(4990),s=r(2576),c=r(6967);t.bufferToggle=function(e,t){return o.operate((function(r,o){var l=[];a.innerFrom(e).subscribe(u.createOperatorSubscriber(o,(function(e){var r=[];l.push(r);var n=new i.Subscription;n.add(a.innerFrom(t(e)).subscribe(u.createOperatorSubscriber(o,(function(){c.arrRemove(l,r),o.next(r),n.unsubscribe()}),s.noop)))}),s.noop)),r.subscribe(u.createOperatorSubscriber(o,(function(e){var t,r;try{for(var i=n(l),o=i.next();!o.done;o=i.next())o.value.push(e)}catch(e){t={error:e}}finally{try{o&&!o.done&&(r=i.return)&&r.call(i)}finally{if(t)throw t.error}}}),(function(){for(;l.length>0;)o.next(l.shift());o.complete()})))}))}},1240:(e,t,r)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.bufferWhen=void 0;var n=r(4935),i=r(2576),o=r(4990),a=r(7103);t.bufferWhen=function(e){return n.operate((function(t,r){var n=null,u=null,s=function(){null==u||u.unsubscribe();var t=n;n=[],t&&r.next(t),a.innerFrom(e()).subscribe(u=o.createOperatorSubscriber(r,s,i.noop))};s(),t.subscribe(o.createOperatorSubscriber(r,(function(e){return null==n?void 0:n.push(e)}),(function(){n&&r.next(n),r.complete()}),void 0,(function(){return n=u=null})))}))}},9548:(e,t,r)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.catchError=void 0;var n=r(7103),i=r(4990),o=r(4935);t.catchError=function e(t){return o.operate((function(r,o){var a,u=null,s=!1;u=r.subscribe(i.createOperatorSubscriber(o,void 0,void 0,(function(i){a=n.innerFrom(t(i,e(t)(r))),u?(u.unsubscribe(),u=null,a.subscribe(o)):s=!0}))),s&&(u.unsubscribe(),u=null,a.subscribe(o))}))}},2128:(e,t,r)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.combineAll=void 0;var n=r(3240);t.combineAll=n.combineLatestAll},6318:function(e,t,r){var n=this&&this.__read||function(e,t){var r="function"==typeof Symbol&&e[Symbol.iterator];if(!r)return e;var n,i,o=r.call(e),a=[];try{for(;(void 0===t||t-- >0)&&!(n=o.next()).done;)a.push(n.value)}catch(e){i={error:e}}finally{try{n&&!n.done&&(r=o.return)&&r.call(o)}finally{if(i)throw i.error}}return a},i=this&&this.__spreadArray||function(e,t){for(var r=0,n=t.length,i=e.length;r<n;r++,i++)e[i]=t[r];return e};Object.defineProperty(t,"__esModule",{value:!0}),t.combineLatest=void 0;var o=r(9258),a=r(4935),u=r(5498),s=r(1914),c=r(9985),l=r(2433);t.combineLatest=function e(){for(var t=[],r=0;r<arguments.length;r++)t[r]=arguments[r];var h=l.popResultSelector(t);return h?c.pipe(e.apply(void 0,i([],n(t))),s.mapOneOrManyArgs(h)):a.operate((function(e,r){o.combineLatestInit(i([e],n(u.argsOrArgArray(t))))(r)}))}},3240:(e,t,r)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.combineLatestAll=void 0;var n=r(9258),i=r(2069);t.combineLatestAll=function(e){return i.joinAllInternals(n.combineLatest,e)}},5024:function(e,t,r){var n=this&&this.__read||function(e,t){var r="function"==typeof Symbol&&e[Symbol.iterator];if(!r)return e;var n,i,o=r.call(e),a=[];try{for(;(void 0===t||t-- >0)&&!(n=o.next()).done;)a.push(n.value)}catch(e){i={error:e}}finally{try{n&&!n.done&&(r=o.return)&&r.call(o)}finally{if(i)throw i.error}}return a},i=this&&this.__spreadArray||function(e,t){for(var r=0,n=t.length,i=e.length;r<n;r++,i++)e[i]=t[r];return e};Object.defineProperty(t,"__esModule",{value:!0}),t.combineLatestWith=void 0;var o=r(6318);t.combineLatestWith=function(){for(var e=[],t=0;t<arguments.length;t++)e[t]=arguments[t];return o.combineLatest.apply(void 0,i([],n(e)))}},4919:function(e,t,r){var n=this&&this.__read||function(e,t){var r="function"==typeof Symbol&&e[Symbol.iterator];if(!r)return e;var n,i,o=r.call(e),a=[];try{for(;(void 0===t||t-- >0)&&!(n=o.next()).done;)a.push(n.value)}catch(e){i={error:e}}finally{try{n&&!n.done&&(r=o.return)&&r.call(o)}finally{if(i)throw i.error}}return a},i=this&&this.__spreadArray||function(e,t){for(var r=0,n=t.length,i=e.length;r<n;r++,i++)e[i]=t[r];return e};Object.defineProperty(t,"__esModule",{value:!0}),t.concat=void 0;var o=r(4935),a=r(4413),u=r(2433),s=r(5432);t.concat=function(){for(var e=[],t=0;t<arguments.length;t++)e[t]=arguments[t];var r=u.popScheduler(e);return o.operate((function(t,o){a.concatAll()(s.from(i([t],n(e)),r)).subscribe(o)}))}},4413:(e,t,r)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.concatAll=void 0;var n=r(3783);t.concatAll=function(){return n.mergeAll(1)}},7498:(e,t,r)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.concatMap=void 0;var n=r(9475),i=r(3005);t.concatMap=function(e,t){return i.isFunction(t)?n.mergeMap(e,t,1):n.mergeMap(e,1)}},6109:(e,t,r)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.concatMapTo=void 0;var n=r(7498),i=r(3005);t.concatMapTo=function(e,t){return i.isFunction(t)?n.concatMap((function(){return e}),t):n.concatMap((function(){return e}))}},9664:function(e,t,r){var n=this&&this.__read||function(e,t){var r="function"==typeof Symbol&&e[Symbol.iterator];if(!r)return e;var n,i,o=r.call(e),a=[];try{for(;(void 0===t||t-- >0)&&!(n=o.next()).done;)a.push(n.value)}catch(e){i={error:e}}finally{try{n&&!n.done&&(r=o.return)&&r.call(o)}finally{if(i)throw i.error}}return a},i=this&&this.__spreadArray||function(e,t){for(var r=0,n=t.length,i=e.length;r<n;r++,i++)e[i]=t[r];return e};Object.defineProperty(t,"__esModule",{value:!0}),t.concatWith=void 0;var o=r(4919);t.concatWith=function(){for(var e=[],t=0;t<arguments.length;t++)e[t]=arguments[t];return o.concat.apply(void 0,i([],n(e)))}},1995:(e,t,r)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.connect=void 0;var n=r(3032),i=r(7103),o=r(4935),a=r(851),u={connector:function(){return new n.Subject}};t.connect=function(e,t){void 0===t&&(t=u);var r=t.connector;return o.operate((function(t,n){var o=r();i.innerFrom(e(a.fromSubscribable(o))).subscribe(n),n.add(t.subscribe(o))}))}},993:(e,t,r)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.count=void 0;var n=r(122);t.count=function(e){return n.reduce((function(t,r,n){return!e||e(r,n)?t+1:t}),0)}},496:(e,t,r)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.debounce=void 0;var n=r(4935),i=r(2576),o=r(4990),a=r(7103);t.debounce=function(e){return n.operate((function(t,r){var n=!1,u=null,s=null,c=function(){if(null==s||s.unsubscribe(),s=null,n){n=!1;var e=u;u=null,r.next(e)}};t.subscribe(o.createOperatorSubscriber(r,(function(t){null==s||s.unsubscribe(),n=!0,u=t,s=o.createOperatorSubscriber(r,c,i.noop),a.innerFrom(e(t)).subscribe(s)}),(function(){c(),r.complete()}),void 0,(function(){u=s=null})))}))}},1385:(e,t,r)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.debounceTime=void 0;var n=r(2445),i=r(4935),o=r(4990);t.debounceTime=function(e,t){return void 0===t&&(t=n.asyncScheduler),i.operate((function(r,n){var i=null,a=null,u=null,s=function(){if(i){i.unsubscribe(),i=null;var e=a;a=null,n.next(e)}};function c(){var r=u+e,o=t.now();if(o<r)return i=this.schedule(void 0,r-o),void n.add(i);s()}r.subscribe(o.createOperatorSubscriber(n,(function(r){a=r,u=t.now(),i||(i=t.schedule(c,e),n.add(i))}),(function(){s(),n.complete()}),void 0,(function(){a=i=null})))}))}},1658:(e,t,r)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.defaultIfEmpty=void 0;var n=r(4935),i=r(4990);t.defaultIfEmpty=function(e){return n.operate((function(t,r){var n=!1;t.subscribe(i.createOperatorSubscriber(r,(function(e){n=!0,r.next(e)}),(function(){n||r.next(e),r.complete()})))}))}},5841:(e,t,r)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.delay=void 0;var n=r(2445),i=r(8798),o=r(7513);t.delay=function(e,t){void 0===t&&(t=n.asyncScheduler);var r=o.timer(e,t);return i.delayWhen((function(){return r}))}},8798:(e,t,r)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.delayWhen=void 0;var n=r(2239),i=r(4783),o=r(9438),a=r(8313),u=r(9475),s=r(7103);t.delayWhen=function e(t,r){return r?function(a){return n.concat(r.pipe(i.take(1),o.ignoreElements()),a.pipe(e(t)))}:u.mergeMap((function(e,r){return s.innerFrom(t(e,r)).pipe(i.take(1),a.mapTo(e))}))}},1080:(e,t,r)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.dematerialize=void 0;var n=r(3104),i=r(4935),o=r(4990);t.dematerialize=function(){return i.operate((function(e,t){e.subscribe(o.createOperatorSubscriber(t,(function(e){return n.observeNotification(e,t)})))}))}},3054:(e,t,r)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.distinct=void 0;var n=r(4935),i=r(4990),o=r(2576),a=r(7103);t.distinct=function(e,t){return n.operate((function(r,n){var u=new Set;r.subscribe(i.createOperatorSubscriber(n,(function(t){var r=e?e(t):t;u.has(r)||(u.add(r),n.next(t))}))),t&&a.innerFrom(t).subscribe(i.createOperatorSubscriber(n,(function(){return u.clear()}),o.noop))}))}},8737:(e,t,r)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.distinctUntilChanged=void 0;var n=r(4781),i=r(4935),o=r(4990);function a(e,t){return e===t}t.distinctUntilChanged=function(e,t){return void 0===t&&(t=n.identity),e=null!=e?e:a,i.operate((function(r,n){var i,a=!0;r.subscribe(o.createOperatorSubscriber(n,(function(r){var o=t(r);!a&&e(i,o)||(a=!1,i=o,n.next(r))})))}))}},7957:(e,t,r)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.distinctUntilKeyChanged=void 0;var n=r(8737);t.distinctUntilKeyChanged=function(e,t){return n.distinctUntilChanged((function(r,n){return t?t(r[e],n[e]):r[e]===n[e]}))}},8633:(e,t,r)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.elementAt=void 0;var n=r(2351),i=r(9154),o=r(1779),a=r(1658),u=r(4783);t.elementAt=function(e,t){if(e<0)throw new n.ArgumentOutOfRangeError;var r=arguments.length>=2;return function(s){return s.pipe(i.filter((function(t,r){return r===e})),u.take(1),r?a.defaultIfEmpty(t):o.throwIfEmpty((function(){return new n.ArgumentOutOfRangeError})))}}},911:function(e,t,r){var n=this&&this.__read||function(e,t){var r="function"==typeof Symbol&&e[Symbol.iterator];if(!r)return e;var n,i,o=r.call(e),a=[];try{for(;(void 0===t||t-- >0)&&!(n=o.next()).done;)a.push(n.value)}catch(e){i={error:e}}finally{try{n&&!n.done&&(r=o.return)&&r.call(o)}finally{if(i)throw i.error}}return a},i=this&&this.__spreadArray||function(e,t){for(var r=0,n=t.length,i=e.length;r<n;r++,i++)e[i]=t[r];return e};Object.defineProperty(t,"__esModule",{value:!0}),t.endWith=void 0;var o=r(2239),a=r(5726);t.endWith=function(){for(var e=[],t=0;t<arguments.length;t++)e[t]=arguments[t];return function(t){return o.concat(t,a.of.apply(void 0,i([],n(e))))}}},2096:(e,t,r)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.every=void 0;var n=r(4935),i=r(4990);t.every=function(e,t){return n.operate((function(r,n){var o=0;r.subscribe(i.createOperatorSubscriber(n,(function(i){e.call(t,i,o++,r)||(n.next(!1),n.complete())}),(function(){n.next(!0),n.complete()})))}))}},67:(e,t,r)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.exhaust=void 0;var n=r(5337);t.exhaust=n.exhaustAll},5337:(e,t,r)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.exhaustAll=void 0;var n=r(5635),i=r(4781);t.exhaustAll=function(){return n.exhaustMap(i.identity)}},5635:(e,t,r)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.exhaustMap=void 0;var n=r(7291),i=r(7103),o=r(4935),a=r(4990);t.exhaustMap=function e(t,r){return r?function(o){return o.pipe(e((function(e,o){return i.innerFrom(t(e,o)).pipe(n.map((function(t,n){return r(e,t,o,n)})))})))}:o.operate((function(e,r){var n=0,o=null,u=!1;e.subscribe(a.createOperatorSubscriber(r,(function(e){o||(o=a.createOperatorSubscriber(r,void 0,(function(){o=null,u&&r.complete()})),i.innerFrom(t(e,n++)).subscribe(o))}),(function(){u=!0,!o&&r.complete()})))}))}},9745:(e,t,r)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.expand=void 0;var n=r(4935),i=r(7788);t.expand=function(e,t,r){return void 0===t&&(t=1/0),t=(t||0)<1?1/0:t,n.operate((function(n,o){return i.mergeInternals(n,o,e,t,void 0,!0,r)}))}},9154:(e,t,r)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.filter=void 0;var n=r(4935),i=r(4990);t.filter=function(e,t){return n.operate((function(r,n){var o=0;r.subscribe(i.createOperatorSubscriber(n,(function(r){return e.call(t,r,o++)&&n.next(r)})))}))}},9283:(e,t,r)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.finalize=void 0;var n=r(4935);t.finalize=function(e){return n.operate((function(t,r){try{t.subscribe(r)}finally{r.add(e)}}))}},7119:(e,t,r)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.createFind=t.find=void 0;var n=r(4935),i=r(4990);function o(e,t,r){var n="index"===r;return function(r,o){var a=0;r.subscribe(i.createOperatorSubscriber(o,(function(i){var u=a++;e.call(t,i,u,r)&&(o.next(n?u:i),o.complete())}),(function(){o.next(n?-1:void 0),o.complete()})))}}t.find=function(e,t){return n.operate(o(e,t,"value"))},t.createFind=o},4706:(e,t,r)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.findIndex=void 0;var n=r(4935),i=r(7119);t.findIndex=function(e,t){return n.operate(i.createFind(e,t,"index"))}},9219:(e,t,r)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.first=void 0;var n=r(9474),i=r(9154),o=r(4783),a=r(1658),u=r(1779),s=r(4781);t.first=function(e,t){var r=arguments.length>=2;return function(c){return c.pipe(e?i.filter((function(t,r){return e(t,r,c)})):s.identity,o.take(1),r?a.defaultIfEmpty(t):u.throwIfEmpty((function(){return new n.EmptyError})))}}},1788:(e,t,r)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.flatMap=void 0;var n=r(9475);t.flatMap=n.mergeMap},9749:(e,t,r)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.groupBy=void 0;var n=r(2419),i=r(7103),o=r(3032),a=r(4935),u=r(4990);t.groupBy=function(e,t,r,s){return a.operate((function(a,c){var l;t&&"function"!=typeof t?(r=t.duration,l=t.element,s=t.connector):l=t;var h=new Map,f=function(e){h.forEach(e),e(c)},p=function(e){return f((function(t){return t.error(e)}))},d=0,b=!1,v=new u.OperatorSubscriber(c,(function(t){try{var a=e(t),f=h.get(a);if(!f){h.set(a,f=s?s():new o.Subject);var y=(_=a,g=f,(O=new n.Observable((function(e){d++;var t=g.subscribe(e);return function(){t.unsubscribe(),0==--d&&b&&v.unsubscribe()}}))).key=_,O);if(c.next(y),r){var m=u.createOperatorSubscriber(f,(function(){f.complete(),null==m||m.unsubscribe()}),void 0,void 0,(function(){return h.delete(a)}));v.add(i.innerFrom(r(y)).subscribe(m))}}f.next(l?l(t):t)}catch(e){p(e)}var _,g,O}),(function(){return f((function(e){return e.complete()}))}),p,(function(){return h.clear()}),(function(){return b=!0,0===d}));a.subscribe(v)}))}},9438:(e,t,r)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.ignoreElements=void 0;var n=r(4935),i=r(4990),o=r(2576);t.ignoreElements=function(){return n.operate((function(e,t){e.subscribe(i.createOperatorSubscriber(t,o.noop))}))}},8515:(e,t,r)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.isEmpty=void 0;var n=r(4935),i=r(4990);t.isEmpty=function(){return n.operate((function(e,t){e.subscribe(i.createOperatorSubscriber(t,(function(){t.next(!1),t.complete()}),(function(){t.next(!0),t.complete()})))}))}},2069:(e,t,r)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.joinAllInternals=void 0;var n=r(4781),i=r(1914),o=r(9985),a=r(9475),u=r(2);t.joinAllInternals=function(e,t){return o.pipe(u.toArray(),a.mergeMap((function(t){return e(t)})),t?i.mapOneOrManyArgs(t):n.identity)}},2435:(e,t,r)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.last=void 0;var n=r(9474),i=r(9154),o=r(1980),a=r(1779),u=r(1658),s=r(4781);t.last=function(e,t){var r=arguments.length>=2;return function(c){return c.pipe(e?i.filter((function(t,r){return e(t,r,c)})):s.identity,o.takeLast(1),r?u.defaultIfEmpty(t):a.throwIfEmpty((function(){return new n.EmptyError})))}}},7291:(e,t,r)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.map=void 0;var n=r(4935),i=r(4990);t.map=function(e,t){return n.operate((function(r,n){var o=0;r.subscribe(i.createOperatorSubscriber(n,(function(r){n.next(e.call(t,r,o++))})))}))}},8313:(e,t,r)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.mapTo=void 0;var n=r(7291);t.mapTo=function(e){return n.map((function(){return e}))}},3209:(e,t,r)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.materialize=void 0;var n=r(3104),i=r(4935),o=r(4990);t.materialize=function(){return i.operate((function(e,t){e.subscribe(o.createOperatorSubscriber(t,(function(e){t.next(n.Notification.createNext(e))}),(function(){t.next(n.Notification.createComplete()),t.complete()}),(function(e){t.next(n.Notification.createError(e)),t.complete()})))}))}},2620:(e,t,r)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.max=void 0;var n=r(122),i=r(3005);t.max=function(e){return n.reduce(i.isFunction(e)?function(t,r){return e(t,r)>0?t:r}:function(e,t){return e>t?e:t})}},9821:function(e,t,r){var n=this&&this.__read||function(e,t){var r="function"==typeof Symbol&&e[Symbol.iterator];if(!r)return e;var n,i,o=r.call(e),a=[];try{for(;(void 0===t||t-- >0)&&!(n=o.next()).done;)a.push(n.value)}catch(e){i={error:e}}finally{try{n&&!n.done&&(r=o.return)&&r.call(o)}finally{if(i)throw i.error}}return a},i=this&&this.__spreadArray||function(e,t){for(var r=0,n=t.length,i=e.length;r<n;r++,i++)e[i]=t[r];return e};Object.defineProperty(t,"__esModule",{value:!0}),t.merge=void 0;var o=r(4935),a=r(5498),u=r(3783),s=r(2433),c=r(5432);t.merge=function(){for(var e=[],t=0;t<arguments.length;t++)e[t]=arguments[t];var r=s.popScheduler(e),l=s.popNumber(e,1/0);return e=a.argsOrArgArray(e),o.operate((function(t,o){u.mergeAll(l)(c.from(i([t],n(e)),r)).subscribe(o)}))}},3783:(e,t,r)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.mergeAll=void 0;var n=r(9475),i=r(4781);t.mergeAll=function(e){return void 0===e&&(e=1/0),n.mergeMap(i.identity,e)}},7788:(e,t,r)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.mergeInternals=void 0;var n=r(7103),i=r(7738),o=r(4990);t.mergeInternals=function(e,t,r,a,u,s,c,l){var h=[],f=0,p=0,d=!1,b=function(){!d||h.length||f||t.complete()},v=function(e){return f<a?y(e):h.push(e)},y=function(e){s&&t.next(e),f++;var l=!1;n.innerFrom(r(e,p++)).subscribe(o.createOperatorSubscriber(t,(function(e){null==u||u(e),s?v(e):t.next(e)}),(function(){l=!0}),void 0,(function(){if(l)try{f--;for(var e=function(){var e=h.shift();c?i.executeSchedule(t,c,(function(){return y(e)})):y(e)};h.length&&f<a;)e();b()}catch(e){t.error(e)}})))};return e.subscribe(o.createOperatorSubscriber(t,v,(function(){d=!0,b()}))),function(){null==l||l()}}},9475:(e,t,r)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.mergeMap=void 0;var n=r(7291),i=r(7103),o=r(4935),a=r(7788),u=r(3005);t.mergeMap=function e(t,r,s){return void 0===s&&(s=1/0),u.isFunction(r)?e((function(e,o){return n.map((function(t,n){return r(e,t,o,n)}))(i.innerFrom(t(e,o)))}),s):("number"==typeof r&&(s=r),o.operate((function(e,r){return a.mergeInternals(e,r,t,s)})))}},1211:(e,t,r)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.mergeMapTo=void 0;var n=r(9475),i=r(3005);t.mergeMapTo=function(e,t,r){return void 0===r&&(r=1/0),i.isFunction(t)?n.mergeMap((function(){return e}),t,r):("number"==typeof t&&(r=t),n.mergeMap((function(){return e}),r))}},7267:(e,t,r)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.mergeScan=void 0;var n=r(4935),i=r(7788);t.mergeScan=function(e,t,r){return void 0===r&&(r=1/0),n.operate((function(n,o){var a=t;return i.mergeInternals(n,o,(function(t,r){return e(a,t,r)}),r,(function(e){a=e}),!1,void 0,(function(){return a=null}))}))}},9303:function(e,t,r){var n=this&&this.__read||function(e,t){var r="function"==typeof Symbol&&e[Symbol.iterator];if(!r)return e;var n,i,o=r.call(e),a=[];try{for(;(void 0===t||t-- >0)&&!(n=o.next()).done;)a.push(n.value)}catch(e){i={error:e}}finally{try{n&&!n.done&&(r=o.return)&&r.call(o)}finally{if(i)throw i.error}}return a},i=this&&this.__spreadArray||function(e,t){for(var r=0,n=t.length,i=e.length;r<n;r++,i++)e[i]=t[r];return e};Object.defineProperty(t,"__esModule",{value:!0}),t.mergeWith=void 0;var o=r(9821);t.mergeWith=function(){for(var e=[],t=0;t<arguments.length;t++)e[t]=arguments[t];return o.merge.apply(void 0,i([],n(e)))}},9714:(e,t,r)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.min=void 0;var n=r(122),i=r(3005);t.min=function(e){return n.reduce(i.isFunction(e)?function(t,r){return e(t,r)<0?t:r}:function(e,t){return e<t?e:t})}},3848:(e,t,r)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.multicast=void 0;var n=r(9518),i=r(3005),o=r(1995);t.multicast=function(e,t){var r=i.isFunction(e)?e:function(){return e};return i.isFunction(t)?o.connect(t,{connector:r}):function(e){return new n.ConnectableObservable(e,r)}}},1184:(e,t,r)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.observeOn=void 0;var n=r(7738),i=r(4935),o=r(4990);t.observeOn=function(e,t){return void 0===t&&(t=0),i.operate((function(r,i){r.subscribe(o.createOperatorSubscriber(i,(function(r){return n.executeSchedule(i,e,(function(){return i.next(r)}),t)}),(function(){return n.executeSchedule(i,e,(function(){return i.complete()}),t)}),(function(r){return n.executeSchedule(i,e,(function(){return i.error(r)}),t)})))}))}},7582:function(e,t,r){var n=this&&this.__read||function(e,t){var r="function"==typeof Symbol&&e[Symbol.iterator];if(!r)return e;var n,i,o=r.call(e),a=[];try{for(;(void 0===t||t-- >0)&&!(n=o.next()).done;)a.push(n.value)}catch(e){i={error:e}}finally{try{n&&!n.done&&(r=o.return)&&r.call(o)}finally{if(i)throw i.error}}return a},i=this&&this.__spreadArray||function(e,t){for(var r=0,n=t.length,i=e.length;r<n;r++,i++)e[i]=t[r];return e};Object.defineProperty(t,"__esModule",{value:!0}),t.onErrorResumeNext=t.onErrorResumeNextWith=void 0;var o=r(5498),a=r(724);function u(){for(var e=[],t=0;t<arguments.length;t++)e[t]=arguments[t];var r=o.argsOrArgArray(e);return function(e){return a.onErrorResumeNext.apply(void 0,i([e],n(r)))}}t.onErrorResumeNextWith=u,t.onErrorResumeNext=u},2731:(e,t,r)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.pairwise=void 0;var n=r(4935),i=r(4990);t.pairwise=function(){return n.operate((function(e,t){var r,n=!1;e.subscribe(i.createOperatorSubscriber(t,(function(e){var i=r;r=e,n&&t.next([i,e]),n=!0})))}))}},4691:(e,t,r)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.pluck=void 0;var n=r(7291);t.pluck=function(){for(var e=[],t=0;t<arguments.length;t++)e[t]=arguments[t];var r=e.length;if(0===r)throw new Error("list of properties cannot be empty.");return n.map((function(t){for(var n=t,i=0;i<r;i++){var o=null==n?void 0:n[e[i]];if(void 0===o)return;n=o}return n}))}},4474:(e,t,r)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.publish=void 0;var n=r(3032),i=r(3848),o=r(1995);t.publish=function(e){return e?function(t){return o.connect(e)(t)}:function(e){return i.multicast(new n.Subject)(e)}}},52:(e,t,r)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.publishBehavior=void 0;var n=r(5240),i=r(9518);t.publishBehavior=function(e){return function(t){var r=new n.BehaviorSubject(e);return new i.ConnectableObservable(t,(function(){return r}))}}},2110:(e,t,r)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.publishLast=void 0;var n=r(280),i=r(9518);t.publishLast=function(){return function(e){var t=new n.AsyncSubject;return new i.ConnectableObservable(e,(function(){return t}))}}},9864:(e,t,r)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.publishReplay=void 0;var n=r(3274),i=r(3848),o=r(3005);t.publishReplay=function(e,t,r,a){r&&!o.isFunction(r)&&(a=r);var u=o.isFunction(r)?r:void 0;return function(r){return i.multicast(new n.ReplaySubject(e,t,a),u)(r)}}},179:function(e,t,r){var n=this&&this.__read||function(e,t){var r="function"==typeof Symbol&&e[Symbol.iterator];if(!r)return e;var n,i,o=r.call(e),a=[];try{for(;(void 0===t||t-- >0)&&!(n=o.next()).done;)a.push(n.value)}catch(e){i={error:e}}finally{try{n&&!n.done&&(r=o.return)&&r.call(o)}finally{if(i)throw i.error}}return a},i=this&&this.__spreadArray||function(e,t){for(var r=0,n=t.length,i=e.length;r<n;r++,i++)e[i]=t[r];return e};Object.defineProperty(t,"__esModule",{value:!0}),t.raceWith=void 0;var o=r(5182),a=r(4935),u=r(4781);t.raceWith=function(){for(var e=[],t=0;t<arguments.length;t++)e[t]=arguments[t];return e.length?a.operate((function(t,r){o.raceInit(i([t],n(e)))(r)})):u.identity}},122:(e,t,r)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.reduce=void 0;var n=r(8345),i=r(4935);t.reduce=function(e,t){return i.operate(n.scanInternals(e,t,arguments.length>=2,!1,!0))}},8739:(e,t,r)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.refCount=void 0;var n=r(4935),i=r(4990);t.refCount=function(){return n.operate((function(e,t){var r=null;e._refCount++;var n=i.createOperatorSubscriber(t,void 0,void 0,void 0,(function(){if(!e||e._refCount<=0||0<--e._refCount)r=null;else{var n=e._connection,i=r;r=null,!n||i&&n!==i||n.unsubscribe(),t.unsubscribe()}}));e.subscribe(n),n.closed||(r=e.connect())}))}},5313:(e,t,r)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.repeat=void 0;var n=r(6332),i=r(4935),o=r(4990),a=r(7103),u=r(7513);t.repeat=function(e){var t,r,s=1/0;return null!=e&&("object"==typeof e?(t=e.count,s=void 0===t?1/0:t,r=e.delay):s=e),s<=0?function(){return n.EMPTY}:i.operate((function(e,t){var n,i=0,c=function(){if(null==n||n.unsubscribe(),n=null,null!=r){var e="number"==typeof r?u.timer(r):a.innerFrom(r(i)),s=o.createOperatorSubscriber(t,(function(){s.unsubscribe(),l()}));e.subscribe(s)}else l()},l=function(){var r=!1;n=e.subscribe(o.createOperatorSubscriber(t,void 0,(function(){++i<s?n?c():r=!0:t.complete()}))),r&&c()};l()}))}},4068:(e,t,r)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.repeatWhen=void 0;var n=r(7103),i=r(3032),o=r(4935),a=r(4990);t.repeatWhen=function(e){return o.operate((function(t,r){var o,u,s=!1,c=!1,l=!1,h=function(){return l&&c&&(r.complete(),!0)},f=function(){l=!1,o=t.subscribe(a.createOperatorSubscriber(r,void 0,(function(){l=!0,!h()&&(u||(u=new i.Subject,n.innerFrom(e(u)).subscribe(a.createOperatorSubscriber(r,(function(){o?f():s=!0}),(function(){c=!0,h()})))),u).next()}))),s&&(o.unsubscribe(),o=null,s=!1,f())};f()}))}},64:(e,t,r)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.retry=void 0;var n=r(4935),i=r(4990),o=r(4781),a=r(7513),u=r(7103);t.retry=function(e){var t;void 0===e&&(e=1/0);var r=(t=e&&"object"==typeof e?e:{count:e}).count,s=void 0===r?1/0:r,c=t.delay,l=t.resetOnSuccess,h=void 0!==l&&l;return s<=0?o.identity:n.operate((function(e,t){var r,n=0,o=function(){var l=!1;r=e.subscribe(i.createOperatorSubscriber(t,(function(e){h&&(n=0),t.next(e)}),void 0,(function(e){if(n++<s){var h=function(){r?(r.unsubscribe(),r=null,o()):l=!0};if(null!=c){var f="number"==typeof c?a.timer(c):u.innerFrom(c(e,n)),p=i.createOperatorSubscriber(t,(function(){p.unsubscribe(),h()}),(function(){t.complete()}));f.subscribe(p)}else h()}else t.error(e)}))),l&&(r.unsubscribe(),r=null,o())};o()}))}},1188:(e,t,r)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.retryWhen=void 0;var n=r(7103),i=r(3032),o=r(4935),a=r(4990);t.retryWhen=function(e){return o.operate((function(t,r){var o,u,s=!1,c=function(){o=t.subscribe(a.createOperatorSubscriber(r,void 0,void 0,(function(t){u||(u=new i.Subject,n.innerFrom(e(u)).subscribe(a.createOperatorSubscriber(r,(function(){return o?c():s=!0})))),u&&u.next(t)}))),s&&(o.unsubscribe(),o=null,s=!1,c())};c()}))}},4193:(e,t,r)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.sample=void 0;var n=r(7103),i=r(4935),o=r(2576),a=r(4990);t.sample=function(e){return i.operate((function(t,r){var i=!1,u=null;t.subscribe(a.createOperatorSubscriber(r,(function(e){i=!0,u=e}))),n.innerFrom(e).subscribe(a.createOperatorSubscriber(r,(function(){if(i){i=!1;var e=u;u=null,r.next(e)}}),o.noop))}))}},6170:(e,t,r)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.sampleTime=void 0;var n=r(2445),i=r(4193),o=r(8990);t.sampleTime=function(e,t){return void 0===t&&(t=n.asyncScheduler),i.sample(o.interval(e,t))}},5876:(e,t,r)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.scan=void 0;var n=r(4935),i=r(8345);t.scan=function(e,t){return n.operate(i.scanInternals(e,t,arguments.length>=2,!0))}},8345:(e,t,r)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.scanInternals=void 0;var n=r(4990);t.scanInternals=function(e,t,r,i,o){return function(a,u){var s=r,c=t,l=0;a.subscribe(n.createOperatorSubscriber(u,(function(t){var r=l++;c=s?e(c,t,r):(s=!0,t),i&&u.next(c)}),o&&function(){s&&u.next(c),u.complete()}))}}},1791:(e,t,r)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.sequenceEqual=void 0;var n=r(4935),i=r(4990),o=r(7103);t.sequenceEqual=function(e,t){return void 0===t&&(t=function(e,t){return e===t}),n.operate((function(r,n){var a={buffer:[],complete:!1},u={buffer:[],complete:!1},s=function(e){n.next(e),n.complete()},c=function(e,r){var o=i.createOperatorSubscriber(n,(function(n){var i=r.buffer,o=r.complete;0===i.length?o?s(!1):e.buffer.push(n):!t(n,i.shift())&&s(!1)}),(function(){e.complete=!0;var t=r.complete,n=r.buffer;t&&s(0===n.length),null==o||o.unsubscribe()}));return o};r.subscribe(c(a,u)),o.innerFrom(e).subscribe(c(u,a))}))}},5137:function(e,t,r){var n=this&&this.__read||function(e,t){var r="function"==typeof Symbol&&e[Symbol.iterator];if(!r)return e;var n,i,o=r.call(e),a=[];try{for(;(void 0===t||t-- >0)&&!(n=o.next()).done;)a.push(n.value)}catch(e){i={error:e}}finally{try{n&&!n.done&&(r=o.return)&&r.call(o)}finally{if(i)throw i.error}}return a},i=this&&this.__spreadArray||function(e,t){for(var r=0,n=t.length,i=e.length;r<n;r++,i++)e[i]=t[r];return e};Object.defineProperty(t,"__esModule",{value:!0}),t.share=void 0;var o=r(7103),a=r(3032),u=r(5125),s=r(4935);function c(e,t){for(var r=[],a=2;a<arguments.length;a++)r[a-2]=arguments[a];if(!0!==t){if(!1!==t){var s=new u.SafeSubscriber({next:function(){s.unsubscribe(),e()}});return o.innerFrom(t.apply(void 0,i([],n(r)))).subscribe(s)}}else e()}t.share=function(e){void 0===e&&(e={});var t=e.connector,r=void 0===t?function(){return new a.Subject}:t,n=e.resetOnError,i=void 0===n||n,l=e.resetOnComplete,h=void 0===l||l,f=e.resetOnRefCountZero,p=void 0===f||f;return function(e){var t,n,a,l=0,f=!1,d=!1,b=function(){null==n||n.unsubscribe(),n=void 0},v=function(){b(),t=a=void 0,f=d=!1},y=function(){var e=t;v(),null==e||e.unsubscribe()};return s.operate((function(e,s){l++,d||f||b();var m=a=null!=a?a:r();s.add((function(){0!=--l||d||f||(n=c(y,p))})),m.subscribe(s),!t&&l>0&&(t=new u.SafeSubscriber({next:function(e){return m.next(e)},error:function(e){d=!0,b(),n=c(v,i,e),m.error(e)},complete:function(){f=!0,b(),n=c(v,h),m.complete()}}),o.innerFrom(e).subscribe(t))}))(e)}}},1348:(e,t,r)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.shareReplay=void 0;var n=r(3274),i=r(5137);t.shareReplay=function(e,t,r){var o,a,u,s,c=!1;return e&&"object"==typeof e?(o=e.bufferSize,s=void 0===o?1/0:o,a=e.windowTime,t=void 0===a?1/0:a,c=void 0!==(u=e.refCount)&&u,r=e.scheduler):s=null!=e?e:1/0,i.share({connector:function(){return new n.ReplaySubject(s,t,r)},resetOnError:!0,resetOnComplete:!1,resetOnRefCountZero:c})}},8242:(e,t,r)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.single=void 0;var n=r(9474),i=r(6156),o=r(8598),a=r(4935),u=r(4990);t.single=function(e){return a.operate((function(t,r){var a,s=!1,c=!1,l=0;t.subscribe(u.createOperatorSubscriber(r,(function(n){c=!0,e&&!e(n,l++,t)||(s&&r.error(new i.SequenceError("Too many matching values")),s=!0,a=n)}),(function(){s?(r.next(a),r.complete()):r.error(c?new o.NotFoundError("No matching values"):new n.EmptyError)})))}))}},3169:(e,t,r)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.skip=void 0;var n=r(9154);t.skip=function(e){return n.filter((function(t,r){return e<=r}))}},2454:(e,t,r)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.skipLast=void 0;var n=r(4781),i=r(4935),o=r(4990);t.skipLast=function(e){return e<=0?n.identity:i.operate((function(t,r){var n=new Array(e),i=0;return t.subscribe(o.createOperatorSubscriber(r,(function(t){var o=i++;if(o<e)n[o]=t;else{var a=o%e,u=n[a];n[a]=t,r.next(u)}}))),function(){n=null}}))}},6931:(e,t,r)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.skipUntil=void 0;var n=r(4935),i=r(4990),o=r(7103),a=r(2576);t.skipUntil=function(e){return n.operate((function(t,r){var n=!1,u=i.createOperatorSubscriber(r,(function(){null==u||u.unsubscribe(),n=!0}),a.noop);o.innerFrom(e).subscribe(u),t.subscribe(i.createOperatorSubscriber(r,(function(e){return n&&r.next(e)})))}))}},7913:(e,t,r)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.skipWhile=void 0;var n=r(4935),i=r(4990);t.skipWhile=function(e){return n.operate((function(t,r){var n=!1,o=0;t.subscribe(i.createOperatorSubscriber(r,(function(t){return(n||(n=!e(t,o++)))&&r.next(t)})))}))}},9234:(e,t,r)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.startWith=void 0;var n=r(2239),i=r(2433),o=r(4935);t.startWith=function(){for(var e=[],t=0;t<arguments.length;t++)e[t]=arguments[t];var r=i.popScheduler(e);return o.operate((function(t,i){(r?n.concat(e,t,r):n.concat(e,t)).subscribe(i)}))}},276:(e,t,r)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.subscribeOn=void 0;var n=r(4935);t.subscribeOn=function(e,t){return void 0===t&&(t=0),n.operate((function(r,n){n.add(e.schedule((function(){return r.subscribe(n)}),t))}))}},9253:(e,t,r)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.switchAll=void 0;var n=r(8518),i=r(4781);t.switchAll=function(){return n.switchMap(i.identity)}},8518:(e,t,r)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.switchMap=void 0;var n=r(7103),i=r(4935),o=r(4990);t.switchMap=function(e,t){return i.operate((function(r,i){var a=null,u=0,s=!1,c=function(){return s&&!a&&i.complete()};r.subscribe(o.createOperatorSubscriber(i,(function(r){null==a||a.unsubscribe();var s=0,l=u++;n.innerFrom(e(r,l)).subscribe(a=o.createOperatorSubscriber(i,(function(e){return i.next(t?t(r,e,l,s++):e)}),(function(){a=null,c()})))}),(function(){s=!0,c()})))}))}},1173:(e,t,r)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.switchMapTo=void 0;var n=r(8518),i=r(3005);t.switchMapTo=function(e,t){return i.isFunction(t)?n.switchMap((function(){return e}),t):n.switchMap((function(){return e}))}},3855:(e,t,r)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.switchScan=void 0;var n=r(8518),i=r(4935);t.switchScan=function(e,t){return i.operate((function(r,i){var o=t;return n.switchMap((function(t,r){return e(o,t,r)}),(function(e,t){return o=t,t}))(r).subscribe(i),function(){o=null}}))}},4783:(e,t,r)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.take=void 0;var n=r(6332),i=r(4935),o=r(4990);t.take=function(e){return e<=0?function(){return n.EMPTY}:i.operate((function(t,r){var n=0;t.subscribe(o.createOperatorSubscriber(r,(function(t){++n<=e&&(r.next(t),e<=n&&r.complete())})))}))}},1980:function(e,t,r){var n=this&&this.__values||function(e){var t="function"==typeof Symbol&&Symbol.iterator,r=t&&e[t],n=0;if(r)return r.call(e);if(e&&"number"==typeof e.length)return{next:function(){return e&&n>=e.length&&(e=void 0),{value:e&&e[n++],done:!e}}};throw new TypeError(t?"Object is not iterable.":"Symbol.iterator is not defined.")};Object.defineProperty(t,"__esModule",{value:!0}),t.takeLast=void 0;var i=r(6332),o=r(4935),a=r(4990);t.takeLast=function(e){return e<=0?function(){return i.EMPTY}:o.operate((function(t,r){var i=[];t.subscribe(a.createOperatorSubscriber(r,(function(t){i.push(t),e<i.length&&i.shift()}),(function(){var e,t;try{for(var o=n(i),a=o.next();!a.done;a=o.next()){var u=a.value;r.next(u)}}catch(t){e={error:t}}finally{try{a&&!a.done&&(t=o.return)&&t.call(o)}finally{if(e)throw e.error}}r.complete()}),void 0,(function(){i=null})))}))}},9845:(e,t,r)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.takeUntil=void 0;var n=r(4935),i=r(4990),o=r(7103),a=r(2576);t.takeUntil=function(e){return n.operate((function(t,r){o.innerFrom(e).subscribe(i.createOperatorSubscriber(r,(function(){return r.complete()}),a.noop)),!r.closed&&t.subscribe(r)}))}},6060:(e,t,r)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.takeWhile=void 0;var n=r(4935),i=r(4990);t.takeWhile=function(e,t){return void 0===t&&(t=!1),n.operate((function(r,n){var o=0;r.subscribe(i.createOperatorSubscriber(n,(function(r){var i=e(r,o++);(i||t)&&n.next(r),!i&&n.complete()})))}))}},1138:(e,t,r)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.tap=void 0;var n=r(3005),i=r(4935),o=r(4990),a=r(4781);t.tap=function(e,t,r){var u=n.isFunction(e)||t||r?{next:e,error:t,complete:r}:e;return u?i.operate((function(e,t){var r;null===(r=u.subscribe)||void 0===r||r.call(u);var n=!0;e.subscribe(o.createOperatorSubscriber(t,(function(e){var r;null===(r=u.next)||void 0===r||r.call(u,e),t.next(e)}),(function(){var e;n=!1,null===(e=u.complete)||void 0===e||e.call(u),t.complete()}),(function(e){var r;n=!1,null===(r=u.error)||void 0===r||r.call(u,e),t.error(e)}),(function(){var e,t;n&&(null===(e=u.unsubscribe)||void 0===e||e.call(u)),null===(t=u.finalize)||void 0===t||t.call(u)})))})):a.identity}},7306:(e,t,r)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.throttle=void 0;var n=r(4935),i=r(4990),o=r(7103);t.throttle=function(e,t){return n.operate((function(r,n){var a=null!=t?t:{},u=a.leading,s=void 0===u||u,c=a.trailing,l=void 0!==c&&c,h=!1,f=null,p=null,d=!1,b=function(){null==p||p.unsubscribe(),p=null,l&&(m(),d&&n.complete())},v=function(){p=null,d&&n.complete()},y=function(t){return p=o.innerFrom(e(t)).subscribe(i.createOperatorSubscriber(n,b,v))},m=function(){if(h){h=!1;var e=f;f=null,n.next(e),!d&&y(e)}};r.subscribe(i.createOperatorSubscriber(n,(function(e){h=!0,f=e,(!p||p.closed)&&(s?m():y(e))}),(function(){d=!0,(!(l&&h&&p)||p.closed)&&n.complete()})))}))}},8968:(e,t,r)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.throttleTime=void 0;var n=r(2445),i=r(7306),o=r(7513);t.throttleTime=function(e,t,r){void 0===t&&(t=n.asyncScheduler);var a=o.timer(e,t);return i.throttle((function(){return a}),r)}},1779:(e,t,r)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.throwIfEmpty=void 0;var n=r(9474),i=r(4935),o=r(4990);function a(){return new n.EmptyError}t.throwIfEmpty=function(e){return void 0===e&&(e=a),i.operate((function(t,r){var n=!1;t.subscribe(o.createOperatorSubscriber(r,(function(e){n=!0,r.next(e)}),(function(){return n?r.complete():r.error(e())})))}))}},8005:(e,t,r)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.TimeInterval=t.timeInterval=void 0;var n=r(2445),i=r(4935),o=r(4990);t.timeInterval=function(e){return void 0===e&&(e=n.asyncScheduler),i.operate((function(t,r){var n=e.now();t.subscribe(o.createOperatorSubscriber(r,(function(t){var i=e.now(),o=i-n;n=i,r.next(new a(t,o))})))}))};var a=function(e,t){this.value=e,this.interval=t};t.TimeInterval=a},4173:(e,t,r)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.timeout=t.TimeoutError=void 0;var n=r(2445),i=r(1677),o=r(4935),a=r(7103),u=r(7029),s=r(4990),c=r(7738);function l(e){throw new t.TimeoutError(e)}t.TimeoutError=u.createErrorClass((function(e){return function(t){void 0===t&&(t=null),e(this),this.message="Timeout has occurred",this.name="TimeoutError",this.info=t}})),t.timeout=function(e,t){var r=i.isValidDate(e)?{first:e}:"number"==typeof e?{each:e}:e,u=r.first,h=r.each,f=r.with,p=void 0===f?l:f,d=r.scheduler,b=void 0===d?null!=t?t:n.asyncScheduler:d,v=r.meta,y=void 0===v?null:v;if(null==u&&null==h)throw new TypeError("No timeout provided.");return o.operate((function(e,t){var r,n,i=null,o=0,l=function(e){n=c.executeSchedule(t,b,(function(){try{r.unsubscribe(),a.innerFrom(p({meta:y,lastValue:i,seen:o})).subscribe(t)}catch(e){t.error(e)}}),e)};r=e.subscribe(s.createOperatorSubscriber(t,(function(e){null==n||n.unsubscribe(),o++,t.next(i=e),h>0&&l(h)}),void 0,void 0,(function(){(null==n?void 0:n.closed)||null==n||n.unsubscribe(),i=null}))),!o&&l(null!=u?"number"==typeof u?u:+u-b.now():h)}))}},7223:(e,t,r)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.timeoutWith=void 0;var n=r(2445),i=r(1677),o=r(4173);t.timeoutWith=function(e,t,r){var a,u,s;if(r=null!=r?r:n.async,i.isValidDate(e)?a=e:"number"==typeof e&&(u=e),!t)throw new TypeError("No observable provided to switch to");if(s=function(){return t},null==a&&null==u)throw new TypeError("No timeout provided.");return o.timeout({first:a,each:u,scheduler:r,with:s})}},8975:(e,t,r)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.timestamp=void 0;var n=r(7950),i=r(7291);t.timestamp=function(e){return void 0===e&&(e=n.dateTimestampProvider),i.map((function(t){return{value:t,timestamp:e.now()}}))}},2:(e,t,r)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.toArray=void 0;var n=r(122),i=r(4935),o=function(e,t){return e.push(t),e};t.toArray=function(){return i.operate((function(e,t){n.reduce(o,[])(e).subscribe(t)}))}},2826:(e,t,r)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.window=void 0;var n=r(3032),i=r(4935),o=r(4990),a=r(2576),u=r(7103);t.window=function(e){return i.operate((function(t,r){var i=new n.Subject;r.next(i.asObservable());var s=function(e){i.error(e),r.error(e)};return t.subscribe(o.createOperatorSubscriber(r,(function(e){return null==i?void 0:i.next(e)}),(function(){i.complete(),r.complete()}),s)),u.innerFrom(e).subscribe(o.createOperatorSubscriber(r,(function(){i.complete(),r.next(i=new n.Subject)}),a.noop,s)),function(){null==i||i.unsubscribe(),i=null}}))}},7526:function(e,t,r){var n=this&&this.__values||function(e){var t="function"==typeof Symbol&&Symbol.iterator,r=t&&e[t],n=0;if(r)return r.call(e);if(e&&"number"==typeof e.length)return{next:function(){return e&&n>=e.length&&(e=void 0),{value:e&&e[n++],done:!e}}};throw new TypeError(t?"Object is not iterable.":"Symbol.iterator is not defined.")};Object.defineProperty(t,"__esModule",{value:!0}),t.windowCount=void 0;var i=r(3032),o=r(4935),a=r(4990);t.windowCount=function(e,t){void 0===t&&(t=0);var r=t>0?t:e;return o.operate((function(t,o){var u=[new i.Subject],s=0;o.next(u[0].asObservable()),t.subscribe(a.createOperatorSubscriber(o,(function(t){var a,c;try{for(var l=n(u),h=l.next();!h.done;h=l.next())h.value.next(t)}catch(e){a={error:e}}finally{try{h&&!h.done&&(c=l.return)&&c.call(l)}finally{if(a)throw a.error}}var f=s-e+1;if(f>=0&&f%r==0&&u.shift().complete(),++s%r==0){var p=new i.Subject;u.push(p),o.next(p.asObservable())}}),(function(){for(;u.length>0;)u.shift().complete();o.complete()}),(function(e){for(;u.length>0;)u.shift().error(e);o.error(e)}),(function(){u=null})))}))}},8294:(e,t,r)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.windowTime=void 0;var n=r(3032),i=r(2445),o=r(3865),a=r(4935),u=r(4990),s=r(6967),c=r(2433),l=r(7738);t.windowTime=function(e){for(var t,r,h=[],f=1;f<arguments.length;f++)h[f-1]=arguments[f];var p=null!==(t=c.popScheduler(h))&&void 0!==t?t:i.asyncScheduler,d=null!==(r=h[0])&&void 0!==r?r:null,b=h[1]||1/0;return a.operate((function(t,r){var i=[],a=!1,c=function(e){var t=e.window,r=e.subs;t.complete(),r.unsubscribe(),s.arrRemove(i,e),a&&h()},h=function(){if(i){var t=new o.Subscription;r.add(t);var a=new n.Subject,u={window:a,subs:t,seen:0};i.push(u),r.next(a.asObservable()),l.executeSchedule(t,p,(function(){return c(u)}),e)}};null!==d&&d>=0?l.executeSchedule(r,p,h,d,!0):a=!0,h();var f=function(e){return i.slice().forEach(e)},v=function(e){f((function(t){var r=t.window;return e(r)})),e(r),r.unsubscribe()};return t.subscribe(u.createOperatorSubscriber(r,(function(e){f((function(t){t.window.next(e),b<=++t.seen&&c(t)}))}),(function(){return v((function(e){return e.complete()}))}),(function(e){return v((function(t){return t.error(e)}))}))),function(){i=null}}))}},1883:function(e,t,r){var n=this&&this.__values||function(e){var t="function"==typeof Symbol&&Symbol.iterator,r=t&&e[t],n=0;if(r)return r.call(e);if(e&&"number"==typeof e.length)return{next:function(){return e&&n>=e.length&&(e=void 0),{value:e&&e[n++],done:!e}}};throw new TypeError(t?"Object is not iterable.":"Symbol.iterator is not defined.")};Object.defineProperty(t,"__esModule",{value:!0}),t.windowToggle=void 0;var i=r(3032),o=r(3865),a=r(4935),u=r(7103),s=r(4990),c=r(2576),l=r(6967);t.windowToggle=function(e,t){return a.operate((function(r,a){var h=[],f=function(e){for(;0<h.length;)h.shift().error(e);a.error(e)};u.innerFrom(e).subscribe(s.createOperatorSubscriber(a,(function(e){var r=new i.Subject;h.push(r);var n,p=new o.Subscription;try{n=u.innerFrom(t(e))}catch(e){return void f(e)}a.next(r.asObservable()),p.add(n.subscribe(s.createOperatorSubscriber(a,(function(){l.arrRemove(h,r),r.complete(),p.unsubscribe()}),c.noop,f)))}),c.noop)),r.subscribe(s.createOperatorSubscriber(a,(function(e){var t,r,i=h.slice();try{for(var o=n(i),a=o.next();!a.done;a=o.next())a.value.next(e)}catch(e){t={error:e}}finally{try{a&&!a.done&&(r=o.return)&&r.call(o)}finally{if(t)throw t.error}}}),(function(){for(;0<h.length;)h.shift().complete();a.complete()}),f,(function(){for(;0<h.length;)h.shift().unsubscribe()})))}))}},4309:(e,t,r)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.windowWhen=void 0;var n=r(3032),i=r(4935),o=r(4990),a=r(7103);t.windowWhen=function(e){return i.operate((function(t,r){var i,u,s=function(e){i.error(e),r.error(e)},c=function(){var t;null==u||u.unsubscribe(),null==i||i.complete(),i=new n.Subject,r.next(i.asObservable());try{t=a.innerFrom(e())}catch(e){return void s(e)}t.subscribe(u=o.createOperatorSubscriber(r,c,c,s))};c(),t.subscribe(o.createOperatorSubscriber(r,(function(e){return i.next(e)}),(function(){i.complete(),r.complete()}),s,(function(){null==u||u.unsubscribe(),i=null})))}))}},3041:function(e,t,r){var n=this&&this.__read||function(e,t){var r="function"==typeof Symbol&&e[Symbol.iterator];if(!r)return e;var n,i,o=r.call(e),a=[];try{for(;(void 0===t||t-- >0)&&!(n=o.next()).done;)a.push(n.value)}catch(e){i={error:e}}finally{try{n&&!n.done&&(r=o.return)&&r.call(o)}finally{if(i)throw i.error}}return a},i=this&&this.__spreadArray||function(e,t){for(var r=0,n=t.length,i=e.length;r<n;r++,i++)e[i]=t[r];return e};Object.defineProperty(t,"__esModule",{value:!0}),t.withLatestFrom=void 0;var o=r(4935),a=r(4990),u=r(7103),s=r(4781),c=r(2576),l=r(2433);t.withLatestFrom=function(){for(var e=[],t=0;t<arguments.length;t++)e[t]=arguments[t];var r=l.popResultSelector(e);return o.operate((function(t,o){for(var l=e.length,h=new Array(l),f=e.map((function(){return!1})),p=!1,d=function(t){u.innerFrom(e[t]).subscribe(a.createOperatorSubscriber(o,(function(e){h[t]=e,p||f[t]||(f[t]=!0,(p=f.every(s.identity))&&(f=null))}),c.noop))},b=0;b<l;b++)d(b);t.subscribe(a.createOperatorSubscriber(o,(function(e){if(p){var t=i([e],n(h));o.next(r?r.apply(void 0,i([],n(t))):t)}})))}))}},4400:function(e,t,r){var n=this&&this.__read||function(e,t){var r="function"==typeof Symbol&&e[Symbol.iterator];if(!r)return e;var n,i,o=r.call(e),a=[];try{for(;(void 0===t||t-- >0)&&!(n=o.next()).done;)a.push(n.value)}catch(e){i={error:e}}finally{try{n&&!n.done&&(r=o.return)&&r.call(o)}finally{if(i)throw i.error}}return a},i=this&&this.__spreadArray||function(e,t){for(var r=0,n=t.length,i=e.length;r<n;r++,i++)e[i]=t[r];return e};Object.defineProperty(t,"__esModule",{value:!0}),t.zip=void 0;var o=r(7654),a=r(4935);t.zip=function(){for(var e=[],t=0;t<arguments.length;t++)e[t]=arguments[t];return a.operate((function(t,r){o.zip.apply(void 0,i([t],n(e))).subscribe(r)}))}},8593:(e,t,r)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.zipAll=void 0;var n=r(7654),i=r(2069);t.zipAll=function(e){return i.joinAllInternals(n.zip,e)}},8096:function(e,t,r){var n=this&&this.__read||function(e,t){var r="function"==typeof Symbol&&e[Symbol.iterator];if(!r)return e;var n,i,o=r.call(e),a=[];try{for(;(void 0===t||t-- >0)&&!(n=o.next()).done;)a.push(n.value)}catch(e){i={error:e}}finally{try{n&&!n.done&&(r=o.return)&&r.call(o)}finally{if(i)throw i.error}}return a},i=this&&this.__spreadArray||function(e,t){for(var r=0,n=t.length,i=e.length;r<n;r++,i++)e[i]=t[r];return e};Object.defineProperty(t,"__esModule",{value:!0}),t.zipWith=void 0;var o=r(4400);t.zipWith=function(){for(var e=[],t=0;t<arguments.length;t++)e[t]=arguments[t];return o.zip.apply(void 0,i([],n(e)))}},7631:(e,t,r)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.scheduleArray=void 0;var n=r(2419);t.scheduleArray=function(e,t){return new n.Observable((function(r){var n=0;return t.schedule((function(){n===e.length?r.complete():(r.next(e[n++]),r.closed||this.schedule())}))}))}},8489:(e,t,r)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.scheduleAsyncIterable=void 0;var n=r(2419),i=r(7738);t.scheduleAsyncIterable=function(e,t){if(!e)throw new Error("Iterable cannot be null");return new n.Observable((function(r){i.executeSchedule(r,t,(function(){var n=e[Symbol.asyncIterator]();i.executeSchedule(r,t,(function(){n.next().then((function(e){e.done?r.complete():r.next(e.value)}))}),0,!0)}))}))}},1297:(e,t,r)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.scheduleIterable=void 0;var n=r(2419),i=r(3725),o=r(3005),a=r(7738);t.scheduleIterable=function(e,t){return new n.Observable((function(r){var n;return a.executeSchedule(r,t,(function(){n=e[i.iterator](),a.executeSchedule(r,t,(function(){var e,t,i;try{t=(e=n.next()).value,i=e.done}catch(e){return void r.error(e)}i?r.complete():r.next(t)}),0,!0)})),function(){return o.isFunction(null==n?void 0:n.return)&&n.return()}}))}},4001:(e,t,r)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.scheduleObservable=void 0;var n=r(7103),i=r(1184),o=r(276);t.scheduleObservable=function(e,t){return n.innerFrom(e).pipe(o.subscribeOn(t),i.observeOn(t))}},5143:(e,t,r)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.schedulePromise=void 0;var n=r(7103),i=r(1184),o=r(276);t.schedulePromise=function(e,t){return n.innerFrom(e).pipe(o.subscribeOn(t),i.observeOn(t))}},3676:(e,t,r)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.scheduleReadableStreamLike=void 0;var n=r(8489),i=r(7823);t.scheduleReadableStreamLike=function(e,t){return n.scheduleAsyncIterable(i.readableStreamLikeToAsyncGenerator(e),t)}},5207:(e,t,r)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.scheduled=void 0;var n=r(4001),i=r(5143),o=r(7631),a=r(1297),u=r(8489),s=r(9500),c=r(6018),l=r(3909),h=r(2743),f=r(9595),p=r(9906),d=r(7823),b=r(3676);t.scheduled=function(e,t){if(null!=e){if(s.isInteropObservable(e))return n.scheduleObservable(e,t);if(l.isArrayLike(e))return o.scheduleArray(e,t);if(c.isPromise(e))return i.schedulePromise(e,t);if(f.isAsyncIterable(e))return u.scheduleAsyncIterable(e,t);if(h.isIterable(e))return a.scheduleIterable(e,t);if(d.isReadableStreamLike(e))return b.scheduleReadableStreamLike(e,t)}throw p.createInvalidObservableTypeError(e)}},1986:function(e,t,r){var n,i=this&&this.__extends||(n=function(e,t){return n=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,t){e.__proto__=t}||function(e,t){for(var r in t)Object.prototype.hasOwnProperty.call(t,r)&&(e[r]=t[r])},n(e,t)},function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Class extends value "+String(t)+" is not a constructor or null");function r(){this.constructor=e}n(e,t),e.prototype=null===t?Object.create(t):(r.prototype=t.prototype,new r)});Object.defineProperty(t,"__esModule",{value:!0}),t.Action=void 0;var o=function(e){function t(t,r){return e.call(this)||this}return i(t,e),t.prototype.schedule=function(e,t){return void 0===t&&(t=0),this},t}(r(3865).Subscription);t.Action=o},7574:function(e,t,r){var n,i=this&&this.__extends||(n=function(e,t){return n=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,t){e.__proto__=t}||function(e,t){for(var r in t)Object.prototype.hasOwnProperty.call(t,r)&&(e[r]=t[r])},n(e,t)},function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Class extends value "+String(t)+" is not a constructor or null");function r(){this.constructor=e}n(e,t),e.prototype=null===t?Object.create(t):(r.prototype=t.prototype,new r)});Object.defineProperty(t,"__esModule",{value:!0}),t.AnimationFrameAction=void 0;var o=r(9702),a=r(505),u=function(e){function t(t,r){var n=e.call(this,t,r)||this;return n.scheduler=t,n.work=r,n}return i(t,e),t.prototype.requestAsyncId=function(t,r,n){return void 0===n&&(n=0),null!==n&&n>0?e.prototype.requestAsyncId.call(this,t,r,n):(t.actions.push(this),t._scheduled||(t._scheduled=a.animationFrameProvider.requestAnimationFrame((function(){return t.flush(void 0)}))))},t.prototype.recycleAsyncId=function(t,r,n){var i;if(void 0===n&&(n=0),null!=n?n>0:this.delay>0)return e.prototype.recycleAsyncId.call(this,t,r,n);var o=t.actions;null!=r&&(null===(i=o[o.length-1])||void 0===i?void 0:i.id)!==r&&(a.animationFrameProvider.cancelAnimationFrame(r),t._scheduled=void 0)},t}(o.AsyncAction);t.AnimationFrameAction=u},2934:function(e,t,r){var n,i=this&&this.__extends||(n=function(e,t){return n=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,t){e.__proto__=t}||function(e,t){for(var r in t)Object.prototype.hasOwnProperty.call(t,r)&&(e[r]=t[r])},n(e,t)},function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Class extends value "+String(t)+" is not a constructor or null");function r(){this.constructor=e}n(e,t),e.prototype=null===t?Object.create(t):(r.prototype=t.prototype,new r)});Object.defineProperty(t,"__esModule",{value:!0}),t.AnimationFrameScheduler=void 0;var o=function(e){function t(){return null!==e&&e.apply(this,arguments)||this}return i(t,e),t.prototype.flush=function(e){this._active=!0;var t=this._scheduled;this._scheduled=void 0;var r,n=this.actions;e=e||n.shift();do{if(r=e.execute(e.state,e.delay))break}while((e=n[0])&&e.id===t&&n.shift());if(this._active=!1,r){for(;(e=n[0])&&e.id===t&&n.shift();)e.unsubscribe();throw r}},t}(r(3643).AsyncScheduler);t.AnimationFrameScheduler=o},2189:function(e,t,r){var n,i=this&&this.__extends||(n=function(e,t){return n=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,t){e.__proto__=t}||function(e,t){for(var r in t)Object.prototype.hasOwnProperty.call(t,r)&&(e[r]=t[r])},n(e,t)},function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Class extends value "+String(t)+" is not a constructor or null");function r(){this.constructor=e}n(e,t),e.prototype=null===t?Object.create(t):(r.prototype=t.prototype,new r)});Object.defineProperty(t,"__esModule",{value:!0}),t.AsapAction=void 0;var o=r(9702),a=r(8908),u=function(e){function t(t,r){var n=e.call(this,t,r)||this;return n.scheduler=t,n.work=r,n}return i(t,e),t.prototype.requestAsyncId=function(t,r,n){return void 0===n&&(n=0),null!==n&&n>0?e.prototype.requestAsyncId.call(this,t,r,n):(t.actions.push(this),t._scheduled||(t._scheduled=a.immediateProvider.setImmediate(t.flush.bind(t,void 0))))},t.prototype.recycleAsyncId=function(t,r,n){var i;if(void 0===n&&(n=0),null!=n?n>0:this.delay>0)return e.prototype.recycleAsyncId.call(this,t,r,n);var o=t.actions;null!=r&&(null===(i=o[o.length-1])||void 0===i?void 0:i.id)!==r&&(a.immediateProvider.clearImmediate(r),t._scheduled===r&&(t._scheduled=void 0))},t}(o.AsyncAction);t.AsapAction=u},5523:function(e,t,r){var n,i=this&&this.__extends||(n=function(e,t){return n=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,t){e.__proto__=t}||function(e,t){for(var r in t)Object.prototype.hasOwnProperty.call(t,r)&&(e[r]=t[r])},n(e,t)},function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Class extends value "+String(t)+" is not a constructor or null");function r(){this.constructor=e}n(e,t),e.prototype=null===t?Object.create(t):(r.prototype=t.prototype,new r)});Object.defineProperty(t,"__esModule",{value:!0}),t.AsapScheduler=void 0;var o=function(e){function t(){return null!==e&&e.apply(this,arguments)||this}return i(t,e),t.prototype.flush=function(e){this._active=!0;var t=this._scheduled;this._scheduled=void 0;var r,n=this.actions;e=e||n.shift();do{if(r=e.execute(e.state,e.delay))break}while((e=n[0])&&e.id===t&&n.shift());if(this._active=!1,r){for(;(e=n[0])&&e.id===t&&n.shift();)e.unsubscribe();throw r}},t}(r(3643).AsyncScheduler);t.AsapScheduler=o},9702:function(e,t,r){var n,i=this&&this.__extends||(n=function(e,t){return n=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,t){e.__proto__=t}||function(e,t){for(var r in t)Object.prototype.hasOwnProperty.call(t,r)&&(e[r]=t[r])},n(e,t)},function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Class extends value "+String(t)+" is not a constructor or null");function r(){this.constructor=e}n(e,t),e.prototype=null===t?Object.create(t):(r.prototype=t.prototype,new r)});Object.defineProperty(t,"__esModule",{value:!0}),t.AsyncAction=void 0;var o=r(1986),a=r(8203),u=r(6967),s=function(e){function t(t,r){var n=e.call(this,t,r)||this;return n.scheduler=t,n.work=r,n.pending=!1,n}return i(t,e),t.prototype.schedule=function(e,t){var r;if(void 0===t&&(t=0),this.closed)return this;this.state=e;var n=this.id,i=this.scheduler;return null!=n&&(this.id=this.recycleAsyncId(i,n,t)),this.pending=!0,this.delay=t,this.id=null!==(r=this.id)&&void 0!==r?r:this.requestAsyncId(i,this.id,t),this},t.prototype.requestAsyncId=function(e,t,r){return void 0===r&&(r=0),a.intervalProvider.setInterval(e.flush.bind(e,this),r)},t.prototype.recycleAsyncId=function(e,t,r){if(void 0===r&&(r=0),null!=r&&this.delay===r&&!1===this.pending)return t;null!=t&&a.intervalProvider.clearInterval(t)},t.prototype.execute=function(e,t){if(this.closed)return new Error("executing a cancelled action");this.pending=!1;var r=this._execute(e,t);if(r)return r;!1===this.pending&&null!=this.id&&(this.id=this.recycleAsyncId(this.scheduler,this.id,null))},t.prototype._execute=function(e,t){var r,n=!1;try{this.work(e)}catch(e){n=!0,r=e||new Error("Scheduled action threw falsy error")}if(n)return this.unsubscribe(),r},t.prototype.unsubscribe=function(){if(!this.closed){var t=this.id,r=this.scheduler,n=r.actions;this.work=this.state=this.scheduler=null,this.pending=!1,u.arrRemove(n,this),null!=t&&(this.id=this.recycleAsyncId(r,t,null)),this.delay=null,e.prototype.unsubscribe.call(this)}},t}(o.Action);t.AsyncAction=s},3643:function(e,t,r){var n,i=this&&this.__extends||(n=function(e,t){return n=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,t){e.__proto__=t}||function(e,t){for(var r in t)Object.prototype.hasOwnProperty.call(t,r)&&(e[r]=t[r])},n(e,t)},function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Class extends value "+String(t)+" is not a constructor or null");function r(){this.constructor=e}n(e,t),e.prototype=null===t?Object.create(t):(r.prototype=t.prototype,new r)});Object.defineProperty(t,"__esModule",{value:!0}),t.AsyncScheduler=void 0;var o=r(218),a=function(e){function t(t,r){void 0===r&&(r=o.Scheduler.now);var n=e.call(this,t,r)||this;return n.actions=[],n._active=!1,n}return i(t,e),t.prototype.flush=function(e){var t=this.actions;if(this._active)t.push(e);else{var r;this._active=!0;do{if(r=e.execute(e.state,e.delay))break}while(e=t.shift());if(this._active=!1,r){for(;e=t.shift();)e.unsubscribe();throw r}}},t}(o.Scheduler);t.AsyncScheduler=a},6201:function(e,t,r){var n,i=this&&this.__extends||(n=function(e,t){return n=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,t){e.__proto__=t}||function(e,t){for(var r in t)Object.prototype.hasOwnProperty.call(t,r)&&(e[r]=t[r])},n(e,t)},function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Class extends value "+String(t)+" is not a constructor or null");function r(){this.constructor=e}n(e,t),e.prototype=null===t?Object.create(t):(r.prototype=t.prototype,new r)});Object.defineProperty(t,"__esModule",{value:!0}),t.QueueAction=void 0;var o=function(e){function t(t,r){var n=e.call(this,t,r)||this;return n.scheduler=t,n.work=r,n}return i(t,e),t.prototype.schedule=function(t,r){return void 0===r&&(r=0),r>0?e.prototype.schedule.call(this,t,r):(this.delay=r,this.state=t,this.scheduler.flush(this),this)},t.prototype.execute=function(t,r){return r>0||this.closed?e.prototype.execute.call(this,t,r):this._execute(t,r)},t.prototype.requestAsyncId=function(t,r,n){return void 0===n&&(n=0),null!=n&&n>0||null==n&&this.delay>0?e.prototype.requestAsyncId.call(this,t,r,n):(t.flush(this),0)},t}(r(9702).AsyncAction);t.QueueAction=o},5860:function(e,t,r){var n,i=this&&this.__extends||(n=function(e,t){return n=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,t){e.__proto__=t}||function(e,t){for(var r in t)Object.prototype.hasOwnProperty.call(t,r)&&(e[r]=t[r])},n(e,t)},function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Class extends value "+String(t)+" is not a constructor or null");function r(){this.constructor=e}n(e,t),e.prototype=null===t?Object.create(t):(r.prototype=t.prototype,new r)});Object.defineProperty(t,"__esModule",{value:!0}),t.QueueScheduler=void 0;var o=function(e){function t(){return null!==e&&e.apply(this,arguments)||this}return i(t,e),t}(r(3643).AsyncScheduler);t.QueueScheduler=o},4123:function(e,t,r){var n,i=this&&this.__extends||(n=function(e,t){return n=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,t){e.__proto__=t}||function(e,t){for(var r in t)Object.prototype.hasOwnProperty.call(t,r)&&(e[r]=t[r])},n(e,t)},function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Class extends value "+String(t)+" is not a constructor or null");function r(){this.constructor=e}n(e,t),e.prototype=null===t?Object.create(t):(r.prototype=t.prototype,new r)});Object.defineProperty(t,"__esModule",{value:!0}),t.VirtualAction=t.VirtualTimeScheduler=void 0;var o=r(9702),a=r(3865),u=function(e){function t(t,r){void 0===t&&(t=s),void 0===r&&(r=1/0);var n=e.call(this,t,(function(){return n.frame}))||this;return n.maxFrames=r,n.frame=0,n.index=-1,n}return i(t,e),t.prototype.flush=function(){for(var e,t,r=this.actions,n=this.maxFrames;(t=r[0])&&t.delay<=n&&(r.shift(),this.frame=t.delay,!(e=t.execute(t.state,t.delay))););if(e){for(;t=r.shift();)t.unsubscribe();throw e}},t.frameTimeFactor=10,t}(r(3643).AsyncScheduler);t.VirtualTimeScheduler=u;var s=function(e){function t(t,r,n){void 0===n&&(n=t.index+=1);var i=e.call(this,t,r)||this;return i.scheduler=t,i.work=r,i.index=n,i.active=!0,i.index=t.index=n,i}return i(t,e),t.prototype.schedule=function(r,n){if(void 0===n&&(n=0),Number.isFinite(n)){if(!this.id)return e.prototype.schedule.call(this,r,n);this.active=!1;var i=new t(this.scheduler,this.work);return this.add(i),i.schedule(r,n)}return a.Subscription.EMPTY},t.prototype.requestAsyncId=function(e,r,n){void 0===n&&(n=0),this.delay=e.frame+n;var i=e.actions;return i.push(this),i.sort(t.sortActions),1},t.prototype.recycleAsyncId=function(e,t,r){void 0===r&&(r=0)},t.prototype._execute=function(t,r){if(!0===this.active)return e.prototype._execute.call(this,t,r)},t.sortActions=function(e,t){return e.delay===t.delay?e.index===t.index?0:e.index>t.index?1:-1:e.delay>t.delay?1:-1},t}(o.AsyncAction);t.VirtualAction=s},3660:(e,t,r)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.animationFrame=t.animationFrameScheduler=void 0;var n=r(7574),i=r(2934);t.animationFrameScheduler=new i.AnimationFrameScheduler(n.AnimationFrameAction),t.animationFrame=t.animationFrameScheduler},505:function(e,t,r){var n=this&&this.__read||function(e,t){var r="function"==typeof Symbol&&e[Symbol.iterator];if(!r)return e;var n,i,o=r.call(e),a=[];try{for(;(void 0===t||t-- >0)&&!(n=o.next()).done;)a.push(n.value)}catch(e){i={error:e}}finally{try{n&&!n.done&&(r=o.return)&&r.call(o)}finally{if(i)throw i.error}}return a},i=this&&this.__spreadArray||function(e,t){for(var r=0,n=t.length,i=e.length;r<n;r++,i++)e[i]=t[r];return e};Object.defineProperty(t,"__esModule",{value:!0}),t.animationFrameProvider=void 0;var o=r(3865);t.animationFrameProvider={schedule:function(e){var r=requestAnimationFrame,n=cancelAnimationFrame,i=t.animationFrameProvider.delegate;i&&(r=i.requestAnimationFrame,n=i.cancelAnimationFrame);var a=r((function(t){n=void 0,e(t)}));return new o.Subscription((function(){return null==n?void 0:n(a)}))},requestAnimationFrame:function(){for(var e=[],r=0;r<arguments.length;r++)e[r]=arguments[r];var o=t.animationFrameProvider.delegate;return((null==o?void 0:o.requestAnimationFrame)||requestAnimationFrame).apply(void 0,i([],n(e)))},cancelAnimationFrame:function(){for(var e=[],r=0;r<arguments.length;r++)e[r]=arguments[r];var o=t.animationFrameProvider.delegate;return((null==o?void 0:o.cancelAnimationFrame)||cancelAnimationFrame).apply(void 0,i([],n(e)))},delegate:void 0}},580:(e,t,r)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.asap=t.asapScheduler=void 0;var n=r(2189),i=r(5523);t.asapScheduler=new i.AsapScheduler(n.AsapAction),t.asap=t.asapScheduler},2445:(e,t,r)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.async=t.asyncScheduler=void 0;var n=r(9702),i=r(3643);t.asyncScheduler=new i.AsyncScheduler(n.AsyncAction),t.async=t.asyncScheduler},7950:(e,t)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.dateTimestampProvider=void 0,t.dateTimestampProvider={now:function(){return(t.dateTimestampProvider.delegate||Date).now()},delegate:void 0}},8908:function(e,t,r){var n=this&&this.__read||function(e,t){var r="function"==typeof Symbol&&e[Symbol.iterator];if(!r)return e;var n,i,o=r.call(e),a=[];try{for(;(void 0===t||t-- >0)&&!(n=o.next()).done;)a.push(n.value)}catch(e){i={error:e}}finally{try{n&&!n.done&&(r=o.return)&&r.call(o)}finally{if(i)throw i.error}}return a},i=this&&this.__spreadArray||function(e,t){for(var r=0,n=t.length,i=e.length;r<n;r++,i++)e[i]=t[r];return e};Object.defineProperty(t,"__esModule",{value:!0}),t.immediateProvider=void 0;var o=r(7629),a=o.Immediate.setImmediate,u=o.Immediate.clearImmediate;t.immediateProvider={setImmediate:function(){for(var e=[],r=0;r<arguments.length;r++)e[r]=arguments[r];var o=t.immediateProvider.delegate;return((null==o?void 0:o.setImmediate)||a).apply(void 0,i([],n(e)))},clearImmediate:function(e){var r=t.immediateProvider.delegate;return((null==r?void 0:r.clearImmediate)||u)(e)},delegate:void 0}},8203:function(e,t){var r=this&&this.__read||function(e,t){var r="function"==typeof Symbol&&e[Symbol.iterator];if(!r)return e;var n,i,o=r.call(e),a=[];try{for(;(void 0===t||t-- >0)&&!(n=o.next()).done;)a.push(n.value)}catch(e){i={error:e}}finally{try{n&&!n.done&&(r=o.return)&&r.call(o)}finally{if(i)throw i.error}}return a},n=this&&this.__spreadArray||function(e,t){for(var r=0,n=t.length,i=e.length;r<n;r++,i++)e[i]=t[r];return e};Object.defineProperty(t,"__esModule",{value:!0}),t.intervalProvider=void 0,t.intervalProvider={setInterval:function(e,i){for(var o=[],a=2;a<arguments.length;a++)o[a-2]=arguments[a];var u=t.intervalProvider.delegate;return(null==u?void 0:u.setInterval)?u.setInterval.apply(u,n([e,i],r(o))):setInterval.apply(void 0,n([e,i],r(o)))},clearInterval:function(e){var r=t.intervalProvider.delegate;return((null==r?void 0:r.clearInterval)||clearInterval)(e)},delegate:void 0}},6813:(e,t)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.performanceTimestampProvider=void 0,t.performanceTimestampProvider={now:function(){return(t.performanceTimestampProvider.delegate||performance).now()},delegate:void 0}},8615:(e,t,r)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.queue=t.queueScheduler=void 0;var n=r(6201),i=r(5860);t.queueScheduler=new i.QueueScheduler(n.QueueAction),t.queue=t.queueScheduler},4590:function(e,t){var r=this&&this.__read||function(e,t){var r="function"==typeof Symbol&&e[Symbol.iterator];if(!r)return e;var n,i,o=r.call(e),a=[];try{for(;(void 0===t||t-- >0)&&!(n=o.next()).done;)a.push(n.value)}catch(e){i={error:e}}finally{try{n&&!n.done&&(r=o.return)&&r.call(o)}finally{if(i)throw i.error}}return a},n=this&&this.__spreadArray||function(e,t){for(var r=0,n=t.length,i=e.length;r<n;r++,i++)e[i]=t[r];return e};Object.defineProperty(t,"__esModule",{value:!0}),t.timeoutProvider=void 0,t.timeoutProvider={setTimeout:function(e,i){for(var o=[],a=2;a<arguments.length;a++)o[a-2]=arguments[a];var u=t.timeoutProvider.delegate;return(null==u?void 0:u.setTimeout)?u.setTimeout.apply(u,n([e,i],r(o))):setTimeout.apply(void 0,n([e,i],r(o)))},clearTimeout:function(e){var r=t.timeoutProvider.delegate;return((null==r?void 0:r.clearTimeout)||clearTimeout)(e)},delegate:void 0}},3725:(e,t)=>{function r(){return"function"==typeof Symbol&&Symbol.iterator?Symbol.iterator:"@@iterator"}Object.defineProperty(t,"__esModule",{value:!0}),t.iterator=t.getSymbolIterator=void 0,t.getSymbolIterator=r,t.iterator=r()},2801:(e,t)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.observable=void 0,t.observable="function"==typeof Symbol&&Symbol.observable||"@@observable"},8433:(e,t)=>{Object.defineProperty(t,"__esModule",{value:!0})},2351:(e,t,r)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.ArgumentOutOfRangeError=void 0;var n=r(7029);t.ArgumentOutOfRangeError=n.createErrorClass((function(e){return function(){e(this),this.name="ArgumentOutOfRangeError",this.message="argument out of range"}}))},9474:(e,t,r)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.EmptyError=void 0;var n=r(7029);t.EmptyError=n.createErrorClass((function(e){return function(){e(this),this.name="EmptyError",this.message="no elements in sequence"}}))},7629:(e,t)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.TestTools=t.Immediate=void 0;var r,n=1,i={};function o(e){return e in i&&(delete i[e],!0)}t.Immediate={setImmediate:function(e){var t=n++;return i[t]=!0,r||(r=Promise.resolve()),r.then((function(){return o(t)&&e()})),t},clearImmediate:function(e){o(e)}},t.TestTools={pending:function(){return Object.keys(i).length}}},8598:(e,t,r)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.NotFoundError=void 0;var n=r(7029);t.NotFoundError=n.createErrorClass((function(e){return function(t){e(this),this.name="NotFoundError",this.message=t}}))},2642:(e,t,r)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.ObjectUnsubscribedError=void 0;var n=r(7029);t.ObjectUnsubscribedError=n.createErrorClass((function(e){return function(){e(this),this.name="ObjectUnsubscribedError",this.message="object unsubscribed"}}))},6156:(e,t,r)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.SequenceError=void 0;var n=r(7029);t.SequenceError=n.createErrorClass((function(e){return function(t){e(this),this.name="SequenceError",this.message=t}}))},4805:(e,t,r)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.UnsubscriptionError=void 0;var n=r(7029);t.UnsubscriptionError=n.createErrorClass((function(e){return function(t){e(this),this.message=t?t.length+" errors occurred during unsubscription:\n"+t.map((function(e,t){return t+1+") "+e.toString()})).join("\n  "):"",this.name="UnsubscriptionError",this.errors=t}}))},2433:(e,t,r)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.popNumber=t.popScheduler=t.popResultSelector=void 0;var n=r(3005),i=r(9016);function o(e){return e[e.length-1]}t.popResultSelector=function(e){return n.isFunction(o(e))?e.pop():void 0},t.popScheduler=function(e){return i.isScheduler(o(e))?e.pop():void 0},t.popNumber=function(e,t){return"number"==typeof o(e)?e.pop():t}},1203:(e,t)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.argsArgArrayOrObject=void 0;var r=Array.isArray,n=Object.getPrototypeOf,i=Object.prototype,o=Object.keys;t.argsArgArrayOrObject=function(e){if(1===e.length){var t=e[0];if(r(t))return{args:t,keys:null};if((u=t)&&"object"==typeof u&&n(u)===i){var a=o(t);return{args:a.map((function(e){return t[e]})),keys:a}}}var u;return{args:e,keys:null}}},5498:(e,t)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.argsOrArgArray=void 0;var r=Array.isArray;t.argsOrArgArray=function(e){return 1===e.length&&r(e[0])?e[0]:e}},6967:(e,t)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.arrRemove=void 0,t.arrRemove=function(e,t){if(e){var r=e.indexOf(t);0<=r&&e.splice(r,1)}}},7029:(e,t)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.createErrorClass=void 0,t.createErrorClass=function(e){var t=e((function(e){Error.call(e),e.stack=(new Error).stack}));return t.prototype=Object.create(Error.prototype),t.prototype.constructor=t,t}},641:(e,t)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.createObject=void 0,t.createObject=function(e,t){return e.reduce((function(e,r,n){return e[r]=t[n],e}),{})}},6110:(e,t,r)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.captureError=t.errorContext=void 0;var n=r(3280),i=null;t.errorContext=function(e){if(n.config.useDeprecatedSynchronousErrorHandling){var t=!i;if(t&&(i={errorThrown:!1,error:null}),e(),t){var r=i,o=r.errorThrown,a=r.error;if(i=null,o)throw a}}else e()},t.captureError=function(e){n.config.useDeprecatedSynchronousErrorHandling&&i&&(i.errorThrown=!0,i.error=e)}},7738:(e,t)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.executeSchedule=void 0,t.executeSchedule=function(e,t,r,n,i){void 0===n&&(n=0),void 0===i&&(i=!1);var o=t.schedule((function(){r(),i?e.add(this.schedule(null,n)):this.unsubscribe()}),n);if(e.add(o),!i)return o}},4781:(e,t)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.identity=void 0,t.identity=function(e){return e}},3909:(e,t)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.isArrayLike=void 0,t.isArrayLike=function(e){return e&&"number"==typeof e.length&&"function"!=typeof e}},9595:(e,t,r)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.isAsyncIterable=void 0;var n=r(3005);t.isAsyncIterable=function(e){return Symbol.asyncIterator&&n.isFunction(null==e?void 0:e[Symbol.asyncIterator])}},1677:(e,t)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.isValidDate=void 0,t.isValidDate=function(e){return e instanceof Date&&!isNaN(e)}},3005:(e,t)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.isFunction=void 0,t.isFunction=function(e){return"function"==typeof e}},9500:(e,t,r)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.isInteropObservable=void 0;var n=r(2801),i=r(3005);t.isInteropObservable=function(e){return i.isFunction(e[n.observable])}},2743:(e,t,r)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.isIterable=void 0;var n=r(3725),i=r(3005);t.isIterable=function(e){return i.isFunction(null==e?void 0:e[n.iterator])}},8386:(e,t,r)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.isObservable=void 0;var n=r(2419),i=r(3005);t.isObservable=function(e){return!!e&&(e instanceof n.Observable||i.isFunction(e.lift)&&i.isFunction(e.subscribe))}},6018:(e,t,r)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.isPromise=void 0;var n=r(3005);t.isPromise=function(e){return n.isFunction(null==e?void 0:e.then)}},7823:function(e,t,r){var n=this&&this.__generator||function(e,t){var r,n,i,o,a={label:0,sent:function(){if(1&i[0])throw i[1];return i[1]},trys:[],ops:[]};return o={next:u(0),throw:u(1),return:u(2)},"function"==typeof Symbol&&(o[Symbol.iterator]=function(){return this}),o;function u(o){return function(u){return function(o){if(r)throw new TypeError("Generator is already executing.");for(;a;)try{if(r=1,n&&(i=2&o[0]?n.return:o[0]?n.throw||((i=n.return)&&i.call(n),0):n.next)&&!(i=i.call(n,o[1])).done)return i;switch(n=0,i&&(o=[2&o[0],i.value]),o[0]){case 0:case 1:i=o;break;case 4:return a.label++,{value:o[1],done:!1};case 5:a.label++,n=o[1],o=[0];continue;case 7:o=a.ops.pop(),a.trys.pop();continue;default:if(!((i=(i=a.trys).length>0&&i[i.length-1])||6!==o[0]&&2!==o[0])){a=0;continue}if(3===o[0]&&(!i||o[1]>i[0]&&o[1]<i[3])){a.label=o[1];break}if(6===o[0]&&a.label<i[1]){a.label=i[1],i=o;break}if(i&&a.label<i[2]){a.label=i[2],a.ops.push(o);break}i[2]&&a.ops.pop(),a.trys.pop();continue}o=t.call(e,a)}catch(e){o=[6,e],n=0}finally{r=i=0}if(5&o[0])throw o[1];return{value:o[0]?o[1]:void 0,done:!0}}([o,u])}}},i=this&&this.__await||function(e){return this instanceof i?(this.v=e,this):new i(e)},o=this&&this.__asyncGenerator||function(e,t,r){if(!Symbol.asyncIterator)throw new TypeError("Symbol.asyncIterator is not defined.");var n,o=r.apply(e,t||[]),a=[];return n={},u("next"),u("throw"),u("return"),n[Symbol.asyncIterator]=function(){return this},n;function u(e){o[e]&&(n[e]=function(t){return new Promise((function(r,n){a.push([e,t,r,n])>1||s(e,t)}))})}function s(e,t){try{(r=o[e](t)).value instanceof i?Promise.resolve(r.value.v).then(c,l):h(a[0][2],r)}catch(e){h(a[0][3],e)}var r}function c(e){s("next",e)}function l(e){s("throw",e)}function h(e,t){e(t),a.shift(),a.length&&s(a[0][0],a[0][1])}};Object.defineProperty(t,"__esModule",{value:!0}),t.isReadableStreamLike=t.readableStreamLikeToAsyncGenerator=void 0;var a=r(3005);t.readableStreamLikeToAsyncGenerator=function(e){return o(this,arguments,(function(){var t,r,o;return n(this,(function(n){switch(n.label){case 0:t=e.getReader(),n.label=1;case 1:n.trys.push([1,,9,10]),n.label=2;case 2:return[4,i(t.read())];case 3:return r=n.sent(),o=r.value,r.done?[4,i(void 0)]:[3,5];case 4:return[2,n.sent()];case 5:return[4,i(o)];case 6:return[4,n.sent()];case 7:return n.sent(),[3,2];case 8:return[3,10];case 9:return t.releaseLock(),[7];case 10:return[2]}}))}))},t.isReadableStreamLike=function(e){return a.isFunction(null==e?void 0:e.getReader)}},9016:(e,t,r)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.isScheduler=void 0;var n=r(3005);t.isScheduler=function(e){return e&&n.isFunction(e.schedule)}},4935:(e,t,r)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.operate=t.hasLift=void 0;var n=r(3005);function i(e){return n.isFunction(null==e?void 0:e.lift)}t.hasLift=i,t.operate=function(e){return function(t){if(i(t))return t.lift((function(t){try{return e(t,this)}catch(e){this.error(e)}}));throw new TypeError("Unable to lift unknown Observable type")}}},1914:function(e,t,r){var n=this&&this.__read||function(e,t){var r="function"==typeof Symbol&&e[Symbol.iterator];if(!r)return e;var n,i,o=r.call(e),a=[];try{for(;(void 0===t||t-- >0)&&!(n=o.next()).done;)a.push(n.value)}catch(e){i={error:e}}finally{try{n&&!n.done&&(r=o.return)&&r.call(o)}finally{if(i)throw i.error}}return a},i=this&&this.__spreadArray||function(e,t){for(var r=0,n=t.length,i=e.length;r<n;r++,i++)e[i]=t[r];return e};Object.defineProperty(t,"__esModule",{value:!0}),t.mapOneOrManyArgs=void 0;var o=r(7291),a=Array.isArray;t.mapOneOrManyArgs=function(e){return o.map((function(t){return function(e,t){return a(t)?e.apply(void 0,i([],n(t))):e(t)}(e,t)}))}},2576:(e,t)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.noop=void 0,t.noop=function(){}},8634:(e,t)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.not=void 0,t.not=function(e,t){return function(r,n){return!e.call(t,r,n)}}},9985:(e,t,r)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.pipeFromArray=t.pipe=void 0;var n=r(4781);function i(e){return 0===e.length?n.identity:1===e.length?e[0]:function(t){return e.reduce((function(e,t){return t(e)}),t)}}t.pipe=function(){for(var e=[],t=0;t<arguments.length;t++)e[t]=arguments[t];return i(e)},t.pipeFromArray=i},7968:(e,t,r)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.reportUnhandledError=void 0;var n=r(3280),i=r(4590);t.reportUnhandledError=function(e){i.timeoutProvider.setTimeout((function(){var t=n.config.onUnhandledError;if(!t)throw e;t(e)}))}},9906:(e,t)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.createInvalidObservableTypeError=void 0,t.createInvalidObservableTypeError=function(e){return new TypeError("You provided "+(null!==e&&"object"==typeof e?"an invalid object":"'"+e+"'")+" where a stream was expected. You can provide an Observable, Promise, ReadableStream, Array, AsyncIterable, or Iterable.")}},1881:(e,t,r)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.TickerReset=void 0;var n=r(2872);t.TickerReset=function(){function e(){}return e.start=function(){e._start.next()},e.stop=function(){e._stop.next()},e._stop=new n.Subject,e._start=new n.Subject,e}()},3445:function(e,t,r){var n,i=this&&this.__extends||(n=function(e,t){return n=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,t){e.__proto__=t}||function(e,t){for(var r in t)Object.prototype.hasOwnProperty.call(t,r)&&(e[r]=t[r])},n(e,t)},function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Class extends value "+String(t)+" is not a constructor or null");function r(){this.constructor=e}n(e,t),e.prototype=null===t?Object.create(t):(r.prototype=t.prototype,new r)});Object.defineProperty(t,"__esModule",{value:!0}),t.Background=void 0;var o=r(8913),a=r(4575),u=function(e){function t(t,r,n){var i=e.call(this,t,r)||this;return i._image=n,i}return i(t,e),t.prototype.onCreate=function(){},t.prototype.onResize=function(e,t){var r=t*o.BACKGROUND_ASPECT_RATIO,n=t;this._rect=[{x:(e-r)/2,y:0,width:r,height:n}]},t.prototype.update=function(e,t){},t.prototype.render=function(){var e=this;this._rect.forEach((function(t){t.x<=e.ctx.canvas.width&&(0,a.drawImage)(e.ctx,e._image,t)}))},t.prototype.getRect=function(){return this._rect},t}(r(9334).Component);t.Background=u},6250:function(e,t,r){var n,i=this&&this.__extends||(n=function(e,t){return n=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,t){e.__proto__=t}||function(e,t){for(var r in t)Object.prototype.hasOwnProperty.call(t,r)&&(e[r]=t[r])},n(e,t)},function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Class extends value "+String(t)+" is not a constructor or null");function r(){this.constructor=e}n(e,t),e.prototype=null===t?Object.create(t):(r.prototype=t.prototype,new r)});Object.defineProperty(t,"__esModule",{value:!0}),t.Board=void 0;var o=r(9334),a=r(2958),u=r(6618),s=r(6211),c=function(e){function t(t,r,n,i){var o=e.call(this,t,r)||this;o.images=new Map,o._sizeX=n,o._sizeY=i,o._board=new Array(i+1).fill([]).map((function(){return new Array(n).fill(!1)})),o._blocks=new Array(i).fill([]).map((function(){return new Array(n).fill(null)}));for(var a=0;a<o._sizeY;a++)for(var u=0;u<o._sizeX;u++)o._board[a][u]=!1,o._blocks[a][u]=null;for(a=0;a<o._sizeX;a++)o._board[o._sizeY][a]=!0;return o}return i(t,e),t.prototype.onCreate=function(){},t.prototype.onResize=function(e,t){if(void 0!==this._blocks)for(var r=0;r<this._blocks.length;r++)for(var n=0;n<this._blocks[0].length;n++)null!==this._blocks[r][n]&&this._blocks[r][n].onResize(e,t)},t.prototype.update=function(e,t){},t.prototype.render=function(){for(var e=0;e<this._blocks.length;e++)for(var t=0;t<this._blocks[0].length;t++)null!==this._blocks[e][t]&&this._blocks[e][t].render()},t.prototype.tryPosition=function(e,t,r){for(var n=r.length,i=r[0].length,o=!0,a=0;a<n;a++)for(var u=0;u<i;u++){if(1===r[a][u]&&this._board[a+t][u+e])return!1;if(1===r[a][u]&&(a+t>=this._sizeY||u+e>=this._sizeX))return!1;if(1===r[a][u]&&(a+t<0||u+e<0))return!1}return o},t.prototype.canAdd=function(e,t,r){if(!this.tryPosition(e,t,r))return!1;for(var n=r.length,i=r[0].length,o=!1,a=0;a<n;a++)for(var u=0;u<i;u++)if(1===r[a][u]&&this._board[a+t+1][u+e])return!0;return o},t.prototype.tryAdd=function(e,t,r,n){var i=n.length,o=n[0].length;if(this.canAdd){for(var a=0;a<i;a++)for(var u=0;u<o;u++)1===n[a][u]&&(this._board[a+r][u+t]=!0);return this.switchShapeWithBlocks(e),{check:!0,num:this.removeFullRows()}}return{check:!1,num:0}},t.prototype.removeFullRows=function(){for(var e=0,t=0;t<this._sizeY;t++){for(var r=!0,n=0;n<this._sizeX;n++)if(!this._board[t][n]){r=!1;break}if(r){for(e++,n=0;n<this._sizeX;n++)this._board[t][n]=!1,this._blocks[t][n]=null;this.lowerFlyingRows(t)}}return this.gameState.score+=100*e,this.gameState.player.score+=100*e,e},t.prototype.lowerFlyingRows=function(e){for(var t=e;t>0;t--)for(var r=0;r<this._sizeX;r++)this._board[t][r]=this._board[t-1][r],null===this._blocks[t-1][r]?this._blocks[t][r]=null:this._blocks[t][r]=new a.Block(this.ctx,this.gameState,this._blocks[t-1][r].getImage(),this._blocks[t-1][r].getBlock(),0,!1,this,this._blocks[t-1][r].getBgBounds(),this._blocks[t-1][r].posX,this._blocks[t-1][r].posY+1,this._blocks[t-1][r].getType());for(t=0;t<this._sizeX;t++)this._board[0][t]=!1,this._blocks[0][t]=null},t.prototype.getBoard=function(){return this._board},t.prototype.getSizeX=function(){return this._sizeX},t.prototype.getSizeY=function(){return this._sizeY},t.prototype.switchShapeWithBlocks=function(e){for(var t=0;t<e.colisionDetectionMatrix.length;t++)for(var r=0;r<e.colisionDetectionMatrix[0].length;r++)1===e.colisionDetectionMatrix[t][r]&&(this._blocks[t+e.posY][r+e.posX]=new a.Block(this.ctx,this.gameState,u.GlobalImageMap.imageMap.get(s.Shapes[e.block]+"block"),e.block,0,!1,this,e.bgBound,e.posX+r,e.posY+t,e.block.toString()),this._blocks[t+e.posY][r+e.posX].render(),console.log(this._blocks[t+e.posY][r+e.posX].type))},t.prototype.clear=function(){var e=this;this._board=new Array(this._sizeY+1).fill([]).map((function(){return new Array(e._sizeX).fill(!1)})),this._blocks=new Array(this._sizeY).fill([]).map((function(){return new Array(e._sizeX).fill(null)}));for(var t=0;t<this._sizeY;t++)for(var r=0;r<this._sizeX;r++)this._board[t][r]=!1,this._blocks[t][r]=null;for(t=0;t<this._sizeX;t++)this._board[this._sizeY][t]=!0},t}(o.Component);t.Board=c},9334:(e,t)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.Component=void 0;t.Component=function(e,t,r){this.ctx=e,this.gameState=t,this.props=r,this.onCreate(),this.onResize(e.canvas.width,e.canvas.height)}},1490:function(e,t,r){var n,i=this&&this.__extends||(n=function(e,t){return n=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,t){e.__proto__=t}||function(e,t){for(var r in t)Object.prototype.hasOwnProperty.call(t,r)&&(e[r]=t[r])},n(e,t)},function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Class extends value "+String(t)+" is not a constructor or null");function r(){this.constructor=e}n(e,t),e.prototype=null===t?Object.create(t):(r.prototype=t.prototype,new r)}),o=this&&this.__assign||function(){return o=Object.assign||function(e){for(var t,r=1,n=arguments.length;r<n;r++)for(var i in t=arguments[r])Object.prototype.hasOwnProperty.call(t,i)&&(e[i]=t[i]);return e},o.apply(this,arguments)};Object.defineProperty(t,"__esModule",{value:!0}),t.EnterUsername=void 0;var a=r(2872),u=r(1600),s=r(7419),c=r(9334),l=r(4575),h=r(8913),f=function(e){function t(){return null!==e&&e.apply(this,arguments)||this}return i(t,e),t.prototype.onCreate=function(){this._username=""},t.prototype.onResize=function(e,t){},t.prototype.update=function(e,t){var r=this;this.gameState.currentState===u.GamePhase.ENTER_NAME&&t.keys.forEach((function(e){1===e.length?r._username+=e:"Backspace"===e?r.removeLastChar():"Enter"===e&&r.submitUsername()}))},t.prototype.render=function(){this.gameState.currentState===u.GamePhase.ENTER_NAME&&((0,l.drawCenteredText)(this.ctx,"Enter username",h.MEDIUM_TEXT_FONT,this.ctx.canvas.width/2,this.ctx.canvas.height/2-60),(0,l.drawCenteredText)(this.ctx,this._username,h.MEDIUM_TEXT_FONT,this.ctx.canvas.width/2,this.ctx.canvas.height/2))},t.prototype.removeLastChar=function(){this._username.length>0&&(this._username=this._username.substring(0,this._username.length-1))},t.prototype.submitUsername=function(){var e=this;this._username.length>0&&(this.gameState.player.username=this._username,this.gameState.currentState=u.GamePhase.READY,(0,s.fetchPlayerProfile$)(this.gameState.player.username).pipe((0,a.tap)((function(t){0===t.length?e.gameState.player={id:-1,score:0,linesCleared:0,elementsDroped:0,timePlaying:0,highscore:0,username:e._username}:e.gameState.player=o(o({},t[0]),{score:0})})),(0,a.catchError)((function(t){return console.error("Profile not found"),e.gameState.player={id:-1,score:0,linesCleared:0,elementsDroped:0,timePlaying:0,highscore:0,username:e._username},(0,a.of)(e.gameState.player)}))).subscribe((function(e){console.log(e)})))},t}(c.Component);t.EnterUsername=f},6618:(e,t)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.GlobalImageMap=void 0,t.GlobalImageMap=function(){function e(){}return e.imageMap=new Map,e}()},8860:function(e,t,r){var n,i=this&&this.__extends||(n=function(e,t){return n=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,t){e.__proto__=t}||function(e,t){for(var r in t)Object.prototype.hasOwnProperty.call(t,r)&&(e[r]=t[r])},n(e,t)},function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Class extends value "+String(t)+" is not a constructor or null");function r(){this.constructor=e}n(e,t),e.prototype=null===t?Object.create(t):(r.prototype=t.prototype,new r)});Object.defineProperty(t,"__esModule",{value:!0}),t.Highscores=void 0;var o=r(1600),a=r(7419),u=r(9334),s=r(4575),c=r(8913),l=function(e){function t(){return null!==e&&e.apply(this,arguments)||this}return i(t,e),t.prototype.onCreate=function(){this._shown=!1},t.prototype.onResize=function(e,t){},t.prototype.update=function(e,t){var r=this;this.gameState.currentState===o.GamePhase.READY?t.KeyH&&(console.log("key registered from highscores update line 26"),this._shown=!this._shown,this._shown&&(0,a.fetchHighScore$)().pipe().subscribe((function(e){r._highscores=e}))):this._shown=!1},t.prototype.render=function(){var e=this;this._shown&&this._highscores&&((0,s.drawText)(this.ctx,"Highscores:",c.MEDIUM_TEXT_FONT,.6*this.ctx.canvas.width,100),this._highscores.forEach((function(t,r){(0,s.drawText)(e.ctx,"".concat(r+1,". ").concat(t.username.padEnd(5),"- ").concat(t.highscore.toString().padStart(2)),c.MEDIUM_TEXT_FONT,.6*e.ctx.canvas.width,Math.pow(50,r)+150)})))},t}(u.Component);t.Highscores=l},4083:function(e,t,r){var n,i=this&&this.__extends||(n=function(e,t){return n=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,t){e.__proto__=t}||function(e,t){for(var r in t)Object.prototype.hasOwnProperty.call(t,r)&&(e[r]=t[r])},n(e,t)},function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Class extends value "+String(t)+" is not a constructor or null");function r(){this.constructor=e}n(e,t),e.prototype=null===t?Object.create(t):(r.prototype=t.prototype,new r)});Object.defineProperty(t,"__esModule",{value:!0}),t.Overlay=void 0;var o=r(8913),a=r(1600),u=r(7769),s=r(4575),c=function(e){function t(){return null!==e&&e.apply(this,arguments)||this}return i(t,e),t.prototype.onCreate=function(){},t.prototype.onResize=function(e,t){},t.prototype.update=function(e,t){},t.prototype.render=function(){switch(this.gameState.currentState){case a.GamePhase.READY:this.renderDarkenScreen(),this.renderHighscore(),this.renderControls(),this.renderInfo();break;case a.GamePhase.PLAYING:this.renderCurrentScore();break;case a.GamePhase.GAME_OVER:this.renderDarkenScreen(),this.renderGameOver(),this.renderHighscore(),this.renderControls(),this.renderInfo();break;case a.GamePhase.ENTER_NAME:this.renderDarkenScreen()}},t.prototype.renderControls=function(){(0,s.drawText)(this.ctx,"[H]-Highscores",o.SMALL_TEXT_FONT,10,this.ctx.canvas.height-30)},t.prototype.renderCurrentScore=function(){var e=u.Game.gameState.player.score.toString();(0,s.drawText)(this.ctx,e,o.LARGE_TEXT_FONT,this.ctx.canvas.width+5,this.ctx.canvas.height+5)},t.prototype.renderEnterToStart=function(){(0,s.drawCenteredText)(this.ctx,"Press Enter To Start",o.MEDIUM_TEXT_FONT,this.ctx.canvas.width/2,this.ctx.canvas.height/2)},t.prototype.renderHighscore=function(){var e="Highscore: ".concat(this.gameState.player.highscore);(0,s.drawCenteredText)(this.ctx,this.gameState.player.username,o.MEDIUM_TEXT_FONT,this.ctx.canvas.width/2,this.ctx.canvas.height/2-100),(0,s.drawCenteredText)(this.ctx,e,o.MEDIUM_TEXT_FONT,this.ctx.canvas.width/2,this.ctx.canvas.height/2-50)},t.prototype.renderInfo=function(){var e="Lines cleared: ".concat(this.gameState.player.linesCleared);(0,s.drawCenteredText)(this.ctx,e,o.SMALL_TEXT_FONT,this.ctx.canvas.width/2,this.ctx.canvas.height-10)},t.prototype.renderGameOver=function(){var e="Score: ".concat(this.gameState.score);(0,s.drawCenteredText)(this.ctx,"GAME OVER",o.LARGE_TEXT_FONT,this.ctx.canvas.width/2,100),(0,s.drawCenteredText)(this.ctx,e,o.MEDIUM_TEXT_FONT,this.ctx.canvas.width/2,150)},t.prototype.renderDarkenScreen=function(){this.ctx.globalAlpha=.3,this.ctx.fillStyle="black",this.ctx.fillRect(0,0,this.ctx.canvas.width,this.ctx.canvas.height),this.ctx.globalAlpha=1},t}(r(9334).Component);t.Overlay=c},2958:function(e,t,r){var n,i=this&&this.__extends||(n=function(e,t){return n=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,t){e.__proto__=t}||function(e,t){for(var r in t)Object.prototype.hasOwnProperty.call(t,r)&&(e[r]=t[r])},n(e,t)},function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Class extends value "+String(t)+" is not a constructor or null");function r(){this.constructor=e}n(e,t),e.prototype=null===t?Object.create(t):(r.prototype=t.prototype,new r)});Object.defineProperty(t,"__esModule",{value:!0}),t.Block=t.ShapeJ=t.ShapeL=t.ShapeZ=t.ShapeS=t.ShapeO=t.ShapeT=t.ShapeI=t.Shape=void 0;var o=r(9334),a=r(6211),u=r(8913),s=r(4575),c=r(1600),l=r(7769),h=r(6618),f=function(e){function t(t,r,n,i,o,a,s,c,h,f,p){var d=e.call(this,t,r)||this;return d.image=n,d.posX=f,d.posY=p,d.rotation=0,d.block=i,d.tickTime=o,d.colisionDetectionMatrix=a,d.moving=s,l.Game.canSpawn.val=!s,d.board=c,d.bgBound=h,d.shapeBound={x:h.width*u.BOARD_BLOCK_SHIFT_X+d.posX*u.BOARD_BLOCK_SHIFT_X*d.bgBound.width,y:h.height*u.BOARD_BLOCK_SHIFT_Y+d.posY*u.BOARD_BLOCK_SHIFT_Y*d.bgBound.height,width:d.colisionDetectionMatrix.length*h.width/u.BOARD_BLOCKS_WIDTH,height:d.colisionDetectionMatrix[0].length*h.height/u.BOARD_BLOCKS_HEIGHt},d.onCreate(),d}return i(t,e),t}(o.Component);t.Shape=f;var p=function(e){function t(t,r,n,i,o,a,u,s,c,l){return e.call(this,t,r,n,i,o,[[1,1,1,1],[0,0,0,0],[0,0,0,0],[0,0,0,0]],a,u,s,c,l)||this}return i(t,e),t.prototype.onCreate=function(){if(this.board){var e=this.board.tryPosition(this.posX,this.posY,this.colisionDetectionMatrix);return console.log(e,"log from shape.ts checking it shape can be spawned"),e}},t.prototype.onResize=function(e,t){var r=t*u.BACKGROUND_ASPECT_RATIO,n=t;this.bgBound={x:(e-r)/2,y:0,width:r,height:n},this.shapeBound&&(this.shapeBound.x=this.bgBound.x+this.bgBound.width*u.BOARD_BLOCK_SHIFT_X+this.posX*u.BOARD_BLOCK_SHIFT_X*this.bgBound.width,this.shapeBound.y=this.posY*u.BOARD_BLOCK_SHIFT_Y*this.bgBound.height,this.shapeBound.width=this.colisionDetectionMatrix.length*this.bgBound.width/u.BACKGROUND_BLOCKS_WIDTH,this.shapeBound.height=this.colisionDetectionMatrix[0].length*this.bgBound.height/u.BACKGROUND_BLOCKS_HEIGHT)},t.prototype.update=function(e,t){var r;if(this.gameState.currentState===c.GamePhase.PLAYING&&this.moving){if(console.log(t),t.ArrowUp)return this.rotate(),-1;if(t.ArrowDown){if(this.board.tryPosition(this.posX,this.posY+1,this.colisionDetectionMatrix))return this.posY++,this.onResize(this.ctx.canvas.width,this.ctx.canvas.height),this.render(),-1;var n=this.board.tryAdd(this,this.posX,this.posY,this.colisionDetectionMatrix),i=n.check,o=n.num;if(!i)throw new Error("Impossible position");return this.moving=!1,this.tickTime=1/0,l.Game.canSpawn.val=!0,o}if(t.ArrowLeft)this.board.tryPosition(this.posX-1,this.posY,this.colisionDetectionMatrix)&&(this.posX--,this.onResize(this.ctx.canvas.width,this.ctx.canvas.height),this.render());else if(t.ArrowRight)this.board.tryPosition(this.posX+1,this.posY,this.colisionDetectionMatrix)&&(this.posX++,this.onResize(this.ctx.canvas.width,this.ctx.canvas.height),this.render());else if(t.Space){o=0;do{o=this.update(0,((r={keys:["ArrowDown"]}).ArrowDown=!0,r))}while(-1===o);return this.moving=!1,this.tickTime=1/0,l.Game.canSpawn.val=!0,o}return-1}},t.prototype.render=function(){if(this.bgBound.x<=this.ctx.canvas.width&&this.moving){this.shapeBound&&(this.shapeBound.x=this.bgBound.x+this.bgBound.width*u.BOARD_BLOCK_SHIFT_X+this.posX*u.BOARD_BLOCK_SHIFT_X*this.bgBound.width,this.shapeBound.y=this.posY*u.BOARD_BLOCK_SHIFT_Y*this.bgBound.height,this.shapeBound.width=this.colisionDetectionMatrix.length*this.bgBound.width/u.BACKGROUND_BLOCKS_WIDTH,this.shapeBound.height=this.colisionDetectionMatrix[0].length*this.bgBound.height/u.BACKGROUND_BLOCKS_HEIGHT);var e=null;0===this.rotation?e={x:this.shapeBound.x,y:this.shapeBound.y,height:this.shapeBound.height/4,width:this.shapeBound.width}:1===this.rotation&&(e={x:this.shapeBound.x,y:this.shapeBound.y,height:this.shapeBound.height,width:this.shapeBound.width/4}),(0,s.drawImage)(this.ctx,this.image,e)}},t.prototype.rotate=function(){var e=(this.rotation+1)%2;if(0===e){var t=[[1,1,1,1],[0,0,0,0],[0,0,0,0],[0,0,0,0]];if(this.board.tryPosition(this.posX,this.posY,t))this.rotation=e,this.colisionDetectionMatrix=t,this.image=h.GlobalImageMap.imageMap.get(a.Shapes[this.block].toString()+e.toString()),this.render();else if(this.posX+4>this.board.getSizeX()){var r=this.posX+4-this.board.getSizeX();this.board.tryPosition(this.posX-r,this.posY,t)&&(this.rotation=e,this.colisionDetectionMatrix=t,this.image=h.GlobalImageMap.imageMap.get(a.Shapes[this.block].toString()+e.toString()),this.posX-=r,this.render())}}else 1===e&&(t=[[1,0,0,0],[1,0,0,0],[1,0,0,0],[1,0,0,0]],this.board.tryPosition(this.posX,this.posY,t)&&(this.rotation=e,this.colisionDetectionMatrix=t,this.image=h.GlobalImageMap.imageMap.get(a.Shapes[this.block].toString()+e.toString()),this.render()))},t.prototype.hasColided=function(){return this.moving},t}(f);t.ShapeI=p;var d=function(e){function t(t,r,n,i,o,a,u,s,c,l){return e.call(this,t,r,n,i,o,[[0,1,0],[1,1,1],[0,0,0]],a,u,s,c,l)||this}return i(t,e),t.prototype.onCreate=function(){if(this.board){var e=this.board.tryPosition(this.posX,this.posY,this.colisionDetectionMatrix);return console.log(e,"log from shape.ts checking it shape can be spawned"),e}},t.prototype.onResize=function(e,t){var r=t*u.BACKGROUND_ASPECT_RATIO,n=t;this.bgBound={x:(e-r)/2,y:0,width:r,height:n},this.shapeBound&&(this.shapeBound.x=this.bgBound.x+this.bgBound.width*u.BOARD_BLOCK_SHIFT_X+this.posX*u.BOARD_BLOCK_SHIFT_X*this.bgBound.width,this.shapeBound.y=this.posY*u.BOARD_BLOCK_SHIFT_Y*this.bgBound.height,this.shapeBound.width=this.colisionDetectionMatrix.length*this.bgBound.width/u.BACKGROUND_BLOCKS_WIDTH,this.shapeBound.height=this.colisionDetectionMatrix[0].length*this.bgBound.height/u.BACKGROUND_BLOCKS_HEIGHT)},t.prototype.update=function(e,t){var r;if(this.gameState.currentState===c.GamePhase.PLAYING&&this.moving){if(console.log(t),t.ArrowUp)return this.rotate(),-1;if(t.ArrowDown){if(this.board.tryPosition(this.posX,this.posY+1,this.colisionDetectionMatrix))return this.posY++,this.onResize(this.ctx.canvas.width,this.ctx.canvas.height),this.render(),-1;var n=this.board.tryAdd(this,this.posX,this.posY,this.colisionDetectionMatrix),i=n.check,o=n.num;if(!i)throw new Error("Impossible position");return this.moving=!1,this.tickTime=1/0,l.Game.canSpawn.val=!0,o}if(t.ArrowLeft)this.board.tryPosition(this.posX-1,this.posY,this.colisionDetectionMatrix)&&(this.posX--,this.onResize(this.ctx.canvas.width,this.ctx.canvas.height),this.render());else if(t.ArrowRight)this.board.tryPosition(this.posX+1,this.posY,this.colisionDetectionMatrix)&&(this.posX++,this.onResize(this.ctx.canvas.width,this.ctx.canvas.height),this.render());else if(t.Space){o=0;do{o=this.update(0,((r={keys:["ArrowDown"]}).ArrowDown=!0,r))}while(-1===o);return this.moving=!1,this.tickTime=1/0,l.Game.canSpawn.val=!0,o}return-1}},t.prototype.render=function(){if(this.bgBound.x<=this.ctx.canvas.width&&this.moving){this.shapeBound&&(this.shapeBound.x=this.bgBound.x+this.bgBound.width*u.BOARD_BLOCK_SHIFT_X+this.posX*u.BOARD_BLOCK_SHIFT_X*this.bgBound.width,this.shapeBound.y=this.posY*u.BOARD_BLOCK_SHIFT_Y*this.bgBound.height,this.shapeBound.width=this.colisionDetectionMatrix.length*this.bgBound.width/u.BACKGROUND_BLOCKS_WIDTH,this.shapeBound.height=this.colisionDetectionMatrix[0].length*this.bgBound.height/u.BACKGROUND_BLOCKS_HEIGHT);var e=null;0===this.rotation?e={x:this.shapeBound.x,y:this.shapeBound.y,height:2*this.shapeBound.height/3,width:this.shapeBound.width}:1===this.rotation?e={x:this.shapeBound.x,y:this.shapeBound.y,height:this.shapeBound.height,width:2*this.shapeBound.width/3}:2===this.rotation?e={x:this.shapeBound.x,y:this.shapeBound.y,height:2*this.shapeBound.height/3,width:this.shapeBound.width}:3===this.rotation&&(e={x:this.shapeBound.x,y:this.shapeBound.y,height:this.shapeBound.height,width:2*this.shapeBound.width/3}),(0,s.drawImage)(this.ctx,this.image,e)}},t.prototype.rotate=function(){var e=(this.rotation+1)%4;if(0===e){var t=[[0,1,0],[1,1,1],[0,0,0]];if(this.board.tryPosition(this.posX,this.posY,t))this.rotation=e,this.colisionDetectionMatrix=t,this.image=h.GlobalImageMap.imageMap.get(a.Shapes[this.block].toString()+e.toString()),this.render();else if(this.posX+3>this.board.getSizeX()){var r=this.posX+3-this.board.getSizeX();this.board.tryPosition(this.posX-r,this.posY,t)&&(this.rotation=e,this.colisionDetectionMatrix=t,this.image=h.GlobalImageMap.imageMap.get(a.Shapes[this.block].toString()+e.toString()),this.posX-=r,this.render())}}else 1===e?(t=[[0,1,0],[1,1,0],[0,1,0]],this.board.tryPosition(this.posX,this.posY,t)&&(this.rotation=e,this.colisionDetectionMatrix=t,this.image=h.GlobalImageMap.imageMap.get(a.Shapes[this.block].toString()+e.toString()),this.render())):2===e?(t=[[1,1,1],[0,1,0],[0,0,0]],this.board.tryPosition(this.posX,this.posY,t)?(this.rotation=e,this.colisionDetectionMatrix=t,this.image=h.GlobalImageMap.imageMap.get(a.Shapes[this.block].toString()+e.toString()),this.render()):this.posX+3>this.board.getSizeX()&&(r=this.posX+3-this.board.getSizeX(),this.board.tryPosition(this.posX-r,this.posY,t)&&(this.rotation=e,this.colisionDetectionMatrix=t,this.image=h.GlobalImageMap.imageMap.get(a.Shapes[this.block].toString()+e.toString()),this.posX-=r,this.render()))):3===e&&(t=[[1,0,0],[1,1,0],[1,0,0]],this.board.tryPosition(this.posX,this.posY,t)&&(this.rotation=e,this.colisionDetectionMatrix=t,this.image=h.GlobalImageMap.imageMap.get(a.Shapes[this.block].toString()+e.toString()),this.render()))},t.prototype.hasColided=function(){return this.moving},t}(f);t.ShapeT=d;var b=function(e){function t(t,r,n,i,o,a,u,s,c,l){return e.call(this,t,r,n,i,o,[[1,1],[1,1]],a,u,s,c,l)||this}return i(t,e),t.prototype.onCreate=function(){if(this.board){var e=this.board.tryPosition(this.posX,this.posY,this.colisionDetectionMatrix);return console.log(e,"log from shape.ts checking it shape can be spawned"),e}},t.prototype.onResize=function(e,t){var r=t*u.BACKGROUND_ASPECT_RATIO,n=t;this.bgBound={x:(e-r)/2,y:0,width:r,height:n},this.shapeBound&&(this.shapeBound.x=this.bgBound.x+this.bgBound.width*u.BOARD_BLOCK_SHIFT_X+this.posX*u.BOARD_BLOCK_SHIFT_X*this.bgBound.width,this.shapeBound.y=this.posY*u.BOARD_BLOCK_SHIFT_Y*this.bgBound.height,this.shapeBound.width=this.colisionDetectionMatrix.length*this.bgBound.width/u.BACKGROUND_BLOCKS_WIDTH,this.shapeBound.height=this.colisionDetectionMatrix[0].length*this.bgBound.height/u.BACKGROUND_BLOCKS_HEIGHT)},t.prototype.update=function(e,t){var r;if(this.gameState.currentState===c.GamePhase.PLAYING&&this.moving){if(console.log(t),t.ArrowUp)return this.rotate(),-1;if(t.ArrowDown){if(this.board.tryPosition(this.posX,this.posY+1,this.colisionDetectionMatrix))return this.posY++,this.onResize(this.ctx.canvas.width,this.ctx.canvas.height),this.render(),-1;var n=this.board.tryAdd(this,this.posX,this.posY,this.colisionDetectionMatrix),i=n.check,o=n.num;if(!i)throw new Error("Impossible position");return this.moving=!1,this.tickTime=1/0,l.Game.canSpawn.val=!0,o}if(t.ArrowLeft)this.board.tryPosition(this.posX-1,this.posY,this.colisionDetectionMatrix)&&(this.posX--,this.onResize(this.ctx.canvas.width,this.ctx.canvas.height),this.render());else if(t.ArrowRight)this.board.tryPosition(this.posX+1,this.posY,this.colisionDetectionMatrix)&&(this.posX++,this.onResize(this.ctx.canvas.width,this.ctx.canvas.height),this.render());else if(t.Space){o=0;do{o=this.update(0,((r={keys:["ArrowDown"]}).ArrowDown=!0,r))}while(-1===o);return this.moving=!1,this.tickTime=1/0,l.Game.canSpawn.val=!0,o}return-1}},t.prototype.render=function(){this.bgBound.x<=this.ctx.canvas.width&&this.moving&&(this.shapeBound&&(this.shapeBound.x=this.bgBound.x+this.bgBound.width*u.BOARD_BLOCK_SHIFT_X+this.posX*u.BOARD_BLOCK_SHIFT_X*this.bgBound.width,this.shapeBound.y=this.posY*u.BOARD_BLOCK_SHIFT_Y*this.bgBound.height,this.shapeBound.width=this.colisionDetectionMatrix.length*this.bgBound.width/u.BACKGROUND_BLOCKS_WIDTH,this.shapeBound.height=this.colisionDetectionMatrix[0].length*this.bgBound.height/u.BACKGROUND_BLOCKS_HEIGHT),(0,s.drawImage)(this.ctx,this.image,this.shapeBound))},t.prototype.rotate=function(){},t.prototype.hasColided=function(){return this.moving},t}(f);t.ShapeO=b;var v=function(e){function t(t,r,n,i,o,a,u,s,c,l){return e.call(this,t,r,n,i,o,[[0,1,1],[1,1,0],[0,0,0]],a,u,s,c,l)||this}return i(t,e),t.prototype.onCreate=function(){if(this.board){var e=this.board.tryPosition(this.posX,this.posY,this.colisionDetectionMatrix);return console.log(e,"log from shape.ts checking it shape can be spawned"),e}},t.prototype.onResize=function(e,t){var r=t*u.BACKGROUND_ASPECT_RATIO,n=t;this.bgBound={x:(e-r)/2,y:0,width:r,height:n},this.shapeBound&&(this.shapeBound.x=this.bgBound.x+this.bgBound.width*u.BOARD_BLOCK_SHIFT_X+this.posX*u.BOARD_BLOCK_SHIFT_X*this.bgBound.width,this.shapeBound.y=this.posY*u.BOARD_BLOCK_SHIFT_Y*this.bgBound.height,this.shapeBound.width=this.colisionDetectionMatrix.length*this.bgBound.width/u.BACKGROUND_BLOCKS_WIDTH,this.shapeBound.height=this.colisionDetectionMatrix[0].length*this.bgBound.height/u.BACKGROUND_BLOCKS_HEIGHT)},t.prototype.update=function(e,t){var r;if(this.gameState.currentState===c.GamePhase.PLAYING&&this.moving){if(console.log(t),t.ArrowUp)return this.rotate(),-1;if(t.ArrowDown){if(this.board.tryPosition(this.posX,this.posY+1,this.colisionDetectionMatrix))return this.posY++,this.onResize(this.ctx.canvas.width,this.ctx.canvas.height),this.render(),-1;var n=this.board.tryAdd(this,this.posX,this.posY,this.colisionDetectionMatrix),i=n.check,o=n.num;if(!i)throw new Error("Impossible position");return this.moving=!1,this.tickTime=1/0,l.Game.canSpawn.val=!0,o}if(t.ArrowLeft)this.board.tryPosition(this.posX-1,this.posY,this.colisionDetectionMatrix)&&(this.posX--,this.onResize(this.ctx.canvas.width,this.ctx.canvas.height),this.render());else if(t.ArrowRight)this.board.tryPosition(this.posX+1,this.posY,this.colisionDetectionMatrix)&&(this.posX++,this.onResize(this.ctx.canvas.width,this.ctx.canvas.height),this.render());else if(t.Space){o=0;do{o=this.update(0,((r={keys:["ArrowDown"]}).ArrowDown=!0,r))}while(-1===o);return this.moving=!1,this.tickTime=1/0,l.Game.canSpawn.val=!0,o}return-1}},t.prototype.render=function(){if(this.bgBound.x<=this.ctx.canvas.width&&this.moving){this.shapeBound&&(this.shapeBound.x=this.bgBound.x+this.bgBound.width*u.BOARD_BLOCK_SHIFT_X+this.posX*u.BOARD_BLOCK_SHIFT_X*this.bgBound.width,this.shapeBound.y=this.posY*u.BOARD_BLOCK_SHIFT_Y*this.bgBound.height,this.shapeBound.width=this.colisionDetectionMatrix.length*this.bgBound.width/u.BACKGROUND_BLOCKS_WIDTH,this.shapeBound.height=this.colisionDetectionMatrix[0].length*this.bgBound.height/u.BACKGROUND_BLOCKS_HEIGHT);var e=null;0===this.rotation?e={x:this.shapeBound.x,y:this.shapeBound.y,height:2*this.shapeBound.height/3,width:this.shapeBound.width}:1===this.rotation&&(e={x:this.shapeBound.x,y:this.shapeBound.y,height:this.shapeBound.height,width:2*this.shapeBound.width/3}),(0,s.drawImage)(this.ctx,this.image,e)}},t.prototype.rotate=function(){var e=(this.rotation+1)%2;if(0===e){var t=[[0,1,1],[1,1,0],[0,0,0]];if(this.board.tryPosition(this.posX,this.posY,t))this.rotation=e,this.colisionDetectionMatrix=t,this.image=h.GlobalImageMap.imageMap.get(a.Shapes[this.block].toString()+e.toString()),this.render();else if(this.posX+3>this.board.getSizeX()){var r=this.posX+3-this.board.getSizeX();this.board.tryPosition(this.posX-r,this.posY,t)&&(this.rotation=e,this.colisionDetectionMatrix=t,this.image=h.GlobalImageMap.imageMap.get(a.Shapes[this.block].toString()+e.toString()),this.posX-=r,this.render())}}else 1===e&&(t=[[1,0,0],[1,1,0],[0,1,0]],this.board.tryPosition(this.posX,this.posY,t)&&(this.rotation=e,this.colisionDetectionMatrix=t,this.image=h.GlobalImageMap.imageMap.get(a.Shapes[this.block].toString()+e.toString()),this.render()))},t.prototype.hasColided=function(){return this.moving},t}(f);t.ShapeS=v;var y=function(e){function t(t,r,n,i,o,a,u,s,c,l){return e.call(this,t,r,n,i,o,[[1,1,0],[0,1,1],[0,0,0]],a,u,s,c,l)||this}return i(t,e),t.prototype.onCreate=function(){if(this.board){var e=this.board.tryPosition(this.posX,this.posY,this.colisionDetectionMatrix);return console.log(e,"log from shape.ts checking it shape can be spawned"),e}},t.prototype.onResize=function(e,t){var r=t*u.BACKGROUND_ASPECT_RATIO,n=t;this.bgBound={x:(e-r)/2,y:0,width:r,height:n},this.shapeBound&&(this.shapeBound.x=this.bgBound.x+this.bgBound.width*u.BOARD_BLOCK_SHIFT_X+this.posX*u.BOARD_BLOCK_SHIFT_X*this.bgBound.width,this.shapeBound.y=this.posY*u.BOARD_BLOCK_SHIFT_Y*this.bgBound.height,this.shapeBound.width=this.colisionDetectionMatrix.length*this.bgBound.width/u.BACKGROUND_BLOCKS_WIDTH,this.shapeBound.height=this.colisionDetectionMatrix[0].length*this.bgBound.height/u.BACKGROUND_BLOCKS_HEIGHT)},t.prototype.update=function(e,t){var r;if(this.gameState.currentState===c.GamePhase.PLAYING&&this.moving){if(console.log(t),t.ArrowUp)return this.rotate(),-1;if(t.ArrowDown){if(this.board.tryPosition(this.posX,this.posY+1,this.colisionDetectionMatrix))return this.posY++,this.onResize(this.ctx.canvas.width,this.ctx.canvas.height),this.render(),-1;var n=this.board.tryAdd(this,this.posX,this.posY,this.colisionDetectionMatrix),i=n.check,o=n.num;if(!i)throw new Error("Impossible position");return this.moving=!1,this.tickTime=1/0,l.Game.canSpawn.val=!0,o}if(t.ArrowLeft)this.board.tryPosition(this.posX-1,this.posY,this.colisionDetectionMatrix)&&(this.posX--,this.onResize(this.ctx.canvas.width,this.ctx.canvas.height),this.render());else if(t.ArrowRight)this.board.tryPosition(this.posX+1,this.posY,this.colisionDetectionMatrix)&&(this.posX++,this.onResize(this.ctx.canvas.width,this.ctx.canvas.height),this.render());else if(t.Space){o=0;do{o=this.update(0,((r={keys:["ArrowDown"]}).ArrowDown=!0,r))}while(-1===o);return this.moving=!1,this.tickTime=1/0,l.Game.canSpawn.val=!0,o}return-1}},t.prototype.render=function(){if(this.bgBound.x<=this.ctx.canvas.width&&this.moving){this.shapeBound&&(this.shapeBound.x=this.bgBound.x+this.bgBound.width*u.BOARD_BLOCK_SHIFT_X+this.posX*u.BOARD_BLOCK_SHIFT_X*this.bgBound.width,this.shapeBound.y=this.posY*u.BOARD_BLOCK_SHIFT_Y*this.bgBound.height,this.shapeBound.width=this.colisionDetectionMatrix.length*this.bgBound.width/u.BACKGROUND_BLOCKS_WIDTH,this.shapeBound.height=this.colisionDetectionMatrix[0].length*this.bgBound.height/u.BACKGROUND_BLOCKS_HEIGHT);var e=null;0===this.rotation?e={x:this.shapeBound.x,y:this.shapeBound.y,height:2*this.shapeBound.height/3,width:this.shapeBound.width}:1===this.rotation&&(e={x:this.shapeBound.x,y:this.shapeBound.y,height:this.shapeBound.height,width:2*this.shapeBound.width/3}),(0,s.drawImage)(this.ctx,this.image,e)}},t.prototype.rotate=function(){var e=(this.rotation+1)%2;if(0===e){var t=[[1,1,0],[0,1,1],[0,0,0]];if(this.board.tryPosition(this.posX,this.posY,t))this.rotation=e,this.colisionDetectionMatrix=t,this.image=h.GlobalImageMap.imageMap.get(a.Shapes[this.block].toString()+e.toString()),this.render();else if(this.posX+3>this.board.getSizeX()){var r=this.posX+3-this.board.getSizeX();this.board.tryPosition(this.posX-r,this.posY,t)&&(this.rotation=e,this.colisionDetectionMatrix=t,this.image=h.GlobalImageMap.imageMap.get(a.Shapes[this.block].toString()+e.toString()),this.posX-=r,this.render())}}else 1===e&&(t=[[0,1,0],[1,1,0],[1,0,0]],this.board.tryPosition(this.posX,this.posY,t)&&(this.rotation=e,this.colisionDetectionMatrix=t,this.image=h.GlobalImageMap.imageMap.get(a.Shapes[this.block].toString()+e.toString()),this.render()))},t.prototype.hasColided=function(){return this.moving},t}(f);t.ShapeZ=y;var m=function(e){function t(t,r,n,i,o,a,u,s,c,l){return e.call(this,t,r,n,i,o,[[0,0,1],[1,1,1],[0,0,0]],a,u,s,c,l)||this}return i(t,e),t.prototype.onCreate=function(){if(this.board){var e=this.board.tryPosition(this.posX,this.posY,this.colisionDetectionMatrix);return console.log(e,"log from shape.ts checking it shape can be spawned"),e}},t.prototype.onResize=function(e,t){var r=t*u.BACKGROUND_ASPECT_RATIO,n=t;this.bgBound={x:(e-r)/2,y:0,width:r,height:n},this.shapeBound&&(this.shapeBound.x=this.bgBound.x+this.bgBound.width*u.BOARD_BLOCK_SHIFT_X+this.posX*u.BOARD_BLOCK_SHIFT_X*this.bgBound.width,this.shapeBound.y=this.posY*u.BOARD_BLOCK_SHIFT_Y*this.bgBound.height,this.shapeBound.width=this.colisionDetectionMatrix.length*this.bgBound.width/u.BACKGROUND_BLOCKS_WIDTH,this.shapeBound.height=this.colisionDetectionMatrix[0].length*this.bgBound.height/u.BACKGROUND_BLOCKS_HEIGHT)},t.prototype.update=function(e,t){var r;if(this.gameState.currentState===c.GamePhase.PLAYING&&this.moving){if(console.log(t),t.ArrowUp)return this.rotate(),-1;if(t.ArrowDown){if(this.board.tryPosition(this.posX,this.posY+1,this.colisionDetectionMatrix))return this.posY++,this.onResize(this.ctx.canvas.width,this.ctx.canvas.height),this.render(),-1;var n=this.board.tryAdd(this,this.posX,this.posY,this.colisionDetectionMatrix),i=n.check,o=n.num;if(!i)throw new Error("Impossible position");return this.moving=!1,this.tickTime=1/0,l.Game.canSpawn.val=!0,o}if(t.ArrowLeft)this.board.tryPosition(this.posX-1,this.posY,this.colisionDetectionMatrix)&&(this.posX--,this.onResize(this.ctx.canvas.width,this.ctx.canvas.height),this.render());else if(t.ArrowRight)this.board.tryPosition(this.posX+1,this.posY,this.colisionDetectionMatrix)&&(this.posX++,this.onResize(this.ctx.canvas.width,this.ctx.canvas.height),this.render());else if(t.Space){o=0;do{o=this.update(0,((r={keys:["ArrowDown"]}).ArrowDown=!0,r))}while(-1===o);return this.moving=!1,this.tickTime=1/0,l.Game.canSpawn.val=!0,o}return-1}},t.prototype.render=function(){if(this.bgBound.x<=this.ctx.canvas.width&&this.moving){this.shapeBound&&(this.shapeBound.x=this.bgBound.x+this.bgBound.width*u.BOARD_BLOCK_SHIFT_X+this.posX*u.BOARD_BLOCK_SHIFT_X*this.bgBound.width,this.shapeBound.y=this.posY*u.BOARD_BLOCK_SHIFT_Y*this.bgBound.height,this.shapeBound.width=this.colisionDetectionMatrix.length*this.bgBound.width/u.BACKGROUND_BLOCKS_WIDTH,this.shapeBound.height=this.colisionDetectionMatrix[0].length*this.bgBound.height/u.BACKGROUND_BLOCKS_HEIGHT);var e=null;0===this.rotation?e={x:this.shapeBound.x,y:this.shapeBound.y,height:2*this.shapeBound.height/3,width:this.shapeBound.width}:1===this.rotation?e={x:this.shapeBound.x,y:this.shapeBound.y,height:this.shapeBound.height,width:2*this.shapeBound.width/3}:2===this.rotation?e={x:this.shapeBound.x,y:this.shapeBound.y,height:2*this.shapeBound.height/3,width:this.shapeBound.width}:3===this.rotation&&(e={x:this.shapeBound.x,y:this.shapeBound.y,height:this.shapeBound.height,width:2*this.shapeBound.width/3}),(0,s.drawImage)(this.ctx,this.image,e)}},t.prototype.rotate=function(){var e=(this.rotation+1)%4;if(0===e){var t=[[0,0,1],[1,1,1],[0,0,0]];if(this.board.tryPosition(this.posX,this.posY,t))this.rotation=e,this.colisionDetectionMatrix=t,this.image=h.GlobalImageMap.imageMap.get(a.Shapes[this.block].toString()+e.toString()),this.render();else if(this.posX+3>this.board.getSizeX()){var r=this.posX+3-this.board.getSizeX();this.board.tryPosition(this.posX-r,this.posY,t)&&(this.rotation=e,this.colisionDetectionMatrix=t,this.image=h.GlobalImageMap.imageMap.get(a.Shapes[this.block].toString()+e.toString()),this.posX-=r,this.render())}}else 1===e?(t=[[1,1,0],[0,1,0],[0,1,0]],this.board.tryPosition(this.posX,this.posY,t)&&(this.rotation=e,this.colisionDetectionMatrix=t,this.image=h.GlobalImageMap.imageMap.get(a.Shapes[this.block].toString()+e.toString()),this.render())):2===e?(t=[[1,1,1],[1,0,0],[0,0,0]],this.board.tryPosition(this.posX,this.posY,t)?(this.rotation=e,this.colisionDetectionMatrix=t,this.image=h.GlobalImageMap.imageMap.get(a.Shapes[this.block].toString()+e.toString()),this.render()):this.posX+3>this.board.getSizeX()&&(r=this.posX+3-this.board.getSizeX(),this.board.tryPosition(this.posX-r,this.posY,t)&&(this.rotation=e,this.colisionDetectionMatrix=t,this.image=h.GlobalImageMap.imageMap.get(a.Shapes[this.block].toString()+e.toString()),this.posX-=r,this.render()))):3===e&&(t=[[1,0,0],[1,0,0],[1,1,0]],this.board.tryPosition(this.posX,this.posY,t)&&(this.rotation=e,this.colisionDetectionMatrix=t,this.image=h.GlobalImageMap.imageMap.get(a.Shapes[this.block].toString()+e.toString()),this.render()))},t.prototype.hasColided=function(){return this.moving},t}(f);t.ShapeL=m;var _=function(e){function t(t,r,n,i,o,a,u,s,c,l){return e.call(this,t,r,n,i,o,[[1,0,0],[1,1,1],[0,0,0]],a,u,s,c,l)||this}return i(t,e),t.prototype.onCreate=function(){if(this.board){var e=this.board.tryPosition(this.posX,this.posY,this.colisionDetectionMatrix);return console.log(e,"log from shape.ts checking it shape can be spawned"),e}},t.prototype.onResize=function(e,t){var r=t*u.BACKGROUND_ASPECT_RATIO,n=t;this.bgBound={x:(e-r)/2,y:0,width:r,height:n},this.shapeBound&&(this.shapeBound.x=this.bgBound.x+this.bgBound.width*u.BOARD_BLOCK_SHIFT_X+this.posX*u.BOARD_BLOCK_SHIFT_X*this.bgBound.width,this.shapeBound.y=this.posY*u.BOARD_BLOCK_SHIFT_Y*this.bgBound.height,this.shapeBound.width=this.colisionDetectionMatrix.length*this.bgBound.width/u.BACKGROUND_BLOCKS_WIDTH,this.shapeBound.height=this.colisionDetectionMatrix[0].length*this.bgBound.height/u.BACKGROUND_BLOCKS_HEIGHT)},t.prototype.update=function(e,t){var r;if(this.gameState.currentState===c.GamePhase.PLAYING&&this.moving){if(console.log(t),t.ArrowUp)return this.rotate(),-1;if(t.ArrowDown){if(this.board.tryPosition(this.posX,this.posY+1,this.colisionDetectionMatrix))return this.posY++,this.onResize(this.ctx.canvas.width,this.ctx.canvas.height),this.render(),-1;var n=this.board.tryAdd(this,this.posX,this.posY,this.colisionDetectionMatrix),i=n.check,o=n.num;if(!i)throw new Error("Impossible position");return this.moving=!1,this.tickTime=1/0,l.Game.canSpawn.val=!0,o}if(t.ArrowLeft)this.board.tryPosition(this.posX-1,this.posY,this.colisionDetectionMatrix)&&(this.posX--,this.onResize(this.ctx.canvas.width,this.ctx.canvas.height),this.render());else if(t.ArrowRight)this.board.tryPosition(this.posX+1,this.posY,this.colisionDetectionMatrix)&&(this.posX++,this.onResize(this.ctx.canvas.width,this.ctx.canvas.height),this.render());else if(t.Space){o=0;do{o=this.update(0,((r={keys:["ArrowDown"]}).ArrowDown=!0,r))}while(-1===o);return this.moving=!1,this.tickTime=1/0,l.Game.canSpawn.val=!0,o}return-1}},t.prototype.render=function(){if(this.bgBound.x<=this.ctx.canvas.width&&this.moving){this.shapeBound&&(this.shapeBound.x=this.bgBound.x+this.bgBound.width*u.BOARD_BLOCK_SHIFT_X+this.posX*u.BOARD_BLOCK_SHIFT_X*this.bgBound.width,this.shapeBound.y=this.posY*u.BOARD_BLOCK_SHIFT_Y*this.bgBound.height,this.shapeBound.width=this.colisionDetectionMatrix.length*this.bgBound.width/u.BACKGROUND_BLOCKS_WIDTH,this.shapeBound.height=this.colisionDetectionMatrix[0].length*this.bgBound.height/u.BACKGROUND_BLOCKS_HEIGHT);var e=null;0===this.rotation?e={x:this.shapeBound.x,y:this.shapeBound.y,height:2*this.shapeBound.height/3,width:this.shapeBound.width}:1===this.rotation?e={x:this.shapeBound.x,y:this.shapeBound.y,height:this.shapeBound.height,width:2*this.shapeBound.width/3}:2===this.rotation?e={x:this.shapeBound.x,y:this.shapeBound.y,height:2*this.shapeBound.height/3,width:this.shapeBound.width}:3===this.rotation&&(e={x:this.shapeBound.x,y:this.shapeBound.y,height:this.shapeBound.height,width:2*this.shapeBound.width/3}),(0,s.drawImage)(this.ctx,this.image,e)}},t.prototype.rotate=function(){var e=(this.rotation+1)%4;if(0===e){var t=[[1,0,0],[1,1,1],[0,0,0]];if(this.board.tryPosition(this.posX,this.posY,t))this.rotation=e,this.colisionDetectionMatrix=t,this.image=h.GlobalImageMap.imageMap.get(a.Shapes[this.block].toString()+e.toString()),this.render();else if(this.posX+3>this.board.getSizeX()){var r=this.posX+3-this.board.getSizeX();this.board.tryPosition(this.posX-r,this.posY,t)&&(this.rotation=e,this.colisionDetectionMatrix=t,this.image=h.GlobalImageMap.imageMap.get(a.Shapes[this.block].toString()+e.toString()),this.posX-=r,this.render())}}else 1===e?(t=[[0,1,0],[0,1,0],[1,1,0]],this.board.tryPosition(this.posX,this.posY,t)&&(this.rotation=e,this.colisionDetectionMatrix=t,this.image=h.GlobalImageMap.imageMap.get(a.Shapes[this.block].toString()+e.toString()),this.render())):2===e?(t=[[1,1,1],[0,0,1],[0,0,0]],this.board.tryPosition(this.posX,this.posY,t)?(this.rotation=e,this.colisionDetectionMatrix=t,this.image=h.GlobalImageMap.imageMap.get(a.Shapes[this.block].toString()+e.toString()),this.render()):this.posX+3>this.board.getSizeX()&&(r=this.posX+3-this.board.getSizeX(),this.board.tryPosition(this.posX-r,this.posY,t)&&(this.rotation=e,this.colisionDetectionMatrix=t,this.image=h.GlobalImageMap.imageMap.get(a.Shapes[this.block].toString()+e.toString()),this.posX-=r,this.render()))):3===e&&(t=[[1,1,0],[1,0,0],[1,0,0]],this.board.tryPosition(this.posX,this.posY,t)&&(this.rotation=e,this.colisionDetectionMatrix=t,this.image=h.GlobalImageMap.imageMap.get(a.Shapes[this.block].toString()+e.toString()),this.render()))},t.prototype.hasColided=function(){return this.moving},t}(f);t.ShapeJ=_;var g=function(e){function t(t,r,n,i,o,a,u,s,c,l,h){var f=e.call(this,t,r,n,i,o,[[1]],a,u,s,c,l)||this;return f.type=h,f}return i(t,e),t.prototype.getImage=function(){return this.image},t.prototype.getBlock=function(){return this.block},t.prototype.getBgBounds=function(){return this.bgBound},t.prototype.getType=function(){return this.type},t.prototype.onCreate=function(){if(this.board)return this.board.tryPosition(this.posX,this.posY,this.colisionDetectionMatrix)},t.prototype.onResize=function(e,t){var r=t*u.BACKGROUND_ASPECT_RATIO,n=t;this.bgBound={x:(e-r)/2,y:0,width:r,height:n},this.shapeBound&&(this.shapeBound.x=this.bgBound.x+this.bgBound.width*u.BOARD_BLOCK_SHIFT_X+this.posX*u.BOARD_BLOCK_SHIFT_X*this.bgBound.width,this.shapeBound.y=this.posY*u.BOARD_BLOCK_SHIFT_Y*this.bgBound.height,this.shapeBound.width=this.colisionDetectionMatrix.length*this.bgBound.width/u.BACKGROUND_BLOCKS_WIDTH,this.shapeBound.height=this.colisionDetectionMatrix[0].length*this.bgBound.height/u.BACKGROUND_BLOCKS_HEIGHT)},t.prototype.render=function(){this.bgBound.x<=this.ctx.canvas.width&&this.shapeBound&&(this.shapeBound.x=this.bgBound.x+this.bgBound.width*u.BOARD_BLOCK_SHIFT_X+this.posX*u.BOARD_BLOCK_SHIFT_X*this.bgBound.width,this.shapeBound.y=this.posY*u.BOARD_BLOCK_SHIFT_Y*this.bgBound.height,this.shapeBound.width=this.colisionDetectionMatrix.length*this.bgBound.width/u.BACKGROUND_BLOCKS_WIDTH,this.shapeBound.height=this.colisionDetectionMatrix[0].length*this.bgBound.height/u.BACKGROUND_BLOCKS_HEIGHT,(0,s.drawImage)(this.ctx,this.image,this.shapeBound))},t.prototype.update=function(e,t){},t.prototype.rotate=function(){},t.prototype.hasColided=function(){return!0},t}(f);t.Block=g},8913:(e,t,r)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.GAME_SPEED=t.MAXIMUM_DELTA_TIME=t.INITIAL_GAME_STATE=t.NUM_SHAPES=t.INITIAL_TIME_MS=t.MIN_INTERVAL_MS=t.STARTING_DELTA_TIME=t.FONT_SHADOW_SIZE=t.FONT_SHADOW_COLOR=t.FONT_COLOR=t.LARGE_TEXT_FONT=t.MEDIUM_TEXT_FONT=t.SMALL_TEXT_FONT=t.BOARD_BLOCK_SHIFT_Y=t.BOARD_BLOCK_SHIFT_X=t.BOARD_BORDER_SHIFT_Y=t.BOARD_BORDER_SHIFT_Y_ALT=t.BOARD_BORDER_SHIFT_X=t.BACKGROUND_BLOCKS_WIDTH=t.BACKGROUND_BLOCKS_HEIGHT=t.BOARD_BLOCKS_HEIGHt=t.BOARD_BLOCKS_HEIGHt_ALT=t.BOARD_BLOCKS_WIDTH=t.BACKGROUND_ASPECT_RATIO=t.BACKGROUND_ASPECT_RATIO_ALT=t.API_URL=void 0;var n=r(1600);t.API_URL="http://localhost:3000",t.BACKGROUND_ASPECT_RATIO_ALT=6/11,t.BACKGROUND_ASPECT_RATIO=12/19,t.BOARD_BLOCKS_WIDTH=10,t.BOARD_BLOCKS_HEIGHt_ALT=20,t.BOARD_BLOCKS_HEIGHt=18,t.BACKGROUND_BLOCKS_HEIGHT=19,t.BACKGROUND_BLOCKS_WIDTH=12,t.BOARD_BORDER_SHIFT_X=1/12,t.BOARD_BORDER_SHIFT_Y_ALT=1/22,t.BOARD_BORDER_SHIFT_Y=0,t.BOARD_BLOCK_SHIFT_X=1/12,t.BOARD_BLOCK_SHIFT_Y=1/19,t.SMALL_TEXT_FONT='1rem "Press Start 2P"',t.MEDIUM_TEXT_FONT='2rem "Press Start 2P"',t.LARGE_TEXT_FONT='3rem "Press Start 2P"',t.FONT_COLOR="white",t.FONT_SHADOW_COLOR="gray",t.FONT_SHADOW_SIZE=3,t.STARTING_DELTA_TIME=.8,t.MIN_INTERVAL_MS=50,t.INITIAL_TIME_MS=5e3,t.NUM_SHAPES=7,t.INITIAL_GAME_STATE={currentState:n.GamePhase.ENTER_NAME,score:0,player:{id:0,username:"",score:0,linesCleared:0,elementsDroped:0,timePlaying:0,highscore:0}},t.MAXIMUM_DELTA_TIME=1/30,t.GAME_SPEED=1},1600:(e,t)=>{var r;Object.defineProperty(t,"__esModule",{value:!0}),t.GamePhase=void 0,function(e){e[e.ENTER_NAME=0]="ENTER_NAME",e[e.READY=1]="READY",e[e.PLAYING=2]="PLAYING",e[e.GAME_OVER=3]="GAME_OVER"}(r||(t.GamePhase=r={}))},6211:(e,t)=>{var r;Object.defineProperty(t,"__esModule",{value:!0}),t.Shapes=void 0,function(e){e[e.I=0]="I",e[e.T=1]="T",e[e.O=2]="O",e[e.S=3]="S",e[e.Z=4]="Z",e[e.L=5]="L",e[e.J=6]="J"}(r||(t.Shapes=r={}))},7769:function(e,t,r){var n=this&&this.__assign||function(){return n=Object.assign||function(e){for(var t,r=1,n=arguments.length;r<n;r++)for(var i in t=arguments[r])Object.prototype.hasOwnProperty.call(t,i)&&(e[i]=t[i]);return e},n.apply(this,arguments)};Object.defineProperty(t,"__esModule",{value:!0}),t.Game=void 0;var i=r(2872),o=r(1600),a=r(4555),u=r(1490),s=r(8860),c=r(4083),l=r(3445),h=r(8913),f=r(6338),p=r(7419),d=r(6250),b=r(166),v=r(1881);t.Game=function(){function e(t){if(!t.getContext)throw new Error("Canvas is not supported in this browser");this.canvas=t,this.ctx=t.getContext("2d"),this.ctx.imageSmoothingEnabled=!1,e.gameState=h.INITIAL_GAME_STATE,this.background=null,this.shapes=[],this.enterUsername=new u.EnterUsername(this.ctx,e.gameState),this.highscores=new s.Highscores(this.ctx,e.gameState),this.overlay=new c.Overlay(this.ctx,e.gameState),this.board=new d.Board(this.ctx,e.gameState,h.BOARD_BLOCKS_WIDTH,h.BOARD_BLOCKS_HEIGHt),e.canSpawn.val=!0,this.mainLoop$=(0,f.initializeMainLoop)(),v.TickerReset.stop()}return e.prototype.init=function(){var t=this;(0,i.fromEvent)(window,"resize").pipe((0,i.debounceTime)(100)).subscribe((function(){t.resize(window.innerWidth,window.innerHeight)})),this.mainLoop$.subscribe((function(e){var r=e[0],n=e[1],i=r*h.GAME_SPEED;t.update(i,n),t.render()})),(0,a.loadBackgroundImage$)().subscribe((function(r){t.background=new l.Background(t.ctx,e.gameState,r),t.shapeSpawner$=(0,b.startSpawningShapes)(t.ctx,e.gameState,t.board,t.background.getRect()[0])}))},e.prototype.startRound=function(){var t=this;this.shapeSpawner$?(e.canSpawn.val=!0,e.gameState.currentState=o.GamePhase.PLAYING,v.TickerReset.stop(),v.TickerReset.start(),this.shapeSubscription=this.shapeSpawner$.subscribe((function(e){e&&(console.log("log from subscribe",e),!1===e.onCreate()&&t.die(),t.shapes.push(e),console.log("SHAPE LENGth",t.shapes.length))})),e.gameState.score=0,e.gameState.player.score=0):console.log(":(")},e.prototype.updateLogic=function(t,r){switch(e.gameState.currentState){case o.GamePhase.PLAYING:break;case o.GamePhase.READY:case o.GamePhase.GAME_OVER:e.canSpawn.val=!1,r.Space&&(this.cleanShapesAndBoard(),this.startRound());break;case o.GamePhase.ENTER_NAME:e.canSpawn.val=!1}},e.prototype.resize=function(e,t){this.canvas.width=e,this.canvas.height=t,this.ctx.imageSmoothingEnabled=!1,this.background.onResize(e,t),this.shapes.forEach((function(r){return r.onResize(e,t)})),this.enterUsername.onResize(e,t),this.highscores.onResize(e,t),this.overlay.onResize(e,t),this.board.onResize(e,t)},e.prototype.render=function(){var e=this.ctx.canvas.width,t=this.ctx.canvas.height;this.ctx.clearRect(0,0,e,t),this.background&&this.background.render(),this.shapes.forEach((function(e){return e.render()})),this.overlay.render(),this.highscores.render(),this.enterUsername.render(),this.board.render()},e.prototype.update=function(e,t){this.background&&this.background.update(e,t),this.shapes.forEach((function(r){return r.update(e,t)})),this.overlay.update(e,t),this.enterUsername.update(e,t),this.highscores.update(e,t),this.board.update(e,t),this.updateLogic(e,t)},e.prototype.die=function(){v.TickerReset.stop(),this.shapes=[],this.shapeSubscription.unsubscribe(),e.gameState.currentState=o.GamePhase.GAME_OVER,e.gameState.score>e.gameState.player.highscore&&(e.gameState.player.highscore=e.gameState.score,(0,p.putPlayerProfile)(e.gameState.player).then((function(t){e.gameState.player=n(n({},t),{score:e.gameState.score})}))),this.cleanShapesAndBoard()},e.prototype.cleanShapesAndBoard=function(){this.shapes=[],this.board.clear()},e.gameState=h.INITIAL_GAME_STATE,e.canSpawn={val:!0},e}()},7419:function(e,t,r){var n=this&&this.__awaiter||function(e,t,r,n){return new(r||(r=Promise))((function(i,o){function a(e){try{s(n.next(e))}catch(e){o(e)}}function u(e){try{s(n.throw(e))}catch(e){o(e)}}function s(e){var t;e.done?i(e.value):(t=e.value,t instanceof r?t:new r((function(e){e(t)}))).then(a,u)}s((n=n.apply(e,t||[])).next())}))},i=this&&this.__generator||function(e,t){var r,n,i,o,a={label:0,sent:function(){if(1&i[0])throw i[1];return i[1]},trys:[],ops:[]};return o={next:u(0),throw:u(1),return:u(2)},"function"==typeof Symbol&&(o[Symbol.iterator]=function(){return this}),o;function u(u){return function(s){return function(u){if(r)throw new TypeError("Generator is already executing.");for(;o&&(o=0,u[0]&&(a=0)),a;)try{if(r=1,n&&(i=2&u[0]?n.return:u[0]?n.throw||((i=n.return)&&i.call(n),0):n.next)&&!(i=i.call(n,u[1])).done)return i;switch(n=0,i&&(u=[2&u[0],i.value]),u[0]){case 0:case 1:i=u;break;case 4:return a.label++,{value:u[1],done:!1};case 5:a.label++,n=u[1],u=[0];continue;case 7:u=a.ops.pop(),a.trys.pop();continue;default:if(!((i=(i=a.trys).length>0&&i[i.length-1])||6!==u[0]&&2!==u[0])){a=0;continue}if(3===u[0]&&(!i||u[1]>i[0]&&u[1]<i[3])){a.label=u[1];break}if(6===u[0]&&a.label<i[1]){a.label=i[1],i=u;break}if(i&&a.label<i[2]){a.label=i[2],a.ops.push(u);break}i[2]&&a.ops.pop(),a.trys.pop();continue}u=t.call(e,a)}catch(e){u=[6,e],n=0}finally{r=i=0}if(5&u[0])throw u[1];return{value:u[0]?u[1]:void 0,done:!0}}([u,s])}}};Object.defineProperty(t,"__esModule",{value:!0}),t.putPlayerProfile=t.fetchSprite$=t.fetchHighScore$=t.fetchPlayerProfile$=t.fetchFromApi$=void 0;var o=r(2872),a=r(8913),u=function(e,t){return(0,o.from)(fetch("".concat(a.API_URL,"/").concat(e)).then((function(e){if(e.ok)return e.json();throw new Error("Failed to fetch")})).catch((function(e){return console.error(e)})))};t.fetchFromApi$=u,t.fetchPlayerProfile$=function(e){return u("users?username=".concat(e))},t.fetchHighScore$=function(){return u("users?_sort=highscore&_order=desc&_limit=5")},t.fetchSprite$=function(){return u("sprites")},t.putPlayerProfile=function(e){var t,r,o,u;return e.id>0?(t="PUT",r="/users/".concat(e.id)):(t="POST",r="/users"),o=r,u={method:t,body:JSON.stringify(e),headers:{"Content-Type":"application/json"}},n(void 0,void 0,void 0,(function(){var e;return i(this,(function(t){switch(t.label){case 0:return[4,fetch(a.API_URL+o,u)];case 1:if(!(e=t.sent()).ok)throw new Error("An error occured while fetching: "+e.status);return[2,e.json()]}}))}))}},5939:(e,t,r)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.formula=t.decreasingIntervalObservable=void 0;var n=r(2872),i=r(8913),o=r(1600),a=r(7769),u=r(1881);t.decreasingIntervalObservable=function(e,t){return(0,n.interval)(e).pipe((0,n.skipWhile)((function(){return a.Game.gameState.currentState!==o.GamePhase.PLAYING})),(0,n.repeat)({delay:function(){return(0,n.of)(a.Game.gameState.currentState===o.GamePhase.PLAYING)}}),(0,n.map)((function(e){return t(i.INITIAL_TIME_MS,e)})),(0,n.concatMap)((function(e){return(0,n.timer)(e)})),(0,n.takeUntil)(u.TickerReset._stop),(0,n.repeat)({delay:function(){return u.TickerReset._start}}))},t.formula=function(e,t){return e/(1+(t-t%5)/5)}},4555:(e,t,r)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.loadShapeSprites$=t.loadBackgroundImage$=void 0;var n=r(2872),i=r(7419);t.loadBackgroundImage$=function(){return(0,n.from)((0,i.fetchSprite$)()).pipe((0,n.mergeMap)((function(e){var t=e.path+e.board,r=new Image;return r.src=t,(0,n.fromEvent)(r,"load").pipe((0,n.map)((function(e){return e.target})))})))},t.loadShapeSprites$=function(){return(0,n.from)((0,i.fetchSprite$)()).pipe((0,n.mergeMap)((function(e){var t=e.shapes.map((function(t){return e.path+t.image})),r=[];return t.forEach((function(e,t){var n=new Image;n.src=e,r.push(n)})),(0,n.fromEvent)(r,"load").pipe((0,n.map)((function(t,r){return{type:e.shapes[r].image.replace(".png",""),img:t.target}})))})))}},6338:(e,t,r)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.initializeMainLoop=void 0;var n=r(2872),i=r(8913),o=r(5939);t.initializeMainLoop=function(){var e=a(),t=(0,o.decreasingIntervalObservable)(i.MIN_INTERVAL_MS,o.formula).pipe((0,n.map)((function(e){var t;return[0,(t={keys:["ArrowDown"]},t.ArrowDown=!0,t)]}))),r=u(e);return(0,n.merge)(t,e.pipe((0,n.withLatestFrom)(r)))};var a=function(){return(0,n.of)(void 0).pipe((0,n.expand)((function(e){return t=e,new n.Observable((function(e){window.requestAnimationFrame((function(r){var n=(t?r-t.timeStamp:0)/1e3;e.next({timeStamp:r,deltaTime:n})}))}));var t})),(0,n.filter)((function(e){return void 0!==e})),(0,n.map)((function(e){return Math.min(e.deltaTime,i.MAXIMUM_DELTA_TIME)})))},u=function(e){return(0,n.fromEvent)(document,"keydown").pipe((0,n.map)((function(e){return{code:e.code,key:e.key}}))).pipe((0,n.buffer)(e),(0,n.map)((function(e){return e.reduce((function(e,t){return e.keys.push(t.key),e[t.code]=!0,e}),{keys:[]})})))}},4575:(e,t,r)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.drawCenteredText=t.drawText=t.drawImageRegion=t.drawImage=t.fillRect=void 0;var n=r(8913);t.fillRect=function(e,t){e.fillRect(t.x,t.y,t.width,t.height)},t.drawImage=function(e,t,r){e.drawImage(t,r.x,r.y,r.width,r.height)},t.drawImageRegion=function(e,t,r,n){e.drawImage(t,n.x,n.y,n.width,n.height,r.x,r.y,r.width,r.height)};var i=function(e,t){e.font=t,e.fillStyle=n.FONT_COLOR,e.shadowColor=n.FONT_SHADOW_COLOR,e.shadowOffsetX=n.FONT_SHADOW_SIZE,e.shadowOffsetY=n.FONT_SHADOW_SIZE},o=function(e){e.shadowColor=void 0,e.shadowOffsetX=0,e.shadowOffsetY=0};t.drawText=function(e,t,r,n,a){i(e,r),e.fillText(t,n,a),o(e)},t.drawCenteredText=function(e,t,r,n,a){i(e,r),e.fillText(t,n-e.measureText(t).width/2,a),o(e)}},166:(e,t,r)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.startSpawningShapes=void 0;var n=r(2872),i=r(2958),o=r(4555),a=r(6211),u=r(8913),s=r(7769),c=r(6618);t.startSpawningShapes=function(e,t,r,l){return(0,n.interval)(u.MIN_INTERVAL_MS).pipe((0,n.filter)((function(){return s.Game.canSpawn.val})),(0,n.tap)((function(){return s.Game.canSpawn.val=!1})),(0,n.switchMap)((function(){return function(e,t,r,u,s){return(0,o.loadShapeSprites$)().pipe((0,n.switchMap)((function(o){var l,h=new Map;return h.set(o.type,o.img),c.GlobalImageMap.imageMap.set(o.type,o.img),l=0===e&&"I0"===o.type?new i.ShapeI(t,r,h.get("I0"),a.Shapes.I,0,!0,u,s,4,0):1===e&&"T0"===o.type?new i.ShapeT(t,r,h.get("T0"),a.Shapes.T,0,!0,u,s,4,0):2===e&&"O0"===o.type?new i.ShapeO(t,r,h.get("O0"),a.Shapes.O,0,!0,u,s,4,0):3===e&&"S0"===o.type?new i.ShapeS(t,r,h.get("S0"),a.Shapes.S,0,!0,u,s,4,0):4===e&&"Z0"===o.type?new i.ShapeZ(t,r,h.get("Z0"),a.Shapes.Z,0,!0,u,s,4,0):5===e&&"L0"===o.type?new i.ShapeL(t,r,h.get("L0"),a.Shapes.L,0,!0,u,s,4,0):6===e&&"J0"===o.type?new i.ShapeJ(t,r,h.get("J0"),a.Shapes.J,0,!0,u,s,4,0):null,(0,n.of)(l)})))}(Math.floor(7*Math.random()),e,t,r,l)})))}}},n={};function i(e){var t=n[e];if(void 0!==t)return t.exports;var o=n[e]={exports:{}};return r[e].call(o.exports,o,o.exports,i),o.exports}e=i(2872),t=i(7769),(0,e.fromEvent)(window,"load").subscribe((function(){var e=document.createElement("canvas");e.id="game-container",e.width=window.innerWidth,e.height=window.innerHeight,document.body.appendChild(e),new t.Game(e).init()}))})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,