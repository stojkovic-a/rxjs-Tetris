(()=>{"use strict";var e,r,t,n={2872:function(e,r,t){var n=this&&this.__createBinding||(Object.create?function(e,r,t,n){void 0===n&&(n=t),Object.defineProperty(e,n,{enumerable:!0,get:function(){return r[t]}})}:function(e,r,t,n){void 0===n&&(n=t),e[n]=r[t]}),o=this&&this.__exportStar||function(e,r){for(var t in e)"default"===t||Object.prototype.hasOwnProperty.call(r,t)||n(r,e,t)};Object.defineProperty(r,"__esModule",{value:!0}),r.interval=r.iif=r.generate=r.fromEventPattern=r.fromEvent=r.from=r.forkJoin=r.empty=r.defer=r.connectable=r.concat=r.combineLatest=r.bindNodeCallback=r.bindCallback=r.UnsubscriptionError=r.TimeoutError=r.SequenceError=r.ObjectUnsubscribedError=r.NotFoundError=r.EmptyError=r.ArgumentOutOfRangeError=r.firstValueFrom=r.lastValueFrom=r.isObservable=r.identity=r.noop=r.pipe=r.NotificationKind=r.Notification=r.Subscriber=r.Subscription=r.Scheduler=r.VirtualAction=r.VirtualTimeScheduler=r.animationFrameScheduler=r.animationFrame=r.queueScheduler=r.queue=r.asyncScheduler=r.async=r.asapScheduler=r.asap=r.AsyncSubject=r.ReplaySubject=r.BehaviorSubject=r.Subject=r.animationFrames=r.observable=r.ConnectableObservable=r.Observable=void 0,r.filter=r.expand=r.exhaustMap=r.exhaustAll=r.exhaust=r.every=r.endWith=r.elementAt=r.distinctUntilKeyChanged=r.distinctUntilChanged=r.distinct=r.dematerialize=r.delayWhen=r.delay=r.defaultIfEmpty=r.debounceTime=r.debounce=r.count=r.connect=r.concatWith=r.concatMapTo=r.concatMap=r.concatAll=r.combineLatestWith=r.combineLatestAll=r.combineAll=r.catchError=r.bufferWhen=r.bufferToggle=r.bufferTime=r.bufferCount=r.buffer=r.auditTime=r.audit=r.config=r.NEVER=r.EMPTY=r.scheduled=r.zip=r.using=r.timer=r.throwError=r.range=r.race=r.partition=r.pairs=r.onErrorResumeNext=r.of=r.never=r.merge=void 0,r.switchMap=r.switchAll=r.subscribeOn=r.startWith=r.skipWhile=r.skipUntil=r.skipLast=r.skip=r.single=r.shareReplay=r.share=r.sequenceEqual=r.scan=r.sampleTime=r.sample=r.refCount=r.retryWhen=r.retry=r.repeatWhen=r.repeat=r.reduce=r.raceWith=r.publishReplay=r.publishLast=r.publishBehavior=r.publish=r.pluck=r.pairwise=r.onErrorResumeNextWith=r.observeOn=r.multicast=r.min=r.mergeWith=r.mergeScan=r.mergeMapTo=r.mergeMap=r.flatMap=r.mergeAll=r.max=r.materialize=r.mapTo=r.map=r.last=r.isEmpty=r.ignoreElements=r.groupBy=r.first=r.findIndex=r.find=r.finalize=void 0,r.zipWith=r.zipAll=r.withLatestFrom=r.windowWhen=r.windowToggle=r.windowTime=r.windowCount=r.window=r.toArray=r.timestamp=r.timeoutWith=r.timeout=r.timeInterval=r.throwIfEmpty=r.throttleTime=r.throttle=r.tap=r.takeWhile=r.takeUntil=r.takeLast=r.take=r.switchScan=r.switchMapTo=void 0;var i=t(2419);Object.defineProperty(r,"Observable",{enumerable:!0,get:function(){return i.Observable}});var u=t(9518);Object.defineProperty(r,"ConnectableObservable",{enumerable:!0,get:function(){return u.ConnectableObservable}});var c=t(2801);Object.defineProperty(r,"observable",{enumerable:!0,get:function(){return c.observable}});var a=t(9106);Object.defineProperty(r,"animationFrames",{enumerable:!0,get:function(){return a.animationFrames}});var l=t(3032);Object.defineProperty(r,"Subject",{enumerable:!0,get:function(){return l.Subject}});var s=t(5240);Object.defineProperty(r,"BehaviorSubject",{enumerable:!0,get:function(){return s.BehaviorSubject}});var f=t(3274);Object.defineProperty(r,"ReplaySubject",{enumerable:!0,get:function(){return f.ReplaySubject}});var d=t(280);Object.defineProperty(r,"AsyncSubject",{enumerable:!0,get:function(){return d.AsyncSubject}});var v=t(580);Object.defineProperty(r,"asap",{enumerable:!0,get:function(){return v.asap}}),Object.defineProperty(r,"asapScheduler",{enumerable:!0,get:function(){return v.asapScheduler}});var p=t(2445);Object.defineProperty(r,"async",{enumerable:!0,get:function(){return p.async}}),Object.defineProperty(r,"asyncScheduler",{enumerable:!0,get:function(){return p.asyncScheduler}});var b=t(8615);Object.defineProperty(r,"queue",{enumerable:!0,get:function(){return b.queue}}),Object.defineProperty(r,"queueScheduler",{enumerable:!0,get:function(){return b.queueScheduler}});var h=t(3660);Object.defineProperty(r,"animationFrame",{enumerable:!0,get:function(){return h.animationFrame}}),Object.defineProperty(r,"animationFrameScheduler",{enumerable:!0,get:function(){return h.animationFrameScheduler}});var y=t(4123);Object.defineProperty(r,"VirtualTimeScheduler",{enumerable:!0,get:function(){return y.VirtualTimeScheduler}}),Object.defineProperty(r,"VirtualAction",{enumerable:!0,get:function(){return y.VirtualAction}});var m=t(218);Object.defineProperty(r,"Scheduler",{enumerable:!0,get:function(){return m.Scheduler}});var _=t(3865);Object.defineProperty(r,"Subscription",{enumerable:!0,get:function(){return _.Subscription}});var O=t(5125);Object.defineProperty(r,"Subscriber",{enumerable:!0,get:function(){return O.Subscriber}});var g=t(3104);Object.defineProperty(r,"Notification",{enumerable:!0,get:function(){return g.Notification}}),Object.defineProperty(r,"NotificationKind",{enumerable:!0,get:function(){return g.NotificationKind}});var j=t(9985);Object.defineProperty(r,"pipe",{enumerable:!0,get:function(){return j.pipe}});var P=t(2576);Object.defineProperty(r,"noop",{enumerable:!0,get:function(){return P.noop}});var w=t(4781);Object.defineProperty(r,"identity",{enumerable:!0,get:function(){return w.identity}});var S=t(8386);Object.defineProperty(r,"isObservable",{enumerable:!0,get:function(){return S.isObservable}});var x=t(9309);Object.defineProperty(r,"lastValueFrom",{enumerable:!0,get:function(){return x.lastValueFrom}});var M=t(8182);Object.defineProperty(r,"firstValueFrom",{enumerable:!0,get:function(){return M.firstValueFrom}});var E=t(2351);Object.defineProperty(r,"ArgumentOutOfRangeError",{enumerable:!0,get:function(){return E.ArgumentOutOfRangeError}});var A=t(9474);Object.defineProperty(r,"EmptyError",{enumerable:!0,get:function(){return A.EmptyError}});var T=t(8598);Object.defineProperty(r,"NotFoundError",{enumerable:!0,get:function(){return T.NotFoundError}});var F=t(2642);Object.defineProperty(r,"ObjectUnsubscribedError",{enumerable:!0,get:function(){return F.ObjectUnsubscribedError}});var I=t(6156);Object.defineProperty(r,"SequenceError",{enumerable:!0,get:function(){return I.SequenceError}});var k=t(4173);Object.defineProperty(r,"TimeoutError",{enumerable:!0,get:function(){return k.TimeoutError}});var C=t(4805);Object.defineProperty(r,"UnsubscriptionError",{enumerable:!0,get:function(){return C.UnsubscriptionError}});var N=t(3050);Object.defineProperty(r,"bindCallback",{enumerable:!0,get:function(){return N.bindCallback}});var R=t(8130);Object.defineProperty(r,"bindNodeCallback",{enumerable:!0,get:function(){return R.bindNodeCallback}});var W=t(9258);Object.defineProperty(r,"combineLatest",{enumerable:!0,get:function(){return W.combineLatest}});var L=t(2239);Object.defineProperty(r,"concat",{enumerable:!0,get:function(){return L.concat}});var U=t(2873);Object.defineProperty(r,"connectable",{enumerable:!0,get:function(){return U.connectable}});var z=t(7885);Object.defineProperty(r,"defer",{enumerable:!0,get:function(){return z.defer}});var q=t(6332);Object.defineProperty(r,"empty",{enumerable:!0,get:function(){return q.empty}});var V=t(7245);Object.defineProperty(r,"forkJoin",{enumerable:!0,get:function(){return V.forkJoin}});var B=t(5432);Object.defineProperty(r,"from",{enumerable:!0,get:function(){return B.from}});var Y=t(3267);Object.defineProperty(r,"fromEvent",{enumerable:!0,get:function(){return Y.fromEvent}});var D=t(470);Object.defineProperty(r,"fromEventPattern",{enumerable:!0,get:function(){return D.fromEventPattern}});var G=t(4303);Object.defineProperty(r,"generate",{enumerable:!0,get:function(){return G.generate}});var K=t(1757);Object.defineProperty(r,"iif",{enumerable:!0,get:function(){return K.iif}});var $=t(8990);Object.defineProperty(r,"interval",{enumerable:!0,get:function(){return $.interval}});var H=t(1846);Object.defineProperty(r,"merge",{enumerable:!0,get:function(){return H.merge}});var Q=t(1339);Object.defineProperty(r,"never",{enumerable:!0,get:function(){return Q.never}});var J=t(5726);Object.defineProperty(r,"of",{enumerable:!0,get:function(){return J.of}});var Z=t(724);Object.defineProperty(r,"onErrorResumeNext",{enumerable:!0,get:function(){return Z.onErrorResumeNext}});var X=t(4380);Object.defineProperty(r,"pairs",{enumerable:!0,get:function(){return X.pairs}});var ee=t(7273);Object.defineProperty(r,"partition",{enumerable:!0,get:function(){return ee.partition}});var re=t(5182);Object.defineProperty(r,"race",{enumerable:!0,get:function(){return re.race}});var te=t(322);Object.defineProperty(r,"range",{enumerable:!0,get:function(){return te.range}});var ne=t(2098);Object.defineProperty(r,"throwError",{enumerable:!0,get:function(){return ne.throwError}});var oe=t(7513);Object.defineProperty(r,"timer",{enumerable:!0,get:function(){return oe.timer}});var ie=t(2962);Object.defineProperty(r,"using",{enumerable:!0,get:function(){return ie.using}});var ue=t(7654);Object.defineProperty(r,"zip",{enumerable:!0,get:function(){return ue.zip}});var ce=t(5207);Object.defineProperty(r,"scheduled",{enumerable:!0,get:function(){return ce.scheduled}});var ae=t(6332);Object.defineProperty(r,"EMPTY",{enumerable:!0,get:function(){return ae.EMPTY}});var le=t(1339);Object.defineProperty(r,"NEVER",{enumerable:!0,get:function(){return le.NEVER}}),o(t(8433),r);var se=t(3280);Object.defineProperty(r,"config",{enumerable:!0,get:function(){return se.config}});var fe=t(6474);Object.defineProperty(r,"audit",{enumerable:!0,get:function(){return fe.audit}});var de=t(5382);Object.defineProperty(r,"auditTime",{enumerable:!0,get:function(){return de.auditTime}});var ve=t(9715);Object.defineProperty(r,"buffer",{enumerable:!0,get:function(){return ve.buffer}});var pe=t(3814);Object.defineProperty(r,"bufferCount",{enumerable:!0,get:function(){return pe.bufferCount}});var be=t(7211);Object.defineProperty(r,"bufferTime",{enumerable:!0,get:function(){return be.bufferTime}});var he=t(4943);Object.defineProperty(r,"bufferToggle",{enumerable:!0,get:function(){return he.bufferToggle}});var ye=t(1240);Object.defineProperty(r,"bufferWhen",{enumerable:!0,get:function(){return ye.bufferWhen}});var me=t(9548);Object.defineProperty(r,"catchError",{enumerable:!0,get:function(){return me.catchError}});var _e=t(2128);Object.defineProperty(r,"combineAll",{enumerable:!0,get:function(){return _e.combineAll}});var Oe=t(3240);Object.defineProperty(r,"combineLatestAll",{enumerable:!0,get:function(){return Oe.combineLatestAll}});var ge=t(5024);Object.defineProperty(r,"combineLatestWith",{enumerable:!0,get:function(){return ge.combineLatestWith}});var je=t(4413);Object.defineProperty(r,"concatAll",{enumerable:!0,get:function(){return je.concatAll}});var Pe=t(7498);Object.defineProperty(r,"concatMap",{enumerable:!0,get:function(){return Pe.concatMap}});var we=t(6109);Object.defineProperty(r,"concatMapTo",{enumerable:!0,get:function(){return we.concatMapTo}});var Se=t(9664);Object.defineProperty(r,"concatWith",{enumerable:!0,get:function(){return Se.concatWith}});var xe=t(1995);Object.defineProperty(r,"connect",{enumerable:!0,get:function(){return xe.connect}});var Me=t(993);Object.defineProperty(r,"count",{enumerable:!0,get:function(){return Me.count}});var Ee=t(496);Object.defineProperty(r,"debounce",{enumerable:!0,get:function(){return Ee.debounce}});var Ae=t(1385);Object.defineProperty(r,"debounceTime",{enumerable:!0,get:function(){return Ae.debounceTime}});var Te=t(1658);Object.defineProperty(r,"defaultIfEmpty",{enumerable:!0,get:function(){return Te.defaultIfEmpty}});var Fe=t(5841);Object.defineProperty(r,"delay",{enumerable:!0,get:function(){return Fe.delay}});var Ie=t(8798);Object.defineProperty(r,"delayWhen",{enumerable:!0,get:function(){return Ie.delayWhen}});var ke=t(1080);Object.defineProperty(r,"dematerialize",{enumerable:!0,get:function(){return ke.dematerialize}});var Ce=t(3054);Object.defineProperty(r,"distinct",{enumerable:!0,get:function(){return Ce.distinct}});var Ne=t(8737);Object.defineProperty(r,"distinctUntilChanged",{enumerable:!0,get:function(){return Ne.distinctUntilChanged}});var Re=t(7957);Object.defineProperty(r,"distinctUntilKeyChanged",{enumerable:!0,get:function(){return Re.distinctUntilKeyChanged}});var We=t(8633);Object.defineProperty(r,"elementAt",{enumerable:!0,get:function(){return We.elementAt}});var Le=t(911);Object.defineProperty(r,"endWith",{enumerable:!0,get:function(){return Le.endWith}});var Ue=t(2096);Object.defineProperty(r,"every",{enumerable:!0,get:function(){return Ue.every}});var ze=t(67);Object.defineProperty(r,"exhaust",{enumerable:!0,get:function(){return ze.exhaust}});var qe=t(5337);Object.defineProperty(r,"exhaustAll",{enumerable:!0,get:function(){return qe.exhaustAll}});var Ve=t(5635);Object.defineProperty(r,"exhaustMap",{enumerable:!0,get:function(){return Ve.exhaustMap}});var Be=t(9745);Object.defineProperty(r,"expand",{enumerable:!0,get:function(){return Be.expand}});var Ye=t(9154);Object.defineProperty(r,"filter",{enumerable:!0,get:function(){return Ye.filter}});var De=t(9283);Object.defineProperty(r,"finalize",{enumerable:!0,get:function(){return De.finalize}});var Ge=t(7119);Object.defineProperty(r,"find",{enumerable:!0,get:function(){return Ge.find}});var Ke=t(4706);Object.defineProperty(r,"findIndex",{enumerable:!0,get:function(){return Ke.findIndex}});var $e=t(9219);Object.defineProperty(r,"first",{enumerable:!0,get:function(){return $e.first}});var He=t(9749);Object.defineProperty(r,"groupBy",{enumerable:!0,get:function(){return He.groupBy}});var Qe=t(9438);Object.defineProperty(r,"ignoreElements",{enumerable:!0,get:function(){return Qe.ignoreElements}});var Je=t(8515);Object.defineProperty(r,"isEmpty",{enumerable:!0,get:function(){return Je.isEmpty}});var Ze=t(2435);Object.defineProperty(r,"last",{enumerable:!0,get:function(){return Ze.last}});var Xe=t(7291);Object.defineProperty(r,"map",{enumerable:!0,get:function(){return Xe.map}});var er=t(8313);Object.defineProperty(r,"mapTo",{enumerable:!0,get:function(){return er.mapTo}});var rr=t(3209);Object.defineProperty(r,"materialize",{enumerable:!0,get:function(){return rr.materialize}});var tr=t(2620);Object.defineProperty(r,"max",{enumerable:!0,get:function(){return tr.max}});var nr=t(3783);Object.defineProperty(r,"mergeAll",{enumerable:!0,get:function(){return nr.mergeAll}});var or=t(1788);Object.defineProperty(r,"flatMap",{enumerable:!0,get:function(){return or.flatMap}});var ir=t(9475);Object.defineProperty(r,"mergeMap",{enumerable:!0,get:function(){return ir.mergeMap}});var ur=t(1211);Object.defineProperty(r,"mergeMapTo",{enumerable:!0,get:function(){return ur.mergeMapTo}});var cr=t(7267);Object.defineProperty(r,"mergeScan",{enumerable:!0,get:function(){return cr.mergeScan}});var ar=t(9303);Object.defineProperty(r,"mergeWith",{enumerable:!0,get:function(){return ar.mergeWith}});var lr=t(9714);Object.defineProperty(r,"min",{enumerable:!0,get:function(){return lr.min}});var sr=t(3848);Object.defineProperty(r,"multicast",{enumerable:!0,get:function(){return sr.multicast}});var fr=t(1184);Object.defineProperty(r,"observeOn",{enumerable:!0,get:function(){return fr.observeOn}});var dr=t(7582);Object.defineProperty(r,"onErrorResumeNextWith",{enumerable:!0,get:function(){return dr.onErrorResumeNextWith}});var vr=t(2731);Object.defineProperty(r,"pairwise",{enumerable:!0,get:function(){return vr.pairwise}});var pr=t(4691);Object.defineProperty(r,"pluck",{enumerable:!0,get:function(){return pr.pluck}});var br=t(4474);Object.defineProperty(r,"publish",{enumerable:!0,get:function(){return br.publish}});var hr=t(52);Object.defineProperty(r,"publishBehavior",{enumerable:!0,get:function(){return hr.publishBehavior}});var yr=t(2110);Object.defineProperty(r,"publishLast",{enumerable:!0,get:function(){return yr.publishLast}});var mr=t(9864);Object.defineProperty(r,"publishReplay",{enumerable:!0,get:function(){return mr.publishReplay}});var _r=t(179);Object.defineProperty(r,"raceWith",{enumerable:!0,get:function(){return _r.raceWith}});var Or=t(122);Object.defineProperty(r,"reduce",{enumerable:!0,get:function(){return Or.reduce}});var gr=t(5313);Object.defineProperty(r,"repeat",{enumerable:!0,get:function(){return gr.repeat}});var jr=t(4068);Object.defineProperty(r,"repeatWhen",{enumerable:!0,get:function(){return jr.repeatWhen}});var Pr=t(64);Object.defineProperty(r,"retry",{enumerable:!0,get:function(){return Pr.retry}});var wr=t(1188);Object.defineProperty(r,"retryWhen",{enumerable:!0,get:function(){return wr.retryWhen}});var Sr=t(8739);Object.defineProperty(r,"refCount",{enumerable:!0,get:function(){return Sr.refCount}});var xr=t(4193);Object.defineProperty(r,"sample",{enumerable:!0,get:function(){return xr.sample}});var Mr=t(6170);Object.defineProperty(r,"sampleTime",{enumerable:!0,get:function(){return Mr.sampleTime}});var Er=t(5876);Object.defineProperty(r,"scan",{enumerable:!0,get:function(){return Er.scan}});var Ar=t(1791);Object.defineProperty(r,"sequenceEqual",{enumerable:!0,get:function(){return Ar.sequenceEqual}});var Tr=t(5137);Object.defineProperty(r,"share",{enumerable:!0,get:function(){return Tr.share}});var Fr=t(1348);Object.defineProperty(r,"shareReplay",{enumerable:!0,get:function(){return Fr.shareReplay}});var Ir=t(8242);Object.defineProperty(r,"single",{enumerable:!0,get:function(){return Ir.single}});var kr=t(3169);Object.defineProperty(r,"skip",{enumerable:!0,get:function(){return kr.skip}});var Cr=t(2454);Object.defineProperty(r,"skipLast",{enumerable:!0,get:function(){return Cr.skipLast}});var Nr=t(6931);Object.defineProperty(r,"skipUntil",{enumerable:!0,get:function(){return Nr.skipUntil}});var Rr=t(7913);Object.defineProperty(r,"skipWhile",{enumerable:!0,get:function(){return Rr.skipWhile}});var Wr=t(9234);Object.defineProperty(r,"startWith",{enumerable:!0,get:function(){return Wr.startWith}});var Lr=t(276);Object.defineProperty(r,"subscribeOn",{enumerable:!0,get:function(){return Lr.subscribeOn}});var Ur=t(9253);Object.defineProperty(r,"switchAll",{enumerable:!0,get:function(){return Ur.switchAll}});var zr=t(8518);Object.defineProperty(r,"switchMap",{enumerable:!0,get:function(){return zr.switchMap}});var qr=t(1173);Object.defineProperty(r,"switchMapTo",{enumerable:!0,get:function(){return qr.switchMapTo}});var Vr=t(3855);Object.defineProperty(r,"switchScan",{enumerable:!0,get:function(){return Vr.switchScan}});var Br=t(4783);Object.defineProperty(r,"take",{enumerable:!0,get:function(){return Br.take}});var Yr=t(1980);Object.defineProperty(r,"takeLast",{enumerable:!0,get:function(){return Yr.takeLast}});var Dr=t(9845);Object.defineProperty(r,"takeUntil",{enumerable:!0,get:function(){return Dr.takeUntil}});var Gr=t(6060);Object.defineProperty(r,"takeWhile",{enumerable:!0,get:function(){return Gr.takeWhile}});var Kr=t(1138);Object.defineProperty(r,"tap",{enumerable:!0,get:function(){return Kr.tap}});var $r=t(7306);Object.defineProperty(r,"throttle",{enumerable:!0,get:function(){return $r.throttle}});var Hr=t(8968);Object.defineProperty(r,"throttleTime",{enumerable:!0,get:function(){return Hr.throttleTime}});var Qr=t(1779);Object.defineProperty(r,"throwIfEmpty",{enumerable:!0,get:function(){return Qr.throwIfEmpty}});var Jr=t(8005);Object.defineProperty(r,"timeInterval",{enumerable:!0,get:function(){return Jr.timeInterval}});var Zr=t(4173);Object.defineProperty(r,"timeout",{enumerable:!0,get:function(){return Zr.timeout}});var Xr=t(7223);Object.defineProperty(r,"timeoutWith",{enumerable:!0,get:function(){return Xr.timeoutWith}});var et=t(8975);Object.defineProperty(r,"timestamp",{enumerable:!0,get:function(){return et.timestamp}});var rt=t(2);Object.defineProperty(r,"toArray",{enumerable:!0,get:function(){return rt.toArray}});var tt=t(2826);Object.defineProperty(r,"window",{enumerable:!0,get:function(){return tt.window}});var nt=t(7526);Object.defineProperty(r,"windowCount",{enumerable:!0,get:function(){return nt.windowCount}});var ot=t(8294);Object.defineProperty(r,"windowTime",{enumerable:!0,get:function(){return ot.windowTime}});var it=t(1883);Object.defineProperty(r,"windowToggle",{enumerable:!0,get:function(){return it.windowToggle}});var ut=t(4309);Object.defineProperty(r,"windowWhen",{enumerable:!0,get:function(){return ut.windowWhen}});var ct=t(3041);Object.defineProperty(r,"withLatestFrom",{enumerable:!0,get:function(){return ct.withLatestFrom}});var at=t(8593);Object.defineProperty(r,"zipAll",{enumerable:!0,get:function(){return at.zipAll}});var lt=t(8096);Object.defineProperty(r,"zipWith",{enumerable:!0,get:function(){return lt.zipWith}})},280:function(e,r,t){var n,o=this&&this.__extends||(n=function(e,r){return n=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,r){e.__proto__=r}||function(e,r){for(var t in r)Object.prototype.hasOwnProperty.call(r,t)&&(e[t]=r[t])},n(e,r)},function(e,r){if("function"!=typeof r&&null!==r)throw new TypeError("Class extends value "+String(r)+" is not a constructor or null");function t(){this.constructor=e}n(e,r),e.prototype=null===r?Object.create(r):(t.prototype=r.prototype,new t)});Object.defineProperty(r,"__esModule",{value:!0}),r.AsyncSubject=void 0;var i=function(e){function r(){var r=null!==e&&e.apply(this,arguments)||this;return r._value=null,r._hasValue=!1,r._isComplete=!1,r}return o(r,e),r.prototype._checkFinalizedStatuses=function(e){var r=this,t=r.hasError,n=r._hasValue,o=r._value,i=r.thrownError,u=r.isStopped,c=r._isComplete;t?e.error(i):(u||c)&&(n&&e.next(o),e.complete())},r.prototype.next=function(e){this.isStopped||(this._value=e,this._hasValue=!0)},r.prototype.complete=function(){var r=this,t=r._hasValue,n=r._value;r._isComplete||(this._isComplete=!0,t&&e.prototype.next.call(this,n),e.prototype.complete.call(this))},r}(t(3032).Subject);r.AsyncSubject=i},5240:function(e,r,t){var n,o=this&&this.__extends||(n=function(e,r){return n=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,r){e.__proto__=r}||function(e,r){for(var t in r)Object.prototype.hasOwnProperty.call(r,t)&&(e[t]=r[t])},n(e,r)},function(e,r){if("function"!=typeof r&&null!==r)throw new TypeError("Class extends value "+String(r)+" is not a constructor or null");function t(){this.constructor=e}n(e,r),e.prototype=null===r?Object.create(r):(t.prototype=r.prototype,new t)});Object.defineProperty(r,"__esModule",{value:!0}),r.BehaviorSubject=void 0;var i=function(e){function r(r){var t=e.call(this)||this;return t._value=r,t}return o(r,e),Object.defineProperty(r.prototype,"value",{get:function(){return this.getValue()},enumerable:!1,configurable:!0}),r.prototype._subscribe=function(r){var t=e.prototype._subscribe.call(this,r);return!t.closed&&r.next(this._value),t},r.prototype.getValue=function(){var e=this,r=e.hasError,t=e.thrownError,n=e._value;if(r)throw t;return this._throwIfClosed(),n},r.prototype.next=function(r){e.prototype.next.call(this,this._value=r)},r}(t(3032).Subject);r.BehaviorSubject=i},3104:(e,r,t)=>{Object.defineProperty(r,"__esModule",{value:!0}),r.observeNotification=r.Notification=r.NotificationKind=void 0;var n,o=t(6332),i=t(5726),u=t(2098),c=t(3005);(n=r.NotificationKind||(r.NotificationKind={})).NEXT="N",n.ERROR="E",n.COMPLETE="C";var a=function(){function e(e,r,t){this.kind=e,this.value=r,this.error=t,this.hasValue="N"===e}return e.prototype.observe=function(e){return l(this,e)},e.prototype.do=function(e,r,t){var n=this,o=n.kind,i=n.value,u=n.error;return"N"===o?null==e?void 0:e(i):"E"===o?null==r?void 0:r(u):null==t?void 0:t()},e.prototype.accept=function(e,r,t){var n;return c.isFunction(null===(n=e)||void 0===n?void 0:n.next)?this.observe(e):this.do(e,r,t)},e.prototype.toObservable=function(){var e=this,r=e.kind,t=e.value,n=e.error,c="N"===r?i.of(t):"E"===r?u.throwError((function(){return n})):"C"===r?o.EMPTY:0;if(!c)throw new TypeError("Unexpected notification kind "+r);return c},e.createNext=function(r){return new e("N",r)},e.createError=function(r){return new e("E",void 0,r)},e.createComplete=function(){return e.completeNotification},e.completeNotification=new e("C"),e}();function l(e,r){var t,n,o,i=e,u=i.kind,c=i.value,a=i.error;if("string"!=typeof u)throw new TypeError('Invalid notification, missing "kind"');"N"===u?null===(t=r.next)||void 0===t||t.call(r,c):"E"===u?null===(n=r.error)||void 0===n||n.call(r,a):null===(o=r.complete)||void 0===o||o.call(r)}r.Notification=a,r.observeNotification=l},7286:(e,r)=>{function t(e,r,t){return{kind:e,value:r,error:t}}Object.defineProperty(r,"__esModule",{value:!0}),r.createNotification=r.nextNotification=r.errorNotification=r.COMPLETE_NOTIFICATION=void 0,r.COMPLETE_NOTIFICATION=t("C",void 0,void 0),r.errorNotification=function(e){return t("E",void 0,e)},r.nextNotification=function(e){return t("N",e,void 0)},r.createNotification=t},2419:(e,r,t)=>{Object.defineProperty(r,"__esModule",{value:!0}),r.Observable=void 0;var n=t(5125),o=t(3865),i=t(2801),u=t(9985),c=t(3280),a=t(3005),l=t(6110),s=function(){function e(e){e&&(this._subscribe=e)}return e.prototype.lift=function(r){var t=new e;return t.source=this,t.operator=r,t},e.prototype.subscribe=function(e,r,t){var i,u=this,c=(i=e)&&i instanceof n.Subscriber||function(e){return e&&a.isFunction(e.next)&&a.isFunction(e.error)&&a.isFunction(e.complete)}(i)&&o.isSubscription(i)?e:new n.SafeSubscriber(e,r,t);return l.errorContext((function(){var e=u,r=e.operator,t=e.source;c.add(r?r.call(c,t):t?u._subscribe(c):u._trySubscribe(c))})),c},e.prototype._trySubscribe=function(e){try{return this._subscribe(e)}catch(r){e.error(r)}},e.prototype.forEach=function(e,r){var t=this;return new(r=f(r))((function(r,o){var i=new n.SafeSubscriber({next:function(r){try{e(r)}catch(e){o(e),i.unsubscribe()}},error:o,complete:r});t.subscribe(i)}))},e.prototype._subscribe=function(e){var r;return null===(r=this.source)||void 0===r?void 0:r.subscribe(e)},e.prototype[i.observable]=function(){return this},e.prototype.pipe=function(){for(var e=[],r=0;r<arguments.length;r++)e[r]=arguments[r];return u.pipeFromArray(e)(this)},e.prototype.toPromise=function(e){var r=this;return new(e=f(e))((function(e,t){var n;r.subscribe((function(e){return n=e}),(function(e){return t(e)}),(function(){return e(n)}))}))},e.create=function(r){return new e(r)},e}();function f(e){var r;return null!==(r=null!=e?e:c.config.Promise)&&void 0!==r?r:Promise}r.Observable=s},3274:function(e,r,t){var n,o=this&&this.__extends||(n=function(e,r){return n=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,r){e.__proto__=r}||function(e,r){for(var t in r)Object.prototype.hasOwnProperty.call(r,t)&&(e[t]=r[t])},n(e,r)},function(e,r){if("function"!=typeof r&&null!==r)throw new TypeError("Class extends value "+String(r)+" is not a constructor or null");function t(){this.constructor=e}n(e,r),e.prototype=null===r?Object.create(r):(t.prototype=r.prototype,new t)});Object.defineProperty(r,"__esModule",{value:!0}),r.ReplaySubject=void 0;var i=t(3032),u=t(7950),c=function(e){function r(r,t,n){void 0===r&&(r=1/0),void 0===t&&(t=1/0),void 0===n&&(n=u.dateTimestampProvider);var o=e.call(this)||this;return o._bufferSize=r,o._windowTime=t,o._timestampProvider=n,o._buffer=[],o._infiniteTimeWindow=!0,o._infiniteTimeWindow=t===1/0,o._bufferSize=Math.max(1,r),o._windowTime=Math.max(1,t),o}return o(r,e),r.prototype.next=function(r){var t=this,n=t.isStopped,o=t._buffer,i=t._infiniteTimeWindow,u=t._timestampProvider,c=t._windowTime;n||(o.push(r),!i&&o.push(u.now()+c)),this._trimBuffer(),e.prototype.next.call(this,r)},r.prototype._subscribe=function(e){this._throwIfClosed(),this._trimBuffer();for(var r=this._innerSubscribe(e),t=this._infiniteTimeWindow,n=this._buffer.slice(),o=0;o<n.length&&!e.closed;o+=t?1:2)e.next(n[o]);return this._checkFinalizedStatuses(e),r},r.prototype._trimBuffer=function(){var e=this,r=e._bufferSize,t=e._timestampProvider,n=e._buffer,o=e._infiniteTimeWindow,i=(o?1:2)*r;if(r<1/0&&i<n.length&&n.splice(0,n.length-i),!o){for(var u=t.now(),c=0,a=1;a<n.length&&n[a]<=u;a+=2)c=a;c&&n.splice(0,c+1)}},r}(i.Subject);r.ReplaySubject=c},218:(e,r,t)=>{Object.defineProperty(r,"__esModule",{value:!0}),r.Scheduler=void 0;var n=t(7950),o=function(){function e(r,t){void 0===t&&(t=e.now),this.schedulerActionCtor=r,this.now=t}return e.prototype.schedule=function(e,r,t){return void 0===r&&(r=0),new this.schedulerActionCtor(this,e).schedule(t,r)},e.now=n.dateTimestampProvider.now,e}();r.Scheduler=o},3032:function(e,r,t){var n,o=this&&this.__extends||(n=function(e,r){return n=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,r){e.__proto__=r}||function(e,r){for(var t in r)Object.prototype.hasOwnProperty.call(r,t)&&(e[t]=r[t])},n(e,r)},function(e,r){if("function"!=typeof r&&null!==r)throw new TypeError("Class extends value "+String(r)+" is not a constructor or null");function t(){this.constructor=e}n(e,r),e.prototype=null===r?Object.create(r):(t.prototype=r.prototype,new t)}),i=this&&this.__values||function(e){var r="function"==typeof Symbol&&Symbol.iterator,t=r&&e[r],n=0;if(t)return t.call(e);if(e&&"number"==typeof e.length)return{next:function(){return e&&n>=e.length&&(e=void 0),{value:e&&e[n++],done:!e}}};throw new TypeError(r?"Object is not iterable.":"Symbol.iterator is not defined.")};Object.defineProperty(r,"__esModule",{value:!0}),r.AnonymousSubject=r.Subject=void 0;var u=t(2419),c=t(3865),a=t(2642),l=t(6967),s=t(6110),f=function(e){function r(){var r=e.call(this)||this;return r.closed=!1,r.currentObservers=null,r.observers=[],r.isStopped=!1,r.hasError=!1,r.thrownError=null,r}return o(r,e),r.prototype.lift=function(e){var r=new d(this,this);return r.operator=e,r},r.prototype._throwIfClosed=function(){if(this.closed)throw new a.ObjectUnsubscribedError},r.prototype.next=function(e){var r=this;s.errorContext((function(){var t,n;if(r._throwIfClosed(),!r.isStopped){r.currentObservers||(r.currentObservers=Array.from(r.observers));try{for(var o=i(r.currentObservers),u=o.next();!u.done;u=o.next())u.value.next(e)}catch(e){t={error:e}}finally{try{u&&!u.done&&(n=o.return)&&n.call(o)}finally{if(t)throw t.error}}}}))},r.prototype.error=function(e){var r=this;s.errorContext((function(){if(r._throwIfClosed(),!r.isStopped){r.hasError=r.isStopped=!0,r.thrownError=e;for(var t=r.observers;t.length;)t.shift().error(e)}}))},r.prototype.complete=function(){var e=this;s.errorContext((function(){if(e._throwIfClosed(),!e.isStopped){e.isStopped=!0;for(var r=e.observers;r.length;)r.shift().complete()}}))},r.prototype.unsubscribe=function(){this.isStopped=this.closed=!0,this.observers=this.currentObservers=null},Object.defineProperty(r.prototype,"observed",{get:function(){var e;return(null===(e=this.observers)||void 0===e?void 0:e.length)>0},enumerable:!1,configurable:!0}),r.prototype._trySubscribe=function(r){return this._throwIfClosed(),e.prototype._trySubscribe.call(this,r)},r.prototype._subscribe=function(e){return this._throwIfClosed(),this._checkFinalizedStatuses(e),this._innerSubscribe(e)},r.prototype._innerSubscribe=function(e){var r=this,t=this,n=t.hasError,o=t.isStopped,i=t.observers;return n||o?c.EMPTY_SUBSCRIPTION:(this.currentObservers=null,i.push(e),new c.Subscription((function(){r.currentObservers=null,l.arrRemove(i,e)})))},r.prototype._checkFinalizedStatuses=function(e){var r=this,t=r.hasError,n=r.thrownError,o=r.isStopped;t?e.error(n):o&&e.complete()},r.prototype.asObservable=function(){var e=new u.Observable;return e.source=this,e},r.create=function(e,r){return new d(e,r)},r}(u.Observable);r.Subject=f;var d=function(e){function r(r,t){var n=e.call(this)||this;return n.destination=r,n.source=t,n}return o(r,e),r.prototype.next=function(e){var r,t;null===(t=null===(r=this.destination)||void 0===r?void 0:r.next)||void 0===t||t.call(r,e)},r.prototype.error=function(e){var r,t;null===(t=null===(r=this.destination)||void 0===r?void 0:r.error)||void 0===t||t.call(r,e)},r.prototype.complete=function(){var e,r;null===(r=null===(e=this.destination)||void 0===e?void 0:e.complete)||void 0===r||r.call(e)},r.prototype._subscribe=function(e){var r,t;return null!==(t=null===(r=this.source)||void 0===r?void 0:r.subscribe(e))&&void 0!==t?t:c.EMPTY_SUBSCRIPTION},r}(f);r.AnonymousSubject=d},5125:function(e,r,t){var n,o=this&&this.__extends||(n=function(e,r){return n=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,r){e.__proto__=r}||function(e,r){for(var t in r)Object.prototype.hasOwnProperty.call(r,t)&&(e[t]=r[t])},n(e,r)},function(e,r){if("function"!=typeof r&&null!==r)throw new TypeError("Class extends value "+String(r)+" is not a constructor or null");function t(){this.constructor=e}n(e,r),e.prototype=null===r?Object.create(r):(t.prototype=r.prototype,new t)});Object.defineProperty(r,"__esModule",{value:!0}),r.EMPTY_OBSERVER=r.SafeSubscriber=r.Subscriber=void 0;var i=t(3005),u=t(3865),c=t(3280),a=t(7968),l=t(2576),s=t(7286),f=t(4590),d=t(6110),v=function(e){function t(t){var n=e.call(this)||this;return n.isStopped=!1,t?(n.destination=t,u.isSubscription(t)&&t.add(n)):n.destination=r.EMPTY_OBSERVER,n}return o(t,e),t.create=function(e,r,t){return new y(e,r,t)},t.prototype.next=function(e){this.isStopped?_(s.nextNotification(e),this):this._next(e)},t.prototype.error=function(e){this.isStopped?_(s.errorNotification(e),this):(this.isStopped=!0,this._error(e))},t.prototype.complete=function(){this.isStopped?_(s.COMPLETE_NOTIFICATION,this):(this.isStopped=!0,this._complete())},t.prototype.unsubscribe=function(){this.closed||(this.isStopped=!0,e.prototype.unsubscribe.call(this),this.destination=null)},t.prototype._next=function(e){this.destination.next(e)},t.prototype._error=function(e){try{this.destination.error(e)}finally{this.unsubscribe()}},t.prototype._complete=function(){try{this.destination.complete()}finally{this.unsubscribe()}},t}(u.Subscription);r.Subscriber=v;var p=Function.prototype.bind;function b(e,r){return p.call(e,r)}var h=function(){function e(e){this.partialObserver=e}return e.prototype.next=function(e){var r=this.partialObserver;if(r.next)try{r.next(e)}catch(e){m(e)}},e.prototype.error=function(e){var r=this.partialObserver;if(r.error)try{r.error(e)}catch(e){m(e)}else m(e)},e.prototype.complete=function(){var e=this.partialObserver;if(e.complete)try{e.complete()}catch(e){m(e)}},e}(),y=function(e){function r(r,t,n){var o,u,a=e.call(this)||this;return i.isFunction(r)||!r?o={next:null!=r?r:void 0,error:null!=t?t:void 0,complete:null!=n?n:void 0}:a&&c.config.useDeprecatedNextContext?((u=Object.create(r)).unsubscribe=function(){return a.unsubscribe()},o={next:r.next&&b(r.next,u),error:r.error&&b(r.error,u),complete:r.complete&&b(r.complete,u)}):o=r,a.destination=new h(o),a}return o(r,e),r}(v);function m(e){c.config.useDeprecatedSynchronousErrorHandling?d.captureError(e):a.reportUnhandledError(e)}function _(e,r){var t=c.config.onStoppedNotification;t&&f.timeoutProvider.setTimeout((function(){return t(e,r)}))}r.SafeSubscriber=y,r.EMPTY_OBSERVER={closed:!0,next:l.noop,error:function(e){throw e},complete:l.noop}},3865:function(e,r,t){var n=this&&this.__values||function(e){var r="function"==typeof Symbol&&Symbol.iterator,t=r&&e[r],n=0;if(t)return t.call(e);if(e&&"number"==typeof e.length)return{next:function(){return e&&n>=e.length&&(e=void 0),{value:e&&e[n++],done:!e}}};throw new TypeError(r?"Object is not iterable.":"Symbol.iterator is not defined.")},o=this&&this.__read||function(e,r){var t="function"==typeof Symbol&&e[Symbol.iterator];if(!t)return e;var n,o,i=t.call(e),u=[];try{for(;(void 0===r||r-- >0)&&!(n=i.next()).done;)u.push(n.value)}catch(e){o={error:e}}finally{try{n&&!n.done&&(t=i.return)&&t.call(i)}finally{if(o)throw o.error}}return u},i=this&&this.__spreadArray||function(e,r){for(var t=0,n=r.length,o=e.length;t<n;t++,o++)e[o]=r[t];return e};Object.defineProperty(r,"__esModule",{value:!0}),r.isSubscription=r.EMPTY_SUBSCRIPTION=r.Subscription=void 0;var u=t(3005),c=t(4805),a=t(6967),l=function(){function e(e){this.initialTeardown=e,this.closed=!1,this._parentage=null,this._finalizers=null}var r;return e.prototype.unsubscribe=function(){var e,r,t,a,l;if(!this.closed){this.closed=!0;var f=this._parentage;if(f)if(this._parentage=null,Array.isArray(f))try{for(var d=n(f),v=d.next();!v.done;v=d.next())v.value.remove(this)}catch(r){e={error:r}}finally{try{v&&!v.done&&(r=d.return)&&r.call(d)}finally{if(e)throw e.error}}else f.remove(this);var p=this.initialTeardown;if(u.isFunction(p))try{p()}catch(e){l=e instanceof c.UnsubscriptionError?e.errors:[e]}var b=this._finalizers;if(b){this._finalizers=null;try{for(var h=n(b),y=h.next();!y.done;y=h.next()){var m=y.value;try{s(m)}catch(e){l=null!=l?l:[],e instanceof c.UnsubscriptionError?l=i(i([],o(l)),o(e.errors)):l.push(e)}}}catch(e){t={error:e}}finally{try{y&&!y.done&&(a=h.return)&&a.call(h)}finally{if(t)throw t.error}}}if(l)throw new c.UnsubscriptionError(l)}},e.prototype.add=function(r){var t;if(r&&r!==this)if(this.closed)s(r);else{if(r instanceof e){if(r.closed||r._hasParent(this))return;r._addParent(this)}(this._finalizers=null!==(t=this._finalizers)&&void 0!==t?t:[]).push(r)}},e.prototype._hasParent=function(e){var r=this._parentage;return r===e||Array.isArray(r)&&r.includes(e)},e.prototype._addParent=function(e){var r=this._parentage;this._parentage=Array.isArray(r)?(r.push(e),r):r?[r,e]:e},e.prototype._removeParent=function(e){var r=this._parentage;r===e?this._parentage=null:Array.isArray(r)&&a.arrRemove(r,e)},e.prototype.remove=function(r){var t=this._finalizers;t&&a.arrRemove(t,r),r instanceof e&&r._removeParent(this)},e.EMPTY=((r=new e).closed=!0,r),e}();function s(e){u.isFunction(e)?e():e.unsubscribe()}r.Subscription=l,r.EMPTY_SUBSCRIPTION=l.EMPTY,r.isSubscription=function(e){return e instanceof l||e&&"closed"in e&&u.isFunction(e.remove)&&u.isFunction(e.add)&&u.isFunction(e.unsubscribe)}},3280:(e,r)=>{Object.defineProperty(r,"__esModule",{value:!0}),r.config=void 0,r.config={onUnhandledError:null,onStoppedNotification:null,Promise:void 0,useDeprecatedSynchronousErrorHandling:!1,useDeprecatedNextContext:!1}},8182:(e,r,t)=>{Object.defineProperty(r,"__esModule",{value:!0}),r.firstValueFrom=void 0;var n=t(9474),o=t(5125);r.firstValueFrom=function(e,r){var t="object"==typeof r;return new Promise((function(i,u){var c=new o.SafeSubscriber({next:function(e){i(e),c.unsubscribe()},error:u,complete:function(){t?i(r.defaultValue):u(new n.EmptyError)}});e.subscribe(c)}))}},9309:(e,r,t)=>{Object.defineProperty(r,"__esModule",{value:!0}),r.lastValueFrom=void 0;var n=t(9474);r.lastValueFrom=function(e,r){var t="object"==typeof r;return new Promise((function(o,i){var u,c=!1;e.subscribe({next:function(e){u=e,c=!0},error:i,complete:function(){c?o(u):t?o(r.defaultValue):i(new n.EmptyError)}})}))}},9518:function(e,r,t){var n,o=this&&this.__extends||(n=function(e,r){return n=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,r){e.__proto__=r}||function(e,r){for(var t in r)Object.prototype.hasOwnProperty.call(r,t)&&(e[t]=r[t])},n(e,r)},function(e,r){if("function"!=typeof r&&null!==r)throw new TypeError("Class extends value "+String(r)+" is not a constructor or null");function t(){this.constructor=e}n(e,r),e.prototype=null===r?Object.create(r):(t.prototype=r.prototype,new t)});Object.defineProperty(r,"__esModule",{value:!0}),r.ConnectableObservable=void 0;var i=t(2419),u=t(3865),c=t(8739),a=t(4990),l=t(4935),s=function(e){function r(r,t){var n=e.call(this)||this;return n.source=r,n.subjectFactory=t,n._subject=null,n._refCount=0,n._connection=null,l.hasLift(r)&&(n.lift=r.lift),n}return o(r,e),r.prototype._subscribe=function(e){return this.getSubject().subscribe(e)},r.prototype.getSubject=function(){var e=this._subject;return e&&!e.isStopped||(this._subject=this.subjectFactory()),this._subject},r.prototype._teardown=function(){this._refCount=0;var e=this._connection;this._subject=this._connection=null,null==e||e.unsubscribe()},r.prototype.connect=function(){var e=this,r=this._connection;if(!r){r=this._connection=new u.Subscription;var t=this.getSubject();r.add(this.source.subscribe(a.createOperatorSubscriber(t,void 0,(function(){e._teardown(),t.complete()}),(function(r){e._teardown(),t.error(r)}),(function(){return e._teardown()})))),r.closed&&(this._connection=null,r=u.Subscription.EMPTY)}return r},r.prototype.refCount=function(){return c.refCount()(this)},r}(i.Observable);r.ConnectableObservable=s},3050:(e,r,t)=>{Object.defineProperty(r,"__esModule",{value:!0}),r.bindCallback=void 0;var n=t(9592);r.bindCallback=function(e,r,t){return n.bindCallbackInternals(!1,e,r,t)}},9592:function(e,r,t){var n=this&&this.__read||function(e,r){var t="function"==typeof Symbol&&e[Symbol.iterator];if(!t)return e;var n,o,i=t.call(e),u=[];try{for(;(void 0===r||r-- >0)&&!(n=i.next()).done;)u.push(n.value)}catch(e){o={error:e}}finally{try{n&&!n.done&&(t=i.return)&&t.call(i)}finally{if(o)throw o.error}}return u},o=this&&this.__spreadArray||function(e,r){for(var t=0,n=r.length,o=e.length;t<n;t++,o++)e[o]=r[t];return e};Object.defineProperty(r,"__esModule",{value:!0}),r.bindCallbackInternals=void 0;var i=t(9016),u=t(2419),c=t(276),a=t(1914),l=t(1184),s=t(280);r.bindCallbackInternals=function e(r,t,f,d){if(f){if(!i.isScheduler(f))return function(){for(var n=[],o=0;o<arguments.length;o++)n[o]=arguments[o];return e(r,t,d).apply(this,n).pipe(a.mapOneOrManyArgs(f))};d=f}return d?function(){for(var n=[],o=0;o<arguments.length;o++)n[o]=arguments[o];return e(r,t).apply(this,n).pipe(c.subscribeOn(d),l.observeOn(d))}:function(){for(var e=this,i=[],c=0;c<arguments.length;c++)i[c]=arguments[c];var a=new s.AsyncSubject,l=!0;return new u.Observable((function(u){var c=a.subscribe(u);if(l){l=!1;var s=!1,f=!1;t.apply(e,o(o([],n(i)),[function(){for(var e=[],t=0;t<arguments.length;t++)e[t]=arguments[t];if(r){var n=e.shift();if(null!=n)return void a.error(n)}a.next(1<e.length?e:e[0]),f=!0,s&&a.complete()}])),f&&a.complete(),s=!0}return c}))}}},8130:(e,r,t)=>{Object.defineProperty(r,"__esModule",{value:!0}),r.bindNodeCallback=void 0;var n=t(9592);r.bindNodeCallback=function(e,r,t){return n.bindCallbackInternals(!0,e,r,t)}},9258:(e,r,t)=>{Object.defineProperty(r,"__esModule",{value:!0}),r.combineLatestInit=r.combineLatest=void 0;var n=t(2419),o=t(1203),i=t(5432),u=t(4781),c=t(1914),a=t(2433),l=t(641),s=t(4990),f=t(7738);function d(e,r,t){return void 0===t&&(t=u.identity),function(n){v(r,(function(){for(var o=e.length,u=new Array(o),c=o,a=o,l=function(o){v(r,(function(){var l=i.from(e[o],r),f=!1;l.subscribe(s.createOperatorSubscriber(n,(function(e){u[o]=e,f||(f=!0,a--),a||n.next(t(u.slice()))}),(function(){--c||n.complete()})))}),n)},f=0;f<o;f++)l(f)}),n)}}function v(e,r,t){e?f.executeSchedule(t,e,r):r()}r.combineLatest=function(){for(var e=[],r=0;r<arguments.length;r++)e[r]=arguments[r];var t=a.popScheduler(e),s=a.popResultSelector(e),f=o.argsArgArrayOrObject(e),v=f.args,p=f.keys;if(0===v.length)return i.from([],t);var b=new n.Observable(d(v,t,p?function(e){return l.createObject(p,e)}:u.identity));return s?b.pipe(c.mapOneOrManyArgs(s)):b},r.combineLatestInit=d},2239:(e,r,t)=>{Object.defineProperty(r,"__esModule",{value:!0}),r.concat=void 0;var n=t(4413),o=t(2433),i=t(5432);r.concat=function(){for(var e=[],r=0;r<arguments.length;r++)e[r]=arguments[r];return n.concatAll()(i.from(e,o.popScheduler(e)))}},2873:(e,r,t)=>{Object.defineProperty(r,"__esModule",{value:!0}),r.connectable=void 0;var n=t(3032),o=t(2419),i=t(7885),u={connector:function(){return new n.Subject},resetOnDisconnect:!0};r.connectable=function(e,r){void 0===r&&(r=u);var t=null,n=r.connector,c=r.resetOnDisconnect,a=void 0===c||c,l=n(),s=new o.Observable((function(e){return l.subscribe(e)}));return s.connect=function(){return t&&!t.closed||(t=i.defer((function(){return e})).subscribe(l),a&&t.add((function(){return l=n()}))),t},s}},7885:(e,r,t)=>{Object.defineProperty(r,"__esModule",{value:!0}),r.defer=void 0;var n=t(2419),o=t(7103);r.defer=function(e){return new n.Observable((function(r){o.innerFrom(e()).subscribe(r)}))}},9106:(e,r,t)=>{Object.defineProperty(r,"__esModule",{value:!0}),r.animationFrames=void 0;var n=t(2419),o=t(6813),i=t(505);function u(e){return new n.Observable((function(r){var t=e||o.performanceTimestampProvider,n=t.now(),u=0,c=function(){r.closed||(u=i.animationFrameProvider.requestAnimationFrame((function(o){u=0;var i=t.now();r.next({timestamp:e?i:o,elapsed:i-n}),c()})))};return c(),function(){u&&i.animationFrameProvider.cancelAnimationFrame(u)}}))}r.animationFrames=function(e){return e?u(e):c};var c=u()},6332:(e,r,t)=>{Object.defineProperty(r,"__esModule",{value:!0}),r.empty=r.EMPTY=void 0;var n=t(2419);r.EMPTY=new n.Observable((function(e){return e.complete()})),r.empty=function(e){return e?function(e){return new n.Observable((function(r){return e.schedule((function(){return r.complete()}))}))}(e):r.EMPTY}},7245:(e,r,t)=>{Object.defineProperty(r,"__esModule",{value:!0}),r.forkJoin=void 0;var n=t(2419),o=t(1203),i=t(7103),u=t(2433),c=t(4990),a=t(1914),l=t(641);r.forkJoin=function(){for(var e=[],r=0;r<arguments.length;r++)e[r]=arguments[r];var t=u.popResultSelector(e),s=o.argsArgArrayOrObject(e),f=s.args,d=s.keys,v=new n.Observable((function(e){var r=f.length;if(r)for(var t=new Array(r),n=r,o=r,u=function(r){var u=!1;i.innerFrom(f[r]).subscribe(c.createOperatorSubscriber(e,(function(e){u||(u=!0,o--),t[r]=e}),(function(){return n--}),void 0,(function(){n&&u||(o||e.next(d?l.createObject(d,t):t),e.complete())})))},a=0;a<r;a++)u(a);else e.complete()}));return t?v.pipe(a.mapOneOrManyArgs(t)):v}},5432:(e,r,t)=>{Object.defineProperty(r,"__esModule",{value:!0}),r.from=void 0;var n=t(5207),o=t(7103);r.from=function(e,r){return r?n.scheduled(e,r):o.innerFrom(e)}},3267:function(e,r,t){var n=this&&this.__read||function(e,r){var t="function"==typeof Symbol&&e[Symbol.iterator];if(!t)return e;var n,o,i=t.call(e),u=[];try{for(;(void 0===r||r-- >0)&&!(n=i.next()).done;)u.push(n.value)}catch(e){o={error:e}}finally{try{n&&!n.done&&(t=i.return)&&t.call(i)}finally{if(o)throw o.error}}return u};Object.defineProperty(r,"__esModule",{value:!0}),r.fromEvent=void 0;var o=t(7103),i=t(2419),u=t(9475),c=t(3909),a=t(3005),l=t(1914),s=["addListener","removeListener"],f=["addEventListener","removeEventListener"],d=["on","off"];function v(e,r){return function(t){return function(n){return e[t](r,n)}}}r.fromEvent=function e(r,t,p,b){if(a.isFunction(p)&&(b=p,p=void 0),b)return e(r,t,p).pipe(l.mapOneOrManyArgs(b));var h=n(function(e){return a.isFunction(e.addEventListener)&&a.isFunction(e.removeEventListener)}(r)?f.map((function(e){return function(n){return r[e](t,n,p)}})):function(e){return a.isFunction(e.addListener)&&a.isFunction(e.removeListener)}(r)?s.map(v(r,t)):function(e){return a.isFunction(e.on)&&a.isFunction(e.off)}(r)?d.map(v(r,t)):[],2),y=h[0],m=h[1];if(!y&&c.isArrayLike(r))return u.mergeMap((function(r){return e(r,t,p)}))(o.innerFrom(r));if(!y)throw new TypeError("Invalid event target");return new i.Observable((function(e){var r=function(){for(var r=[],t=0;t<arguments.length;t++)r[t]=arguments[t];return e.next(1<r.length?r:r[0])};return y(r),function(){return m(r)}}))}},470:(e,r,t)=>{Object.defineProperty(r,"__esModule",{value:!0}),r.fromEventPattern=void 0;var n=t(2419),o=t(3005),i=t(1914);r.fromEventPattern=function e(r,t,u){return u?e(r,t).pipe(i.mapOneOrManyArgs(u)):new n.Observable((function(e){var n=function(){for(var r=[],t=0;t<arguments.length;t++)r[t]=arguments[t];return e.next(1===r.length?r[0]:r)},i=r(n);return o.isFunction(t)?function(){return t(n,i)}:void 0}))}},851:(e,r,t)=>{Object.defineProperty(r,"__esModule",{value:!0}),r.fromSubscribable=void 0;var n=t(2419);r.fromSubscribable=function(e){return new n.Observable((function(r){return e.subscribe(r)}))}},4303:function(e,r,t){var n=this&&this.__generator||function(e,r){var t,n,o,i,u={label:0,sent:function(){if(1&o[0])throw o[1];return o[1]},trys:[],ops:[]};return i={next:c(0),throw:c(1),return:c(2)},"function"==typeof Symbol&&(i[Symbol.iterator]=function(){return this}),i;function c(i){return function(c){return function(i){if(t)throw new TypeError("Generator is already executing.");for(;u;)try{if(t=1,n&&(o=2&i[0]?n.return:i[0]?n.throw||((o=n.return)&&o.call(n),0):n.next)&&!(o=o.call(n,i[1])).done)return o;switch(n=0,o&&(i=[2&i[0],o.value]),i[0]){case 0:case 1:o=i;break;case 4:return u.label++,{value:i[1],done:!1};case 5:u.label++,n=i[1],i=[0];continue;case 7:i=u.ops.pop(),u.trys.pop();continue;default:if(!((o=(o=u.trys).length>0&&o[o.length-1])||6!==i[0]&&2!==i[0])){u=0;continue}if(3===i[0]&&(!o||i[1]>o[0]&&i[1]<o[3])){u.label=i[1];break}if(6===i[0]&&u.label<o[1]){u.label=o[1],o=i;break}if(o&&u.label<o[2]){u.label=o[2],u.ops.push(i);break}o[2]&&u.ops.pop(),u.trys.pop();continue}i=r.call(e,u)}catch(e){i=[6,e],n=0}finally{t=o=0}if(5&i[0])throw i[1];return{value:i[0]?i[1]:void 0,done:!0}}([i,c])}}};Object.defineProperty(r,"__esModule",{value:!0}),r.generate=void 0;var o=t(4781),i=t(9016),u=t(7885),c=t(1297);r.generate=function(e,r,t,a,l){var s,f,d,v;function p(){var e;return n(this,(function(n){switch(n.label){case 0:e=v,n.label=1;case 1:return r&&!r(e)?[3,4]:[4,d(e)];case 2:n.sent(),n.label=3;case 3:return e=t(e),[3,1];case 4:return[2]}}))}return 1===arguments.length?(v=(s=e).initialState,r=s.condition,t=s.iterate,f=s.resultSelector,d=void 0===f?o.identity:f,l=s.scheduler):(v=e,!a||i.isScheduler(a)?(d=o.identity,l=a):d=a),u.defer(l?function(){return c.scheduleIterable(p(),l)}:p)}},1757:(e,r,t)=>{Object.defineProperty(r,"__esModule",{value:!0}),r.iif=void 0;var n=t(7885);r.iif=function(e,r,t){return n.defer((function(){return e()?r:t}))}},7103:function(e,r,t){var n=this&&this.__awaiter||function(e,r,t,n){return new(t||(t=Promise))((function(o,i){function u(e){try{a(n.next(e))}catch(e){i(e)}}function c(e){try{a(n.throw(e))}catch(e){i(e)}}function a(e){var r;e.done?o(e.value):(r=e.value,r instanceof t?r:new t((function(e){e(r)}))).then(u,c)}a((n=n.apply(e,r||[])).next())}))},o=this&&this.__generator||function(e,r){var t,n,o,i,u={label:0,sent:function(){if(1&o[0])throw o[1];return o[1]},trys:[],ops:[]};return i={next:c(0),throw:c(1),return:c(2)},"function"==typeof Symbol&&(i[Symbol.iterator]=function(){return this}),i;function c(i){return function(c){return function(i){if(t)throw new TypeError("Generator is already executing.");for(;u;)try{if(t=1,n&&(o=2&i[0]?n.return:i[0]?n.throw||((o=n.return)&&o.call(n),0):n.next)&&!(o=o.call(n,i[1])).done)return o;switch(n=0,o&&(i=[2&i[0],o.value]),i[0]){case 0:case 1:o=i;break;case 4:return u.label++,{value:i[1],done:!1};case 5:u.label++,n=i[1],i=[0];continue;case 7:i=u.ops.pop(),u.trys.pop();continue;default:if(!((o=(o=u.trys).length>0&&o[o.length-1])||6!==i[0]&&2!==i[0])){u=0;continue}if(3===i[0]&&(!o||i[1]>o[0]&&i[1]<o[3])){u.label=i[1];break}if(6===i[0]&&u.label<o[1]){u.label=o[1],o=i;break}if(o&&u.label<o[2]){u.label=o[2],u.ops.push(i);break}o[2]&&u.ops.pop(),u.trys.pop();continue}i=r.call(e,u)}catch(e){i=[6,e],n=0}finally{t=o=0}if(5&i[0])throw i[1];return{value:i[0]?i[1]:void 0,done:!0}}([i,c])}}},i=this&&this.__asyncValues||function(e){if(!Symbol.asyncIterator)throw new TypeError("Symbol.asyncIterator is not defined.");var r,t=e[Symbol.asyncIterator];return t?t.call(e):(e="function"==typeof u?u(e):e[Symbol.iterator](),r={},n("next"),n("throw"),n("return"),r[Symbol.asyncIterator]=function(){return this},r);function n(t){r[t]=e[t]&&function(r){return new Promise((function(n,o){!function(e,r,t,n){Promise.resolve(n).then((function(r){e({value:r,done:t})}),r)}(n,o,(r=e[t](r)).done,r.value)}))}}},u=this&&this.__values||function(e){var r="function"==typeof Symbol&&Symbol.iterator,t=r&&e[r],n=0;if(t)return t.call(e);if(e&&"number"==typeof e.length)return{next:function(){return e&&n>=e.length&&(e=void 0),{value:e&&e[n++],done:!e}}};throw new TypeError(r?"Object is not iterable.":"Symbol.iterator is not defined.")};Object.defineProperty(r,"__esModule",{value:!0}),r.fromReadableStreamLike=r.fromAsyncIterable=r.fromIterable=r.fromPromise=r.fromArrayLike=r.fromInteropObservable=r.innerFrom=void 0;var c=t(3909),a=t(6018),l=t(2419),s=t(9500),f=t(9595),d=t(9906),v=t(2743),p=t(7823),b=t(3005),h=t(7968),y=t(2801);function m(e){return new l.Observable((function(r){var t=e[y.observable]();if(b.isFunction(t.subscribe))return t.subscribe(r);throw new TypeError("Provided object does not correctly implement Symbol.observable")}))}function _(e){return new l.Observable((function(r){for(var t=0;t<e.length&&!r.closed;t++)r.next(e[t]);r.complete()}))}function O(e){return new l.Observable((function(r){e.then((function(e){r.closed||(r.next(e),r.complete())}),(function(e){return r.error(e)})).then(null,h.reportUnhandledError)}))}function g(e){return new l.Observable((function(r){var t,n;try{for(var o=u(e),i=o.next();!i.done;i=o.next()){var c=i.value;if(r.next(c),r.closed)return}}catch(e){t={error:e}}finally{try{i&&!i.done&&(n=o.return)&&n.call(o)}finally{if(t)throw t.error}}r.complete()}))}function j(e){return new l.Observable((function(r){(function(e,r){var t,u,c,a;return n(this,void 0,void 0,(function(){var n,l;return o(this,(function(o){switch(o.label){case 0:o.trys.push([0,5,6,11]),t=i(e),o.label=1;case 1:return[4,t.next()];case 2:if((u=o.sent()).done)return[3,4];if(n=u.value,r.next(n),r.closed)return[2];o.label=3;case 3:return[3,1];case 4:return[3,11];case 5:return l=o.sent(),c={error:l},[3,11];case 6:return o.trys.push([6,,9,10]),u&&!u.done&&(a=t.return)?[4,a.call(t)]:[3,8];case 7:o.sent(),o.label=8;case 8:return[3,10];case 9:if(c)throw c.error;return[7];case 10:return[7];case 11:return r.complete(),[2]}}))}))})(e,r).catch((function(e){return r.error(e)}))}))}function P(e){return j(p.readableStreamLikeToAsyncGenerator(e))}r.innerFrom=function(e){if(e instanceof l.Observable)return e;if(null!=e){if(s.isInteropObservable(e))return m(e);if(c.isArrayLike(e))return _(e);if(a.isPromise(e))return O(e);if(f.isAsyncIterable(e))return j(e);if(v.isIterable(e))return g(e);if(p.isReadableStreamLike(e))return P(e)}throw d.createInvalidObservableTypeError(e)},r.fromInteropObservable=m,r.fromArrayLike=_,r.fromPromise=O,r.fromIterable=g,r.fromAsyncIterable=j,r.fromReadableStreamLike=P},8990:(e,r,t)=>{Object.defineProperty(r,"__esModule",{value:!0}),r.interval=void 0;var n=t(2445),o=t(7513);r.interval=function(e,r){return void 0===e&&(e=0),void 0===r&&(r=n.asyncScheduler),e<0&&(e=0),o.timer(e,e,r)}},1846:(e,r,t)=>{Object.defineProperty(r,"__esModule",{value:!0}),r.merge=void 0;var n=t(3783),o=t(7103),i=t(6332),u=t(2433),c=t(5432);r.merge=function(){for(var e=[],r=0;r<arguments.length;r++)e[r]=arguments[r];var t=u.popScheduler(e),a=u.popNumber(e,1/0),l=e;return l.length?1===l.length?o.innerFrom(l[0]):n.mergeAll(a)(c.from(l,t)):i.EMPTY}},1339:(e,r,t)=>{Object.defineProperty(r,"__esModule",{value:!0}),r.never=r.NEVER=void 0;var n=t(2419),o=t(2576);r.NEVER=new n.Observable(o.noop),r.never=function(){return r.NEVER}},5726:(e,r,t)=>{Object.defineProperty(r,"__esModule",{value:!0}),r.of=void 0;var n=t(2433),o=t(5432);r.of=function(){for(var e=[],r=0;r<arguments.length;r++)e[r]=arguments[r];var t=n.popScheduler(e);return o.from(e,t)}},724:(e,r,t)=>{Object.defineProperty(r,"__esModule",{value:!0}),r.onErrorResumeNext=void 0;var n=t(2419),o=t(5498),i=t(4990),u=t(2576),c=t(7103);r.onErrorResumeNext=function(){for(var e=[],r=0;r<arguments.length;r++)e[r]=arguments[r];var t=o.argsOrArgArray(e);return new n.Observable((function(e){var r=0,n=function(){if(r<t.length){var o=void 0;try{o=c.innerFrom(t[r++])}catch(e){return void n()}var a=new i.OperatorSubscriber(e,void 0,u.noop,u.noop);o.subscribe(a),a.add(n)}else e.complete()};n()}))}},4380:(e,r,t)=>{Object.defineProperty(r,"__esModule",{value:!0}),r.pairs=void 0;var n=t(5432);r.pairs=function(e,r){return n.from(Object.entries(e),r)}},7273:(e,r,t)=>{Object.defineProperty(r,"__esModule",{value:!0}),r.partition=void 0;var n=t(8634),o=t(9154),i=t(7103);r.partition=function(e,r,t){return[o.filter(r,t)(i.innerFrom(e)),o.filter(n.not(r,t))(i.innerFrom(e))]}},5182:(e,r,t)=>{Object.defineProperty(r,"__esModule",{value:!0}),r.raceInit=r.race=void 0;var n=t(2419),o=t(7103),i=t(5498),u=t(4990);function c(e){return function(r){for(var t=[],n=function(n){t.push(o.innerFrom(e[n]).subscribe(u.createOperatorSubscriber(r,(function(e){if(t){for(var o=0;o<t.length;o++)o!==n&&t[o].unsubscribe();t=null}r.next(e)}))))},i=0;t&&!r.closed&&i<e.length;i++)n(i)}}r.race=function(){for(var e=[],r=0;r<arguments.length;r++)e[r]=arguments[r];return 1===(e=i.argsOrArgArray(e)).length?o.innerFrom(e[0]):new n.Observable(c(e))},r.raceInit=c},322:(e,r,t)=>{Object.defineProperty(r,"__esModule",{value:!0}),r.range=void 0;var n=t(2419),o=t(6332);r.range=function(e,r,t){if(null==r&&(r=e,e=0),r<=0)return o.EMPTY;var i=r+e;return new n.Observable(t?function(r){var n=e;return t.schedule((function(){n<i?(r.next(n++),this.schedule()):r.complete()}))}:function(r){for(var t=e;t<i&&!r.closed;)r.next(t++);r.complete()})}},2098:(e,r,t)=>{Object.defineProperty(r,"__esModule",{value:!0}),r.throwError=void 0;var n=t(2419),o=t(3005);r.throwError=function(e,r){var t=o.isFunction(e)?e:function(){return e},i=function(e){return e.error(t())};return new n.Observable(r?function(e){return r.schedule(i,0,e)}:i)}},7513:(e,r,t)=>{Object.defineProperty(r,"__esModule",{value:!0}),r.timer=void 0;var n=t(2419),o=t(2445),i=t(9016),u=t(1677);r.timer=function(e,r,t){void 0===e&&(e=0),void 0===t&&(t=o.async);var c=-1;return null!=r&&(i.isScheduler(r)?t=r:c=r),new n.Observable((function(r){var n=u.isValidDate(e)?+e-t.now():e;n<0&&(n=0);var o=0;return t.schedule((function(){r.closed||(r.next(o++),0<=c?this.schedule(void 0,c):r.complete())}),n)}))}},2962:(e,r,t)=>{Object.defineProperty(r,"__esModule",{value:!0}),r.using=void 0;var n=t(2419),o=t(7103),i=t(6332);r.using=function(e,r){return new n.Observable((function(t){var n=e(),u=r(n);return(u?o.innerFrom(u):i.EMPTY).subscribe(t),function(){n&&n.unsubscribe()}}))}},7654:function(e,r,t){var n=this&&this.__read||function(e,r){var t="function"==typeof Symbol&&e[Symbol.iterator];if(!t)return e;var n,o,i=t.call(e),u=[];try{for(;(void 0===r||r-- >0)&&!(n=i.next()).done;)u.push(n.value)}catch(e){o={error:e}}finally{try{n&&!n.done&&(t=i.return)&&t.call(i)}finally{if(o)throw o.error}}return u},o=this&&this.__spreadArray||function(e,r){for(var t=0,n=r.length,o=e.length;t<n;t++,o++)e[o]=r[t];return e};Object.defineProperty(r,"__esModule",{value:!0}),r.zip=void 0;var i=t(2419),u=t(7103),c=t(5498),a=t(6332),l=t(4990),s=t(2433);r.zip=function(){for(var e=[],r=0;r<arguments.length;r++)e[r]=arguments[r];var t=s.popResultSelector(e),f=c.argsOrArgArray(e);return f.length?new i.Observable((function(e){var r=f.map((function(){return[]})),i=f.map((function(){return!1}));e.add((function(){r=i=null}));for(var c=function(c){u.innerFrom(f[c]).subscribe(l.createOperatorSubscriber(e,(function(u){if(r[c].push(u),r.every((function(e){return e.length}))){var a=r.map((function(e){return e.shift()}));e.next(t?t.apply(void 0,o([],n(a))):a),r.some((function(e,r){return!e.length&&i[r]}))&&e.complete()}}),(function(){i[c]=!0,!r[c].length&&e.complete()})))},a=0;!e.closed&&a<f.length;a++)c(a);return function(){r=i=null}})):a.EMPTY}},4990:function(e,r,t){var n,o=this&&this.__extends||(n=function(e,r){return n=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,r){e.__proto__=r}||function(e,r){for(var t in r)Object.prototype.hasOwnProperty.call(r,t)&&(e[t]=r[t])},n(e,r)},function(e,r){if("function"!=typeof r&&null!==r)throw new TypeError("Class extends value "+String(r)+" is not a constructor or null");function t(){this.constructor=e}n(e,r),e.prototype=null===r?Object.create(r):(t.prototype=r.prototype,new t)});Object.defineProperty(r,"__esModule",{value:!0}),r.OperatorSubscriber=r.createOperatorSubscriber=void 0;var i=t(5125);r.createOperatorSubscriber=function(e,r,t,n,o){return new u(e,r,t,n,o)};var u=function(e){function r(r,t,n,o,i,u){var c=e.call(this,r)||this;return c.onFinalize=i,c.shouldUnsubscribe=u,c._next=t?function(e){try{t(e)}catch(e){r.error(e)}}:e.prototype._next,c._error=o?function(e){try{o(e)}catch(e){r.error(e)}finally{this.unsubscribe()}}:e.prototype._error,c._complete=n?function(){try{n()}catch(e){r.error(e)}finally{this.unsubscribe()}}:e.prototype._complete,c}return o(r,e),r.prototype.unsubscribe=function(){var r;if(!this.shouldUnsubscribe||this.shouldUnsubscribe()){var t=this.closed;e.prototype.unsubscribe.call(this),!t&&(null===(r=this.onFinalize)||void 0===r||r.call(this))}},r}(i.Subscriber);r.OperatorSubscriber=u},6474:(e,r,t)=>{Object.defineProperty(r,"__esModule",{value:!0}),r.audit=void 0;var n=t(4935),o=t(7103),i=t(4990);r.audit=function(e){return n.operate((function(r,t){var n=!1,u=null,c=null,a=!1,l=function(){if(null==c||c.unsubscribe(),c=null,n){n=!1;var e=u;u=null,t.next(e)}a&&t.complete()},s=function(){c=null,a&&t.complete()};r.subscribe(i.createOperatorSubscriber(t,(function(r){n=!0,u=r,c||o.innerFrom(e(r)).subscribe(c=i.createOperatorSubscriber(t,l,s))}),(function(){a=!0,(!n||!c||c.closed)&&t.complete()})))}))}},5382:(e,r,t)=>{Object.defineProperty(r,"__esModule",{value:!0}),r.auditTime=void 0;var n=t(2445),o=t(6474),i=t(7513);r.auditTime=function(e,r){return void 0===r&&(r=n.asyncScheduler),o.audit((function(){return i.timer(e,r)}))}},9715:(e,r,t)=>{Object.defineProperty(r,"__esModule",{value:!0}),r.buffer=void 0;var n=t(4935),o=t(2576),i=t(4990),u=t(7103);r.buffer=function(e){return n.operate((function(r,t){var n=[];return r.subscribe(i.createOperatorSubscriber(t,(function(e){return n.push(e)}),(function(){t.next(n),t.complete()}))),u.innerFrom(e).subscribe(i.createOperatorSubscriber(t,(function(){var e=n;n=[],t.next(e)}),o.noop)),function(){n=null}}))}},3814:function(e,r,t){var n=this&&this.__values||function(e){var r="function"==typeof Symbol&&Symbol.iterator,t=r&&e[r],n=0;if(t)return t.call(e);if(e&&"number"==typeof e.length)return{next:function(){return e&&n>=e.length&&(e=void 0),{value:e&&e[n++],done:!e}}};throw new TypeError(r?"Object is not iterable.":"Symbol.iterator is not defined.")};Object.defineProperty(r,"__esModule",{value:!0}),r.bufferCount=void 0;var o=t(4935),i=t(4990),u=t(6967);r.bufferCount=function(e,r){return void 0===r&&(r=null),r=null!=r?r:e,o.operate((function(t,o){var c=[],a=0;t.subscribe(i.createOperatorSubscriber(o,(function(t){var i,l,s,f,d=null;a++%r==0&&c.push([]);try{for(var v=n(c),p=v.next();!p.done;p=v.next())(y=p.value).push(t),e<=y.length&&(d=null!=d?d:[]).push(y)}catch(e){i={error:e}}finally{try{p&&!p.done&&(l=v.return)&&l.call(v)}finally{if(i)throw i.error}}if(d)try{for(var b=n(d),h=b.next();!h.done;h=b.next()){var y=h.value;u.arrRemove(c,y),o.next(y)}}catch(e){s={error:e}}finally{try{h&&!h.done&&(f=b.return)&&f.call(b)}finally{if(s)throw s.error}}}),(function(){var e,r;try{for(var t=n(c),i=t.next();!i.done;i=t.next()){var u=i.value;o.next(u)}}catch(r){e={error:r}}finally{try{i&&!i.done&&(r=t.return)&&r.call(t)}finally{if(e)throw e.error}}o.complete()}),void 0,(function(){c=null})))}))}},7211:function(e,r,t){var n=this&&this.__values||function(e){var r="function"==typeof Symbol&&Symbol.iterator,t=r&&e[r],n=0;if(t)return t.call(e);if(e&&"number"==typeof e.length)return{next:function(){return e&&n>=e.length&&(e=void 0),{value:e&&e[n++],done:!e}}};throw new TypeError(r?"Object is not iterable.":"Symbol.iterator is not defined.")};Object.defineProperty(r,"__esModule",{value:!0}),r.bufferTime=void 0;var o=t(3865),i=t(4935),u=t(4990),c=t(6967),a=t(2445),l=t(2433),s=t(7738);r.bufferTime=function(e){for(var r,t,f=[],d=1;d<arguments.length;d++)f[d-1]=arguments[d];var v=null!==(r=l.popScheduler(f))&&void 0!==r?r:a.asyncScheduler,p=null!==(t=f[0])&&void 0!==t?t:null,b=f[1]||1/0;return i.operate((function(r,t){var i=[],a=!1,l=function(e){var r=e.buffer;e.subs.unsubscribe(),c.arrRemove(i,e),t.next(r),a&&f()},f=function(){if(i){var r=new o.Subscription;t.add(r);var n={buffer:[],subs:r};i.push(n),s.executeSchedule(r,v,(function(){return l(n)}),e)}};null!==p&&p>=0?s.executeSchedule(t,v,f,p,!0):a=!0,f();var d=u.createOperatorSubscriber(t,(function(e){var r,t,o=i.slice();try{for(var u=n(o),c=u.next();!c.done;c=u.next()){var a=c.value,s=a.buffer;s.push(e),b<=s.length&&l(a)}}catch(e){r={error:e}}finally{try{c&&!c.done&&(t=u.return)&&t.call(u)}finally{if(r)throw r.error}}}),(function(){for(;null==i?void 0:i.length;)t.next(i.shift().buffer);null==d||d.unsubscribe(),t.complete(),t.unsubscribe()}),void 0,(function(){return i=null}));r.subscribe(d)}))}},4943:function(e,r,t){var n=this&&this.__values||function(e){var r="function"==typeof Symbol&&Symbol.iterator,t=r&&e[r],n=0;if(t)return t.call(e);if(e&&"number"==typeof e.length)return{next:function(){return e&&n>=e.length&&(e=void 0),{value:e&&e[n++],done:!e}}};throw new TypeError(r?"Object is not iterable.":"Symbol.iterator is not defined.")};Object.defineProperty(r,"__esModule",{value:!0}),r.bufferToggle=void 0;var o=t(3865),i=t(4935),u=t(7103),c=t(4990),a=t(2576),l=t(6967);r.bufferToggle=function(e,r){return i.operate((function(t,i){var s=[];u.innerFrom(e).subscribe(c.createOperatorSubscriber(i,(function(e){var t=[];s.push(t);var n=new o.Subscription;n.add(u.innerFrom(r(e)).subscribe(c.createOperatorSubscriber(i,(function(){l.arrRemove(s,t),i.next(t),n.unsubscribe()}),a.noop)))}),a.noop)),t.subscribe(c.createOperatorSubscriber(i,(function(e){var r,t;try{for(var o=n(s),i=o.next();!i.done;i=o.next())i.value.push(e)}catch(e){r={error:e}}finally{try{i&&!i.done&&(t=o.return)&&t.call(o)}finally{if(r)throw r.error}}}),(function(){for(;s.length>0;)i.next(s.shift());i.complete()})))}))}},1240:(e,r,t)=>{Object.defineProperty(r,"__esModule",{value:!0}),r.bufferWhen=void 0;var n=t(4935),o=t(2576),i=t(4990),u=t(7103);r.bufferWhen=function(e){return n.operate((function(r,t){var n=null,c=null,a=function(){null==c||c.unsubscribe();var r=n;n=[],r&&t.next(r),u.innerFrom(e()).subscribe(c=i.createOperatorSubscriber(t,a,o.noop))};a(),r.subscribe(i.createOperatorSubscriber(t,(function(e){return null==n?void 0:n.push(e)}),(function(){n&&t.next(n),t.complete()}),void 0,(function(){return n=c=null})))}))}},9548:(e,r,t)=>{Object.defineProperty(r,"__esModule",{value:!0}),r.catchError=void 0;var n=t(7103),o=t(4990),i=t(4935);r.catchError=function e(r){return i.operate((function(t,i){var u,c=null,a=!1;c=t.subscribe(o.createOperatorSubscriber(i,void 0,void 0,(function(o){u=n.innerFrom(r(o,e(r)(t))),c?(c.unsubscribe(),c=null,u.subscribe(i)):a=!0}))),a&&(c.unsubscribe(),c=null,u.subscribe(i))}))}},2128:(e,r,t)=>{Object.defineProperty(r,"__esModule",{value:!0}),r.combineAll=void 0;var n=t(3240);r.combineAll=n.combineLatestAll},6318:function(e,r,t){var n=this&&this.__read||function(e,r){var t="function"==typeof Symbol&&e[Symbol.iterator];if(!t)return e;var n,o,i=t.call(e),u=[];try{for(;(void 0===r||r-- >0)&&!(n=i.next()).done;)u.push(n.value)}catch(e){o={error:e}}finally{try{n&&!n.done&&(t=i.return)&&t.call(i)}finally{if(o)throw o.error}}return u},o=this&&this.__spreadArray||function(e,r){for(var t=0,n=r.length,o=e.length;t<n;t++,o++)e[o]=r[t];return e};Object.defineProperty(r,"__esModule",{value:!0}),r.combineLatest=void 0;var i=t(9258),u=t(4935),c=t(5498),a=t(1914),l=t(9985),s=t(2433);r.combineLatest=function e(){for(var r=[],t=0;t<arguments.length;t++)r[t]=arguments[t];var f=s.popResultSelector(r);return f?l.pipe(e.apply(void 0,o([],n(r))),a.mapOneOrManyArgs(f)):u.operate((function(e,t){i.combineLatestInit(o([e],n(c.argsOrArgArray(r))))(t)}))}},3240:(e,r,t)=>{Object.defineProperty(r,"__esModule",{value:!0}),r.combineLatestAll=void 0;var n=t(9258),o=t(2069);r.combineLatestAll=function(e){return o.joinAllInternals(n.combineLatest,e)}},5024:function(e,r,t){var n=this&&this.__read||function(e,r){var t="function"==typeof Symbol&&e[Symbol.iterator];if(!t)return e;var n,o,i=t.call(e),u=[];try{for(;(void 0===r||r-- >0)&&!(n=i.next()).done;)u.push(n.value)}catch(e){o={error:e}}finally{try{n&&!n.done&&(t=i.return)&&t.call(i)}finally{if(o)throw o.error}}return u},o=this&&this.__spreadArray||function(e,r){for(var t=0,n=r.length,o=e.length;t<n;t++,o++)e[o]=r[t];return e};Object.defineProperty(r,"__esModule",{value:!0}),r.combineLatestWith=void 0;var i=t(6318);r.combineLatestWith=function(){for(var e=[],r=0;r<arguments.length;r++)e[r]=arguments[r];return i.combineLatest.apply(void 0,o([],n(e)))}},4919:function(e,r,t){var n=this&&this.__read||function(e,r){var t="function"==typeof Symbol&&e[Symbol.iterator];if(!t)return e;var n,o,i=t.call(e),u=[];try{for(;(void 0===r||r-- >0)&&!(n=i.next()).done;)u.push(n.value)}catch(e){o={error:e}}finally{try{n&&!n.done&&(t=i.return)&&t.call(i)}finally{if(o)throw o.error}}return u},o=this&&this.__spreadArray||function(e,r){for(var t=0,n=r.length,o=e.length;t<n;t++,o++)e[o]=r[t];return e};Object.defineProperty(r,"__esModule",{value:!0}),r.concat=void 0;var i=t(4935),u=t(4413),c=t(2433),a=t(5432);r.concat=function(){for(var e=[],r=0;r<arguments.length;r++)e[r]=arguments[r];var t=c.popScheduler(e);return i.operate((function(r,i){u.concatAll()(a.from(o([r],n(e)),t)).subscribe(i)}))}},4413:(e,r,t)=>{Object.defineProperty(r,"__esModule",{value:!0}),r.concatAll=void 0;var n=t(3783);r.concatAll=function(){return n.mergeAll(1)}},7498:(e,r,t)=>{Object.defineProperty(r,"__esModule",{value:!0}),r.concatMap=void 0;var n=t(9475),o=t(3005);r.concatMap=function(e,r){return o.isFunction(r)?n.mergeMap(e,r,1):n.mergeMap(e,1)}},6109:(e,r,t)=>{Object.defineProperty(r,"__esModule",{value:!0}),r.concatMapTo=void 0;var n=t(7498),o=t(3005);r.concatMapTo=function(e,r){return o.isFunction(r)?n.concatMap((function(){return e}),r):n.concatMap((function(){return e}))}},9664:function(e,r,t){var n=this&&this.__read||function(e,r){var t="function"==typeof Symbol&&e[Symbol.iterator];if(!t)return e;var n,o,i=t.call(e),u=[];try{for(;(void 0===r||r-- >0)&&!(n=i.next()).done;)u.push(n.value)}catch(e){o={error:e}}finally{try{n&&!n.done&&(t=i.return)&&t.call(i)}finally{if(o)throw o.error}}return u},o=this&&this.__spreadArray||function(e,r){for(var t=0,n=r.length,o=e.length;t<n;t++,o++)e[o]=r[t];return e};Object.defineProperty(r,"__esModule",{value:!0}),r.concatWith=void 0;var i=t(4919);r.concatWith=function(){for(var e=[],r=0;r<arguments.length;r++)e[r]=arguments[r];return i.concat.apply(void 0,o([],n(e)))}},1995:(e,r,t)=>{Object.defineProperty(r,"__esModule",{value:!0}),r.connect=void 0;var n=t(3032),o=t(7103),i=t(4935),u=t(851),c={connector:function(){return new n.Subject}};r.connect=function(e,r){void 0===r&&(r=c);var t=r.connector;return i.operate((function(r,n){var i=t();o.innerFrom(e(u.fromSubscribable(i))).subscribe(n),n.add(r.subscribe(i))}))}},993:(e,r,t)=>{Object.defineProperty(r,"__esModule",{value:!0}),r.count=void 0;var n=t(122);r.count=function(e){return n.reduce((function(r,t,n){return!e||e(t,n)?r+1:r}),0)}},496:(e,r,t)=>{Object.defineProperty(r,"__esModule",{value:!0}),r.debounce=void 0;var n=t(4935),o=t(2576),i=t(4990),u=t(7103);r.debounce=function(e){return n.operate((function(r,t){var n=!1,c=null,a=null,l=function(){if(null==a||a.unsubscribe(),a=null,n){n=!1;var e=c;c=null,t.next(e)}};r.subscribe(i.createOperatorSubscriber(t,(function(r){null==a||a.unsubscribe(),n=!0,c=r,a=i.createOperatorSubscriber(t,l,o.noop),u.innerFrom(e(r)).subscribe(a)}),(function(){l(),t.complete()}),void 0,(function(){c=a=null})))}))}},1385:(e,r,t)=>{Object.defineProperty(r,"__esModule",{value:!0}),r.debounceTime=void 0;var n=t(2445),o=t(4935),i=t(4990);r.debounceTime=function(e,r){return void 0===r&&(r=n.asyncScheduler),o.operate((function(t,n){var o=null,u=null,c=null,a=function(){if(o){o.unsubscribe(),o=null;var e=u;u=null,n.next(e)}};function l(){var t=c+e,i=r.now();if(i<t)return o=this.schedule(void 0,t-i),void n.add(o);a()}t.subscribe(i.createOperatorSubscriber(n,(function(t){u=t,c=r.now(),o||(o=r.schedule(l,e),n.add(o))}),(function(){a(),n.complete()}),void 0,(function(){u=o=null})))}))}},1658:(e,r,t)=>{Object.defineProperty(r,"__esModule",{value:!0}),r.defaultIfEmpty=void 0;var n=t(4935),o=t(4990);r.defaultIfEmpty=function(e){return n.operate((function(r,t){var n=!1;r.subscribe(o.createOperatorSubscriber(t,(function(e){n=!0,t.next(e)}),(function(){n||t.next(e),t.complete()})))}))}},5841:(e,r,t)=>{Object.defineProperty(r,"__esModule",{value:!0}),r.delay=void 0;var n=t(2445),o=t(8798),i=t(7513);r.delay=function(e,r){void 0===r&&(r=n.asyncScheduler);var t=i.timer(e,r);return o.delayWhen((function(){return t}))}},8798:(e,r,t)=>{Object.defineProperty(r,"__esModule",{value:!0}),r.delayWhen=void 0;var n=t(2239),o=t(4783),i=t(9438),u=t(8313),c=t(9475),a=t(7103);r.delayWhen=function e(r,t){return t?function(u){return n.concat(t.pipe(o.take(1),i.ignoreElements()),u.pipe(e(r)))}:c.mergeMap((function(e,t){return a.innerFrom(r(e,t)).pipe(o.take(1),u.mapTo(e))}))}},1080:(e,r,t)=>{Object.defineProperty(r,"__esModule",{value:!0}),r.dematerialize=void 0;var n=t(3104),o=t(4935),i=t(4990);r.dematerialize=function(){return o.operate((function(e,r){e.subscribe(i.createOperatorSubscriber(r,(function(e){return n.observeNotification(e,r)})))}))}},3054:(e,r,t)=>{Object.defineProperty(r,"__esModule",{value:!0}),r.distinct=void 0;var n=t(4935),o=t(4990),i=t(2576),u=t(7103);r.distinct=function(e,r){return n.operate((function(t,n){var c=new Set;t.subscribe(o.createOperatorSubscriber(n,(function(r){var t=e?e(r):r;c.has(t)||(c.add(t),n.next(r))}))),r&&u.innerFrom(r).subscribe(o.createOperatorSubscriber(n,(function(){return c.clear()}),i.noop))}))}},8737:(e,r,t)=>{Object.defineProperty(r,"__esModule",{value:!0}),r.distinctUntilChanged=void 0;var n=t(4781),o=t(4935),i=t(4990);function u(e,r){return e===r}r.distinctUntilChanged=function(e,r){return void 0===r&&(r=n.identity),e=null!=e?e:u,o.operate((function(t,n){var o,u=!0;t.subscribe(i.createOperatorSubscriber(n,(function(t){var i=r(t);!u&&e(o,i)||(u=!1,o=i,n.next(t))})))}))}},7957:(e,r,t)=>{Object.defineProperty(r,"__esModule",{value:!0}),r.distinctUntilKeyChanged=void 0;var n=t(8737);r.distinctUntilKeyChanged=function(e,r){return n.distinctUntilChanged((function(t,n){return r?r(t[e],n[e]):t[e]===n[e]}))}},8633:(e,r,t)=>{Object.defineProperty(r,"__esModule",{value:!0}),r.elementAt=void 0;var n=t(2351),o=t(9154),i=t(1779),u=t(1658),c=t(4783);r.elementAt=function(e,r){if(e<0)throw new n.ArgumentOutOfRangeError;var t=arguments.length>=2;return function(a){return a.pipe(o.filter((function(r,t){return t===e})),c.take(1),t?u.defaultIfEmpty(r):i.throwIfEmpty((function(){return new n.ArgumentOutOfRangeError})))}}},911:function(e,r,t){var n=this&&this.__read||function(e,r){var t="function"==typeof Symbol&&e[Symbol.iterator];if(!t)return e;var n,o,i=t.call(e),u=[];try{for(;(void 0===r||r-- >0)&&!(n=i.next()).done;)u.push(n.value)}catch(e){o={error:e}}finally{try{n&&!n.done&&(t=i.return)&&t.call(i)}finally{if(o)throw o.error}}return u},o=this&&this.__spreadArray||function(e,r){for(var t=0,n=r.length,o=e.length;t<n;t++,o++)e[o]=r[t];return e};Object.defineProperty(r,"__esModule",{value:!0}),r.endWith=void 0;var i=t(2239),u=t(5726);r.endWith=function(){for(var e=[],r=0;r<arguments.length;r++)e[r]=arguments[r];return function(r){return i.concat(r,u.of.apply(void 0,o([],n(e))))}}},2096:(e,r,t)=>{Object.defineProperty(r,"__esModule",{value:!0}),r.every=void 0;var n=t(4935),o=t(4990);r.every=function(e,r){return n.operate((function(t,n){var i=0;t.subscribe(o.createOperatorSubscriber(n,(function(o){e.call(r,o,i++,t)||(n.next(!1),n.complete())}),(function(){n.next(!0),n.complete()})))}))}},67:(e,r,t)=>{Object.defineProperty(r,"__esModule",{value:!0}),r.exhaust=void 0;var n=t(5337);r.exhaust=n.exhaustAll},5337:(e,r,t)=>{Object.defineProperty(r,"__esModule",{value:!0}),r.exhaustAll=void 0;var n=t(5635),o=t(4781);r.exhaustAll=function(){return n.exhaustMap(o.identity)}},5635:(e,r,t)=>{Object.defineProperty(r,"__esModule",{value:!0}),r.exhaustMap=void 0;var n=t(7291),o=t(7103),i=t(4935),u=t(4990);r.exhaustMap=function e(r,t){return t?function(i){return i.pipe(e((function(e,i){return o.innerFrom(r(e,i)).pipe(n.map((function(r,n){return t(e,r,i,n)})))})))}:i.operate((function(e,t){var n=0,i=null,c=!1;e.subscribe(u.createOperatorSubscriber(t,(function(e){i||(i=u.createOperatorSubscriber(t,void 0,(function(){i=null,c&&t.complete()})),o.innerFrom(r(e,n++)).subscribe(i))}),(function(){c=!0,!i&&t.complete()})))}))}},9745:(e,r,t)=>{Object.defineProperty(r,"__esModule",{value:!0}),r.expand=void 0;var n=t(4935),o=t(7788);r.expand=function(e,r,t){return void 0===r&&(r=1/0),r=(r||0)<1?1/0:r,n.operate((function(n,i){return o.mergeInternals(n,i,e,r,void 0,!0,t)}))}},9154:(e,r,t)=>{Object.defineProperty(r,"__esModule",{value:!0}),r.filter=void 0;var n=t(4935),o=t(4990);r.filter=function(e,r){return n.operate((function(t,n){var i=0;t.subscribe(o.createOperatorSubscriber(n,(function(t){return e.call(r,t,i++)&&n.next(t)})))}))}},9283:(e,r,t)=>{Object.defineProperty(r,"__esModule",{value:!0}),r.finalize=void 0;var n=t(4935);r.finalize=function(e){return n.operate((function(r,t){try{r.subscribe(t)}finally{t.add(e)}}))}},7119:(e,r,t)=>{Object.defineProperty(r,"__esModule",{value:!0}),r.createFind=r.find=void 0;var n=t(4935),o=t(4990);function i(e,r,t){var n="index"===t;return function(t,i){var u=0;t.subscribe(o.createOperatorSubscriber(i,(function(o){var c=u++;e.call(r,o,c,t)&&(i.next(n?c:o),i.complete())}),(function(){i.next(n?-1:void 0),i.complete()})))}}r.find=function(e,r){return n.operate(i(e,r,"value"))},r.createFind=i},4706:(e,r,t)=>{Object.defineProperty(r,"__esModule",{value:!0}),r.findIndex=void 0;var n=t(4935),o=t(7119);r.findIndex=function(e,r){return n.operate(o.createFind(e,r,"index"))}},9219:(e,r,t)=>{Object.defineProperty(r,"__esModule",{value:!0}),r.first=void 0;var n=t(9474),o=t(9154),i=t(4783),u=t(1658),c=t(1779),a=t(4781);r.first=function(e,r){var t=arguments.length>=2;return function(l){return l.pipe(e?o.filter((function(r,t){return e(r,t,l)})):a.identity,i.take(1),t?u.defaultIfEmpty(r):c.throwIfEmpty((function(){return new n.EmptyError})))}}},1788:(e,r,t)=>{Object.defineProperty(r,"__esModule",{value:!0}),r.flatMap=void 0;var n=t(9475);r.flatMap=n.mergeMap},9749:(e,r,t)=>{Object.defineProperty(r,"__esModule",{value:!0}),r.groupBy=void 0;var n=t(2419),o=t(7103),i=t(3032),u=t(4935),c=t(4990);r.groupBy=function(e,r,t,a){return u.operate((function(u,l){var s;r&&"function"!=typeof r?(t=r.duration,s=r.element,a=r.connector):s=r;var f=new Map,d=function(e){f.forEach(e),e(l)},v=function(e){return d((function(r){return r.error(e)}))},p=0,b=!1,h=new c.OperatorSubscriber(l,(function(r){try{var u=e(r),d=f.get(u);if(!d){f.set(u,d=a?a():new i.Subject);var y=(_=u,O=d,(g=new n.Observable((function(e){p++;var r=O.subscribe(e);return function(){r.unsubscribe(),0==--p&&b&&h.unsubscribe()}}))).key=_,g);if(l.next(y),t){var m=c.createOperatorSubscriber(d,(function(){d.complete(),null==m||m.unsubscribe()}),void 0,void 0,(function(){return f.delete(u)}));h.add(o.innerFrom(t(y)).subscribe(m))}}d.next(s?s(r):r)}catch(e){v(e)}var _,O,g}),(function(){return d((function(e){return e.complete()}))}),v,(function(){return f.clear()}),(function(){return b=!0,0===p}));u.subscribe(h)}))}},9438:(e,r,t)=>{Object.defineProperty(r,"__esModule",{value:!0}),r.ignoreElements=void 0;var n=t(4935),o=t(4990),i=t(2576);r.ignoreElements=function(){return n.operate((function(e,r){e.subscribe(o.createOperatorSubscriber(r,i.noop))}))}},8515:(e,r,t)=>{Object.defineProperty(r,"__esModule",{value:!0}),r.isEmpty=void 0;var n=t(4935),o=t(4990);r.isEmpty=function(){return n.operate((function(e,r){e.subscribe(o.createOperatorSubscriber(r,(function(){r.next(!1),r.complete()}),(function(){r.next(!0),r.complete()})))}))}},2069:(e,r,t)=>{Object.defineProperty(r,"__esModule",{value:!0}),r.joinAllInternals=void 0;var n=t(4781),o=t(1914),i=t(9985),u=t(9475),c=t(2);r.joinAllInternals=function(e,r){return i.pipe(c.toArray(),u.mergeMap((function(r){return e(r)})),r?o.mapOneOrManyArgs(r):n.identity)}},2435:(e,r,t)=>{Object.defineProperty(r,"__esModule",{value:!0}),r.last=void 0;var n=t(9474),o=t(9154),i=t(1980),u=t(1779),c=t(1658),a=t(4781);r.last=function(e,r){var t=arguments.length>=2;return function(l){return l.pipe(e?o.filter((function(r,t){return e(r,t,l)})):a.identity,i.takeLast(1),t?c.defaultIfEmpty(r):u.throwIfEmpty((function(){return new n.EmptyError})))}}},7291:(e,r,t)=>{Object.defineProperty(r,"__esModule",{value:!0}),r.map=void 0;var n=t(4935),o=t(4990);r.map=function(e,r){return n.operate((function(t,n){var i=0;t.subscribe(o.createOperatorSubscriber(n,(function(t){n.next(e.call(r,t,i++))})))}))}},8313:(e,r,t)=>{Object.defineProperty(r,"__esModule",{value:!0}),r.mapTo=void 0;var n=t(7291);r.mapTo=function(e){return n.map((function(){return e}))}},3209:(e,r,t)=>{Object.defineProperty(r,"__esModule",{value:!0}),r.materialize=void 0;var n=t(3104),o=t(4935),i=t(4990);r.materialize=function(){return o.operate((function(e,r){e.subscribe(i.createOperatorSubscriber(r,(function(e){r.next(n.Notification.createNext(e))}),(function(){r.next(n.Notification.createComplete()),r.complete()}),(function(e){r.next(n.Notification.createError(e)),r.complete()})))}))}},2620:(e,r,t)=>{Object.defineProperty(r,"__esModule",{value:!0}),r.max=void 0;var n=t(122),o=t(3005);r.max=function(e){return n.reduce(o.isFunction(e)?function(r,t){return e(r,t)>0?r:t}:function(e,r){return e>r?e:r})}},9821:function(e,r,t){var n=this&&this.__read||function(e,r){var t="function"==typeof Symbol&&e[Symbol.iterator];if(!t)return e;var n,o,i=t.call(e),u=[];try{for(;(void 0===r||r-- >0)&&!(n=i.next()).done;)u.push(n.value)}catch(e){o={error:e}}finally{try{n&&!n.done&&(t=i.return)&&t.call(i)}finally{if(o)throw o.error}}return u},o=this&&this.__spreadArray||function(e,r){for(var t=0,n=r.length,o=e.length;t<n;t++,o++)e[o]=r[t];return e};Object.defineProperty(r,"__esModule",{value:!0}),r.merge=void 0;var i=t(4935),u=t(5498),c=t(3783),a=t(2433),l=t(5432);r.merge=function(){for(var e=[],r=0;r<arguments.length;r++)e[r]=arguments[r];var t=a.popScheduler(e),s=a.popNumber(e,1/0);return e=u.argsOrArgArray(e),i.operate((function(r,i){c.mergeAll(s)(l.from(o([r],n(e)),t)).subscribe(i)}))}},3783:(e,r,t)=>{Object.defineProperty(r,"__esModule",{value:!0}),r.mergeAll=void 0;var n=t(9475),o=t(4781);r.mergeAll=function(e){return void 0===e&&(e=1/0),n.mergeMap(o.identity,e)}},7788:(e,r,t)=>{Object.defineProperty(r,"__esModule",{value:!0}),r.mergeInternals=void 0;var n=t(7103),o=t(7738),i=t(4990);r.mergeInternals=function(e,r,t,u,c,a,l,s){var f=[],d=0,v=0,p=!1,b=function(){!p||f.length||d||r.complete()},h=function(e){return d<u?y(e):f.push(e)},y=function(e){a&&r.next(e),d++;var s=!1;n.innerFrom(t(e,v++)).subscribe(i.createOperatorSubscriber(r,(function(e){null==c||c(e),a?h(e):r.next(e)}),(function(){s=!0}),void 0,(function(){if(s)try{d--;for(var e=function(){var e=f.shift();l?o.executeSchedule(r,l,(function(){return y(e)})):y(e)};f.length&&d<u;)e();b()}catch(e){r.error(e)}})))};return e.subscribe(i.createOperatorSubscriber(r,h,(function(){p=!0,b()}))),function(){null==s||s()}}},9475:(e,r,t)=>{Object.defineProperty(r,"__esModule",{value:!0}),r.mergeMap=void 0;var n=t(7291),o=t(7103),i=t(4935),u=t(7788),c=t(3005);r.mergeMap=function e(r,t,a){return void 0===a&&(a=1/0),c.isFunction(t)?e((function(e,i){return n.map((function(r,n){return t(e,r,i,n)}))(o.innerFrom(r(e,i)))}),a):("number"==typeof t&&(a=t),i.operate((function(e,t){return u.mergeInternals(e,t,r,a)})))}},1211:(e,r,t)=>{Object.defineProperty(r,"__esModule",{value:!0}),r.mergeMapTo=void 0;var n=t(9475),o=t(3005);r.mergeMapTo=function(e,r,t){return void 0===t&&(t=1/0),o.isFunction(r)?n.mergeMap((function(){return e}),r,t):("number"==typeof r&&(t=r),n.mergeMap((function(){return e}),t))}},7267:(e,r,t)=>{Object.defineProperty(r,"__esModule",{value:!0}),r.mergeScan=void 0;var n=t(4935),o=t(7788);r.mergeScan=function(e,r,t){return void 0===t&&(t=1/0),n.operate((function(n,i){var u=r;return o.mergeInternals(n,i,(function(r,t){return e(u,r,t)}),t,(function(e){u=e}),!1,void 0,(function(){return u=null}))}))}},9303:function(e,r,t){var n=this&&this.__read||function(e,r){var t="function"==typeof Symbol&&e[Symbol.iterator];if(!t)return e;var n,o,i=t.call(e),u=[];try{for(;(void 0===r||r-- >0)&&!(n=i.next()).done;)u.push(n.value)}catch(e){o={error:e}}finally{try{n&&!n.done&&(t=i.return)&&t.call(i)}finally{if(o)throw o.error}}return u},o=this&&this.__spreadArray||function(e,r){for(var t=0,n=r.length,o=e.length;t<n;t++,o++)e[o]=r[t];return e};Object.defineProperty(r,"__esModule",{value:!0}),r.mergeWith=void 0;var i=t(9821);r.mergeWith=function(){for(var e=[],r=0;r<arguments.length;r++)e[r]=arguments[r];return i.merge.apply(void 0,o([],n(e)))}},9714:(e,r,t)=>{Object.defineProperty(r,"__esModule",{value:!0}),r.min=void 0;var n=t(122),o=t(3005);r.min=function(e){return n.reduce(o.isFunction(e)?function(r,t){return e(r,t)<0?r:t}:function(e,r){return e<r?e:r})}},3848:(e,r,t)=>{Object.defineProperty(r,"__esModule",{value:!0}),r.multicast=void 0;var n=t(9518),o=t(3005),i=t(1995);r.multicast=function(e,r){var t=o.isFunction(e)?e:function(){return e};return o.isFunction(r)?i.connect(r,{connector:t}):function(e){return new n.ConnectableObservable(e,t)}}},1184:(e,r,t)=>{Object.defineProperty(r,"__esModule",{value:!0}),r.observeOn=void 0;var n=t(7738),o=t(4935),i=t(4990);r.observeOn=function(e,r){return void 0===r&&(r=0),o.operate((function(t,o){t.subscribe(i.createOperatorSubscriber(o,(function(t){return n.executeSchedule(o,e,(function(){return o.next(t)}),r)}),(function(){return n.executeSchedule(o,e,(function(){return o.complete()}),r)}),(function(t){return n.executeSchedule(o,e,(function(){return o.error(t)}),r)})))}))}},7582:function(e,r,t){var n=this&&this.__read||function(e,r){var t="function"==typeof Symbol&&e[Symbol.iterator];if(!t)return e;var n,o,i=t.call(e),u=[];try{for(;(void 0===r||r-- >0)&&!(n=i.next()).done;)u.push(n.value)}catch(e){o={error:e}}finally{try{n&&!n.done&&(t=i.return)&&t.call(i)}finally{if(o)throw o.error}}return u},o=this&&this.__spreadArray||function(e,r){for(var t=0,n=r.length,o=e.length;t<n;t++,o++)e[o]=r[t];return e};Object.defineProperty(r,"__esModule",{value:!0}),r.onErrorResumeNext=r.onErrorResumeNextWith=void 0;var i=t(5498),u=t(724);function c(){for(var e=[],r=0;r<arguments.length;r++)e[r]=arguments[r];var t=i.argsOrArgArray(e);return function(e){return u.onErrorResumeNext.apply(void 0,o([e],n(t)))}}r.onErrorResumeNextWith=c,r.onErrorResumeNext=c},2731:(e,r,t)=>{Object.defineProperty(r,"__esModule",{value:!0}),r.pairwise=void 0;var n=t(4935),o=t(4990);r.pairwise=function(){return n.operate((function(e,r){var t,n=!1;e.subscribe(o.createOperatorSubscriber(r,(function(e){var o=t;t=e,n&&r.next([o,e]),n=!0})))}))}},4691:(e,r,t)=>{Object.defineProperty(r,"__esModule",{value:!0}),r.pluck=void 0;var n=t(7291);r.pluck=function(){for(var e=[],r=0;r<arguments.length;r++)e[r]=arguments[r];var t=e.length;if(0===t)throw new Error("list of properties cannot be empty.");return n.map((function(r){for(var n=r,o=0;o<t;o++){var i=null==n?void 0:n[e[o]];if(void 0===i)return;n=i}return n}))}},4474:(e,r,t)=>{Object.defineProperty(r,"__esModule",{value:!0}),r.publish=void 0;var n=t(3032),o=t(3848),i=t(1995);r.publish=function(e){return e?function(r){return i.connect(e)(r)}:function(e){return o.multicast(new n.Subject)(e)}}},52:(e,r,t)=>{Object.defineProperty(r,"__esModule",{value:!0}),r.publishBehavior=void 0;var n=t(5240),o=t(9518);r.publishBehavior=function(e){return function(r){var t=new n.BehaviorSubject(e);return new o.ConnectableObservable(r,(function(){return t}))}}},2110:(e,r,t)=>{Object.defineProperty(r,"__esModule",{value:!0}),r.publishLast=void 0;var n=t(280),o=t(9518);r.publishLast=function(){return function(e){var r=new n.AsyncSubject;return new o.ConnectableObservable(e,(function(){return r}))}}},9864:(e,r,t)=>{Object.defineProperty(r,"__esModule",{value:!0}),r.publishReplay=void 0;var n=t(3274),o=t(3848),i=t(3005);r.publishReplay=function(e,r,t,u){t&&!i.isFunction(t)&&(u=t);var c=i.isFunction(t)?t:void 0;return function(t){return o.multicast(new n.ReplaySubject(e,r,u),c)(t)}}},179:function(e,r,t){var n=this&&this.__read||function(e,r){var t="function"==typeof Symbol&&e[Symbol.iterator];if(!t)return e;var n,o,i=t.call(e),u=[];try{for(;(void 0===r||r-- >0)&&!(n=i.next()).done;)u.push(n.value)}catch(e){o={error:e}}finally{try{n&&!n.done&&(t=i.return)&&t.call(i)}finally{if(o)throw o.error}}return u},o=this&&this.__spreadArray||function(e,r){for(var t=0,n=r.length,o=e.length;t<n;t++,o++)e[o]=r[t];return e};Object.defineProperty(r,"__esModule",{value:!0}),r.raceWith=void 0;var i=t(5182),u=t(4935),c=t(4781);r.raceWith=function(){for(var e=[],r=0;r<arguments.length;r++)e[r]=arguments[r];return e.length?u.operate((function(r,t){i.raceInit(o([r],n(e)))(t)})):c.identity}},122:(e,r,t)=>{Object.defineProperty(r,"__esModule",{value:!0}),r.reduce=void 0;var n=t(8345),o=t(4935);r.reduce=function(e,r){return o.operate(n.scanInternals(e,r,arguments.length>=2,!1,!0))}},8739:(e,r,t)=>{Object.defineProperty(r,"__esModule",{value:!0}),r.refCount=void 0;var n=t(4935),o=t(4990);r.refCount=function(){return n.operate((function(e,r){var t=null;e._refCount++;var n=o.createOperatorSubscriber(r,void 0,void 0,void 0,(function(){if(!e||e._refCount<=0||0<--e._refCount)t=null;else{var n=e._connection,o=t;t=null,!n||o&&n!==o||n.unsubscribe(),r.unsubscribe()}}));e.subscribe(n),n.closed||(t=e.connect())}))}},5313:(e,r,t)=>{Object.defineProperty(r,"__esModule",{value:!0}),r.repeat=void 0;var n=t(6332),o=t(4935),i=t(4990),u=t(7103),c=t(7513);r.repeat=function(e){var r,t,a=1/0;return null!=e&&("object"==typeof e?(r=e.count,a=void 0===r?1/0:r,t=e.delay):a=e),a<=0?function(){return n.EMPTY}:o.operate((function(e,r){var n,o=0,l=function(){if(null==n||n.unsubscribe(),n=null,null!=t){var e="number"==typeof t?c.timer(t):u.innerFrom(t(o)),a=i.createOperatorSubscriber(r,(function(){a.unsubscribe(),s()}));e.subscribe(a)}else s()},s=function(){var t=!1;n=e.subscribe(i.createOperatorSubscriber(r,void 0,(function(){++o<a?n?l():t=!0:r.complete()}))),t&&l()};s()}))}},4068:(e,r,t)=>{Object.defineProperty(r,"__esModule",{value:!0}),r.repeatWhen=void 0;var n=t(7103),o=t(3032),i=t(4935),u=t(4990);r.repeatWhen=function(e){return i.operate((function(r,t){var i,c,a=!1,l=!1,s=!1,f=function(){return s&&l&&(t.complete(),!0)},d=function(){s=!1,i=r.subscribe(u.createOperatorSubscriber(t,void 0,(function(){s=!0,!f()&&(c||(c=new o.Subject,n.innerFrom(e(c)).subscribe(u.createOperatorSubscriber(t,(function(){i?d():a=!0}),(function(){l=!0,f()})))),c).next()}))),a&&(i.unsubscribe(),i=null,a=!1,d())};d()}))}},64:(e,r,t)=>{Object.defineProperty(r,"__esModule",{value:!0}),r.retry=void 0;var n=t(4935),o=t(4990),i=t(4781),u=t(7513),c=t(7103);r.retry=function(e){var r;void 0===e&&(e=1/0);var t=(r=e&&"object"==typeof e?e:{count:e}).count,a=void 0===t?1/0:t,l=r.delay,s=r.resetOnSuccess,f=void 0!==s&&s;return a<=0?i.identity:n.operate((function(e,r){var t,n=0,i=function(){var s=!1;t=e.subscribe(o.createOperatorSubscriber(r,(function(e){f&&(n=0),r.next(e)}),void 0,(function(e){if(n++<a){var f=function(){t?(t.unsubscribe(),t=null,i()):s=!0};if(null!=l){var d="number"==typeof l?u.timer(l):c.innerFrom(l(e,n)),v=o.createOperatorSubscriber(r,(function(){v.unsubscribe(),f()}),(function(){r.complete()}));d.subscribe(v)}else f()}else r.error(e)}))),s&&(t.unsubscribe(),t=null,i())};i()}))}},1188:(e,r,t)=>{Object.defineProperty(r,"__esModule",{value:!0}),r.retryWhen=void 0;var n=t(7103),o=t(3032),i=t(4935),u=t(4990);r.retryWhen=function(e){return i.operate((function(r,t){var i,c,a=!1,l=function(){i=r.subscribe(u.createOperatorSubscriber(t,void 0,void 0,(function(r){c||(c=new o.Subject,n.innerFrom(e(c)).subscribe(u.createOperatorSubscriber(t,(function(){return i?l():a=!0})))),c&&c.next(r)}))),a&&(i.unsubscribe(),i=null,a=!1,l())};l()}))}},4193:(e,r,t)=>{Object.defineProperty(r,"__esModule",{value:!0}),r.sample=void 0;var n=t(7103),o=t(4935),i=t(2576),u=t(4990);r.sample=function(e){return o.operate((function(r,t){var o=!1,c=null;r.subscribe(u.createOperatorSubscriber(t,(function(e){o=!0,c=e}))),n.innerFrom(e).subscribe(u.createOperatorSubscriber(t,(function(){if(o){o=!1;var e=c;c=null,t.next(e)}}),i.noop))}))}},6170:(e,r,t)=>{Object.defineProperty(r,"__esModule",{value:!0}),r.sampleTime=void 0;var n=t(2445),o=t(4193),i=t(8990);r.sampleTime=function(e,r){return void 0===r&&(r=n.asyncScheduler),o.sample(i.interval(e,r))}},5876:(e,r,t)=>{Object.defineProperty(r,"__esModule",{value:!0}),r.scan=void 0;var n=t(4935),o=t(8345);r.scan=function(e,r){return n.operate(o.scanInternals(e,r,arguments.length>=2,!0))}},8345:(e,r,t)=>{Object.defineProperty(r,"__esModule",{value:!0}),r.scanInternals=void 0;var n=t(4990);r.scanInternals=function(e,r,t,o,i){return function(u,c){var a=t,l=r,s=0;u.subscribe(n.createOperatorSubscriber(c,(function(r){var t=s++;l=a?e(l,r,t):(a=!0,r),o&&c.next(l)}),i&&function(){a&&c.next(l),c.complete()}))}}},1791:(e,r,t)=>{Object.defineProperty(r,"__esModule",{value:!0}),r.sequenceEqual=void 0;var n=t(4935),o=t(4990),i=t(7103);r.sequenceEqual=function(e,r){return void 0===r&&(r=function(e,r){return e===r}),n.operate((function(t,n){var u={buffer:[],complete:!1},c={buffer:[],complete:!1},a=function(e){n.next(e),n.complete()},l=function(e,t){var i=o.createOperatorSubscriber(n,(function(n){var o=t.buffer,i=t.complete;0===o.length?i?a(!1):e.buffer.push(n):!r(n,o.shift())&&a(!1)}),(function(){e.complete=!0;var r=t.complete,n=t.buffer;r&&a(0===n.length),null==i||i.unsubscribe()}));return i};t.subscribe(l(u,c)),i.innerFrom(e).subscribe(l(c,u))}))}},5137:function(e,r,t){var n=this&&this.__read||function(e,r){var t="function"==typeof Symbol&&e[Symbol.iterator];if(!t)return e;var n,o,i=t.call(e),u=[];try{for(;(void 0===r||r-- >0)&&!(n=i.next()).done;)u.push(n.value)}catch(e){o={error:e}}finally{try{n&&!n.done&&(t=i.return)&&t.call(i)}finally{if(o)throw o.error}}return u},o=this&&this.__spreadArray||function(e,r){for(var t=0,n=r.length,o=e.length;t<n;t++,o++)e[o]=r[t];return e};Object.defineProperty(r,"__esModule",{value:!0}),r.share=void 0;var i=t(7103),u=t(3032),c=t(5125),a=t(4935);function l(e,r){for(var t=[],u=2;u<arguments.length;u++)t[u-2]=arguments[u];if(!0!==r){if(!1!==r){var a=new c.SafeSubscriber({next:function(){a.unsubscribe(),e()}});return i.innerFrom(r.apply(void 0,o([],n(t)))).subscribe(a)}}else e()}r.share=function(e){void 0===e&&(e={});var r=e.connector,t=void 0===r?function(){return new u.Subject}:r,n=e.resetOnError,o=void 0===n||n,s=e.resetOnComplete,f=void 0===s||s,d=e.resetOnRefCountZero,v=void 0===d||d;return function(e){var r,n,u,s=0,d=!1,p=!1,b=function(){null==n||n.unsubscribe(),n=void 0},h=function(){b(),r=u=void 0,d=p=!1},y=function(){var e=r;h(),null==e||e.unsubscribe()};return a.operate((function(e,a){s++,p||d||b();var m=u=null!=u?u:t();a.add((function(){0!=--s||p||d||(n=l(y,v))})),m.subscribe(a),!r&&s>0&&(r=new c.SafeSubscriber({next:function(e){return m.next(e)},error:function(e){p=!0,b(),n=l(h,o,e),m.error(e)},complete:function(){d=!0,b(),n=l(h,f),m.complete()}}),i.innerFrom(e).subscribe(r))}))(e)}}},1348:(e,r,t)=>{Object.defineProperty(r,"__esModule",{value:!0}),r.shareReplay=void 0;var n=t(3274),o=t(5137);r.shareReplay=function(e,r,t){var i,u,c,a,l=!1;return e&&"object"==typeof e?(i=e.bufferSize,a=void 0===i?1/0:i,u=e.windowTime,r=void 0===u?1/0:u,l=void 0!==(c=e.refCount)&&c,t=e.scheduler):a=null!=e?e:1/0,o.share({connector:function(){return new n.ReplaySubject(a,r,t)},resetOnError:!0,resetOnComplete:!1,resetOnRefCountZero:l})}},8242:(e,r,t)=>{Object.defineProperty(r,"__esModule",{value:!0}),r.single=void 0;var n=t(9474),o=t(6156),i=t(8598),u=t(4935),c=t(4990);r.single=function(e){return u.operate((function(r,t){var u,a=!1,l=!1,s=0;r.subscribe(c.createOperatorSubscriber(t,(function(n){l=!0,e&&!e(n,s++,r)||(a&&t.error(new o.SequenceError("Too many matching values")),a=!0,u=n)}),(function(){a?(t.next(u),t.complete()):t.error(l?new i.NotFoundError("No matching values"):new n.EmptyError)})))}))}},3169:(e,r,t)=>{Object.defineProperty(r,"__esModule",{value:!0}),r.skip=void 0;var n=t(9154);r.skip=function(e){return n.filter((function(r,t){return e<=t}))}},2454:(e,r,t)=>{Object.defineProperty(r,"__esModule",{value:!0}),r.skipLast=void 0;var n=t(4781),o=t(4935),i=t(4990);r.skipLast=function(e){return e<=0?n.identity:o.operate((function(r,t){var n=new Array(e),o=0;return r.subscribe(i.createOperatorSubscriber(t,(function(r){var i=o++;if(i<e)n[i]=r;else{var u=i%e,c=n[u];n[u]=r,t.next(c)}}))),function(){n=null}}))}},6931:(e,r,t)=>{Object.defineProperty(r,"__esModule",{value:!0}),r.skipUntil=void 0;var n=t(4935),o=t(4990),i=t(7103),u=t(2576);r.skipUntil=function(e){return n.operate((function(r,t){var n=!1,c=o.createOperatorSubscriber(t,(function(){null==c||c.unsubscribe(),n=!0}),u.noop);i.innerFrom(e).subscribe(c),r.subscribe(o.createOperatorSubscriber(t,(function(e){return n&&t.next(e)})))}))}},7913:(e,r,t)=>{Object.defineProperty(r,"__esModule",{value:!0}),r.skipWhile=void 0;var n=t(4935),o=t(4990);r.skipWhile=function(e){return n.operate((function(r,t){var n=!1,i=0;r.subscribe(o.createOperatorSubscriber(t,(function(r){return(n||(n=!e(r,i++)))&&t.next(r)})))}))}},9234:(e,r,t)=>{Object.defineProperty(r,"__esModule",{value:!0}),r.startWith=void 0;var n=t(2239),o=t(2433),i=t(4935);r.startWith=function(){for(var e=[],r=0;r<arguments.length;r++)e[r]=arguments[r];var t=o.popScheduler(e);return i.operate((function(r,o){(t?n.concat(e,r,t):n.concat(e,r)).subscribe(o)}))}},276:(e,r,t)=>{Object.defineProperty(r,"__esModule",{value:!0}),r.subscribeOn=void 0;var n=t(4935);r.subscribeOn=function(e,r){return void 0===r&&(r=0),n.operate((function(t,n){n.add(e.schedule((function(){return t.subscribe(n)}),r))}))}},9253:(e,r,t)=>{Object.defineProperty(r,"__esModule",{value:!0}),r.switchAll=void 0;var n=t(8518),o=t(4781);r.switchAll=function(){return n.switchMap(o.identity)}},8518:(e,r,t)=>{Object.defineProperty(r,"__esModule",{value:!0}),r.switchMap=void 0;var n=t(7103),o=t(4935),i=t(4990);r.switchMap=function(e,r){return o.operate((function(t,o){var u=null,c=0,a=!1,l=function(){return a&&!u&&o.complete()};t.subscribe(i.createOperatorSubscriber(o,(function(t){null==u||u.unsubscribe();var a=0,s=c++;n.innerFrom(e(t,s)).subscribe(u=i.createOperatorSubscriber(o,(function(e){return o.next(r?r(t,e,s,a++):e)}),(function(){u=null,l()})))}),(function(){a=!0,l()})))}))}},1173:(e,r,t)=>{Object.defineProperty(r,"__esModule",{value:!0}),r.switchMapTo=void 0;var n=t(8518),o=t(3005);r.switchMapTo=function(e,r){return o.isFunction(r)?n.switchMap((function(){return e}),r):n.switchMap((function(){return e}))}},3855:(e,r,t)=>{Object.defineProperty(r,"__esModule",{value:!0}),r.switchScan=void 0;var n=t(8518),o=t(4935);r.switchScan=function(e,r){return o.operate((function(t,o){var i=r;return n.switchMap((function(r,t){return e(i,r,t)}),(function(e,r){return i=r,r}))(t).subscribe(o),function(){i=null}}))}},4783:(e,r,t)=>{Object.defineProperty(r,"__esModule",{value:!0}),r.take=void 0;var n=t(6332),o=t(4935),i=t(4990);r.take=function(e){return e<=0?function(){return n.EMPTY}:o.operate((function(r,t){var n=0;r.subscribe(i.createOperatorSubscriber(t,(function(r){++n<=e&&(t.next(r),e<=n&&t.complete())})))}))}},1980:function(e,r,t){var n=this&&this.__values||function(e){var r="function"==typeof Symbol&&Symbol.iterator,t=r&&e[r],n=0;if(t)return t.call(e);if(e&&"number"==typeof e.length)return{next:function(){return e&&n>=e.length&&(e=void 0),{value:e&&e[n++],done:!e}}};throw new TypeError(r?"Object is not iterable.":"Symbol.iterator is not defined.")};Object.defineProperty(r,"__esModule",{value:!0}),r.takeLast=void 0;var o=t(6332),i=t(4935),u=t(4990);r.takeLast=function(e){return e<=0?function(){return o.EMPTY}:i.operate((function(r,t){var o=[];r.subscribe(u.createOperatorSubscriber(t,(function(r){o.push(r),e<o.length&&o.shift()}),(function(){var e,r;try{for(var i=n(o),u=i.next();!u.done;u=i.next()){var c=u.value;t.next(c)}}catch(r){e={error:r}}finally{try{u&&!u.done&&(r=i.return)&&r.call(i)}finally{if(e)throw e.error}}t.complete()}),void 0,(function(){o=null})))}))}},9845:(e,r,t)=>{Object.defineProperty(r,"__esModule",{value:!0}),r.takeUntil=void 0;var n=t(4935),o=t(4990),i=t(7103),u=t(2576);r.takeUntil=function(e){return n.operate((function(r,t){i.innerFrom(e).subscribe(o.createOperatorSubscriber(t,(function(){return t.complete()}),u.noop)),!t.closed&&r.subscribe(t)}))}},6060:(e,r,t)=>{Object.defineProperty(r,"__esModule",{value:!0}),r.takeWhile=void 0;var n=t(4935),o=t(4990);r.takeWhile=function(e,r){return void 0===r&&(r=!1),n.operate((function(t,n){var i=0;t.subscribe(o.createOperatorSubscriber(n,(function(t){var o=e(t,i++);(o||r)&&n.next(t),!o&&n.complete()})))}))}},1138:(e,r,t)=>{Object.defineProperty(r,"__esModule",{value:!0}),r.tap=void 0;var n=t(3005),o=t(4935),i=t(4990),u=t(4781);r.tap=function(e,r,t){var c=n.isFunction(e)||r||t?{next:e,error:r,complete:t}:e;return c?o.operate((function(e,r){var t;null===(t=c.subscribe)||void 0===t||t.call(c);var n=!0;e.subscribe(i.createOperatorSubscriber(r,(function(e){var t;null===(t=c.next)||void 0===t||t.call(c,e),r.next(e)}),(function(){var e;n=!1,null===(e=c.complete)||void 0===e||e.call(c),r.complete()}),(function(e){var t;n=!1,null===(t=c.error)||void 0===t||t.call(c,e),r.error(e)}),(function(){var e,r;n&&(null===(e=c.unsubscribe)||void 0===e||e.call(c)),null===(r=c.finalize)||void 0===r||r.call(c)})))})):u.identity}},7306:(e,r,t)=>{Object.defineProperty(r,"__esModule",{value:!0}),r.throttle=void 0;var n=t(4935),o=t(4990),i=t(7103);r.throttle=function(e,r){return n.operate((function(t,n){var u=null!=r?r:{},c=u.leading,a=void 0===c||c,l=u.trailing,s=void 0!==l&&l,f=!1,d=null,v=null,p=!1,b=function(){null==v||v.unsubscribe(),v=null,s&&(m(),p&&n.complete())},h=function(){v=null,p&&n.complete()},y=function(r){return v=i.innerFrom(e(r)).subscribe(o.createOperatorSubscriber(n,b,h))},m=function(){if(f){f=!1;var e=d;d=null,n.next(e),!p&&y(e)}};t.subscribe(o.createOperatorSubscriber(n,(function(e){f=!0,d=e,(!v||v.closed)&&(a?m():y(e))}),(function(){p=!0,(!(s&&f&&v)||v.closed)&&n.complete()})))}))}},8968:(e,r,t)=>{Object.defineProperty(r,"__esModule",{value:!0}),r.throttleTime=void 0;var n=t(2445),o=t(7306),i=t(7513);r.throttleTime=function(e,r,t){void 0===r&&(r=n.asyncScheduler);var u=i.timer(e,r);return o.throttle((function(){return u}),t)}},1779:(e,r,t)=>{Object.defineProperty(r,"__esModule",{value:!0}),r.throwIfEmpty=void 0;var n=t(9474),o=t(4935),i=t(4990);function u(){return new n.EmptyError}r.throwIfEmpty=function(e){return void 0===e&&(e=u),o.operate((function(r,t){var n=!1;r.subscribe(i.createOperatorSubscriber(t,(function(e){n=!0,t.next(e)}),(function(){return n?t.complete():t.error(e())})))}))}},8005:(e,r,t)=>{Object.defineProperty(r,"__esModule",{value:!0}),r.TimeInterval=r.timeInterval=void 0;var n=t(2445),o=t(4935),i=t(4990);r.timeInterval=function(e){return void 0===e&&(e=n.asyncScheduler),o.operate((function(r,t){var n=e.now();r.subscribe(i.createOperatorSubscriber(t,(function(r){var o=e.now(),i=o-n;n=o,t.next(new u(r,i))})))}))};var u=function(e,r){this.value=e,this.interval=r};r.TimeInterval=u},4173:(e,r,t)=>{Object.defineProperty(r,"__esModule",{value:!0}),r.timeout=r.TimeoutError=void 0;var n=t(2445),o=t(1677),i=t(4935),u=t(7103),c=t(7029),a=t(4990),l=t(7738);function s(e){throw new r.TimeoutError(e)}r.TimeoutError=c.createErrorClass((function(e){return function(r){void 0===r&&(r=null),e(this),this.message="Timeout has occurred",this.name="TimeoutError",this.info=r}})),r.timeout=function(e,r){var t=o.isValidDate(e)?{first:e}:"number"==typeof e?{each:e}:e,c=t.first,f=t.each,d=t.with,v=void 0===d?s:d,p=t.scheduler,b=void 0===p?null!=r?r:n.asyncScheduler:p,h=t.meta,y=void 0===h?null:h;if(null==c&&null==f)throw new TypeError("No timeout provided.");return i.operate((function(e,r){var t,n,o=null,i=0,s=function(e){n=l.executeSchedule(r,b,(function(){try{t.unsubscribe(),u.innerFrom(v({meta:y,lastValue:o,seen:i})).subscribe(r)}catch(e){r.error(e)}}),e)};t=e.subscribe(a.createOperatorSubscriber(r,(function(e){null==n||n.unsubscribe(),i++,r.next(o=e),f>0&&s(f)}),void 0,void 0,(function(){(null==n?void 0:n.closed)||null==n||n.unsubscribe(),o=null}))),!i&&s(null!=c?"number"==typeof c?c:+c-b.now():f)}))}},7223:(e,r,t)=>{Object.defineProperty(r,"__esModule",{value:!0}),r.timeoutWith=void 0;var n=t(2445),o=t(1677),i=t(4173);r.timeoutWith=function(e,r,t){var u,c,a;if(t=null!=t?t:n.async,o.isValidDate(e)?u=e:"number"==typeof e&&(c=e),!r)throw new TypeError("No observable provided to switch to");if(a=function(){return r},null==u&&null==c)throw new TypeError("No timeout provided.");return i.timeout({first:u,each:c,scheduler:t,with:a})}},8975:(e,r,t)=>{Object.defineProperty(r,"__esModule",{value:!0}),r.timestamp=void 0;var n=t(7950),o=t(7291);r.timestamp=function(e){return void 0===e&&(e=n.dateTimestampProvider),o.map((function(r){return{value:r,timestamp:e.now()}}))}},2:(e,r,t)=>{Object.defineProperty(r,"__esModule",{value:!0}),r.toArray=void 0;var n=t(122),o=t(4935),i=function(e,r){return e.push(r),e};r.toArray=function(){return o.operate((function(e,r){n.reduce(i,[])(e).subscribe(r)}))}},2826:(e,r,t)=>{Object.defineProperty(r,"__esModule",{value:!0}),r.window=void 0;var n=t(3032),o=t(4935),i=t(4990),u=t(2576),c=t(7103);r.window=function(e){return o.operate((function(r,t){var o=new n.Subject;t.next(o.asObservable());var a=function(e){o.error(e),t.error(e)};return r.subscribe(i.createOperatorSubscriber(t,(function(e){return null==o?void 0:o.next(e)}),(function(){o.complete(),t.complete()}),a)),c.innerFrom(e).subscribe(i.createOperatorSubscriber(t,(function(){o.complete(),t.next(o=new n.Subject)}),u.noop,a)),function(){null==o||o.unsubscribe(),o=null}}))}},7526:function(e,r,t){var n=this&&this.__values||function(e){var r="function"==typeof Symbol&&Symbol.iterator,t=r&&e[r],n=0;if(t)return t.call(e);if(e&&"number"==typeof e.length)return{next:function(){return e&&n>=e.length&&(e=void 0),{value:e&&e[n++],done:!e}}};throw new TypeError(r?"Object is not iterable.":"Symbol.iterator is not defined.")};Object.defineProperty(r,"__esModule",{value:!0}),r.windowCount=void 0;var o=t(3032),i=t(4935),u=t(4990);r.windowCount=function(e,r){void 0===r&&(r=0);var t=r>0?r:e;return i.operate((function(r,i){var c=[new o.Subject],a=0;i.next(c[0].asObservable()),r.subscribe(u.createOperatorSubscriber(i,(function(r){var u,l;try{for(var s=n(c),f=s.next();!f.done;f=s.next())f.value.next(r)}catch(e){u={error:e}}finally{try{f&&!f.done&&(l=s.return)&&l.call(s)}finally{if(u)throw u.error}}var d=a-e+1;if(d>=0&&d%t==0&&c.shift().complete(),++a%t==0){var v=new o.Subject;c.push(v),i.next(v.asObservable())}}),(function(){for(;c.length>0;)c.shift().complete();i.complete()}),(function(e){for(;c.length>0;)c.shift().error(e);i.error(e)}),(function(){c=null})))}))}},8294:(e,r,t)=>{Object.defineProperty(r,"__esModule",{value:!0}),r.windowTime=void 0;var n=t(3032),o=t(2445),i=t(3865),u=t(4935),c=t(4990),a=t(6967),l=t(2433),s=t(7738);r.windowTime=function(e){for(var r,t,f=[],d=1;d<arguments.length;d++)f[d-1]=arguments[d];var v=null!==(r=l.popScheduler(f))&&void 0!==r?r:o.asyncScheduler,p=null!==(t=f[0])&&void 0!==t?t:null,b=f[1]||1/0;return u.operate((function(r,t){var o=[],u=!1,l=function(e){var r=e.window,t=e.subs;r.complete(),t.unsubscribe(),a.arrRemove(o,e),u&&f()},f=function(){if(o){var r=new i.Subscription;t.add(r);var u=new n.Subject,c={window:u,subs:r,seen:0};o.push(c),t.next(u.asObservable()),s.executeSchedule(r,v,(function(){return l(c)}),e)}};null!==p&&p>=0?s.executeSchedule(t,v,f,p,!0):u=!0,f();var d=function(e){return o.slice().forEach(e)},h=function(e){d((function(r){var t=r.window;return e(t)})),e(t),t.unsubscribe()};return r.subscribe(c.createOperatorSubscriber(t,(function(e){d((function(r){r.window.next(e),b<=++r.seen&&l(r)}))}),(function(){return h((function(e){return e.complete()}))}),(function(e){return h((function(r){return r.error(e)}))}))),function(){o=null}}))}},1883:function(e,r,t){var n=this&&this.__values||function(e){var r="function"==typeof Symbol&&Symbol.iterator,t=r&&e[r],n=0;if(t)return t.call(e);if(e&&"number"==typeof e.length)return{next:function(){return e&&n>=e.length&&(e=void 0),{value:e&&e[n++],done:!e}}};throw new TypeError(r?"Object is not iterable.":"Symbol.iterator is not defined.")};Object.defineProperty(r,"__esModule",{value:!0}),r.windowToggle=void 0;var o=t(3032),i=t(3865),u=t(4935),c=t(7103),a=t(4990),l=t(2576),s=t(6967);r.windowToggle=function(e,r){return u.operate((function(t,u){var f=[],d=function(e){for(;0<f.length;)f.shift().error(e);u.error(e)};c.innerFrom(e).subscribe(a.createOperatorSubscriber(u,(function(e){var t=new o.Subject;f.push(t);var n,v=new i.Subscription;try{n=c.innerFrom(r(e))}catch(e){return void d(e)}u.next(t.asObservable()),v.add(n.subscribe(a.createOperatorSubscriber(u,(function(){s.arrRemove(f,t),t.complete(),v.unsubscribe()}),l.noop,d)))}),l.noop)),t.subscribe(a.createOperatorSubscriber(u,(function(e){var r,t,o=f.slice();try{for(var i=n(o),u=i.next();!u.done;u=i.next())u.value.next(e)}catch(e){r={error:e}}finally{try{u&&!u.done&&(t=i.return)&&t.call(i)}finally{if(r)throw r.error}}}),(function(){for(;0<f.length;)f.shift().complete();u.complete()}),d,(function(){for(;0<f.length;)f.shift().unsubscribe()})))}))}},4309:(e,r,t)=>{Object.defineProperty(r,"__esModule",{value:!0}),r.windowWhen=void 0;var n=t(3032),o=t(4935),i=t(4990),u=t(7103);r.windowWhen=function(e){return o.operate((function(r,t){var o,c,a=function(e){o.error(e),t.error(e)},l=function(){var r;null==c||c.unsubscribe(),null==o||o.complete(),o=new n.Subject,t.next(o.asObservable());try{r=u.innerFrom(e())}catch(e){return void a(e)}r.subscribe(c=i.createOperatorSubscriber(t,l,l,a))};l(),r.subscribe(i.createOperatorSubscriber(t,(function(e){return o.next(e)}),(function(){o.complete(),t.complete()}),a,(function(){null==c||c.unsubscribe(),o=null})))}))}},3041:function(e,r,t){var n=this&&this.__read||function(e,r){var t="function"==typeof Symbol&&e[Symbol.iterator];if(!t)return e;var n,o,i=t.call(e),u=[];try{for(;(void 0===r||r-- >0)&&!(n=i.next()).done;)u.push(n.value)}catch(e){o={error:e}}finally{try{n&&!n.done&&(t=i.return)&&t.call(i)}finally{if(o)throw o.error}}return u},o=this&&this.__spreadArray||function(e,r){for(var t=0,n=r.length,o=e.length;t<n;t++,o++)e[o]=r[t];return e};Object.defineProperty(r,"__esModule",{value:!0}),r.withLatestFrom=void 0;var i=t(4935),u=t(4990),c=t(7103),a=t(4781),l=t(2576),s=t(2433);r.withLatestFrom=function(){for(var e=[],r=0;r<arguments.length;r++)e[r]=arguments[r];var t=s.popResultSelector(e);return i.operate((function(r,i){for(var s=e.length,f=new Array(s),d=e.map((function(){return!1})),v=!1,p=function(r){c.innerFrom(e[r]).subscribe(u.createOperatorSubscriber(i,(function(e){f[r]=e,v||d[r]||(d[r]=!0,(v=d.every(a.identity))&&(d=null))}),l.noop))},b=0;b<s;b++)p(b);r.subscribe(u.createOperatorSubscriber(i,(function(e){if(v){var r=o([e],n(f));i.next(t?t.apply(void 0,o([],n(r))):r)}})))}))}},4400:function(e,r,t){var n=this&&this.__read||function(e,r){var t="function"==typeof Symbol&&e[Symbol.iterator];if(!t)return e;var n,o,i=t.call(e),u=[];try{for(;(void 0===r||r-- >0)&&!(n=i.next()).done;)u.push(n.value)}catch(e){o={error:e}}finally{try{n&&!n.done&&(t=i.return)&&t.call(i)}finally{if(o)throw o.error}}return u},o=this&&this.__spreadArray||function(e,r){for(var t=0,n=r.length,o=e.length;t<n;t++,o++)e[o]=r[t];return e};Object.defineProperty(r,"__esModule",{value:!0}),r.zip=void 0;var i=t(7654),u=t(4935);r.zip=function(){for(var e=[],r=0;r<arguments.length;r++)e[r]=arguments[r];return u.operate((function(r,t){i.zip.apply(void 0,o([r],n(e))).subscribe(t)}))}},8593:(e,r,t)=>{Object.defineProperty(r,"__esModule",{value:!0}),r.zipAll=void 0;var n=t(7654),o=t(2069);r.zipAll=function(e){return o.joinAllInternals(n.zip,e)}},8096:function(e,r,t){var n=this&&this.__read||function(e,r){var t="function"==typeof Symbol&&e[Symbol.iterator];if(!t)return e;var n,o,i=t.call(e),u=[];try{for(;(void 0===r||r-- >0)&&!(n=i.next()).done;)u.push(n.value)}catch(e){o={error:e}}finally{try{n&&!n.done&&(t=i.return)&&t.call(i)}finally{if(o)throw o.error}}return u},o=this&&this.__spreadArray||function(e,r){for(var t=0,n=r.length,o=e.length;t<n;t++,o++)e[o]=r[t];return e};Object.defineProperty(r,"__esModule",{value:!0}),r.zipWith=void 0;var i=t(4400);r.zipWith=function(){for(var e=[],r=0;r<arguments.length;r++)e[r]=arguments[r];return i.zip.apply(void 0,o([],n(e)))}},7631:(e,r,t)=>{Object.defineProperty(r,"__esModule",{value:!0}),r.scheduleArray=void 0;var n=t(2419);r.scheduleArray=function(e,r){return new n.Observable((function(t){var n=0;return r.schedule((function(){n===e.length?t.complete():(t.next(e[n++]),t.closed||this.schedule())}))}))}},8489:(e,r,t)=>{Object.defineProperty(r,"__esModule",{value:!0}),r.scheduleAsyncIterable=void 0;var n=t(2419),o=t(7738);r.scheduleAsyncIterable=function(e,r){if(!e)throw new Error("Iterable cannot be null");return new n.Observable((function(t){o.executeSchedule(t,r,(function(){var n=e[Symbol.asyncIterator]();o.executeSchedule(t,r,(function(){n.next().then((function(e){e.done?t.complete():t.next(e.value)}))}),0,!0)}))}))}},1297:(e,r,t)=>{Object.defineProperty(r,"__esModule",{value:!0}),r.scheduleIterable=void 0;var n=t(2419),o=t(3725),i=t(3005),u=t(7738);r.scheduleIterable=function(e,r){return new n.Observable((function(t){var n;return u.executeSchedule(t,r,(function(){n=e[o.iterator](),u.executeSchedule(t,r,(function(){var e,r,o;try{r=(e=n.next()).value,o=e.done}catch(e){return void t.error(e)}o?t.complete():t.next(r)}),0,!0)})),function(){return i.isFunction(null==n?void 0:n.return)&&n.return()}}))}},4001:(e,r,t)=>{Object.defineProperty(r,"__esModule",{value:!0}),r.scheduleObservable=void 0;var n=t(7103),o=t(1184),i=t(276);r.scheduleObservable=function(e,r){return n.innerFrom(e).pipe(i.subscribeOn(r),o.observeOn(r))}},5143:(e,r,t)=>{Object.defineProperty(r,"__esModule",{value:!0}),r.schedulePromise=void 0;var n=t(7103),o=t(1184),i=t(276);r.schedulePromise=function(e,r){return n.innerFrom(e).pipe(i.subscribeOn(r),o.observeOn(r))}},3676:(e,r,t)=>{Object.defineProperty(r,"__esModule",{value:!0}),r.scheduleReadableStreamLike=void 0;var n=t(8489),o=t(7823);r.scheduleReadableStreamLike=function(e,r){return n.scheduleAsyncIterable(o.readableStreamLikeToAsyncGenerator(e),r)}},5207:(e,r,t)=>{Object.defineProperty(r,"__esModule",{value:!0}),r.scheduled=void 0;var n=t(4001),o=t(5143),i=t(7631),u=t(1297),c=t(8489),a=t(9500),l=t(6018),s=t(3909),f=t(2743),d=t(9595),v=t(9906),p=t(7823),b=t(3676);r.scheduled=function(e,r){if(null!=e){if(a.isInteropObservable(e))return n.scheduleObservable(e,r);if(s.isArrayLike(e))return i.scheduleArray(e,r);if(l.isPromise(e))return o.schedulePromise(e,r);if(d.isAsyncIterable(e))return c.scheduleAsyncIterable(e,r);if(f.isIterable(e))return u.scheduleIterable(e,r);if(p.isReadableStreamLike(e))return b.scheduleReadableStreamLike(e,r)}throw v.createInvalidObservableTypeError(e)}},1986:function(e,r,t){var n,o=this&&this.__extends||(n=function(e,r){return n=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,r){e.__proto__=r}||function(e,r){for(var t in r)Object.prototype.hasOwnProperty.call(r,t)&&(e[t]=r[t])},n(e,r)},function(e,r){if("function"!=typeof r&&null!==r)throw new TypeError("Class extends value "+String(r)+" is not a constructor or null");function t(){this.constructor=e}n(e,r),e.prototype=null===r?Object.create(r):(t.prototype=r.prototype,new t)});Object.defineProperty(r,"__esModule",{value:!0}),r.Action=void 0;var i=function(e){function r(r,t){return e.call(this)||this}return o(r,e),r.prototype.schedule=function(e,r){return void 0===r&&(r=0),this},r}(t(3865).Subscription);r.Action=i},7574:function(e,r,t){var n,o=this&&this.__extends||(n=function(e,r){return n=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,r){e.__proto__=r}||function(e,r){for(var t in r)Object.prototype.hasOwnProperty.call(r,t)&&(e[t]=r[t])},n(e,r)},function(e,r){if("function"!=typeof r&&null!==r)throw new TypeError("Class extends value "+String(r)+" is not a constructor or null");function t(){this.constructor=e}n(e,r),e.prototype=null===r?Object.create(r):(t.prototype=r.prototype,new t)});Object.defineProperty(r,"__esModule",{value:!0}),r.AnimationFrameAction=void 0;var i=t(9702),u=t(505),c=function(e){function r(r,t){var n=e.call(this,r,t)||this;return n.scheduler=r,n.work=t,n}return o(r,e),r.prototype.requestAsyncId=function(r,t,n){return void 0===n&&(n=0),null!==n&&n>0?e.prototype.requestAsyncId.call(this,r,t,n):(r.actions.push(this),r._scheduled||(r._scheduled=u.animationFrameProvider.requestAnimationFrame((function(){return r.flush(void 0)}))))},r.prototype.recycleAsyncId=function(r,t,n){var o;if(void 0===n&&(n=0),null!=n?n>0:this.delay>0)return e.prototype.recycleAsyncId.call(this,r,t,n);var i=r.actions;null!=t&&(null===(o=i[i.length-1])||void 0===o?void 0:o.id)!==t&&(u.animationFrameProvider.cancelAnimationFrame(t),r._scheduled=void 0)},r}(i.AsyncAction);r.AnimationFrameAction=c},2934:function(e,r,t){var n,o=this&&this.__extends||(n=function(e,r){return n=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,r){e.__proto__=r}||function(e,r){for(var t in r)Object.prototype.hasOwnProperty.call(r,t)&&(e[t]=r[t])},n(e,r)},function(e,r){if("function"!=typeof r&&null!==r)throw new TypeError("Class extends value "+String(r)+" is not a constructor or null");function t(){this.constructor=e}n(e,r),e.prototype=null===r?Object.create(r):(t.prototype=r.prototype,new t)});Object.defineProperty(r,"__esModule",{value:!0}),r.AnimationFrameScheduler=void 0;var i=function(e){function r(){return null!==e&&e.apply(this,arguments)||this}return o(r,e),r.prototype.flush=function(e){this._active=!0;var r=this._scheduled;this._scheduled=void 0;var t,n=this.actions;e=e||n.shift();do{if(t=e.execute(e.state,e.delay))break}while((e=n[0])&&e.id===r&&n.shift());if(this._active=!1,t){for(;(e=n[0])&&e.id===r&&n.shift();)e.unsubscribe();throw t}},r}(t(3643).AsyncScheduler);r.AnimationFrameScheduler=i},2189:function(e,r,t){var n,o=this&&this.__extends||(n=function(e,r){return n=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,r){e.__proto__=r}||function(e,r){for(var t in r)Object.prototype.hasOwnProperty.call(r,t)&&(e[t]=r[t])},n(e,r)},function(e,r){if("function"!=typeof r&&null!==r)throw new TypeError("Class extends value "+String(r)+" is not a constructor or null");function t(){this.constructor=e}n(e,r),e.prototype=null===r?Object.create(r):(t.prototype=r.prototype,new t)});Object.defineProperty(r,"__esModule",{value:!0}),r.AsapAction=void 0;var i=t(9702),u=t(8908),c=function(e){function r(r,t){var n=e.call(this,r,t)||this;return n.scheduler=r,n.work=t,n}return o(r,e),r.prototype.requestAsyncId=function(r,t,n){return void 0===n&&(n=0),null!==n&&n>0?e.prototype.requestAsyncId.call(this,r,t,n):(r.actions.push(this),r._scheduled||(r._scheduled=u.immediateProvider.setImmediate(r.flush.bind(r,void 0))))},r.prototype.recycleAsyncId=function(r,t,n){var o;if(void 0===n&&(n=0),null!=n?n>0:this.delay>0)return e.prototype.recycleAsyncId.call(this,r,t,n);var i=r.actions;null!=t&&(null===(o=i[i.length-1])||void 0===o?void 0:o.id)!==t&&(u.immediateProvider.clearImmediate(t),r._scheduled===t&&(r._scheduled=void 0))},r}(i.AsyncAction);r.AsapAction=c},5523:function(e,r,t){var n,o=this&&this.__extends||(n=function(e,r){return n=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,r){e.__proto__=r}||function(e,r){for(var t in r)Object.prototype.hasOwnProperty.call(r,t)&&(e[t]=r[t])},n(e,r)},function(e,r){if("function"!=typeof r&&null!==r)throw new TypeError("Class extends value "+String(r)+" is not a constructor or null");function t(){this.constructor=e}n(e,r),e.prototype=null===r?Object.create(r):(t.prototype=r.prototype,new t)});Object.defineProperty(r,"__esModule",{value:!0}),r.AsapScheduler=void 0;var i=function(e){function r(){return null!==e&&e.apply(this,arguments)||this}return o(r,e),r.prototype.flush=function(e){this._active=!0;var r=this._scheduled;this._scheduled=void 0;var t,n=this.actions;e=e||n.shift();do{if(t=e.execute(e.state,e.delay))break}while((e=n[0])&&e.id===r&&n.shift());if(this._active=!1,t){for(;(e=n[0])&&e.id===r&&n.shift();)e.unsubscribe();throw t}},r}(t(3643).AsyncScheduler);r.AsapScheduler=i},9702:function(e,r,t){var n,o=this&&this.__extends||(n=function(e,r){return n=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,r){e.__proto__=r}||function(e,r){for(var t in r)Object.prototype.hasOwnProperty.call(r,t)&&(e[t]=r[t])},n(e,r)},function(e,r){if("function"!=typeof r&&null!==r)throw new TypeError("Class extends value "+String(r)+" is not a constructor or null");function t(){this.constructor=e}n(e,r),e.prototype=null===r?Object.create(r):(t.prototype=r.prototype,new t)});Object.defineProperty(r,"__esModule",{value:!0}),r.AsyncAction=void 0;var i=t(1986),u=t(8203),c=t(6967),a=function(e){function r(r,t){var n=e.call(this,r,t)||this;return n.scheduler=r,n.work=t,n.pending=!1,n}return o(r,e),r.prototype.schedule=function(e,r){var t;if(void 0===r&&(r=0),this.closed)return this;this.state=e;var n=this.id,o=this.scheduler;return null!=n&&(this.id=this.recycleAsyncId(o,n,r)),this.pending=!0,this.delay=r,this.id=null!==(t=this.id)&&void 0!==t?t:this.requestAsyncId(o,this.id,r),this},r.prototype.requestAsyncId=function(e,r,t){return void 0===t&&(t=0),u.intervalProvider.setInterval(e.flush.bind(e,this),t)},r.prototype.recycleAsyncId=function(e,r,t){if(void 0===t&&(t=0),null!=t&&this.delay===t&&!1===this.pending)return r;null!=r&&u.intervalProvider.clearInterval(r)},r.prototype.execute=function(e,r){if(this.closed)return new Error("executing a cancelled action");this.pending=!1;var t=this._execute(e,r);if(t)return t;!1===this.pending&&null!=this.id&&(this.id=this.recycleAsyncId(this.scheduler,this.id,null))},r.prototype._execute=function(e,r){var t,n=!1;try{this.work(e)}catch(e){n=!0,t=e||new Error("Scheduled action threw falsy error")}if(n)return this.unsubscribe(),t},r.prototype.unsubscribe=function(){if(!this.closed){var r=this.id,t=this.scheduler,n=t.actions;this.work=this.state=this.scheduler=null,this.pending=!1,c.arrRemove(n,this),null!=r&&(this.id=this.recycleAsyncId(t,r,null)),this.delay=null,e.prototype.unsubscribe.call(this)}},r}(i.Action);r.AsyncAction=a},3643:function(e,r,t){var n,o=this&&this.__extends||(n=function(e,r){return n=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,r){e.__proto__=r}||function(e,r){for(var t in r)Object.prototype.hasOwnProperty.call(r,t)&&(e[t]=r[t])},n(e,r)},function(e,r){if("function"!=typeof r&&null!==r)throw new TypeError("Class extends value "+String(r)+" is not a constructor or null");function t(){this.constructor=e}n(e,r),e.prototype=null===r?Object.create(r):(t.prototype=r.prototype,new t)});Object.defineProperty(r,"__esModule",{value:!0}),r.AsyncScheduler=void 0;var i=t(218),u=function(e){function r(r,t){void 0===t&&(t=i.Scheduler.now);var n=e.call(this,r,t)||this;return n.actions=[],n._active=!1,n}return o(r,e),r.prototype.flush=function(e){var r=this.actions;if(this._active)r.push(e);else{var t;this._active=!0;do{if(t=e.execute(e.state,e.delay))break}while(e=r.shift());if(this._active=!1,t){for(;e=r.shift();)e.unsubscribe();throw t}}},r}(i.Scheduler);r.AsyncScheduler=u},6201:function(e,r,t){var n,o=this&&this.__extends||(n=function(e,r){return n=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,r){e.__proto__=r}||function(e,r){for(var t in r)Object.prototype.hasOwnProperty.call(r,t)&&(e[t]=r[t])},n(e,r)},function(e,r){if("function"!=typeof r&&null!==r)throw new TypeError("Class extends value "+String(r)+" is not a constructor or null");function t(){this.constructor=e}n(e,r),e.prototype=null===r?Object.create(r):(t.prototype=r.prototype,new t)});Object.defineProperty(r,"__esModule",{value:!0}),r.QueueAction=void 0;var i=function(e){function r(r,t){var n=e.call(this,r,t)||this;return n.scheduler=r,n.work=t,n}return o(r,e),r.prototype.schedule=function(r,t){return void 0===t&&(t=0),t>0?e.prototype.schedule.call(this,r,t):(this.delay=t,this.state=r,this.scheduler.flush(this),this)},r.prototype.execute=function(r,t){return t>0||this.closed?e.prototype.execute.call(this,r,t):this._execute(r,t)},r.prototype.requestAsyncId=function(r,t,n){return void 0===n&&(n=0),null!=n&&n>0||null==n&&this.delay>0?e.prototype.requestAsyncId.call(this,r,t,n):(r.flush(this),0)},r}(t(9702).AsyncAction);r.QueueAction=i},5860:function(e,r,t){var n,o=this&&this.__extends||(n=function(e,r){return n=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,r){e.__proto__=r}||function(e,r){for(var t in r)Object.prototype.hasOwnProperty.call(r,t)&&(e[t]=r[t])},n(e,r)},function(e,r){if("function"!=typeof r&&null!==r)throw new TypeError("Class extends value "+String(r)+" is not a constructor or null");function t(){this.constructor=e}n(e,r),e.prototype=null===r?Object.create(r):(t.prototype=r.prototype,new t)});Object.defineProperty(r,"__esModule",{value:!0}),r.QueueScheduler=void 0;var i=function(e){function r(){return null!==e&&e.apply(this,arguments)||this}return o(r,e),r}(t(3643).AsyncScheduler);r.QueueScheduler=i},4123:function(e,r,t){var n,o=this&&this.__extends||(n=function(e,r){return n=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,r){e.__proto__=r}||function(e,r){for(var t in r)Object.prototype.hasOwnProperty.call(r,t)&&(e[t]=r[t])},n(e,r)},function(e,r){if("function"!=typeof r&&null!==r)throw new TypeError("Class extends value "+String(r)+" is not a constructor or null");function t(){this.constructor=e}n(e,r),e.prototype=null===r?Object.create(r):(t.prototype=r.prototype,new t)});Object.defineProperty(r,"__esModule",{value:!0}),r.VirtualAction=r.VirtualTimeScheduler=void 0;var i=t(9702),u=t(3865),c=function(e){function r(r,t){void 0===r&&(r=a),void 0===t&&(t=1/0);var n=e.call(this,r,(function(){return n.frame}))||this;return n.maxFrames=t,n.frame=0,n.index=-1,n}return o(r,e),r.prototype.flush=function(){for(var e,r,t=this.actions,n=this.maxFrames;(r=t[0])&&r.delay<=n&&(t.shift(),this.frame=r.delay,!(e=r.execute(r.state,r.delay))););if(e){for(;r=t.shift();)r.unsubscribe();throw e}},r.frameTimeFactor=10,r}(t(3643).AsyncScheduler);r.VirtualTimeScheduler=c;var a=function(e){function r(r,t,n){void 0===n&&(n=r.index+=1);var o=e.call(this,r,t)||this;return o.scheduler=r,o.work=t,o.index=n,o.active=!0,o.index=r.index=n,o}return o(r,e),r.prototype.schedule=function(t,n){if(void 0===n&&(n=0),Number.isFinite(n)){if(!this.id)return e.prototype.schedule.call(this,t,n);this.active=!1;var o=new r(this.scheduler,this.work);return this.add(o),o.schedule(t,n)}return u.Subscription.EMPTY},r.prototype.requestAsyncId=function(e,t,n){void 0===n&&(n=0),this.delay=e.frame+n;var o=e.actions;return o.push(this),o.sort(r.sortActions),1},r.prototype.recycleAsyncId=function(e,r,t){void 0===t&&(t=0)},r.prototype._execute=function(r,t){if(!0===this.active)return e.prototype._execute.call(this,r,t)},r.sortActions=function(e,r){return e.delay===r.delay?e.index===r.index?0:e.index>r.index?1:-1:e.delay>r.delay?1:-1},r}(i.AsyncAction);r.VirtualAction=a},3660:(e,r,t)=>{Object.defineProperty(r,"__esModule",{value:!0}),r.animationFrame=r.animationFrameScheduler=void 0;var n=t(7574),o=t(2934);r.animationFrameScheduler=new o.AnimationFrameScheduler(n.AnimationFrameAction),r.animationFrame=r.animationFrameScheduler},505:function(e,r,t){var n=this&&this.__read||function(e,r){var t="function"==typeof Symbol&&e[Symbol.iterator];if(!t)return e;var n,o,i=t.call(e),u=[];try{for(;(void 0===r||r-- >0)&&!(n=i.next()).done;)u.push(n.value)}catch(e){o={error:e}}finally{try{n&&!n.done&&(t=i.return)&&t.call(i)}finally{if(o)throw o.error}}return u},o=this&&this.__spreadArray||function(e,r){for(var t=0,n=r.length,o=e.length;t<n;t++,o++)e[o]=r[t];return e};Object.defineProperty(r,"__esModule",{value:!0}),r.animationFrameProvider=void 0;var i=t(3865);r.animationFrameProvider={schedule:function(e){var t=requestAnimationFrame,n=cancelAnimationFrame,o=r.animationFrameProvider.delegate;o&&(t=o.requestAnimationFrame,n=o.cancelAnimationFrame);var u=t((function(r){n=void 0,e(r)}));return new i.Subscription((function(){return null==n?void 0:n(u)}))},requestAnimationFrame:function(){for(var e=[],t=0;t<arguments.length;t++)e[t]=arguments[t];var i=r.animationFrameProvider.delegate;return((null==i?void 0:i.requestAnimationFrame)||requestAnimationFrame).apply(void 0,o([],n(e)))},cancelAnimationFrame:function(){for(var e=[],t=0;t<arguments.length;t++)e[t]=arguments[t];var i=r.animationFrameProvider.delegate;return((null==i?void 0:i.cancelAnimationFrame)||cancelAnimationFrame).apply(void 0,o([],n(e)))},delegate:void 0}},580:(e,r,t)=>{Object.defineProperty(r,"__esModule",{value:!0}),r.asap=r.asapScheduler=void 0;var n=t(2189),o=t(5523);r.asapScheduler=new o.AsapScheduler(n.AsapAction),r.asap=r.asapScheduler},2445:(e,r,t)=>{Object.defineProperty(r,"__esModule",{value:!0}),r.async=r.asyncScheduler=void 0;var n=t(9702),o=t(3643);r.asyncScheduler=new o.AsyncScheduler(n.AsyncAction),r.async=r.asyncScheduler},7950:(e,r)=>{Object.defineProperty(r,"__esModule",{value:!0}),r.dateTimestampProvider=void 0,r.dateTimestampProvider={now:function(){return(r.dateTimestampProvider.delegate||Date).now()},delegate:void 0}},8908:function(e,r,t){var n=this&&this.__read||function(e,r){var t="function"==typeof Symbol&&e[Symbol.iterator];if(!t)return e;var n,o,i=t.call(e),u=[];try{for(;(void 0===r||r-- >0)&&!(n=i.next()).done;)u.push(n.value)}catch(e){o={error:e}}finally{try{n&&!n.done&&(t=i.return)&&t.call(i)}finally{if(o)throw o.error}}return u},o=this&&this.__spreadArray||function(e,r){for(var t=0,n=r.length,o=e.length;t<n;t++,o++)e[o]=r[t];return e};Object.defineProperty(r,"__esModule",{value:!0}),r.immediateProvider=void 0;var i=t(7629),u=i.Immediate.setImmediate,c=i.Immediate.clearImmediate;r.immediateProvider={setImmediate:function(){for(var e=[],t=0;t<arguments.length;t++)e[t]=arguments[t];var i=r.immediateProvider.delegate;return((null==i?void 0:i.setImmediate)||u).apply(void 0,o([],n(e)))},clearImmediate:function(e){var t=r.immediateProvider.delegate;return((null==t?void 0:t.clearImmediate)||c)(e)},delegate:void 0}},8203:function(e,r){var t=this&&this.__read||function(e,r){var t="function"==typeof Symbol&&e[Symbol.iterator];if(!t)return e;var n,o,i=t.call(e),u=[];try{for(;(void 0===r||r-- >0)&&!(n=i.next()).done;)u.push(n.value)}catch(e){o={error:e}}finally{try{n&&!n.done&&(t=i.return)&&t.call(i)}finally{if(o)throw o.error}}return u},n=this&&this.__spreadArray||function(e,r){for(var t=0,n=r.length,o=e.length;t<n;t++,o++)e[o]=r[t];return e};Object.defineProperty(r,"__esModule",{value:!0}),r.intervalProvider=void 0,r.intervalProvider={setInterval:function(e,o){for(var i=[],u=2;u<arguments.length;u++)i[u-2]=arguments[u];var c=r.intervalProvider.delegate;return(null==c?void 0:c.setInterval)?c.setInterval.apply(c,n([e,o],t(i))):setInterval.apply(void 0,n([e,o],t(i)))},clearInterval:function(e){var t=r.intervalProvider.delegate;return((null==t?void 0:t.clearInterval)||clearInterval)(e)},delegate:void 0}},6813:(e,r)=>{Object.defineProperty(r,"__esModule",{value:!0}),r.performanceTimestampProvider=void 0,r.performanceTimestampProvider={now:function(){return(r.performanceTimestampProvider.delegate||performance).now()},delegate:void 0}},8615:(e,r,t)=>{Object.defineProperty(r,"__esModule",{value:!0}),r.queue=r.queueScheduler=void 0;var n=t(6201),o=t(5860);r.queueScheduler=new o.QueueScheduler(n.QueueAction),r.queue=r.queueScheduler},4590:function(e,r){var t=this&&this.__read||function(e,r){var t="function"==typeof Symbol&&e[Symbol.iterator];if(!t)return e;var n,o,i=t.call(e),u=[];try{for(;(void 0===r||r-- >0)&&!(n=i.next()).done;)u.push(n.value)}catch(e){o={error:e}}finally{try{n&&!n.done&&(t=i.return)&&t.call(i)}finally{if(o)throw o.error}}return u},n=this&&this.__spreadArray||function(e,r){for(var t=0,n=r.length,o=e.length;t<n;t++,o++)e[o]=r[t];return e};Object.defineProperty(r,"__esModule",{value:!0}),r.timeoutProvider=void 0,r.timeoutProvider={setTimeout:function(e,o){for(var i=[],u=2;u<arguments.length;u++)i[u-2]=arguments[u];var c=r.timeoutProvider.delegate;return(null==c?void 0:c.setTimeout)?c.setTimeout.apply(c,n([e,o],t(i))):setTimeout.apply(void 0,n([e,o],t(i)))},clearTimeout:function(e){var t=r.timeoutProvider.delegate;return((null==t?void 0:t.clearTimeout)||clearTimeout)(e)},delegate:void 0}},3725:(e,r)=>{function t(){return"function"==typeof Symbol&&Symbol.iterator?Symbol.iterator:"@@iterator"}Object.defineProperty(r,"__esModule",{value:!0}),r.iterator=r.getSymbolIterator=void 0,r.getSymbolIterator=t,r.iterator=t()},2801:(e,r)=>{Object.defineProperty(r,"__esModule",{value:!0}),r.observable=void 0,r.observable="function"==typeof Symbol&&Symbol.observable||"@@observable"},8433:(e,r)=>{Object.defineProperty(r,"__esModule",{value:!0})},2351:(e,r,t)=>{Object.defineProperty(r,"__esModule",{value:!0}),r.ArgumentOutOfRangeError=void 0;var n=t(7029);r.ArgumentOutOfRangeError=n.createErrorClass((function(e){return function(){e(this),this.name="ArgumentOutOfRangeError",this.message="argument out of range"}}))},9474:(e,r,t)=>{Object.defineProperty(r,"__esModule",{value:!0}),r.EmptyError=void 0;var n=t(7029);r.EmptyError=n.createErrorClass((function(e){return function(){e(this),this.name="EmptyError",this.message="no elements in sequence"}}))},7629:(e,r)=>{Object.defineProperty(r,"__esModule",{value:!0}),r.TestTools=r.Immediate=void 0;var t,n=1,o={};function i(e){return e in o&&(delete o[e],!0)}r.Immediate={setImmediate:function(e){var r=n++;return o[r]=!0,t||(t=Promise.resolve()),t.then((function(){return i(r)&&e()})),r},clearImmediate:function(e){i(e)}},r.TestTools={pending:function(){return Object.keys(o).length}}},8598:(e,r,t)=>{Object.defineProperty(r,"__esModule",{value:!0}),r.NotFoundError=void 0;var n=t(7029);r.NotFoundError=n.createErrorClass((function(e){return function(r){e(this),this.name="NotFoundError",this.message=r}}))},2642:(e,r,t)=>{Object.defineProperty(r,"__esModule",{value:!0}),r.ObjectUnsubscribedError=void 0;var n=t(7029);r.ObjectUnsubscribedError=n.createErrorClass((function(e){return function(){e(this),this.name="ObjectUnsubscribedError",this.message="object unsubscribed"}}))},6156:(e,r,t)=>{Object.defineProperty(r,"__esModule",{value:!0}),r.SequenceError=void 0;var n=t(7029);r.SequenceError=n.createErrorClass((function(e){return function(r){e(this),this.name="SequenceError",this.message=r}}))},4805:(e,r,t)=>{Object.defineProperty(r,"__esModule",{value:!0}),r.UnsubscriptionError=void 0;var n=t(7029);r.UnsubscriptionError=n.createErrorClass((function(e){return function(r){e(this),this.message=r?r.length+" errors occurred during unsubscription:\n"+r.map((function(e,r){return r+1+") "+e.toString()})).join("\n  "):"",this.name="UnsubscriptionError",this.errors=r}}))},2433:(e,r,t)=>{Object.defineProperty(r,"__esModule",{value:!0}),r.popNumber=r.popScheduler=r.popResultSelector=void 0;var n=t(3005),o=t(9016);function i(e){return e[e.length-1]}r.popResultSelector=function(e){return n.isFunction(i(e))?e.pop():void 0},r.popScheduler=function(e){return o.isScheduler(i(e))?e.pop():void 0},r.popNumber=function(e,r){return"number"==typeof i(e)?e.pop():r}},1203:(e,r)=>{Object.defineProperty(r,"__esModule",{value:!0}),r.argsArgArrayOrObject=void 0;var t=Array.isArray,n=Object.getPrototypeOf,o=Object.prototype,i=Object.keys;r.argsArgArrayOrObject=function(e){if(1===e.length){var r=e[0];if(t(r))return{args:r,keys:null};if((c=r)&&"object"==typeof c&&n(c)===o){var u=i(r);return{args:u.map((function(e){return r[e]})),keys:u}}}var c;return{args:e,keys:null}}},5498:(e,r)=>{Object.defineProperty(r,"__esModule",{value:!0}),r.argsOrArgArray=void 0;var t=Array.isArray;r.argsOrArgArray=function(e){return 1===e.length&&t(e[0])?e[0]:e}},6967:(e,r)=>{Object.defineProperty(r,"__esModule",{value:!0}),r.arrRemove=void 0,r.arrRemove=function(e,r){if(e){var t=e.indexOf(r);0<=t&&e.splice(t,1)}}},7029:(e,r)=>{Object.defineProperty(r,"__esModule",{value:!0}),r.createErrorClass=void 0,r.createErrorClass=function(e){var r=e((function(e){Error.call(e),e.stack=(new Error).stack}));return r.prototype=Object.create(Error.prototype),r.prototype.constructor=r,r}},641:(e,r)=>{Object.defineProperty(r,"__esModule",{value:!0}),r.createObject=void 0,r.createObject=function(e,r){return e.reduce((function(e,t,n){return e[t]=r[n],e}),{})}},6110:(e,r,t)=>{Object.defineProperty(r,"__esModule",{value:!0}),r.captureError=r.errorContext=void 0;var n=t(3280),o=null;r.errorContext=function(e){if(n.config.useDeprecatedSynchronousErrorHandling){var r=!o;if(r&&(o={errorThrown:!1,error:null}),e(),r){var t=o,i=t.errorThrown,u=t.error;if(o=null,i)throw u}}else e()},r.captureError=function(e){n.config.useDeprecatedSynchronousErrorHandling&&o&&(o.errorThrown=!0,o.error=e)}},7738:(e,r)=>{Object.defineProperty(r,"__esModule",{value:!0}),r.executeSchedule=void 0,r.executeSchedule=function(e,r,t,n,o){void 0===n&&(n=0),void 0===o&&(o=!1);var i=r.schedule((function(){t(),o?e.add(this.schedule(null,n)):this.unsubscribe()}),n);if(e.add(i),!o)return i}},4781:(e,r)=>{Object.defineProperty(r,"__esModule",{value:!0}),r.identity=void 0,r.identity=function(e){return e}},3909:(e,r)=>{Object.defineProperty(r,"__esModule",{value:!0}),r.isArrayLike=void 0,r.isArrayLike=function(e){return e&&"number"==typeof e.length&&"function"!=typeof e}},9595:(e,r,t)=>{Object.defineProperty(r,"__esModule",{value:!0}),r.isAsyncIterable=void 0;var n=t(3005);r.isAsyncIterable=function(e){return Symbol.asyncIterator&&n.isFunction(null==e?void 0:e[Symbol.asyncIterator])}},1677:(e,r)=>{Object.defineProperty(r,"__esModule",{value:!0}),r.isValidDate=void 0,r.isValidDate=function(e){return e instanceof Date&&!isNaN(e)}},3005:(e,r)=>{Object.defineProperty(r,"__esModule",{value:!0}),r.isFunction=void 0,r.isFunction=function(e){return"function"==typeof e}},9500:(e,r,t)=>{Object.defineProperty(r,"__esModule",{value:!0}),r.isInteropObservable=void 0;var n=t(2801),o=t(3005);r.isInteropObservable=function(e){return o.isFunction(e[n.observable])}},2743:(e,r,t)=>{Object.defineProperty(r,"__esModule",{value:!0}),r.isIterable=void 0;var n=t(3725),o=t(3005);r.isIterable=function(e){return o.isFunction(null==e?void 0:e[n.iterator])}},8386:(e,r,t)=>{Object.defineProperty(r,"__esModule",{value:!0}),r.isObservable=void 0;var n=t(2419),o=t(3005);r.isObservable=function(e){return!!e&&(e instanceof n.Observable||o.isFunction(e.lift)&&o.isFunction(e.subscribe))}},6018:(e,r,t)=>{Object.defineProperty(r,"__esModule",{value:!0}),r.isPromise=void 0;var n=t(3005);r.isPromise=function(e){return n.isFunction(null==e?void 0:e.then)}},7823:function(e,r,t){var n=this&&this.__generator||function(e,r){var t,n,o,i,u={label:0,sent:function(){if(1&o[0])throw o[1];return o[1]},trys:[],ops:[]};return i={next:c(0),throw:c(1),return:c(2)},"function"==typeof Symbol&&(i[Symbol.iterator]=function(){return this}),i;function c(i){return function(c){return function(i){if(t)throw new TypeError("Generator is already executing.");for(;u;)try{if(t=1,n&&(o=2&i[0]?n.return:i[0]?n.throw||((o=n.return)&&o.call(n),0):n.next)&&!(o=o.call(n,i[1])).done)return o;switch(n=0,o&&(i=[2&i[0],o.value]),i[0]){case 0:case 1:o=i;break;case 4:return u.label++,{value:i[1],done:!1};case 5:u.label++,n=i[1],i=[0];continue;case 7:i=u.ops.pop(),u.trys.pop();continue;default:if(!((o=(o=u.trys).length>0&&o[o.length-1])||6!==i[0]&&2!==i[0])){u=0;continue}if(3===i[0]&&(!o||i[1]>o[0]&&i[1]<o[3])){u.label=i[1];break}if(6===i[0]&&u.label<o[1]){u.label=o[1],o=i;break}if(o&&u.label<o[2]){u.label=o[2],u.ops.push(i);break}o[2]&&u.ops.pop(),u.trys.pop();continue}i=r.call(e,u)}catch(e){i=[6,e],n=0}finally{t=o=0}if(5&i[0])throw i[1];return{value:i[0]?i[1]:void 0,done:!0}}([i,c])}}},o=this&&this.__await||function(e){return this instanceof o?(this.v=e,this):new o(e)},i=this&&this.__asyncGenerator||function(e,r,t){if(!Symbol.asyncIterator)throw new TypeError("Symbol.asyncIterator is not defined.");var n,i=t.apply(e,r||[]),u=[];return n={},c("next"),c("throw"),c("return"),n[Symbol.asyncIterator]=function(){return this},n;function c(e){i[e]&&(n[e]=function(r){return new Promise((function(t,n){u.push([e,r,t,n])>1||a(e,r)}))})}function a(e,r){try{(t=i[e](r)).value instanceof o?Promise.resolve(t.value.v).then(l,s):f(u[0][2],t)}catch(e){f(u[0][3],e)}var t}function l(e){a("next",e)}function s(e){a("throw",e)}function f(e,r){e(r),u.shift(),u.length&&a(u[0][0],u[0][1])}};Object.defineProperty(r,"__esModule",{value:!0}),r.isReadableStreamLike=r.readableStreamLikeToAsyncGenerator=void 0;var u=t(3005);r.readableStreamLikeToAsyncGenerator=function(e){return i(this,arguments,(function(){var r,t,i;return n(this,(function(n){switch(n.label){case 0:r=e.getReader(),n.label=1;case 1:n.trys.push([1,,9,10]),n.label=2;case 2:return[4,o(r.read())];case 3:return t=n.sent(),i=t.value,t.done?[4,o(void 0)]:[3,5];case 4:return[2,n.sent()];case 5:return[4,o(i)];case 6:return[4,n.sent()];case 7:return n.sent(),[3,2];case 8:return[3,10];case 9:return r.releaseLock(),[7];case 10:return[2]}}))}))},r.isReadableStreamLike=function(e){return u.isFunction(null==e?void 0:e.getReader)}},9016:(e,r,t)=>{Object.defineProperty(r,"__esModule",{value:!0}),r.isScheduler=void 0;var n=t(3005);r.isScheduler=function(e){return e&&n.isFunction(e.schedule)}},4935:(e,r,t)=>{Object.defineProperty(r,"__esModule",{value:!0}),r.operate=r.hasLift=void 0;var n=t(3005);function o(e){return n.isFunction(null==e?void 0:e.lift)}r.hasLift=o,r.operate=function(e){return function(r){if(o(r))return r.lift((function(r){try{return e(r,this)}catch(e){this.error(e)}}));throw new TypeError("Unable to lift unknown Observable type")}}},1914:function(e,r,t){var n=this&&this.__read||function(e,r){var t="function"==typeof Symbol&&e[Symbol.iterator];if(!t)return e;var n,o,i=t.call(e),u=[];try{for(;(void 0===r||r-- >0)&&!(n=i.next()).done;)u.push(n.value)}catch(e){o={error:e}}finally{try{n&&!n.done&&(t=i.return)&&t.call(i)}finally{if(o)throw o.error}}return u},o=this&&this.__spreadArray||function(e,r){for(var t=0,n=r.length,o=e.length;t<n;t++,o++)e[o]=r[t];return e};Object.defineProperty(r,"__esModule",{value:!0}),r.mapOneOrManyArgs=void 0;var i=t(7291),u=Array.isArray;r.mapOneOrManyArgs=function(e){return i.map((function(r){return function(e,r){return u(r)?e.apply(void 0,o([],n(r))):e(r)}(e,r)}))}},2576:(e,r)=>{Object.defineProperty(r,"__esModule",{value:!0}),r.noop=void 0,r.noop=function(){}},8634:(e,r)=>{Object.defineProperty(r,"__esModule",{value:!0}),r.not=void 0,r.not=function(e,r){return function(t,n){return!e.call(r,t,n)}}},9985:(e,r,t)=>{Object.defineProperty(r,"__esModule",{value:!0}),r.pipeFromArray=r.pipe=void 0;var n=t(4781);function o(e){return 0===e.length?n.identity:1===e.length?e[0]:function(r){return e.reduce((function(e,r){return r(e)}),r)}}r.pipe=function(){for(var e=[],r=0;r<arguments.length;r++)e[r]=arguments[r];return o(e)},r.pipeFromArray=o},7968:(e,r,t)=>{Object.defineProperty(r,"__esModule",{value:!0}),r.reportUnhandledError=void 0;var n=t(3280),o=t(4590);r.reportUnhandledError=function(e){o.timeoutProvider.setTimeout((function(){var r=n.config.onUnhandledError;if(!r)throw e;r(e)}))}},9906:(e,r)=>{Object.defineProperty(r,"__esModule",{value:!0}),r.createInvalidObservableTypeError=void 0,r.createInvalidObservableTypeError=function(e){return new TypeError("You provided "+(null!==e&&"object"==typeof e?"an invalid object":"'"+e+"'")+" where a stream was expected. You can provide an Observable, Promise, ReadableStream, Array, AsyncIterable, or Iterable.")}},8913:(e,r)=>{Object.defineProperty(r,"__esModule",{value:!0}),r.API_URL=void 0,r.API_URL="http://localhost:3000"},7769:(e,r,t)=>{Object.defineProperty(r,"__esModule",{value:!0}),r.Game=void 0;var n=t(2872),o=function(){function e(e){if(!e.getContext)throw new Error("Canvas is not supported in this browser");this.canvas=e,this.context=e.getContext("2d"),this.context.imageSmoothingEnabled=!1}return e.prototype.init=function(){var e=this;(0,n.fromEvent)(window,"resize").pipe((0,n.debounceTime)(100)).subscribe((function(){e.resize(window.innerWidth,window.innerHeight)}))},e.prototype.resize=function(e,r){this.canvas.width=e,this.canvas.height=r,this.context.imageSmoothingEnabled=!1},e}();r.Game=o},7419:(e,r,t)=>{Object.defineProperty(r,"__esModule",{value:!0}),r.fetchSprite$=r.fetchLeaderBoard$=r.fetchUserProfile$=r.fetchFromApi$=void 0;var n=t(2872),o=t(8913),i=function(e,r){return(0,n.from)(fetch("".concat(o.API_URL,"/").concat(e)).then((function(e){if(e.ok)return e.json();throw new Error("Failed to fetch")})).catch((function(e){return console.error(e)})))};r.fetchFromApi$=i,r.fetchUserProfile$=function(e){return i("users?username=".concat(e))},r.fetchLeaderBoard$=function(){return i("users?_sort=highscore&_order=desc&_limit=10")},r.fetchSprite$=function(){return i("sprites")}}},o={};function i(e){var r=o[e];if(void 0!==r)return r.exports;var t=o[e]={exports:{}};return n[e].call(t.exports,t,t.exports,i),t.exports}e=i(2872),r=i(7769),t=i(7419),(0,e.fromEvent)(window,"load").subscribe((function(){var e=document.createElement("canvas");e.id="game-container",e.width=window.innerWidth,e.height=window.innerHeight,document.body.appendChild(e),new r.Game(e).init()})),(0,t.fetchSprite$)().pipe().subscribe((function(e){return console.log(e)}))})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,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QUFLZ2UsWUFBWS9CLEdBRWYsSUFBSSxFQUFBVSxLQUFLVixHQUNmM1csTUFHVCxLQUVBLElBQUFpWSxnQkFBZTlpQyxPQUNid1gsV0FBVSxTQUFBdUIsR0FBRyxPQUFBMnBCLFFBQVFjLElBQUl6cUIsRUFBWixHIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vdGV0cmlzLy4vc3JjL2luZGV4LnRzIiwid2VicGFjazovL3RldHJpcy8uL25vZGVfbW9kdWxlcy9yeGpzL2Rpc3QvY2pzL2luZGV4LmpzIiwid2VicGFjazovL3RldHJpcy8uL25vZGVfbW9kdWxlcy9yeGpzL2Rpc3QvY2pzL2ludGVybmFsL0FzeW5jU3ViamVjdC5qcyIsIndlYnBhY2s6Ly90ZXRyaXMvLi9ub2RlX21vZHVsZXMvcnhqcy9kaXN0L2Nqcy9pbnRlcm5hbC9CZWhhdmlvclN1YmplY3QuanMiLCJ3ZWJwYWNrOi8vdGV0cmlzLy4vbm9kZV9tb2R1bGVzL3J4anMvZGlzdC9janMvaW50ZXJuYWwvTm90aWZpY2F0aW9uLmpzIiwid2VicGFjazovL3RldHJpcy8uL25vZGVfbW9kdWxlcy9yeGpzL2Rpc3QvY2pzL2ludGVybmFsL05vdGlmaWNhdGlvbkZhY3Rvcmllcy5qcyIsIndlYnBhY2s6Ly90ZXRyaXMvLi9ub2RlX21vZHVsZXMvcnhqcy9kaXN0L2Nqcy9pbnRlcm5hbC9PYnNlcnZhYmxlLmpzIiwid2VicGFjazovL3RldHJpcy8uL25vZGVfbW9kdWxlcy9yeGpzL2Rpc3QvY2pzL2ludGVybmFsL1JlcGxheVN1YmplY3QuanMiLCJ3ZWJwYWNrOi8vdGV0cmlzLy4vbm9kZV9tb2R1bGVzL3J4anMvZGlzdC9janMvaW50ZXJuYWwvU2NoZWR1bGVyLmpzIiwid2VicGFjazovL3RldHJpcy8uL25vZGVfbW9kdWxlcy9yeGpzL2Rpc3QvY2pzL2ludGVybmFsL1N1YmplY3QuanMiLCJ3ZWJwYWNrOi8vdGV0cmlzLy4vbm9kZV9tb2R1bGVzL3J4anMvZGlzdC9janMvaW50ZXJuYWwvU3Vic2NyaWJlci5qcyIsIndlYnBhY2s6Ly90ZXRyaXMvLi9ub2RlX21vZHVsZXMvcnhqcy9kaXN0L2Nqcy9pbnRlcm5hbC9TdWJzY3JpcHRpb24uanMiLCJ3ZWJwYWNrOi8vdGV0cmlzLy4vbm9kZV9tb2R1bGVzL3J4anMvZGlzdC9janMvaW50ZXJuYWwvY29uZmlnLmpzIiwid2VicGFjazovL3RldHJpcy8uL25vZGVfbW9kdWxlcy9yeGpzL2Rpc3QvY2pzL2ludGVybmFsL2ZpcnN0VmFsdWVGcm9tLmpzIiwid2VicGFjazovL3RldHJpcy8uL25vZGVfbW9kdWxlcy9yeGpzL2Rpc3QvY2pzL2ludGVybmFsL2xhc3RWYWx1ZUZyb20uanMiLCJ3ZWJwYWNrOi8vdGV0cmlzLy4vbm9kZV9tb2R1bGVzL3J4anMvZGlzdC9janMvaW50ZXJuYWwvb2JzZXJ2YWJsZS9Db25uZWN0YWJsZU9ic2VydmFibGUuanMiLCJ3ZWJwYWNrOi8vdGV0cmlzLy4vbm9kZV9tb2R1bGVzL3J4anMvZGlzdC9janMvaW50ZXJuYWwvb2JzZXJ2YWJsZS9iaW5kQ2FsbGJhY2suanMiLCJ3ZWJwYWNrOi8vdGV0cmlzLy4vbm9kZV9tb2R1bGVzL3J4anMvZGlzdC9janMvaW50ZXJuYWwvb2JzZXJ2YWJsZS9iaW5kQ2FsbGJhY2tJbnRlcm5hbHMuanMiLCJ3ZWJwYWNrOi8vdGV0cmlzLy4vbm9kZV9tb2R1bGVzL3J4anMvZGlzdC9janMvaW50ZXJuYWwvb2JzZXJ2YWJsZS9iaW5kTm9kZUNhbGxiYWNrLmpzIiwid2VicGFjazovL3RldHJpcy8uL25vZGVfbW9kdWxlcy9yeGpzL2Rpc3QvY2pzL2ludGVybmFsL29ic2VydmFibGUvY29tYmluZUxhdGVzdC5qcyIsIndlYnBhY2s6Ly90ZXRyaXMvLi9ub2RlX21vZHVsZXMvcnhqcy9kaXN0L2Nqcy9pbnRlcm5hbC9vYnNlcnZhYmxlL2NvbmNhdC5qcyIsIndlYnBhY2s6Ly90ZXRyaXMvLi9ub2RlX21vZHVsZXMvcnhqcy9kaXN0L2Nqcy9pbnRlcm5hbC9vYnNlcnZhYmxlL2Nvbm5lY3RhYmxlLmpzIiwid2VicGFjazovL3RldHJpcy8uL25vZGVfbW9kdWxlcy9yeGpzL2Rpc3QvY2pzL2ludGVybmFsL29ic2VydmFibGUvZGVmZXIuanMiLCJ3ZWJwYWNrOi8vdGV0cmlzLy4vbm9kZV9tb2R1bGVzL3J4anMvZGlzdC9janMvaW50ZXJuYWwvb2JzZXJ2YWJsZS9kb20vYW5pbWF0aW9uRnJhbWVzLmpzIiwid2VicGFjazovL3RldHJpcy8uL25vZGVfbW9kdWxlcy9yeGpzL2Rpc3QvY2pzL2ludGVybmFsL29ic2VydmFibGUvZW1wdHkuanMiLCJ3ZWJwYWNrOi8vdGV0cmlzLy4vbm9kZV9tb2R1bGVzL3J4anMvZGlzdC9janMvaW50ZXJuYWwvb2JzZXJ2YWJsZS9mb3JrSm9pbi5qcyIsIndlYnBhY2s6Ly90ZXRyaXMvLi9ub2RlX21vZHVsZXMvcnhqcy9kaXN0L2Nqcy9pbnRlcm5hbC9vYnNlcnZhYmxlL2Zyb20uanMiLCJ3ZWJwYWNrOi8vdGV0cmlzLy4vbm9kZV9tb2R1bGVzL3J4anMvZGlzdC9janMvaW50ZXJuYWwvb2JzZXJ2YWJsZS9mcm9tRXZlbnQuanMiLCJ3ZWJwYWNrOi8vdGV0cmlzLy4vbm9kZV9tb2R1bGVzL3J4anMvZGlzdC9janMvaW50ZXJuYWwvb2JzZXJ2YWJsZS9mcm9tRXZlbnRQYXR0ZXJuLmpzIiwid2VicGFjazovL3RldHJpcy8uL25vZGVfbW9kdWxlcy9yeGpzL2Rpc3QvY2pzL2ludGVybmFsL29ic2VydmFibGUvZnJvbVN1YnNjcmliYWJsZS5qcyIsIndlYnBhY2s6Ly90ZXRyaXMvLi9ub2RlX21vZHVsZXMvcnhqcy9kaXN0L2Nqcy9pbnRlcm5hbC9vYnNlcnZhYmxlL2dlbmVyYXRlLmpzIiwid2VicGFjazovL3RldHJpcy8uL25vZGVfbW9kdWxlcy9yeGpzL2Rpc3QvY2pzL2ludGVybmFsL29ic2VydmFibGUvaWlmLmpzIiwid2VicGFjazovL3RldHJpcy8uL25vZGVfbW9kdWxlcy9yeGpzL2Rpc3QvY2pzL2ludGVybmFsL29ic2VydmFibGUvaW5uZXJGcm9tLmpzIiwid2VicGFjazovL3RldHJpcy8uL25vZGVfbW9kdWxlcy9yeGpzL2Rpc3QvY2pzL2ludGVybmFsL29ic2VydmFibGUvaW50ZXJ2YWwuanMiLCJ3ZWJwYWNrOi8vdGV0cmlzLy4vbm9kZV9tb2R1bGVzL3J4anMvZGlzdC9janMvaW50ZXJuYWwvb2JzZXJ2YWJsZS9tZXJnZS5qcyIsIndlYnBhY2s6Ly90ZXRyaXMvLi9ub2RlX21vZHVsZXMvcnhqcy9kaXN0L2Nqcy9pbnRlcm5hbC9vYnNlcnZhYmxlL25ldmVyLmpzIiwid2VicGFjazovL3RldHJpcy8uL25vZGVfbW9kdWxlcy9yeGpzL2Rpc3QvY2pzL2ludGVybmFsL29ic2VydmFibGUvb2YuanMiLCJ3ZWJwYWNrOi8vdGV0cmlzLy4vbm9kZV9tb2R1bGVzL3J4anMvZGlzdC9janMvaW50ZXJuYWwvb2JzZXJ2YWJsZS9vbkVycm9yUmVzdW1lTmV4dC5qcyIsIndlYnBhY2s6Ly90ZXRyaXMvLi9ub2RlX21vZHVsZXMvcnhqcy9kaXN0L2Nqcy9pbnRlcm5hbC9vYnNlcnZhYmxlL3BhaXJzLmpzIiwid2VicGFjazovL3RldHJpcy8uL25vZGVfbW9kdWxlcy9yeGpzL2Rpc3QvY2pzL2ludGVybmFsL29ic2VydmFibGUvcGFydGl0aW9uLmpzIiwid2VicGFjazovL3RldHJpcy8uL25vZGVfbW9kdWxlcy9yeGpzL2Rpc3QvY2pzL2ludGVybmFsL29ic2VydmFibGUvcmFjZS5qcyIsIndlYnBhY2s6Ly90ZXRyaXMvLi9ub2RlX21vZHVsZXMvcnhqcy9kaXN0L2Nqcy9pbnRlcm5hbC9vYnNlcnZhYmxlL3JhbmdlLmpzIiwid2VicGFjazovL3RldHJpcy8uL25vZGVfbW9kdWxlcy9yeGpzL2Rpc3QvY2pzL2ludGVybmFsL29ic2VydmFibGUvdGhyb3dFcnJvci5qcyIsIndlYnBhY2s6Ly90ZXRyaXMvLi9ub2RlX21vZHVsZXMvcnhqcy9kaXN0L2Nqcy9pbnRlcm5hbC9vYnNlcnZhYmxlL3RpbWVyLmpzIiwid2VicGFjazovL3RldHJpcy8uL25vZGVfbW9kdWxlcy9yeGpzL2Rpc3QvY2pzL2ludGVybmFsL29ic2VydmFibGUvdXNpbmcuanMiLCJ3ZWJwYWNrOi8vdGV0cmlzLy4vbm9kZV9tb2R1bGVzL3J4anMvZGlzdC9janMvaW50ZXJuYWwvb2JzZXJ2YWJsZS96aXAuanMiLCJ3ZWJwYWNrOi8vdGV0cmlzLy4vbm9kZV9tb2R1bGVzL3J4anMvZGlzdC9janMvaW50ZXJuYWwvb3BlcmF0b3JzL09wZXJhdG9yU3Vic2NyaWJlci5qcyIsIndlYnBhY2s6Ly90ZXRyaXMvLi9ub2RlX21vZHVsZXMvcnhqcy9kaXN0L2Nqcy9pbnRlcm5hbC9vcGVyYXRvcnMvYXVkaXQuanMiLCJ3ZWJwYWNrOi8vdGV0cmlzLy4vbm9kZV9tb2R1bGVzL3J4anMvZGlzdC9janMvaW50ZXJuYWwvb3BlcmF0b3JzL2F1ZGl0VGltZS5qcyIsIndlYnBhY2s6Ly90ZXRyaXMvLi9ub2RlX21vZHVsZXMvcnhqcy9kaXN0L2Nqcy9pbnRlcm5hbC9vcGVyYXRvcnMvYnVmZmVyLmpzIiwid2VicGFjazovL3RldHJpcy8uL25vZGVfbW9kdWxlcy9yeGpzL2Rpc3QvY2pzL2ludGVybmFsL29wZXJhdG9ycy9idWZmZXJDb3VudC5qcyIsIndlYnBhY2s6Ly90ZXRyaXMvLi9ub2RlX21vZHVsZXMvcnhqcy9kaXN0L2Nqcy9pbnRlcm5hbC9vcGVyYXRvcnMvYnVmZmVyVGltZS5qcyIsIndlYnBhY2s6Ly90ZXRyaXMvLi9ub2RlX21vZHVsZXMvcnhqcy9kaXN0L2Nqcy9pbnRlcm5hbC9vcGVyYXRvcnMvYnVmZmVyVG9nZ2xlLmpzIiwid2VicGFjazovL3RldHJpcy8uL25vZGVfbW9kdWxlcy9yeGpzL2Rpc3QvY2pzL2ludGVybmFsL29wZXJhdG9ycy9idWZmZXJXaGVuLmpzIiwid2VicGFjazovL3RldHJpcy8uL25vZGVfbW9kdWxlcy9yeGpzL2Rpc3QvY2pzL2ludGVybmFsL29wZXJhdG9ycy9jYXRjaEVycm9yLmpzIiwid2VicGFjazovL3RldHJpcy8uL25vZGVfbW9kdWxlcy9yeGpzL2Rpc3QvY2pzL2ludGVybmFsL29wZXJhdG9ycy9jb21iaW5lQWxsLmpzIiwid2VicGFjazovL3RldHJpcy8uL25vZGVfbW9kdWxlcy9yeGpzL2Rpc3QvY2pzL2ludGVybmFsL29wZXJhdG9ycy9jb21iaW5lTGF0ZXN0LmpzIiwid2VicGFjazovL3RldHJpcy8uL25vZGVfbW9kdWxlcy9yeGpzL2Rpc3QvY2pzL2ludGVybmFsL29wZXJhdG9ycy9jb21iaW5lTGF0ZXN0QWxsLmpzIiwid2VicGFjazovL3RldHJpcy8uL25vZGVfbW9kdWxlcy9yeGpzL2Rpc3QvY2pzL2ludGVybmFsL29wZXJhdG9ycy9jb21iaW5lTGF0ZXN0V2l0aC5qcyIsIndlYnBhY2s6Ly90ZXRyaXMvLi9ub2RlX21vZHVsZXMvcnhqcy9kaXN0L2Nqcy9pbnRlcm5hbC9vcGVyYXRvcnMvY29uY2F0LmpzIiwid2VicGFjazovL3RldHJpcy8uL25vZGVfbW9kdWxlcy9yeGpzL2Rpc3QvY2pzL2ludGVybmFsL29wZXJhdG9ycy9jb25jYXRBbGwuanMiLCJ3ZWJwYWNrOi8vdGV0cmlzLy4vbm9kZV9tb2R1bGVzL3J4anMvZGlzdC9janMvaW50ZXJuYWwvb3BlcmF0b3JzL2NvbmNhdE1hcC5qcyIsIndlYnBhY2s6Ly90ZXRyaXMvLi9ub2RlX21vZHVsZXMvcnhqcy9kaXN0L2Nqcy9pbnRlcm5hbC9vcGVyYXRvcnMvY29uY2F0TWFwVG8uanMiLCJ3ZWJwYWNrOi8vdGV0cmlzLy4vbm9kZV9tb2R1bGVzL3J4anMvZGlzdC9janMvaW50ZXJuYWwvb3BlcmF0b3JzL2NvbmNhdFdpdGguanMiLCJ3ZWJwYWNrOi8vdGV0cmlzLy4vbm9kZV9tb2R1bGVzL3J4anMvZGlzdC9janMvaW50ZXJuYWwvb3BlcmF0b3JzL2Nvbm5lY3QuanMiLCJ3ZWJwYWNrOi8vdGV0cmlzLy4vbm9kZV9tb2R1bGVzL3J4anMvZGlzdC9janMvaW50ZXJuYWwvb3BlcmF0b3JzL2NvdW50LmpzIiwid2VicGFjazovL3RldHJpcy8uL25vZGVfbW9kdWxlcy9yeGpzL2Rpc3QvY2pzL2ludGVybmFsL29wZXJhdG9ycy9kZWJvdW5jZS5qcyIsIndlYnBhY2s6Ly90ZXRyaXMvLi9ub2RlX21vZHVsZXMvcnhqcy9kaXN0L2Nqcy9pbnRlcm5hbC9vcGVyYXRvcnMvZGVib3VuY2VUaW1lLmpzIiwid2VicGFjazovL3RldHJpcy8uL25vZGVfbW9kdWxlcy9yeGpzL2Rpc3QvY2pzL2ludGVybmFsL29wZXJhdG9ycy9kZWZhdWx0SWZFbXB0eS5qcyIsIndlYnBhY2s6Ly90ZXRyaXMvLi9ub2RlX21vZHVsZXMvcnhqcy9kaXN0L2Nqcy9pbnRlcm5hbC9vcGVyYXRvcnMvZGVsYXkuanMiLCJ3ZWJwYWNrOi8vdGV0cmlzLy4vbm9kZV9tb2R1bGVzL3J4anMvZGlzdC9janMvaW50ZXJuYWwvb3BlcmF0b3JzL2RlbGF5V2hlbi5qcyIsIndlYnBhY2s6Ly90ZXRyaXMvLi9ub2RlX21vZHVsZXMvcnhqcy9kaXN0L2Nqcy9pbnRlcm5hbC9vcGVyYXRvcnMvZGVtYXRlcmlhbGl6ZS5qcyIsIndlYnBhY2s6Ly90ZXRyaXMvLi9ub2RlX21vZHVsZXMvcnhqcy9kaXN0L2Nqcy9pbnRlcm5hbC9vcGVyYXRvcnMvZGlzdGluY3QuanMiLCJ3ZWJwYWNrOi8vdGV0cmlzLy4vbm9kZV9tb2R1bGVzL3J4anMvZGlzdC9janMvaW50ZXJuYWwvb3BlcmF0b3JzL2Rpc3RpbmN0VW50aWxDaGFuZ2VkLmpzIiwid2VicGFjazovL3RldHJpcy8uL25vZGVfbW9kdWxlcy9yeGpzL2Rpc3QvY2pzL2ludGVybmFsL29wZXJhdG9ycy9kaXN0aW5jdFVudGlsS2V5Q2hhbmdlZC5qcyIsIndlYnBhY2s6Ly90ZXRyaXMvLi9ub2RlX21vZHVsZXMvcnhqcy9kaXN0L2Nqcy9pbnRlcm5hbC9vcGVyYXRvcnMvZWxlbWVudEF0LmpzIiwid2VicGFjazovL3RldHJpcy8uL25vZGVfbW9kdWxlcy9yeGpzL2Rpc3QvY2pzL2ludGVybmFsL29wZXJhdG9ycy9lbmRXaXRoLmpzIiwid2VicGFjazovL3RldHJpcy8uL25vZGVfbW9kdWxlcy9yeGpzL2Rpc3QvY2pzL2ludGVybmFsL29wZXJhdG9ycy9ldmVyeS5qcyIsIndlYnBhY2s6Ly90ZXRyaXMvLi9ub2RlX21vZHVsZXMvcnhqcy9kaXN0L2Nqcy9pbnRlcm5hbC9vcGVyYXRvcnMvZXhoYXVzdC5qcyIsIndlYnBhY2s6Ly90ZXRyaXMvLi9ub2RlX21vZHVsZXMvcnhqcy9kaXN0L2Nqcy9pbnRlcm5hbC9vcGVyYXRvcnMvZXhoYXVzdEFsbC5qcyIsIndlYnBhY2s6Ly90ZXRyaXMvLi9ub2RlX21vZHVsZXMvcnhqcy9kaXN0L2Nqcy9pbnRlcm5hbC9vcGVyYXRvcnMvZXhoYXVzdE1hcC5qcyIsIndlYnBhY2s6Ly90ZXRyaXMvLi9ub2RlX21vZHVsZXMvcnhqcy9kaXN0L2Nqcy9pbnRlcm5hbC9vcGVyYXRvcnMvZXhwYW5kLmpzIiwid2VicGFjazovL3RldHJpcy8uL25vZGVfbW9kdWxlcy9yeGpzL2Rpc3QvY2pzL2ludGVybmFsL29wZXJhdG9ycy9maWx0ZXIuanMiLCJ3ZWJwYWNrOi8vdGV0cmlzLy4vbm9kZV9tb2R1bGVzL3J4anMvZGlzdC9janMvaW50ZXJuYWwvb3BlcmF0b3JzL2ZpbmFsaXplLmpzIiwid2VicGFjazovL3RldHJpcy8uL25vZGVfbW9kdWxlcy9yeGpzL2Rpc3QvY2pzL2ludGVybmFsL29wZXJhdG9ycy9maW5kLmpzIiwid2VicGFjazovL3RldHJpcy8uL25vZGVfbW9kdWxlcy9yeGpzL2Rpc3QvY2pzL2ludGVybmFsL29wZXJhdG9ycy9maW5kSW5kZXguanMiLCJ3ZWJwYWNrOi8vdGV0cmlzLy4vbm9kZV9tb2R1bGVzL3J4anMvZGlzdC9janMvaW50ZXJuYWwvb3BlcmF0b3JzL2ZpcnN0LmpzIiwid2VicGFjazovL3RldHJpcy8uL25vZGVfbW9kdWxlcy9yeGpzL2Rpc3QvY2pzL2ludGVybmFsL29wZXJhdG9ycy9mbGF0TWFwLmpzIiwid2VicGFjazovL3RldHJpcy8uL25vZGVfbW9kdWxlcy9yeGpzL2Rpc3QvY2pzL2ludGVybmFsL29wZXJhdG9ycy9ncm91cEJ5LmpzIiwid2VicGFjazovL3RldHJpcy8uL25vZGVfbW9kdWxlcy9yeGpzL2Rpc3QvY2pzL2ludGVybmFsL29wZXJhdG9ycy9pZ25vcmVFbGVtZW50cy5qcyIsIndlYnBhY2s6Ly90ZXRyaXMvLi9ub2RlX21vZHVsZXMvcnhqcy9kaXN0L2Nqcy9pbnRlcm5hbC9vcGVyYXRvcnMvaXNFbXB0eS5qcyIsIndlYnBhY2s6Ly90ZXRyaXMvLi9ub2RlX21vZHVsZXMvcnhqcy9kaXN0L2Nqcy9pbnRlcm5hbC9vcGVyYXRvcnMvam9pbkFsbEludGVybmFscy5qcyIsIndlYnBhY2s6Ly90ZXRyaXMvLi9ub2RlX21vZHVsZXMvcnhqcy9kaXN0L2Nqcy9pbnRlcm5hbC9vcGVyYXRvcnMvbGFzdC5qcyIsIndlYnBhY2s6Ly90ZXRyaXMvLi9ub2RlX21vZHVsZXMvcnhqcy9kaXN0L2Nqcy9pbnRlcm5hbC9vcGVyYXRvcnMvbWFwLmpzIiwid2VicGFjazovL3RldHJpcy8uL25vZGVfbW9kdWxlcy9yeGpzL2Rpc3QvY2pzL2ludGVybmFsL29wZXJhdG9ycy9tYXBUby5qcyIsIndlYnBhY2s6Ly90ZXRyaXMvLi9ub2RlX21vZHVsZXMvcnhqcy9kaXN0L2Nqcy9pbnRlcm5hbC9vcGVyYXRvcnMvbWF0ZXJpYWxpemUuanMiLCJ3ZWJwYWNrOi8vdGV0cmlzLy4vbm9kZV9tb2R1bGVzL3J4anMvZGlzdC9janMvaW50ZXJuYWwvb3BlcmF0b3JzL21heC5qcyIsIndlYnBhY2s6Ly90ZXRyaXMvLi9ub2RlX21vZHVsZXMvcnhqcy9kaXN0L2Nqcy9pbnRlcm5hbC9vcGVyYXRvcnMvbWVyZ2UuanMiLCJ3ZWJwYWNrOi8vdGV0cmlzLy4vbm9kZV9tb2R1bGVzL3J4anMvZGlzdC9janMvaW50ZXJuYWwvb3BlcmF0b3JzL21lcmdlQWxsLmpzIiwid2VicGFjazovL3RldHJpcy8uL25vZGVfbW9kdWxlcy9yeGpzL2Rpc3QvY2pzL2ludGVybmFsL29wZXJhdG9ycy9tZXJnZUludGVybmFscy5qcyIsIndlYnBhY2s6Ly90ZXRyaXMvLi9ub2RlX21vZHVsZXMvcnhqcy9kaXN0L2Nqcy9pbnRlcm5hbC9vcGVyYXRvcnMvbWVyZ2VNYXAuanMiLCJ3ZWJwYWNrOi8vdGV0cmlzLy4vbm9kZV9tb2R1bGVzL3J4anMvZGlzdC9janMvaW50ZXJuYWwvb3BlcmF0b3JzL21lcmdlTWFwVG8uanMiLCJ3ZWJwYWNrOi8vdGV0cmlzLy4vbm9kZV9tb2R1bGVzL3J4anMvZGlzdC9janMvaW50ZXJuYWwvb3BlcmF0b3JzL21lcmdlU2Nhbi5qcyIsIndlYnBhY2s6Ly90ZXRyaXMvLi9ub2RlX21vZHVsZXMvcnhqcy9kaXN0L2Nqcy9pbnRlcm5hbC9vcGVyYXRvcnMvbWVyZ2VXaXRoLmpzIiwid2VicGFjazovL3RldHJpcy8uL25vZGVfbW9kdWxlcy9yeGpzL2Rpc3QvY2pzL2ludGVybmFsL29wZXJhdG9ycy9taW4uanMiLCJ3ZWJwYWNrOi8vdGV0cmlzLy4vbm9kZV9tb2R1bGVzL3J4anMvZGlzdC9janMvaW50ZXJuYWwvb3BlcmF0b3JzL211bHRpY2FzdC5qcyIsIndlYnBhY2s6Ly90ZXRyaXMvLi9ub2RlX21vZHVsZXMvcnhqcy9kaXN0L2Nqcy9pbnRlcm5hbC9vcGVyYXRvcnMvb2JzZXJ2ZU9uLmpzIiwid2VicGFjazovL3RldHJpcy8uL25vZGVfbW9kdWxlcy9yeGpzL2Rpc3QvY2pzL2ludGVybmFsL29wZXJhdG9ycy9vbkVycm9yUmVzdW1lTmV4dFdpdGguanMiLCJ3ZWJwYWNrOi8vdGV0cmlzLy4vbm9kZV9tb2R1bGVzL3J4anMvZGlzdC9janMvaW50ZXJuYWwvb3BlcmF0b3JzL3BhaXJ3aXNlLmpzIiwid2VicGFjazovL3RldHJpcy8uL25vZGVfbW9kdWxlcy9yeGpzL2Rpc3QvY2pzL2ludGVybmFsL29wZXJhdG9ycy9wbHVjay5qcyIsIndlYnBhY2s6Ly90ZXRyaXMvLi9ub2RlX21vZHVsZXMvcnhqcy9kaXN0L2Nqcy9pbnRlcm5hbC9vcGVyYXRvcnMvcHVibGlzaC5qcyIsIndlYnBhY2s6Ly90ZXRyaXMvLi9ub2RlX21vZHVsZXMvcnhqcy9kaXN0L2Nqcy9pbnRlcm5hbC9vcGVyYXRvcnMvcHVibGlzaEJlaGF2aW9yLmpzIiwid2VicGFjazovL3RldHJpcy8uL25vZGVfbW9kdWxlcy9yeGpzL2Rpc3QvY2pzL2ludGVybmFsL29wZXJhdG9ycy9wdWJsaXNoTGFzdC5qcyIsIndlYnBhY2s6Ly90ZXRyaXMvLi9ub2RlX21vZHVsZXMvcnhqcy9kaXN0L2Nqcy9pbnRlcm5hbC9vcGVyYXRvcnMvcHVibGlzaFJlcGxheS5qcyIsIndlYnBhY2s6Ly90ZXRyaXMvLi9ub2RlX21vZHVsZXMvcnhqcy9kaXN0L2Nqcy9pbnRlcm5hbC9vcGVyYXRvcnMvcmFjZVdpdGguanMiLCJ3ZWJwYWNrOi8vdGV0cmlzLy4vbm9kZV9tb2R1bGVzL3J4anMvZGlzdC9janMvaW50ZXJuYWwvb3BlcmF0b3JzL3JlZHVjZS5qcyIsIndlYnBhY2s6Ly90ZXRyaXMvLi9ub2RlX21vZHVsZXMvcnhqcy9kaXN0L2Nqcy9pbnRlcm5hbC9vcGVyYXRvcnMvcmVmQ291bnQuanMiLCJ3ZWJwYWNrOi8vdGV0cmlzLy4vbm9kZV9tb2R1bGVzL3J4anMvZGlzdC9janMvaW50ZXJuYWwvb3BlcmF0b3JzL3JlcGVhdC5qcyIsIndlYnBhY2s6Ly90ZXRyaXMvLi9ub2RlX21vZHVsZXMvcnhqcy9kaXN0L2Nqcy9pbnRlcm5hbC9vcGVyYXRvcnMvcmVwZWF0V2hlbi5qcyIsIndlYnBhY2s6Ly90ZXRyaXMvLi9ub2RlX21vZHVsZXMvcnhqcy9kaXN0L2Nqcy9pbnRlcm5hbC9vcGVyYXRvcnMvcmV0cnkuanMiLCJ3ZWJwYWNrOi8vdGV0cmlzLy4vbm9kZV9tb2R1bGVzL3J4anMvZGlzdC9janMvaW50ZXJuYWwvb3BlcmF0b3JzL3JldHJ5V2hlbi5qcyIsIndlYnBhY2s6Ly90ZXRyaXMvLi9ub2RlX21vZHVsZXMvcnhqcy9kaXN0L2Nqcy9pbnRlcm5hbC9vcGVyYXRvcnMvc2FtcGxlLmpzIiwid2VicGFjazovL3RldHJpcy8uL25vZGVfbW9kdWxlcy9yeGpzL2Rpc3QvY2pzL2ludGVybmFsL29wZXJhdG9ycy9zYW1wbGVUaW1lLmpzIiwid2VicGFjazovL3RldHJpcy8uL25vZGVfbW9kdWxlcy9yeGpzL2Rpc3QvY2pzL2ludGVybmFsL29wZXJhdG9ycy9zY2FuLmpzIiwid2VicGFjazovL3RldHJpcy8uL25vZGVfbW9kdWxlcy9yeGpzL2Rpc3QvY2pzL2ludGVybmFsL29wZXJhdG9ycy9zY2FuSW50ZXJuYWxzLmpzIiwid2VicGFjazovL3RldHJpcy8uL25vZGVfbW9kdWxlcy9yeGpzL2Rpc3QvY2pzL2ludGVybmFsL29wZXJhdG9ycy9zZXF1ZW5jZUVxdWFsLmpzIiwid2VicGFjazovL3RldHJpcy8uL25vZGVfbW9kdWxlcy9yeGpzL2Rpc3QvY2pzL2ludGVybmFsL29wZXJhdG9ycy9zaGFyZS5qcyIsIndlYnBhY2s6Ly90ZXRyaXMvLi9ub2RlX21vZHVsZXMvcnhqcy9kaXN0L2Nqcy9pbnRlcm5hbC9vcGVyYXRvcnMvc2hhcmVSZXBsYXkuanMiLCJ3ZWJwYWNrOi8vdGV0cmlzLy4vbm9kZV9tb2R1bGVzL3J4anMvZGlzdC9janMvaW50ZXJuYWwvb3BlcmF0b3JzL3NpbmdsZS5qcyIsIndlYnBhY2s6Ly90ZXRyaXMvLi9ub2RlX21vZHVsZXMvcnhqcy9kaXN0L2Nqcy9pbnRlcm5hbC9vcGVyYXRvcnMvc2tpcC5qcyIsIndlYnBhY2s6Ly90ZXRyaXMvLi9ub2RlX21vZHVsZXMvcnhqcy9kaXN0L2Nqcy9pbnRlcm5hbC9vcGVyYXRvcnMvc2tpcExhc3QuanMiLCJ3ZWJwYWNrOi8vdGV0cmlzLy4vbm9kZV9tb2R1bGVzL3J4anMvZGlzdC9janMvaW50ZXJuYWwvb3BlcmF0b3JzL3NraXBVbnRpbC5qcyIsIndlYnBhY2s6Ly90ZXRyaXMvLi9ub2RlX21vZHVsZXMvcnhqcy9kaXN0L2Nqcy9pbnRlcm5hbC9vcGVyYXRvcnMvc2tpcFdoaWxlLmpzIiwid2VicGFjazovL3RldHJpcy8uL25vZGVfbW9kdWxlcy9yeGpzL2Rpc3QvY2pzL2ludGVybmFsL29wZXJhdG9ycy9zdGFydFdpdGguanMiLCJ3ZWJwYWNrOi8vdGV0cmlzLy4vbm9kZV9tb2R1bGVzL3J4anMvZGlzdC9janMvaW50ZXJuYWwvb3BlcmF0b3JzL3N1YnNjcmliZU9uLmpzIiwid2VicGFjazovL3RldHJpcy8uL25vZGVfbW9kdWxlcy9yeGpzL2Rpc3QvY2pzL2ludGVybmFsL29wZXJhdG9ycy9zd2l0Y2hBbGwuanMiLCJ3ZWJwYWNrOi8vdGV0cmlzLy4vbm9kZV9tb2R1bGVzL3J4anMvZGlzdC9janMvaW50ZXJuYWwvb3BlcmF0b3JzL3N3aXRjaE1hcC5qcyIsIndlYnBhY2s6Ly90ZXRyaXMvLi9ub2RlX21vZHVsZXMvcnhqcy9kaXN0L2Nqcy9pbnRlcm5hbC9vcGVyYXRvcnMvc3dpdGNoTWFwVG8uanMiLCJ3ZWJwYWNrOi8vdGV0cmlzLy4vbm9kZV9tb2R1bGVzL3J4anMvZGlzdC9janMvaW50ZXJuYWwvb3BlcmF0b3JzL3N3aXRjaFNjYW4uanMiLCJ3ZWJwYWNrOi8vdGV0cmlzLy4vbm9kZV9tb2R1bGVzL3J4anMvZGlzdC9janMvaW50ZXJuYWwvb3BlcmF0b3JzL3Rha2UuanMiLCJ3ZWJwYWNrOi8vdGV0cmlzLy4vbm9kZV9tb2R1bGVzL3J4anMvZGlzdC9janMvaW50ZXJuYWwvb3BlcmF0b3JzL3Rha2VMYXN0LmpzIiwid2VicGFjazovL3RldHJpcy8uL25vZGVfbW9kdWxlcy9yeGpzL2Rpc3QvY2pzL2ludGVybmFsL29wZXJhdG9ycy90YWtlVW50aWwuanMiLCJ3ZWJwYWNrOi8vdGV0cmlzLy4vbm9kZV9tb2R1bGVzL3J4anMvZGlzdC9janMvaW50ZXJuYWwvb3BlcmF0b3JzL3Rha2VXaGlsZS5qcyIsIndlYnBhY2s6Ly90ZXRyaXMvLi9ub2RlX21vZHVsZXMvcnhqcy9kaXN0L2Nqcy9pbnRlcm5hbC9vcGVyYXRvcnMvdGFwLmpzIiwid2VicGFjazovL3RldHJpcy8uL25vZGVfbW9kdWxlcy9yeGpzL2Rpc3QvY2pzL2ludGVybmFsL29wZXJhdG9ycy90aHJvdHRsZS5qcyIsIndlYnBhY2s6Ly90ZXRyaXMvLi9ub2RlX21vZHVsZXMvcnhqcy9kaXN0L2Nqcy9pbnRlcm5hbC9vcGVyYXRvcnMvdGhyb3R0bGVUaW1lLmpzIiwid2VicGFjazovL3RldHJpcy8uL25vZGVfbW9kdWxlcy9yeGpzL2Rpc3QvY2pzL2ludGVybmFsL29wZXJhdG9ycy90aHJvd0lmRW1wdHkuanMiLCJ3ZWJwYWNrOi8vdGV0cmlzLy4vbm9kZV9tb2R1bGVzL3J4anMvZGlzdC9janMvaW50ZXJuYWwvb3BlcmF0b3JzL3RpbWVJbnRlcnZhbC5qcyIsIndlYnBhY2s6Ly90ZXRyaXMvLi9ub2RlX21vZHVsZXMvcnhqcy9kaXN0L2Nqcy9pbnRlcm5hbC9vcGVyYXRvcnMvdGltZW91dC5qcyIsIndlYnBhY2s6Ly90ZXRyaXMvLi9ub2RlX21vZHVsZXMvcnhqcy9kaXN0L2Nqcy9pbnRlcm5hbC9vcGVyYXRvcnMvdGltZW91dFdpdGguanMiLCJ3ZWJwYWNrOi8vdGV0cmlzLy4vbm9kZV9tb2R1bGVzL3J4anMvZGlzdC9janMvaW50ZXJuYWwvb3BlcmF0b3JzL3RpbWVzdGFtcC5qcyIsIndlYnBhY2s6Ly90ZXRyaXMvLi9ub2RlX21vZHVsZXMvcnhqcy9kaXN0L2Nqcy9pbnRlcm5hbC9vcGVyYXRvcnMvdG9BcnJheS5qcyIsIndlYnBhY2s6Ly90ZXRyaXMvLi9ub2RlX21vZHVsZXMvcnhqcy9kaXN0L2Nqcy9pbnRlcm5hbC9vcGVyYXRvcnMvd2luZG93LmpzIiwid2VicGFjazovL3RldHJpcy8uL25vZGVfbW9kdWxlcy9yeGpzL2Rpc3QvY2pzL2ludGVybmFsL29wZXJhdG9ycy93aW5kb3dDb3VudC5qcyIsIndlYnBhY2s6Ly90ZXRyaXMvLi9ub2RlX21vZHVsZXMvcnhqcy9kaXN0L2Nqcy9pbnRlcm5hbC9vcGVyYXRvcnMvd2luZG93VGltZS5qcyIsIndlYnBhY2s6Ly90ZXRyaXMvLi9ub2RlX21vZHVsZXMvcnhqcy9kaXN0L2Nqcy9pbnRlcm5hbC9vcGVyYXRvcnMvd2luZG93VG9nZ2xlLmpzIiwid2VicGFjazovL3RldHJpcy8uL25vZGVfbW9kdWxlcy9yeGpzL2Rpc3QvY2pzL2ludGVybmFsL29wZXJhdG9ycy93aW5kb3dXaGVuLmpzIiwid2VicGFjazovL3RldHJpcy8uL25vZGVfbW9kdWxlcy9yeGpzL2Rpc3QvY2pzL2ludGVybmFsL29wZXJhdG9ycy93aXRoTGF0ZXN0RnJvbS5qcyIsIndlYnBhY2s6Ly90ZXRyaXMvLi9ub2RlX21vZHVsZXMvcnhqcy9kaXN0L2Nqcy9pbnRlcm5hbC9vcGVyYXRvcnMvemlwLmpzIiwid2VicGFjazovL3RldHJpcy8uL25vZGVfbW9kdWxlcy9yeGpzL2Rpc3QvY2pzL2ludGVybmFsL29wZXJhdG9ycy96aXBBbGwuanMiLCJ3ZWJwYWNrOi8vdGV0cmlzLy4vbm9kZV9tb2R1bGVzL3J4anMvZGlzdC9janMvaW50ZXJuYWwvb3BlcmF0b3JzL3ppcFdpdGguanMiLCJ3ZWJwYWNrOi8vdGV0cmlzLy4vbm9kZV9tb2R1bGVzL3J4anMvZGlzdC9janMvaW50ZXJuYWwvc2NoZWR1bGVkL3NjaGVkdWxlQXJyYXkuanMiLCJ3ZWJwYWNrOi8vdGV0cmlzLy4vbm9kZV9tb2R1bGVzL3J4anMvZGlzdC9janMvaW50ZXJuYWwvc2NoZWR1bGVkL3NjaGVkdWxlQXN5bmNJdGVyYWJsZS5qcyIsIndlYnBhY2s6Ly90ZXRyaXMvLi9ub2RlX21vZHVsZXMvcnhqcy9kaXN0L2Nqcy9pbnRlcm5hbC9zY2hlZHVsZWQvc2NoZWR1bGVJdGVyYWJsZS5qcyIsIndlYnBhY2s6Ly90ZXRyaXMvLi9ub2RlX21vZHVsZXMvcnhqcy9kaXN0L2Nqcy9pbnRlcm5hbC9zY2hlZHVsZWQvc2NoZWR1bGVPYnNlcnZhYmxlLmpzIiwid2VicGFjazovL3RldHJpcy8uL25vZGVfbW9kdWxlcy9yeGpzL2Rpc3QvY2pzL2ludGVybmFsL3NjaGVkdWxlZC9zY2hlZHVsZVByb21pc2UuanMiLCJ3ZWJwYWNrOi8vdGV0cmlzLy4vbm9kZV9tb2R1bGVzL3J4anMvZGlzdC9janMvaW50ZXJuYWwvc2NoZWR1bGVkL3NjaGVkdWxlUmVhZGFibGVTdHJlYW1MaWtlLmpzIiwid2VicGFjazovL3RldHJpcy8uL25vZGVfbW9kdWxlcy9yeGpzL2Rpc3QvY2pzL2ludGVybmFsL3NjaGVkdWxlZC9zY2hlZHVsZWQuanMiLCJ3ZWJwYWNrOi8vdGV0cmlzLy4vbm9kZV9tb2R1bGVzL3J4anMvZGlzdC9janMvaW50ZXJuYWwvc2NoZWR1bGVyL0FjdGlvbi5qcyIsIndlYnBhY2s6Ly90ZXRyaXMvLi9ub2RlX21vZHVsZXMvcnhqcy9kaXN0L2Nqcy9pbnRlcm5hbC9zY2hlZHVsZXIvQW5pbWF0aW9uRnJhbWVBY3Rpb24uanMiLCJ3ZWJwYWNrOi8vdGV0cmlzLy4vbm9kZV9tb2R1bGVzL3J4anMvZGlzdC9janMvaW50ZXJuYWwvc2NoZWR1bGVyL0FuaW1hdGlvbkZyYW1lU2NoZWR1bGVyLmpzIiwid2VicGFjazovL3RldHJpcy8uL25vZGVfbW9kdWxlcy9yeGpzL2Rpc3QvY2pzL2ludGVybmFsL3NjaGVkdWxlci9Bc2FwQWN0aW9uLmpzIiwid2VicGFjazovL3RldHJpcy8uL25vZGVfbW9kdWxlcy9yeGpzL2Rpc3QvY2pzL2ludGVybmFsL3NjaGVkdWxlci9Bc2FwU2NoZWR1bGVyLmpzIiwid2VicGFjazovL3RldHJpcy8uL25vZGVfbW9kdWxlcy9yeGpzL2Rpc3QvY2pzL2ludGVybmFsL3NjaGVkdWxlci9Bc3luY0FjdGlvbi5qcyIsIndlYnBhY2s6Ly90ZXRyaXMvLi9ub2RlX21vZHVsZXMvcnhqcy9kaXN0L2Nqcy9pbnRlcm5hbC9zY2hlZHVsZXIvQXN5bmNTY2hlZHVsZXIuanMiLCJ3ZWJwYWNrOi8vdGV0cmlzLy4vbm9kZV9tb2R1bGVzL3J4anMvZGlzdC9janMvaW50ZXJuYWwvc2NoZWR1bGVyL1F1ZXVlQWN0aW9uLmpzIiwid2VicGFjazovL3RldHJpcy8uL25vZGVfbW9kdWxlcy9yeGpzL2Rpc3QvY2pzL2ludGVybmFsL3NjaGVkdWxlci9RdWV1ZVNjaGVkdWxlci5qcyIsIndlYnBhY2s6Ly90ZXRyaXMvLi9ub2RlX21vZHVsZXMvcnhqcy9kaXN0L2Nqcy9pbnRlcm5hbC9zY2hlZHVsZXIvVmlydHVhbFRpbWVTY2hlZHVsZXIuanMiLCJ3ZWJwYWNrOi8vdGV0cmlzLy4vbm9kZV9tb2R1bGVzL3J4anMvZGlzdC9janMvaW50ZXJuYWwvc2NoZWR1bGVyL2FuaW1hdGlvbkZyYW1lLmpzIiwid2VicGFjazovL3RldHJpcy8uL25vZGVfbW9kdWxlcy9yeGpzL2Rpc3QvY2pzL2ludGVybmFsL3NjaGVkdWxlci9hbmltYXRpb25GcmFtZVByb3ZpZGVyLmpzIiwid2VicGFjazovL3RldHJpcy8uL25vZGVfbW9kdWxlcy9yeGpzL2Rpc3QvY2pzL2ludGVybmFsL3NjaGVkdWxlci9hc2FwLmpzIiwid2VicGFjazovL3RldHJpcy8uL25vZGVfbW9kdWxlcy9yeGpzL2Rpc3QvY2pzL2ludGVybmFsL3NjaGVkdWxlci9hc3luYy5qcyIsIndlYnBhY2s6Ly90ZXRyaXMvLi9ub2RlX21vZHVsZXMvcnhqcy9kaXN0L2Nqcy9pbnRlcm5hbC9zY2hlZHVsZXIvZGF0ZVRpbWVzdGFtcFByb3ZpZGVyLmpzIiwid2VicGFjazovL3RldHJpcy8uL25vZGVfbW9kdWxlcy9yeGpzL2Rpc3QvY2pzL2ludGVybmFsL3NjaGVkdWxlci9pbW1lZGlhdGVQcm92aWRlci5qcyIsIndlYnBhY2s6Ly90ZXRyaXMvLi9ub2RlX21vZHVsZXMvcnhqcy9kaXN0L2Nqcy9pbnRlcm5hbC9zY2hlZHVsZXIvaW50ZXJ2YWxQcm92aWRlci5qcyIsIndlYnBhY2s6Ly90ZXRyaXMvLi9ub2RlX21vZHVsZXMvcnhqcy9kaXN0L2Nqcy9pbnRlcm5hbC9zY2hlZHVsZXIvcGVyZm9ybWFuY2VUaW1lc3RhbXBQcm92aWRlci5qcyIsIndlYnBhY2s6Ly90ZXRyaXMvLi9ub2RlX21vZHVsZXMvcnhqcy9kaXN0L2Nqcy9pbnRlcm5hbC9zY2hlZHVsZXIvcXVldWUuanMiLCJ3ZWJwYWNrOi8vdGV0cmlzLy4vbm9kZV9tb2R1bGVzL3J4anMvZGlzdC9janMvaW50ZXJuYWwvc2NoZWR1bGVyL3RpbWVvdXRQcm92aWRlci5qcyIsIndlYnBhY2s6Ly90ZXRyaXMvLi9ub2RlX21vZHVsZXMvcnhqcy9kaXN0L2Nqcy9pbnRlcm5hbC9zeW1ib2wvaXRlcmF0b3IuanMiLCJ3ZWJwYWNrOi8vdGV0cmlzLy4vbm9kZV9tb2R1bGVzL3J4anMvZGlzdC9janMvaW50ZXJuYWwvc3ltYm9sL29ic2VydmFibGUuanMiLCJ3ZWJwYWNrOi8vdGV0cmlzLy4vbm9kZV9tb2R1bGVzL3J4anMvZGlzdC9janMvaW50ZXJuYWwvdHlwZXMuanMiLCJ3ZWJwYWNrOi8vdGV0cmlzLy4vbm9kZV9tb2R1bGVzL3J4anMvZGlzdC9janMvaW50ZXJuYWwvdXRpbC9Bcmd1bWVudE91dE9mUmFuZ2VFcnJvci5qcyIsIndlYnBhY2s6Ly90ZXRyaXMvLi9ub2RlX21vZHVsZXMvcnhqcy9kaXN0L2Nqcy9pbnRlcm5hbC91dGlsL0VtcHR5RXJyb3IuanMiLCJ3ZWJwYWNrOi8vdGV0cmlzLy4vbm9kZV9tb2R1bGVzL3J4anMvZGlzdC9janMvaW50ZXJuYWwvdXRpbC9JbW1lZGlhdGUuanMiLCJ3ZWJwYWNrOi8vdGV0cmlzLy4vbm9kZV9tb2R1bGVzL3J4anMvZGlzdC9janMvaW50ZXJuYWwvdXRpbC9Ob3RGb3VuZEVycm9yLmpzIiwid2VicGFjazovL3RldHJpcy8uL25vZGVfbW9kdWxlcy9yeGpzL2Rpc3QvY2pzL2ludGVybmFsL3V0aWwvT2JqZWN0VW5zdWJzY3JpYmVkRXJyb3IuanMiLCJ3ZWJwYWNrOi8vdGV0cmlzLy4vbm9kZV9tb2R1bGVzL3J4anMvZGlzdC9janMvaW50ZXJuYWwvdXRpbC9TZXF1ZW5jZUVycm9yLmpzIiwid2VicGFjazovL3RldHJpcy8uL25vZGVfbW9kdWxlcy9yeGpzL2Rpc3QvY2pzL2ludGVybmFsL3V0aWwvVW5zdWJzY3JpcHRpb25FcnJvci5qcyIsIndlYnBhY2s6Ly90ZXRyaXMvLi9ub2RlX21vZHVsZXMvcnhqcy9kaXN0L2Nqcy9pbnRlcm5hbC91dGlsL2FyZ3MuanMiLCJ3ZWJwYWNrOi8vdGV0cmlzLy4vbm9kZV9tb2R1bGVzL3J4anMvZGlzdC9janMvaW50ZXJuYWwvdXRpbC9hcmdzQXJnQXJyYXlPck9iamVjdC5qcyIsIndlYnBhY2s6Ly90ZXRyaXMvLi9ub2RlX21vZHVsZXMvcnhqcy9kaXN0L2Nqcy9pbnRlcm5hbC91dGlsL2FyZ3NPckFyZ0FycmF5LmpzIiwid2VicGFjazovL3RldHJpcy8uL25vZGVfbW9kdWxlcy9yeGpzL2Rpc3QvY2pzL2ludGVybmFsL3V0aWwvYXJyUmVtb3ZlLmpzIiwid2VicGFjazovL3RldHJpcy8uL25vZGVfbW9kdWxlcy9yeGpzL2Rpc3QvY2pzL2ludGVybmFsL3V0aWwvY3JlYXRlRXJyb3JDbGFzcy5qcyIsIndlYnBhY2s6Ly90ZXRyaXMvLi9ub2RlX21vZHVsZXMvcnhqcy9kaXN0L2Nqcy9pbnRlcm5hbC91dGlsL2NyZWF0ZU9iamVjdC5qcyIsIndlYnBhY2s6Ly90ZXRyaXMvLi9ub2RlX21vZHVsZXMvcnhqcy9kaXN0L2Nqcy9pbnRlcm5hbC91dGlsL2Vycm9yQ29udGV4dC5qcyIsIndlYnBhY2s6Ly90ZXRyaXMvLi9ub2RlX21vZHVsZXMvcnhqcy9kaXN0L2Nqcy9pbnRlcm5hbC91dGlsL2V4ZWN1dGVTY2hlZHVsZS5qcyIsIndlYnBhY2s6Ly90ZXRyaXMvLi9ub2RlX21vZHVsZXMvcnhqcy9kaXN0L2Nqcy9pbnRlcm5hbC91dGlsL2lkZW50aXR5LmpzIiwid2VicGFjazovL3RldHJpcy8uL25vZGVfbW9kdWxlcy9yeGpzL2Rpc3QvY2pzL2ludGVybmFsL3V0aWwvaXNBcnJheUxpa2UuanMiLCJ3ZWJwYWNrOi8vdGV0cmlzLy4vbm9kZV9tb2R1bGVzL3J4anMvZGlzdC9janMvaW50ZXJuYWwvdXRpbC9pc0FzeW5jSXRlcmFibGUuanMiLCJ3ZWJwYWNrOi8vdGV0cmlzLy4vbm9kZV9tb2R1bGVzL3J4anMvZGlzdC9janMvaW50ZXJuYWwvdXRpbC9pc0RhdGUuanMiLCJ3ZWJwYWNrOi8vdGV0cmlzLy4vbm9kZV9tb2R1bGVzL3J4anMvZGlzdC9janMvaW50ZXJuYWwvdXRpbC9pc0Z1bmN0aW9uLmpzIiwid2VicGFjazovL3RldHJpcy8uL25vZGVfbW9kdWxlcy9yeGpzL2Rpc3QvY2pzL2ludGVybmFsL3V0aWwvaXNJbnRlcm9wT2JzZXJ2YWJsZS5qcyIsIndlYnBhY2s6Ly90ZXRyaXMvLi9ub2RlX21vZHVsZXMvcnhqcy9kaXN0L2Nqcy9pbnRlcm5hbC91dGlsL2lzSXRlcmFibGUuanMiLCJ3ZWJwYWNrOi8vdGV0cmlzLy4vbm9kZV9tb2R1bGVzL3J4anMvZGlzdC9janMvaW50ZXJuYWwvdXRpbC9pc09ic2VydmFibGUuanMiLCJ3ZWJwYWNrOi8vdGV0cmlzLy4vbm9kZV9tb2R1bGVzL3J4anMvZGlzdC9janMvaW50ZXJuYWwvdXRpbC9pc1Byb21pc2UuanMiLCJ3ZWJwYWNrOi8vdGV0cmlzLy4vbm9kZV9tb2R1bGVzL3J4anMvZGlzdC9janMvaW50ZXJuYWwvdXRpbC9pc1JlYWRhYmxlU3RyZWFtTGlrZS5qcyIsIndlYnBhY2s6Ly90ZXRyaXMvLi9ub2RlX21vZHVsZXMvcnhqcy9kaXN0L2Nqcy9pbnRlcm5hbC91dGlsL2lzU2NoZWR1bGVyLmpzIiwid2VicGFjazovL3RldHJpcy8uL25vZGVfbW9kdWxlcy9yeGpzL2Rpc3QvY2pzL2ludGVybmFsL3V0aWwvbGlmdC5qcyIsIndlYnBhY2s6Ly90ZXRyaXMvLi9ub2RlX21vZHVsZXMvcnhqcy9kaXN0L2Nqcy9pbnRlcm5hbC91dGlsL21hcE9uZU9yTWFueUFyZ3MuanMiLCJ3ZWJwYWNrOi8vdGV0cmlzLy4vbm9kZV9tb2R1bGVzL3J4anMvZGlzdC9janMvaW50ZXJuYWwvdXRpbC9ub29wLmpzIiwid2VicGFjazovL3RldHJpcy8uL25vZGVfbW9kdWxlcy9yeGpzL2Rpc3QvY2pzL2ludGVybmFsL3V0aWwvbm90LmpzIiwid2VicGFjazovL3RldHJpcy8uL25vZGVfbW9kdWxlcy9yeGpzL2Rpc3QvY2pzL2ludGVybmFsL3V0aWwvcGlwZS5qcyIsIndlYnBhY2s6Ly90ZXRyaXMvLi9ub2RlX21vZHVsZXMvcnhqcy9kaXN0L2Nqcy9pbnRlcm5hbC91dGlsL3JlcG9ydFVuaGFuZGxlZEVycm9yLmpzIiwid2VicGFjazovL3RldHJpcy8uL25vZGVfbW9kdWxlcy9yeGpzL2Rpc3QvY2pzL2ludGVybmFsL3V0aWwvdGhyb3dVbm9ic2VydmFibGVFcnJvci5qcyIsIndlYnBhY2s6Ly90ZXRyaXMvLi9zcmMvY29uZmlnLnRzIiwid2VicGFjazovL3RldHJpcy8uL3NyYy9nYW1lLnRzIiwid2VicGFjazovL3RldHJpcy8uL3NyYy9zZXJ2aWNlcy9hcGlTZXJ2aWNlcy50cyIsIndlYnBhY2s6Ly90ZXRyaXMvd2VicGFjay9ib290c3RyYXAiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgZnJvbUV2ZW50LCBtYXAsIHRha2UgfSBmcm9tIFwicnhqc1wiO1xyXG5pbXBvcnQgeyBHYW1lIH0gZnJvbSBcIi4vZ2FtZVwiO1xyXG5pbXBvcnQgeyBmZXRjaFNwcml0ZSQgfSBmcm9tIFwiLi9zZXJ2aWNlcy9hcGlTZXJ2aWNlc1wiXHJcblxyXG5mcm9tRXZlbnQod2luZG93LFwibG9hZFwiKS5zdWJzY3JpYmUoKCk9PntcclxuICAgIGNvbnN0IGNhbnZhcz1kb2N1bWVudC5jcmVhdGVFbGVtZW50KFwiY2FudmFzXCIpO1xyXG4gICAgY2FudmFzLmlkPVwiZ2FtZS1jb250YWluZXJcIlxyXG4gICAgY2FudmFzLndpZHRoPXdpbmRvdy5pbm5lcldpZHRoO1xyXG4gICAgY2FudmFzLmhlaWdodD13aW5kb3cuaW5uZXJIZWlnaHQ7XHJcbiAgICBkb2N1bWVudC5ib2R5LmFwcGVuZENoaWxkKGNhbnZhcylcclxuXHJcbiAgICBjb25zdCBnYW1lPW5ldyBHYW1lKGNhbnZhcyk7XHJcbiAgICBnYW1lLmluaXQoKTtcclxuXHJcbiAgICBcclxufSk7XHJcblxyXG5mZXRjaFNwcml0ZSQoKS5waXBlKFxyXG4pLnN1YnNjcmliZSh4PT5jb25zb2xlLmxvZyh4KSkiLCJcInVzZSBzdHJpY3RcIjtcbnZhciBfX2NyZWF0ZUJpbmRpbmcgPSAodGhpcyAmJiB0aGlzLl9fY3JlYXRlQmluZGluZykgfHwgKE9iamVjdC5jcmVhdGUgPyAoZnVuY3Rpb24obywgbSwgaywgazIpIHtcbiAgICBpZiAoazIgPT09IHVuZGVmaW5lZCkgazIgPSBrO1xuICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShvLCBrMiwgeyBlbnVtZXJhYmxlOiB0cnVlLCBnZXQ6IGZ1bmN0aW9uKCkgeyByZXR1cm4gbVtrXTsgfSB9KTtcbn0pIDogKGZ1bmN0aW9uKG8sIG0sIGssIGsyKSB7XG4gICAgaWYgKGsyID09PSB1bmRlZmluZWQpIGsyID0gaztcbiAgICBvW2syXSA9IG1ba107XG59KSk7XG52YXIgX19leHBvcnRTdGFyID0gKHRoaXMgJiYgdGhpcy5fX2V4cG9ydFN0YXIpIHx8IGZ1bmN0aW9uKG0sIGV4cG9ydHMpIHtcbiAgICBmb3IgKHZhciBwIGluIG0pIGlmIChwICE9PSBcImRlZmF1bHRcIiAmJiAhT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKGV4cG9ydHMsIHApKSBfX2NyZWF0ZUJpbmRpbmcoZXhwb3J0cywgbSwgcCk7XG59O1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuZXhwb3J0cy5pbnRlcnZhbCA9IGV4cG9ydHMuaWlmID0gZXhwb3J0cy5nZW5lcmF0ZSA9IGV4cG9ydHMuZnJvbUV2ZW50UGF0dGVybiA9IGV4cG9ydHMuZnJvbUV2ZW50ID0gZXhwb3J0cy5mcm9tID0gZXhwb3J0cy5mb3JrSm9pbiA9IGV4cG9ydHMuZW1wdHkgPSBleHBvcnRzLmRlZmVyID0gZXhwb3J0cy5jb25uZWN0YWJsZSA9IGV4cG9ydHMuY29uY2F0ID0gZXhwb3J0cy5jb21iaW5lTGF0ZXN0ID0gZXhwb3J0cy5iaW5kTm9kZUNhbGxiYWNrID0gZXhwb3J0cy5iaW5kQ2FsbGJhY2sgPSBleHBvcnRzLlVuc3Vic2NyaXB0aW9uRXJyb3IgPSBleHBvcnRzLlRpbWVvdXRFcnJvciA9IGV4cG9ydHMuU2VxdWVuY2VFcnJvciA9IGV4cG9ydHMuT2JqZWN0VW5zdWJzY3JpYmVkRXJyb3IgPSBleHBvcnRzLk5vdEZvdW5kRXJyb3IgPSBleHBvcnRzLkVtcHR5RXJyb3IgPSBleHBvcnRzLkFyZ3VtZW50T3V0T2ZSYW5nZUVycm9yID0gZXhwb3J0cy5maXJzdFZhbHVlRnJvbSA9IGV4cG9ydHMubGFzdFZhbHVlRnJvbSA9IGV4cG9ydHMuaXNPYnNlcnZhYmxlID0gZXhwb3J0cy5pZGVudGl0eSA9IGV4cG9ydHMubm9vcCA9IGV4cG9ydHMucGlwZSA9IGV4cG9ydHMuTm90aWZpY2F0aW9uS2luZCA9IGV4cG9ydHMuTm90aWZpY2F0aW9uID0gZXhwb3J0cy5TdWJzY3JpYmVyID0gZXhwb3J0cy5TdWJzY3JpcHRpb24gPSBleHBvcnRzLlNjaGVkdWxlciA9IGV4cG9ydHMuVmlydHVhbEFjdGlvbiA9IGV4cG9ydHMuVmlydHVhbFRpbWVTY2hlZHVsZXIgPSBleHBvcnRzLmFuaW1hdGlvbkZyYW1lU2NoZWR1bGVyID0gZXhwb3J0cy5hbmltYXRpb25GcmFtZSA9IGV4cG9ydHMucXVldWVTY2hlZHVsZXIgPSBleHBvcnRzLnF1ZXVlID0gZXhwb3J0cy5hc3luY1NjaGVkdWxlciA9IGV4cG9ydHMuYXN5bmMgPSBleHBvcnRzLmFzYXBTY2hlZHVsZXIgPSBleHBvcnRzLmFzYXAgPSBleHBvcnRzLkFzeW5jU3ViamVjdCA9IGV4cG9ydHMuUmVwbGF5U3ViamVjdCA9IGV4cG9ydHMuQmVoYXZpb3JTdWJqZWN0ID0gZXhwb3J0cy5TdWJqZWN0ID0gZXhwb3J0cy5hbmltYXRpb25GcmFtZXMgPSBleHBvcnRzLm9ic2VydmFibGUgPSBleHBvcnRzLkNvbm5lY3RhYmxlT2JzZXJ2YWJsZSA9IGV4cG9ydHMuT2JzZXJ2YWJsZSA9IHZvaWQgMDtcbmV4cG9ydHMuZmlsdGVyID0gZXhwb3J0cy5leHBhbmQgPSBleHBvcnRzLmV4aGF1c3RNYXAgPSBleHBvcnRzLmV4aGF1c3RBbGwgPSBleHBvcnRzLmV4aGF1c3QgPSBleHBvcnRzLmV2ZXJ5ID0gZXhwb3J0cy5lbmRXaXRoID0gZXhwb3J0cy5lbGVtZW50QXQgPSBleHBvcnRzLmRpc3RpbmN0VW50aWxLZXlDaGFuZ2VkID0gZXhwb3J0cy5kaXN0aW5jdFVudGlsQ2hhbmdlZCA9IGV4cG9ydHMuZGlzdGluY3QgPSBleHBvcnRzLmRlbWF0ZXJpYWxpemUgPSBleHBvcnRzLmRlbGF5V2hlbiA9IGV4cG9ydHMuZGVsYXkgPSBleHBvcnRzLmRlZmF1bHRJZkVtcHR5ID0gZXhwb3J0cy5kZWJvdW5jZVRpbWUgPSBleHBvcnRzLmRlYm91bmNlID0gZXhwb3J0cy5jb3VudCA9IGV4cG9ydHMuY29ubmVjdCA9IGV4cG9ydHMuY29uY2F0V2l0aCA9IGV4cG9ydHMuY29uY2F0TWFwVG8gPSBleHBvcnRzLmNvbmNhdE1hcCA9IGV4cG9ydHMuY29uY2F0QWxsID0gZXhwb3J0cy5jb21iaW5lTGF0ZXN0V2l0aCA9IGV4cG9ydHMuY29tYmluZUxhdGVzdEFsbCA9IGV4cG9ydHMuY29tYmluZUFsbCA9IGV4cG9ydHMuY2F0Y2hFcnJvciA9IGV4cG9ydHMuYnVmZmVyV2hlbiA9IGV4cG9ydHMuYnVmZmVyVG9nZ2xlID0gZXhwb3J0cy5idWZmZXJUaW1lID0gZXhwb3J0cy5idWZmZXJDb3VudCA9IGV4cG9ydHMuYnVmZmVyID0gZXhwb3J0cy5hdWRpdFRpbWUgPSBleHBvcnRzLmF1ZGl0ID0gZXhwb3J0cy5jb25maWcgPSBleHBvcnRzLk5FVkVSID0gZXhwb3J0cy5FTVBUWSA9IGV4cG9ydHMuc2NoZWR1bGVkID0gZXhwb3J0cy56aXAgPSBleHBvcnRzLnVzaW5nID0gZXhwb3J0cy50aW1lciA9IGV4cG9ydHMudGhyb3dFcnJvciA9IGV4cG9ydHMucmFuZ2UgPSBleHBvcnRzLnJhY2UgPSBleHBvcnRzLnBhcnRpdGlvbiA9IGV4cG9ydHMucGFpcnMgPSBleHBvcnRzLm9uRXJyb3JSZXN1bWVOZXh0ID0gZXhwb3J0cy5vZiA9IGV4cG9ydHMubmV2ZXIgPSBleHBvcnRzLm1lcmdlID0gdm9pZCAwO1xuZXhwb3J0cy5zd2l0Y2hNYXAgPSBleHBvcnRzLnN3aXRjaEFsbCA9IGV4cG9ydHMuc3Vic2NyaWJlT24gPSBleHBvcnRzLnN0YXJ0V2l0aCA9IGV4cG9ydHMuc2tpcFdoaWxlID0gZXhwb3J0cy5za2lwVW50aWwgPSBleHBvcnRzLnNraXBMYXN0ID0gZXhwb3J0cy5za2lwID0gZXhwb3J0cy5zaW5nbGUgPSBleHBvcnRzLnNoYXJlUmVwbGF5ID0gZXhwb3J0cy5zaGFyZSA9IGV4cG9ydHMuc2VxdWVuY2VFcXVhbCA9IGV4cG9ydHMuc2NhbiA9IGV4cG9ydHMuc2FtcGxlVGltZSA9IGV4cG9ydHMuc2FtcGxlID0gZXhwb3J0cy5yZWZDb3VudCA9IGV4cG9ydHMucmV0cnlXaGVuID0gZXhwb3J0cy5yZXRyeSA9IGV4cG9ydHMucmVwZWF0V2hlbiA9IGV4cG9ydHMucmVwZWF0ID0gZXhwb3J0cy5yZWR1Y2UgPSBleHBvcnRzLnJhY2VXaXRoID0gZXhwb3J0cy5wdWJsaXNoUmVwbGF5ID0gZXhwb3J0cy5wdWJsaXNoTGFzdCA9IGV4cG9ydHMucHVibGlzaEJlaGF2aW9yID0gZXhwb3J0cy5wdWJsaXNoID0gZXhwb3J0cy5wbHVjayA9IGV4cG9ydHMucGFpcndpc2UgPSBleHBvcnRzLm9uRXJyb3JSZXN1bWVOZXh0V2l0aCA9IGV4cG9ydHMub2JzZXJ2ZU9uID0gZXhwb3J0cy5tdWx0aWNhc3QgPSBleHBvcnRzLm1pbiA9IGV4cG9ydHMubWVyZ2VXaXRoID0gZXhwb3J0cy5tZXJnZVNjYW4gPSBleHBvcnRzLm1lcmdlTWFwVG8gPSBleHBvcnRzLm1lcmdlTWFwID0gZXhwb3J0cy5mbGF0TWFwID0gZXhwb3J0cy5tZXJnZUFsbCA9IGV4cG9ydHMubWF4ID0gZXhwb3J0cy5tYXRlcmlhbGl6ZSA9IGV4cG9ydHMubWFwVG8gPSBleHBvcnRzLm1hcCA9IGV4cG9ydHMubGFzdCA9IGV4cG9ydHMuaXNFbXB0eSA9IGV4cG9ydHMuaWdub3JlRWxlbWVudHMgPSBleHBvcnRzLmdyb3VwQnkgPSBleHBvcnRzLmZpcnN0ID0gZXhwb3J0cy5maW5kSW5kZXggPSBleHBvcnRzLmZpbmQgPSBleHBvcnRzLmZpbmFsaXplID0gdm9pZCAwO1xuZXhwb3J0cy56aXBXaXRoID0gZXhwb3J0cy56aXBBbGwgPSBleHBvcnRzLndpdGhMYXRlc3RGcm9tID0gZXhwb3J0cy53aW5kb3dXaGVuID0gZXhwb3J0cy53aW5kb3dUb2dnbGUgPSBleHBvcnRzLndpbmRvd1RpbWUgPSBleHBvcnRzLndpbmRvd0NvdW50ID0gZXhwb3J0cy53aW5kb3cgPSBleHBvcnRzLnRvQXJyYXkgPSBleHBvcnRzLnRpbWVzdGFtcCA9IGV4cG9ydHMudGltZW91dFdpdGggPSBleHBvcnRzLnRpbWVvdXQgPSBleHBvcnRzLnRpbWVJbnRlcnZhbCA9IGV4cG9ydHMudGhyb3dJZkVtcHR5ID0gZXhwb3J0cy50aHJvdHRsZVRpbWUgPSBleHBvcnRzLnRocm90dGxlID0gZXhwb3J0cy50YXAgPSBleHBvcnRzLnRha2VXaGlsZSA9IGV4cG9ydHMudGFrZVVudGlsID0gZXhwb3J0cy50YWtlTGFzdCA9IGV4cG9ydHMudGFrZSA9IGV4cG9ydHMuc3dpdGNoU2NhbiA9IGV4cG9ydHMuc3dpdGNoTWFwVG8gPSB2b2lkIDA7XG52YXIgT2JzZXJ2YWJsZV8xID0gcmVxdWlyZShcIi4vaW50ZXJuYWwvT2JzZXJ2YWJsZVwiKTtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIk9ic2VydmFibGVcIiwgeyBlbnVtZXJhYmxlOiB0cnVlLCBnZXQ6IGZ1bmN0aW9uICgpIHsgcmV0dXJuIE9ic2VydmFibGVfMS5PYnNlcnZhYmxlOyB9IH0pO1xudmFyIENvbm5lY3RhYmxlT2JzZXJ2YWJsZV8xID0gcmVxdWlyZShcIi4vaW50ZXJuYWwvb2JzZXJ2YWJsZS9Db25uZWN0YWJsZU9ic2VydmFibGVcIik7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJDb25uZWN0YWJsZU9ic2VydmFibGVcIiwgeyBlbnVtZXJhYmxlOiB0cnVlLCBnZXQ6IGZ1bmN0aW9uICgpIHsgcmV0dXJuIENvbm5lY3RhYmxlT2JzZXJ2YWJsZV8xLkNvbm5lY3RhYmxlT2JzZXJ2YWJsZTsgfSB9KTtcbnZhciBvYnNlcnZhYmxlXzEgPSByZXF1aXJlKFwiLi9pbnRlcm5hbC9zeW1ib2wvb2JzZXJ2YWJsZVwiKTtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIm9ic2VydmFibGVcIiwgeyBlbnVtZXJhYmxlOiB0cnVlLCBnZXQ6IGZ1bmN0aW9uICgpIHsgcmV0dXJuIG9ic2VydmFibGVfMS5vYnNlcnZhYmxlOyB9IH0pO1xudmFyIGFuaW1hdGlvbkZyYW1lc18xID0gcmVxdWlyZShcIi4vaW50ZXJuYWwvb2JzZXJ2YWJsZS9kb20vYW5pbWF0aW9uRnJhbWVzXCIpO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiYW5pbWF0aW9uRnJhbWVzXCIsIHsgZW51bWVyYWJsZTogdHJ1ZSwgZ2V0OiBmdW5jdGlvbiAoKSB7IHJldHVybiBhbmltYXRpb25GcmFtZXNfMS5hbmltYXRpb25GcmFtZXM7IH0gfSk7XG52YXIgU3ViamVjdF8xID0gcmVxdWlyZShcIi4vaW50ZXJuYWwvU3ViamVjdFwiKTtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIlN1YmplY3RcIiwgeyBlbnVtZXJhYmxlOiB0cnVlLCBnZXQ6IGZ1bmN0aW9uICgpIHsgcmV0dXJuIFN1YmplY3RfMS5TdWJqZWN0OyB9IH0pO1xudmFyIEJlaGF2aW9yU3ViamVjdF8xID0gcmVxdWlyZShcIi4vaW50ZXJuYWwvQmVoYXZpb3JTdWJqZWN0XCIpO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiQmVoYXZpb3JTdWJqZWN0XCIsIHsgZW51bWVyYWJsZTogdHJ1ZSwgZ2V0OiBmdW5jdGlvbiAoKSB7IHJldHVybiBCZWhhdmlvclN1YmplY3RfMS5CZWhhdmlvclN1YmplY3Q7IH0gfSk7XG52YXIgUmVwbGF5U3ViamVjdF8xID0gcmVxdWlyZShcIi4vaW50ZXJuYWwvUmVwbGF5U3ViamVjdFwiKTtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIlJlcGxheVN1YmplY3RcIiwgeyBlbnVtZXJhYmxlOiB0cnVlLCBnZXQ6IGZ1bmN0aW9uICgpIHsgcmV0dXJuIFJlcGxheVN1YmplY3RfMS5SZXBsYXlTdWJqZWN0OyB9IH0pO1xudmFyIEFzeW5jU3ViamVjdF8xID0gcmVxdWlyZShcIi4vaW50ZXJuYWwvQXN5bmNTdWJqZWN0XCIpO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiQXN5bmNTdWJqZWN0XCIsIHsgZW51bWVyYWJsZTogdHJ1ZSwgZ2V0OiBmdW5jdGlvbiAoKSB7IHJldHVybiBBc3luY1N1YmplY3RfMS5Bc3luY1N1YmplY3Q7IH0gfSk7XG52YXIgYXNhcF8xID0gcmVxdWlyZShcIi4vaW50ZXJuYWwvc2NoZWR1bGVyL2FzYXBcIik7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJhc2FwXCIsIHsgZW51bWVyYWJsZTogdHJ1ZSwgZ2V0OiBmdW5jdGlvbiAoKSB7IHJldHVybiBhc2FwXzEuYXNhcDsgfSB9KTtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcImFzYXBTY2hlZHVsZXJcIiwgeyBlbnVtZXJhYmxlOiB0cnVlLCBnZXQ6IGZ1bmN0aW9uICgpIHsgcmV0dXJuIGFzYXBfMS5hc2FwU2NoZWR1bGVyOyB9IH0pO1xudmFyIGFzeW5jXzEgPSByZXF1aXJlKFwiLi9pbnRlcm5hbC9zY2hlZHVsZXIvYXN5bmNcIik7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJhc3luY1wiLCB7IGVudW1lcmFibGU6IHRydWUsIGdldDogZnVuY3Rpb24gKCkgeyByZXR1cm4gYXN5bmNfMS5hc3luYzsgfSB9KTtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcImFzeW5jU2NoZWR1bGVyXCIsIHsgZW51bWVyYWJsZTogdHJ1ZSwgZ2V0OiBmdW5jdGlvbiAoKSB7IHJldHVybiBhc3luY18xLmFzeW5jU2NoZWR1bGVyOyB9IH0pO1xudmFyIHF1ZXVlXzEgPSByZXF1aXJlKFwiLi9pbnRlcm5hbC9zY2hlZHVsZXIvcXVldWVcIik7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJxdWV1ZVwiLCB7IGVudW1lcmFibGU6IHRydWUsIGdldDogZnVuY3Rpb24gKCkgeyByZXR1cm4gcXVldWVfMS5xdWV1ZTsgfSB9KTtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcInF1ZXVlU2NoZWR1bGVyXCIsIHsgZW51bWVyYWJsZTogdHJ1ZSwgZ2V0OiBmdW5jdGlvbiAoKSB7IHJldHVybiBxdWV1ZV8xLnF1ZXVlU2NoZWR1bGVyOyB9IH0pO1xudmFyIGFuaW1hdGlvbkZyYW1lXzEgPSByZXF1aXJlKFwiLi9pbnRlcm5hbC9zY2hlZHVsZXIvYW5pbWF0aW9uRnJhbWVcIik7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJhbmltYXRpb25GcmFtZVwiLCB7IGVudW1lcmFibGU6IHRydWUsIGdldDogZnVuY3Rpb24gKCkgeyByZXR1cm4gYW5pbWF0aW9uRnJhbWVfMS5hbmltYXRpb25GcmFtZTsgfSB9KTtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcImFuaW1hdGlvbkZyYW1lU2NoZWR1bGVyXCIsIHsgZW51bWVyYWJsZTogdHJ1ZSwgZ2V0OiBmdW5jdGlvbiAoKSB7IHJldHVybiBhbmltYXRpb25GcmFtZV8xLmFuaW1hdGlvbkZyYW1lU2NoZWR1bGVyOyB9IH0pO1xudmFyIFZpcnR1YWxUaW1lU2NoZWR1bGVyXzEgPSByZXF1aXJlKFwiLi9pbnRlcm5hbC9zY2hlZHVsZXIvVmlydHVhbFRpbWVTY2hlZHVsZXJcIik7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJWaXJ0dWFsVGltZVNjaGVkdWxlclwiLCB7IGVudW1lcmFibGU6IHRydWUsIGdldDogZnVuY3Rpb24gKCkgeyByZXR1cm4gVmlydHVhbFRpbWVTY2hlZHVsZXJfMS5WaXJ0dWFsVGltZVNjaGVkdWxlcjsgfSB9KTtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIlZpcnR1YWxBY3Rpb25cIiwgeyBlbnVtZXJhYmxlOiB0cnVlLCBnZXQ6IGZ1bmN0aW9uICgpIHsgcmV0dXJuIFZpcnR1YWxUaW1lU2NoZWR1bGVyXzEuVmlydHVhbEFjdGlvbjsgfSB9KTtcbnZhciBTY2hlZHVsZXJfMSA9IHJlcXVpcmUoXCIuL2ludGVybmFsL1NjaGVkdWxlclwiKTtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIlNjaGVkdWxlclwiLCB7IGVudW1lcmFibGU6IHRydWUsIGdldDogZnVuY3Rpb24gKCkgeyByZXR1cm4gU2NoZWR1bGVyXzEuU2NoZWR1bGVyOyB9IH0pO1xudmFyIFN1YnNjcmlwdGlvbl8xID0gcmVxdWlyZShcIi4vaW50ZXJuYWwvU3Vic2NyaXB0aW9uXCIpO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiU3Vic2NyaXB0aW9uXCIsIHsgZW51bWVyYWJsZTogdHJ1ZSwgZ2V0OiBmdW5jdGlvbiAoKSB7IHJldHVybiBTdWJzY3JpcHRpb25fMS5TdWJzY3JpcHRpb247IH0gfSk7XG52YXIgU3Vic2NyaWJlcl8xID0gcmVxdWlyZShcIi4vaW50ZXJuYWwvU3Vic2NyaWJlclwiKTtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIlN1YnNjcmliZXJcIiwgeyBlbnVtZXJhYmxlOiB0cnVlLCBnZXQ6IGZ1bmN0aW9uICgpIHsgcmV0dXJuIFN1YnNjcmliZXJfMS5TdWJzY3JpYmVyOyB9IH0pO1xudmFyIE5vdGlmaWNhdGlvbl8xID0gcmVxdWlyZShcIi4vaW50ZXJuYWwvTm90aWZpY2F0aW9uXCIpO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiTm90aWZpY2F0aW9uXCIsIHsgZW51bWVyYWJsZTogdHJ1ZSwgZ2V0OiBmdW5jdGlvbiAoKSB7IHJldHVybiBOb3RpZmljYXRpb25fMS5Ob3RpZmljYXRpb247IH0gfSk7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJOb3RpZmljYXRpb25LaW5kXCIsIHsgZW51bWVyYWJsZTogdHJ1ZSwgZ2V0OiBmdW5jdGlvbiAoKSB7IHJldHVybiBOb3RpZmljYXRpb25fMS5Ob3RpZmljYXRpb25LaW5kOyB9IH0pO1xudmFyIHBpcGVfMSA9IHJlcXVpcmUoXCIuL2ludGVybmFsL3V0aWwvcGlwZVwiKTtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcInBpcGVcIiwgeyBlbnVtZXJhYmxlOiB0cnVlLCBnZXQ6IGZ1bmN0aW9uICgpIHsgcmV0dXJuIHBpcGVfMS5waXBlOyB9IH0pO1xudmFyIG5vb3BfMSA9IHJlcXVpcmUoXCIuL2ludGVybmFsL3V0aWwvbm9vcFwiKTtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIm5vb3BcIiwgeyBlbnVtZXJhYmxlOiB0cnVlLCBnZXQ6IGZ1bmN0aW9uICgpIHsgcmV0dXJuIG5vb3BfMS5ub29wOyB9IH0pO1xudmFyIGlkZW50aXR5XzEgPSByZXF1aXJlKFwiLi9pbnRlcm5hbC91dGlsL2lkZW50aXR5XCIpO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiaWRlbnRpdHlcIiwgeyBlbnVtZXJhYmxlOiB0cnVlLCBnZXQ6IGZ1bmN0aW9uICgpIHsgcmV0dXJuIGlkZW50aXR5XzEuaWRlbnRpdHk7IH0gfSk7XG52YXIgaXNPYnNlcnZhYmxlXzEgPSByZXF1aXJlKFwiLi9pbnRlcm5hbC91dGlsL2lzT2JzZXJ2YWJsZVwiKTtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcImlzT2JzZXJ2YWJsZVwiLCB7IGVudW1lcmFibGU6IHRydWUsIGdldDogZnVuY3Rpb24gKCkgeyByZXR1cm4gaXNPYnNlcnZhYmxlXzEuaXNPYnNlcnZhYmxlOyB9IH0pO1xudmFyIGxhc3RWYWx1ZUZyb21fMSA9IHJlcXVpcmUoXCIuL2ludGVybmFsL2xhc3RWYWx1ZUZyb21cIik7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJsYXN0VmFsdWVGcm9tXCIsIHsgZW51bWVyYWJsZTogdHJ1ZSwgZ2V0OiBmdW5jdGlvbiAoKSB7IHJldHVybiBsYXN0VmFsdWVGcm9tXzEubGFzdFZhbHVlRnJvbTsgfSB9KTtcbnZhciBmaXJzdFZhbHVlRnJvbV8xID0gcmVxdWlyZShcIi4vaW50ZXJuYWwvZmlyc3RWYWx1ZUZyb21cIik7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJmaXJzdFZhbHVlRnJvbVwiLCB7IGVudW1lcmFibGU6IHRydWUsIGdldDogZnVuY3Rpb24gKCkgeyByZXR1cm4gZmlyc3RWYWx1ZUZyb21fMS5maXJzdFZhbHVlRnJvbTsgfSB9KTtcbnZhciBBcmd1bWVudE91dE9mUmFuZ2VFcnJvcl8xID0gcmVxdWlyZShcIi4vaW50ZXJuYWwvdXRpbC9Bcmd1bWVudE91dE9mUmFuZ2VFcnJvclwiKTtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIkFyZ3VtZW50T3V0T2ZSYW5nZUVycm9yXCIsIHsgZW51bWVyYWJsZTogdHJ1ZSwgZ2V0OiBmdW5jdGlvbiAoKSB7IHJldHVybiBBcmd1bWVudE91dE9mUmFuZ2VFcnJvcl8xLkFyZ3VtZW50T3V0T2ZSYW5nZUVycm9yOyB9IH0pO1xudmFyIEVtcHR5RXJyb3JfMSA9IHJlcXVpcmUoXCIuL2ludGVybmFsL3V0aWwvRW1wdHlFcnJvclwiKTtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIkVtcHR5RXJyb3JcIiwgeyBlbnVtZXJhYmxlOiB0cnVlLCBnZXQ6IGZ1bmN0aW9uICgpIHsgcmV0dXJuIEVtcHR5RXJyb3JfMS5FbXB0eUVycm9yOyB9IH0pO1xudmFyIE5vdEZvdW5kRXJyb3JfMSA9IHJlcXVpcmUoXCIuL2ludGVybmFsL3V0aWwvTm90Rm91bmRFcnJvclwiKTtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIk5vdEZvdW5kRXJyb3JcIiwgeyBlbnVtZXJhYmxlOiB0cnVlLCBnZXQ6IGZ1bmN0aW9uICgpIHsgcmV0dXJuIE5vdEZvdW5kRXJyb3JfMS5Ob3RGb3VuZEVycm9yOyB9IH0pO1xudmFyIE9iamVjdFVuc3Vic2NyaWJlZEVycm9yXzEgPSByZXF1aXJlKFwiLi9pbnRlcm5hbC91dGlsL09iamVjdFVuc3Vic2NyaWJlZEVycm9yXCIpO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiT2JqZWN0VW5zdWJzY3JpYmVkRXJyb3JcIiwgeyBlbnVtZXJhYmxlOiB0cnVlLCBnZXQ6IGZ1bmN0aW9uICgpIHsgcmV0dXJuIE9iamVjdFVuc3Vic2NyaWJlZEVycm9yXzEuT2JqZWN0VW5zdWJzY3JpYmVkRXJyb3I7IH0gfSk7XG52YXIgU2VxdWVuY2VFcnJvcl8xID0gcmVxdWlyZShcIi4vaW50ZXJuYWwvdXRpbC9TZXF1ZW5jZUVycm9yXCIpO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiU2VxdWVuY2VFcnJvclwiLCB7IGVudW1lcmFibGU6IHRydWUsIGdldDogZnVuY3Rpb24gKCkgeyByZXR1cm4gU2VxdWVuY2VFcnJvcl8xLlNlcXVlbmNlRXJyb3I7IH0gfSk7XG52YXIgdGltZW91dF8xID0gcmVxdWlyZShcIi4vaW50ZXJuYWwvb3BlcmF0b3JzL3RpbWVvdXRcIik7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJUaW1lb3V0RXJyb3JcIiwgeyBlbnVtZXJhYmxlOiB0cnVlLCBnZXQ6IGZ1bmN0aW9uICgpIHsgcmV0dXJuIHRpbWVvdXRfMS5UaW1lb3V0RXJyb3I7IH0gfSk7XG52YXIgVW5zdWJzY3JpcHRpb25FcnJvcl8xID0gcmVxdWlyZShcIi4vaW50ZXJuYWwvdXRpbC9VbnN1YnNjcmlwdGlvbkVycm9yXCIpO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiVW5zdWJzY3JpcHRpb25FcnJvclwiLCB7IGVudW1lcmFibGU6IHRydWUsIGdldDogZnVuY3Rpb24gKCkgeyByZXR1cm4gVW5zdWJzY3JpcHRpb25FcnJvcl8xLlVuc3Vic2NyaXB0aW9uRXJyb3I7IH0gfSk7XG52YXIgYmluZENhbGxiYWNrXzEgPSByZXF1aXJlKFwiLi9pbnRlcm5hbC9vYnNlcnZhYmxlL2JpbmRDYWxsYmFja1wiKTtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcImJpbmRDYWxsYmFja1wiLCB7IGVudW1lcmFibGU6IHRydWUsIGdldDogZnVuY3Rpb24gKCkgeyByZXR1cm4gYmluZENhbGxiYWNrXzEuYmluZENhbGxiYWNrOyB9IH0pO1xudmFyIGJpbmROb2RlQ2FsbGJhY2tfMSA9IHJlcXVpcmUoXCIuL2ludGVybmFsL29ic2VydmFibGUvYmluZE5vZGVDYWxsYmFja1wiKTtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcImJpbmROb2RlQ2FsbGJhY2tcIiwgeyBlbnVtZXJhYmxlOiB0cnVlLCBnZXQ6IGZ1bmN0aW9uICgpIHsgcmV0dXJuIGJpbmROb2RlQ2FsbGJhY2tfMS5iaW5kTm9kZUNhbGxiYWNrOyB9IH0pO1xudmFyIGNvbWJpbmVMYXRlc3RfMSA9IHJlcXVpcmUoXCIuL2ludGVybmFsL29ic2VydmFibGUvY29tYmluZUxhdGVzdFwiKTtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcImNvbWJpbmVMYXRlc3RcIiwgeyBlbnVtZXJhYmxlOiB0cnVlLCBnZXQ6IGZ1bmN0aW9uICgpIHsgcmV0dXJuIGNvbWJpbmVMYXRlc3RfMS5jb21iaW5lTGF0ZXN0OyB9IH0pO1xudmFyIGNvbmNhdF8xID0gcmVxdWlyZShcIi4vaW50ZXJuYWwvb2JzZXJ2YWJsZS9jb25jYXRcIik7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJjb25jYXRcIiwgeyBlbnVtZXJhYmxlOiB0cnVlLCBnZXQ6IGZ1bmN0aW9uICgpIHsgcmV0dXJuIGNvbmNhdF8xLmNvbmNhdDsgfSB9KTtcbnZhciBjb25uZWN0YWJsZV8xID0gcmVxdWlyZShcIi4vaW50ZXJuYWwvb2JzZXJ2YWJsZS9jb25uZWN0YWJsZVwiKTtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcImNvbm5lY3RhYmxlXCIsIHsgZW51bWVyYWJsZTogdHJ1ZSwgZ2V0OiBmdW5jdGlvbiAoKSB7IHJldHVybiBjb25uZWN0YWJsZV8xLmNvbm5lY3RhYmxlOyB9IH0pO1xudmFyIGRlZmVyXzEgPSByZXF1aXJlKFwiLi9pbnRlcm5hbC9vYnNlcnZhYmxlL2RlZmVyXCIpO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiZGVmZXJcIiwgeyBlbnVtZXJhYmxlOiB0cnVlLCBnZXQ6IGZ1bmN0aW9uICgpIHsgcmV0dXJuIGRlZmVyXzEuZGVmZXI7IH0gfSk7XG52YXIgZW1wdHlfMSA9IHJlcXVpcmUoXCIuL2ludGVybmFsL29ic2VydmFibGUvZW1wdHlcIik7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJlbXB0eVwiLCB7IGVudW1lcmFibGU6IHRydWUsIGdldDogZnVuY3Rpb24gKCkgeyByZXR1cm4gZW1wdHlfMS5lbXB0eTsgfSB9KTtcbnZhciBmb3JrSm9pbl8xID0gcmVxdWlyZShcIi4vaW50ZXJuYWwvb2JzZXJ2YWJsZS9mb3JrSm9pblwiKTtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcImZvcmtKb2luXCIsIHsgZW51bWVyYWJsZTogdHJ1ZSwgZ2V0OiBmdW5jdGlvbiAoKSB7IHJldHVybiBmb3JrSm9pbl8xLmZvcmtKb2luOyB9IH0pO1xudmFyIGZyb21fMSA9IHJlcXVpcmUoXCIuL2ludGVybmFsL29ic2VydmFibGUvZnJvbVwiKTtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcImZyb21cIiwgeyBlbnVtZXJhYmxlOiB0cnVlLCBnZXQ6IGZ1bmN0aW9uICgpIHsgcmV0dXJuIGZyb21fMS5mcm9tOyB9IH0pO1xudmFyIGZyb21FdmVudF8xID0gcmVxdWlyZShcIi4vaW50ZXJuYWwvb2JzZXJ2YWJsZS9mcm9tRXZlbnRcIik7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJmcm9tRXZlbnRcIiwgeyBlbnVtZXJhYmxlOiB0cnVlLCBnZXQ6IGZ1bmN0aW9uICgpIHsgcmV0dXJuIGZyb21FdmVudF8xLmZyb21FdmVudDsgfSB9KTtcbnZhciBmcm9tRXZlbnRQYXR0ZXJuXzEgPSByZXF1aXJlKFwiLi9pbnRlcm5hbC9vYnNlcnZhYmxlL2Zyb21FdmVudFBhdHRlcm5cIik7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJmcm9tRXZlbnRQYXR0ZXJuXCIsIHsgZW51bWVyYWJsZTogdHJ1ZSwgZ2V0OiBmdW5jdGlvbiAoKSB7IHJldHVybiBmcm9tRXZlbnRQYXR0ZXJuXzEuZnJvbUV2ZW50UGF0dGVybjsgfSB9KTtcbnZhciBnZW5lcmF0ZV8xID0gcmVxdWlyZShcIi4vaW50ZXJuYWwvb2JzZXJ2YWJsZS9nZW5lcmF0ZVwiKTtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcImdlbmVyYXRlXCIsIHsgZW51bWVyYWJsZTogdHJ1ZSwgZ2V0OiBmdW5jdGlvbiAoKSB7IHJldHVybiBnZW5lcmF0ZV8xLmdlbmVyYXRlOyB9IH0pO1xudmFyIGlpZl8xID0gcmVxdWlyZShcIi4vaW50ZXJuYWwvb2JzZXJ2YWJsZS9paWZcIik7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJpaWZcIiwgeyBlbnVtZXJhYmxlOiB0cnVlLCBnZXQ6IGZ1bmN0aW9uICgpIHsgcmV0dXJuIGlpZl8xLmlpZjsgfSB9KTtcbnZhciBpbnRlcnZhbF8xID0gcmVxdWlyZShcIi4vaW50ZXJuYWwvb2JzZXJ2YWJsZS9pbnRlcnZhbFwiKTtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcImludGVydmFsXCIsIHsgZW51bWVyYWJsZTogdHJ1ZSwgZ2V0OiBmdW5jdGlvbiAoKSB7IHJldHVybiBpbnRlcnZhbF8xLmludGVydmFsOyB9IH0pO1xudmFyIG1lcmdlXzEgPSByZXF1aXJlKFwiLi9pbnRlcm5hbC9vYnNlcnZhYmxlL21lcmdlXCIpO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwibWVyZ2VcIiwgeyBlbnVtZXJhYmxlOiB0cnVlLCBnZXQ6IGZ1bmN0aW9uICgpIHsgcmV0dXJuIG1lcmdlXzEubWVyZ2U7IH0gfSk7XG52YXIgbmV2ZXJfMSA9IHJlcXVpcmUoXCIuL2ludGVybmFsL29ic2VydmFibGUvbmV2ZXJcIik7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJuZXZlclwiLCB7IGVudW1lcmFibGU6IHRydWUsIGdldDogZnVuY3Rpb24gKCkgeyByZXR1cm4gbmV2ZXJfMS5uZXZlcjsgfSB9KTtcbnZhciBvZl8xID0gcmVxdWlyZShcIi4vaW50ZXJuYWwvb2JzZXJ2YWJsZS9vZlwiKTtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIm9mXCIsIHsgZW51bWVyYWJsZTogdHJ1ZSwgZ2V0OiBmdW5jdGlvbiAoKSB7IHJldHVybiBvZl8xLm9mOyB9IH0pO1xudmFyIG9uRXJyb3JSZXN1bWVOZXh0XzEgPSByZXF1aXJlKFwiLi9pbnRlcm5hbC9vYnNlcnZhYmxlL29uRXJyb3JSZXN1bWVOZXh0XCIpO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwib25FcnJvclJlc3VtZU5leHRcIiwgeyBlbnVtZXJhYmxlOiB0cnVlLCBnZXQ6IGZ1bmN0aW9uICgpIHsgcmV0dXJuIG9uRXJyb3JSZXN1bWVOZXh0XzEub25FcnJvclJlc3VtZU5leHQ7IH0gfSk7XG52YXIgcGFpcnNfMSA9IHJlcXVpcmUoXCIuL2ludGVybmFsL29ic2VydmFibGUvcGFpcnNcIik7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJwYWlyc1wiLCB7IGVudW1lcmFibGU6IHRydWUsIGdldDogZnVuY3Rpb24gKCkgeyByZXR1cm4gcGFpcnNfMS5wYWlyczsgfSB9KTtcbnZhciBwYXJ0aXRpb25fMSA9IHJlcXVpcmUoXCIuL2ludGVybmFsL29ic2VydmFibGUvcGFydGl0aW9uXCIpO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwicGFydGl0aW9uXCIsIHsgZW51bWVyYWJsZTogdHJ1ZSwgZ2V0OiBmdW5jdGlvbiAoKSB7IHJldHVybiBwYXJ0aXRpb25fMS5wYXJ0aXRpb247IH0gfSk7XG52YXIgcmFjZV8xID0gcmVxdWlyZShcIi4vaW50ZXJuYWwvb2JzZXJ2YWJsZS9yYWNlXCIpO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwicmFjZVwiLCB7IGVudW1lcmFibGU6IHRydWUsIGdldDogZnVuY3Rpb24gKCkgeyByZXR1cm4gcmFjZV8xLnJhY2U7IH0gfSk7XG52YXIgcmFuZ2VfMSA9IHJlcXVpcmUoXCIuL2ludGVybmFsL29ic2VydmFibGUvcmFuZ2VcIik7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJyYW5nZVwiLCB7IGVudW1lcmFibGU6IHRydWUsIGdldDogZnVuY3Rpb24gKCkgeyByZXR1cm4gcmFuZ2VfMS5yYW5nZTsgfSB9KTtcbnZhciB0aHJvd0Vycm9yXzEgPSByZXF1aXJlKFwiLi9pbnRlcm5hbC9vYnNlcnZhYmxlL3Rocm93RXJyb3JcIik7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJ0aHJvd0Vycm9yXCIsIHsgZW51bWVyYWJsZTogdHJ1ZSwgZ2V0OiBmdW5jdGlvbiAoKSB7IHJldHVybiB0aHJvd0Vycm9yXzEudGhyb3dFcnJvcjsgfSB9KTtcbnZhciB0aW1lcl8xID0gcmVxdWlyZShcIi4vaW50ZXJuYWwvb2JzZXJ2YWJsZS90aW1lclwiKTtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcInRpbWVyXCIsIHsgZW51bWVyYWJsZTogdHJ1ZSwgZ2V0OiBmdW5jdGlvbiAoKSB7IHJldHVybiB0aW1lcl8xLnRpbWVyOyB9IH0pO1xudmFyIHVzaW5nXzEgPSByZXF1aXJlKFwiLi9pbnRlcm5hbC9vYnNlcnZhYmxlL3VzaW5nXCIpO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwidXNpbmdcIiwgeyBlbnVtZXJhYmxlOiB0cnVlLCBnZXQ6IGZ1bmN0aW9uICgpIHsgcmV0dXJuIHVzaW5nXzEudXNpbmc7IH0gfSk7XG52YXIgemlwXzEgPSByZXF1aXJlKFwiLi9pbnRlcm5hbC9vYnNlcnZhYmxlL3ppcFwiKTtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcInppcFwiLCB7IGVudW1lcmFibGU6IHRydWUsIGdldDogZnVuY3Rpb24gKCkgeyByZXR1cm4gemlwXzEuemlwOyB9IH0pO1xudmFyIHNjaGVkdWxlZF8xID0gcmVxdWlyZShcIi4vaW50ZXJuYWwvc2NoZWR1bGVkL3NjaGVkdWxlZFwiKTtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcInNjaGVkdWxlZFwiLCB7IGVudW1lcmFibGU6IHRydWUsIGdldDogZnVuY3Rpb24gKCkgeyByZXR1cm4gc2NoZWR1bGVkXzEuc2NoZWR1bGVkOyB9IH0pO1xudmFyIGVtcHR5XzIgPSByZXF1aXJlKFwiLi9pbnRlcm5hbC9vYnNlcnZhYmxlL2VtcHR5XCIpO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiRU1QVFlcIiwgeyBlbnVtZXJhYmxlOiB0cnVlLCBnZXQ6IGZ1bmN0aW9uICgpIHsgcmV0dXJuIGVtcHR5XzIuRU1QVFk7IH0gfSk7XG52YXIgbmV2ZXJfMiA9IHJlcXVpcmUoXCIuL2ludGVybmFsL29ic2VydmFibGUvbmV2ZXJcIik7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJORVZFUlwiLCB7IGVudW1lcmFibGU6IHRydWUsIGdldDogZnVuY3Rpb24gKCkgeyByZXR1cm4gbmV2ZXJfMi5ORVZFUjsgfSB9KTtcbl9fZXhwb3J0U3RhcihyZXF1aXJlKFwiLi9pbnRlcm5hbC90eXBlc1wiKSwgZXhwb3J0cyk7XG52YXIgY29uZmlnXzEgPSByZXF1aXJlKFwiLi9pbnRlcm5hbC9jb25maWdcIik7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJjb25maWdcIiwgeyBlbnVtZXJhYmxlOiB0cnVlLCBnZXQ6IGZ1bmN0aW9uICgpIHsgcmV0dXJuIGNvbmZpZ18xLmNvbmZpZzsgfSB9KTtcbnZhciBhdWRpdF8xID0gcmVxdWlyZShcIi4vaW50ZXJuYWwvb3BlcmF0b3JzL2F1ZGl0XCIpO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiYXVkaXRcIiwgeyBlbnVtZXJhYmxlOiB0cnVlLCBnZXQ6IGZ1bmN0aW9uICgpIHsgcmV0dXJuIGF1ZGl0XzEuYXVkaXQ7IH0gfSk7XG52YXIgYXVkaXRUaW1lXzEgPSByZXF1aXJlKFwiLi9pbnRlcm5hbC9vcGVyYXRvcnMvYXVkaXRUaW1lXCIpO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiYXVkaXRUaW1lXCIsIHsgZW51bWVyYWJsZTogdHJ1ZSwgZ2V0OiBmdW5jdGlvbiAoKSB7IHJldHVybiBhdWRpdFRpbWVfMS5hdWRpdFRpbWU7IH0gfSk7XG52YXIgYnVmZmVyXzEgPSByZXF1aXJlKFwiLi9pbnRlcm5hbC9vcGVyYXRvcnMvYnVmZmVyXCIpO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiYnVmZmVyXCIsIHsgZW51bWVyYWJsZTogdHJ1ZSwgZ2V0OiBmdW5jdGlvbiAoKSB7IHJldHVybiBidWZmZXJfMS5idWZmZXI7IH0gfSk7XG52YXIgYnVmZmVyQ291bnRfMSA9IHJlcXVpcmUoXCIuL2ludGVybmFsL29wZXJhdG9ycy9idWZmZXJDb3VudFwiKTtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcImJ1ZmZlckNvdW50XCIsIHsgZW51bWVyYWJsZTogdHJ1ZSwgZ2V0OiBmdW5jdGlvbiAoKSB7IHJldHVybiBidWZmZXJDb3VudF8xLmJ1ZmZlckNvdW50OyB9IH0pO1xudmFyIGJ1ZmZlclRpbWVfMSA9IHJlcXVpcmUoXCIuL2ludGVybmFsL29wZXJhdG9ycy9idWZmZXJUaW1lXCIpO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiYnVmZmVyVGltZVwiLCB7IGVudW1lcmFibGU6IHRydWUsIGdldDogZnVuY3Rpb24gKCkgeyByZXR1cm4gYnVmZmVyVGltZV8xLmJ1ZmZlclRpbWU7IH0gfSk7XG52YXIgYnVmZmVyVG9nZ2xlXzEgPSByZXF1aXJlKFwiLi9pbnRlcm5hbC9vcGVyYXRvcnMvYnVmZmVyVG9nZ2xlXCIpO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiYnVmZmVyVG9nZ2xlXCIsIHsgZW51bWVyYWJsZTogdHJ1ZSwgZ2V0OiBmdW5jdGlvbiAoKSB7IHJldHVybiBidWZmZXJUb2dnbGVfMS5idWZmZXJUb2dnbGU7IH0gfSk7XG52YXIgYnVmZmVyV2hlbl8xID0gcmVxdWlyZShcIi4vaW50ZXJuYWwvb3BlcmF0b3JzL2J1ZmZlcldoZW5cIik7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJidWZmZXJXaGVuXCIsIHsgZW51bWVyYWJsZTogdHJ1ZSwgZ2V0OiBmdW5jdGlvbiAoKSB7IHJldHVybiBidWZmZXJXaGVuXzEuYnVmZmVyV2hlbjsgfSB9KTtcbnZhciBjYXRjaEVycm9yXzEgPSByZXF1aXJlKFwiLi9pbnRlcm5hbC9vcGVyYXRvcnMvY2F0Y2hFcnJvclwiKTtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcImNhdGNoRXJyb3JcIiwgeyBlbnVtZXJhYmxlOiB0cnVlLCBnZXQ6IGZ1bmN0aW9uICgpIHsgcmV0dXJuIGNhdGNoRXJyb3JfMS5jYXRjaEVycm9yOyB9IH0pO1xudmFyIGNvbWJpbmVBbGxfMSA9IHJlcXVpcmUoXCIuL2ludGVybmFsL29wZXJhdG9ycy9jb21iaW5lQWxsXCIpO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiY29tYmluZUFsbFwiLCB7IGVudW1lcmFibGU6IHRydWUsIGdldDogZnVuY3Rpb24gKCkgeyByZXR1cm4gY29tYmluZUFsbF8xLmNvbWJpbmVBbGw7IH0gfSk7XG52YXIgY29tYmluZUxhdGVzdEFsbF8xID0gcmVxdWlyZShcIi4vaW50ZXJuYWwvb3BlcmF0b3JzL2NvbWJpbmVMYXRlc3RBbGxcIik7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJjb21iaW5lTGF0ZXN0QWxsXCIsIHsgZW51bWVyYWJsZTogdHJ1ZSwgZ2V0OiBmdW5jdGlvbiAoKSB7IHJldHVybiBjb21iaW5lTGF0ZXN0QWxsXzEuY29tYmluZUxhdGVzdEFsbDsgfSB9KTtcbnZhciBjb21iaW5lTGF0ZXN0V2l0aF8xID0gcmVxdWlyZShcIi4vaW50ZXJuYWwvb3BlcmF0b3JzL2NvbWJpbmVMYXRlc3RXaXRoXCIpO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiY29tYmluZUxhdGVzdFdpdGhcIiwgeyBlbnVtZXJhYmxlOiB0cnVlLCBnZXQ6IGZ1bmN0aW9uICgpIHsgcmV0dXJuIGNvbWJpbmVMYXRlc3RXaXRoXzEuY29tYmluZUxhdGVzdFdpdGg7IH0gfSk7XG52YXIgY29uY2F0QWxsXzEgPSByZXF1aXJlKFwiLi9pbnRlcm5hbC9vcGVyYXRvcnMvY29uY2F0QWxsXCIpO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiY29uY2F0QWxsXCIsIHsgZW51bWVyYWJsZTogdHJ1ZSwgZ2V0OiBmdW5jdGlvbiAoKSB7IHJldHVybiBjb25jYXRBbGxfMS5jb25jYXRBbGw7IH0gfSk7XG52YXIgY29uY2F0TWFwXzEgPSByZXF1aXJlKFwiLi9pbnRlcm5hbC9vcGVyYXRvcnMvY29uY2F0TWFwXCIpO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiY29uY2F0TWFwXCIsIHsgZW51bWVyYWJsZTogdHJ1ZSwgZ2V0OiBmdW5jdGlvbiAoKSB7IHJldHVybiBjb25jYXRNYXBfMS5jb25jYXRNYXA7IH0gfSk7XG52YXIgY29uY2F0TWFwVG9fMSA9IHJlcXVpcmUoXCIuL2ludGVybmFsL29wZXJhdG9ycy9jb25jYXRNYXBUb1wiKTtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcImNvbmNhdE1hcFRvXCIsIHsgZW51bWVyYWJsZTogdHJ1ZSwgZ2V0OiBmdW5jdGlvbiAoKSB7IHJldHVybiBjb25jYXRNYXBUb18xLmNvbmNhdE1hcFRvOyB9IH0pO1xudmFyIGNvbmNhdFdpdGhfMSA9IHJlcXVpcmUoXCIuL2ludGVybmFsL29wZXJhdG9ycy9jb25jYXRXaXRoXCIpO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiY29uY2F0V2l0aFwiLCB7IGVudW1lcmFibGU6IHRydWUsIGdldDogZnVuY3Rpb24gKCkgeyByZXR1cm4gY29uY2F0V2l0aF8xLmNvbmNhdFdpdGg7IH0gfSk7XG52YXIgY29ubmVjdF8xID0gcmVxdWlyZShcIi4vaW50ZXJuYWwvb3BlcmF0b3JzL2Nvbm5lY3RcIik7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJjb25uZWN0XCIsIHsgZW51bWVyYWJsZTogdHJ1ZSwgZ2V0OiBmdW5jdGlvbiAoKSB7IHJldHVybiBjb25uZWN0XzEuY29ubmVjdDsgfSB9KTtcbnZhciBjb3VudF8xID0gcmVxdWlyZShcIi4vaW50ZXJuYWwvb3BlcmF0b3JzL2NvdW50XCIpO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiY291bnRcIiwgeyBlbnVtZXJhYmxlOiB0cnVlLCBnZXQ6IGZ1bmN0aW9uICgpIHsgcmV0dXJuIGNvdW50XzEuY291bnQ7IH0gfSk7XG52YXIgZGVib3VuY2VfMSA9IHJlcXVpcmUoXCIuL2ludGVybmFsL29wZXJhdG9ycy9kZWJvdW5jZVwiKTtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcImRlYm91bmNlXCIsIHsgZW51bWVyYWJsZTogdHJ1ZSwgZ2V0OiBmdW5jdGlvbiAoKSB7IHJldHVybiBkZWJvdW5jZV8xLmRlYm91bmNlOyB9IH0pO1xudmFyIGRlYm91bmNlVGltZV8xID0gcmVxdWlyZShcIi4vaW50ZXJuYWwvb3BlcmF0b3JzL2RlYm91bmNlVGltZVwiKTtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcImRlYm91bmNlVGltZVwiLCB7IGVudW1lcmFibGU6IHRydWUsIGdldDogZnVuY3Rpb24gKCkgeyByZXR1cm4gZGVib3VuY2VUaW1lXzEuZGVib3VuY2VUaW1lOyB9IH0pO1xudmFyIGRlZmF1bHRJZkVtcHR5XzEgPSByZXF1aXJlKFwiLi9pbnRlcm5hbC9vcGVyYXRvcnMvZGVmYXVsdElmRW1wdHlcIik7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJkZWZhdWx0SWZFbXB0eVwiLCB7IGVudW1lcmFibGU6IHRydWUsIGdldDogZnVuY3Rpb24gKCkgeyByZXR1cm4gZGVmYXVsdElmRW1wdHlfMS5kZWZhdWx0SWZFbXB0eTsgfSB9KTtcbnZhciBkZWxheV8xID0gcmVxdWlyZShcIi4vaW50ZXJuYWwvb3BlcmF0b3JzL2RlbGF5XCIpO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiZGVsYXlcIiwgeyBlbnVtZXJhYmxlOiB0cnVlLCBnZXQ6IGZ1bmN0aW9uICgpIHsgcmV0dXJuIGRlbGF5XzEuZGVsYXk7IH0gfSk7XG52YXIgZGVsYXlXaGVuXzEgPSByZXF1aXJlKFwiLi9pbnRlcm5hbC9vcGVyYXRvcnMvZGVsYXlXaGVuXCIpO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiZGVsYXlXaGVuXCIsIHsgZW51bWVyYWJsZTogdHJ1ZSwgZ2V0OiBmdW5jdGlvbiAoKSB7IHJldHVybiBkZWxheVdoZW5fMS5kZWxheVdoZW47IH0gfSk7XG52YXIgZGVtYXRlcmlhbGl6ZV8xID0gcmVxdWlyZShcIi4vaW50ZXJuYWwvb3BlcmF0b3JzL2RlbWF0ZXJpYWxpemVcIik7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJkZW1hdGVyaWFsaXplXCIsIHsgZW51bWVyYWJsZTogdHJ1ZSwgZ2V0OiBmdW5jdGlvbiAoKSB7IHJldHVybiBkZW1hdGVyaWFsaXplXzEuZGVtYXRlcmlhbGl6ZTsgfSB9KTtcbnZhciBkaXN0aW5jdF8xID0gcmVxdWlyZShcIi4vaW50ZXJuYWwvb3BlcmF0b3JzL2Rpc3RpbmN0XCIpO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiZGlzdGluY3RcIiwgeyBlbnVtZXJhYmxlOiB0cnVlLCBnZXQ6IGZ1bmN0aW9uICgpIHsgcmV0dXJuIGRpc3RpbmN0XzEuZGlzdGluY3Q7IH0gfSk7XG52YXIgZGlzdGluY3RVbnRpbENoYW5nZWRfMSA9IHJlcXVpcmUoXCIuL2ludGVybmFsL29wZXJhdG9ycy9kaXN0aW5jdFVudGlsQ2hhbmdlZFwiKTtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcImRpc3RpbmN0VW50aWxDaGFuZ2VkXCIsIHsgZW51bWVyYWJsZTogdHJ1ZSwgZ2V0OiBmdW5jdGlvbiAoKSB7IHJldHVybiBkaXN0aW5jdFVudGlsQ2hhbmdlZF8xLmRpc3RpbmN0VW50aWxDaGFuZ2VkOyB9IH0pO1xudmFyIGRpc3RpbmN0VW50aWxLZXlDaGFuZ2VkXzEgPSByZXF1aXJlKFwiLi9pbnRlcm5hbC9vcGVyYXRvcnMvZGlzdGluY3RVbnRpbEtleUNoYW5nZWRcIik7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJkaXN0aW5jdFVudGlsS2V5Q2hhbmdlZFwiLCB7IGVudW1lcmFibGU6IHRydWUsIGdldDogZnVuY3Rpb24gKCkgeyByZXR1cm4gZGlzdGluY3RVbnRpbEtleUNoYW5nZWRfMS5kaXN0aW5jdFVudGlsS2V5Q2hhbmdlZDsgfSB9KTtcbnZhciBlbGVtZW50QXRfMSA9IHJlcXVpcmUoXCIuL2ludGVybmFsL29wZXJhdG9ycy9lbGVtZW50QXRcIik7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJlbGVtZW50QXRcIiwgeyBlbnVtZXJhYmxlOiB0cnVlLCBnZXQ6IGZ1bmN0aW9uICgpIHsgcmV0dXJuIGVsZW1lbnRBdF8xLmVsZW1lbnRBdDsgfSB9KTtcbnZhciBlbmRXaXRoXzEgPSByZXF1aXJlKFwiLi9pbnRlcm5hbC9vcGVyYXRvcnMvZW5kV2l0aFwiKTtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcImVuZFdpdGhcIiwgeyBlbnVtZXJhYmxlOiB0cnVlLCBnZXQ6IGZ1bmN0aW9uICgpIHsgcmV0dXJuIGVuZFdpdGhfMS5lbmRXaXRoOyB9IH0pO1xudmFyIGV2ZXJ5XzEgPSByZXF1aXJlKFwiLi9pbnRlcm5hbC9vcGVyYXRvcnMvZXZlcnlcIik7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJldmVyeVwiLCB7IGVudW1lcmFibGU6IHRydWUsIGdldDogZnVuY3Rpb24gKCkgeyByZXR1cm4gZXZlcnlfMS5ldmVyeTsgfSB9KTtcbnZhciBleGhhdXN0XzEgPSByZXF1aXJlKFwiLi9pbnRlcm5hbC9vcGVyYXRvcnMvZXhoYXVzdFwiKTtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcImV4aGF1c3RcIiwgeyBlbnVtZXJhYmxlOiB0cnVlLCBnZXQ6IGZ1bmN0aW9uICgpIHsgcmV0dXJuIGV4aGF1c3RfMS5leGhhdXN0OyB9IH0pO1xudmFyIGV4aGF1c3RBbGxfMSA9IHJlcXVpcmUoXCIuL2ludGVybmFsL29wZXJhdG9ycy9leGhhdXN0QWxsXCIpO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiZXhoYXVzdEFsbFwiLCB7IGVudW1lcmFibGU6IHRydWUsIGdldDogZnVuY3Rpb24gKCkgeyByZXR1cm4gZXhoYXVzdEFsbF8xLmV4aGF1c3RBbGw7IH0gfSk7XG52YXIgZXhoYXVzdE1hcF8xID0gcmVxdWlyZShcIi4vaW50ZXJuYWwvb3BlcmF0b3JzL2V4aGF1c3RNYXBcIik7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJleGhhdXN0TWFwXCIsIHsgZW51bWVyYWJsZTogdHJ1ZSwgZ2V0OiBmdW5jdGlvbiAoKSB7IHJldHVybiBleGhhdXN0TWFwXzEuZXhoYXVzdE1hcDsgfSB9KTtcbnZhciBleHBhbmRfMSA9IHJlcXVpcmUoXCIuL2ludGVybmFsL29wZXJhdG9ycy9leHBhbmRcIik7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJleHBhbmRcIiwgeyBlbnVtZXJhYmxlOiB0cnVlLCBnZXQ6IGZ1bmN0aW9uICgpIHsgcmV0dXJuIGV4cGFuZF8xLmV4cGFuZDsgfSB9KTtcbnZhciBmaWx0ZXJfMSA9IHJlcXVpcmUoXCIuL2ludGVybmFsL29wZXJhdG9ycy9maWx0ZXJcIik7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJmaWx0ZXJcIiwgeyBlbnVtZXJhYmxlOiB0cnVlLCBnZXQ6IGZ1bmN0aW9uICgpIHsgcmV0dXJuIGZpbHRlcl8xLmZpbHRlcjsgfSB9KTtcbnZhciBmaW5hbGl6ZV8xID0gcmVxdWlyZShcIi4vaW50ZXJuYWwvb3BlcmF0b3JzL2ZpbmFsaXplXCIpO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiZmluYWxpemVcIiwgeyBlbnVtZXJhYmxlOiB0cnVlLCBnZXQ6IGZ1bmN0aW9uICgpIHsgcmV0dXJuIGZpbmFsaXplXzEuZmluYWxpemU7IH0gfSk7XG52YXIgZmluZF8xID0gcmVxdWlyZShcIi4vaW50ZXJuYWwvb3BlcmF0b3JzL2ZpbmRcIik7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJmaW5kXCIsIHsgZW51bWVyYWJsZTogdHJ1ZSwgZ2V0OiBmdW5jdGlvbiAoKSB7IHJldHVybiBmaW5kXzEuZmluZDsgfSB9KTtcbnZhciBmaW5kSW5kZXhfMSA9IHJlcXVpcmUoXCIuL2ludGVybmFsL29wZXJhdG9ycy9maW5kSW5kZXhcIik7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJmaW5kSW5kZXhcIiwgeyBlbnVtZXJhYmxlOiB0cnVlLCBnZXQ6IGZ1bmN0aW9uICgpIHsgcmV0dXJuIGZpbmRJbmRleF8xLmZpbmRJbmRleDsgfSB9KTtcbnZhciBmaXJzdF8xID0gcmVxdWlyZShcIi4vaW50ZXJuYWwvb3BlcmF0b3JzL2ZpcnN0XCIpO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiZmlyc3RcIiwgeyBlbnVtZXJhYmxlOiB0cnVlLCBnZXQ6IGZ1bmN0aW9uICgpIHsgcmV0dXJuIGZpcnN0XzEuZmlyc3Q7IH0gfSk7XG52YXIgZ3JvdXBCeV8xID0gcmVxdWlyZShcIi4vaW50ZXJuYWwvb3BlcmF0b3JzL2dyb3VwQnlcIik7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJncm91cEJ5XCIsIHsgZW51bWVyYWJsZTogdHJ1ZSwgZ2V0OiBmdW5jdGlvbiAoKSB7IHJldHVybiBncm91cEJ5XzEuZ3JvdXBCeTsgfSB9KTtcbnZhciBpZ25vcmVFbGVtZW50c18xID0gcmVxdWlyZShcIi4vaW50ZXJuYWwvb3BlcmF0b3JzL2lnbm9yZUVsZW1lbnRzXCIpO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiaWdub3JlRWxlbWVudHNcIiwgeyBlbnVtZXJhYmxlOiB0cnVlLCBnZXQ6IGZ1bmN0aW9uICgpIHsgcmV0dXJuIGlnbm9yZUVsZW1lbnRzXzEuaWdub3JlRWxlbWVudHM7IH0gfSk7XG52YXIgaXNFbXB0eV8xID0gcmVxdWlyZShcIi4vaW50ZXJuYWwvb3BlcmF0b3JzL2lzRW1wdHlcIik7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJpc0VtcHR5XCIsIHsgZW51bWVyYWJsZTogdHJ1ZSwgZ2V0OiBmdW5jdGlvbiAoKSB7IHJldHVybiBpc0VtcHR5XzEuaXNFbXB0eTsgfSB9KTtcbnZhciBsYXN0XzEgPSByZXF1aXJlKFwiLi9pbnRlcm5hbC9vcGVyYXRvcnMvbGFzdFwiKTtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcImxhc3RcIiwgeyBlbnVtZXJhYmxlOiB0cnVlLCBnZXQ6IGZ1bmN0aW9uICgpIHsgcmV0dXJuIGxhc3RfMS5sYXN0OyB9IH0pO1xudmFyIG1hcF8xID0gcmVxdWlyZShcIi4vaW50ZXJuYWwvb3BlcmF0b3JzL21hcFwiKTtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIm1hcFwiLCB7IGVudW1lcmFibGU6IHRydWUsIGdldDogZnVuY3Rpb24gKCkgeyByZXR1cm4gbWFwXzEubWFwOyB9IH0pO1xudmFyIG1hcFRvXzEgPSByZXF1aXJlKFwiLi9pbnRlcm5hbC9vcGVyYXRvcnMvbWFwVG9cIik7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJtYXBUb1wiLCB7IGVudW1lcmFibGU6IHRydWUsIGdldDogZnVuY3Rpb24gKCkgeyByZXR1cm4gbWFwVG9fMS5tYXBUbzsgfSB9KTtcbnZhciBtYXRlcmlhbGl6ZV8xID0gcmVxdWlyZShcIi4vaW50ZXJuYWwvb3BlcmF0b3JzL21hdGVyaWFsaXplXCIpO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwibWF0ZXJpYWxpemVcIiwgeyBlbnVtZXJhYmxlOiB0cnVlLCBnZXQ6IGZ1bmN0aW9uICgpIHsgcmV0dXJuIG1hdGVyaWFsaXplXzEubWF0ZXJpYWxpemU7IH0gfSk7XG52YXIgbWF4XzEgPSByZXF1aXJlKFwiLi9pbnRlcm5hbC9vcGVyYXRvcnMvbWF4XCIpO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwibWF4XCIsIHsgZW51bWVyYWJsZTogdHJ1ZSwgZ2V0OiBmdW5jdGlvbiAoKSB7IHJldHVybiBtYXhfMS5tYXg7IH0gfSk7XG52YXIgbWVyZ2VBbGxfMSA9IHJlcXVpcmUoXCIuL2ludGVybmFsL29wZXJhdG9ycy9tZXJnZUFsbFwiKTtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIm1lcmdlQWxsXCIsIHsgZW51bWVyYWJsZTogdHJ1ZSwgZ2V0OiBmdW5jdGlvbiAoKSB7IHJldHVybiBtZXJnZUFsbF8xLm1lcmdlQWxsOyB9IH0pO1xudmFyIGZsYXRNYXBfMSA9IHJlcXVpcmUoXCIuL2ludGVybmFsL29wZXJhdG9ycy9mbGF0TWFwXCIpO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiZmxhdE1hcFwiLCB7IGVudW1lcmFibGU6IHRydWUsIGdldDogZnVuY3Rpb24gKCkgeyByZXR1cm4gZmxhdE1hcF8xLmZsYXRNYXA7IH0gfSk7XG52YXIgbWVyZ2VNYXBfMSA9IHJlcXVpcmUoXCIuL2ludGVybmFsL29wZXJhdG9ycy9tZXJnZU1hcFwiKTtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIm1lcmdlTWFwXCIsIHsgZW51bWVyYWJsZTogdHJ1ZSwgZ2V0OiBmdW5jdGlvbiAoKSB7IHJldHVybiBtZXJnZU1hcF8xLm1lcmdlTWFwOyB9IH0pO1xudmFyIG1lcmdlTWFwVG9fMSA9IHJlcXVpcmUoXCIuL2ludGVybmFsL29wZXJhdG9ycy9tZXJnZU1hcFRvXCIpO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwibWVyZ2VNYXBUb1wiLCB7IGVudW1lcmFibGU6IHRydWUsIGdldDogZnVuY3Rpb24gKCkgeyByZXR1cm4gbWVyZ2VNYXBUb18xLm1lcmdlTWFwVG87IH0gfSk7XG52YXIgbWVyZ2VTY2FuXzEgPSByZXF1aXJlKFwiLi9pbnRlcm5hbC9vcGVyYXRvcnMvbWVyZ2VTY2FuXCIpO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwibWVyZ2VTY2FuXCIsIHsgZW51bWVyYWJsZTogdHJ1ZSwgZ2V0OiBmdW5jdGlvbiAoKSB7IHJldHVybiBtZXJnZVNjYW5fMS5tZXJnZVNjYW47IH0gfSk7XG52YXIgbWVyZ2VXaXRoXzEgPSByZXF1aXJlKFwiLi9pbnRlcm5hbC9vcGVyYXRvcnMvbWVyZ2VXaXRoXCIpO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwibWVyZ2VXaXRoXCIsIHsgZW51bWVyYWJsZTogdHJ1ZSwgZ2V0OiBmdW5jdGlvbiAoKSB7IHJldHVybiBtZXJnZVdpdGhfMS5tZXJnZVdpdGg7IH0gfSk7XG52YXIgbWluXzEgPSByZXF1aXJlKFwiLi9pbnRlcm5hbC9vcGVyYXRvcnMvbWluXCIpO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwibWluXCIsIHsgZW51bWVyYWJsZTogdHJ1ZSwgZ2V0OiBmdW5jdGlvbiAoKSB7IHJldHVybiBtaW5fMS5taW47IH0gfSk7XG52YXIgbXVsdGljYXN0XzEgPSByZXF1aXJlKFwiLi9pbnRlcm5hbC9vcGVyYXRvcnMvbXVsdGljYXN0XCIpO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwibXVsdGljYXN0XCIsIHsgZW51bWVyYWJsZTogdHJ1ZSwgZ2V0OiBmdW5jdGlvbiAoKSB7IHJldHVybiBtdWx0aWNhc3RfMS5tdWx0aWNhc3Q7IH0gfSk7XG52YXIgb2JzZXJ2ZU9uXzEgPSByZXF1aXJlKFwiLi9pbnRlcm5hbC9vcGVyYXRvcnMvb2JzZXJ2ZU9uXCIpO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwib2JzZXJ2ZU9uXCIsIHsgZW51bWVyYWJsZTogdHJ1ZSwgZ2V0OiBmdW5jdGlvbiAoKSB7IHJldHVybiBvYnNlcnZlT25fMS5vYnNlcnZlT247IH0gfSk7XG52YXIgb25FcnJvclJlc3VtZU5leHRXaXRoXzEgPSByZXF1aXJlKFwiLi9pbnRlcm5hbC9vcGVyYXRvcnMvb25FcnJvclJlc3VtZU5leHRXaXRoXCIpO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwib25FcnJvclJlc3VtZU5leHRXaXRoXCIsIHsgZW51bWVyYWJsZTogdHJ1ZSwgZ2V0OiBmdW5jdGlvbiAoKSB7IHJldHVybiBvbkVycm9yUmVzdW1lTmV4dFdpdGhfMS5vbkVycm9yUmVzdW1lTmV4dFdpdGg7IH0gfSk7XG52YXIgcGFpcndpc2VfMSA9IHJlcXVpcmUoXCIuL2ludGVybmFsL29wZXJhdG9ycy9wYWlyd2lzZVwiKTtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcInBhaXJ3aXNlXCIsIHsgZW51bWVyYWJsZTogdHJ1ZSwgZ2V0OiBmdW5jdGlvbiAoKSB7IHJldHVybiBwYWlyd2lzZV8xLnBhaXJ3aXNlOyB9IH0pO1xudmFyIHBsdWNrXzEgPSByZXF1aXJlKFwiLi9pbnRlcm5hbC9vcGVyYXRvcnMvcGx1Y2tcIik7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJwbHVja1wiLCB7IGVudW1lcmFibGU6IHRydWUsIGdldDogZnVuY3Rpb24gKCkgeyByZXR1cm4gcGx1Y2tfMS5wbHVjazsgfSB9KTtcbnZhciBwdWJsaXNoXzEgPSByZXF1aXJlKFwiLi9pbnRlcm5hbC9vcGVyYXRvcnMvcHVibGlzaFwiKTtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcInB1Ymxpc2hcIiwgeyBlbnVtZXJhYmxlOiB0cnVlLCBnZXQ6IGZ1bmN0aW9uICgpIHsgcmV0dXJuIHB1Ymxpc2hfMS5wdWJsaXNoOyB9IH0pO1xudmFyIHB1Ymxpc2hCZWhhdmlvcl8xID0gcmVxdWlyZShcIi4vaW50ZXJuYWwvb3BlcmF0b3JzL3B1Ymxpc2hCZWhhdmlvclwiKTtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcInB1Ymxpc2hCZWhhdmlvclwiLCB7IGVudW1lcmFibGU6IHRydWUsIGdldDogZnVuY3Rpb24gKCkgeyByZXR1cm4gcHVibGlzaEJlaGF2aW9yXzEucHVibGlzaEJlaGF2aW9yOyB9IH0pO1xudmFyIHB1Ymxpc2hMYXN0XzEgPSByZXF1aXJlKFwiLi9pbnRlcm5hbC9vcGVyYXRvcnMvcHVibGlzaExhc3RcIik7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJwdWJsaXNoTGFzdFwiLCB7IGVudW1lcmFibGU6IHRydWUsIGdldDogZnVuY3Rpb24gKCkgeyByZXR1cm4gcHVibGlzaExhc3RfMS5wdWJsaXNoTGFzdDsgfSB9KTtcbnZhciBwdWJsaXNoUmVwbGF5XzEgPSByZXF1aXJlKFwiLi9pbnRlcm5hbC9vcGVyYXRvcnMvcHVibGlzaFJlcGxheVwiKTtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcInB1Ymxpc2hSZXBsYXlcIiwgeyBlbnVtZXJhYmxlOiB0cnVlLCBnZXQ6IGZ1bmN0aW9uICgpIHsgcmV0dXJuIHB1Ymxpc2hSZXBsYXlfMS5wdWJsaXNoUmVwbGF5OyB9IH0pO1xudmFyIHJhY2VXaXRoXzEgPSByZXF1aXJlKFwiLi9pbnRlcm5hbC9vcGVyYXRvcnMvcmFjZVdpdGhcIik7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJyYWNlV2l0aFwiLCB7IGVudW1lcmFibGU6IHRydWUsIGdldDogZnVuY3Rpb24gKCkgeyByZXR1cm4gcmFjZVdpdGhfMS5yYWNlV2l0aDsgfSB9KTtcbnZhciByZWR1Y2VfMSA9IHJlcXVpcmUoXCIuL2ludGVybmFsL29wZXJhdG9ycy9yZWR1Y2VcIik7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJyZWR1Y2VcIiwgeyBlbnVtZXJhYmxlOiB0cnVlLCBnZXQ6IGZ1bmN0aW9uICgpIHsgcmV0dXJuIHJlZHVjZV8xLnJlZHVjZTsgfSB9KTtcbnZhciByZXBlYXRfMSA9IHJlcXVpcmUoXCIuL2ludGVybmFsL29wZXJhdG9ycy9yZXBlYXRcIik7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJyZXBlYXRcIiwgeyBlbnVtZXJhYmxlOiB0cnVlLCBnZXQ6IGZ1bmN0aW9uICgpIHsgcmV0dXJuIHJlcGVhdF8xLnJlcGVhdDsgfSB9KTtcbnZhciByZXBlYXRXaGVuXzEgPSByZXF1aXJlKFwiLi9pbnRlcm5hbC9vcGVyYXRvcnMvcmVwZWF0V2hlblwiKTtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcInJlcGVhdFdoZW5cIiwgeyBlbnVtZXJhYmxlOiB0cnVlLCBnZXQ6IGZ1bmN0aW9uICgpIHsgcmV0dXJuIHJlcGVhdFdoZW5fMS5yZXBlYXRXaGVuOyB9IH0pO1xudmFyIHJldHJ5XzEgPSByZXF1aXJlKFwiLi9pbnRlcm5hbC9vcGVyYXRvcnMvcmV0cnlcIik7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJyZXRyeVwiLCB7IGVudW1lcmFibGU6IHRydWUsIGdldDogZnVuY3Rpb24gKCkgeyByZXR1cm4gcmV0cnlfMS5yZXRyeTsgfSB9KTtcbnZhciByZXRyeVdoZW5fMSA9IHJlcXVpcmUoXCIuL2ludGVybmFsL29wZXJhdG9ycy9yZXRyeVdoZW5cIik7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJyZXRyeVdoZW5cIiwgeyBlbnVtZXJhYmxlOiB0cnVlLCBnZXQ6IGZ1bmN0aW9uICgpIHsgcmV0dXJuIHJldHJ5V2hlbl8xLnJldHJ5V2hlbjsgfSB9KTtcbnZhciByZWZDb3VudF8xID0gcmVxdWlyZShcIi4vaW50ZXJuYWwvb3BlcmF0b3JzL3JlZkNvdW50XCIpO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwicmVmQ291bnRcIiwgeyBlbnVtZXJhYmxlOiB0cnVlLCBnZXQ6IGZ1bmN0aW9uICgpIHsgcmV0dXJuIHJlZkNvdW50XzEucmVmQ291bnQ7IH0gfSk7XG52YXIgc2FtcGxlXzEgPSByZXF1aXJlKFwiLi9pbnRlcm5hbC9vcGVyYXRvcnMvc2FtcGxlXCIpO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwic2FtcGxlXCIsIHsgZW51bWVyYWJsZTogdHJ1ZSwgZ2V0OiBmdW5jdGlvbiAoKSB7IHJldHVybiBzYW1wbGVfMS5zYW1wbGU7IH0gfSk7XG52YXIgc2FtcGxlVGltZV8xID0gcmVxdWlyZShcIi4vaW50ZXJuYWwvb3BlcmF0b3JzL3NhbXBsZVRpbWVcIik7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJzYW1wbGVUaW1lXCIsIHsgZW51bWVyYWJsZTogdHJ1ZSwgZ2V0OiBmdW5jdGlvbiAoKSB7IHJldHVybiBzYW1wbGVUaW1lXzEuc2FtcGxlVGltZTsgfSB9KTtcbnZhciBzY2FuXzEgPSByZXF1aXJlKFwiLi9pbnRlcm5hbC9vcGVyYXRvcnMvc2NhblwiKTtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcInNjYW5cIiwgeyBlbnVtZXJhYmxlOiB0cnVlLCBnZXQ6IGZ1bmN0aW9uICgpIHsgcmV0dXJuIHNjYW5fMS5zY2FuOyB9IH0pO1xudmFyIHNlcXVlbmNlRXF1YWxfMSA9IHJlcXVpcmUoXCIuL2ludGVybmFsL29wZXJhdG9ycy9zZXF1ZW5jZUVxdWFsXCIpO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwic2VxdWVuY2VFcXVhbFwiLCB7IGVudW1lcmFibGU6IHRydWUsIGdldDogZnVuY3Rpb24gKCkgeyByZXR1cm4gc2VxdWVuY2VFcXVhbF8xLnNlcXVlbmNlRXF1YWw7IH0gfSk7XG52YXIgc2hhcmVfMSA9IHJlcXVpcmUoXCIuL2ludGVybmFsL29wZXJhdG9ycy9zaGFyZVwiKTtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcInNoYXJlXCIsIHsgZW51bWVyYWJsZTogdHJ1ZSwgZ2V0OiBmdW5jdGlvbiAoKSB7IHJldHVybiBzaGFyZV8xLnNoYXJlOyB9IH0pO1xudmFyIHNoYXJlUmVwbGF5XzEgPSByZXF1aXJlKFwiLi9pbnRlcm5hbC9vcGVyYXRvcnMvc2hhcmVSZXBsYXlcIik7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJzaGFyZVJlcGxheVwiLCB7IGVudW1lcmFibGU6IHRydWUsIGdldDogZnVuY3Rpb24gKCkgeyByZXR1cm4gc2hhcmVSZXBsYXlfMS5zaGFyZVJlcGxheTsgfSB9KTtcbnZhciBzaW5nbGVfMSA9IHJlcXVpcmUoXCIuL2ludGVybmFsL29wZXJhdG9ycy9zaW5nbGVcIik7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJzaW5nbGVcIiwgeyBlbnVtZXJhYmxlOiB0cnVlLCBnZXQ6IGZ1bmN0aW9uICgpIHsgcmV0dXJuIHNpbmdsZV8xLnNpbmdsZTsgfSB9KTtcbnZhciBza2lwXzEgPSByZXF1aXJlKFwiLi9pbnRlcm5hbC9vcGVyYXRvcnMvc2tpcFwiKTtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcInNraXBcIiwgeyBlbnVtZXJhYmxlOiB0cnVlLCBnZXQ6IGZ1bmN0aW9uICgpIHsgcmV0dXJuIHNraXBfMS5za2lwOyB9IH0pO1xudmFyIHNraXBMYXN0XzEgPSByZXF1aXJlKFwiLi9pbnRlcm5hbC9vcGVyYXRvcnMvc2tpcExhc3RcIik7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJza2lwTGFzdFwiLCB7IGVudW1lcmFibGU6IHRydWUsIGdldDogZnVuY3Rpb24gKCkgeyByZXR1cm4gc2tpcExhc3RfMS5za2lwTGFzdDsgfSB9KTtcbnZhciBza2lwVW50aWxfMSA9IHJlcXVpcmUoXCIuL2ludGVybmFsL29wZXJhdG9ycy9za2lwVW50aWxcIik7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJza2lwVW50aWxcIiwgeyBlbnVtZXJhYmxlOiB0cnVlLCBnZXQ6IGZ1bmN0aW9uICgpIHsgcmV0dXJuIHNraXBVbnRpbF8xLnNraXBVbnRpbDsgfSB9KTtcbnZhciBza2lwV2hpbGVfMSA9IHJlcXVpcmUoXCIuL2ludGVybmFsL29wZXJhdG9ycy9za2lwV2hpbGVcIik7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJza2lwV2hpbGVcIiwgeyBlbnVtZXJhYmxlOiB0cnVlLCBnZXQ6IGZ1bmN0aW9uICgpIHsgcmV0dXJuIHNraXBXaGlsZV8xLnNraXBXaGlsZTsgfSB9KTtcbnZhciBzdGFydFdpdGhfMSA9IHJlcXVpcmUoXCIuL2ludGVybmFsL29wZXJhdG9ycy9zdGFydFdpdGhcIik7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJzdGFydFdpdGhcIiwgeyBlbnVtZXJhYmxlOiB0cnVlLCBnZXQ6IGZ1bmN0aW9uICgpIHsgcmV0dXJuIHN0YXJ0V2l0aF8xLnN0YXJ0V2l0aDsgfSB9KTtcbnZhciBzdWJzY3JpYmVPbl8xID0gcmVxdWlyZShcIi4vaW50ZXJuYWwvb3BlcmF0b3JzL3N1YnNjcmliZU9uXCIpO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwic3Vic2NyaWJlT25cIiwgeyBlbnVtZXJhYmxlOiB0cnVlLCBnZXQ6IGZ1bmN0aW9uICgpIHsgcmV0dXJuIHN1YnNjcmliZU9uXzEuc3Vic2NyaWJlT247IH0gfSk7XG52YXIgc3dpdGNoQWxsXzEgPSByZXF1aXJlKFwiLi9pbnRlcm5hbC9vcGVyYXRvcnMvc3dpdGNoQWxsXCIpO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwic3dpdGNoQWxsXCIsIHsgZW51bWVyYWJsZTogdHJ1ZSwgZ2V0OiBmdW5jdGlvbiAoKSB7IHJldHVybiBzd2l0Y2hBbGxfMS5zd2l0Y2hBbGw7IH0gfSk7XG52YXIgc3dpdGNoTWFwXzEgPSByZXF1aXJlKFwiLi9pbnRlcm5hbC9vcGVyYXRvcnMvc3dpdGNoTWFwXCIpO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwic3dpdGNoTWFwXCIsIHsgZW51bWVyYWJsZTogdHJ1ZSwgZ2V0OiBmdW5jdGlvbiAoKSB7IHJldHVybiBzd2l0Y2hNYXBfMS5zd2l0Y2hNYXA7IH0gfSk7XG52YXIgc3dpdGNoTWFwVG9fMSA9IHJlcXVpcmUoXCIuL2ludGVybmFsL29wZXJhdG9ycy9zd2l0Y2hNYXBUb1wiKTtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcInN3aXRjaE1hcFRvXCIsIHsgZW51bWVyYWJsZTogdHJ1ZSwgZ2V0OiBmdW5jdGlvbiAoKSB7IHJldHVybiBzd2l0Y2hNYXBUb18xLnN3aXRjaE1hcFRvOyB9IH0pO1xudmFyIHN3aXRjaFNjYW5fMSA9IHJlcXVpcmUoXCIuL2ludGVybmFsL29wZXJhdG9ycy9zd2l0Y2hTY2FuXCIpO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwic3dpdGNoU2NhblwiLCB7IGVudW1lcmFibGU6IHRydWUsIGdldDogZnVuY3Rpb24gKCkgeyByZXR1cm4gc3dpdGNoU2Nhbl8xLnN3aXRjaFNjYW47IH0gfSk7XG52YXIgdGFrZV8xID0gcmVxdWlyZShcIi4vaW50ZXJuYWwvb3BlcmF0b3JzL3Rha2VcIik7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJ0YWtlXCIsIHsgZW51bWVyYWJsZTogdHJ1ZSwgZ2V0OiBmdW5jdGlvbiAoKSB7IHJldHVybiB0YWtlXzEudGFrZTsgfSB9KTtcbnZhciB0YWtlTGFzdF8xID0gcmVxdWlyZShcIi4vaW50ZXJuYWwvb3BlcmF0b3JzL3Rha2VMYXN0XCIpO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwidGFrZUxhc3RcIiwgeyBlbnVtZXJhYmxlOiB0cnVlLCBnZXQ6IGZ1bmN0aW9uICgpIHsgcmV0dXJuIHRha2VMYXN0XzEudGFrZUxhc3Q7IH0gfSk7XG52YXIgdGFrZVVudGlsXzEgPSByZXF1aXJlKFwiLi9pbnRlcm5hbC9vcGVyYXRvcnMvdGFrZVVudGlsXCIpO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwidGFrZVVudGlsXCIsIHsgZW51bWVyYWJsZTogdHJ1ZSwgZ2V0OiBmdW5jdGlvbiAoKSB7IHJldHVybiB0YWtlVW50aWxfMS50YWtlVW50aWw7IH0gfSk7XG52YXIgdGFrZVdoaWxlXzEgPSByZXF1aXJlKFwiLi9pbnRlcm5hbC9vcGVyYXRvcnMvdGFrZVdoaWxlXCIpO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwidGFrZVdoaWxlXCIsIHsgZW51bWVyYWJsZTogdHJ1ZSwgZ2V0OiBmdW5jdGlvbiAoKSB7IHJldHVybiB0YWtlV2hpbGVfMS50YWtlV2hpbGU7IH0gfSk7XG52YXIgdGFwXzEgPSByZXF1aXJlKFwiLi9pbnRlcm5hbC9vcGVyYXRvcnMvdGFwXCIpO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwidGFwXCIsIHsgZW51bWVyYWJsZTogdHJ1ZSwgZ2V0OiBmdW5jdGlvbiAoKSB7IHJldHVybiB0YXBfMS50YXA7IH0gfSk7XG52YXIgdGhyb3R0bGVfMSA9IHJlcXVpcmUoXCIuL2ludGVybmFsL29wZXJhdG9ycy90aHJvdHRsZVwiKTtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcInRocm90dGxlXCIsIHsgZW51bWVyYWJsZTogdHJ1ZSwgZ2V0OiBmdW5jdGlvbiAoKSB7IHJldHVybiB0aHJvdHRsZV8xLnRocm90dGxlOyB9IH0pO1xudmFyIHRocm90dGxlVGltZV8xID0gcmVxdWlyZShcIi4vaW50ZXJuYWwvb3BlcmF0b3JzL3Rocm90dGxlVGltZVwiKTtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcInRocm90dGxlVGltZVwiLCB7IGVudW1lcmFibGU6IHRydWUsIGdldDogZnVuY3Rpb24gKCkgeyByZXR1cm4gdGhyb3R0bGVUaW1lXzEudGhyb3R0bGVUaW1lOyB9IH0pO1xudmFyIHRocm93SWZFbXB0eV8xID0gcmVxdWlyZShcIi4vaW50ZXJuYWwvb3BlcmF0b3JzL3Rocm93SWZFbXB0eVwiKTtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcInRocm93SWZFbXB0eVwiLCB7IGVudW1lcmFibGU6IHRydWUsIGdldDogZnVuY3Rpb24gKCkgeyByZXR1cm4gdGhyb3dJZkVtcHR5XzEudGhyb3dJZkVtcHR5OyB9IH0pO1xudmFyIHRpbWVJbnRlcnZhbF8xID0gcmVxdWlyZShcIi4vaW50ZXJuYWwvb3BlcmF0b3JzL3RpbWVJbnRlcnZhbFwiKTtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcInRpbWVJbnRlcnZhbFwiLCB7IGVudW1lcmFibGU6IHRydWUsIGdldDogZnVuY3Rpb24gKCkgeyByZXR1cm4gdGltZUludGVydmFsXzEudGltZUludGVydmFsOyB9IH0pO1xudmFyIHRpbWVvdXRfMiA9IHJlcXVpcmUoXCIuL2ludGVybmFsL29wZXJhdG9ycy90aW1lb3V0XCIpO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwidGltZW91dFwiLCB7IGVudW1lcmFibGU6IHRydWUsIGdldDogZnVuY3Rpb24gKCkgeyByZXR1cm4gdGltZW91dF8yLnRpbWVvdXQ7IH0gfSk7XG52YXIgdGltZW91dFdpdGhfMSA9IHJlcXVpcmUoXCIuL2ludGVybmFsL29wZXJhdG9ycy90aW1lb3V0V2l0aFwiKTtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcInRpbWVvdXRXaXRoXCIsIHsgZW51bWVyYWJsZTogdHJ1ZSwgZ2V0OiBmdW5jdGlvbiAoKSB7IHJldHVybiB0aW1lb3V0V2l0aF8xLnRpbWVvdXRXaXRoOyB9IH0pO1xudmFyIHRpbWVzdGFtcF8xID0gcmVxdWlyZShcIi4vaW50ZXJuYWwvb3BlcmF0b3JzL3RpbWVzdGFtcFwiKTtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcInRpbWVzdGFtcFwiLCB7IGVudW1lcmFibGU6IHRydWUsIGdldDogZnVuY3Rpb24gKCkgeyByZXR1cm4gdGltZXN0YW1wXzEudGltZXN0YW1wOyB9IH0pO1xudmFyIHRvQXJyYXlfMSA9IHJlcXVpcmUoXCIuL2ludGVybmFsL29wZXJhdG9ycy90b0FycmF5XCIpO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwidG9BcnJheVwiLCB7IGVudW1lcmFibGU6IHRydWUsIGdldDogZnVuY3Rpb24gKCkgeyByZXR1cm4gdG9BcnJheV8xLnRvQXJyYXk7IH0gfSk7XG52YXIgd2luZG93XzEgPSByZXF1aXJlKFwiLi9pbnRlcm5hbC9vcGVyYXRvcnMvd2luZG93XCIpO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwid2luZG93XCIsIHsgZW51bWVyYWJsZTogdHJ1ZSwgZ2V0OiBmdW5jdGlvbiAoKSB7IHJldHVybiB3aW5kb3dfMS53aW5kb3c7IH0gfSk7XG52YXIgd2luZG93Q291bnRfMSA9IHJlcXVpcmUoXCIuL2ludGVybmFsL29wZXJhdG9ycy93aW5kb3dDb3VudFwiKTtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIndpbmRvd0NvdW50XCIsIHsgZW51bWVyYWJsZTogdHJ1ZSwgZ2V0OiBmdW5jdGlvbiAoKSB7IHJldHVybiB3aW5kb3dDb3VudF8xLndpbmRvd0NvdW50OyB9IH0pO1xudmFyIHdpbmRvd1RpbWVfMSA9IHJlcXVpcmUoXCIuL2ludGVybmFsL29wZXJhdG9ycy93aW5kb3dUaW1lXCIpO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwid2luZG93VGltZVwiLCB7IGVudW1lcmFibGU6IHRydWUsIGdldDogZnVuY3Rpb24gKCkgeyByZXR1cm4gd2luZG93VGltZV8xLndpbmRvd1RpbWU7IH0gfSk7XG52YXIgd2luZG93VG9nZ2xlXzEgPSByZXF1aXJlKFwiLi9pbnRlcm5hbC9vcGVyYXRvcnMvd2luZG93VG9nZ2xlXCIpO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwid2luZG93VG9nZ2xlXCIsIHsgZW51bWVyYWJsZTogdHJ1ZSwgZ2V0OiBmdW5jdGlvbiAoKSB7IHJldHVybiB3aW5kb3dUb2dnbGVfMS53aW5kb3dUb2dnbGU7IH0gfSk7XG52YXIgd2luZG93V2hlbl8xID0gcmVxdWlyZShcIi4vaW50ZXJuYWwvb3BlcmF0b3JzL3dpbmRvd1doZW5cIik7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJ3aW5kb3dXaGVuXCIsIHsgZW51bWVyYWJsZTogdHJ1ZSwgZ2V0OiBmdW5jdGlvbiAoKSB7IHJldHVybiB3aW5kb3dXaGVuXzEud2luZG93V2hlbjsgfSB9KTtcbnZhciB3aXRoTGF0ZXN0RnJvbV8xID0gcmVxdWlyZShcIi4vaW50ZXJuYWwvb3BlcmF0b3JzL3dpdGhMYXRlc3RGcm9tXCIpO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwid2l0aExhdGVzdEZyb21cIiwgeyBlbnVtZXJhYmxlOiB0cnVlLCBnZXQ6IGZ1bmN0aW9uICgpIHsgcmV0dXJuIHdpdGhMYXRlc3RGcm9tXzEud2l0aExhdGVzdEZyb207IH0gfSk7XG52YXIgemlwQWxsXzEgPSByZXF1aXJlKFwiLi9pbnRlcm5hbC9vcGVyYXRvcnMvemlwQWxsXCIpO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiemlwQWxsXCIsIHsgZW51bWVyYWJsZTogdHJ1ZSwgZ2V0OiBmdW5jdGlvbiAoKSB7IHJldHVybiB6aXBBbGxfMS56aXBBbGw7IH0gfSk7XG52YXIgemlwV2l0aF8xID0gcmVxdWlyZShcIi4vaW50ZXJuYWwvb3BlcmF0b3JzL3ppcFdpdGhcIik7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJ6aXBXaXRoXCIsIHsgZW51bWVyYWJsZTogdHJ1ZSwgZ2V0OiBmdW5jdGlvbiAoKSB7IHJldHVybiB6aXBXaXRoXzEuemlwV2l0aDsgfSB9KTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWluZGV4LmpzLm1hcCIsIlwidXNlIHN0cmljdFwiO1xudmFyIF9fZXh0ZW5kcyA9ICh0aGlzICYmIHRoaXMuX19leHRlbmRzKSB8fCAoZnVuY3Rpb24gKCkge1xuICAgIHZhciBleHRlbmRTdGF0aWNzID0gZnVuY3Rpb24gKGQsIGIpIHtcbiAgICAgICAgZXh0ZW5kU3RhdGljcyA9IE9iamVjdC5zZXRQcm90b3R5cGVPZiB8fFxuICAgICAgICAgICAgKHsgX19wcm90b19fOiBbXSB9IGluc3RhbmNlb2YgQXJyYXkgJiYgZnVuY3Rpb24gKGQsIGIpIHsgZC5fX3Byb3RvX18gPSBiOyB9KSB8fFxuICAgICAgICAgICAgZnVuY3Rpb24gKGQsIGIpIHsgZm9yICh2YXIgcCBpbiBiKSBpZiAoT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKGIsIHApKSBkW3BdID0gYltwXTsgfTtcbiAgICAgICAgcmV0dXJuIGV4dGVuZFN0YXRpY3MoZCwgYik7XG4gICAgfTtcbiAgICByZXR1cm4gZnVuY3Rpb24gKGQsIGIpIHtcbiAgICAgICAgaWYgKHR5cGVvZiBiICE9PSBcImZ1bmN0aW9uXCIgJiYgYiAhPT0gbnVsbClcbiAgICAgICAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoXCJDbGFzcyBleHRlbmRzIHZhbHVlIFwiICsgU3RyaW5nKGIpICsgXCIgaXMgbm90IGEgY29uc3RydWN0b3Igb3IgbnVsbFwiKTtcbiAgICAgICAgZXh0ZW5kU3RhdGljcyhkLCBiKTtcbiAgICAgICAgZnVuY3Rpb24gX18oKSB7IHRoaXMuY29uc3RydWN0b3IgPSBkOyB9XG4gICAgICAgIGQucHJvdG90eXBlID0gYiA9PT0gbnVsbCA/IE9iamVjdC5jcmVhdGUoYikgOiAoX18ucHJvdG90eXBlID0gYi5wcm90b3R5cGUsIG5ldyBfXygpKTtcbiAgICB9O1xufSkoKTtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmV4cG9ydHMuQXN5bmNTdWJqZWN0ID0gdm9pZCAwO1xudmFyIFN1YmplY3RfMSA9IHJlcXVpcmUoXCIuL1N1YmplY3RcIik7XG52YXIgQXN5bmNTdWJqZWN0ID0gKGZ1bmN0aW9uIChfc3VwZXIpIHtcbiAgICBfX2V4dGVuZHMoQXN5bmNTdWJqZWN0LCBfc3VwZXIpO1xuICAgIGZ1bmN0aW9uIEFzeW5jU3ViamVjdCgpIHtcbiAgICAgICAgdmFyIF90aGlzID0gX3N1cGVyICE9PSBudWxsICYmIF9zdXBlci5hcHBseSh0aGlzLCBhcmd1bWVudHMpIHx8IHRoaXM7XG4gICAgICAgIF90aGlzLl92YWx1ZSA9IG51bGw7XG4gICAgICAgIF90aGlzLl9oYXNWYWx1ZSA9IGZhbHNlO1xuICAgICAgICBfdGhpcy5faXNDb21wbGV0ZSA9IGZhbHNlO1xuICAgICAgICByZXR1cm4gX3RoaXM7XG4gICAgfVxuICAgIEFzeW5jU3ViamVjdC5wcm90b3R5cGUuX2NoZWNrRmluYWxpemVkU3RhdHVzZXMgPSBmdW5jdGlvbiAoc3Vic2NyaWJlcikge1xuICAgICAgICB2YXIgX2EgPSB0aGlzLCBoYXNFcnJvciA9IF9hLmhhc0Vycm9yLCBfaGFzVmFsdWUgPSBfYS5faGFzVmFsdWUsIF92YWx1ZSA9IF9hLl92YWx1ZSwgdGhyb3duRXJyb3IgPSBfYS50aHJvd25FcnJvciwgaXNTdG9wcGVkID0gX2EuaXNTdG9wcGVkLCBfaXNDb21wbGV0ZSA9IF9hLl9pc0NvbXBsZXRlO1xuICAgICAgICBpZiAoaGFzRXJyb3IpIHtcbiAgICAgICAgICAgIHN1YnNjcmliZXIuZXJyb3IodGhyb3duRXJyb3IpO1xuICAgICAgICB9XG4gICAgICAgIGVsc2UgaWYgKGlzU3RvcHBlZCB8fCBfaXNDb21wbGV0ZSkge1xuICAgICAgICAgICAgX2hhc1ZhbHVlICYmIHN1YnNjcmliZXIubmV4dChfdmFsdWUpO1xuICAgICAgICAgICAgc3Vic2NyaWJlci5jb21wbGV0ZSgpO1xuICAgICAgICB9XG4gICAgfTtcbiAgICBBc3luY1N1YmplY3QucHJvdG90eXBlLm5leHQgPSBmdW5jdGlvbiAodmFsdWUpIHtcbiAgICAgICAgaWYgKCF0aGlzLmlzU3RvcHBlZCkge1xuICAgICAgICAgICAgdGhpcy5fdmFsdWUgPSB2YWx1ZTtcbiAgICAgICAgICAgIHRoaXMuX2hhc1ZhbHVlID0gdHJ1ZTtcbiAgICAgICAgfVxuICAgIH07XG4gICAgQXN5bmNTdWJqZWN0LnByb3RvdHlwZS5jb21wbGV0ZSA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgdmFyIF9hID0gdGhpcywgX2hhc1ZhbHVlID0gX2EuX2hhc1ZhbHVlLCBfdmFsdWUgPSBfYS5fdmFsdWUsIF9pc0NvbXBsZXRlID0gX2EuX2lzQ29tcGxldGU7XG4gICAgICAgIGlmICghX2lzQ29tcGxldGUpIHtcbiAgICAgICAgICAgIHRoaXMuX2lzQ29tcGxldGUgPSB0cnVlO1xuICAgICAgICAgICAgX2hhc1ZhbHVlICYmIF9zdXBlci5wcm90b3R5cGUubmV4dC5jYWxsKHRoaXMsIF92YWx1ZSk7XG4gICAgICAgICAgICBfc3VwZXIucHJvdG90eXBlLmNvbXBsZXRlLmNhbGwodGhpcyk7XG4gICAgICAgIH1cbiAgICB9O1xuICAgIHJldHVybiBBc3luY1N1YmplY3Q7XG59KFN1YmplY3RfMS5TdWJqZWN0KSk7XG5leHBvcnRzLkFzeW5jU3ViamVjdCA9IEFzeW5jU3ViamVjdDtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPUFzeW5jU3ViamVjdC5qcy5tYXAiLCJcInVzZSBzdHJpY3RcIjtcbnZhciBfX2V4dGVuZHMgPSAodGhpcyAmJiB0aGlzLl9fZXh0ZW5kcykgfHwgKGZ1bmN0aW9uICgpIHtcbiAgICB2YXIgZXh0ZW5kU3RhdGljcyA9IGZ1bmN0aW9uIChkLCBiKSB7XG4gICAgICAgIGV4dGVuZFN0YXRpY3MgPSBPYmplY3Quc2V0UHJvdG90eXBlT2YgfHxcbiAgICAgICAgICAgICh7IF9fcHJvdG9fXzogW10gfSBpbnN0YW5jZW9mIEFycmF5ICYmIGZ1bmN0aW9uIChkLCBiKSB7IGQuX19wcm90b19fID0gYjsgfSkgfHxcbiAgICAgICAgICAgIGZ1bmN0aW9uIChkLCBiKSB7IGZvciAodmFyIHAgaW4gYikgaWYgKE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChiLCBwKSkgZFtwXSA9IGJbcF07IH07XG4gICAgICAgIHJldHVybiBleHRlbmRTdGF0aWNzKGQsIGIpO1xuICAgIH07XG4gICAgcmV0dXJuIGZ1bmN0aW9uIChkLCBiKSB7XG4gICAgICAgIGlmICh0eXBlb2YgYiAhPT0gXCJmdW5jdGlvblwiICYmIGIgIT09IG51bGwpXG4gICAgICAgICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKFwiQ2xhc3MgZXh0ZW5kcyB2YWx1ZSBcIiArIFN0cmluZyhiKSArIFwiIGlzIG5vdCBhIGNvbnN0cnVjdG9yIG9yIG51bGxcIik7XG4gICAgICAgIGV4dGVuZFN0YXRpY3MoZCwgYik7XG4gICAgICAgIGZ1bmN0aW9uIF9fKCkgeyB0aGlzLmNvbnN0cnVjdG9yID0gZDsgfVxuICAgICAgICBkLnByb3RvdHlwZSA9IGIgPT09IG51bGwgPyBPYmplY3QuY3JlYXRlKGIpIDogKF9fLnByb3RvdHlwZSA9IGIucHJvdG90eXBlLCBuZXcgX18oKSk7XG4gICAgfTtcbn0pKCk7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5leHBvcnRzLkJlaGF2aW9yU3ViamVjdCA9IHZvaWQgMDtcbnZhciBTdWJqZWN0XzEgPSByZXF1aXJlKFwiLi9TdWJqZWN0XCIpO1xudmFyIEJlaGF2aW9yU3ViamVjdCA9IChmdW5jdGlvbiAoX3N1cGVyKSB7XG4gICAgX19leHRlbmRzKEJlaGF2aW9yU3ViamVjdCwgX3N1cGVyKTtcbiAgICBmdW5jdGlvbiBCZWhhdmlvclN1YmplY3QoX3ZhbHVlKSB7XG4gICAgICAgIHZhciBfdGhpcyA9IF9zdXBlci5jYWxsKHRoaXMpIHx8IHRoaXM7XG4gICAgICAgIF90aGlzLl92YWx1ZSA9IF92YWx1ZTtcbiAgICAgICAgcmV0dXJuIF90aGlzO1xuICAgIH1cbiAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkoQmVoYXZpb3JTdWJqZWN0LnByb3RvdHlwZSwgXCJ2YWx1ZVwiLCB7XG4gICAgICAgIGdldDogZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgcmV0dXJuIHRoaXMuZ2V0VmFsdWUoKTtcbiAgICAgICAgfSxcbiAgICAgICAgZW51bWVyYWJsZTogZmFsc2UsXG4gICAgICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZVxuICAgIH0pO1xuICAgIEJlaGF2aW9yU3ViamVjdC5wcm90b3R5cGUuX3N1YnNjcmliZSA9IGZ1bmN0aW9uIChzdWJzY3JpYmVyKSB7XG4gICAgICAgIHZhciBzdWJzY3JpcHRpb24gPSBfc3VwZXIucHJvdG90eXBlLl9zdWJzY3JpYmUuY2FsbCh0aGlzLCBzdWJzY3JpYmVyKTtcbiAgICAgICAgIXN1YnNjcmlwdGlvbi5jbG9zZWQgJiYgc3Vic2NyaWJlci5uZXh0KHRoaXMuX3ZhbHVlKTtcbiAgICAgICAgcmV0dXJuIHN1YnNjcmlwdGlvbjtcbiAgICB9O1xuICAgIEJlaGF2aW9yU3ViamVjdC5wcm90b3R5cGUuZ2V0VmFsdWUgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHZhciBfYSA9IHRoaXMsIGhhc0Vycm9yID0gX2EuaGFzRXJyb3IsIHRocm93bkVycm9yID0gX2EudGhyb3duRXJyb3IsIF92YWx1ZSA9IF9hLl92YWx1ZTtcbiAgICAgICAgaWYgKGhhc0Vycm9yKSB7XG4gICAgICAgICAgICB0aHJvdyB0aHJvd25FcnJvcjtcbiAgICAgICAgfVxuICAgICAgICB0aGlzLl90aHJvd0lmQ2xvc2VkKCk7XG4gICAgICAgIHJldHVybiBfdmFsdWU7XG4gICAgfTtcbiAgICBCZWhhdmlvclN1YmplY3QucHJvdG90eXBlLm5leHQgPSBmdW5jdGlvbiAodmFsdWUpIHtcbiAgICAgICAgX3N1cGVyLnByb3RvdHlwZS5uZXh0LmNhbGwodGhpcywgKHRoaXMuX3ZhbHVlID0gdmFsdWUpKTtcbiAgICB9O1xuICAgIHJldHVybiBCZWhhdmlvclN1YmplY3Q7XG59KFN1YmplY3RfMS5TdWJqZWN0KSk7XG5leHBvcnRzLkJlaGF2aW9yU3ViamVjdCA9IEJlaGF2aW9yU3ViamVjdDtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPUJlaGF2aW9yU3ViamVjdC5qcy5tYXAiLCJcInVzZSBzdHJpY3RcIjtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmV4cG9ydHMub2JzZXJ2ZU5vdGlmaWNhdGlvbiA9IGV4cG9ydHMuTm90aWZpY2F0aW9uID0gZXhwb3J0cy5Ob3RpZmljYXRpb25LaW5kID0gdm9pZCAwO1xudmFyIGVtcHR5XzEgPSByZXF1aXJlKFwiLi9vYnNlcnZhYmxlL2VtcHR5XCIpO1xudmFyIG9mXzEgPSByZXF1aXJlKFwiLi9vYnNlcnZhYmxlL29mXCIpO1xudmFyIHRocm93RXJyb3JfMSA9IHJlcXVpcmUoXCIuL29ic2VydmFibGUvdGhyb3dFcnJvclwiKTtcbnZhciBpc0Z1bmN0aW9uXzEgPSByZXF1aXJlKFwiLi91dGlsL2lzRnVuY3Rpb25cIik7XG52YXIgTm90aWZpY2F0aW9uS2luZDtcbihmdW5jdGlvbiAoTm90aWZpY2F0aW9uS2luZCkge1xuICAgIE5vdGlmaWNhdGlvbktpbmRbXCJORVhUXCJdID0gXCJOXCI7XG4gICAgTm90aWZpY2F0aW9uS2luZFtcIkVSUk9SXCJdID0gXCJFXCI7XG4gICAgTm90aWZpY2F0aW9uS2luZFtcIkNPTVBMRVRFXCJdID0gXCJDXCI7XG59KShOb3RpZmljYXRpb25LaW5kID0gZXhwb3J0cy5Ob3RpZmljYXRpb25LaW5kIHx8IChleHBvcnRzLk5vdGlmaWNhdGlvbktpbmQgPSB7fSkpO1xudmFyIE5vdGlmaWNhdGlvbiA9IChmdW5jdGlvbiAoKSB7XG4gICAgZnVuY3Rpb24gTm90aWZpY2F0aW9uKGtpbmQsIHZhbHVlLCBlcnJvcikge1xuICAgICAgICB0aGlzLmtpbmQgPSBraW5kO1xuICAgICAgICB0aGlzLnZhbHVlID0gdmFsdWU7XG4gICAgICAgIHRoaXMuZXJyb3IgPSBlcnJvcjtcbiAgICAgICAgdGhpcy5oYXNWYWx1ZSA9IGtpbmQgPT09ICdOJztcbiAgICB9XG4gICAgTm90aWZpY2F0aW9uLnByb3RvdHlwZS5vYnNlcnZlID0gZnVuY3Rpb24gKG9ic2VydmVyKSB7XG4gICAgICAgIHJldHVybiBvYnNlcnZlTm90aWZpY2F0aW9uKHRoaXMsIG9ic2VydmVyKTtcbiAgICB9O1xuICAgIE5vdGlmaWNhdGlvbi5wcm90b3R5cGUuZG8gPSBmdW5jdGlvbiAobmV4dEhhbmRsZXIsIGVycm9ySGFuZGxlciwgY29tcGxldGVIYW5kbGVyKSB7XG4gICAgICAgIHZhciBfYSA9IHRoaXMsIGtpbmQgPSBfYS5raW5kLCB2YWx1ZSA9IF9hLnZhbHVlLCBlcnJvciA9IF9hLmVycm9yO1xuICAgICAgICByZXR1cm4ga2luZCA9PT0gJ04nID8gbmV4dEhhbmRsZXIgPT09IG51bGwgfHwgbmV4dEhhbmRsZXIgPT09IHZvaWQgMCA/IHZvaWQgMCA6IG5leHRIYW5kbGVyKHZhbHVlKSA6IGtpbmQgPT09ICdFJyA/IGVycm9ySGFuZGxlciA9PT0gbnVsbCB8fCBlcnJvckhhbmRsZXIgPT09IHZvaWQgMCA/IHZvaWQgMCA6IGVycm9ySGFuZGxlcihlcnJvcikgOiBjb21wbGV0ZUhhbmRsZXIgPT09IG51bGwgfHwgY29tcGxldGVIYW5kbGVyID09PSB2b2lkIDAgPyB2b2lkIDAgOiBjb21wbGV0ZUhhbmRsZXIoKTtcbiAgICB9O1xuICAgIE5vdGlmaWNhdGlvbi5wcm90b3R5cGUuYWNjZXB0ID0gZnVuY3Rpb24gKG5leHRPck9ic2VydmVyLCBlcnJvciwgY29tcGxldGUpIHtcbiAgICAgICAgdmFyIF9hO1xuICAgICAgICByZXR1cm4gaXNGdW5jdGlvbl8xLmlzRnVuY3Rpb24oKF9hID0gbmV4dE9yT2JzZXJ2ZXIpID09PSBudWxsIHx8IF9hID09PSB2b2lkIDAgPyB2b2lkIDAgOiBfYS5uZXh0KVxuICAgICAgICAgICAgPyB0aGlzLm9ic2VydmUobmV4dE9yT2JzZXJ2ZXIpXG4gICAgICAgICAgICA6IHRoaXMuZG8obmV4dE9yT2JzZXJ2ZXIsIGVycm9yLCBjb21wbGV0ZSk7XG4gICAgfTtcbiAgICBOb3RpZmljYXRpb24ucHJvdG90eXBlLnRvT2JzZXJ2YWJsZSA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgdmFyIF9hID0gdGhpcywga2luZCA9IF9hLmtpbmQsIHZhbHVlID0gX2EudmFsdWUsIGVycm9yID0gX2EuZXJyb3I7XG4gICAgICAgIHZhciByZXN1bHQgPSBraW5kID09PSAnTidcbiAgICAgICAgICAgID9cbiAgICAgICAgICAgICAgICBvZl8xLm9mKHZhbHVlKVxuICAgICAgICAgICAgOlxuICAgICAgICAgICAgICAgIGtpbmQgPT09ICdFJ1xuICAgICAgICAgICAgICAgICAgICA/XG4gICAgICAgICAgICAgICAgICAgICAgICB0aHJvd0Vycm9yXzEudGhyb3dFcnJvcihmdW5jdGlvbiAoKSB7IHJldHVybiBlcnJvcjsgfSlcbiAgICAgICAgICAgICAgICAgICAgOlxuICAgICAgICAgICAgICAgICAgICAgICAga2luZCA9PT0gJ0MnXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgP1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBlbXB0eV8xLkVNUFRZXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgOlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAwO1xuICAgICAgICBpZiAoIXJlc3VsdCkge1xuICAgICAgICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcihcIlVuZXhwZWN0ZWQgbm90aWZpY2F0aW9uIGtpbmQgXCIgKyBraW5kKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gcmVzdWx0O1xuICAgIH07XG4gICAgTm90aWZpY2F0aW9uLmNyZWF0ZU5leHQgPSBmdW5jdGlvbiAodmFsdWUpIHtcbiAgICAgICAgcmV0dXJuIG5ldyBOb3RpZmljYXRpb24oJ04nLCB2YWx1ZSk7XG4gICAgfTtcbiAgICBOb3RpZmljYXRpb24uY3JlYXRlRXJyb3IgPSBmdW5jdGlvbiAoZXJyKSB7XG4gICAgICAgIHJldHVybiBuZXcgTm90aWZpY2F0aW9uKCdFJywgdW5kZWZpbmVkLCBlcnIpO1xuICAgIH07XG4gICAgTm90aWZpY2F0aW9uLmNyZWF0ZUNvbXBsZXRlID0gZnVuY3Rpb24gKCkge1xuICAgICAgICByZXR1cm4gTm90aWZpY2F0aW9uLmNvbXBsZXRlTm90aWZpY2F0aW9uO1xuICAgIH07XG4gICAgTm90aWZpY2F0aW9uLmNvbXBsZXRlTm90aWZpY2F0aW9uID0gbmV3IE5vdGlmaWNhdGlvbignQycpO1xuICAgIHJldHVybiBOb3RpZmljYXRpb247XG59KCkpO1xuZXhwb3J0cy5Ob3RpZmljYXRpb24gPSBOb3RpZmljYXRpb247XG5mdW5jdGlvbiBvYnNlcnZlTm90aWZpY2F0aW9uKG5vdGlmaWNhdGlvbiwgb2JzZXJ2ZXIpIHtcbiAgICB2YXIgX2EsIF9iLCBfYztcbiAgICB2YXIgX2QgPSBub3RpZmljYXRpb24sIGtpbmQgPSBfZC5raW5kLCB2YWx1ZSA9IF9kLnZhbHVlLCBlcnJvciA9IF9kLmVycm9yO1xuICAgIGlmICh0eXBlb2Yga2luZCAhPT0gJ3N0cmluZycpIHtcbiAgICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcignSW52YWxpZCBub3RpZmljYXRpb24sIG1pc3NpbmcgXCJraW5kXCInKTtcbiAgICB9XG4gICAga2luZCA9PT0gJ04nID8gKF9hID0gb2JzZXJ2ZXIubmV4dCkgPT09IG51bGwgfHwgX2EgPT09IHZvaWQgMCA/IHZvaWQgMCA6IF9hLmNhbGwob2JzZXJ2ZXIsIHZhbHVlKSA6IGtpbmQgPT09ICdFJyA/IChfYiA9IG9ic2VydmVyLmVycm9yKSA9PT0gbnVsbCB8fCBfYiA9PT0gdm9pZCAwID8gdm9pZCAwIDogX2IuY2FsbChvYnNlcnZlciwgZXJyb3IpIDogKF9jID0gb2JzZXJ2ZXIuY29tcGxldGUpID09PSBudWxsIHx8IF9jID09PSB2b2lkIDAgPyB2b2lkIDAgOiBfYy5jYWxsKG9ic2VydmVyKTtcbn1cbmV4cG9ydHMub2JzZXJ2ZU5vdGlmaWNhdGlvbiA9IG9ic2VydmVOb3RpZmljYXRpb247XG4vLyMgc291cmNlTWFwcGluZ1VSTD1Ob3RpZmljYXRpb24uanMubWFwIiwiXCJ1c2Ugc3RyaWN0XCI7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5leHBvcnRzLmNyZWF0ZU5vdGlmaWNhdGlvbiA9IGV4cG9ydHMubmV4dE5vdGlmaWNhdGlvbiA9IGV4cG9ydHMuZXJyb3JOb3RpZmljYXRpb24gPSBleHBvcnRzLkNPTVBMRVRFX05PVElGSUNBVElPTiA9IHZvaWQgMDtcbmV4cG9ydHMuQ09NUExFVEVfTk9USUZJQ0FUSU9OID0gKGZ1bmN0aW9uICgpIHsgcmV0dXJuIGNyZWF0ZU5vdGlmaWNhdGlvbignQycsIHVuZGVmaW5lZCwgdW5kZWZpbmVkKTsgfSkoKTtcbmZ1bmN0aW9uIGVycm9yTm90aWZpY2F0aW9uKGVycm9yKSB7XG4gICAgcmV0dXJuIGNyZWF0ZU5vdGlmaWNhdGlvbignRScsIHVuZGVmaW5lZCwgZXJyb3IpO1xufVxuZXhwb3J0cy5lcnJvck5vdGlmaWNhdGlvbiA9IGVycm9yTm90aWZpY2F0aW9uO1xuZnVuY3Rpb24gbmV4dE5vdGlmaWNhdGlvbih2YWx1ZSkge1xuICAgIHJldHVybiBjcmVhdGVOb3RpZmljYXRpb24oJ04nLCB2YWx1ZSwgdW5kZWZpbmVkKTtcbn1cbmV4cG9ydHMubmV4dE5vdGlmaWNhdGlvbiA9IG5leHROb3RpZmljYXRpb247XG5mdW5jdGlvbiBjcmVhdGVOb3RpZmljYXRpb24oa2luZCwgdmFsdWUsIGVycm9yKSB7XG4gICAgcmV0dXJuIHtcbiAgICAgICAga2luZDoga2luZCxcbiAgICAgICAgdmFsdWU6IHZhbHVlLFxuICAgICAgICBlcnJvcjogZXJyb3IsXG4gICAgfTtcbn1cbmV4cG9ydHMuY3JlYXRlTm90aWZpY2F0aW9uID0gY3JlYXRlTm90aWZpY2F0aW9uO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9Tm90aWZpY2F0aW9uRmFjdG9yaWVzLmpzLm1hcCIsIlwidXNlIHN0cmljdFwiO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuZXhwb3J0cy5PYnNlcnZhYmxlID0gdm9pZCAwO1xudmFyIFN1YnNjcmliZXJfMSA9IHJlcXVpcmUoXCIuL1N1YnNjcmliZXJcIik7XG52YXIgU3Vic2NyaXB0aW9uXzEgPSByZXF1aXJlKFwiLi9TdWJzY3JpcHRpb25cIik7XG52YXIgb2JzZXJ2YWJsZV8xID0gcmVxdWlyZShcIi4vc3ltYm9sL29ic2VydmFibGVcIik7XG52YXIgcGlwZV8xID0gcmVxdWlyZShcIi4vdXRpbC9waXBlXCIpO1xudmFyIGNvbmZpZ18xID0gcmVxdWlyZShcIi4vY29uZmlnXCIpO1xudmFyIGlzRnVuY3Rpb25fMSA9IHJlcXVpcmUoXCIuL3V0aWwvaXNGdW5jdGlvblwiKTtcbnZhciBlcnJvckNvbnRleHRfMSA9IHJlcXVpcmUoXCIuL3V0aWwvZXJyb3JDb250ZXh0XCIpO1xudmFyIE9ic2VydmFibGUgPSAoZnVuY3Rpb24gKCkge1xuICAgIGZ1bmN0aW9uIE9ic2VydmFibGUoc3Vic2NyaWJlKSB7XG4gICAgICAgIGlmIChzdWJzY3JpYmUpIHtcbiAgICAgICAgICAgIHRoaXMuX3N1YnNjcmliZSA9IHN1YnNjcmliZTtcbiAgICAgICAgfVxuICAgIH1cbiAgICBPYnNlcnZhYmxlLnByb3RvdHlwZS5saWZ0ID0gZnVuY3Rpb24gKG9wZXJhdG9yKSB7XG4gICAgICAgIHZhciBvYnNlcnZhYmxlID0gbmV3IE9ic2VydmFibGUoKTtcbiAgICAgICAgb2JzZXJ2YWJsZS5zb3VyY2UgPSB0aGlzO1xuICAgICAgICBvYnNlcnZhYmxlLm9wZXJhdG9yID0gb3BlcmF0b3I7XG4gICAgICAgIHJldHVybiBvYnNlcnZhYmxlO1xuICAgIH07XG4gICAgT2JzZXJ2YWJsZS5wcm90b3R5cGUuc3Vic2NyaWJlID0gZnVuY3Rpb24gKG9ic2VydmVyT3JOZXh0LCBlcnJvciwgY29tcGxldGUpIHtcbiAgICAgICAgdmFyIF90aGlzID0gdGhpcztcbiAgICAgICAgdmFyIHN1YnNjcmliZXIgPSBpc1N1YnNjcmliZXIob2JzZXJ2ZXJPck5leHQpID8gb2JzZXJ2ZXJPck5leHQgOiBuZXcgU3Vic2NyaWJlcl8xLlNhZmVTdWJzY3JpYmVyKG9ic2VydmVyT3JOZXh0LCBlcnJvciwgY29tcGxldGUpO1xuICAgICAgICBlcnJvckNvbnRleHRfMS5lcnJvckNvbnRleHQoZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgdmFyIF9hID0gX3RoaXMsIG9wZXJhdG9yID0gX2Eub3BlcmF0b3IsIHNvdXJjZSA9IF9hLnNvdXJjZTtcbiAgICAgICAgICAgIHN1YnNjcmliZXIuYWRkKG9wZXJhdG9yXG4gICAgICAgICAgICAgICAgP1xuICAgICAgICAgICAgICAgICAgICBvcGVyYXRvci5jYWxsKHN1YnNjcmliZXIsIHNvdXJjZSlcbiAgICAgICAgICAgICAgICA6IHNvdXJjZVxuICAgICAgICAgICAgICAgICAgICA/XG4gICAgICAgICAgICAgICAgICAgICAgICBfdGhpcy5fc3Vic2NyaWJlKHN1YnNjcmliZXIpXG4gICAgICAgICAgICAgICAgICAgIDpcbiAgICAgICAgICAgICAgICAgICAgICAgIF90aGlzLl90cnlTdWJzY3JpYmUoc3Vic2NyaWJlcikpO1xuICAgICAgICB9KTtcbiAgICAgICAgcmV0dXJuIHN1YnNjcmliZXI7XG4gICAgfTtcbiAgICBPYnNlcnZhYmxlLnByb3RvdHlwZS5fdHJ5U3Vic2NyaWJlID0gZnVuY3Rpb24gKHNpbmspIHtcbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgIHJldHVybiB0aGlzLl9zdWJzY3JpYmUoc2luayk7XG4gICAgICAgIH1cbiAgICAgICAgY2F0Y2ggKGVycikge1xuICAgICAgICAgICAgc2luay5lcnJvcihlcnIpO1xuICAgICAgICB9XG4gICAgfTtcbiAgICBPYnNlcnZhYmxlLnByb3RvdHlwZS5mb3JFYWNoID0gZnVuY3Rpb24gKG5leHQsIHByb21pc2VDdG9yKSB7XG4gICAgICAgIHZhciBfdGhpcyA9IHRoaXM7XG4gICAgICAgIHByb21pc2VDdG9yID0gZ2V0UHJvbWlzZUN0b3IocHJvbWlzZUN0b3IpO1xuICAgICAgICByZXR1cm4gbmV3IHByb21pc2VDdG9yKGZ1bmN0aW9uIChyZXNvbHZlLCByZWplY3QpIHtcbiAgICAgICAgICAgIHZhciBzdWJzY3JpYmVyID0gbmV3IFN1YnNjcmliZXJfMS5TYWZlU3Vic2NyaWJlcih7XG4gICAgICAgICAgICAgICAgbmV4dDogZnVuY3Rpb24gKHZhbHVlKSB7XG4gICAgICAgICAgICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBuZXh0KHZhbHVlKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICBjYXRjaCAoZXJyKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICByZWplY3QoZXJyKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIHN1YnNjcmliZXIudW5zdWJzY3JpYmUoKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgZXJyb3I6IHJlamVjdCxcbiAgICAgICAgICAgICAgICBjb21wbGV0ZTogcmVzb2x2ZSxcbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgX3RoaXMuc3Vic2NyaWJlKHN1YnNjcmliZXIpO1xuICAgICAgICB9KTtcbiAgICB9O1xuICAgIE9ic2VydmFibGUucHJvdG90eXBlLl9zdWJzY3JpYmUgPSBmdW5jdGlvbiAoc3Vic2NyaWJlcikge1xuICAgICAgICB2YXIgX2E7XG4gICAgICAgIHJldHVybiAoX2EgPSB0aGlzLnNvdXJjZSkgPT09IG51bGwgfHwgX2EgPT09IHZvaWQgMCA/IHZvaWQgMCA6IF9hLnN1YnNjcmliZShzdWJzY3JpYmVyKTtcbiAgICB9O1xuICAgIE9ic2VydmFibGUucHJvdG90eXBlW29ic2VydmFibGVfMS5vYnNlcnZhYmxlXSA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfTtcbiAgICBPYnNlcnZhYmxlLnByb3RvdHlwZS5waXBlID0gZnVuY3Rpb24gKCkge1xuICAgICAgICB2YXIgb3BlcmF0aW9ucyA9IFtdO1xuICAgICAgICBmb3IgKHZhciBfaSA9IDA7IF9pIDwgYXJndW1lbnRzLmxlbmd0aDsgX2krKykge1xuICAgICAgICAgICAgb3BlcmF0aW9uc1tfaV0gPSBhcmd1bWVudHNbX2ldO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBwaXBlXzEucGlwZUZyb21BcnJheShvcGVyYXRpb25zKSh0aGlzKTtcbiAgICB9O1xuICAgIE9ic2VydmFibGUucHJvdG90eXBlLnRvUHJvbWlzZSA9IGZ1bmN0aW9uIChwcm9taXNlQ3Rvcikge1xuICAgICAgICB2YXIgX3RoaXMgPSB0aGlzO1xuICAgICAgICBwcm9taXNlQ3RvciA9IGdldFByb21pc2VDdG9yKHByb21pc2VDdG9yKTtcbiAgICAgICAgcmV0dXJuIG5ldyBwcm9taXNlQ3RvcihmdW5jdGlvbiAocmVzb2x2ZSwgcmVqZWN0KSB7XG4gICAgICAgICAgICB2YXIgdmFsdWU7XG4gICAgICAgICAgICBfdGhpcy5zdWJzY3JpYmUoZnVuY3Rpb24gKHgpIHsgcmV0dXJuICh2YWx1ZSA9IHgpOyB9LCBmdW5jdGlvbiAoZXJyKSB7IHJldHVybiByZWplY3QoZXJyKTsgfSwgZnVuY3Rpb24gKCkgeyByZXR1cm4gcmVzb2x2ZSh2YWx1ZSk7IH0pO1xuICAgICAgICB9KTtcbiAgICB9O1xuICAgIE9ic2VydmFibGUuY3JlYXRlID0gZnVuY3Rpb24gKHN1YnNjcmliZSkge1xuICAgICAgICByZXR1cm4gbmV3IE9ic2VydmFibGUoc3Vic2NyaWJlKTtcbiAgICB9O1xuICAgIHJldHVybiBPYnNlcnZhYmxlO1xufSgpKTtcbmV4cG9ydHMuT2JzZXJ2YWJsZSA9IE9ic2VydmFibGU7XG5mdW5jdGlvbiBnZXRQcm9taXNlQ3Rvcihwcm9taXNlQ3Rvcikge1xuICAgIHZhciBfYTtcbiAgICByZXR1cm4gKF9hID0gcHJvbWlzZUN0b3IgIT09IG51bGwgJiYgcHJvbWlzZUN0b3IgIT09IHZvaWQgMCA/IHByb21pc2VDdG9yIDogY29uZmlnXzEuY29uZmlnLlByb21pc2UpICE9PSBudWxsICYmIF9hICE9PSB2b2lkIDAgPyBfYSA6IFByb21pc2U7XG59XG5mdW5jdGlvbiBpc09ic2VydmVyKHZhbHVlKSB7XG4gICAgcmV0dXJuIHZhbHVlICYmIGlzRnVuY3Rpb25fMS5pc0Z1bmN0aW9uKHZhbHVlLm5leHQpICYmIGlzRnVuY3Rpb25fMS5pc0Z1bmN0aW9uKHZhbHVlLmVycm9yKSAmJiBpc0Z1bmN0aW9uXzEuaXNGdW5jdGlvbih2YWx1ZS5jb21wbGV0ZSk7XG59XG5mdW5jdGlvbiBpc1N1YnNjcmliZXIodmFsdWUpIHtcbiAgICByZXR1cm4gKHZhbHVlICYmIHZhbHVlIGluc3RhbmNlb2YgU3Vic2NyaWJlcl8xLlN1YnNjcmliZXIpIHx8IChpc09ic2VydmVyKHZhbHVlKSAmJiBTdWJzY3JpcHRpb25fMS5pc1N1YnNjcmlwdGlvbih2YWx1ZSkpO1xufVxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9T2JzZXJ2YWJsZS5qcy5tYXAiLCJcInVzZSBzdHJpY3RcIjtcbnZhciBfX2V4dGVuZHMgPSAodGhpcyAmJiB0aGlzLl9fZXh0ZW5kcykgfHwgKGZ1bmN0aW9uICgpIHtcbiAgICB2YXIgZXh0ZW5kU3RhdGljcyA9IGZ1bmN0aW9uIChkLCBiKSB7XG4gICAgICAgIGV4dGVuZFN0YXRpY3MgPSBPYmplY3Quc2V0UHJvdG90eXBlT2YgfHxcbiAgICAgICAgICAgICh7IF9fcHJvdG9fXzogW10gfSBpbnN0YW5jZW9mIEFycmF5ICYmIGZ1bmN0aW9uIChkLCBiKSB7IGQuX19wcm90b19fID0gYjsgfSkgfHxcbiAgICAgICAgICAgIGZ1bmN0aW9uIChkLCBiKSB7IGZvciAodmFyIHAgaW4gYikgaWYgKE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChiLCBwKSkgZFtwXSA9IGJbcF07IH07XG4gICAgICAgIHJldHVybiBleHRlbmRTdGF0aWNzKGQsIGIpO1xuICAgIH07XG4gICAgcmV0dXJuIGZ1bmN0aW9uIChkLCBiKSB7XG4gICAgICAgIGlmICh0eXBlb2YgYiAhPT0gXCJmdW5jdGlvblwiICYmIGIgIT09IG51bGwpXG4gICAgICAgICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKFwiQ2xhc3MgZXh0ZW5kcyB2YWx1ZSBcIiArIFN0cmluZyhiKSArIFwiIGlzIG5vdCBhIGNvbnN0cnVjdG9yIG9yIG51bGxcIik7XG4gICAgICAgIGV4dGVuZFN0YXRpY3MoZCwgYik7XG4gICAgICAgIGZ1bmN0aW9uIF9fKCkgeyB0aGlzLmNvbnN0cnVjdG9yID0gZDsgfVxuICAgICAgICBkLnByb3RvdHlwZSA9IGIgPT09IG51bGwgPyBPYmplY3QuY3JlYXRlKGIpIDogKF9fLnByb3RvdHlwZSA9IGIucHJvdG90eXBlLCBuZXcgX18oKSk7XG4gICAgfTtcbn0pKCk7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5leHBvcnRzLlJlcGxheVN1YmplY3QgPSB2b2lkIDA7XG52YXIgU3ViamVjdF8xID0gcmVxdWlyZShcIi4vU3ViamVjdFwiKTtcbnZhciBkYXRlVGltZXN0YW1wUHJvdmlkZXJfMSA9IHJlcXVpcmUoXCIuL3NjaGVkdWxlci9kYXRlVGltZXN0YW1wUHJvdmlkZXJcIik7XG52YXIgUmVwbGF5U3ViamVjdCA9IChmdW5jdGlvbiAoX3N1cGVyKSB7XG4gICAgX19leHRlbmRzKFJlcGxheVN1YmplY3QsIF9zdXBlcik7XG4gICAgZnVuY3Rpb24gUmVwbGF5U3ViamVjdChfYnVmZmVyU2l6ZSwgX3dpbmRvd1RpbWUsIF90aW1lc3RhbXBQcm92aWRlcikge1xuICAgICAgICBpZiAoX2J1ZmZlclNpemUgPT09IHZvaWQgMCkgeyBfYnVmZmVyU2l6ZSA9IEluZmluaXR5OyB9XG4gICAgICAgIGlmIChfd2luZG93VGltZSA9PT0gdm9pZCAwKSB7IF93aW5kb3dUaW1lID0gSW5maW5pdHk7IH1cbiAgICAgICAgaWYgKF90aW1lc3RhbXBQcm92aWRlciA9PT0gdm9pZCAwKSB7IF90aW1lc3RhbXBQcm92aWRlciA9IGRhdGVUaW1lc3RhbXBQcm92aWRlcl8xLmRhdGVUaW1lc3RhbXBQcm92aWRlcjsgfVxuICAgICAgICB2YXIgX3RoaXMgPSBfc3VwZXIuY2FsbCh0aGlzKSB8fCB0aGlzO1xuICAgICAgICBfdGhpcy5fYnVmZmVyU2l6ZSA9IF9idWZmZXJTaXplO1xuICAgICAgICBfdGhpcy5fd2luZG93VGltZSA9IF93aW5kb3dUaW1lO1xuICAgICAgICBfdGhpcy5fdGltZXN0YW1wUHJvdmlkZXIgPSBfdGltZXN0YW1wUHJvdmlkZXI7XG4gICAgICAgIF90aGlzLl9idWZmZXIgPSBbXTtcbiAgICAgICAgX3RoaXMuX2luZmluaXRlVGltZVdpbmRvdyA9IHRydWU7XG4gICAgICAgIF90aGlzLl9pbmZpbml0ZVRpbWVXaW5kb3cgPSBfd2luZG93VGltZSA9PT0gSW5maW5pdHk7XG4gICAgICAgIF90aGlzLl9idWZmZXJTaXplID0gTWF0aC5tYXgoMSwgX2J1ZmZlclNpemUpO1xuICAgICAgICBfdGhpcy5fd2luZG93VGltZSA9IE1hdGgubWF4KDEsIF93aW5kb3dUaW1lKTtcbiAgICAgICAgcmV0dXJuIF90aGlzO1xuICAgIH1cbiAgICBSZXBsYXlTdWJqZWN0LnByb3RvdHlwZS5uZXh0ID0gZnVuY3Rpb24gKHZhbHVlKSB7XG4gICAgICAgIHZhciBfYSA9IHRoaXMsIGlzU3RvcHBlZCA9IF9hLmlzU3RvcHBlZCwgX2J1ZmZlciA9IF9hLl9idWZmZXIsIF9pbmZpbml0ZVRpbWVXaW5kb3cgPSBfYS5faW5maW5pdGVUaW1lV2luZG93LCBfdGltZXN0YW1wUHJvdmlkZXIgPSBfYS5fdGltZXN0YW1wUHJvdmlkZXIsIF93aW5kb3dUaW1lID0gX2EuX3dpbmRvd1RpbWU7XG4gICAgICAgIGlmICghaXNTdG9wcGVkKSB7XG4gICAgICAgICAgICBfYnVmZmVyLnB1c2godmFsdWUpO1xuICAgICAgICAgICAgIV9pbmZpbml0ZVRpbWVXaW5kb3cgJiYgX2J1ZmZlci5wdXNoKF90aW1lc3RhbXBQcm92aWRlci5ub3coKSArIF93aW5kb3dUaW1lKTtcbiAgICAgICAgfVxuICAgICAgICB0aGlzLl90cmltQnVmZmVyKCk7XG4gICAgICAgIF9zdXBlci5wcm90b3R5cGUubmV4dC5jYWxsKHRoaXMsIHZhbHVlKTtcbiAgICB9O1xuICAgIFJlcGxheVN1YmplY3QucHJvdG90eXBlLl9zdWJzY3JpYmUgPSBmdW5jdGlvbiAoc3Vic2NyaWJlcikge1xuICAgICAgICB0aGlzLl90aHJvd0lmQ2xvc2VkKCk7XG4gICAgICAgIHRoaXMuX3RyaW1CdWZmZXIoKTtcbiAgICAgICAgdmFyIHN1YnNjcmlwdGlvbiA9IHRoaXMuX2lubmVyU3Vic2NyaWJlKHN1YnNjcmliZXIpO1xuICAgICAgICB2YXIgX2EgPSB0aGlzLCBfaW5maW5pdGVUaW1lV2luZG93ID0gX2EuX2luZmluaXRlVGltZVdpbmRvdywgX2J1ZmZlciA9IF9hLl9idWZmZXI7XG4gICAgICAgIHZhciBjb3B5ID0gX2J1ZmZlci5zbGljZSgpO1xuICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IGNvcHkubGVuZ3RoICYmICFzdWJzY3JpYmVyLmNsb3NlZDsgaSArPSBfaW5maW5pdGVUaW1lV2luZG93ID8gMSA6IDIpIHtcbiAgICAgICAgICAgIHN1YnNjcmliZXIubmV4dChjb3B5W2ldKTtcbiAgICAgICAgfVxuICAgICAgICB0aGlzLl9jaGVja0ZpbmFsaXplZFN0YXR1c2VzKHN1YnNjcmliZXIpO1xuICAgICAgICByZXR1cm4gc3Vic2NyaXB0aW9uO1xuICAgIH07XG4gICAgUmVwbGF5U3ViamVjdC5wcm90b3R5cGUuX3RyaW1CdWZmZXIgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHZhciBfYSA9IHRoaXMsIF9idWZmZXJTaXplID0gX2EuX2J1ZmZlclNpemUsIF90aW1lc3RhbXBQcm92aWRlciA9IF9hLl90aW1lc3RhbXBQcm92aWRlciwgX2J1ZmZlciA9IF9hLl9idWZmZXIsIF9pbmZpbml0ZVRpbWVXaW5kb3cgPSBfYS5faW5maW5pdGVUaW1lV2luZG93O1xuICAgICAgICB2YXIgYWRqdXN0ZWRCdWZmZXJTaXplID0gKF9pbmZpbml0ZVRpbWVXaW5kb3cgPyAxIDogMikgKiBfYnVmZmVyU2l6ZTtcbiAgICAgICAgX2J1ZmZlclNpemUgPCBJbmZpbml0eSAmJiBhZGp1c3RlZEJ1ZmZlclNpemUgPCBfYnVmZmVyLmxlbmd0aCAmJiBfYnVmZmVyLnNwbGljZSgwLCBfYnVmZmVyLmxlbmd0aCAtIGFkanVzdGVkQnVmZmVyU2l6ZSk7XG4gICAgICAgIGlmICghX2luZmluaXRlVGltZVdpbmRvdykge1xuICAgICAgICAgICAgdmFyIG5vdyA9IF90aW1lc3RhbXBQcm92aWRlci5ub3coKTtcbiAgICAgICAgICAgIHZhciBsYXN0ID0gMDtcbiAgICAgICAgICAgIGZvciAodmFyIGkgPSAxOyBpIDwgX2J1ZmZlci5sZW5ndGggJiYgX2J1ZmZlcltpXSA8PSBub3c7IGkgKz0gMikge1xuICAgICAgICAgICAgICAgIGxhc3QgPSBpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgbGFzdCAmJiBfYnVmZmVyLnNwbGljZSgwLCBsYXN0ICsgMSk7XG4gICAgICAgIH1cbiAgICB9O1xuICAgIHJldHVybiBSZXBsYXlTdWJqZWN0O1xufShTdWJqZWN0XzEuU3ViamVjdCkpO1xuZXhwb3J0cy5SZXBsYXlTdWJqZWN0ID0gUmVwbGF5U3ViamVjdDtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPVJlcGxheVN1YmplY3QuanMubWFwIiwiXCJ1c2Ugc3RyaWN0XCI7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5leHBvcnRzLlNjaGVkdWxlciA9IHZvaWQgMDtcbnZhciBkYXRlVGltZXN0YW1wUHJvdmlkZXJfMSA9IHJlcXVpcmUoXCIuL3NjaGVkdWxlci9kYXRlVGltZXN0YW1wUHJvdmlkZXJcIik7XG52YXIgU2NoZWR1bGVyID0gKGZ1bmN0aW9uICgpIHtcbiAgICBmdW5jdGlvbiBTY2hlZHVsZXIoc2NoZWR1bGVyQWN0aW9uQ3Rvciwgbm93KSB7XG4gICAgICAgIGlmIChub3cgPT09IHZvaWQgMCkgeyBub3cgPSBTY2hlZHVsZXIubm93OyB9XG4gICAgICAgIHRoaXMuc2NoZWR1bGVyQWN0aW9uQ3RvciA9IHNjaGVkdWxlckFjdGlvbkN0b3I7XG4gICAgICAgIHRoaXMubm93ID0gbm93O1xuICAgIH1cbiAgICBTY2hlZHVsZXIucHJvdG90eXBlLnNjaGVkdWxlID0gZnVuY3Rpb24gKHdvcmssIGRlbGF5LCBzdGF0ZSkge1xuICAgICAgICBpZiAoZGVsYXkgPT09IHZvaWQgMCkgeyBkZWxheSA9IDA7IH1cbiAgICAgICAgcmV0dXJuIG5ldyB0aGlzLnNjaGVkdWxlckFjdGlvbkN0b3IodGhpcywgd29yaykuc2NoZWR1bGUoc3RhdGUsIGRlbGF5KTtcbiAgICB9O1xuICAgIFNjaGVkdWxlci5ub3cgPSBkYXRlVGltZXN0YW1wUHJvdmlkZXJfMS5kYXRlVGltZXN0YW1wUHJvdmlkZXIubm93O1xuICAgIHJldHVybiBTY2hlZHVsZXI7XG59KCkpO1xuZXhwb3J0cy5TY2hlZHVsZXIgPSBTY2hlZHVsZXI7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1TY2hlZHVsZXIuanMubWFwIiwiXCJ1c2Ugc3RyaWN0XCI7XG52YXIgX19leHRlbmRzID0gKHRoaXMgJiYgdGhpcy5fX2V4dGVuZHMpIHx8IChmdW5jdGlvbiAoKSB7XG4gICAgdmFyIGV4dGVuZFN0YXRpY3MgPSBmdW5jdGlvbiAoZCwgYikge1xuICAgICAgICBleHRlbmRTdGF0aWNzID0gT2JqZWN0LnNldFByb3RvdHlwZU9mIHx8XG4gICAgICAgICAgICAoeyBfX3Byb3RvX186IFtdIH0gaW5zdGFuY2VvZiBBcnJheSAmJiBmdW5jdGlvbiAoZCwgYikgeyBkLl9fcHJvdG9fXyA9IGI7IH0pIHx8XG4gICAgICAgICAgICBmdW5jdGlvbiAoZCwgYikgeyBmb3IgKHZhciBwIGluIGIpIGlmIChPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwoYiwgcCkpIGRbcF0gPSBiW3BdOyB9O1xuICAgICAgICByZXR1cm4gZXh0ZW5kU3RhdGljcyhkLCBiKTtcbiAgICB9O1xuICAgIHJldHVybiBmdW5jdGlvbiAoZCwgYikge1xuICAgICAgICBpZiAodHlwZW9mIGIgIT09IFwiZnVuY3Rpb25cIiAmJiBiICE9PSBudWxsKVxuICAgICAgICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcihcIkNsYXNzIGV4dGVuZHMgdmFsdWUgXCIgKyBTdHJpbmcoYikgKyBcIiBpcyBub3QgYSBjb25zdHJ1Y3RvciBvciBudWxsXCIpO1xuICAgICAgICBleHRlbmRTdGF0aWNzKGQsIGIpO1xuICAgICAgICBmdW5jdGlvbiBfXygpIHsgdGhpcy5jb25zdHJ1Y3RvciA9IGQ7IH1cbiAgICAgICAgZC5wcm90b3R5cGUgPSBiID09PSBudWxsID8gT2JqZWN0LmNyZWF0ZShiKSA6IChfXy5wcm90b3R5cGUgPSBiLnByb3RvdHlwZSwgbmV3IF9fKCkpO1xuICAgIH07XG59KSgpO1xudmFyIF9fdmFsdWVzID0gKHRoaXMgJiYgdGhpcy5fX3ZhbHVlcykgfHwgZnVuY3Rpb24obykge1xuICAgIHZhciBzID0gdHlwZW9mIFN5bWJvbCA9PT0gXCJmdW5jdGlvblwiICYmIFN5bWJvbC5pdGVyYXRvciwgbSA9IHMgJiYgb1tzXSwgaSA9IDA7XG4gICAgaWYgKG0pIHJldHVybiBtLmNhbGwobyk7XG4gICAgaWYgKG8gJiYgdHlwZW9mIG8ubGVuZ3RoID09PSBcIm51bWJlclwiKSByZXR1cm4ge1xuICAgICAgICBuZXh0OiBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICBpZiAobyAmJiBpID49IG8ubGVuZ3RoKSBvID0gdm9pZCAwO1xuICAgICAgICAgICAgcmV0dXJuIHsgdmFsdWU6IG8gJiYgb1tpKytdLCBkb25lOiAhbyB9O1xuICAgICAgICB9XG4gICAgfTtcbiAgICB0aHJvdyBuZXcgVHlwZUVycm9yKHMgPyBcIk9iamVjdCBpcyBub3QgaXRlcmFibGUuXCIgOiBcIlN5bWJvbC5pdGVyYXRvciBpcyBub3QgZGVmaW5lZC5cIik7XG59O1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuZXhwb3J0cy5Bbm9ueW1vdXNTdWJqZWN0ID0gZXhwb3J0cy5TdWJqZWN0ID0gdm9pZCAwO1xudmFyIE9ic2VydmFibGVfMSA9IHJlcXVpcmUoXCIuL09ic2VydmFibGVcIik7XG52YXIgU3Vic2NyaXB0aW9uXzEgPSByZXF1aXJlKFwiLi9TdWJzY3JpcHRpb25cIik7XG52YXIgT2JqZWN0VW5zdWJzY3JpYmVkRXJyb3JfMSA9IHJlcXVpcmUoXCIuL3V0aWwvT2JqZWN0VW5zdWJzY3JpYmVkRXJyb3JcIik7XG52YXIgYXJyUmVtb3ZlXzEgPSByZXF1aXJlKFwiLi91dGlsL2FyclJlbW92ZVwiKTtcbnZhciBlcnJvckNvbnRleHRfMSA9IHJlcXVpcmUoXCIuL3V0aWwvZXJyb3JDb250ZXh0XCIpO1xudmFyIFN1YmplY3QgPSAoZnVuY3Rpb24gKF9zdXBlcikge1xuICAgIF9fZXh0ZW5kcyhTdWJqZWN0LCBfc3VwZXIpO1xuICAgIGZ1bmN0aW9uIFN1YmplY3QoKSB7XG4gICAgICAgIHZhciBfdGhpcyA9IF9zdXBlci5jYWxsKHRoaXMpIHx8IHRoaXM7XG4gICAgICAgIF90aGlzLmNsb3NlZCA9IGZhbHNlO1xuICAgICAgICBfdGhpcy5jdXJyZW50T2JzZXJ2ZXJzID0gbnVsbDtcbiAgICAgICAgX3RoaXMub2JzZXJ2ZXJzID0gW107XG4gICAgICAgIF90aGlzLmlzU3RvcHBlZCA9IGZhbHNlO1xuICAgICAgICBfdGhpcy5oYXNFcnJvciA9IGZhbHNlO1xuICAgICAgICBfdGhpcy50aHJvd25FcnJvciA9IG51bGw7XG4gICAgICAgIHJldHVybiBfdGhpcztcbiAgICB9XG4gICAgU3ViamVjdC5wcm90b3R5cGUubGlmdCA9IGZ1bmN0aW9uIChvcGVyYXRvcikge1xuICAgICAgICB2YXIgc3ViamVjdCA9IG5ldyBBbm9ueW1vdXNTdWJqZWN0KHRoaXMsIHRoaXMpO1xuICAgICAgICBzdWJqZWN0Lm9wZXJhdG9yID0gb3BlcmF0b3I7XG4gICAgICAgIHJldHVybiBzdWJqZWN0O1xuICAgIH07XG4gICAgU3ViamVjdC5wcm90b3R5cGUuX3Rocm93SWZDbG9zZWQgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIGlmICh0aGlzLmNsb3NlZCkge1xuICAgICAgICAgICAgdGhyb3cgbmV3IE9iamVjdFVuc3Vic2NyaWJlZEVycm9yXzEuT2JqZWN0VW5zdWJzY3JpYmVkRXJyb3IoKTtcbiAgICAgICAgfVxuICAgIH07XG4gICAgU3ViamVjdC5wcm90b3R5cGUubmV4dCA9IGZ1bmN0aW9uICh2YWx1ZSkge1xuICAgICAgICB2YXIgX3RoaXMgPSB0aGlzO1xuICAgICAgICBlcnJvckNvbnRleHRfMS5lcnJvckNvbnRleHQoZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgdmFyIGVfMSwgX2E7XG4gICAgICAgICAgICBfdGhpcy5fdGhyb3dJZkNsb3NlZCgpO1xuICAgICAgICAgICAgaWYgKCFfdGhpcy5pc1N0b3BwZWQpIHtcbiAgICAgICAgICAgICAgICBpZiAoIV90aGlzLmN1cnJlbnRPYnNlcnZlcnMpIHtcbiAgICAgICAgICAgICAgICAgICAgX3RoaXMuY3VycmVudE9ic2VydmVycyA9IEFycmF5LmZyb20oX3RoaXMub2JzZXJ2ZXJzKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgICAgICAgICAgZm9yICh2YXIgX2IgPSBfX3ZhbHVlcyhfdGhpcy5jdXJyZW50T2JzZXJ2ZXJzKSwgX2MgPSBfYi5uZXh0KCk7ICFfYy5kb25lOyBfYyA9IF9iLm5leHQoKSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgdmFyIG9ic2VydmVyID0gX2MudmFsdWU7XG4gICAgICAgICAgICAgICAgICAgICAgICBvYnNlcnZlci5uZXh0KHZhbHVlKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBjYXRjaCAoZV8xXzEpIHsgZV8xID0geyBlcnJvcjogZV8xXzEgfTsgfVxuICAgICAgICAgICAgICAgIGZpbmFsbHkge1xuICAgICAgICAgICAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKF9jICYmICFfYy5kb25lICYmIChfYSA9IF9iLnJldHVybikpIF9hLmNhbGwoX2IpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIGZpbmFsbHkgeyBpZiAoZV8xKSB0aHJvdyBlXzEuZXJyb3I7IH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgIH0pO1xuICAgIH07XG4gICAgU3ViamVjdC5wcm90b3R5cGUuZXJyb3IgPSBmdW5jdGlvbiAoZXJyKSB7XG4gICAgICAgIHZhciBfdGhpcyA9IHRoaXM7XG4gICAgICAgIGVycm9yQ29udGV4dF8xLmVycm9yQ29udGV4dChmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICBfdGhpcy5fdGhyb3dJZkNsb3NlZCgpO1xuICAgICAgICAgICAgaWYgKCFfdGhpcy5pc1N0b3BwZWQpIHtcbiAgICAgICAgICAgICAgICBfdGhpcy5oYXNFcnJvciA9IF90aGlzLmlzU3RvcHBlZCA9IHRydWU7XG4gICAgICAgICAgICAgICAgX3RoaXMudGhyb3duRXJyb3IgPSBlcnI7XG4gICAgICAgICAgICAgICAgdmFyIG9ic2VydmVycyA9IF90aGlzLm9ic2VydmVycztcbiAgICAgICAgICAgICAgICB3aGlsZSAob2JzZXJ2ZXJzLmxlbmd0aCkge1xuICAgICAgICAgICAgICAgICAgICBvYnNlcnZlcnMuc2hpZnQoKS5lcnJvcihlcnIpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgfSk7XG4gICAgfTtcbiAgICBTdWJqZWN0LnByb3RvdHlwZS5jb21wbGV0ZSA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgdmFyIF90aGlzID0gdGhpcztcbiAgICAgICAgZXJyb3JDb250ZXh0XzEuZXJyb3JDb250ZXh0KGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIF90aGlzLl90aHJvd0lmQ2xvc2VkKCk7XG4gICAgICAgICAgICBpZiAoIV90aGlzLmlzU3RvcHBlZCkge1xuICAgICAgICAgICAgICAgIF90aGlzLmlzU3RvcHBlZCA9IHRydWU7XG4gICAgICAgICAgICAgICAgdmFyIG9ic2VydmVycyA9IF90aGlzLm9ic2VydmVycztcbiAgICAgICAgICAgICAgICB3aGlsZSAob2JzZXJ2ZXJzLmxlbmd0aCkge1xuICAgICAgICAgICAgICAgICAgICBvYnNlcnZlcnMuc2hpZnQoKS5jb21wbGV0ZSgpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgfSk7XG4gICAgfTtcbiAgICBTdWJqZWN0LnByb3RvdHlwZS51bnN1YnNjcmliZSA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgdGhpcy5pc1N0b3BwZWQgPSB0aGlzLmNsb3NlZCA9IHRydWU7XG4gICAgICAgIHRoaXMub2JzZXJ2ZXJzID0gdGhpcy5jdXJyZW50T2JzZXJ2ZXJzID0gbnVsbDtcbiAgICB9O1xuICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShTdWJqZWN0LnByb3RvdHlwZSwgXCJvYnNlcnZlZFwiLCB7XG4gICAgICAgIGdldDogZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgdmFyIF9hO1xuICAgICAgICAgICAgcmV0dXJuICgoX2EgPSB0aGlzLm9ic2VydmVycykgPT09IG51bGwgfHwgX2EgPT09IHZvaWQgMCA/IHZvaWQgMCA6IF9hLmxlbmd0aCkgPiAwO1xuICAgICAgICB9LFxuICAgICAgICBlbnVtZXJhYmxlOiBmYWxzZSxcbiAgICAgICAgY29uZmlndXJhYmxlOiB0cnVlXG4gICAgfSk7XG4gICAgU3ViamVjdC5wcm90b3R5cGUuX3RyeVN1YnNjcmliZSA9IGZ1bmN0aW9uIChzdWJzY3JpYmVyKSB7XG4gICAgICAgIHRoaXMuX3Rocm93SWZDbG9zZWQoKTtcbiAgICAgICAgcmV0dXJuIF9zdXBlci5wcm90b3R5cGUuX3RyeVN1YnNjcmliZS5jYWxsKHRoaXMsIHN1YnNjcmliZXIpO1xuICAgIH07XG4gICAgU3ViamVjdC5wcm90b3R5cGUuX3N1YnNjcmliZSA9IGZ1bmN0aW9uIChzdWJzY3JpYmVyKSB7XG4gICAgICAgIHRoaXMuX3Rocm93SWZDbG9zZWQoKTtcbiAgICAgICAgdGhpcy5fY2hlY2tGaW5hbGl6ZWRTdGF0dXNlcyhzdWJzY3JpYmVyKTtcbiAgICAgICAgcmV0dXJuIHRoaXMuX2lubmVyU3Vic2NyaWJlKHN1YnNjcmliZXIpO1xuICAgIH07XG4gICAgU3ViamVjdC5wcm90b3R5cGUuX2lubmVyU3Vic2NyaWJlID0gZnVuY3Rpb24gKHN1YnNjcmliZXIpIHtcbiAgICAgICAgdmFyIF90aGlzID0gdGhpcztcbiAgICAgICAgdmFyIF9hID0gdGhpcywgaGFzRXJyb3IgPSBfYS5oYXNFcnJvciwgaXNTdG9wcGVkID0gX2EuaXNTdG9wcGVkLCBvYnNlcnZlcnMgPSBfYS5vYnNlcnZlcnM7XG4gICAgICAgIGlmIChoYXNFcnJvciB8fCBpc1N0b3BwZWQpIHtcbiAgICAgICAgICAgIHJldHVybiBTdWJzY3JpcHRpb25fMS5FTVBUWV9TVUJTQ1JJUFRJT047XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5jdXJyZW50T2JzZXJ2ZXJzID0gbnVsbDtcbiAgICAgICAgb2JzZXJ2ZXJzLnB1c2goc3Vic2NyaWJlcik7XG4gICAgICAgIHJldHVybiBuZXcgU3Vic2NyaXB0aW9uXzEuU3Vic2NyaXB0aW9uKGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIF90aGlzLmN1cnJlbnRPYnNlcnZlcnMgPSBudWxsO1xuICAgICAgICAgICAgYXJyUmVtb3ZlXzEuYXJyUmVtb3ZlKG9ic2VydmVycywgc3Vic2NyaWJlcik7XG4gICAgICAgIH0pO1xuICAgIH07XG4gICAgU3ViamVjdC5wcm90b3R5cGUuX2NoZWNrRmluYWxpemVkU3RhdHVzZXMgPSBmdW5jdGlvbiAoc3Vic2NyaWJlcikge1xuICAgICAgICB2YXIgX2EgPSB0aGlzLCBoYXNFcnJvciA9IF9hLmhhc0Vycm9yLCB0aHJvd25FcnJvciA9IF9hLnRocm93bkVycm9yLCBpc1N0b3BwZWQgPSBfYS5pc1N0b3BwZWQ7XG4gICAgICAgIGlmIChoYXNFcnJvcikge1xuICAgICAgICAgICAgc3Vic2NyaWJlci5lcnJvcih0aHJvd25FcnJvcik7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSBpZiAoaXNTdG9wcGVkKSB7XG4gICAgICAgICAgICBzdWJzY3JpYmVyLmNvbXBsZXRlKCk7XG4gICAgICAgIH1cbiAgICB9O1xuICAgIFN1YmplY3QucHJvdG90eXBlLmFzT2JzZXJ2YWJsZSA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgdmFyIG9ic2VydmFibGUgPSBuZXcgT2JzZXJ2YWJsZV8xLk9ic2VydmFibGUoKTtcbiAgICAgICAgb2JzZXJ2YWJsZS5zb3VyY2UgPSB0aGlzO1xuICAgICAgICByZXR1cm4gb2JzZXJ2YWJsZTtcbiAgICB9O1xuICAgIFN1YmplY3QuY3JlYXRlID0gZnVuY3Rpb24gKGRlc3RpbmF0aW9uLCBzb3VyY2UpIHtcbiAgICAgICAgcmV0dXJuIG5ldyBBbm9ueW1vdXNTdWJqZWN0KGRlc3RpbmF0aW9uLCBzb3VyY2UpO1xuICAgIH07XG4gICAgcmV0dXJuIFN1YmplY3Q7XG59KE9ic2VydmFibGVfMS5PYnNlcnZhYmxlKSk7XG5leHBvcnRzLlN1YmplY3QgPSBTdWJqZWN0O1xudmFyIEFub255bW91c1N1YmplY3QgPSAoZnVuY3Rpb24gKF9zdXBlcikge1xuICAgIF9fZXh0ZW5kcyhBbm9ueW1vdXNTdWJqZWN0LCBfc3VwZXIpO1xuICAgIGZ1bmN0aW9uIEFub255bW91c1N1YmplY3QoZGVzdGluYXRpb24sIHNvdXJjZSkge1xuICAgICAgICB2YXIgX3RoaXMgPSBfc3VwZXIuY2FsbCh0aGlzKSB8fCB0aGlzO1xuICAgICAgICBfdGhpcy5kZXN0aW5hdGlvbiA9IGRlc3RpbmF0aW9uO1xuICAgICAgICBfdGhpcy5zb3VyY2UgPSBzb3VyY2U7XG4gICAgICAgIHJldHVybiBfdGhpcztcbiAgICB9XG4gICAgQW5vbnltb3VzU3ViamVjdC5wcm90b3R5cGUubmV4dCA9IGZ1bmN0aW9uICh2YWx1ZSkge1xuICAgICAgICB2YXIgX2EsIF9iO1xuICAgICAgICAoX2IgPSAoX2EgPSB0aGlzLmRlc3RpbmF0aW9uKSA9PT0gbnVsbCB8fCBfYSA9PT0gdm9pZCAwID8gdm9pZCAwIDogX2EubmV4dCkgPT09IG51bGwgfHwgX2IgPT09IHZvaWQgMCA/IHZvaWQgMCA6IF9iLmNhbGwoX2EsIHZhbHVlKTtcbiAgICB9O1xuICAgIEFub255bW91c1N1YmplY3QucHJvdG90eXBlLmVycm9yID0gZnVuY3Rpb24gKGVycikge1xuICAgICAgICB2YXIgX2EsIF9iO1xuICAgICAgICAoX2IgPSAoX2EgPSB0aGlzLmRlc3RpbmF0aW9uKSA9PT0gbnVsbCB8fCBfYSA9PT0gdm9pZCAwID8gdm9pZCAwIDogX2EuZXJyb3IpID09PSBudWxsIHx8IF9iID09PSB2b2lkIDAgPyB2b2lkIDAgOiBfYi5jYWxsKF9hLCBlcnIpO1xuICAgIH07XG4gICAgQW5vbnltb3VzU3ViamVjdC5wcm90b3R5cGUuY29tcGxldGUgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHZhciBfYSwgX2I7XG4gICAgICAgIChfYiA9IChfYSA9IHRoaXMuZGVzdGluYXRpb24pID09PSBudWxsIHx8IF9hID09PSB2b2lkIDAgPyB2b2lkIDAgOiBfYS5jb21wbGV0ZSkgPT09IG51bGwgfHwgX2IgPT09IHZvaWQgMCA/IHZvaWQgMCA6IF9iLmNhbGwoX2EpO1xuICAgIH07XG4gICAgQW5vbnltb3VzU3ViamVjdC5wcm90b3R5cGUuX3N1YnNjcmliZSA9IGZ1bmN0aW9uIChzdWJzY3JpYmVyKSB7XG4gICAgICAgIHZhciBfYSwgX2I7XG4gICAgICAgIHJldHVybiAoX2IgPSAoX2EgPSB0aGlzLnNvdXJjZSkgPT09IG51bGwgfHwgX2EgPT09IHZvaWQgMCA/IHZvaWQgMCA6IF9hLnN1YnNjcmliZShzdWJzY3JpYmVyKSkgIT09IG51bGwgJiYgX2IgIT09IHZvaWQgMCA/IF9iIDogU3Vic2NyaXB0aW9uXzEuRU1QVFlfU1VCU0NSSVBUSU9OO1xuICAgIH07XG4gICAgcmV0dXJuIEFub255bW91c1N1YmplY3Q7XG59KFN1YmplY3QpKTtcbmV4cG9ydHMuQW5vbnltb3VzU3ViamVjdCA9IEFub255bW91c1N1YmplY3Q7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1TdWJqZWN0LmpzLm1hcCIsIlwidXNlIHN0cmljdFwiO1xudmFyIF9fZXh0ZW5kcyA9ICh0aGlzICYmIHRoaXMuX19leHRlbmRzKSB8fCAoZnVuY3Rpb24gKCkge1xuICAgIHZhciBleHRlbmRTdGF0aWNzID0gZnVuY3Rpb24gKGQsIGIpIHtcbiAgICAgICAgZXh0ZW5kU3RhdGljcyA9IE9iamVjdC5zZXRQcm90b3R5cGVPZiB8fFxuICAgICAgICAgICAgKHsgX19wcm90b19fOiBbXSB9IGluc3RhbmNlb2YgQXJyYXkgJiYgZnVuY3Rpb24gKGQsIGIpIHsgZC5fX3Byb3RvX18gPSBiOyB9KSB8fFxuICAgICAgICAgICAgZnVuY3Rpb24gKGQsIGIpIHsgZm9yICh2YXIgcCBpbiBiKSBpZiAoT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKGIsIHApKSBkW3BdID0gYltwXTsgfTtcbiAgICAgICAgcmV0dXJuIGV4dGVuZFN0YXRpY3MoZCwgYik7XG4gICAgfTtcbiAgICByZXR1cm4gZnVuY3Rpb24gKGQsIGIpIHtcbiAgICAgICAgaWYgKHR5cGVvZiBiICE9PSBcImZ1bmN0aW9uXCIgJiYgYiAhPT0gbnVsbClcbiAgICAgICAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoXCJDbGFzcyBleHRlbmRzIHZhbHVlIFwiICsgU3RyaW5nKGIpICsgXCIgaXMgbm90IGEgY29uc3RydWN0b3Igb3IgbnVsbFwiKTtcbiAgICAgICAgZXh0ZW5kU3RhdGljcyhkLCBiKTtcbiAgICAgICAgZnVuY3Rpb24gX18oKSB7IHRoaXMuY29uc3RydWN0b3IgPSBkOyB9XG4gICAgICAgIGQucHJvdG90eXBlID0gYiA9PT0gbnVsbCA/IE9iamVjdC5jcmVhdGUoYikgOiAoX18ucHJvdG90eXBlID0gYi5wcm90b3R5cGUsIG5ldyBfXygpKTtcbiAgICB9O1xufSkoKTtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmV4cG9ydHMuRU1QVFlfT0JTRVJWRVIgPSBleHBvcnRzLlNhZmVTdWJzY3JpYmVyID0gZXhwb3J0cy5TdWJzY3JpYmVyID0gdm9pZCAwO1xudmFyIGlzRnVuY3Rpb25fMSA9IHJlcXVpcmUoXCIuL3V0aWwvaXNGdW5jdGlvblwiKTtcbnZhciBTdWJzY3JpcHRpb25fMSA9IHJlcXVpcmUoXCIuL1N1YnNjcmlwdGlvblwiKTtcbnZhciBjb25maWdfMSA9IHJlcXVpcmUoXCIuL2NvbmZpZ1wiKTtcbnZhciByZXBvcnRVbmhhbmRsZWRFcnJvcl8xID0gcmVxdWlyZShcIi4vdXRpbC9yZXBvcnRVbmhhbmRsZWRFcnJvclwiKTtcbnZhciBub29wXzEgPSByZXF1aXJlKFwiLi91dGlsL25vb3BcIik7XG52YXIgTm90aWZpY2F0aW9uRmFjdG9yaWVzXzEgPSByZXF1aXJlKFwiLi9Ob3RpZmljYXRpb25GYWN0b3JpZXNcIik7XG52YXIgdGltZW91dFByb3ZpZGVyXzEgPSByZXF1aXJlKFwiLi9zY2hlZHVsZXIvdGltZW91dFByb3ZpZGVyXCIpO1xudmFyIGVycm9yQ29udGV4dF8xID0gcmVxdWlyZShcIi4vdXRpbC9lcnJvckNvbnRleHRcIik7XG52YXIgU3Vic2NyaWJlciA9IChmdW5jdGlvbiAoX3N1cGVyKSB7XG4gICAgX19leHRlbmRzKFN1YnNjcmliZXIsIF9zdXBlcik7XG4gICAgZnVuY3Rpb24gU3Vic2NyaWJlcihkZXN0aW5hdGlvbikge1xuICAgICAgICB2YXIgX3RoaXMgPSBfc3VwZXIuY2FsbCh0aGlzKSB8fCB0aGlzO1xuICAgICAgICBfdGhpcy5pc1N0b3BwZWQgPSBmYWxzZTtcbiAgICAgICAgaWYgKGRlc3RpbmF0aW9uKSB7XG4gICAgICAgICAgICBfdGhpcy5kZXN0aW5hdGlvbiA9IGRlc3RpbmF0aW9uO1xuICAgICAgICAgICAgaWYgKFN1YnNjcmlwdGlvbl8xLmlzU3Vic2NyaXB0aW9uKGRlc3RpbmF0aW9uKSkge1xuICAgICAgICAgICAgICAgIGRlc3RpbmF0aW9uLmFkZChfdGhpcyk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICBfdGhpcy5kZXN0aW5hdGlvbiA9IGV4cG9ydHMuRU1QVFlfT0JTRVJWRVI7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIF90aGlzO1xuICAgIH1cbiAgICBTdWJzY3JpYmVyLmNyZWF0ZSA9IGZ1bmN0aW9uIChuZXh0LCBlcnJvciwgY29tcGxldGUpIHtcbiAgICAgICAgcmV0dXJuIG5ldyBTYWZlU3Vic2NyaWJlcihuZXh0LCBlcnJvciwgY29tcGxldGUpO1xuICAgIH07XG4gICAgU3Vic2NyaWJlci5wcm90b3R5cGUubmV4dCA9IGZ1bmN0aW9uICh2YWx1ZSkge1xuICAgICAgICBpZiAodGhpcy5pc1N0b3BwZWQpIHtcbiAgICAgICAgICAgIGhhbmRsZVN0b3BwZWROb3RpZmljYXRpb24oTm90aWZpY2F0aW9uRmFjdG9yaWVzXzEubmV4dE5vdGlmaWNhdGlvbih2YWx1ZSksIHRoaXMpO1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgdGhpcy5fbmV4dCh2YWx1ZSk7XG4gICAgICAgIH1cbiAgICB9O1xuICAgIFN1YnNjcmliZXIucHJvdG90eXBlLmVycm9yID0gZnVuY3Rpb24gKGVycikge1xuICAgICAgICBpZiAodGhpcy5pc1N0b3BwZWQpIHtcbiAgICAgICAgICAgIGhhbmRsZVN0b3BwZWROb3RpZmljYXRpb24oTm90aWZpY2F0aW9uRmFjdG9yaWVzXzEuZXJyb3JOb3RpZmljYXRpb24oZXJyKSwgdGhpcyk7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICB0aGlzLmlzU3RvcHBlZCA9IHRydWU7XG4gICAgICAgICAgICB0aGlzLl9lcnJvcihlcnIpO1xuICAgICAgICB9XG4gICAgfTtcbiAgICBTdWJzY3JpYmVyLnByb3RvdHlwZS5jb21wbGV0ZSA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgaWYgKHRoaXMuaXNTdG9wcGVkKSB7XG4gICAgICAgICAgICBoYW5kbGVTdG9wcGVkTm90aWZpY2F0aW9uKE5vdGlmaWNhdGlvbkZhY3Rvcmllc18xLkNPTVBMRVRFX05PVElGSUNBVElPTiwgdGhpcyk7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICB0aGlzLmlzU3RvcHBlZCA9IHRydWU7XG4gICAgICAgICAgICB0aGlzLl9jb21wbGV0ZSgpO1xuICAgICAgICB9XG4gICAgfTtcbiAgICBTdWJzY3JpYmVyLnByb3RvdHlwZS51bnN1YnNjcmliZSA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgaWYgKCF0aGlzLmNsb3NlZCkge1xuICAgICAgICAgICAgdGhpcy5pc1N0b3BwZWQgPSB0cnVlO1xuICAgICAgICAgICAgX3N1cGVyLnByb3RvdHlwZS51bnN1YnNjcmliZS5jYWxsKHRoaXMpO1xuICAgICAgICAgICAgdGhpcy5kZXN0aW5hdGlvbiA9IG51bGw7XG4gICAgICAgIH1cbiAgICB9O1xuICAgIFN1YnNjcmliZXIucHJvdG90eXBlLl9uZXh0ID0gZnVuY3Rpb24gKHZhbHVlKSB7XG4gICAgICAgIHRoaXMuZGVzdGluYXRpb24ubmV4dCh2YWx1ZSk7XG4gICAgfTtcbiAgICBTdWJzY3JpYmVyLnByb3RvdHlwZS5fZXJyb3IgPSBmdW5jdGlvbiAoZXJyKSB7XG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgICB0aGlzLmRlc3RpbmF0aW9uLmVycm9yKGVycik7XG4gICAgICAgIH1cbiAgICAgICAgZmluYWxseSB7XG4gICAgICAgICAgICB0aGlzLnVuc3Vic2NyaWJlKCk7XG4gICAgICAgIH1cbiAgICB9O1xuICAgIFN1YnNjcmliZXIucHJvdG90eXBlLl9jb21wbGV0ZSA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgIHRoaXMuZGVzdGluYXRpb24uY29tcGxldGUoKTtcbiAgICAgICAgfVxuICAgICAgICBmaW5hbGx5IHtcbiAgICAgICAgICAgIHRoaXMudW5zdWJzY3JpYmUoKTtcbiAgICAgICAgfVxuICAgIH07XG4gICAgcmV0dXJuIFN1YnNjcmliZXI7XG59KFN1YnNjcmlwdGlvbl8xLlN1YnNjcmlwdGlvbikpO1xuZXhwb3J0cy5TdWJzY3JpYmVyID0gU3Vic2NyaWJlcjtcbnZhciBfYmluZCA9IEZ1bmN0aW9uLnByb3RvdHlwZS5iaW5kO1xuZnVuY3Rpb24gYmluZChmbiwgdGhpc0FyZykge1xuICAgIHJldHVybiBfYmluZC5jYWxsKGZuLCB0aGlzQXJnKTtcbn1cbnZhciBDb25zdW1lck9ic2VydmVyID0gKGZ1bmN0aW9uICgpIHtcbiAgICBmdW5jdGlvbiBDb25zdW1lck9ic2VydmVyKHBhcnRpYWxPYnNlcnZlcikge1xuICAgICAgICB0aGlzLnBhcnRpYWxPYnNlcnZlciA9IHBhcnRpYWxPYnNlcnZlcjtcbiAgICB9XG4gICAgQ29uc3VtZXJPYnNlcnZlci5wcm90b3R5cGUubmV4dCA9IGZ1bmN0aW9uICh2YWx1ZSkge1xuICAgICAgICB2YXIgcGFydGlhbE9ic2VydmVyID0gdGhpcy5wYXJ0aWFsT2JzZXJ2ZXI7XG4gICAgICAgIGlmIChwYXJ0aWFsT2JzZXJ2ZXIubmV4dCkge1xuICAgICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgICAgICBwYXJ0aWFsT2JzZXJ2ZXIubmV4dCh2YWx1ZSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBjYXRjaCAoZXJyb3IpIHtcbiAgICAgICAgICAgICAgICBoYW5kbGVVbmhhbmRsZWRFcnJvcihlcnJvcik7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9O1xuICAgIENvbnN1bWVyT2JzZXJ2ZXIucHJvdG90eXBlLmVycm9yID0gZnVuY3Rpb24gKGVycikge1xuICAgICAgICB2YXIgcGFydGlhbE9ic2VydmVyID0gdGhpcy5wYXJ0aWFsT2JzZXJ2ZXI7XG4gICAgICAgIGlmIChwYXJ0aWFsT2JzZXJ2ZXIuZXJyb3IpIHtcbiAgICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICAgICAgcGFydGlhbE9ic2VydmVyLmVycm9yKGVycik7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBjYXRjaCAoZXJyb3IpIHtcbiAgICAgICAgICAgICAgICBoYW5kbGVVbmhhbmRsZWRFcnJvcihlcnJvcik7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICBoYW5kbGVVbmhhbmRsZWRFcnJvcihlcnIpO1xuICAgICAgICB9XG4gICAgfTtcbiAgICBDb25zdW1lck9ic2VydmVyLnByb3RvdHlwZS5jb21wbGV0ZSA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgdmFyIHBhcnRpYWxPYnNlcnZlciA9IHRoaXMucGFydGlhbE9ic2VydmVyO1xuICAgICAgICBpZiAocGFydGlhbE9ic2VydmVyLmNvbXBsZXRlKSB7XG4gICAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgICAgIHBhcnRpYWxPYnNlcnZlci5jb21wbGV0ZSgpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgY2F0Y2ggKGVycm9yKSB7XG4gICAgICAgICAgICAgICAgaGFuZGxlVW5oYW5kbGVkRXJyb3IoZXJyb3IpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfTtcbiAgICByZXR1cm4gQ29uc3VtZXJPYnNlcnZlcjtcbn0oKSk7XG52YXIgU2FmZVN1YnNjcmliZXIgPSAoZnVuY3Rpb24gKF9zdXBlcikge1xuICAgIF9fZXh0ZW5kcyhTYWZlU3Vic2NyaWJlciwgX3N1cGVyKTtcbiAgICBmdW5jdGlvbiBTYWZlU3Vic2NyaWJlcihvYnNlcnZlck9yTmV4dCwgZXJyb3IsIGNvbXBsZXRlKSB7XG4gICAgICAgIHZhciBfdGhpcyA9IF9zdXBlci5jYWxsKHRoaXMpIHx8IHRoaXM7XG4gICAgICAgIHZhciBwYXJ0aWFsT2JzZXJ2ZXI7XG4gICAgICAgIGlmIChpc0Z1bmN0aW9uXzEuaXNGdW5jdGlvbihvYnNlcnZlck9yTmV4dCkgfHwgIW9ic2VydmVyT3JOZXh0KSB7XG4gICAgICAgICAgICBwYXJ0aWFsT2JzZXJ2ZXIgPSB7XG4gICAgICAgICAgICAgICAgbmV4dDogKG9ic2VydmVyT3JOZXh0ICE9PSBudWxsICYmIG9ic2VydmVyT3JOZXh0ICE9PSB2b2lkIDAgPyBvYnNlcnZlck9yTmV4dCA6IHVuZGVmaW5lZCksXG4gICAgICAgICAgICAgICAgZXJyb3I6IGVycm9yICE9PSBudWxsICYmIGVycm9yICE9PSB2b2lkIDAgPyBlcnJvciA6IHVuZGVmaW5lZCxcbiAgICAgICAgICAgICAgICBjb21wbGV0ZTogY29tcGxldGUgIT09IG51bGwgJiYgY29tcGxldGUgIT09IHZvaWQgMCA/IGNvbXBsZXRlIDogdW5kZWZpbmVkLFxuICAgICAgICAgICAgfTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIHZhciBjb250ZXh0XzE7XG4gICAgICAgICAgICBpZiAoX3RoaXMgJiYgY29uZmlnXzEuY29uZmlnLnVzZURlcHJlY2F0ZWROZXh0Q29udGV4dCkge1xuICAgICAgICAgICAgICAgIGNvbnRleHRfMSA9IE9iamVjdC5jcmVhdGUob2JzZXJ2ZXJPck5leHQpO1xuICAgICAgICAgICAgICAgIGNvbnRleHRfMS51bnN1YnNjcmliZSA9IGZ1bmN0aW9uICgpIHsgcmV0dXJuIF90aGlzLnVuc3Vic2NyaWJlKCk7IH07XG4gICAgICAgICAgICAgICAgcGFydGlhbE9ic2VydmVyID0ge1xuICAgICAgICAgICAgICAgICAgICBuZXh0OiBvYnNlcnZlck9yTmV4dC5uZXh0ICYmIGJpbmQob2JzZXJ2ZXJPck5leHQubmV4dCwgY29udGV4dF8xKSxcbiAgICAgICAgICAgICAgICAgICAgZXJyb3I6IG9ic2VydmVyT3JOZXh0LmVycm9yICYmIGJpbmQob2JzZXJ2ZXJPck5leHQuZXJyb3IsIGNvbnRleHRfMSksXG4gICAgICAgICAgICAgICAgICAgIGNvbXBsZXRlOiBvYnNlcnZlck9yTmV4dC5jb21wbGV0ZSAmJiBiaW5kKG9ic2VydmVyT3JOZXh0LmNvbXBsZXRlLCBjb250ZXh0XzEpLFxuICAgICAgICAgICAgICAgIH07XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICBwYXJ0aWFsT2JzZXJ2ZXIgPSBvYnNlcnZlck9yTmV4dDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBfdGhpcy5kZXN0aW5hdGlvbiA9IG5ldyBDb25zdW1lck9ic2VydmVyKHBhcnRpYWxPYnNlcnZlcik7XG4gICAgICAgIHJldHVybiBfdGhpcztcbiAgICB9XG4gICAgcmV0dXJuIFNhZmVTdWJzY3JpYmVyO1xufShTdWJzY3JpYmVyKSk7XG5leHBvcnRzLlNhZmVTdWJzY3JpYmVyID0gU2FmZVN1YnNjcmliZXI7XG5mdW5jdGlvbiBoYW5kbGVVbmhhbmRsZWRFcnJvcihlcnJvcikge1xuICAgIGlmIChjb25maWdfMS5jb25maWcudXNlRGVwcmVjYXRlZFN5bmNocm9ub3VzRXJyb3JIYW5kbGluZykge1xuICAgICAgICBlcnJvckNvbnRleHRfMS5jYXB0dXJlRXJyb3IoZXJyb3IpO1xuICAgIH1cbiAgICBlbHNlIHtcbiAgICAgICAgcmVwb3J0VW5oYW5kbGVkRXJyb3JfMS5yZXBvcnRVbmhhbmRsZWRFcnJvcihlcnJvcik7XG4gICAgfVxufVxuZnVuY3Rpb24gZGVmYXVsdEVycm9ySGFuZGxlcihlcnIpIHtcbiAgICB0aHJvdyBlcnI7XG59XG5mdW5jdGlvbiBoYW5kbGVTdG9wcGVkTm90aWZpY2F0aW9uKG5vdGlmaWNhdGlvbiwgc3Vic2NyaWJlcikge1xuICAgIHZhciBvblN0b3BwZWROb3RpZmljYXRpb24gPSBjb25maWdfMS5jb25maWcub25TdG9wcGVkTm90aWZpY2F0aW9uO1xuICAgIG9uU3RvcHBlZE5vdGlmaWNhdGlvbiAmJiB0aW1lb3V0UHJvdmlkZXJfMS50aW1lb3V0UHJvdmlkZXIuc2V0VGltZW91dChmdW5jdGlvbiAoKSB7IHJldHVybiBvblN0b3BwZWROb3RpZmljYXRpb24obm90aWZpY2F0aW9uLCBzdWJzY3JpYmVyKTsgfSk7XG59XG5leHBvcnRzLkVNUFRZX09CU0VSVkVSID0ge1xuICAgIGNsb3NlZDogdHJ1ZSxcbiAgICBuZXh0OiBub29wXzEubm9vcCxcbiAgICBlcnJvcjogZGVmYXVsdEVycm9ySGFuZGxlcixcbiAgICBjb21wbGV0ZTogbm9vcF8xLm5vb3AsXG59O1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9U3Vic2NyaWJlci5qcy5tYXAiLCJcInVzZSBzdHJpY3RcIjtcbnZhciBfX3ZhbHVlcyA9ICh0aGlzICYmIHRoaXMuX192YWx1ZXMpIHx8IGZ1bmN0aW9uKG8pIHtcbiAgICB2YXIgcyA9IHR5cGVvZiBTeW1ib2wgPT09IFwiZnVuY3Rpb25cIiAmJiBTeW1ib2wuaXRlcmF0b3IsIG0gPSBzICYmIG9bc10sIGkgPSAwO1xuICAgIGlmIChtKSByZXR1cm4gbS5jYWxsKG8pO1xuICAgIGlmIChvICYmIHR5cGVvZiBvLmxlbmd0aCA9PT0gXCJudW1iZXJcIikgcmV0dXJuIHtcbiAgICAgICAgbmV4dDogZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgaWYgKG8gJiYgaSA+PSBvLmxlbmd0aCkgbyA9IHZvaWQgMDtcbiAgICAgICAgICAgIHJldHVybiB7IHZhbHVlOiBvICYmIG9baSsrXSwgZG9uZTogIW8gfTtcbiAgICAgICAgfVxuICAgIH07XG4gICAgdGhyb3cgbmV3IFR5cGVFcnJvcihzID8gXCJPYmplY3QgaXMgbm90IGl0ZXJhYmxlLlwiIDogXCJTeW1ib2wuaXRlcmF0b3IgaXMgbm90IGRlZmluZWQuXCIpO1xufTtcbnZhciBfX3JlYWQgPSAodGhpcyAmJiB0aGlzLl9fcmVhZCkgfHwgZnVuY3Rpb24gKG8sIG4pIHtcbiAgICB2YXIgbSA9IHR5cGVvZiBTeW1ib2wgPT09IFwiZnVuY3Rpb25cIiAmJiBvW1N5bWJvbC5pdGVyYXRvcl07XG4gICAgaWYgKCFtKSByZXR1cm4gbztcbiAgICB2YXIgaSA9IG0uY2FsbChvKSwgciwgYXIgPSBbXSwgZTtcbiAgICB0cnkge1xuICAgICAgICB3aGlsZSAoKG4gPT09IHZvaWQgMCB8fCBuLS0gPiAwKSAmJiAhKHIgPSBpLm5leHQoKSkuZG9uZSkgYXIucHVzaChyLnZhbHVlKTtcbiAgICB9XG4gICAgY2F0Y2ggKGVycm9yKSB7IGUgPSB7IGVycm9yOiBlcnJvciB9OyB9XG4gICAgZmluYWxseSB7XG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgICBpZiAociAmJiAhci5kb25lICYmIChtID0gaVtcInJldHVyblwiXSkpIG0uY2FsbChpKTtcbiAgICAgICAgfVxuICAgICAgICBmaW5hbGx5IHsgaWYgKGUpIHRocm93IGUuZXJyb3I7IH1cbiAgICB9XG4gICAgcmV0dXJuIGFyO1xufTtcbnZhciBfX3NwcmVhZEFycmF5ID0gKHRoaXMgJiYgdGhpcy5fX3NwcmVhZEFycmF5KSB8fCBmdW5jdGlvbiAodG8sIGZyb20pIHtcbiAgICBmb3IgKHZhciBpID0gMCwgaWwgPSBmcm9tLmxlbmd0aCwgaiA9IHRvLmxlbmd0aDsgaSA8IGlsOyBpKyssIGorKylcbiAgICAgICAgdG9bal0gPSBmcm9tW2ldO1xuICAgIHJldHVybiB0bztcbn07XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5leHBvcnRzLmlzU3Vic2NyaXB0aW9uID0gZXhwb3J0cy5FTVBUWV9TVUJTQ1JJUFRJT04gPSBleHBvcnRzLlN1YnNjcmlwdGlvbiA9IHZvaWQgMDtcbnZhciBpc0Z1bmN0aW9uXzEgPSByZXF1aXJlKFwiLi91dGlsL2lzRnVuY3Rpb25cIik7XG52YXIgVW5zdWJzY3JpcHRpb25FcnJvcl8xID0gcmVxdWlyZShcIi4vdXRpbC9VbnN1YnNjcmlwdGlvbkVycm9yXCIpO1xudmFyIGFyclJlbW92ZV8xID0gcmVxdWlyZShcIi4vdXRpbC9hcnJSZW1vdmVcIik7XG52YXIgU3Vic2NyaXB0aW9uID0gKGZ1bmN0aW9uICgpIHtcbiAgICBmdW5jdGlvbiBTdWJzY3JpcHRpb24oaW5pdGlhbFRlYXJkb3duKSB7XG4gICAgICAgIHRoaXMuaW5pdGlhbFRlYXJkb3duID0gaW5pdGlhbFRlYXJkb3duO1xuICAgICAgICB0aGlzLmNsb3NlZCA9IGZhbHNlO1xuICAgICAgICB0aGlzLl9wYXJlbnRhZ2UgPSBudWxsO1xuICAgICAgICB0aGlzLl9maW5hbGl6ZXJzID0gbnVsbDtcbiAgICB9XG4gICAgU3Vic2NyaXB0aW9uLnByb3RvdHlwZS51bnN1YnNjcmliZSA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgdmFyIGVfMSwgX2EsIGVfMiwgX2I7XG4gICAgICAgIHZhciBlcnJvcnM7XG4gICAgICAgIGlmICghdGhpcy5jbG9zZWQpIHtcbiAgICAgICAgICAgIHRoaXMuY2xvc2VkID0gdHJ1ZTtcbiAgICAgICAgICAgIHZhciBfcGFyZW50YWdlID0gdGhpcy5fcGFyZW50YWdlO1xuICAgICAgICAgICAgaWYgKF9wYXJlbnRhZ2UpIHtcbiAgICAgICAgICAgICAgICB0aGlzLl9wYXJlbnRhZ2UgPSBudWxsO1xuICAgICAgICAgICAgICAgIGlmIChBcnJheS5pc0FycmF5KF9wYXJlbnRhZ2UpKSB7XG4gICAgICAgICAgICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBmb3IgKHZhciBfcGFyZW50YWdlXzEgPSBfX3ZhbHVlcyhfcGFyZW50YWdlKSwgX3BhcmVudGFnZV8xXzEgPSBfcGFyZW50YWdlXzEubmV4dCgpOyAhX3BhcmVudGFnZV8xXzEuZG9uZTsgX3BhcmVudGFnZV8xXzEgPSBfcGFyZW50YWdlXzEubmV4dCgpKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIHBhcmVudF8xID0gX3BhcmVudGFnZV8xXzEudmFsdWU7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcGFyZW50XzEucmVtb3ZlKHRoaXMpO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIGNhdGNoIChlXzFfMSkgeyBlXzEgPSB7IGVycm9yOiBlXzFfMSB9OyB9XG4gICAgICAgICAgICAgICAgICAgIGZpbmFsbHkge1xuICAgICAgICAgICAgICAgICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoX3BhcmVudGFnZV8xXzEgJiYgIV9wYXJlbnRhZ2VfMV8xLmRvbmUgJiYgKF9hID0gX3BhcmVudGFnZV8xLnJldHVybikpIF9hLmNhbGwoX3BhcmVudGFnZV8xKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIGZpbmFsbHkgeyBpZiAoZV8xKSB0aHJvdyBlXzEuZXJyb3I7IH1cbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgX3BhcmVudGFnZS5yZW1vdmUodGhpcyk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgdmFyIGluaXRpYWxGaW5hbGl6ZXIgPSB0aGlzLmluaXRpYWxUZWFyZG93bjtcbiAgICAgICAgICAgIGlmIChpc0Z1bmN0aW9uXzEuaXNGdW5jdGlvbihpbml0aWFsRmluYWxpemVyKSkge1xuICAgICAgICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICAgICAgICAgIGluaXRpYWxGaW5hbGl6ZXIoKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgY2F0Y2ggKGUpIHtcbiAgICAgICAgICAgICAgICAgICAgZXJyb3JzID0gZSBpbnN0YW5jZW9mIFVuc3Vic2NyaXB0aW9uRXJyb3JfMS5VbnN1YnNjcmlwdGlvbkVycm9yID8gZS5lcnJvcnMgOiBbZV07XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgdmFyIF9maW5hbGl6ZXJzID0gdGhpcy5fZmluYWxpemVycztcbiAgICAgICAgICAgIGlmIChfZmluYWxpemVycykge1xuICAgICAgICAgICAgICAgIHRoaXMuX2ZpbmFsaXplcnMgPSBudWxsO1xuICAgICAgICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICAgICAgICAgIGZvciAodmFyIF9maW5hbGl6ZXJzXzEgPSBfX3ZhbHVlcyhfZmluYWxpemVycyksIF9maW5hbGl6ZXJzXzFfMSA9IF9maW5hbGl6ZXJzXzEubmV4dCgpOyAhX2ZpbmFsaXplcnNfMV8xLmRvbmU7IF9maW5hbGl6ZXJzXzFfMSA9IF9maW5hbGl6ZXJzXzEubmV4dCgpKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICB2YXIgZmluYWxpemVyID0gX2ZpbmFsaXplcnNfMV8xLnZhbHVlO1xuICAgICAgICAgICAgICAgICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBleGVjRmluYWxpemVyKGZpbmFsaXplcik7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICBjYXRjaCAoZXJyKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZXJyb3JzID0gZXJyb3JzICE9PSBudWxsICYmIGVycm9ycyAhPT0gdm9pZCAwID8gZXJyb3JzIDogW107XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGVyciBpbnN0YW5jZW9mIFVuc3Vic2NyaXB0aW9uRXJyb3JfMS5VbnN1YnNjcmlwdGlvbkVycm9yKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGVycm9ycyA9IF9fc3ByZWFkQXJyYXkoX19zcHJlYWRBcnJheShbXSwgX19yZWFkKGVycm9ycykpLCBfX3JlYWQoZXJyLmVycm9ycykpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZXJyb3JzLnB1c2goZXJyKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgY2F0Y2ggKGVfMl8xKSB7IGVfMiA9IHsgZXJyb3I6IGVfMl8xIH07IH1cbiAgICAgICAgICAgICAgICBmaW5hbGx5IHtcbiAgICAgICAgICAgICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChfZmluYWxpemVyc18xXzEgJiYgIV9maW5hbGl6ZXJzXzFfMS5kb25lICYmIChfYiA9IF9maW5hbGl6ZXJzXzEucmV0dXJuKSkgX2IuY2FsbChfZmluYWxpemVyc18xKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICBmaW5hbGx5IHsgaWYgKGVfMikgdGhyb3cgZV8yLmVycm9yOyB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKGVycm9ycykge1xuICAgICAgICAgICAgICAgIHRocm93IG5ldyBVbnN1YnNjcmlwdGlvbkVycm9yXzEuVW5zdWJzY3JpcHRpb25FcnJvcihlcnJvcnMpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfTtcbiAgICBTdWJzY3JpcHRpb24ucHJvdG90eXBlLmFkZCA9IGZ1bmN0aW9uICh0ZWFyZG93bikge1xuICAgICAgICB2YXIgX2E7XG4gICAgICAgIGlmICh0ZWFyZG93biAmJiB0ZWFyZG93biAhPT0gdGhpcykge1xuICAgICAgICAgICAgaWYgKHRoaXMuY2xvc2VkKSB7XG4gICAgICAgICAgICAgICAgZXhlY0ZpbmFsaXplcih0ZWFyZG93bik7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICBpZiAodGVhcmRvd24gaW5zdGFuY2VvZiBTdWJzY3JpcHRpb24pIHtcbiAgICAgICAgICAgICAgICAgICAgaWYgKHRlYXJkb3duLmNsb3NlZCB8fCB0ZWFyZG93bi5faGFzUGFyZW50KHRoaXMpKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgdGVhcmRvd24uX2FkZFBhcmVudCh0aGlzKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgKHRoaXMuX2ZpbmFsaXplcnMgPSAoX2EgPSB0aGlzLl9maW5hbGl6ZXJzKSAhPT0gbnVsbCAmJiBfYSAhPT0gdm9pZCAwID8gX2EgOiBbXSkucHVzaCh0ZWFyZG93bik7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9O1xuICAgIFN1YnNjcmlwdGlvbi5wcm90b3R5cGUuX2hhc1BhcmVudCA9IGZ1bmN0aW9uIChwYXJlbnQpIHtcbiAgICAgICAgdmFyIF9wYXJlbnRhZ2UgPSB0aGlzLl9wYXJlbnRhZ2U7XG4gICAgICAgIHJldHVybiBfcGFyZW50YWdlID09PSBwYXJlbnQgfHwgKEFycmF5LmlzQXJyYXkoX3BhcmVudGFnZSkgJiYgX3BhcmVudGFnZS5pbmNsdWRlcyhwYXJlbnQpKTtcbiAgICB9O1xuICAgIFN1YnNjcmlwdGlvbi5wcm90b3R5cGUuX2FkZFBhcmVudCA9IGZ1bmN0aW9uIChwYXJlbnQpIHtcbiAgICAgICAgdmFyIF9wYXJlbnRhZ2UgPSB0aGlzLl9wYXJlbnRhZ2U7XG4gICAgICAgIHRoaXMuX3BhcmVudGFnZSA9IEFycmF5LmlzQXJyYXkoX3BhcmVudGFnZSkgPyAoX3BhcmVudGFnZS5wdXNoKHBhcmVudCksIF9wYXJlbnRhZ2UpIDogX3BhcmVudGFnZSA/IFtfcGFyZW50YWdlLCBwYXJlbnRdIDogcGFyZW50O1xuICAgIH07XG4gICAgU3Vic2NyaXB0aW9uLnByb3RvdHlwZS5fcmVtb3ZlUGFyZW50ID0gZnVuY3Rpb24gKHBhcmVudCkge1xuICAgICAgICB2YXIgX3BhcmVudGFnZSA9IHRoaXMuX3BhcmVudGFnZTtcbiAgICAgICAgaWYgKF9wYXJlbnRhZ2UgPT09IHBhcmVudCkge1xuICAgICAgICAgICAgdGhpcy5fcGFyZW50YWdlID0gbnVsbDtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIGlmIChBcnJheS5pc0FycmF5KF9wYXJlbnRhZ2UpKSB7XG4gICAgICAgICAgICBhcnJSZW1vdmVfMS5hcnJSZW1vdmUoX3BhcmVudGFnZSwgcGFyZW50KTtcbiAgICAgICAgfVxuICAgIH07XG4gICAgU3Vic2NyaXB0aW9uLnByb3RvdHlwZS5yZW1vdmUgPSBmdW5jdGlvbiAodGVhcmRvd24pIHtcbiAgICAgICAgdmFyIF9maW5hbGl6ZXJzID0gdGhpcy5fZmluYWxpemVycztcbiAgICAgICAgX2ZpbmFsaXplcnMgJiYgYXJyUmVtb3ZlXzEuYXJyUmVtb3ZlKF9maW5hbGl6ZXJzLCB0ZWFyZG93bik7XG4gICAgICAgIGlmICh0ZWFyZG93biBpbnN0YW5jZW9mIFN1YnNjcmlwdGlvbikge1xuICAgICAgICAgICAgdGVhcmRvd24uX3JlbW92ZVBhcmVudCh0aGlzKTtcbiAgICAgICAgfVxuICAgIH07XG4gICAgU3Vic2NyaXB0aW9uLkVNUFRZID0gKGZ1bmN0aW9uICgpIHtcbiAgICAgICAgdmFyIGVtcHR5ID0gbmV3IFN1YnNjcmlwdGlvbigpO1xuICAgICAgICBlbXB0eS5jbG9zZWQgPSB0cnVlO1xuICAgICAgICByZXR1cm4gZW1wdHk7XG4gICAgfSkoKTtcbiAgICByZXR1cm4gU3Vic2NyaXB0aW9uO1xufSgpKTtcbmV4cG9ydHMuU3Vic2NyaXB0aW9uID0gU3Vic2NyaXB0aW9uO1xuZXhwb3J0cy5FTVBUWV9TVUJTQ1JJUFRJT04gPSBTdWJzY3JpcHRpb24uRU1QVFk7XG5mdW5jdGlvbiBpc1N1YnNjcmlwdGlvbih2YWx1ZSkge1xuICAgIHJldHVybiAodmFsdWUgaW5zdGFuY2VvZiBTdWJzY3JpcHRpb24gfHxcbiAgICAgICAgKHZhbHVlICYmICdjbG9zZWQnIGluIHZhbHVlICYmIGlzRnVuY3Rpb25fMS5pc0Z1bmN0aW9uKHZhbHVlLnJlbW92ZSkgJiYgaXNGdW5jdGlvbl8xLmlzRnVuY3Rpb24odmFsdWUuYWRkKSAmJiBpc0Z1bmN0aW9uXzEuaXNGdW5jdGlvbih2YWx1ZS51bnN1YnNjcmliZSkpKTtcbn1cbmV4cG9ydHMuaXNTdWJzY3JpcHRpb24gPSBpc1N1YnNjcmlwdGlvbjtcbmZ1bmN0aW9uIGV4ZWNGaW5hbGl6ZXIoZmluYWxpemVyKSB7XG4gICAgaWYgKGlzRnVuY3Rpb25fMS5pc0Z1bmN0aW9uKGZpbmFsaXplcikpIHtcbiAgICAgICAgZmluYWxpemVyKCk7XG4gICAgfVxuICAgIGVsc2Uge1xuICAgICAgICBmaW5hbGl6ZXIudW5zdWJzY3JpYmUoKTtcbiAgICB9XG59XG4vLyMgc291cmNlTWFwcGluZ1VSTD1TdWJzY3JpcHRpb24uanMubWFwIiwiXCJ1c2Ugc3RyaWN0XCI7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5leHBvcnRzLmNvbmZpZyA9IHZvaWQgMDtcbmV4cG9ydHMuY29uZmlnID0ge1xuICAgIG9uVW5oYW5kbGVkRXJyb3I6IG51bGwsXG4gICAgb25TdG9wcGVkTm90aWZpY2F0aW9uOiBudWxsLFxuICAgIFByb21pc2U6IHVuZGVmaW5lZCxcbiAgICB1c2VEZXByZWNhdGVkU3luY2hyb25vdXNFcnJvckhhbmRsaW5nOiBmYWxzZSxcbiAgICB1c2VEZXByZWNhdGVkTmV4dENvbnRleHQ6IGZhbHNlLFxufTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWNvbmZpZy5qcy5tYXAiLCJcInVzZSBzdHJpY3RcIjtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmV4cG9ydHMuZmlyc3RWYWx1ZUZyb20gPSB2b2lkIDA7XG52YXIgRW1wdHlFcnJvcl8xID0gcmVxdWlyZShcIi4vdXRpbC9FbXB0eUVycm9yXCIpO1xudmFyIFN1YnNjcmliZXJfMSA9IHJlcXVpcmUoXCIuL1N1YnNjcmliZXJcIik7XG5mdW5jdGlvbiBmaXJzdFZhbHVlRnJvbShzb3VyY2UsIGNvbmZpZykge1xuICAgIHZhciBoYXNDb25maWcgPSB0eXBlb2YgY29uZmlnID09PSAnb2JqZWN0JztcbiAgICByZXR1cm4gbmV3IFByb21pc2UoZnVuY3Rpb24gKHJlc29sdmUsIHJlamVjdCkge1xuICAgICAgICB2YXIgc3Vic2NyaWJlciA9IG5ldyBTdWJzY3JpYmVyXzEuU2FmZVN1YnNjcmliZXIoe1xuICAgICAgICAgICAgbmV4dDogZnVuY3Rpb24gKHZhbHVlKSB7XG4gICAgICAgICAgICAgICAgcmVzb2x2ZSh2YWx1ZSk7XG4gICAgICAgICAgICAgICAgc3Vic2NyaWJlci51bnN1YnNjcmliZSgpO1xuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIGVycm9yOiByZWplY3QsXG4gICAgICAgICAgICBjb21wbGV0ZTogZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgIGlmIChoYXNDb25maWcpIHtcbiAgICAgICAgICAgICAgICAgICAgcmVzb2x2ZShjb25maWcuZGVmYXVsdFZhbHVlKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIHJlamVjdChuZXcgRW1wdHlFcnJvcl8xLkVtcHR5RXJyb3IoKSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSxcbiAgICAgICAgfSk7XG4gICAgICAgIHNvdXJjZS5zdWJzY3JpYmUoc3Vic2NyaWJlcik7XG4gICAgfSk7XG59XG5leHBvcnRzLmZpcnN0VmFsdWVGcm9tID0gZmlyc3RWYWx1ZUZyb207XG4vLyMgc291cmNlTWFwcGluZ1VSTD1maXJzdFZhbHVlRnJvbS5qcy5tYXAiLCJcInVzZSBzdHJpY3RcIjtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmV4cG9ydHMubGFzdFZhbHVlRnJvbSA9IHZvaWQgMDtcbnZhciBFbXB0eUVycm9yXzEgPSByZXF1aXJlKFwiLi91dGlsL0VtcHR5RXJyb3JcIik7XG5mdW5jdGlvbiBsYXN0VmFsdWVGcm9tKHNvdXJjZSwgY29uZmlnKSB7XG4gICAgdmFyIGhhc0NvbmZpZyA9IHR5cGVvZiBjb25maWcgPT09ICdvYmplY3QnO1xuICAgIHJldHVybiBuZXcgUHJvbWlzZShmdW5jdGlvbiAocmVzb2x2ZSwgcmVqZWN0KSB7XG4gICAgICAgIHZhciBfaGFzVmFsdWUgPSBmYWxzZTtcbiAgICAgICAgdmFyIF92YWx1ZTtcbiAgICAgICAgc291cmNlLnN1YnNjcmliZSh7XG4gICAgICAgICAgICBuZXh0OiBmdW5jdGlvbiAodmFsdWUpIHtcbiAgICAgICAgICAgICAgICBfdmFsdWUgPSB2YWx1ZTtcbiAgICAgICAgICAgICAgICBfaGFzVmFsdWUgPSB0cnVlO1xuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIGVycm9yOiByZWplY3QsXG4gICAgICAgICAgICBjb21wbGV0ZTogZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgIGlmIChfaGFzVmFsdWUpIHtcbiAgICAgICAgICAgICAgICAgICAgcmVzb2x2ZShfdmFsdWUpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBlbHNlIGlmIChoYXNDb25maWcpIHtcbiAgICAgICAgICAgICAgICAgICAgcmVzb2x2ZShjb25maWcuZGVmYXVsdFZhbHVlKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIHJlamVjdChuZXcgRW1wdHlFcnJvcl8xLkVtcHR5RXJyb3IoKSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSxcbiAgICAgICAgfSk7XG4gICAgfSk7XG59XG5leHBvcnRzLmxhc3RWYWx1ZUZyb20gPSBsYXN0VmFsdWVGcm9tO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9bGFzdFZhbHVlRnJvbS5qcy5tYXAiLCJcInVzZSBzdHJpY3RcIjtcbnZhciBfX2V4dGVuZHMgPSAodGhpcyAmJiB0aGlzLl9fZXh0ZW5kcykgfHwgKGZ1bmN0aW9uICgpIHtcbiAgICB2YXIgZXh0ZW5kU3RhdGljcyA9IGZ1bmN0aW9uIChkLCBiKSB7XG4gICAgICAgIGV4dGVuZFN0YXRpY3MgPSBPYmplY3Quc2V0UHJvdG90eXBlT2YgfHxcbiAgICAgICAgICAgICh7IF9fcHJvdG9fXzogW10gfSBpbnN0YW5jZW9mIEFycmF5ICYmIGZ1bmN0aW9uIChkLCBiKSB7IGQuX19wcm90b19fID0gYjsgfSkgfHxcbiAgICAgICAgICAgIGZ1bmN0aW9uIChkLCBiKSB7IGZvciAodmFyIHAgaW4gYikgaWYgKE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChiLCBwKSkgZFtwXSA9IGJbcF07IH07XG4gICAgICAgIHJldHVybiBleHRlbmRTdGF0aWNzKGQsIGIpO1xuICAgIH07XG4gICAgcmV0dXJuIGZ1bmN0aW9uIChkLCBiKSB7XG4gICAgICAgIGlmICh0eXBlb2YgYiAhPT0gXCJmdW5jdGlvblwiICYmIGIgIT09IG51bGwpXG4gICAgICAgICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKFwiQ2xhc3MgZXh0ZW5kcyB2YWx1ZSBcIiArIFN0cmluZyhiKSArIFwiIGlzIG5vdCBhIGNvbnN0cnVjdG9yIG9yIG51bGxcIik7XG4gICAgICAgIGV4dGVuZFN0YXRpY3MoZCwgYik7XG4gICAgICAgIGZ1bmN0aW9uIF9fKCkgeyB0aGlzLmNvbnN0cnVjdG9yID0gZDsgfVxuICAgICAgICBkLnByb3RvdHlwZSA9IGIgPT09IG51bGwgPyBPYmplY3QuY3JlYXRlKGIpIDogKF9fLnByb3RvdHlwZSA9IGIucHJvdG90eXBlLCBuZXcgX18oKSk7XG4gICAgfTtcbn0pKCk7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5leHBvcnRzLkNvbm5lY3RhYmxlT2JzZXJ2YWJsZSA9IHZvaWQgMDtcbnZhciBPYnNlcnZhYmxlXzEgPSByZXF1aXJlKFwiLi4vT2JzZXJ2YWJsZVwiKTtcbnZhciBTdWJzY3JpcHRpb25fMSA9IHJlcXVpcmUoXCIuLi9TdWJzY3JpcHRpb25cIik7XG52YXIgcmVmQ291bnRfMSA9IHJlcXVpcmUoXCIuLi9vcGVyYXRvcnMvcmVmQ291bnRcIik7XG52YXIgT3BlcmF0b3JTdWJzY3JpYmVyXzEgPSByZXF1aXJlKFwiLi4vb3BlcmF0b3JzL09wZXJhdG9yU3Vic2NyaWJlclwiKTtcbnZhciBsaWZ0XzEgPSByZXF1aXJlKFwiLi4vdXRpbC9saWZ0XCIpO1xudmFyIENvbm5lY3RhYmxlT2JzZXJ2YWJsZSA9IChmdW5jdGlvbiAoX3N1cGVyKSB7XG4gICAgX19leHRlbmRzKENvbm5lY3RhYmxlT2JzZXJ2YWJsZSwgX3N1cGVyKTtcbiAgICBmdW5jdGlvbiBDb25uZWN0YWJsZU9ic2VydmFibGUoc291cmNlLCBzdWJqZWN0RmFjdG9yeSkge1xuICAgICAgICB2YXIgX3RoaXMgPSBfc3VwZXIuY2FsbCh0aGlzKSB8fCB0aGlzO1xuICAgICAgICBfdGhpcy5zb3VyY2UgPSBzb3VyY2U7XG4gICAgICAgIF90aGlzLnN1YmplY3RGYWN0b3J5ID0gc3ViamVjdEZhY3Rvcnk7XG4gICAgICAgIF90aGlzLl9zdWJqZWN0ID0gbnVsbDtcbiAgICAgICAgX3RoaXMuX3JlZkNvdW50ID0gMDtcbiAgICAgICAgX3RoaXMuX2Nvbm5lY3Rpb24gPSBudWxsO1xuICAgICAgICBpZiAobGlmdF8xLmhhc0xpZnQoc291cmNlKSkge1xuICAgICAgICAgICAgX3RoaXMubGlmdCA9IHNvdXJjZS5saWZ0O1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBfdGhpcztcbiAgICB9XG4gICAgQ29ubmVjdGFibGVPYnNlcnZhYmxlLnByb3RvdHlwZS5fc3Vic2NyaWJlID0gZnVuY3Rpb24gKHN1YnNjcmliZXIpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuZ2V0U3ViamVjdCgpLnN1YnNjcmliZShzdWJzY3JpYmVyKTtcbiAgICB9O1xuICAgIENvbm5lY3RhYmxlT2JzZXJ2YWJsZS5wcm90b3R5cGUuZ2V0U3ViamVjdCA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgdmFyIHN1YmplY3QgPSB0aGlzLl9zdWJqZWN0O1xuICAgICAgICBpZiAoIXN1YmplY3QgfHwgc3ViamVjdC5pc1N0b3BwZWQpIHtcbiAgICAgICAgICAgIHRoaXMuX3N1YmplY3QgPSB0aGlzLnN1YmplY3RGYWN0b3J5KCk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHRoaXMuX3N1YmplY3Q7XG4gICAgfTtcbiAgICBDb25uZWN0YWJsZU9ic2VydmFibGUucHJvdG90eXBlLl90ZWFyZG93biA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgdGhpcy5fcmVmQ291bnQgPSAwO1xuICAgICAgICB2YXIgX2Nvbm5lY3Rpb24gPSB0aGlzLl9jb25uZWN0aW9uO1xuICAgICAgICB0aGlzLl9zdWJqZWN0ID0gdGhpcy5fY29ubmVjdGlvbiA9IG51bGw7XG4gICAgICAgIF9jb25uZWN0aW9uID09PSBudWxsIHx8IF9jb25uZWN0aW9uID09PSB2b2lkIDAgPyB2b2lkIDAgOiBfY29ubmVjdGlvbi51bnN1YnNjcmliZSgpO1xuICAgIH07XG4gICAgQ29ubmVjdGFibGVPYnNlcnZhYmxlLnByb3RvdHlwZS5jb25uZWN0ID0gZnVuY3Rpb24gKCkge1xuICAgICAgICB2YXIgX3RoaXMgPSB0aGlzO1xuICAgICAgICB2YXIgY29ubmVjdGlvbiA9IHRoaXMuX2Nvbm5lY3Rpb247XG4gICAgICAgIGlmICghY29ubmVjdGlvbikge1xuICAgICAgICAgICAgY29ubmVjdGlvbiA9IHRoaXMuX2Nvbm5lY3Rpb24gPSBuZXcgU3Vic2NyaXB0aW9uXzEuU3Vic2NyaXB0aW9uKCk7XG4gICAgICAgICAgICB2YXIgc3ViamVjdF8xID0gdGhpcy5nZXRTdWJqZWN0KCk7XG4gICAgICAgICAgICBjb25uZWN0aW9uLmFkZCh0aGlzLnNvdXJjZS5zdWJzY3JpYmUoT3BlcmF0b3JTdWJzY3JpYmVyXzEuY3JlYXRlT3BlcmF0b3JTdWJzY3JpYmVyKHN1YmplY3RfMSwgdW5kZWZpbmVkLCBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgX3RoaXMuX3RlYXJkb3duKCk7XG4gICAgICAgICAgICAgICAgc3ViamVjdF8xLmNvbXBsZXRlKCk7XG4gICAgICAgICAgICB9LCBmdW5jdGlvbiAoZXJyKSB7XG4gICAgICAgICAgICAgICAgX3RoaXMuX3RlYXJkb3duKCk7XG4gICAgICAgICAgICAgICAgc3ViamVjdF8xLmVycm9yKGVycik7XG4gICAgICAgICAgICB9LCBmdW5jdGlvbiAoKSB7IHJldHVybiBfdGhpcy5fdGVhcmRvd24oKTsgfSkpKTtcbiAgICAgICAgICAgIGlmIChjb25uZWN0aW9uLmNsb3NlZCkge1xuICAgICAgICAgICAgICAgIHRoaXMuX2Nvbm5lY3Rpb24gPSBudWxsO1xuICAgICAgICAgICAgICAgIGNvbm5lY3Rpb24gPSBTdWJzY3JpcHRpb25fMS5TdWJzY3JpcHRpb24uRU1QVFk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIGNvbm5lY3Rpb247XG4gICAgfTtcbiAgICBDb25uZWN0YWJsZU9ic2VydmFibGUucHJvdG90eXBlLnJlZkNvdW50ID0gZnVuY3Rpb24gKCkge1xuICAgICAgICByZXR1cm4gcmVmQ291bnRfMS5yZWZDb3VudCgpKHRoaXMpO1xuICAgIH07XG4gICAgcmV0dXJuIENvbm5lY3RhYmxlT2JzZXJ2YWJsZTtcbn0oT2JzZXJ2YWJsZV8xLk9ic2VydmFibGUpKTtcbmV4cG9ydHMuQ29ubmVjdGFibGVPYnNlcnZhYmxlID0gQ29ubmVjdGFibGVPYnNlcnZhYmxlO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9Q29ubmVjdGFibGVPYnNlcnZhYmxlLmpzLm1hcCIsIlwidXNlIHN0cmljdFwiO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuZXhwb3J0cy5iaW5kQ2FsbGJhY2sgPSB2b2lkIDA7XG52YXIgYmluZENhbGxiYWNrSW50ZXJuYWxzXzEgPSByZXF1aXJlKFwiLi9iaW5kQ2FsbGJhY2tJbnRlcm5hbHNcIik7XG5mdW5jdGlvbiBiaW5kQ2FsbGJhY2soY2FsbGJhY2tGdW5jLCByZXN1bHRTZWxlY3Rvciwgc2NoZWR1bGVyKSB7XG4gICAgcmV0dXJuIGJpbmRDYWxsYmFja0ludGVybmFsc18xLmJpbmRDYWxsYmFja0ludGVybmFscyhmYWxzZSwgY2FsbGJhY2tGdW5jLCByZXN1bHRTZWxlY3Rvciwgc2NoZWR1bGVyKTtcbn1cbmV4cG9ydHMuYmluZENhbGxiYWNrID0gYmluZENhbGxiYWNrO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9YmluZENhbGxiYWNrLmpzLm1hcCIsIlwidXNlIHN0cmljdFwiO1xudmFyIF9fcmVhZCA9ICh0aGlzICYmIHRoaXMuX19yZWFkKSB8fCBmdW5jdGlvbiAobywgbikge1xuICAgIHZhciBtID0gdHlwZW9mIFN5bWJvbCA9PT0gXCJmdW5jdGlvblwiICYmIG9bU3ltYm9sLml0ZXJhdG9yXTtcbiAgICBpZiAoIW0pIHJldHVybiBvO1xuICAgIHZhciBpID0gbS5jYWxsKG8pLCByLCBhciA9IFtdLCBlO1xuICAgIHRyeSB7XG4gICAgICAgIHdoaWxlICgobiA9PT0gdm9pZCAwIHx8IG4tLSA+IDApICYmICEociA9IGkubmV4dCgpKS5kb25lKSBhci5wdXNoKHIudmFsdWUpO1xuICAgIH1cbiAgICBjYXRjaCAoZXJyb3IpIHsgZSA9IHsgZXJyb3I6IGVycm9yIH07IH1cbiAgICBmaW5hbGx5IHtcbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgIGlmIChyICYmICFyLmRvbmUgJiYgKG0gPSBpW1wicmV0dXJuXCJdKSkgbS5jYWxsKGkpO1xuICAgICAgICB9XG4gICAgICAgIGZpbmFsbHkgeyBpZiAoZSkgdGhyb3cgZS5lcnJvcjsgfVxuICAgIH1cbiAgICByZXR1cm4gYXI7XG59O1xudmFyIF9fc3ByZWFkQXJyYXkgPSAodGhpcyAmJiB0aGlzLl9fc3ByZWFkQXJyYXkpIHx8IGZ1bmN0aW9uICh0bywgZnJvbSkge1xuICAgIGZvciAodmFyIGkgPSAwLCBpbCA9IGZyb20ubGVuZ3RoLCBqID0gdG8ubGVuZ3RoOyBpIDwgaWw7IGkrKywgaisrKVxuICAgICAgICB0b1tqXSA9IGZyb21baV07XG4gICAgcmV0dXJuIHRvO1xufTtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmV4cG9ydHMuYmluZENhbGxiYWNrSW50ZXJuYWxzID0gdm9pZCAwO1xudmFyIGlzU2NoZWR1bGVyXzEgPSByZXF1aXJlKFwiLi4vdXRpbC9pc1NjaGVkdWxlclwiKTtcbnZhciBPYnNlcnZhYmxlXzEgPSByZXF1aXJlKFwiLi4vT2JzZXJ2YWJsZVwiKTtcbnZhciBzdWJzY3JpYmVPbl8xID0gcmVxdWlyZShcIi4uL29wZXJhdG9ycy9zdWJzY3JpYmVPblwiKTtcbnZhciBtYXBPbmVPck1hbnlBcmdzXzEgPSByZXF1aXJlKFwiLi4vdXRpbC9tYXBPbmVPck1hbnlBcmdzXCIpO1xudmFyIG9ic2VydmVPbl8xID0gcmVxdWlyZShcIi4uL29wZXJhdG9ycy9vYnNlcnZlT25cIik7XG52YXIgQXN5bmNTdWJqZWN0XzEgPSByZXF1aXJlKFwiLi4vQXN5bmNTdWJqZWN0XCIpO1xuZnVuY3Rpb24gYmluZENhbGxiYWNrSW50ZXJuYWxzKGlzTm9kZVN0eWxlLCBjYWxsYmFja0Z1bmMsIHJlc3VsdFNlbGVjdG9yLCBzY2hlZHVsZXIpIHtcbiAgICBpZiAocmVzdWx0U2VsZWN0b3IpIHtcbiAgICAgICAgaWYgKGlzU2NoZWR1bGVyXzEuaXNTY2hlZHVsZXIocmVzdWx0U2VsZWN0b3IpKSB7XG4gICAgICAgICAgICBzY2hlZHVsZXIgPSByZXN1bHRTZWxlY3RvcjtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIHJldHVybiBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgdmFyIGFyZ3MgPSBbXTtcbiAgICAgICAgICAgICAgICBmb3IgKHZhciBfaSA9IDA7IF9pIDwgYXJndW1lbnRzLmxlbmd0aDsgX2krKykge1xuICAgICAgICAgICAgICAgICAgICBhcmdzW19pXSA9IGFyZ3VtZW50c1tfaV07XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIHJldHVybiBiaW5kQ2FsbGJhY2tJbnRlcm5hbHMoaXNOb2RlU3R5bGUsIGNhbGxiYWNrRnVuYywgc2NoZWR1bGVyKVxuICAgICAgICAgICAgICAgICAgICAuYXBwbHkodGhpcywgYXJncylcbiAgICAgICAgICAgICAgICAgICAgLnBpcGUobWFwT25lT3JNYW55QXJnc18xLm1hcE9uZU9yTWFueUFyZ3MocmVzdWx0U2VsZWN0b3IpKTtcbiAgICAgICAgICAgIH07XG4gICAgICAgIH1cbiAgICB9XG4gICAgaWYgKHNjaGVkdWxlcikge1xuICAgICAgICByZXR1cm4gZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgdmFyIGFyZ3MgPSBbXTtcbiAgICAgICAgICAgIGZvciAodmFyIF9pID0gMDsgX2kgPCBhcmd1bWVudHMubGVuZ3RoOyBfaSsrKSB7XG4gICAgICAgICAgICAgICAgYXJnc1tfaV0gPSBhcmd1bWVudHNbX2ldO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuIGJpbmRDYWxsYmFja0ludGVybmFscyhpc05vZGVTdHlsZSwgY2FsbGJhY2tGdW5jKVxuICAgICAgICAgICAgICAgIC5hcHBseSh0aGlzLCBhcmdzKVxuICAgICAgICAgICAgICAgIC5waXBlKHN1YnNjcmliZU9uXzEuc3Vic2NyaWJlT24oc2NoZWR1bGVyKSwgb2JzZXJ2ZU9uXzEub2JzZXJ2ZU9uKHNjaGVkdWxlcikpO1xuICAgICAgICB9O1xuICAgIH1cbiAgICByZXR1cm4gZnVuY3Rpb24gKCkge1xuICAgICAgICB2YXIgX3RoaXMgPSB0aGlzO1xuICAgICAgICB2YXIgYXJncyA9IFtdO1xuICAgICAgICBmb3IgKHZhciBfaSA9IDA7IF9pIDwgYXJndW1lbnRzLmxlbmd0aDsgX2krKykge1xuICAgICAgICAgICAgYXJnc1tfaV0gPSBhcmd1bWVudHNbX2ldO1xuICAgICAgICB9XG4gICAgICAgIHZhciBzdWJqZWN0ID0gbmV3IEFzeW5jU3ViamVjdF8xLkFzeW5jU3ViamVjdCgpO1xuICAgICAgICB2YXIgdW5pbml0aWFsaXplZCA9IHRydWU7XG4gICAgICAgIHJldHVybiBuZXcgT2JzZXJ2YWJsZV8xLk9ic2VydmFibGUoZnVuY3Rpb24gKHN1YnNjcmliZXIpIHtcbiAgICAgICAgICAgIHZhciBzdWJzID0gc3ViamVjdC5zdWJzY3JpYmUoc3Vic2NyaWJlcik7XG4gICAgICAgICAgICBpZiAodW5pbml0aWFsaXplZCkge1xuICAgICAgICAgICAgICAgIHVuaW5pdGlhbGl6ZWQgPSBmYWxzZTtcbiAgICAgICAgICAgICAgICB2YXIgaXNBc3luY18xID0gZmFsc2U7XG4gICAgICAgICAgICAgICAgdmFyIGlzQ29tcGxldGVfMSA9IGZhbHNlO1xuICAgICAgICAgICAgICAgIGNhbGxiYWNrRnVuYy5hcHBseShfdGhpcywgX19zcHJlYWRBcnJheShfX3NwcmVhZEFycmF5KFtdLCBfX3JlYWQoYXJncykpLCBbXG4gICAgICAgICAgICAgICAgICAgIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhciByZXN1bHRzID0gW107XG4gICAgICAgICAgICAgICAgICAgICAgICBmb3IgKHZhciBfaSA9IDA7IF9pIDwgYXJndW1lbnRzLmxlbmd0aDsgX2krKykge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJlc3VsdHNbX2ldID0gYXJndW1lbnRzW19pXTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChpc05vZGVTdHlsZSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhciBlcnIgPSByZXN1bHRzLnNoaWZ0KCk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGVyciAhPSBudWxsKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHN1YmplY3QuZXJyb3IoZXJyKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIHN1YmplY3QubmV4dCgxIDwgcmVzdWx0cy5sZW5ndGggPyByZXN1bHRzIDogcmVzdWx0c1swXSk7XG4gICAgICAgICAgICAgICAgICAgICAgICBpc0NvbXBsZXRlXzEgPSB0cnVlO1xuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGlzQXN5bmNfMSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHN1YmplY3QuY29tcGxldGUoKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICBdKSk7XG4gICAgICAgICAgICAgICAgaWYgKGlzQ29tcGxldGVfMSkge1xuICAgICAgICAgICAgICAgICAgICBzdWJqZWN0LmNvbXBsZXRlKCk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGlzQXN5bmNfMSA9IHRydWU7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4gc3VicztcbiAgICAgICAgfSk7XG4gICAgfTtcbn1cbmV4cG9ydHMuYmluZENhbGxiYWNrSW50ZXJuYWxzID0gYmluZENhbGxiYWNrSW50ZXJuYWxzO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9YmluZENhbGxiYWNrSW50ZXJuYWxzLmpzLm1hcCIsIlwidXNlIHN0cmljdFwiO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuZXhwb3J0cy5iaW5kTm9kZUNhbGxiYWNrID0gdm9pZCAwO1xudmFyIGJpbmRDYWxsYmFja0ludGVybmFsc18xID0gcmVxdWlyZShcIi4vYmluZENhbGxiYWNrSW50ZXJuYWxzXCIpO1xuZnVuY3Rpb24gYmluZE5vZGVDYWxsYmFjayhjYWxsYmFja0Z1bmMsIHJlc3VsdFNlbGVjdG9yLCBzY2hlZHVsZXIpIHtcbiAgICByZXR1cm4gYmluZENhbGxiYWNrSW50ZXJuYWxzXzEuYmluZENhbGxiYWNrSW50ZXJuYWxzKHRydWUsIGNhbGxiYWNrRnVuYywgcmVzdWx0U2VsZWN0b3IsIHNjaGVkdWxlcik7XG59XG5leHBvcnRzLmJpbmROb2RlQ2FsbGJhY2sgPSBiaW5kTm9kZUNhbGxiYWNrO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9YmluZE5vZGVDYWxsYmFjay5qcy5tYXAiLCJcInVzZSBzdHJpY3RcIjtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmV4cG9ydHMuY29tYmluZUxhdGVzdEluaXQgPSBleHBvcnRzLmNvbWJpbmVMYXRlc3QgPSB2b2lkIDA7XG52YXIgT2JzZXJ2YWJsZV8xID0gcmVxdWlyZShcIi4uL09ic2VydmFibGVcIik7XG52YXIgYXJnc0FyZ0FycmF5T3JPYmplY3RfMSA9IHJlcXVpcmUoXCIuLi91dGlsL2FyZ3NBcmdBcnJheU9yT2JqZWN0XCIpO1xudmFyIGZyb21fMSA9IHJlcXVpcmUoXCIuL2Zyb21cIik7XG52YXIgaWRlbnRpdHlfMSA9IHJlcXVpcmUoXCIuLi91dGlsL2lkZW50aXR5XCIpO1xudmFyIG1hcE9uZU9yTWFueUFyZ3NfMSA9IHJlcXVpcmUoXCIuLi91dGlsL21hcE9uZU9yTWFueUFyZ3NcIik7XG52YXIgYXJnc18xID0gcmVxdWlyZShcIi4uL3V0aWwvYXJnc1wiKTtcbnZhciBjcmVhdGVPYmplY3RfMSA9IHJlcXVpcmUoXCIuLi91dGlsL2NyZWF0ZU9iamVjdFwiKTtcbnZhciBPcGVyYXRvclN1YnNjcmliZXJfMSA9IHJlcXVpcmUoXCIuLi9vcGVyYXRvcnMvT3BlcmF0b3JTdWJzY3JpYmVyXCIpO1xudmFyIGV4ZWN1dGVTY2hlZHVsZV8xID0gcmVxdWlyZShcIi4uL3V0aWwvZXhlY3V0ZVNjaGVkdWxlXCIpO1xuZnVuY3Rpb24gY29tYmluZUxhdGVzdCgpIHtcbiAgICB2YXIgYXJncyA9IFtdO1xuICAgIGZvciAodmFyIF9pID0gMDsgX2kgPCBhcmd1bWVudHMubGVuZ3RoOyBfaSsrKSB7XG4gICAgICAgIGFyZ3NbX2ldID0gYXJndW1lbnRzW19pXTtcbiAgICB9XG4gICAgdmFyIHNjaGVkdWxlciA9IGFyZ3NfMS5wb3BTY2hlZHVsZXIoYXJncyk7XG4gICAgdmFyIHJlc3VsdFNlbGVjdG9yID0gYXJnc18xLnBvcFJlc3VsdFNlbGVjdG9yKGFyZ3MpO1xuICAgIHZhciBfYSA9IGFyZ3NBcmdBcnJheU9yT2JqZWN0XzEuYXJnc0FyZ0FycmF5T3JPYmplY3QoYXJncyksIG9ic2VydmFibGVzID0gX2EuYXJncywga2V5cyA9IF9hLmtleXM7XG4gICAgaWYgKG9ic2VydmFibGVzLmxlbmd0aCA9PT0gMCkge1xuICAgICAgICByZXR1cm4gZnJvbV8xLmZyb20oW10sIHNjaGVkdWxlcik7XG4gICAgfVxuICAgIHZhciByZXN1bHQgPSBuZXcgT2JzZXJ2YWJsZV8xLk9ic2VydmFibGUoY29tYmluZUxhdGVzdEluaXQob2JzZXJ2YWJsZXMsIHNjaGVkdWxlciwga2V5c1xuICAgICAgICA/XG4gICAgICAgICAgICBmdW5jdGlvbiAodmFsdWVzKSB7IHJldHVybiBjcmVhdGVPYmplY3RfMS5jcmVhdGVPYmplY3Qoa2V5cywgdmFsdWVzKTsgfVxuICAgICAgICA6XG4gICAgICAgICAgICBpZGVudGl0eV8xLmlkZW50aXR5KSk7XG4gICAgcmV0dXJuIHJlc3VsdFNlbGVjdG9yID8gcmVzdWx0LnBpcGUobWFwT25lT3JNYW55QXJnc18xLm1hcE9uZU9yTWFueUFyZ3MocmVzdWx0U2VsZWN0b3IpKSA6IHJlc3VsdDtcbn1cbmV4cG9ydHMuY29tYmluZUxhdGVzdCA9IGNvbWJpbmVMYXRlc3Q7XG5mdW5jdGlvbiBjb21iaW5lTGF0ZXN0SW5pdChvYnNlcnZhYmxlcywgc2NoZWR1bGVyLCB2YWx1ZVRyYW5zZm9ybSkge1xuICAgIGlmICh2YWx1ZVRyYW5zZm9ybSA9PT0gdm9pZCAwKSB7IHZhbHVlVHJhbnNmb3JtID0gaWRlbnRpdHlfMS5pZGVudGl0eTsgfVxuICAgIHJldHVybiBmdW5jdGlvbiAoc3Vic2NyaWJlcikge1xuICAgICAgICBtYXliZVNjaGVkdWxlKHNjaGVkdWxlciwgZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgdmFyIGxlbmd0aCA9IG9ic2VydmFibGVzLmxlbmd0aDtcbiAgICAgICAgICAgIHZhciB2YWx1ZXMgPSBuZXcgQXJyYXkobGVuZ3RoKTtcbiAgICAgICAgICAgIHZhciBhY3RpdmUgPSBsZW5ndGg7XG4gICAgICAgICAgICB2YXIgcmVtYWluaW5nRmlyc3RWYWx1ZXMgPSBsZW5ndGg7XG4gICAgICAgICAgICB2YXIgX2xvb3BfMSA9IGZ1bmN0aW9uIChpKSB7XG4gICAgICAgICAgICAgICAgbWF5YmVTY2hlZHVsZShzY2hlZHVsZXIsIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICAgICAgdmFyIHNvdXJjZSA9IGZyb21fMS5mcm9tKG9ic2VydmFibGVzW2ldLCBzY2hlZHVsZXIpO1xuICAgICAgICAgICAgICAgICAgICB2YXIgaGFzRmlyc3RWYWx1ZSA9IGZhbHNlO1xuICAgICAgICAgICAgICAgICAgICBzb3VyY2Uuc3Vic2NyaWJlKE9wZXJhdG9yU3Vic2NyaWJlcl8xLmNyZWF0ZU9wZXJhdG9yU3Vic2NyaWJlcihzdWJzY3JpYmVyLCBmdW5jdGlvbiAodmFsdWUpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhbHVlc1tpXSA9IHZhbHVlO1xuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKCFoYXNGaXJzdFZhbHVlKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaGFzRmlyc3RWYWx1ZSA9IHRydWU7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcmVtYWluaW5nRmlyc3RWYWx1ZXMtLTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIGlmICghcmVtYWluaW5nRmlyc3RWYWx1ZXMpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBzdWJzY3JpYmVyLm5leHQodmFsdWVUcmFuc2Zvcm0odmFsdWVzLnNsaWNlKCkpKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgfSwgZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKCEtLWFjdGl2ZSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHN1YnNjcmliZXIuY29tcGxldGUoKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgfSkpO1xuICAgICAgICAgICAgICAgIH0sIHN1YnNjcmliZXIpO1xuICAgICAgICAgICAgfTtcbiAgICAgICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgbGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICAgICAgICBfbG9vcF8xKGkpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9LCBzdWJzY3JpYmVyKTtcbiAgICB9O1xufVxuZXhwb3J0cy5jb21iaW5lTGF0ZXN0SW5pdCA9IGNvbWJpbmVMYXRlc3RJbml0O1xuZnVuY3Rpb24gbWF5YmVTY2hlZHVsZShzY2hlZHVsZXIsIGV4ZWN1dGUsIHN1YnNjcmlwdGlvbikge1xuICAgIGlmIChzY2hlZHVsZXIpIHtcbiAgICAgICAgZXhlY3V0ZVNjaGVkdWxlXzEuZXhlY3V0ZVNjaGVkdWxlKHN1YnNjcmlwdGlvbiwgc2NoZWR1bGVyLCBleGVjdXRlKTtcbiAgICB9XG4gICAgZWxzZSB7XG4gICAgICAgIGV4ZWN1dGUoKTtcbiAgICB9XG59XG4vLyMgc291cmNlTWFwcGluZ1VSTD1jb21iaW5lTGF0ZXN0LmpzLm1hcCIsIlwidXNlIHN0cmljdFwiO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuZXhwb3J0cy5jb25jYXQgPSB2b2lkIDA7XG52YXIgY29uY2F0QWxsXzEgPSByZXF1aXJlKFwiLi4vb3BlcmF0b3JzL2NvbmNhdEFsbFwiKTtcbnZhciBhcmdzXzEgPSByZXF1aXJlKFwiLi4vdXRpbC9hcmdzXCIpO1xudmFyIGZyb21fMSA9IHJlcXVpcmUoXCIuL2Zyb21cIik7XG5mdW5jdGlvbiBjb25jYXQoKSB7XG4gICAgdmFyIGFyZ3MgPSBbXTtcbiAgICBmb3IgKHZhciBfaSA9IDA7IF9pIDwgYXJndW1lbnRzLmxlbmd0aDsgX2krKykge1xuICAgICAgICBhcmdzW19pXSA9IGFyZ3VtZW50c1tfaV07XG4gICAgfVxuICAgIHJldHVybiBjb25jYXRBbGxfMS5jb25jYXRBbGwoKShmcm9tXzEuZnJvbShhcmdzLCBhcmdzXzEucG9wU2NoZWR1bGVyKGFyZ3MpKSk7XG59XG5leHBvcnRzLmNvbmNhdCA9IGNvbmNhdDtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWNvbmNhdC5qcy5tYXAiLCJcInVzZSBzdHJpY3RcIjtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmV4cG9ydHMuY29ubmVjdGFibGUgPSB2b2lkIDA7XG52YXIgU3ViamVjdF8xID0gcmVxdWlyZShcIi4uL1N1YmplY3RcIik7XG52YXIgT2JzZXJ2YWJsZV8xID0gcmVxdWlyZShcIi4uL09ic2VydmFibGVcIik7XG52YXIgZGVmZXJfMSA9IHJlcXVpcmUoXCIuL2RlZmVyXCIpO1xudmFyIERFRkFVTFRfQ09ORklHID0ge1xuICAgIGNvbm5lY3RvcjogZnVuY3Rpb24gKCkgeyByZXR1cm4gbmV3IFN1YmplY3RfMS5TdWJqZWN0KCk7IH0sXG4gICAgcmVzZXRPbkRpc2Nvbm5lY3Q6IHRydWUsXG59O1xuZnVuY3Rpb24gY29ubmVjdGFibGUoc291cmNlLCBjb25maWcpIHtcbiAgICBpZiAoY29uZmlnID09PSB2b2lkIDApIHsgY29uZmlnID0gREVGQVVMVF9DT05GSUc7IH1cbiAgICB2YXIgY29ubmVjdGlvbiA9IG51bGw7XG4gICAgdmFyIGNvbm5lY3RvciA9IGNvbmZpZy5jb25uZWN0b3IsIF9hID0gY29uZmlnLnJlc2V0T25EaXNjb25uZWN0LCByZXNldE9uRGlzY29ubmVjdCA9IF9hID09PSB2b2lkIDAgPyB0cnVlIDogX2E7XG4gICAgdmFyIHN1YmplY3QgPSBjb25uZWN0b3IoKTtcbiAgICB2YXIgcmVzdWx0ID0gbmV3IE9ic2VydmFibGVfMS5PYnNlcnZhYmxlKGZ1bmN0aW9uIChzdWJzY3JpYmVyKSB7XG4gICAgICAgIHJldHVybiBzdWJqZWN0LnN1YnNjcmliZShzdWJzY3JpYmVyKTtcbiAgICB9KTtcbiAgICByZXN1bHQuY29ubmVjdCA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgaWYgKCFjb25uZWN0aW9uIHx8IGNvbm5lY3Rpb24uY2xvc2VkKSB7XG4gICAgICAgICAgICBjb25uZWN0aW9uID0gZGVmZXJfMS5kZWZlcihmdW5jdGlvbiAoKSB7IHJldHVybiBzb3VyY2U7IH0pLnN1YnNjcmliZShzdWJqZWN0KTtcbiAgICAgICAgICAgIGlmIChyZXNldE9uRGlzY29ubmVjdCkge1xuICAgICAgICAgICAgICAgIGNvbm5lY3Rpb24uYWRkKGZ1bmN0aW9uICgpIHsgcmV0dXJuIChzdWJqZWN0ID0gY29ubmVjdG9yKCkpOyB9KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gY29ubmVjdGlvbjtcbiAgICB9O1xuICAgIHJldHVybiByZXN1bHQ7XG59XG5leHBvcnRzLmNvbm5lY3RhYmxlID0gY29ubmVjdGFibGU7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1jb25uZWN0YWJsZS5qcy5tYXAiLCJcInVzZSBzdHJpY3RcIjtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmV4cG9ydHMuZGVmZXIgPSB2b2lkIDA7XG52YXIgT2JzZXJ2YWJsZV8xID0gcmVxdWlyZShcIi4uL09ic2VydmFibGVcIik7XG52YXIgaW5uZXJGcm9tXzEgPSByZXF1aXJlKFwiLi9pbm5lckZyb21cIik7XG5mdW5jdGlvbiBkZWZlcihvYnNlcnZhYmxlRmFjdG9yeSkge1xuICAgIHJldHVybiBuZXcgT2JzZXJ2YWJsZV8xLk9ic2VydmFibGUoZnVuY3Rpb24gKHN1YnNjcmliZXIpIHtcbiAgICAgICAgaW5uZXJGcm9tXzEuaW5uZXJGcm9tKG9ic2VydmFibGVGYWN0b3J5KCkpLnN1YnNjcmliZShzdWJzY3JpYmVyKTtcbiAgICB9KTtcbn1cbmV4cG9ydHMuZGVmZXIgPSBkZWZlcjtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWRlZmVyLmpzLm1hcCIsIlwidXNlIHN0cmljdFwiO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuZXhwb3J0cy5hbmltYXRpb25GcmFtZXMgPSB2b2lkIDA7XG52YXIgT2JzZXJ2YWJsZV8xID0gcmVxdWlyZShcIi4uLy4uL09ic2VydmFibGVcIik7XG52YXIgcGVyZm9ybWFuY2VUaW1lc3RhbXBQcm92aWRlcl8xID0gcmVxdWlyZShcIi4uLy4uL3NjaGVkdWxlci9wZXJmb3JtYW5jZVRpbWVzdGFtcFByb3ZpZGVyXCIpO1xudmFyIGFuaW1hdGlvbkZyYW1lUHJvdmlkZXJfMSA9IHJlcXVpcmUoXCIuLi8uLi9zY2hlZHVsZXIvYW5pbWF0aW9uRnJhbWVQcm92aWRlclwiKTtcbmZ1bmN0aW9uIGFuaW1hdGlvbkZyYW1lcyh0aW1lc3RhbXBQcm92aWRlcikge1xuICAgIHJldHVybiB0aW1lc3RhbXBQcm92aWRlciA/IGFuaW1hdGlvbkZyYW1lc0ZhY3RvcnkodGltZXN0YW1wUHJvdmlkZXIpIDogREVGQVVMVF9BTklNQVRJT05fRlJBTUVTO1xufVxuZXhwb3J0cy5hbmltYXRpb25GcmFtZXMgPSBhbmltYXRpb25GcmFtZXM7XG5mdW5jdGlvbiBhbmltYXRpb25GcmFtZXNGYWN0b3J5KHRpbWVzdGFtcFByb3ZpZGVyKSB7XG4gICAgcmV0dXJuIG5ldyBPYnNlcnZhYmxlXzEuT2JzZXJ2YWJsZShmdW5jdGlvbiAoc3Vic2NyaWJlcikge1xuICAgICAgICB2YXIgcHJvdmlkZXIgPSB0aW1lc3RhbXBQcm92aWRlciB8fCBwZXJmb3JtYW5jZVRpbWVzdGFtcFByb3ZpZGVyXzEucGVyZm9ybWFuY2VUaW1lc3RhbXBQcm92aWRlcjtcbiAgICAgICAgdmFyIHN0YXJ0ID0gcHJvdmlkZXIubm93KCk7XG4gICAgICAgIHZhciBpZCA9IDA7XG4gICAgICAgIHZhciBydW4gPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICBpZiAoIXN1YnNjcmliZXIuY2xvc2VkKSB7XG4gICAgICAgICAgICAgICAgaWQgPSBhbmltYXRpb25GcmFtZVByb3ZpZGVyXzEuYW5pbWF0aW9uRnJhbWVQcm92aWRlci5yZXF1ZXN0QW5pbWF0aW9uRnJhbWUoZnVuY3Rpb24gKHRpbWVzdGFtcCkge1xuICAgICAgICAgICAgICAgICAgICBpZCA9IDA7XG4gICAgICAgICAgICAgICAgICAgIHZhciBub3cgPSBwcm92aWRlci5ub3coKTtcbiAgICAgICAgICAgICAgICAgICAgc3Vic2NyaWJlci5uZXh0KHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHRpbWVzdGFtcDogdGltZXN0YW1wUHJvdmlkZXIgPyBub3cgOiB0aW1lc3RhbXAsXG4gICAgICAgICAgICAgICAgICAgICAgICBlbGFwc2VkOiBub3cgLSBzdGFydCxcbiAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgICAgIHJ1bigpO1xuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgfVxuICAgICAgICB9O1xuICAgICAgICBydW4oKTtcbiAgICAgICAgcmV0dXJuIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIGlmIChpZCkge1xuICAgICAgICAgICAgICAgIGFuaW1hdGlvbkZyYW1lUHJvdmlkZXJfMS5hbmltYXRpb25GcmFtZVByb3ZpZGVyLmNhbmNlbEFuaW1hdGlvbkZyYW1lKGlkKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfTtcbiAgICB9KTtcbn1cbnZhciBERUZBVUxUX0FOSU1BVElPTl9GUkFNRVMgPSBhbmltYXRpb25GcmFtZXNGYWN0b3J5KCk7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1hbmltYXRpb25GcmFtZXMuanMubWFwIiwiXCJ1c2Ugc3RyaWN0XCI7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5leHBvcnRzLmVtcHR5ID0gZXhwb3J0cy5FTVBUWSA9IHZvaWQgMDtcbnZhciBPYnNlcnZhYmxlXzEgPSByZXF1aXJlKFwiLi4vT2JzZXJ2YWJsZVwiKTtcbmV4cG9ydHMuRU1QVFkgPSBuZXcgT2JzZXJ2YWJsZV8xLk9ic2VydmFibGUoZnVuY3Rpb24gKHN1YnNjcmliZXIpIHsgcmV0dXJuIHN1YnNjcmliZXIuY29tcGxldGUoKTsgfSk7XG5mdW5jdGlvbiBlbXB0eShzY2hlZHVsZXIpIHtcbiAgICByZXR1cm4gc2NoZWR1bGVyID8gZW1wdHlTY2hlZHVsZWQoc2NoZWR1bGVyKSA6IGV4cG9ydHMuRU1QVFk7XG59XG5leHBvcnRzLmVtcHR5ID0gZW1wdHk7XG5mdW5jdGlvbiBlbXB0eVNjaGVkdWxlZChzY2hlZHVsZXIpIHtcbiAgICByZXR1cm4gbmV3IE9ic2VydmFibGVfMS5PYnNlcnZhYmxlKGZ1bmN0aW9uIChzdWJzY3JpYmVyKSB7IHJldHVybiBzY2hlZHVsZXIuc2NoZWR1bGUoZnVuY3Rpb24gKCkgeyByZXR1cm4gc3Vic2NyaWJlci5jb21wbGV0ZSgpOyB9KTsgfSk7XG59XG4vLyMgc291cmNlTWFwcGluZ1VSTD1lbXB0eS5qcy5tYXAiLCJcInVzZSBzdHJpY3RcIjtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmV4cG9ydHMuZm9ya0pvaW4gPSB2b2lkIDA7XG52YXIgT2JzZXJ2YWJsZV8xID0gcmVxdWlyZShcIi4uL09ic2VydmFibGVcIik7XG52YXIgYXJnc0FyZ0FycmF5T3JPYmplY3RfMSA9IHJlcXVpcmUoXCIuLi91dGlsL2FyZ3NBcmdBcnJheU9yT2JqZWN0XCIpO1xudmFyIGlubmVyRnJvbV8xID0gcmVxdWlyZShcIi4vaW5uZXJGcm9tXCIpO1xudmFyIGFyZ3NfMSA9IHJlcXVpcmUoXCIuLi91dGlsL2FyZ3NcIik7XG52YXIgT3BlcmF0b3JTdWJzY3JpYmVyXzEgPSByZXF1aXJlKFwiLi4vb3BlcmF0b3JzL09wZXJhdG9yU3Vic2NyaWJlclwiKTtcbnZhciBtYXBPbmVPck1hbnlBcmdzXzEgPSByZXF1aXJlKFwiLi4vdXRpbC9tYXBPbmVPck1hbnlBcmdzXCIpO1xudmFyIGNyZWF0ZU9iamVjdF8xID0gcmVxdWlyZShcIi4uL3V0aWwvY3JlYXRlT2JqZWN0XCIpO1xuZnVuY3Rpb24gZm9ya0pvaW4oKSB7XG4gICAgdmFyIGFyZ3MgPSBbXTtcbiAgICBmb3IgKHZhciBfaSA9IDA7IF9pIDwgYXJndW1lbnRzLmxlbmd0aDsgX2krKykge1xuICAgICAgICBhcmdzW19pXSA9IGFyZ3VtZW50c1tfaV07XG4gICAgfVxuICAgIHZhciByZXN1bHRTZWxlY3RvciA9IGFyZ3NfMS5wb3BSZXN1bHRTZWxlY3RvcihhcmdzKTtcbiAgICB2YXIgX2EgPSBhcmdzQXJnQXJyYXlPck9iamVjdF8xLmFyZ3NBcmdBcnJheU9yT2JqZWN0KGFyZ3MpLCBzb3VyY2VzID0gX2EuYXJncywga2V5cyA9IF9hLmtleXM7XG4gICAgdmFyIHJlc3VsdCA9IG5ldyBPYnNlcnZhYmxlXzEuT2JzZXJ2YWJsZShmdW5jdGlvbiAoc3Vic2NyaWJlcikge1xuICAgICAgICB2YXIgbGVuZ3RoID0gc291cmNlcy5sZW5ndGg7XG4gICAgICAgIGlmICghbGVuZ3RoKSB7XG4gICAgICAgICAgICBzdWJzY3JpYmVyLmNvbXBsZXRlKCk7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICAgICAgdmFyIHZhbHVlcyA9IG5ldyBBcnJheShsZW5ndGgpO1xuICAgICAgICB2YXIgcmVtYWluaW5nQ29tcGxldGlvbnMgPSBsZW5ndGg7XG4gICAgICAgIHZhciByZW1haW5pbmdFbWlzc2lvbnMgPSBsZW5ndGg7XG4gICAgICAgIHZhciBfbG9vcF8xID0gZnVuY3Rpb24gKHNvdXJjZUluZGV4KSB7XG4gICAgICAgICAgICB2YXIgaGFzVmFsdWUgPSBmYWxzZTtcbiAgICAgICAgICAgIGlubmVyRnJvbV8xLmlubmVyRnJvbShzb3VyY2VzW3NvdXJjZUluZGV4XSkuc3Vic2NyaWJlKE9wZXJhdG9yU3Vic2NyaWJlcl8xLmNyZWF0ZU9wZXJhdG9yU3Vic2NyaWJlcihzdWJzY3JpYmVyLCBmdW5jdGlvbiAodmFsdWUpIHtcbiAgICAgICAgICAgICAgICBpZiAoIWhhc1ZhbHVlKSB7XG4gICAgICAgICAgICAgICAgICAgIGhhc1ZhbHVlID0gdHJ1ZTtcbiAgICAgICAgICAgICAgICAgICAgcmVtYWluaW5nRW1pc3Npb25zLS07XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIHZhbHVlc1tzb3VyY2VJbmRleF0gPSB2YWx1ZTtcbiAgICAgICAgICAgIH0sIGZ1bmN0aW9uICgpIHsgcmV0dXJuIHJlbWFpbmluZ0NvbXBsZXRpb25zLS07IH0sIHVuZGVmaW5lZCwgZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgIGlmICghcmVtYWluaW5nQ29tcGxldGlvbnMgfHwgIWhhc1ZhbHVlKSB7XG4gICAgICAgICAgICAgICAgICAgIGlmICghcmVtYWluaW5nRW1pc3Npb25zKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBzdWJzY3JpYmVyLm5leHQoa2V5cyA/IGNyZWF0ZU9iamVjdF8xLmNyZWF0ZU9iamVjdChrZXlzLCB2YWx1ZXMpIDogdmFsdWVzKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICBzdWJzY3JpYmVyLmNvbXBsZXRlKCk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSkpO1xuICAgICAgICB9O1xuICAgICAgICBmb3IgKHZhciBzb3VyY2VJbmRleCA9IDA7IHNvdXJjZUluZGV4IDwgbGVuZ3RoOyBzb3VyY2VJbmRleCsrKSB7XG4gICAgICAgICAgICBfbG9vcF8xKHNvdXJjZUluZGV4KTtcbiAgICAgICAgfVxuICAgIH0pO1xuICAgIHJldHVybiByZXN1bHRTZWxlY3RvciA/IHJlc3VsdC5waXBlKG1hcE9uZU9yTWFueUFyZ3NfMS5tYXBPbmVPck1hbnlBcmdzKHJlc3VsdFNlbGVjdG9yKSkgOiByZXN1bHQ7XG59XG5leHBvcnRzLmZvcmtKb2luID0gZm9ya0pvaW47XG4vLyMgc291cmNlTWFwcGluZ1VSTD1mb3JrSm9pbi5qcy5tYXAiLCJcInVzZSBzdHJpY3RcIjtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmV4cG9ydHMuZnJvbSA9IHZvaWQgMDtcbnZhciBzY2hlZHVsZWRfMSA9IHJlcXVpcmUoXCIuLi9zY2hlZHVsZWQvc2NoZWR1bGVkXCIpO1xudmFyIGlubmVyRnJvbV8xID0gcmVxdWlyZShcIi4vaW5uZXJGcm9tXCIpO1xuZnVuY3Rpb24gZnJvbShpbnB1dCwgc2NoZWR1bGVyKSB7XG4gICAgcmV0dXJuIHNjaGVkdWxlciA/IHNjaGVkdWxlZF8xLnNjaGVkdWxlZChpbnB1dCwgc2NoZWR1bGVyKSA6IGlubmVyRnJvbV8xLmlubmVyRnJvbShpbnB1dCk7XG59XG5leHBvcnRzLmZyb20gPSBmcm9tO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9ZnJvbS5qcy5tYXAiLCJcInVzZSBzdHJpY3RcIjtcbnZhciBfX3JlYWQgPSAodGhpcyAmJiB0aGlzLl9fcmVhZCkgfHwgZnVuY3Rpb24gKG8sIG4pIHtcbiAgICB2YXIgbSA9IHR5cGVvZiBTeW1ib2wgPT09IFwiZnVuY3Rpb25cIiAmJiBvW1N5bWJvbC5pdGVyYXRvcl07XG4gICAgaWYgKCFtKSByZXR1cm4gbztcbiAgICB2YXIgaSA9IG0uY2FsbChvKSwgciwgYXIgPSBbXSwgZTtcbiAgICB0cnkge1xuICAgICAgICB3aGlsZSAoKG4gPT09IHZvaWQgMCB8fCBuLS0gPiAwKSAmJiAhKHIgPSBpLm5leHQoKSkuZG9uZSkgYXIucHVzaChyLnZhbHVlKTtcbiAgICB9XG4gICAgY2F0Y2ggKGVycm9yKSB7IGUgPSB7IGVycm9yOiBlcnJvciB9OyB9XG4gICAgZmluYWxseSB7XG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgICBpZiAociAmJiAhci5kb25lICYmIChtID0gaVtcInJldHVyblwiXSkpIG0uY2FsbChpKTtcbiAgICAgICAgfVxuICAgICAgICBmaW5hbGx5IHsgaWYgKGUpIHRocm93IGUuZXJyb3I7IH1cbiAgICB9XG4gICAgcmV0dXJuIGFyO1xufTtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmV4cG9ydHMuZnJvbUV2ZW50ID0gdm9pZCAwO1xudmFyIGlubmVyRnJvbV8xID0gcmVxdWlyZShcIi4uL29ic2VydmFibGUvaW5uZXJGcm9tXCIpO1xudmFyIE9ic2VydmFibGVfMSA9IHJlcXVpcmUoXCIuLi9PYnNlcnZhYmxlXCIpO1xudmFyIG1lcmdlTWFwXzEgPSByZXF1aXJlKFwiLi4vb3BlcmF0b3JzL21lcmdlTWFwXCIpO1xudmFyIGlzQXJyYXlMaWtlXzEgPSByZXF1aXJlKFwiLi4vdXRpbC9pc0FycmF5TGlrZVwiKTtcbnZhciBpc0Z1bmN0aW9uXzEgPSByZXF1aXJlKFwiLi4vdXRpbC9pc0Z1bmN0aW9uXCIpO1xudmFyIG1hcE9uZU9yTWFueUFyZ3NfMSA9IHJlcXVpcmUoXCIuLi91dGlsL21hcE9uZU9yTWFueUFyZ3NcIik7XG52YXIgbm9kZUV2ZW50RW1pdHRlck1ldGhvZHMgPSBbJ2FkZExpc3RlbmVyJywgJ3JlbW92ZUxpc3RlbmVyJ107XG52YXIgZXZlbnRUYXJnZXRNZXRob2RzID0gWydhZGRFdmVudExpc3RlbmVyJywgJ3JlbW92ZUV2ZW50TGlzdGVuZXInXTtcbnZhciBqcXVlcnlNZXRob2RzID0gWydvbicsICdvZmYnXTtcbmZ1bmN0aW9uIGZyb21FdmVudCh0YXJnZXQsIGV2ZW50TmFtZSwgb3B0aW9ucywgcmVzdWx0U2VsZWN0b3IpIHtcbiAgICBpZiAoaXNGdW5jdGlvbl8xLmlzRnVuY3Rpb24ob3B0aW9ucykpIHtcbiAgICAgICAgcmVzdWx0U2VsZWN0b3IgPSBvcHRpb25zO1xuICAgICAgICBvcHRpb25zID0gdW5kZWZpbmVkO1xuICAgIH1cbiAgICBpZiAocmVzdWx0U2VsZWN0b3IpIHtcbiAgICAgICAgcmV0dXJuIGZyb21FdmVudCh0YXJnZXQsIGV2ZW50TmFtZSwgb3B0aW9ucykucGlwZShtYXBPbmVPck1hbnlBcmdzXzEubWFwT25lT3JNYW55QXJncyhyZXN1bHRTZWxlY3RvcikpO1xuICAgIH1cbiAgICB2YXIgX2EgPSBfX3JlYWQoaXNFdmVudFRhcmdldCh0YXJnZXQpXG4gICAgICAgID8gZXZlbnRUYXJnZXRNZXRob2RzLm1hcChmdW5jdGlvbiAobWV0aG9kTmFtZSkgeyByZXR1cm4gZnVuY3Rpb24gKGhhbmRsZXIpIHsgcmV0dXJuIHRhcmdldFttZXRob2ROYW1lXShldmVudE5hbWUsIGhhbmRsZXIsIG9wdGlvbnMpOyB9OyB9KVxuICAgICAgICA6XG4gICAgICAgICAgICBpc05vZGVTdHlsZUV2ZW50RW1pdHRlcih0YXJnZXQpXG4gICAgICAgICAgICAgICAgPyBub2RlRXZlbnRFbWl0dGVyTWV0aG9kcy5tYXAodG9Db21tb25IYW5kbGVyUmVnaXN0cnkodGFyZ2V0LCBldmVudE5hbWUpKVxuICAgICAgICAgICAgICAgIDogaXNKUXVlcnlTdHlsZUV2ZW50RW1pdHRlcih0YXJnZXQpXG4gICAgICAgICAgICAgICAgICAgID8ganF1ZXJ5TWV0aG9kcy5tYXAodG9Db21tb25IYW5kbGVyUmVnaXN0cnkodGFyZ2V0LCBldmVudE5hbWUpKVxuICAgICAgICAgICAgICAgICAgICA6IFtdLCAyKSwgYWRkID0gX2FbMF0sIHJlbW92ZSA9IF9hWzFdO1xuICAgIGlmICghYWRkKSB7XG4gICAgICAgIGlmIChpc0FycmF5TGlrZV8xLmlzQXJyYXlMaWtlKHRhcmdldCkpIHtcbiAgICAgICAgICAgIHJldHVybiBtZXJnZU1hcF8xLm1lcmdlTWFwKGZ1bmN0aW9uIChzdWJUYXJnZXQpIHsgcmV0dXJuIGZyb21FdmVudChzdWJUYXJnZXQsIGV2ZW50TmFtZSwgb3B0aW9ucyk7IH0pKGlubmVyRnJvbV8xLmlubmVyRnJvbSh0YXJnZXQpKTtcbiAgICAgICAgfVxuICAgIH1cbiAgICBpZiAoIWFkZCkge1xuICAgICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCdJbnZhbGlkIGV2ZW50IHRhcmdldCcpO1xuICAgIH1cbiAgICByZXR1cm4gbmV3IE9ic2VydmFibGVfMS5PYnNlcnZhYmxlKGZ1bmN0aW9uIChzdWJzY3JpYmVyKSB7XG4gICAgICAgIHZhciBoYW5kbGVyID0gZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgdmFyIGFyZ3MgPSBbXTtcbiAgICAgICAgICAgIGZvciAodmFyIF9pID0gMDsgX2kgPCBhcmd1bWVudHMubGVuZ3RoOyBfaSsrKSB7XG4gICAgICAgICAgICAgICAgYXJnc1tfaV0gPSBhcmd1bWVudHNbX2ldO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuIHN1YnNjcmliZXIubmV4dCgxIDwgYXJncy5sZW5ndGggPyBhcmdzIDogYXJnc1swXSk7XG4gICAgICAgIH07XG4gICAgICAgIGFkZChoYW5kbGVyKTtcbiAgICAgICAgcmV0dXJuIGZ1bmN0aW9uICgpIHsgcmV0dXJuIHJlbW92ZShoYW5kbGVyKTsgfTtcbiAgICB9KTtcbn1cbmV4cG9ydHMuZnJvbUV2ZW50ID0gZnJvbUV2ZW50O1xuZnVuY3Rpb24gdG9Db21tb25IYW5kbGVyUmVnaXN0cnkodGFyZ2V0LCBldmVudE5hbWUpIHtcbiAgICByZXR1cm4gZnVuY3Rpb24gKG1ldGhvZE5hbWUpIHsgcmV0dXJuIGZ1bmN0aW9uIChoYW5kbGVyKSB7IHJldHVybiB0YXJnZXRbbWV0aG9kTmFtZV0oZXZlbnROYW1lLCBoYW5kbGVyKTsgfTsgfTtcbn1cbmZ1bmN0aW9uIGlzTm9kZVN0eWxlRXZlbnRFbWl0dGVyKHRhcmdldCkge1xuICAgIHJldHVybiBpc0Z1bmN0aW9uXzEuaXNGdW5jdGlvbih0YXJnZXQuYWRkTGlzdGVuZXIpICYmIGlzRnVuY3Rpb25fMS5pc0Z1bmN0aW9uKHRhcmdldC5yZW1vdmVMaXN0ZW5lcik7XG59XG5mdW5jdGlvbiBpc0pRdWVyeVN0eWxlRXZlbnRFbWl0dGVyKHRhcmdldCkge1xuICAgIHJldHVybiBpc0Z1bmN0aW9uXzEuaXNGdW5jdGlvbih0YXJnZXQub24pICYmIGlzRnVuY3Rpb25fMS5pc0Z1bmN0aW9uKHRhcmdldC5vZmYpO1xufVxuZnVuY3Rpb24gaXNFdmVudFRhcmdldCh0YXJnZXQpIHtcbiAgICByZXR1cm4gaXNGdW5jdGlvbl8xLmlzRnVuY3Rpb24odGFyZ2V0LmFkZEV2ZW50TGlzdGVuZXIpICYmIGlzRnVuY3Rpb25fMS5pc0Z1bmN0aW9uKHRhcmdldC5yZW1vdmVFdmVudExpc3RlbmVyKTtcbn1cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWZyb21FdmVudC5qcy5tYXAiLCJcInVzZSBzdHJpY3RcIjtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmV4cG9ydHMuZnJvbUV2ZW50UGF0dGVybiA9IHZvaWQgMDtcbnZhciBPYnNlcnZhYmxlXzEgPSByZXF1aXJlKFwiLi4vT2JzZXJ2YWJsZVwiKTtcbnZhciBpc0Z1bmN0aW9uXzEgPSByZXF1aXJlKFwiLi4vdXRpbC9pc0Z1bmN0aW9uXCIpO1xudmFyIG1hcE9uZU9yTWFueUFyZ3NfMSA9IHJlcXVpcmUoXCIuLi91dGlsL21hcE9uZU9yTWFueUFyZ3NcIik7XG5mdW5jdGlvbiBmcm9tRXZlbnRQYXR0ZXJuKGFkZEhhbmRsZXIsIHJlbW92ZUhhbmRsZXIsIHJlc3VsdFNlbGVjdG9yKSB7XG4gICAgaWYgKHJlc3VsdFNlbGVjdG9yKSB7XG4gICAgICAgIHJldHVybiBmcm9tRXZlbnRQYXR0ZXJuKGFkZEhhbmRsZXIsIHJlbW92ZUhhbmRsZXIpLnBpcGUobWFwT25lT3JNYW55QXJnc18xLm1hcE9uZU9yTWFueUFyZ3MocmVzdWx0U2VsZWN0b3IpKTtcbiAgICB9XG4gICAgcmV0dXJuIG5ldyBPYnNlcnZhYmxlXzEuT2JzZXJ2YWJsZShmdW5jdGlvbiAoc3Vic2NyaWJlcikge1xuICAgICAgICB2YXIgaGFuZGxlciA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIHZhciBlID0gW107XG4gICAgICAgICAgICBmb3IgKHZhciBfaSA9IDA7IF9pIDwgYXJndW1lbnRzLmxlbmd0aDsgX2krKykge1xuICAgICAgICAgICAgICAgIGVbX2ldID0gYXJndW1lbnRzW19pXTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybiBzdWJzY3JpYmVyLm5leHQoZS5sZW5ndGggPT09IDEgPyBlWzBdIDogZSk7XG4gICAgICAgIH07XG4gICAgICAgIHZhciByZXRWYWx1ZSA9IGFkZEhhbmRsZXIoaGFuZGxlcik7XG4gICAgICAgIHJldHVybiBpc0Z1bmN0aW9uXzEuaXNGdW5jdGlvbihyZW1vdmVIYW5kbGVyKSA/IGZ1bmN0aW9uICgpIHsgcmV0dXJuIHJlbW92ZUhhbmRsZXIoaGFuZGxlciwgcmV0VmFsdWUpOyB9IDogdW5kZWZpbmVkO1xuICAgIH0pO1xufVxuZXhwb3J0cy5mcm9tRXZlbnRQYXR0ZXJuID0gZnJvbUV2ZW50UGF0dGVybjtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWZyb21FdmVudFBhdHRlcm4uanMubWFwIiwiXCJ1c2Ugc3RyaWN0XCI7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5leHBvcnRzLmZyb21TdWJzY3JpYmFibGUgPSB2b2lkIDA7XG52YXIgT2JzZXJ2YWJsZV8xID0gcmVxdWlyZShcIi4uL09ic2VydmFibGVcIik7XG5mdW5jdGlvbiBmcm9tU3Vic2NyaWJhYmxlKHN1YnNjcmliYWJsZSkge1xuICAgIHJldHVybiBuZXcgT2JzZXJ2YWJsZV8xLk9ic2VydmFibGUoZnVuY3Rpb24gKHN1YnNjcmliZXIpIHsgcmV0dXJuIHN1YnNjcmliYWJsZS5zdWJzY3JpYmUoc3Vic2NyaWJlcik7IH0pO1xufVxuZXhwb3J0cy5mcm9tU3Vic2NyaWJhYmxlID0gZnJvbVN1YnNjcmliYWJsZTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWZyb21TdWJzY3JpYmFibGUuanMubWFwIiwiXCJ1c2Ugc3RyaWN0XCI7XG52YXIgX19nZW5lcmF0b3IgPSAodGhpcyAmJiB0aGlzLl9fZ2VuZXJhdG9yKSB8fCBmdW5jdGlvbiAodGhpc0FyZywgYm9keSkge1xuICAgIHZhciBfID0geyBsYWJlbDogMCwgc2VudDogZnVuY3Rpb24oKSB7IGlmICh0WzBdICYgMSkgdGhyb3cgdFsxXTsgcmV0dXJuIHRbMV07IH0sIHRyeXM6IFtdLCBvcHM6IFtdIH0sIGYsIHksIHQsIGc7XG4gICAgcmV0dXJuIGcgPSB7IG5leHQ6IHZlcmIoMCksIFwidGhyb3dcIjogdmVyYigxKSwgXCJyZXR1cm5cIjogdmVyYigyKSB9LCB0eXBlb2YgU3ltYm9sID09PSBcImZ1bmN0aW9uXCIgJiYgKGdbU3ltYm9sLml0ZXJhdG9yXSA9IGZ1bmN0aW9uKCkgeyByZXR1cm4gdGhpczsgfSksIGc7XG4gICAgZnVuY3Rpb24gdmVyYihuKSB7IHJldHVybiBmdW5jdGlvbiAodikgeyByZXR1cm4gc3RlcChbbiwgdl0pOyB9OyB9XG4gICAgZnVuY3Rpb24gc3RlcChvcCkge1xuICAgICAgICBpZiAoZikgdGhyb3cgbmV3IFR5cGVFcnJvcihcIkdlbmVyYXRvciBpcyBhbHJlYWR5IGV4ZWN1dGluZy5cIik7XG4gICAgICAgIHdoaWxlIChfKSB0cnkge1xuICAgICAgICAgICAgaWYgKGYgPSAxLCB5ICYmICh0ID0gb3BbMF0gJiAyID8geVtcInJldHVyblwiXSA6IG9wWzBdID8geVtcInRocm93XCJdIHx8ICgodCA9IHlbXCJyZXR1cm5cIl0pICYmIHQuY2FsbCh5KSwgMCkgOiB5Lm5leHQpICYmICEodCA9IHQuY2FsbCh5LCBvcFsxXSkpLmRvbmUpIHJldHVybiB0O1xuICAgICAgICAgICAgaWYgKHkgPSAwLCB0KSBvcCA9IFtvcFswXSAmIDIsIHQudmFsdWVdO1xuICAgICAgICAgICAgc3dpdGNoIChvcFswXSkge1xuICAgICAgICAgICAgICAgIGNhc2UgMDogY2FzZSAxOiB0ID0gb3A7IGJyZWFrO1xuICAgICAgICAgICAgICAgIGNhc2UgNDogXy5sYWJlbCsrOyByZXR1cm4geyB2YWx1ZTogb3BbMV0sIGRvbmU6IGZhbHNlIH07XG4gICAgICAgICAgICAgICAgY2FzZSA1OiBfLmxhYmVsKys7IHkgPSBvcFsxXTsgb3AgPSBbMF07IGNvbnRpbnVlO1xuICAgICAgICAgICAgICAgIGNhc2UgNzogb3AgPSBfLm9wcy5wb3AoKTsgXy50cnlzLnBvcCgpOyBjb250aW51ZTtcbiAgICAgICAgICAgICAgICBkZWZhdWx0OlxuICAgICAgICAgICAgICAgICAgICBpZiAoISh0ID0gXy50cnlzLCB0ID0gdC5sZW5ndGggPiAwICYmIHRbdC5sZW5ndGggLSAxXSkgJiYgKG9wWzBdID09PSA2IHx8IG9wWzBdID09PSAyKSkgeyBfID0gMDsgY29udGludWU7IH1cbiAgICAgICAgICAgICAgICAgICAgaWYgKG9wWzBdID09PSAzICYmICghdCB8fCAob3BbMV0gPiB0WzBdICYmIG9wWzFdIDwgdFszXSkpKSB7IF8ubGFiZWwgPSBvcFsxXTsgYnJlYWs7IH1cbiAgICAgICAgICAgICAgICAgICAgaWYgKG9wWzBdID09PSA2ICYmIF8ubGFiZWwgPCB0WzFdKSB7IF8ubGFiZWwgPSB0WzFdOyB0ID0gb3A7IGJyZWFrOyB9XG4gICAgICAgICAgICAgICAgICAgIGlmICh0ICYmIF8ubGFiZWwgPCB0WzJdKSB7IF8ubGFiZWwgPSB0WzJdOyBfLm9wcy5wdXNoKG9wKTsgYnJlYWs7IH1cbiAgICAgICAgICAgICAgICAgICAgaWYgKHRbMl0pIF8ub3BzLnBvcCgpO1xuICAgICAgICAgICAgICAgICAgICBfLnRyeXMucG9wKCk7IGNvbnRpbnVlO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgb3AgPSBib2R5LmNhbGwodGhpc0FyZywgXyk7XG4gICAgICAgIH0gY2F0Y2ggKGUpIHsgb3AgPSBbNiwgZV07IHkgPSAwOyB9IGZpbmFsbHkgeyBmID0gdCA9IDA7IH1cbiAgICAgICAgaWYgKG9wWzBdICYgNSkgdGhyb3cgb3BbMV07IHJldHVybiB7IHZhbHVlOiBvcFswXSA/IG9wWzFdIDogdm9pZCAwLCBkb25lOiB0cnVlIH07XG4gICAgfVxufTtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmV4cG9ydHMuZ2VuZXJhdGUgPSB2b2lkIDA7XG52YXIgaWRlbnRpdHlfMSA9IHJlcXVpcmUoXCIuLi91dGlsL2lkZW50aXR5XCIpO1xudmFyIGlzU2NoZWR1bGVyXzEgPSByZXF1aXJlKFwiLi4vdXRpbC9pc1NjaGVkdWxlclwiKTtcbnZhciBkZWZlcl8xID0gcmVxdWlyZShcIi4vZGVmZXJcIik7XG52YXIgc2NoZWR1bGVJdGVyYWJsZV8xID0gcmVxdWlyZShcIi4uL3NjaGVkdWxlZC9zY2hlZHVsZUl0ZXJhYmxlXCIpO1xuZnVuY3Rpb24gZ2VuZXJhdGUoaW5pdGlhbFN0YXRlT3JPcHRpb25zLCBjb25kaXRpb24sIGl0ZXJhdGUsIHJlc3VsdFNlbGVjdG9yT3JTY2hlZHVsZXIsIHNjaGVkdWxlcikge1xuICAgIHZhciBfYSwgX2I7XG4gICAgdmFyIHJlc3VsdFNlbGVjdG9yO1xuICAgIHZhciBpbml0aWFsU3RhdGU7XG4gICAgaWYgKGFyZ3VtZW50cy5sZW5ndGggPT09IDEpIHtcbiAgICAgICAgKF9hID0gaW5pdGlhbFN0YXRlT3JPcHRpb25zLCBpbml0aWFsU3RhdGUgPSBfYS5pbml0aWFsU3RhdGUsIGNvbmRpdGlvbiA9IF9hLmNvbmRpdGlvbiwgaXRlcmF0ZSA9IF9hLml0ZXJhdGUsIF9iID0gX2EucmVzdWx0U2VsZWN0b3IsIHJlc3VsdFNlbGVjdG9yID0gX2IgPT09IHZvaWQgMCA/IGlkZW50aXR5XzEuaWRlbnRpdHkgOiBfYiwgc2NoZWR1bGVyID0gX2Euc2NoZWR1bGVyKTtcbiAgICB9XG4gICAgZWxzZSB7XG4gICAgICAgIGluaXRpYWxTdGF0ZSA9IGluaXRpYWxTdGF0ZU9yT3B0aW9ucztcbiAgICAgICAgaWYgKCFyZXN1bHRTZWxlY3Rvck9yU2NoZWR1bGVyIHx8IGlzU2NoZWR1bGVyXzEuaXNTY2hlZHVsZXIocmVzdWx0U2VsZWN0b3JPclNjaGVkdWxlcikpIHtcbiAgICAgICAgICAgIHJlc3VsdFNlbGVjdG9yID0gaWRlbnRpdHlfMS5pZGVudGl0eTtcbiAgICAgICAgICAgIHNjaGVkdWxlciA9IHJlc3VsdFNlbGVjdG9yT3JTY2hlZHVsZXI7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICByZXN1bHRTZWxlY3RvciA9IHJlc3VsdFNlbGVjdG9yT3JTY2hlZHVsZXI7XG4gICAgICAgIH1cbiAgICB9XG4gICAgZnVuY3Rpb24gZ2VuKCkge1xuICAgICAgICB2YXIgc3RhdGU7XG4gICAgICAgIHJldHVybiBfX2dlbmVyYXRvcih0aGlzLCBmdW5jdGlvbiAoX2EpIHtcbiAgICAgICAgICAgIHN3aXRjaCAoX2EubGFiZWwpIHtcbiAgICAgICAgICAgICAgICBjYXNlIDA6XG4gICAgICAgICAgICAgICAgICAgIHN0YXRlID0gaW5pdGlhbFN0YXRlO1xuICAgICAgICAgICAgICAgICAgICBfYS5sYWJlbCA9IDE7XG4gICAgICAgICAgICAgICAgY2FzZSAxOlxuICAgICAgICAgICAgICAgICAgICBpZiAoISghY29uZGl0aW9uIHx8IGNvbmRpdGlvbihzdGF0ZSkpKSByZXR1cm4gWzMsIDRdO1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gWzQsIHJlc3VsdFNlbGVjdG9yKHN0YXRlKV07XG4gICAgICAgICAgICAgICAgY2FzZSAyOlxuICAgICAgICAgICAgICAgICAgICBfYS5zZW50KCk7XG4gICAgICAgICAgICAgICAgICAgIF9hLmxhYmVsID0gMztcbiAgICAgICAgICAgICAgICBjYXNlIDM6XG4gICAgICAgICAgICAgICAgICAgIHN0YXRlID0gaXRlcmF0ZShzdGF0ZSk7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBbMywgMV07XG4gICAgICAgICAgICAgICAgY2FzZSA0OiByZXR1cm4gWzJdO1xuICAgICAgICAgICAgfVxuICAgICAgICB9KTtcbiAgICB9XG4gICAgcmV0dXJuIGRlZmVyXzEuZGVmZXIoKHNjaGVkdWxlclxuICAgICAgICA/XG4gICAgICAgICAgICBmdW5jdGlvbiAoKSB7IHJldHVybiBzY2hlZHVsZUl0ZXJhYmxlXzEuc2NoZWR1bGVJdGVyYWJsZShnZW4oKSwgc2NoZWR1bGVyKTsgfVxuICAgICAgICA6XG4gICAgICAgICAgICBnZW4pKTtcbn1cbmV4cG9ydHMuZ2VuZXJhdGUgPSBnZW5lcmF0ZTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWdlbmVyYXRlLmpzLm1hcCIsIlwidXNlIHN0cmljdFwiO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuZXhwb3J0cy5paWYgPSB2b2lkIDA7XG52YXIgZGVmZXJfMSA9IHJlcXVpcmUoXCIuL2RlZmVyXCIpO1xuZnVuY3Rpb24gaWlmKGNvbmRpdGlvbiwgdHJ1ZVJlc3VsdCwgZmFsc2VSZXN1bHQpIHtcbiAgICByZXR1cm4gZGVmZXJfMS5kZWZlcihmdW5jdGlvbiAoKSB7IHJldHVybiAoY29uZGl0aW9uKCkgPyB0cnVlUmVzdWx0IDogZmFsc2VSZXN1bHQpOyB9KTtcbn1cbmV4cG9ydHMuaWlmID0gaWlmO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9aWlmLmpzLm1hcCIsIlwidXNlIHN0cmljdFwiO1xudmFyIF9fYXdhaXRlciA9ICh0aGlzICYmIHRoaXMuX19hd2FpdGVyKSB8fCBmdW5jdGlvbiAodGhpc0FyZywgX2FyZ3VtZW50cywgUCwgZ2VuZXJhdG9yKSB7XG4gICAgZnVuY3Rpb24gYWRvcHQodmFsdWUpIHsgcmV0dXJuIHZhbHVlIGluc3RhbmNlb2YgUCA/IHZhbHVlIDogbmV3IFAoZnVuY3Rpb24gKHJlc29sdmUpIHsgcmVzb2x2ZSh2YWx1ZSk7IH0pOyB9XG4gICAgcmV0dXJuIG5ldyAoUCB8fCAoUCA9IFByb21pc2UpKShmdW5jdGlvbiAocmVzb2x2ZSwgcmVqZWN0KSB7XG4gICAgICAgIGZ1bmN0aW9uIGZ1bGZpbGxlZCh2YWx1ZSkgeyB0cnkgeyBzdGVwKGdlbmVyYXRvci5uZXh0KHZhbHVlKSk7IH0gY2F0Y2ggKGUpIHsgcmVqZWN0KGUpOyB9IH1cbiAgICAgICAgZnVuY3Rpb24gcmVqZWN0ZWQodmFsdWUpIHsgdHJ5IHsgc3RlcChnZW5lcmF0b3JbXCJ0aHJvd1wiXSh2YWx1ZSkpOyB9IGNhdGNoIChlKSB7IHJlamVjdChlKTsgfSB9XG4gICAgICAgIGZ1bmN0aW9uIHN0ZXAocmVzdWx0KSB7IHJlc3VsdC5kb25lID8gcmVzb2x2ZShyZXN1bHQudmFsdWUpIDogYWRvcHQocmVzdWx0LnZhbHVlKS50aGVuKGZ1bGZpbGxlZCwgcmVqZWN0ZWQpOyB9XG4gICAgICAgIHN0ZXAoKGdlbmVyYXRvciA9IGdlbmVyYXRvci5hcHBseSh0aGlzQXJnLCBfYXJndW1lbnRzIHx8IFtdKSkubmV4dCgpKTtcbiAgICB9KTtcbn07XG52YXIgX19nZW5lcmF0b3IgPSAodGhpcyAmJiB0aGlzLl9fZ2VuZXJhdG9yKSB8fCBmdW5jdGlvbiAodGhpc0FyZywgYm9keSkge1xuICAgIHZhciBfID0geyBsYWJlbDogMCwgc2VudDogZnVuY3Rpb24oKSB7IGlmICh0WzBdICYgMSkgdGhyb3cgdFsxXTsgcmV0dXJuIHRbMV07IH0sIHRyeXM6IFtdLCBvcHM6IFtdIH0sIGYsIHksIHQsIGc7XG4gICAgcmV0dXJuIGcgPSB7IG5leHQ6IHZlcmIoMCksIFwidGhyb3dcIjogdmVyYigxKSwgXCJyZXR1cm5cIjogdmVyYigyKSB9LCB0eXBlb2YgU3ltYm9sID09PSBcImZ1bmN0aW9uXCIgJiYgKGdbU3ltYm9sLml0ZXJhdG9yXSA9IGZ1bmN0aW9uKCkgeyByZXR1cm4gdGhpczsgfSksIGc7XG4gICAgZnVuY3Rpb24gdmVyYihuKSB7IHJldHVybiBmdW5jdGlvbiAodikgeyByZXR1cm4gc3RlcChbbiwgdl0pOyB9OyB9XG4gICAgZnVuY3Rpb24gc3RlcChvcCkge1xuICAgICAgICBpZiAoZikgdGhyb3cgbmV3IFR5cGVFcnJvcihcIkdlbmVyYXRvciBpcyBhbHJlYWR5IGV4ZWN1dGluZy5cIik7XG4gICAgICAgIHdoaWxlIChfKSB0cnkge1xuICAgICAgICAgICAgaWYgKGYgPSAxLCB5ICYmICh0ID0gb3BbMF0gJiAyID8geVtcInJldHVyblwiXSA6IG9wWzBdID8geVtcInRocm93XCJdIHx8ICgodCA9IHlbXCJyZXR1cm5cIl0pICYmIHQuY2FsbCh5KSwgMCkgOiB5Lm5leHQpICYmICEodCA9IHQuY2FsbCh5LCBvcFsxXSkpLmRvbmUpIHJldHVybiB0O1xuICAgICAgICAgICAgaWYgKHkgPSAwLCB0KSBvcCA9IFtvcFswXSAmIDIsIHQudmFsdWVdO1xuICAgICAgICAgICAgc3dpdGNoIChvcFswXSkge1xuICAgICAgICAgICAgICAgIGNhc2UgMDogY2FzZSAxOiB0ID0gb3A7IGJyZWFrO1xuICAgICAgICAgICAgICAgIGNhc2UgNDogXy5sYWJlbCsrOyByZXR1cm4geyB2YWx1ZTogb3BbMV0sIGRvbmU6IGZhbHNlIH07XG4gICAgICAgICAgICAgICAgY2FzZSA1OiBfLmxhYmVsKys7IHkgPSBvcFsxXTsgb3AgPSBbMF07IGNvbnRpbnVlO1xuICAgICAgICAgICAgICAgIGNhc2UgNzogb3AgPSBfLm9wcy5wb3AoKTsgXy50cnlzLnBvcCgpOyBjb250aW51ZTtcbiAgICAgICAgICAgICAgICBkZWZhdWx0OlxuICAgICAgICAgICAgICAgICAgICBpZiAoISh0ID0gXy50cnlzLCB0ID0gdC5sZW5ndGggPiAwICYmIHRbdC5sZW5ndGggLSAxXSkgJiYgKG9wWzBdID09PSA2IHx8IG9wWzBdID09PSAyKSkgeyBfID0gMDsgY29udGludWU7IH1cbiAgICAgICAgICAgICAgICAgICAgaWYgKG9wWzBdID09PSAzICYmICghdCB8fCAob3BbMV0gPiB0WzBdICYmIG9wWzFdIDwgdFszXSkpKSB7IF8ubGFiZWwgPSBvcFsxXTsgYnJlYWs7IH1cbiAgICAgICAgICAgICAgICAgICAgaWYgKG9wWzBdID09PSA2ICYmIF8ubGFiZWwgPCB0WzFdKSB7IF8ubGFiZWwgPSB0WzFdOyB0ID0gb3A7IGJyZWFrOyB9XG4gICAgICAgICAgICAgICAgICAgIGlmICh0ICYmIF8ubGFiZWwgPCB0WzJdKSB7IF8ubGFiZWwgPSB0WzJdOyBfLm9wcy5wdXNoKG9wKTsgYnJlYWs7IH1cbiAgICAgICAgICAgICAgICAgICAgaWYgKHRbMl0pIF8ub3BzLnBvcCgpO1xuICAgICAgICAgICAgICAgICAgICBfLnRyeXMucG9wKCk7IGNvbnRpbnVlO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgb3AgPSBib2R5LmNhbGwodGhpc0FyZywgXyk7XG4gICAgICAgIH0gY2F0Y2ggKGUpIHsgb3AgPSBbNiwgZV07IHkgPSAwOyB9IGZpbmFsbHkgeyBmID0gdCA9IDA7IH1cbiAgICAgICAgaWYgKG9wWzBdICYgNSkgdGhyb3cgb3BbMV07IHJldHVybiB7IHZhbHVlOiBvcFswXSA/IG9wWzFdIDogdm9pZCAwLCBkb25lOiB0cnVlIH07XG4gICAgfVxufTtcbnZhciBfX2FzeW5jVmFsdWVzID0gKHRoaXMgJiYgdGhpcy5fX2FzeW5jVmFsdWVzKSB8fCBmdW5jdGlvbiAobykge1xuICAgIGlmICghU3ltYm9sLmFzeW5jSXRlcmF0b3IpIHRocm93IG5ldyBUeXBlRXJyb3IoXCJTeW1ib2wuYXN5bmNJdGVyYXRvciBpcyBub3QgZGVmaW5lZC5cIik7XG4gICAgdmFyIG0gPSBvW1N5bWJvbC5hc3luY0l0ZXJhdG9yXSwgaTtcbiAgICByZXR1cm4gbSA/IG0uY2FsbChvKSA6IChvID0gdHlwZW9mIF9fdmFsdWVzID09PSBcImZ1bmN0aW9uXCIgPyBfX3ZhbHVlcyhvKSA6IG9bU3ltYm9sLml0ZXJhdG9yXSgpLCBpID0ge30sIHZlcmIoXCJuZXh0XCIpLCB2ZXJiKFwidGhyb3dcIiksIHZlcmIoXCJyZXR1cm5cIiksIGlbU3ltYm9sLmFzeW5jSXRlcmF0b3JdID0gZnVuY3Rpb24gKCkgeyByZXR1cm4gdGhpczsgfSwgaSk7XG4gICAgZnVuY3Rpb24gdmVyYihuKSB7IGlbbl0gPSBvW25dICYmIGZ1bmN0aW9uICh2KSB7IHJldHVybiBuZXcgUHJvbWlzZShmdW5jdGlvbiAocmVzb2x2ZSwgcmVqZWN0KSB7IHYgPSBvW25dKHYpLCBzZXR0bGUocmVzb2x2ZSwgcmVqZWN0LCB2LmRvbmUsIHYudmFsdWUpOyB9KTsgfTsgfVxuICAgIGZ1bmN0aW9uIHNldHRsZShyZXNvbHZlLCByZWplY3QsIGQsIHYpIHsgUHJvbWlzZS5yZXNvbHZlKHYpLnRoZW4oZnVuY3Rpb24odikgeyByZXNvbHZlKHsgdmFsdWU6IHYsIGRvbmU6IGQgfSk7IH0sIHJlamVjdCk7IH1cbn07XG52YXIgX192YWx1ZXMgPSAodGhpcyAmJiB0aGlzLl9fdmFsdWVzKSB8fCBmdW5jdGlvbihvKSB7XG4gICAgdmFyIHMgPSB0eXBlb2YgU3ltYm9sID09PSBcImZ1bmN0aW9uXCIgJiYgU3ltYm9sLml0ZXJhdG9yLCBtID0gcyAmJiBvW3NdLCBpID0gMDtcbiAgICBpZiAobSkgcmV0dXJuIG0uY2FsbChvKTtcbiAgICBpZiAobyAmJiB0eXBlb2Ygby5sZW5ndGggPT09IFwibnVtYmVyXCIpIHJldHVybiB7XG4gICAgICAgIG5leHQ6IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIGlmIChvICYmIGkgPj0gby5sZW5ndGgpIG8gPSB2b2lkIDA7XG4gICAgICAgICAgICByZXR1cm4geyB2YWx1ZTogbyAmJiBvW2krK10sIGRvbmU6ICFvIH07XG4gICAgICAgIH1cbiAgICB9O1xuICAgIHRocm93IG5ldyBUeXBlRXJyb3IocyA/IFwiT2JqZWN0IGlzIG5vdCBpdGVyYWJsZS5cIiA6IFwiU3ltYm9sLml0ZXJhdG9yIGlzIG5vdCBkZWZpbmVkLlwiKTtcbn07XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5leHBvcnRzLmZyb21SZWFkYWJsZVN0cmVhbUxpa2UgPSBleHBvcnRzLmZyb21Bc3luY0l0ZXJhYmxlID0gZXhwb3J0cy5mcm9tSXRlcmFibGUgPSBleHBvcnRzLmZyb21Qcm9taXNlID0gZXhwb3J0cy5mcm9tQXJyYXlMaWtlID0gZXhwb3J0cy5mcm9tSW50ZXJvcE9ic2VydmFibGUgPSBleHBvcnRzLmlubmVyRnJvbSA9IHZvaWQgMDtcbnZhciBpc0FycmF5TGlrZV8xID0gcmVxdWlyZShcIi4uL3V0aWwvaXNBcnJheUxpa2VcIik7XG52YXIgaXNQcm9taXNlXzEgPSByZXF1aXJlKFwiLi4vdXRpbC9pc1Byb21pc2VcIik7XG52YXIgT2JzZXJ2YWJsZV8xID0gcmVxdWlyZShcIi4uL09ic2VydmFibGVcIik7XG52YXIgaXNJbnRlcm9wT2JzZXJ2YWJsZV8xID0gcmVxdWlyZShcIi4uL3V0aWwvaXNJbnRlcm9wT2JzZXJ2YWJsZVwiKTtcbnZhciBpc0FzeW5jSXRlcmFibGVfMSA9IHJlcXVpcmUoXCIuLi91dGlsL2lzQXN5bmNJdGVyYWJsZVwiKTtcbnZhciB0aHJvd1Vub2JzZXJ2YWJsZUVycm9yXzEgPSByZXF1aXJlKFwiLi4vdXRpbC90aHJvd1Vub2JzZXJ2YWJsZUVycm9yXCIpO1xudmFyIGlzSXRlcmFibGVfMSA9IHJlcXVpcmUoXCIuLi91dGlsL2lzSXRlcmFibGVcIik7XG52YXIgaXNSZWFkYWJsZVN0cmVhbUxpa2VfMSA9IHJlcXVpcmUoXCIuLi91dGlsL2lzUmVhZGFibGVTdHJlYW1MaWtlXCIpO1xudmFyIGlzRnVuY3Rpb25fMSA9IHJlcXVpcmUoXCIuLi91dGlsL2lzRnVuY3Rpb25cIik7XG52YXIgcmVwb3J0VW5oYW5kbGVkRXJyb3JfMSA9IHJlcXVpcmUoXCIuLi91dGlsL3JlcG9ydFVuaGFuZGxlZEVycm9yXCIpO1xudmFyIG9ic2VydmFibGVfMSA9IHJlcXVpcmUoXCIuLi9zeW1ib2wvb2JzZXJ2YWJsZVwiKTtcbmZ1bmN0aW9uIGlubmVyRnJvbShpbnB1dCkge1xuICAgIGlmIChpbnB1dCBpbnN0YW5jZW9mIE9ic2VydmFibGVfMS5PYnNlcnZhYmxlKSB7XG4gICAgICAgIHJldHVybiBpbnB1dDtcbiAgICB9XG4gICAgaWYgKGlucHV0ICE9IG51bGwpIHtcbiAgICAgICAgaWYgKGlzSW50ZXJvcE9ic2VydmFibGVfMS5pc0ludGVyb3BPYnNlcnZhYmxlKGlucHV0KSkge1xuICAgICAgICAgICAgcmV0dXJuIGZyb21JbnRlcm9wT2JzZXJ2YWJsZShpbnB1dCk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKGlzQXJyYXlMaWtlXzEuaXNBcnJheUxpa2UoaW5wdXQpKSB7XG4gICAgICAgICAgICByZXR1cm4gZnJvbUFycmF5TGlrZShpbnB1dCk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKGlzUHJvbWlzZV8xLmlzUHJvbWlzZShpbnB1dCkpIHtcbiAgICAgICAgICAgIHJldHVybiBmcm9tUHJvbWlzZShpbnB1dCk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKGlzQXN5bmNJdGVyYWJsZV8xLmlzQXN5bmNJdGVyYWJsZShpbnB1dCkpIHtcbiAgICAgICAgICAgIHJldHVybiBmcm9tQXN5bmNJdGVyYWJsZShpbnB1dCk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKGlzSXRlcmFibGVfMS5pc0l0ZXJhYmxlKGlucHV0KSkge1xuICAgICAgICAgICAgcmV0dXJuIGZyb21JdGVyYWJsZShpbnB1dCk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKGlzUmVhZGFibGVTdHJlYW1MaWtlXzEuaXNSZWFkYWJsZVN0cmVhbUxpa2UoaW5wdXQpKSB7XG4gICAgICAgICAgICByZXR1cm4gZnJvbVJlYWRhYmxlU3RyZWFtTGlrZShpbnB1dCk7XG4gICAgICAgIH1cbiAgICB9XG4gICAgdGhyb3cgdGhyb3dVbm9ic2VydmFibGVFcnJvcl8xLmNyZWF0ZUludmFsaWRPYnNlcnZhYmxlVHlwZUVycm9yKGlucHV0KTtcbn1cbmV4cG9ydHMuaW5uZXJGcm9tID0gaW5uZXJGcm9tO1xuZnVuY3Rpb24gZnJvbUludGVyb3BPYnNlcnZhYmxlKG9iaikge1xuICAgIHJldHVybiBuZXcgT2JzZXJ2YWJsZV8xLk9ic2VydmFibGUoZnVuY3Rpb24gKHN1YnNjcmliZXIpIHtcbiAgICAgICAgdmFyIG9icyA9IG9ialtvYnNlcnZhYmxlXzEub2JzZXJ2YWJsZV0oKTtcbiAgICAgICAgaWYgKGlzRnVuY3Rpb25fMS5pc0Z1bmN0aW9uKG9icy5zdWJzY3JpYmUpKSB7XG4gICAgICAgICAgICByZXR1cm4gb2JzLnN1YnNjcmliZShzdWJzY3JpYmVyKTtcbiAgICAgICAgfVxuICAgICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCdQcm92aWRlZCBvYmplY3QgZG9lcyBub3QgY29ycmVjdGx5IGltcGxlbWVudCBTeW1ib2wub2JzZXJ2YWJsZScpO1xuICAgIH0pO1xufVxuZXhwb3J0cy5mcm9tSW50ZXJvcE9ic2VydmFibGUgPSBmcm9tSW50ZXJvcE9ic2VydmFibGU7XG5mdW5jdGlvbiBmcm9tQXJyYXlMaWtlKGFycmF5KSB7XG4gICAgcmV0dXJuIG5ldyBPYnNlcnZhYmxlXzEuT2JzZXJ2YWJsZShmdW5jdGlvbiAoc3Vic2NyaWJlcikge1xuICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IGFycmF5Lmxlbmd0aCAmJiAhc3Vic2NyaWJlci5jbG9zZWQ7IGkrKykge1xuICAgICAgICAgICAgc3Vic2NyaWJlci5uZXh0KGFycmF5W2ldKTtcbiAgICAgICAgfVxuICAgICAgICBzdWJzY3JpYmVyLmNvbXBsZXRlKCk7XG4gICAgfSk7XG59XG5leHBvcnRzLmZyb21BcnJheUxpa2UgPSBmcm9tQXJyYXlMaWtlO1xuZnVuY3Rpb24gZnJvbVByb21pc2UocHJvbWlzZSkge1xuICAgIHJldHVybiBuZXcgT2JzZXJ2YWJsZV8xLk9ic2VydmFibGUoZnVuY3Rpb24gKHN1YnNjcmliZXIpIHtcbiAgICAgICAgcHJvbWlzZVxuICAgICAgICAgICAgLnRoZW4oZnVuY3Rpb24gKHZhbHVlKSB7XG4gICAgICAgICAgICBpZiAoIXN1YnNjcmliZXIuY2xvc2VkKSB7XG4gICAgICAgICAgICAgICAgc3Vic2NyaWJlci5uZXh0KHZhbHVlKTtcbiAgICAgICAgICAgICAgICBzdWJzY3JpYmVyLmNvbXBsZXRlKCk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0sIGZ1bmN0aW9uIChlcnIpIHsgcmV0dXJuIHN1YnNjcmliZXIuZXJyb3IoZXJyKTsgfSlcbiAgICAgICAgICAgIC50aGVuKG51bGwsIHJlcG9ydFVuaGFuZGxlZEVycm9yXzEucmVwb3J0VW5oYW5kbGVkRXJyb3IpO1xuICAgIH0pO1xufVxuZXhwb3J0cy5mcm9tUHJvbWlzZSA9IGZyb21Qcm9taXNlO1xuZnVuY3Rpb24gZnJvbUl0ZXJhYmxlKGl0ZXJhYmxlKSB7XG4gICAgcmV0dXJuIG5ldyBPYnNlcnZhYmxlXzEuT2JzZXJ2YWJsZShmdW5jdGlvbiAoc3Vic2NyaWJlcikge1xuICAgICAgICB2YXIgZV8xLCBfYTtcbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgIGZvciAodmFyIGl0ZXJhYmxlXzEgPSBfX3ZhbHVlcyhpdGVyYWJsZSksIGl0ZXJhYmxlXzFfMSA9IGl0ZXJhYmxlXzEubmV4dCgpOyAhaXRlcmFibGVfMV8xLmRvbmU7IGl0ZXJhYmxlXzFfMSA9IGl0ZXJhYmxlXzEubmV4dCgpKSB7XG4gICAgICAgICAgICAgICAgdmFyIHZhbHVlID0gaXRlcmFibGVfMV8xLnZhbHVlO1xuICAgICAgICAgICAgICAgIHN1YnNjcmliZXIubmV4dCh2YWx1ZSk7XG4gICAgICAgICAgICAgICAgaWYgKHN1YnNjcmliZXIuY2xvc2VkKSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgY2F0Y2ggKGVfMV8xKSB7IGVfMSA9IHsgZXJyb3I6IGVfMV8xIH07IH1cbiAgICAgICAgZmluYWxseSB7XG4gICAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgICAgIGlmIChpdGVyYWJsZV8xXzEgJiYgIWl0ZXJhYmxlXzFfMS5kb25lICYmIChfYSA9IGl0ZXJhYmxlXzEucmV0dXJuKSkgX2EuY2FsbChpdGVyYWJsZV8xKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGZpbmFsbHkgeyBpZiAoZV8xKSB0aHJvdyBlXzEuZXJyb3I7IH1cbiAgICAgICAgfVxuICAgICAgICBzdWJzY3JpYmVyLmNvbXBsZXRlKCk7XG4gICAgfSk7XG59XG5leHBvcnRzLmZyb21JdGVyYWJsZSA9IGZyb21JdGVyYWJsZTtcbmZ1bmN0aW9uIGZyb21Bc3luY0l0ZXJhYmxlKGFzeW5jSXRlcmFibGUpIHtcbiAgICByZXR1cm4gbmV3IE9ic2VydmFibGVfMS5PYnNlcnZhYmxlKGZ1bmN0aW9uIChzdWJzY3JpYmVyKSB7XG4gICAgICAgIHByb2Nlc3MoYXN5bmNJdGVyYWJsZSwgc3Vic2NyaWJlcikuY2F0Y2goZnVuY3Rpb24gKGVycikgeyByZXR1cm4gc3Vic2NyaWJlci5lcnJvcihlcnIpOyB9KTtcbiAgICB9KTtcbn1cbmV4cG9ydHMuZnJvbUFzeW5jSXRlcmFibGUgPSBmcm9tQXN5bmNJdGVyYWJsZTtcbmZ1bmN0aW9uIGZyb21SZWFkYWJsZVN0cmVhbUxpa2UocmVhZGFibGVTdHJlYW0pIHtcbiAgICByZXR1cm4gZnJvbUFzeW5jSXRlcmFibGUoaXNSZWFkYWJsZVN0cmVhbUxpa2VfMS5yZWFkYWJsZVN0cmVhbUxpa2VUb0FzeW5jR2VuZXJhdG9yKHJlYWRhYmxlU3RyZWFtKSk7XG59XG5leHBvcnRzLmZyb21SZWFkYWJsZVN0cmVhbUxpa2UgPSBmcm9tUmVhZGFibGVTdHJlYW1MaWtlO1xuZnVuY3Rpb24gcHJvY2Vzcyhhc3luY0l0ZXJhYmxlLCBzdWJzY3JpYmVyKSB7XG4gICAgdmFyIGFzeW5jSXRlcmFibGVfMSwgYXN5bmNJdGVyYWJsZV8xXzE7XG4gICAgdmFyIGVfMiwgX2E7XG4gICAgcmV0dXJuIF9fYXdhaXRlcih0aGlzLCB2b2lkIDAsIHZvaWQgMCwgZnVuY3Rpb24gKCkge1xuICAgICAgICB2YXIgdmFsdWUsIGVfMl8xO1xuICAgICAgICByZXR1cm4gX19nZW5lcmF0b3IodGhpcywgZnVuY3Rpb24gKF9iKSB7XG4gICAgICAgICAgICBzd2l0Y2ggKF9iLmxhYmVsKSB7XG4gICAgICAgICAgICAgICAgY2FzZSAwOlxuICAgICAgICAgICAgICAgICAgICBfYi50cnlzLnB1c2goWzAsIDUsIDYsIDExXSk7XG4gICAgICAgICAgICAgICAgICAgIGFzeW5jSXRlcmFibGVfMSA9IF9fYXN5bmNWYWx1ZXMoYXN5bmNJdGVyYWJsZSk7XG4gICAgICAgICAgICAgICAgICAgIF9iLmxhYmVsID0gMTtcbiAgICAgICAgICAgICAgICBjYXNlIDE6IHJldHVybiBbNCwgYXN5bmNJdGVyYWJsZV8xLm5leHQoKV07XG4gICAgICAgICAgICAgICAgY2FzZSAyOlxuICAgICAgICAgICAgICAgICAgICBpZiAoIShhc3luY0l0ZXJhYmxlXzFfMSA9IF9iLnNlbnQoKSwgIWFzeW5jSXRlcmFibGVfMV8xLmRvbmUpKSByZXR1cm4gWzMsIDRdO1xuICAgICAgICAgICAgICAgICAgICB2YWx1ZSA9IGFzeW5jSXRlcmFibGVfMV8xLnZhbHVlO1xuICAgICAgICAgICAgICAgICAgICBzdWJzY3JpYmVyLm5leHQodmFsdWUpO1xuICAgICAgICAgICAgICAgICAgICBpZiAoc3Vic2NyaWJlci5jbG9zZWQpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBbMl07XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgX2IubGFiZWwgPSAzO1xuICAgICAgICAgICAgICAgIGNhc2UgMzogcmV0dXJuIFszLCAxXTtcbiAgICAgICAgICAgICAgICBjYXNlIDQ6IHJldHVybiBbMywgMTFdO1xuICAgICAgICAgICAgICAgIGNhc2UgNTpcbiAgICAgICAgICAgICAgICAgICAgZV8yXzEgPSBfYi5zZW50KCk7XG4gICAgICAgICAgICAgICAgICAgIGVfMiA9IHsgZXJyb3I6IGVfMl8xIH07XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBbMywgMTFdO1xuICAgICAgICAgICAgICAgIGNhc2UgNjpcbiAgICAgICAgICAgICAgICAgICAgX2IudHJ5cy5wdXNoKFs2LCAsIDksIDEwXSk7XG4gICAgICAgICAgICAgICAgICAgIGlmICghKGFzeW5jSXRlcmFibGVfMV8xICYmICFhc3luY0l0ZXJhYmxlXzFfMS5kb25lICYmIChfYSA9IGFzeW5jSXRlcmFibGVfMS5yZXR1cm4pKSkgcmV0dXJuIFszLCA4XTtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIFs0LCBfYS5jYWxsKGFzeW5jSXRlcmFibGVfMSldO1xuICAgICAgICAgICAgICAgIGNhc2UgNzpcbiAgICAgICAgICAgICAgICAgICAgX2Iuc2VudCgpO1xuICAgICAgICAgICAgICAgICAgICBfYi5sYWJlbCA9IDg7XG4gICAgICAgICAgICAgICAgY2FzZSA4OiByZXR1cm4gWzMsIDEwXTtcbiAgICAgICAgICAgICAgICBjYXNlIDk6XG4gICAgICAgICAgICAgICAgICAgIGlmIChlXzIpIHRocm93IGVfMi5lcnJvcjtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIFs3XTtcbiAgICAgICAgICAgICAgICBjYXNlIDEwOiByZXR1cm4gWzddO1xuICAgICAgICAgICAgICAgIGNhc2UgMTE6XG4gICAgICAgICAgICAgICAgICAgIHN1YnNjcmliZXIuY29tcGxldGUoKTtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIFsyXTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSk7XG4gICAgfSk7XG59XG4vLyMgc291cmNlTWFwcGluZ1VSTD1pbm5lckZyb20uanMubWFwIiwiXCJ1c2Ugc3RyaWN0XCI7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5leHBvcnRzLmludGVydmFsID0gdm9pZCAwO1xudmFyIGFzeW5jXzEgPSByZXF1aXJlKFwiLi4vc2NoZWR1bGVyL2FzeW5jXCIpO1xudmFyIHRpbWVyXzEgPSByZXF1aXJlKFwiLi90aW1lclwiKTtcbmZ1bmN0aW9uIGludGVydmFsKHBlcmlvZCwgc2NoZWR1bGVyKSB7XG4gICAgaWYgKHBlcmlvZCA9PT0gdm9pZCAwKSB7IHBlcmlvZCA9IDA7IH1cbiAgICBpZiAoc2NoZWR1bGVyID09PSB2b2lkIDApIHsgc2NoZWR1bGVyID0gYXN5bmNfMS5hc3luY1NjaGVkdWxlcjsgfVxuICAgIGlmIChwZXJpb2QgPCAwKSB7XG4gICAgICAgIHBlcmlvZCA9IDA7XG4gICAgfVxuICAgIHJldHVybiB0aW1lcl8xLnRpbWVyKHBlcmlvZCwgcGVyaW9kLCBzY2hlZHVsZXIpO1xufVxuZXhwb3J0cy5pbnRlcnZhbCA9IGludGVydmFsO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9aW50ZXJ2YWwuanMubWFwIiwiXCJ1c2Ugc3RyaWN0XCI7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5leHBvcnRzLm1lcmdlID0gdm9pZCAwO1xudmFyIG1lcmdlQWxsXzEgPSByZXF1aXJlKFwiLi4vb3BlcmF0b3JzL21lcmdlQWxsXCIpO1xudmFyIGlubmVyRnJvbV8xID0gcmVxdWlyZShcIi4vaW5uZXJGcm9tXCIpO1xudmFyIGVtcHR5XzEgPSByZXF1aXJlKFwiLi9lbXB0eVwiKTtcbnZhciBhcmdzXzEgPSByZXF1aXJlKFwiLi4vdXRpbC9hcmdzXCIpO1xudmFyIGZyb21fMSA9IHJlcXVpcmUoXCIuL2Zyb21cIik7XG5mdW5jdGlvbiBtZXJnZSgpIHtcbiAgICB2YXIgYXJncyA9IFtdO1xuICAgIGZvciAodmFyIF9pID0gMDsgX2kgPCBhcmd1bWVudHMubGVuZ3RoOyBfaSsrKSB7XG4gICAgICAgIGFyZ3NbX2ldID0gYXJndW1lbnRzW19pXTtcbiAgICB9XG4gICAgdmFyIHNjaGVkdWxlciA9IGFyZ3NfMS5wb3BTY2hlZHVsZXIoYXJncyk7XG4gICAgdmFyIGNvbmN1cnJlbnQgPSBhcmdzXzEucG9wTnVtYmVyKGFyZ3MsIEluZmluaXR5KTtcbiAgICB2YXIgc291cmNlcyA9IGFyZ3M7XG4gICAgcmV0dXJuICFzb3VyY2VzLmxlbmd0aFxuICAgICAgICA/XG4gICAgICAgICAgICBlbXB0eV8xLkVNUFRZXG4gICAgICAgIDogc291cmNlcy5sZW5ndGggPT09IDFcbiAgICAgICAgICAgID9cbiAgICAgICAgICAgICAgICBpbm5lckZyb21fMS5pbm5lckZyb20oc291cmNlc1swXSlcbiAgICAgICAgICAgIDpcbiAgICAgICAgICAgICAgICBtZXJnZUFsbF8xLm1lcmdlQWxsKGNvbmN1cnJlbnQpKGZyb21fMS5mcm9tKHNvdXJjZXMsIHNjaGVkdWxlcikpO1xufVxuZXhwb3J0cy5tZXJnZSA9IG1lcmdlO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9bWVyZ2UuanMubWFwIiwiXCJ1c2Ugc3RyaWN0XCI7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5leHBvcnRzLm5ldmVyID0gZXhwb3J0cy5ORVZFUiA9IHZvaWQgMDtcbnZhciBPYnNlcnZhYmxlXzEgPSByZXF1aXJlKFwiLi4vT2JzZXJ2YWJsZVwiKTtcbnZhciBub29wXzEgPSByZXF1aXJlKFwiLi4vdXRpbC9ub29wXCIpO1xuZXhwb3J0cy5ORVZFUiA9IG5ldyBPYnNlcnZhYmxlXzEuT2JzZXJ2YWJsZShub29wXzEubm9vcCk7XG5mdW5jdGlvbiBuZXZlcigpIHtcbiAgICByZXR1cm4gZXhwb3J0cy5ORVZFUjtcbn1cbmV4cG9ydHMubmV2ZXIgPSBuZXZlcjtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPW5ldmVyLmpzLm1hcCIsIlwidXNlIHN0cmljdFwiO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuZXhwb3J0cy5vZiA9IHZvaWQgMDtcbnZhciBhcmdzXzEgPSByZXF1aXJlKFwiLi4vdXRpbC9hcmdzXCIpO1xudmFyIGZyb21fMSA9IHJlcXVpcmUoXCIuL2Zyb21cIik7XG5mdW5jdGlvbiBvZigpIHtcbiAgICB2YXIgYXJncyA9IFtdO1xuICAgIGZvciAodmFyIF9pID0gMDsgX2kgPCBhcmd1bWVudHMubGVuZ3RoOyBfaSsrKSB7XG4gICAgICAgIGFyZ3NbX2ldID0gYXJndW1lbnRzW19pXTtcbiAgICB9XG4gICAgdmFyIHNjaGVkdWxlciA9IGFyZ3NfMS5wb3BTY2hlZHVsZXIoYXJncyk7XG4gICAgcmV0dXJuIGZyb21fMS5mcm9tKGFyZ3MsIHNjaGVkdWxlcik7XG59XG5leHBvcnRzLm9mID0gb2Y7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1vZi5qcy5tYXAiLCJcInVzZSBzdHJpY3RcIjtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmV4cG9ydHMub25FcnJvclJlc3VtZU5leHQgPSB2b2lkIDA7XG52YXIgT2JzZXJ2YWJsZV8xID0gcmVxdWlyZShcIi4uL09ic2VydmFibGVcIik7XG52YXIgYXJnc09yQXJnQXJyYXlfMSA9IHJlcXVpcmUoXCIuLi91dGlsL2FyZ3NPckFyZ0FycmF5XCIpO1xudmFyIE9wZXJhdG9yU3Vic2NyaWJlcl8xID0gcmVxdWlyZShcIi4uL29wZXJhdG9ycy9PcGVyYXRvclN1YnNjcmliZXJcIik7XG52YXIgbm9vcF8xID0gcmVxdWlyZShcIi4uL3V0aWwvbm9vcFwiKTtcbnZhciBpbm5lckZyb21fMSA9IHJlcXVpcmUoXCIuL2lubmVyRnJvbVwiKTtcbmZ1bmN0aW9uIG9uRXJyb3JSZXN1bWVOZXh0KCkge1xuICAgIHZhciBzb3VyY2VzID0gW107XG4gICAgZm9yICh2YXIgX2kgPSAwOyBfaSA8IGFyZ3VtZW50cy5sZW5ndGg7IF9pKyspIHtcbiAgICAgICAgc291cmNlc1tfaV0gPSBhcmd1bWVudHNbX2ldO1xuICAgIH1cbiAgICB2YXIgbmV4dFNvdXJjZXMgPSBhcmdzT3JBcmdBcnJheV8xLmFyZ3NPckFyZ0FycmF5KHNvdXJjZXMpO1xuICAgIHJldHVybiBuZXcgT2JzZXJ2YWJsZV8xLk9ic2VydmFibGUoZnVuY3Rpb24gKHN1YnNjcmliZXIpIHtcbiAgICAgICAgdmFyIHNvdXJjZUluZGV4ID0gMDtcbiAgICAgICAgdmFyIHN1YnNjcmliZU5leHQgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICBpZiAoc291cmNlSW5kZXggPCBuZXh0U291cmNlcy5sZW5ndGgpIHtcbiAgICAgICAgICAgICAgICB2YXIgbmV4dFNvdXJjZSA9IHZvaWQgMDtcbiAgICAgICAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgICAgICAgICBuZXh0U291cmNlID0gaW5uZXJGcm9tXzEuaW5uZXJGcm9tKG5leHRTb3VyY2VzW3NvdXJjZUluZGV4KytdKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgY2F0Y2ggKGVycikge1xuICAgICAgICAgICAgICAgICAgICBzdWJzY3JpYmVOZXh0KCk7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgdmFyIGlubmVyU3Vic2NyaWJlciA9IG5ldyBPcGVyYXRvclN1YnNjcmliZXJfMS5PcGVyYXRvclN1YnNjcmliZXIoc3Vic2NyaWJlciwgdW5kZWZpbmVkLCBub29wXzEubm9vcCwgbm9vcF8xLm5vb3ApO1xuICAgICAgICAgICAgICAgIG5leHRTb3VyY2Uuc3Vic2NyaWJlKGlubmVyU3Vic2NyaWJlcik7XG4gICAgICAgICAgICAgICAgaW5uZXJTdWJzY3JpYmVyLmFkZChzdWJzY3JpYmVOZXh0KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgIHN1YnNjcmliZXIuY29tcGxldGUoKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfTtcbiAgICAgICAgc3Vic2NyaWJlTmV4dCgpO1xuICAgIH0pO1xufVxuZXhwb3J0cy5vbkVycm9yUmVzdW1lTmV4dCA9IG9uRXJyb3JSZXN1bWVOZXh0O1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9b25FcnJvclJlc3VtZU5leHQuanMubWFwIiwiXCJ1c2Ugc3RyaWN0XCI7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5leHBvcnRzLnBhaXJzID0gdm9pZCAwO1xudmFyIGZyb21fMSA9IHJlcXVpcmUoXCIuL2Zyb21cIik7XG5mdW5jdGlvbiBwYWlycyhvYmosIHNjaGVkdWxlcikge1xuICAgIHJldHVybiBmcm9tXzEuZnJvbShPYmplY3QuZW50cmllcyhvYmopLCBzY2hlZHVsZXIpO1xufVxuZXhwb3J0cy5wYWlycyA9IHBhaXJzO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9cGFpcnMuanMubWFwIiwiXCJ1c2Ugc3RyaWN0XCI7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5leHBvcnRzLnBhcnRpdGlvbiA9IHZvaWQgMDtcbnZhciBub3RfMSA9IHJlcXVpcmUoXCIuLi91dGlsL25vdFwiKTtcbnZhciBmaWx0ZXJfMSA9IHJlcXVpcmUoXCIuLi9vcGVyYXRvcnMvZmlsdGVyXCIpO1xudmFyIGlubmVyRnJvbV8xID0gcmVxdWlyZShcIi4vaW5uZXJGcm9tXCIpO1xuZnVuY3Rpb24gcGFydGl0aW9uKHNvdXJjZSwgcHJlZGljYXRlLCB0aGlzQXJnKSB7XG4gICAgcmV0dXJuIFtmaWx0ZXJfMS5maWx0ZXIocHJlZGljYXRlLCB0aGlzQXJnKShpbm5lckZyb21fMS5pbm5lckZyb20oc291cmNlKSksIGZpbHRlcl8xLmZpbHRlcihub3RfMS5ub3QocHJlZGljYXRlLCB0aGlzQXJnKSkoaW5uZXJGcm9tXzEuaW5uZXJGcm9tKHNvdXJjZSkpXTtcbn1cbmV4cG9ydHMucGFydGl0aW9uID0gcGFydGl0aW9uO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9cGFydGl0aW9uLmpzLm1hcCIsIlwidXNlIHN0cmljdFwiO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuZXhwb3J0cy5yYWNlSW5pdCA9IGV4cG9ydHMucmFjZSA9IHZvaWQgMDtcbnZhciBPYnNlcnZhYmxlXzEgPSByZXF1aXJlKFwiLi4vT2JzZXJ2YWJsZVwiKTtcbnZhciBpbm5lckZyb21fMSA9IHJlcXVpcmUoXCIuL2lubmVyRnJvbVwiKTtcbnZhciBhcmdzT3JBcmdBcnJheV8xID0gcmVxdWlyZShcIi4uL3V0aWwvYXJnc09yQXJnQXJyYXlcIik7XG52YXIgT3BlcmF0b3JTdWJzY3JpYmVyXzEgPSByZXF1aXJlKFwiLi4vb3BlcmF0b3JzL09wZXJhdG9yU3Vic2NyaWJlclwiKTtcbmZ1bmN0aW9uIHJhY2UoKSB7XG4gICAgdmFyIHNvdXJjZXMgPSBbXTtcbiAgICBmb3IgKHZhciBfaSA9IDA7IF9pIDwgYXJndW1lbnRzLmxlbmd0aDsgX2krKykge1xuICAgICAgICBzb3VyY2VzW19pXSA9IGFyZ3VtZW50c1tfaV07XG4gICAgfVxuICAgIHNvdXJjZXMgPSBhcmdzT3JBcmdBcnJheV8xLmFyZ3NPckFyZ0FycmF5KHNvdXJjZXMpO1xuICAgIHJldHVybiBzb3VyY2VzLmxlbmd0aCA9PT0gMSA/IGlubmVyRnJvbV8xLmlubmVyRnJvbShzb3VyY2VzWzBdKSA6IG5ldyBPYnNlcnZhYmxlXzEuT2JzZXJ2YWJsZShyYWNlSW5pdChzb3VyY2VzKSk7XG59XG5leHBvcnRzLnJhY2UgPSByYWNlO1xuZnVuY3Rpb24gcmFjZUluaXQoc291cmNlcykge1xuICAgIHJldHVybiBmdW5jdGlvbiAoc3Vic2NyaWJlcikge1xuICAgICAgICB2YXIgc3Vic2NyaXB0aW9ucyA9IFtdO1xuICAgICAgICB2YXIgX2xvb3BfMSA9IGZ1bmN0aW9uIChpKSB7XG4gICAgICAgICAgICBzdWJzY3JpcHRpb25zLnB1c2goaW5uZXJGcm9tXzEuaW5uZXJGcm9tKHNvdXJjZXNbaV0pLnN1YnNjcmliZShPcGVyYXRvclN1YnNjcmliZXJfMS5jcmVhdGVPcGVyYXRvclN1YnNjcmliZXIoc3Vic2NyaWJlciwgZnVuY3Rpb24gKHZhbHVlKSB7XG4gICAgICAgICAgICAgICAgaWYgKHN1YnNjcmlwdGlvbnMpIHtcbiAgICAgICAgICAgICAgICAgICAgZm9yICh2YXIgcyA9IDA7IHMgPCBzdWJzY3JpcHRpb25zLmxlbmd0aDsgcysrKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBzICE9PSBpICYmIHN1YnNjcmlwdGlvbnNbc10udW5zdWJzY3JpYmUoKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICBzdWJzY3JpcHRpb25zID0gbnVsbDtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgc3Vic2NyaWJlci5uZXh0KHZhbHVlKTtcbiAgICAgICAgICAgIH0pKSk7XG4gICAgICAgIH07XG4gICAgICAgIGZvciAodmFyIGkgPSAwOyBzdWJzY3JpcHRpb25zICYmICFzdWJzY3JpYmVyLmNsb3NlZCAmJiBpIDwgc291cmNlcy5sZW5ndGg7IGkrKykge1xuICAgICAgICAgICAgX2xvb3BfMShpKTtcbiAgICAgICAgfVxuICAgIH07XG59XG5leHBvcnRzLnJhY2VJbml0ID0gcmFjZUluaXQ7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1yYWNlLmpzLm1hcCIsIlwidXNlIHN0cmljdFwiO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuZXhwb3J0cy5yYW5nZSA9IHZvaWQgMDtcbnZhciBPYnNlcnZhYmxlXzEgPSByZXF1aXJlKFwiLi4vT2JzZXJ2YWJsZVwiKTtcbnZhciBlbXB0eV8xID0gcmVxdWlyZShcIi4vZW1wdHlcIik7XG5mdW5jdGlvbiByYW5nZShzdGFydCwgY291bnQsIHNjaGVkdWxlcikge1xuICAgIGlmIChjb3VudCA9PSBudWxsKSB7XG4gICAgICAgIGNvdW50ID0gc3RhcnQ7XG4gICAgICAgIHN0YXJ0ID0gMDtcbiAgICB9XG4gICAgaWYgKGNvdW50IDw9IDApIHtcbiAgICAgICAgcmV0dXJuIGVtcHR5XzEuRU1QVFk7XG4gICAgfVxuICAgIHZhciBlbmQgPSBjb3VudCArIHN0YXJ0O1xuICAgIHJldHVybiBuZXcgT2JzZXJ2YWJsZV8xLk9ic2VydmFibGUoc2NoZWR1bGVyXG4gICAgICAgID9cbiAgICAgICAgICAgIGZ1bmN0aW9uIChzdWJzY3JpYmVyKSB7XG4gICAgICAgICAgICAgICAgdmFyIG4gPSBzdGFydDtcbiAgICAgICAgICAgICAgICByZXR1cm4gc2NoZWR1bGVyLnNjaGVkdWxlKGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICAgICAgaWYgKG4gPCBlbmQpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHN1YnNjcmliZXIubmV4dChuKyspO1xuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5zY2hlZHVsZSgpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAgICAgc3Vic2NyaWJlci5jb21wbGV0ZSgpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIDpcbiAgICAgICAgICAgIGZ1bmN0aW9uIChzdWJzY3JpYmVyKSB7XG4gICAgICAgICAgICAgICAgdmFyIG4gPSBzdGFydDtcbiAgICAgICAgICAgICAgICB3aGlsZSAobiA8IGVuZCAmJiAhc3Vic2NyaWJlci5jbG9zZWQpIHtcbiAgICAgICAgICAgICAgICAgICAgc3Vic2NyaWJlci5uZXh0KG4rKyk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIHN1YnNjcmliZXIuY29tcGxldGUoKTtcbiAgICAgICAgICAgIH0pO1xufVxuZXhwb3J0cy5yYW5nZSA9IHJhbmdlO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9cmFuZ2UuanMubWFwIiwiXCJ1c2Ugc3RyaWN0XCI7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5leHBvcnRzLnRocm93RXJyb3IgPSB2b2lkIDA7XG52YXIgT2JzZXJ2YWJsZV8xID0gcmVxdWlyZShcIi4uL09ic2VydmFibGVcIik7XG52YXIgaXNGdW5jdGlvbl8xID0gcmVxdWlyZShcIi4uL3V0aWwvaXNGdW5jdGlvblwiKTtcbmZ1bmN0aW9uIHRocm93RXJyb3IoZXJyb3JPckVycm9yRmFjdG9yeSwgc2NoZWR1bGVyKSB7XG4gICAgdmFyIGVycm9yRmFjdG9yeSA9IGlzRnVuY3Rpb25fMS5pc0Z1bmN0aW9uKGVycm9yT3JFcnJvckZhY3RvcnkpID8gZXJyb3JPckVycm9yRmFjdG9yeSA6IGZ1bmN0aW9uICgpIHsgcmV0dXJuIGVycm9yT3JFcnJvckZhY3Rvcnk7IH07XG4gICAgdmFyIGluaXQgPSBmdW5jdGlvbiAoc3Vic2NyaWJlcikgeyByZXR1cm4gc3Vic2NyaWJlci5lcnJvcihlcnJvckZhY3RvcnkoKSk7IH07XG4gICAgcmV0dXJuIG5ldyBPYnNlcnZhYmxlXzEuT2JzZXJ2YWJsZShzY2hlZHVsZXIgPyBmdW5jdGlvbiAoc3Vic2NyaWJlcikgeyByZXR1cm4gc2NoZWR1bGVyLnNjaGVkdWxlKGluaXQsIDAsIHN1YnNjcmliZXIpOyB9IDogaW5pdCk7XG59XG5leHBvcnRzLnRocm93RXJyb3IgPSB0aHJvd0Vycm9yO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9dGhyb3dFcnJvci5qcy5tYXAiLCJcInVzZSBzdHJpY3RcIjtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmV4cG9ydHMudGltZXIgPSB2b2lkIDA7XG52YXIgT2JzZXJ2YWJsZV8xID0gcmVxdWlyZShcIi4uL09ic2VydmFibGVcIik7XG52YXIgYXN5bmNfMSA9IHJlcXVpcmUoXCIuLi9zY2hlZHVsZXIvYXN5bmNcIik7XG52YXIgaXNTY2hlZHVsZXJfMSA9IHJlcXVpcmUoXCIuLi91dGlsL2lzU2NoZWR1bGVyXCIpO1xudmFyIGlzRGF0ZV8xID0gcmVxdWlyZShcIi4uL3V0aWwvaXNEYXRlXCIpO1xuZnVuY3Rpb24gdGltZXIoZHVlVGltZSwgaW50ZXJ2YWxPclNjaGVkdWxlciwgc2NoZWR1bGVyKSB7XG4gICAgaWYgKGR1ZVRpbWUgPT09IHZvaWQgMCkgeyBkdWVUaW1lID0gMDsgfVxuICAgIGlmIChzY2hlZHVsZXIgPT09IHZvaWQgMCkgeyBzY2hlZHVsZXIgPSBhc3luY18xLmFzeW5jOyB9XG4gICAgdmFyIGludGVydmFsRHVyYXRpb24gPSAtMTtcbiAgICBpZiAoaW50ZXJ2YWxPclNjaGVkdWxlciAhPSBudWxsKSB7XG4gICAgICAgIGlmIChpc1NjaGVkdWxlcl8xLmlzU2NoZWR1bGVyKGludGVydmFsT3JTY2hlZHVsZXIpKSB7XG4gICAgICAgICAgICBzY2hlZHVsZXIgPSBpbnRlcnZhbE9yU2NoZWR1bGVyO1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgaW50ZXJ2YWxEdXJhdGlvbiA9IGludGVydmFsT3JTY2hlZHVsZXI7XG4gICAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIG5ldyBPYnNlcnZhYmxlXzEuT2JzZXJ2YWJsZShmdW5jdGlvbiAoc3Vic2NyaWJlcikge1xuICAgICAgICB2YXIgZHVlID0gaXNEYXRlXzEuaXNWYWxpZERhdGUoZHVlVGltZSkgPyArZHVlVGltZSAtIHNjaGVkdWxlci5ub3coKSA6IGR1ZVRpbWU7XG4gICAgICAgIGlmIChkdWUgPCAwKSB7XG4gICAgICAgICAgICBkdWUgPSAwO1xuICAgICAgICB9XG4gICAgICAgIHZhciBuID0gMDtcbiAgICAgICAgcmV0dXJuIHNjaGVkdWxlci5zY2hlZHVsZShmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICBpZiAoIXN1YnNjcmliZXIuY2xvc2VkKSB7XG4gICAgICAgICAgICAgICAgc3Vic2NyaWJlci5uZXh0KG4rKyk7XG4gICAgICAgICAgICAgICAgaWYgKDAgPD0gaW50ZXJ2YWxEdXJhdGlvbikge1xuICAgICAgICAgICAgICAgICAgICB0aGlzLnNjaGVkdWxlKHVuZGVmaW5lZCwgaW50ZXJ2YWxEdXJhdGlvbik7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICBzdWJzY3JpYmVyLmNvbXBsZXRlKCk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICB9LCBkdWUpO1xuICAgIH0pO1xufVxuZXhwb3J0cy50aW1lciA9IHRpbWVyO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9dGltZXIuanMubWFwIiwiXCJ1c2Ugc3RyaWN0XCI7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5leHBvcnRzLnVzaW5nID0gdm9pZCAwO1xudmFyIE9ic2VydmFibGVfMSA9IHJlcXVpcmUoXCIuLi9PYnNlcnZhYmxlXCIpO1xudmFyIGlubmVyRnJvbV8xID0gcmVxdWlyZShcIi4vaW5uZXJGcm9tXCIpO1xudmFyIGVtcHR5XzEgPSByZXF1aXJlKFwiLi9lbXB0eVwiKTtcbmZ1bmN0aW9uIHVzaW5nKHJlc291cmNlRmFjdG9yeSwgb2JzZXJ2YWJsZUZhY3RvcnkpIHtcbiAgICByZXR1cm4gbmV3IE9ic2VydmFibGVfMS5PYnNlcnZhYmxlKGZ1bmN0aW9uIChzdWJzY3JpYmVyKSB7XG4gICAgICAgIHZhciByZXNvdXJjZSA9IHJlc291cmNlRmFjdG9yeSgpO1xuICAgICAgICB2YXIgcmVzdWx0ID0gb2JzZXJ2YWJsZUZhY3RvcnkocmVzb3VyY2UpO1xuICAgICAgICB2YXIgc291cmNlID0gcmVzdWx0ID8gaW5uZXJGcm9tXzEuaW5uZXJGcm9tKHJlc3VsdCkgOiBlbXB0eV8xLkVNUFRZO1xuICAgICAgICBzb3VyY2Uuc3Vic2NyaWJlKHN1YnNjcmliZXIpO1xuICAgICAgICByZXR1cm4gZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgaWYgKHJlc291cmNlKSB7XG4gICAgICAgICAgICAgICAgcmVzb3VyY2UudW5zdWJzY3JpYmUoKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfTtcbiAgICB9KTtcbn1cbmV4cG9ydHMudXNpbmcgPSB1c2luZztcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPXVzaW5nLmpzLm1hcCIsIlwidXNlIHN0cmljdFwiO1xudmFyIF9fcmVhZCA9ICh0aGlzICYmIHRoaXMuX19yZWFkKSB8fCBmdW5jdGlvbiAobywgbikge1xuICAgIHZhciBtID0gdHlwZW9mIFN5bWJvbCA9PT0gXCJmdW5jdGlvblwiICYmIG9bU3ltYm9sLml0ZXJhdG9yXTtcbiAgICBpZiAoIW0pIHJldHVybiBvO1xuICAgIHZhciBpID0gbS5jYWxsKG8pLCByLCBhciA9IFtdLCBlO1xuICAgIHRyeSB7XG4gICAgICAgIHdoaWxlICgobiA9PT0gdm9pZCAwIHx8IG4tLSA+IDApICYmICEociA9IGkubmV4dCgpKS5kb25lKSBhci5wdXNoKHIudmFsdWUpO1xuICAgIH1cbiAgICBjYXRjaCAoZXJyb3IpIHsgZSA9IHsgZXJyb3I6IGVycm9yIH07IH1cbiAgICBmaW5hbGx5IHtcbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgIGlmIChyICYmICFyLmRvbmUgJiYgKG0gPSBpW1wicmV0dXJuXCJdKSkgbS5jYWxsKGkpO1xuICAgICAgICB9XG4gICAgICAgIGZpbmFsbHkgeyBpZiAoZSkgdGhyb3cgZS5lcnJvcjsgfVxuICAgIH1cbiAgICByZXR1cm4gYXI7XG59O1xudmFyIF9fc3ByZWFkQXJyYXkgPSAodGhpcyAmJiB0aGlzLl9fc3ByZWFkQXJyYXkpIHx8IGZ1bmN0aW9uICh0bywgZnJvbSkge1xuICAgIGZvciAodmFyIGkgPSAwLCBpbCA9IGZyb20ubGVuZ3RoLCBqID0gdG8ubGVuZ3RoOyBpIDwgaWw7IGkrKywgaisrKVxuICAgICAgICB0b1tqXSA9IGZyb21baV07XG4gICAgcmV0dXJuIHRvO1xufTtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmV4cG9ydHMuemlwID0gdm9pZCAwO1xudmFyIE9ic2VydmFibGVfMSA9IHJlcXVpcmUoXCIuLi9PYnNlcnZhYmxlXCIpO1xudmFyIGlubmVyRnJvbV8xID0gcmVxdWlyZShcIi4vaW5uZXJGcm9tXCIpO1xudmFyIGFyZ3NPckFyZ0FycmF5XzEgPSByZXF1aXJlKFwiLi4vdXRpbC9hcmdzT3JBcmdBcnJheVwiKTtcbnZhciBlbXB0eV8xID0gcmVxdWlyZShcIi4vZW1wdHlcIik7XG52YXIgT3BlcmF0b3JTdWJzY3JpYmVyXzEgPSByZXF1aXJlKFwiLi4vb3BlcmF0b3JzL09wZXJhdG9yU3Vic2NyaWJlclwiKTtcbnZhciBhcmdzXzEgPSByZXF1aXJlKFwiLi4vdXRpbC9hcmdzXCIpO1xuZnVuY3Rpb24gemlwKCkge1xuICAgIHZhciBhcmdzID0gW107XG4gICAgZm9yICh2YXIgX2kgPSAwOyBfaSA8IGFyZ3VtZW50cy5sZW5ndGg7IF9pKyspIHtcbiAgICAgICAgYXJnc1tfaV0gPSBhcmd1bWVudHNbX2ldO1xuICAgIH1cbiAgICB2YXIgcmVzdWx0U2VsZWN0b3IgPSBhcmdzXzEucG9wUmVzdWx0U2VsZWN0b3IoYXJncyk7XG4gICAgdmFyIHNvdXJjZXMgPSBhcmdzT3JBcmdBcnJheV8xLmFyZ3NPckFyZ0FycmF5KGFyZ3MpO1xuICAgIHJldHVybiBzb3VyY2VzLmxlbmd0aFxuICAgICAgICA/IG5ldyBPYnNlcnZhYmxlXzEuT2JzZXJ2YWJsZShmdW5jdGlvbiAoc3Vic2NyaWJlcikge1xuICAgICAgICAgICAgdmFyIGJ1ZmZlcnMgPSBzb3VyY2VzLm1hcChmdW5jdGlvbiAoKSB7IHJldHVybiBbXTsgfSk7XG4gICAgICAgICAgICB2YXIgY29tcGxldGVkID0gc291cmNlcy5tYXAoZnVuY3Rpb24gKCkgeyByZXR1cm4gZmFsc2U7IH0pO1xuICAgICAgICAgICAgc3Vic2NyaWJlci5hZGQoZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgIGJ1ZmZlcnMgPSBjb21wbGV0ZWQgPSBudWxsO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICB2YXIgX2xvb3BfMSA9IGZ1bmN0aW9uIChzb3VyY2VJbmRleCkge1xuICAgICAgICAgICAgICAgIGlubmVyRnJvbV8xLmlubmVyRnJvbShzb3VyY2VzW3NvdXJjZUluZGV4XSkuc3Vic2NyaWJlKE9wZXJhdG9yU3Vic2NyaWJlcl8xLmNyZWF0ZU9wZXJhdG9yU3Vic2NyaWJlcihzdWJzY3JpYmVyLCBmdW5jdGlvbiAodmFsdWUpIHtcbiAgICAgICAgICAgICAgICAgICAgYnVmZmVyc1tzb3VyY2VJbmRleF0ucHVzaCh2YWx1ZSk7XG4gICAgICAgICAgICAgICAgICAgIGlmIChidWZmZXJzLmV2ZXJ5KGZ1bmN0aW9uIChidWZmZXIpIHsgcmV0dXJuIGJ1ZmZlci5sZW5ndGg7IH0pKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICB2YXIgcmVzdWx0ID0gYnVmZmVycy5tYXAoZnVuY3Rpb24gKGJ1ZmZlcikgeyByZXR1cm4gYnVmZmVyLnNoaWZ0KCk7IH0pO1xuICAgICAgICAgICAgICAgICAgICAgICAgc3Vic2NyaWJlci5uZXh0KHJlc3VsdFNlbGVjdG9yID8gcmVzdWx0U2VsZWN0b3IuYXBwbHkodm9pZCAwLCBfX3NwcmVhZEFycmF5KFtdLCBfX3JlYWQocmVzdWx0KSkpIDogcmVzdWx0KTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChidWZmZXJzLnNvbWUoZnVuY3Rpb24gKGJ1ZmZlciwgaSkgeyByZXR1cm4gIWJ1ZmZlci5sZW5ndGggJiYgY29tcGxldGVkW2ldOyB9KSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHN1YnNjcmliZXIuY29tcGxldGUoKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH0sIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICAgICAgY29tcGxldGVkW3NvdXJjZUluZGV4XSA9IHRydWU7XG4gICAgICAgICAgICAgICAgICAgICFidWZmZXJzW3NvdXJjZUluZGV4XS5sZW5ndGggJiYgc3Vic2NyaWJlci5jb21wbGV0ZSgpO1xuICAgICAgICAgICAgICAgIH0pKTtcbiAgICAgICAgICAgIH07XG4gICAgICAgICAgICBmb3IgKHZhciBzb3VyY2VJbmRleCA9IDA7ICFzdWJzY3JpYmVyLmNsb3NlZCAmJiBzb3VyY2VJbmRleCA8IHNvdXJjZXMubGVuZ3RoOyBzb3VyY2VJbmRleCsrKSB7XG4gICAgICAgICAgICAgICAgX2xvb3BfMShzb3VyY2VJbmRleCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4gZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgIGJ1ZmZlcnMgPSBjb21wbGV0ZWQgPSBudWxsO1xuICAgICAgICAgICAgfTtcbiAgICAgICAgfSlcbiAgICAgICAgOiBlbXB0eV8xLkVNUFRZO1xufVxuZXhwb3J0cy56aXAgPSB6aXA7XG4vLyMgc291cmNlTWFwcGluZ1VSTD16aXAuanMubWFwIiwiXCJ1c2Ugc3RyaWN0XCI7XG52YXIgX19leHRlbmRzID0gKHRoaXMgJiYgdGhpcy5fX2V4dGVuZHMpIHx8IChmdW5jdGlvbiAoKSB7XG4gICAgdmFyIGV4dGVuZFN0YXRpY3MgPSBmdW5jdGlvbiAoZCwgYikge1xuICAgICAgICBleHRlbmRTdGF0aWNzID0gT2JqZWN0LnNldFByb3RvdHlwZU9mIHx8XG4gICAgICAgICAgICAoeyBfX3Byb3RvX186IFtdIH0gaW5zdGFuY2VvZiBBcnJheSAmJiBmdW5jdGlvbiAoZCwgYikgeyBkLl9fcHJvdG9fXyA9IGI7IH0pIHx8XG4gICAgICAgICAgICBmdW5jdGlvbiAoZCwgYikgeyBmb3IgKHZhciBwIGluIGIpIGlmIChPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwoYiwgcCkpIGRbcF0gPSBiW3BdOyB9O1xuICAgICAgICByZXR1cm4gZXh0ZW5kU3RhdGljcyhkLCBiKTtcbiAgICB9O1xuICAgIHJldHVybiBmdW5jdGlvbiAoZCwgYikge1xuICAgICAgICBpZiAodHlwZW9mIGIgIT09IFwiZnVuY3Rpb25cIiAmJiBiICE9PSBudWxsKVxuICAgICAgICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcihcIkNsYXNzIGV4dGVuZHMgdmFsdWUgXCIgKyBTdHJpbmcoYikgKyBcIiBpcyBub3QgYSBjb25zdHJ1Y3RvciBvciBudWxsXCIpO1xuICAgICAgICBleHRlbmRTdGF0aWNzKGQsIGIpO1xuICAgICAgICBmdW5jdGlvbiBfXygpIHsgdGhpcy5jb25zdHJ1Y3RvciA9IGQ7IH1cbiAgICAgICAgZC5wcm90b3R5cGUgPSBiID09PSBudWxsID8gT2JqZWN0LmNyZWF0ZShiKSA6IChfXy5wcm90b3R5cGUgPSBiLnByb3RvdHlwZSwgbmV3IF9fKCkpO1xuICAgIH07XG59KSgpO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuZXhwb3J0cy5PcGVyYXRvclN1YnNjcmliZXIgPSBleHBvcnRzLmNyZWF0ZU9wZXJhdG9yU3Vic2NyaWJlciA9IHZvaWQgMDtcbnZhciBTdWJzY3JpYmVyXzEgPSByZXF1aXJlKFwiLi4vU3Vic2NyaWJlclwiKTtcbmZ1bmN0aW9uIGNyZWF0ZU9wZXJhdG9yU3Vic2NyaWJlcihkZXN0aW5hdGlvbiwgb25OZXh0LCBvbkNvbXBsZXRlLCBvbkVycm9yLCBvbkZpbmFsaXplKSB7XG4gICAgcmV0dXJuIG5ldyBPcGVyYXRvclN1YnNjcmliZXIoZGVzdGluYXRpb24sIG9uTmV4dCwgb25Db21wbGV0ZSwgb25FcnJvciwgb25GaW5hbGl6ZSk7XG59XG5leHBvcnRzLmNyZWF0ZU9wZXJhdG9yU3Vic2NyaWJlciA9IGNyZWF0ZU9wZXJhdG9yU3Vic2NyaWJlcjtcbnZhciBPcGVyYXRvclN1YnNjcmliZXIgPSAoZnVuY3Rpb24gKF9zdXBlcikge1xuICAgIF9fZXh0ZW5kcyhPcGVyYXRvclN1YnNjcmliZXIsIF9zdXBlcik7XG4gICAgZnVuY3Rpb24gT3BlcmF0b3JTdWJzY3JpYmVyKGRlc3RpbmF0aW9uLCBvbk5leHQsIG9uQ29tcGxldGUsIG9uRXJyb3IsIG9uRmluYWxpemUsIHNob3VsZFVuc3Vic2NyaWJlKSB7XG4gICAgICAgIHZhciBfdGhpcyA9IF9zdXBlci5jYWxsKHRoaXMsIGRlc3RpbmF0aW9uKSB8fCB0aGlzO1xuICAgICAgICBfdGhpcy5vbkZpbmFsaXplID0gb25GaW5hbGl6ZTtcbiAgICAgICAgX3RoaXMuc2hvdWxkVW5zdWJzY3JpYmUgPSBzaG91bGRVbnN1YnNjcmliZTtcbiAgICAgICAgX3RoaXMuX25leHQgPSBvbk5leHRcbiAgICAgICAgICAgID8gZnVuY3Rpb24gKHZhbHVlKSB7XG4gICAgICAgICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgICAgICAgICAgb25OZXh0KHZhbHVlKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgY2F0Y2ggKGVycikge1xuICAgICAgICAgICAgICAgICAgICBkZXN0aW5hdGlvbi5lcnJvcihlcnIpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIDogX3N1cGVyLnByb3RvdHlwZS5fbmV4dDtcbiAgICAgICAgX3RoaXMuX2Vycm9yID0gb25FcnJvclxuICAgICAgICAgICAgPyBmdW5jdGlvbiAoZXJyKSB7XG4gICAgICAgICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgICAgICAgICAgb25FcnJvcihlcnIpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBjYXRjaCAoZXJyKSB7XG4gICAgICAgICAgICAgICAgICAgIGRlc3RpbmF0aW9uLmVycm9yKGVycik7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGZpbmFsbHkge1xuICAgICAgICAgICAgICAgICAgICB0aGlzLnVuc3Vic2NyaWJlKCk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgOiBfc3VwZXIucHJvdG90eXBlLl9lcnJvcjtcbiAgICAgICAgX3RoaXMuX2NvbXBsZXRlID0gb25Db21wbGV0ZVxuICAgICAgICAgICAgPyBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgICAgICAgICAgb25Db21wbGV0ZSgpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBjYXRjaCAoZXJyKSB7XG4gICAgICAgICAgICAgICAgICAgIGRlc3RpbmF0aW9uLmVycm9yKGVycik7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGZpbmFsbHkge1xuICAgICAgICAgICAgICAgICAgICB0aGlzLnVuc3Vic2NyaWJlKCk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgOiBfc3VwZXIucHJvdG90eXBlLl9jb21wbGV0ZTtcbiAgICAgICAgcmV0dXJuIF90aGlzO1xuICAgIH1cbiAgICBPcGVyYXRvclN1YnNjcmliZXIucHJvdG90eXBlLnVuc3Vic2NyaWJlID0gZnVuY3Rpb24gKCkge1xuICAgICAgICB2YXIgX2E7XG4gICAgICAgIGlmICghdGhpcy5zaG91bGRVbnN1YnNjcmliZSB8fCB0aGlzLnNob3VsZFVuc3Vic2NyaWJlKCkpIHtcbiAgICAgICAgICAgIHZhciBjbG9zZWRfMSA9IHRoaXMuY2xvc2VkO1xuICAgICAgICAgICAgX3N1cGVyLnByb3RvdHlwZS51bnN1YnNjcmliZS5jYWxsKHRoaXMpO1xuICAgICAgICAgICAgIWNsb3NlZF8xICYmICgoX2EgPSB0aGlzLm9uRmluYWxpemUpID09PSBudWxsIHx8IF9hID09PSB2b2lkIDAgPyB2b2lkIDAgOiBfYS5jYWxsKHRoaXMpKTtcbiAgICAgICAgfVxuICAgIH07XG4gICAgcmV0dXJuIE9wZXJhdG9yU3Vic2NyaWJlcjtcbn0oU3Vic2NyaWJlcl8xLlN1YnNjcmliZXIpKTtcbmV4cG9ydHMuT3BlcmF0b3JTdWJzY3JpYmVyID0gT3BlcmF0b3JTdWJzY3JpYmVyO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9T3BlcmF0b3JTdWJzY3JpYmVyLmpzLm1hcCIsIlwidXNlIHN0cmljdFwiO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuZXhwb3J0cy5hdWRpdCA9IHZvaWQgMDtcbnZhciBsaWZ0XzEgPSByZXF1aXJlKFwiLi4vdXRpbC9saWZ0XCIpO1xudmFyIGlubmVyRnJvbV8xID0gcmVxdWlyZShcIi4uL29ic2VydmFibGUvaW5uZXJGcm9tXCIpO1xudmFyIE9wZXJhdG9yU3Vic2NyaWJlcl8xID0gcmVxdWlyZShcIi4vT3BlcmF0b3JTdWJzY3JpYmVyXCIpO1xuZnVuY3Rpb24gYXVkaXQoZHVyYXRpb25TZWxlY3Rvcikge1xuICAgIHJldHVybiBsaWZ0XzEub3BlcmF0ZShmdW5jdGlvbiAoc291cmNlLCBzdWJzY3JpYmVyKSB7XG4gICAgICAgIHZhciBoYXNWYWx1ZSA9IGZhbHNlO1xuICAgICAgICB2YXIgbGFzdFZhbHVlID0gbnVsbDtcbiAgICAgICAgdmFyIGR1cmF0aW9uU3Vic2NyaWJlciA9IG51bGw7XG4gICAgICAgIHZhciBpc0NvbXBsZXRlID0gZmFsc2U7XG4gICAgICAgIHZhciBlbmREdXJhdGlvbiA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIGR1cmF0aW9uU3Vic2NyaWJlciA9PT0gbnVsbCB8fCBkdXJhdGlvblN1YnNjcmliZXIgPT09IHZvaWQgMCA/IHZvaWQgMCA6IGR1cmF0aW9uU3Vic2NyaWJlci51bnN1YnNjcmliZSgpO1xuICAgICAgICAgICAgZHVyYXRpb25TdWJzY3JpYmVyID0gbnVsbDtcbiAgICAgICAgICAgIGlmIChoYXNWYWx1ZSkge1xuICAgICAgICAgICAgICAgIGhhc1ZhbHVlID0gZmFsc2U7XG4gICAgICAgICAgICAgICAgdmFyIHZhbHVlID0gbGFzdFZhbHVlO1xuICAgICAgICAgICAgICAgIGxhc3RWYWx1ZSA9IG51bGw7XG4gICAgICAgICAgICAgICAgc3Vic2NyaWJlci5uZXh0KHZhbHVlKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlzQ29tcGxldGUgJiYgc3Vic2NyaWJlci5jb21wbGV0ZSgpO1xuICAgICAgICB9O1xuICAgICAgICB2YXIgY2xlYW51cER1cmF0aW9uID0gZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgZHVyYXRpb25TdWJzY3JpYmVyID0gbnVsbDtcbiAgICAgICAgICAgIGlzQ29tcGxldGUgJiYgc3Vic2NyaWJlci5jb21wbGV0ZSgpO1xuICAgICAgICB9O1xuICAgICAgICBzb3VyY2Uuc3Vic2NyaWJlKE9wZXJhdG9yU3Vic2NyaWJlcl8xLmNyZWF0ZU9wZXJhdG9yU3Vic2NyaWJlcihzdWJzY3JpYmVyLCBmdW5jdGlvbiAodmFsdWUpIHtcbiAgICAgICAgICAgIGhhc1ZhbHVlID0gdHJ1ZTtcbiAgICAgICAgICAgIGxhc3RWYWx1ZSA9IHZhbHVlO1xuICAgICAgICAgICAgaWYgKCFkdXJhdGlvblN1YnNjcmliZXIpIHtcbiAgICAgICAgICAgICAgICBpbm5lckZyb21fMS5pbm5lckZyb20oZHVyYXRpb25TZWxlY3Rvcih2YWx1ZSkpLnN1YnNjcmliZSgoZHVyYXRpb25TdWJzY3JpYmVyID0gT3BlcmF0b3JTdWJzY3JpYmVyXzEuY3JlYXRlT3BlcmF0b3JTdWJzY3JpYmVyKHN1YnNjcmliZXIsIGVuZER1cmF0aW9uLCBjbGVhbnVwRHVyYXRpb24pKSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0sIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIGlzQ29tcGxldGUgPSB0cnVlO1xuICAgICAgICAgICAgKCFoYXNWYWx1ZSB8fCAhZHVyYXRpb25TdWJzY3JpYmVyIHx8IGR1cmF0aW9uU3Vic2NyaWJlci5jbG9zZWQpICYmIHN1YnNjcmliZXIuY29tcGxldGUoKTtcbiAgICAgICAgfSkpO1xuICAgIH0pO1xufVxuZXhwb3J0cy5hdWRpdCA9IGF1ZGl0O1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9YXVkaXQuanMubWFwIiwiXCJ1c2Ugc3RyaWN0XCI7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5leHBvcnRzLmF1ZGl0VGltZSA9IHZvaWQgMDtcbnZhciBhc3luY18xID0gcmVxdWlyZShcIi4uL3NjaGVkdWxlci9hc3luY1wiKTtcbnZhciBhdWRpdF8xID0gcmVxdWlyZShcIi4vYXVkaXRcIik7XG52YXIgdGltZXJfMSA9IHJlcXVpcmUoXCIuLi9vYnNlcnZhYmxlL3RpbWVyXCIpO1xuZnVuY3Rpb24gYXVkaXRUaW1lKGR1cmF0aW9uLCBzY2hlZHVsZXIpIHtcbiAgICBpZiAoc2NoZWR1bGVyID09PSB2b2lkIDApIHsgc2NoZWR1bGVyID0gYXN5bmNfMS5hc3luY1NjaGVkdWxlcjsgfVxuICAgIHJldHVybiBhdWRpdF8xLmF1ZGl0KGZ1bmN0aW9uICgpIHsgcmV0dXJuIHRpbWVyXzEudGltZXIoZHVyYXRpb24sIHNjaGVkdWxlcik7IH0pO1xufVxuZXhwb3J0cy5hdWRpdFRpbWUgPSBhdWRpdFRpbWU7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1hdWRpdFRpbWUuanMubWFwIiwiXCJ1c2Ugc3RyaWN0XCI7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5leHBvcnRzLmJ1ZmZlciA9IHZvaWQgMDtcbnZhciBsaWZ0XzEgPSByZXF1aXJlKFwiLi4vdXRpbC9saWZ0XCIpO1xudmFyIG5vb3BfMSA9IHJlcXVpcmUoXCIuLi91dGlsL25vb3BcIik7XG52YXIgT3BlcmF0b3JTdWJzY3JpYmVyXzEgPSByZXF1aXJlKFwiLi9PcGVyYXRvclN1YnNjcmliZXJcIik7XG52YXIgaW5uZXJGcm9tXzEgPSByZXF1aXJlKFwiLi4vb2JzZXJ2YWJsZS9pbm5lckZyb21cIik7XG5mdW5jdGlvbiBidWZmZXIoY2xvc2luZ05vdGlmaWVyKSB7XG4gICAgcmV0dXJuIGxpZnRfMS5vcGVyYXRlKGZ1bmN0aW9uIChzb3VyY2UsIHN1YnNjcmliZXIpIHtcbiAgICAgICAgdmFyIGN1cnJlbnRCdWZmZXIgPSBbXTtcbiAgICAgICAgc291cmNlLnN1YnNjcmliZShPcGVyYXRvclN1YnNjcmliZXJfMS5jcmVhdGVPcGVyYXRvclN1YnNjcmliZXIoc3Vic2NyaWJlciwgZnVuY3Rpb24gKHZhbHVlKSB7IHJldHVybiBjdXJyZW50QnVmZmVyLnB1c2godmFsdWUpOyB9LCBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICBzdWJzY3JpYmVyLm5leHQoY3VycmVudEJ1ZmZlcik7XG4gICAgICAgICAgICBzdWJzY3JpYmVyLmNvbXBsZXRlKCk7XG4gICAgICAgIH0pKTtcbiAgICAgICAgaW5uZXJGcm9tXzEuaW5uZXJGcm9tKGNsb3NpbmdOb3RpZmllcikuc3Vic2NyaWJlKE9wZXJhdG9yU3Vic2NyaWJlcl8xLmNyZWF0ZU9wZXJhdG9yU3Vic2NyaWJlcihzdWJzY3JpYmVyLCBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICB2YXIgYiA9IGN1cnJlbnRCdWZmZXI7XG4gICAgICAgICAgICBjdXJyZW50QnVmZmVyID0gW107XG4gICAgICAgICAgICBzdWJzY3JpYmVyLm5leHQoYik7XG4gICAgICAgIH0sIG5vb3BfMS5ub29wKSk7XG4gICAgICAgIHJldHVybiBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICBjdXJyZW50QnVmZmVyID0gbnVsbDtcbiAgICAgICAgfTtcbiAgICB9KTtcbn1cbmV4cG9ydHMuYnVmZmVyID0gYnVmZmVyO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9YnVmZmVyLmpzLm1hcCIsIlwidXNlIHN0cmljdFwiO1xudmFyIF9fdmFsdWVzID0gKHRoaXMgJiYgdGhpcy5fX3ZhbHVlcykgfHwgZnVuY3Rpb24obykge1xuICAgIHZhciBzID0gdHlwZW9mIFN5bWJvbCA9PT0gXCJmdW5jdGlvblwiICYmIFN5bWJvbC5pdGVyYXRvciwgbSA9IHMgJiYgb1tzXSwgaSA9IDA7XG4gICAgaWYgKG0pIHJldHVybiBtLmNhbGwobyk7XG4gICAgaWYgKG8gJiYgdHlwZW9mIG8ubGVuZ3RoID09PSBcIm51bWJlclwiKSByZXR1cm4ge1xuICAgICAgICBuZXh0OiBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICBpZiAobyAmJiBpID49IG8ubGVuZ3RoKSBvID0gdm9pZCAwO1xuICAgICAgICAgICAgcmV0dXJuIHsgdmFsdWU6IG8gJiYgb1tpKytdLCBkb25lOiAhbyB9O1xuICAgICAgICB9XG4gICAgfTtcbiAgICB0aHJvdyBuZXcgVHlwZUVycm9yKHMgPyBcIk9iamVjdCBpcyBub3QgaXRlcmFibGUuXCIgOiBcIlN5bWJvbC5pdGVyYXRvciBpcyBub3QgZGVmaW5lZC5cIik7XG59O1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuZXhwb3J0cy5idWZmZXJDb3VudCA9IHZvaWQgMDtcbnZhciBsaWZ0XzEgPSByZXF1aXJlKFwiLi4vdXRpbC9saWZ0XCIpO1xudmFyIE9wZXJhdG9yU3Vic2NyaWJlcl8xID0gcmVxdWlyZShcIi4vT3BlcmF0b3JTdWJzY3JpYmVyXCIpO1xudmFyIGFyclJlbW92ZV8xID0gcmVxdWlyZShcIi4uL3V0aWwvYXJyUmVtb3ZlXCIpO1xuZnVuY3Rpb24gYnVmZmVyQ291bnQoYnVmZmVyU2l6ZSwgc3RhcnRCdWZmZXJFdmVyeSkge1xuICAgIGlmIChzdGFydEJ1ZmZlckV2ZXJ5ID09PSB2b2lkIDApIHsgc3RhcnRCdWZmZXJFdmVyeSA9IG51bGw7IH1cbiAgICBzdGFydEJ1ZmZlckV2ZXJ5ID0gc3RhcnRCdWZmZXJFdmVyeSAhPT0gbnVsbCAmJiBzdGFydEJ1ZmZlckV2ZXJ5ICE9PSB2b2lkIDAgPyBzdGFydEJ1ZmZlckV2ZXJ5IDogYnVmZmVyU2l6ZTtcbiAgICByZXR1cm4gbGlmdF8xLm9wZXJhdGUoZnVuY3Rpb24gKHNvdXJjZSwgc3Vic2NyaWJlcikge1xuICAgICAgICB2YXIgYnVmZmVycyA9IFtdO1xuICAgICAgICB2YXIgY291bnQgPSAwO1xuICAgICAgICBzb3VyY2Uuc3Vic2NyaWJlKE9wZXJhdG9yU3Vic2NyaWJlcl8xLmNyZWF0ZU9wZXJhdG9yU3Vic2NyaWJlcihzdWJzY3JpYmVyLCBmdW5jdGlvbiAodmFsdWUpIHtcbiAgICAgICAgICAgIHZhciBlXzEsIF9hLCBlXzIsIF9iO1xuICAgICAgICAgICAgdmFyIHRvRW1pdCA9IG51bGw7XG4gICAgICAgICAgICBpZiAoY291bnQrKyAlIHN0YXJ0QnVmZmVyRXZlcnkgPT09IDApIHtcbiAgICAgICAgICAgICAgICBidWZmZXJzLnB1c2goW10pO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgICAgICBmb3IgKHZhciBidWZmZXJzXzEgPSBfX3ZhbHVlcyhidWZmZXJzKSwgYnVmZmVyc18xXzEgPSBidWZmZXJzXzEubmV4dCgpOyAhYnVmZmVyc18xXzEuZG9uZTsgYnVmZmVyc18xXzEgPSBidWZmZXJzXzEubmV4dCgpKSB7XG4gICAgICAgICAgICAgICAgICAgIHZhciBidWZmZXIgPSBidWZmZXJzXzFfMS52YWx1ZTtcbiAgICAgICAgICAgICAgICAgICAgYnVmZmVyLnB1c2godmFsdWUpO1xuICAgICAgICAgICAgICAgICAgICBpZiAoYnVmZmVyU2l6ZSA8PSBidWZmZXIubGVuZ3RoKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICB0b0VtaXQgPSB0b0VtaXQgIT09IG51bGwgJiYgdG9FbWl0ICE9PSB2b2lkIDAgPyB0b0VtaXQgOiBbXTtcbiAgICAgICAgICAgICAgICAgICAgICAgIHRvRW1pdC5wdXNoKGJ1ZmZlcik7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBjYXRjaCAoZV8xXzEpIHsgZV8xID0geyBlcnJvcjogZV8xXzEgfTsgfVxuICAgICAgICAgICAgZmluYWxseSB7XG4gICAgICAgICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgICAgICAgICAgaWYgKGJ1ZmZlcnNfMV8xICYmICFidWZmZXJzXzFfMS5kb25lICYmIChfYSA9IGJ1ZmZlcnNfMS5yZXR1cm4pKSBfYS5jYWxsKGJ1ZmZlcnNfMSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGZpbmFsbHkgeyBpZiAoZV8xKSB0aHJvdyBlXzEuZXJyb3I7IH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmICh0b0VtaXQpIHtcbiAgICAgICAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgICAgICAgICBmb3IgKHZhciB0b0VtaXRfMSA9IF9fdmFsdWVzKHRvRW1pdCksIHRvRW1pdF8xXzEgPSB0b0VtaXRfMS5uZXh0KCk7ICF0b0VtaXRfMV8xLmRvbmU7IHRvRW1pdF8xXzEgPSB0b0VtaXRfMS5uZXh0KCkpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhciBidWZmZXIgPSB0b0VtaXRfMV8xLnZhbHVlO1xuICAgICAgICAgICAgICAgICAgICAgICAgYXJyUmVtb3ZlXzEuYXJyUmVtb3ZlKGJ1ZmZlcnMsIGJ1ZmZlcik7XG4gICAgICAgICAgICAgICAgICAgICAgICBzdWJzY3JpYmVyLm5leHQoYnVmZmVyKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBjYXRjaCAoZV8yXzEpIHsgZV8yID0geyBlcnJvcjogZV8yXzEgfTsgfVxuICAgICAgICAgICAgICAgIGZpbmFsbHkge1xuICAgICAgICAgICAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHRvRW1pdF8xXzEgJiYgIXRvRW1pdF8xXzEuZG9uZSAmJiAoX2IgPSB0b0VtaXRfMS5yZXR1cm4pKSBfYi5jYWxsKHRvRW1pdF8xKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICBmaW5hbGx5IHsgaWYgKGVfMikgdGhyb3cgZV8yLmVycm9yOyB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICB9LCBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICB2YXIgZV8zLCBfYTtcbiAgICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICAgICAgZm9yICh2YXIgYnVmZmVyc18yID0gX192YWx1ZXMoYnVmZmVycyksIGJ1ZmZlcnNfMl8xID0gYnVmZmVyc18yLm5leHQoKTsgIWJ1ZmZlcnNfMl8xLmRvbmU7IGJ1ZmZlcnNfMl8xID0gYnVmZmVyc18yLm5leHQoKSkge1xuICAgICAgICAgICAgICAgICAgICB2YXIgYnVmZmVyID0gYnVmZmVyc18yXzEudmFsdWU7XG4gICAgICAgICAgICAgICAgICAgIHN1YnNjcmliZXIubmV4dChidWZmZXIpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGNhdGNoIChlXzNfMSkgeyBlXzMgPSB7IGVycm9yOiBlXzNfMSB9OyB9XG4gICAgICAgICAgICBmaW5hbGx5IHtcbiAgICAgICAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgICAgICAgICBpZiAoYnVmZmVyc18yXzEgJiYgIWJ1ZmZlcnNfMl8xLmRvbmUgJiYgKF9hID0gYnVmZmVyc18yLnJldHVybikpIF9hLmNhbGwoYnVmZmVyc18yKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgZmluYWxseSB7IGlmIChlXzMpIHRocm93IGVfMy5lcnJvcjsgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgc3Vic2NyaWJlci5jb21wbGV0ZSgpO1xuICAgICAgICB9LCB1bmRlZmluZWQsIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIGJ1ZmZlcnMgPSBudWxsO1xuICAgICAgICB9KSk7XG4gICAgfSk7XG59XG5leHBvcnRzLmJ1ZmZlckNvdW50ID0gYnVmZmVyQ291bnQ7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1idWZmZXJDb3VudC5qcy5tYXAiLCJcInVzZSBzdHJpY3RcIjtcbnZhciBfX3ZhbHVlcyA9ICh0aGlzICYmIHRoaXMuX192YWx1ZXMpIHx8IGZ1bmN0aW9uKG8pIHtcbiAgICB2YXIgcyA9IHR5cGVvZiBTeW1ib2wgPT09IFwiZnVuY3Rpb25cIiAmJiBTeW1ib2wuaXRlcmF0b3IsIG0gPSBzICYmIG9bc10sIGkgPSAwO1xuICAgIGlmIChtKSByZXR1cm4gbS5jYWxsKG8pO1xuICAgIGlmIChvICYmIHR5cGVvZiBvLmxlbmd0aCA9PT0gXCJudW1iZXJcIikgcmV0dXJuIHtcbiAgICAgICAgbmV4dDogZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgaWYgKG8gJiYgaSA+PSBvLmxlbmd0aCkgbyA9IHZvaWQgMDtcbiAgICAgICAgICAgIHJldHVybiB7IHZhbHVlOiBvICYmIG9baSsrXSwgZG9uZTogIW8gfTtcbiAgICAgICAgfVxuICAgIH07XG4gICAgdGhyb3cgbmV3IFR5cGVFcnJvcihzID8gXCJPYmplY3QgaXMgbm90IGl0ZXJhYmxlLlwiIDogXCJTeW1ib2wuaXRlcmF0b3IgaXMgbm90IGRlZmluZWQuXCIpO1xufTtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmV4cG9ydHMuYnVmZmVyVGltZSA9IHZvaWQgMDtcbnZhciBTdWJzY3JpcHRpb25fMSA9IHJlcXVpcmUoXCIuLi9TdWJzY3JpcHRpb25cIik7XG52YXIgbGlmdF8xID0gcmVxdWlyZShcIi4uL3V0aWwvbGlmdFwiKTtcbnZhciBPcGVyYXRvclN1YnNjcmliZXJfMSA9IHJlcXVpcmUoXCIuL09wZXJhdG9yU3Vic2NyaWJlclwiKTtcbnZhciBhcnJSZW1vdmVfMSA9IHJlcXVpcmUoXCIuLi91dGlsL2FyclJlbW92ZVwiKTtcbnZhciBhc3luY18xID0gcmVxdWlyZShcIi4uL3NjaGVkdWxlci9hc3luY1wiKTtcbnZhciBhcmdzXzEgPSByZXF1aXJlKFwiLi4vdXRpbC9hcmdzXCIpO1xudmFyIGV4ZWN1dGVTY2hlZHVsZV8xID0gcmVxdWlyZShcIi4uL3V0aWwvZXhlY3V0ZVNjaGVkdWxlXCIpO1xuZnVuY3Rpb24gYnVmZmVyVGltZShidWZmZXJUaW1lU3Bhbikge1xuICAgIHZhciBfYSwgX2I7XG4gICAgdmFyIG90aGVyQXJncyA9IFtdO1xuICAgIGZvciAodmFyIF9pID0gMTsgX2kgPCBhcmd1bWVudHMubGVuZ3RoOyBfaSsrKSB7XG4gICAgICAgIG90aGVyQXJnc1tfaSAtIDFdID0gYXJndW1lbnRzW19pXTtcbiAgICB9XG4gICAgdmFyIHNjaGVkdWxlciA9IChfYSA9IGFyZ3NfMS5wb3BTY2hlZHVsZXIob3RoZXJBcmdzKSkgIT09IG51bGwgJiYgX2EgIT09IHZvaWQgMCA/IF9hIDogYXN5bmNfMS5hc3luY1NjaGVkdWxlcjtcbiAgICB2YXIgYnVmZmVyQ3JlYXRpb25JbnRlcnZhbCA9IChfYiA9IG90aGVyQXJnc1swXSkgIT09IG51bGwgJiYgX2IgIT09IHZvaWQgMCA/IF9iIDogbnVsbDtcbiAgICB2YXIgbWF4QnVmZmVyU2l6ZSA9IG90aGVyQXJnc1sxXSB8fCBJbmZpbml0eTtcbiAgICByZXR1cm4gbGlmdF8xLm9wZXJhdGUoZnVuY3Rpb24gKHNvdXJjZSwgc3Vic2NyaWJlcikge1xuICAgICAgICB2YXIgYnVmZmVyUmVjb3JkcyA9IFtdO1xuICAgICAgICB2YXIgcmVzdGFydE9uRW1pdCA9IGZhbHNlO1xuICAgICAgICB2YXIgZW1pdCA9IGZ1bmN0aW9uIChyZWNvcmQpIHtcbiAgICAgICAgICAgIHZhciBidWZmZXIgPSByZWNvcmQuYnVmZmVyLCBzdWJzID0gcmVjb3JkLnN1YnM7XG4gICAgICAgICAgICBzdWJzLnVuc3Vic2NyaWJlKCk7XG4gICAgICAgICAgICBhcnJSZW1vdmVfMS5hcnJSZW1vdmUoYnVmZmVyUmVjb3JkcywgcmVjb3JkKTtcbiAgICAgICAgICAgIHN1YnNjcmliZXIubmV4dChidWZmZXIpO1xuICAgICAgICAgICAgcmVzdGFydE9uRW1pdCAmJiBzdGFydEJ1ZmZlcigpO1xuICAgICAgICB9O1xuICAgICAgICB2YXIgc3RhcnRCdWZmZXIgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICBpZiAoYnVmZmVyUmVjb3Jkcykge1xuICAgICAgICAgICAgICAgIHZhciBzdWJzID0gbmV3IFN1YnNjcmlwdGlvbl8xLlN1YnNjcmlwdGlvbigpO1xuICAgICAgICAgICAgICAgIHN1YnNjcmliZXIuYWRkKHN1YnMpO1xuICAgICAgICAgICAgICAgIHZhciBidWZmZXIgPSBbXTtcbiAgICAgICAgICAgICAgICB2YXIgcmVjb3JkXzEgPSB7XG4gICAgICAgICAgICAgICAgICAgIGJ1ZmZlcjogYnVmZmVyLFxuICAgICAgICAgICAgICAgICAgICBzdWJzOiBzdWJzLFxuICAgICAgICAgICAgICAgIH07XG4gICAgICAgICAgICAgICAgYnVmZmVyUmVjb3Jkcy5wdXNoKHJlY29yZF8xKTtcbiAgICAgICAgICAgICAgICBleGVjdXRlU2NoZWR1bGVfMS5leGVjdXRlU2NoZWR1bGUoc3Vicywgc2NoZWR1bGVyLCBmdW5jdGlvbiAoKSB7IHJldHVybiBlbWl0KHJlY29yZF8xKTsgfSwgYnVmZmVyVGltZVNwYW4pO1xuICAgICAgICAgICAgfVxuICAgICAgICB9O1xuICAgICAgICBpZiAoYnVmZmVyQ3JlYXRpb25JbnRlcnZhbCAhPT0gbnVsbCAmJiBidWZmZXJDcmVhdGlvbkludGVydmFsID49IDApIHtcbiAgICAgICAgICAgIGV4ZWN1dGVTY2hlZHVsZV8xLmV4ZWN1dGVTY2hlZHVsZShzdWJzY3JpYmVyLCBzY2hlZHVsZXIsIHN0YXJ0QnVmZmVyLCBidWZmZXJDcmVhdGlvbkludGVydmFsLCB0cnVlKTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIHJlc3RhcnRPbkVtaXQgPSB0cnVlO1xuICAgICAgICB9XG4gICAgICAgIHN0YXJ0QnVmZmVyKCk7XG4gICAgICAgIHZhciBidWZmZXJUaW1lU3Vic2NyaWJlciA9IE9wZXJhdG9yU3Vic2NyaWJlcl8xLmNyZWF0ZU9wZXJhdG9yU3Vic2NyaWJlcihzdWJzY3JpYmVyLCBmdW5jdGlvbiAodmFsdWUpIHtcbiAgICAgICAgICAgIHZhciBlXzEsIF9hO1xuICAgICAgICAgICAgdmFyIHJlY29yZHNDb3B5ID0gYnVmZmVyUmVjb3Jkcy5zbGljZSgpO1xuICAgICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgICAgICBmb3IgKHZhciByZWNvcmRzQ29weV8xID0gX192YWx1ZXMocmVjb3Jkc0NvcHkpLCByZWNvcmRzQ29weV8xXzEgPSByZWNvcmRzQ29weV8xLm5leHQoKTsgIXJlY29yZHNDb3B5XzFfMS5kb25lOyByZWNvcmRzQ29weV8xXzEgPSByZWNvcmRzQ29weV8xLm5leHQoKSkge1xuICAgICAgICAgICAgICAgICAgICB2YXIgcmVjb3JkID0gcmVjb3Jkc0NvcHlfMV8xLnZhbHVlO1xuICAgICAgICAgICAgICAgICAgICB2YXIgYnVmZmVyID0gcmVjb3JkLmJ1ZmZlcjtcbiAgICAgICAgICAgICAgICAgICAgYnVmZmVyLnB1c2godmFsdWUpO1xuICAgICAgICAgICAgICAgICAgICBtYXhCdWZmZXJTaXplIDw9IGJ1ZmZlci5sZW5ndGggJiYgZW1pdChyZWNvcmQpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGNhdGNoIChlXzFfMSkgeyBlXzEgPSB7IGVycm9yOiBlXzFfMSB9OyB9XG4gICAgICAgICAgICBmaW5hbGx5IHtcbiAgICAgICAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgICAgICAgICBpZiAocmVjb3Jkc0NvcHlfMV8xICYmICFyZWNvcmRzQ29weV8xXzEuZG9uZSAmJiAoX2EgPSByZWNvcmRzQ29weV8xLnJldHVybikpIF9hLmNhbGwocmVjb3Jkc0NvcHlfMSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGZpbmFsbHkgeyBpZiAoZV8xKSB0aHJvdyBlXzEuZXJyb3I7IH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgfSwgZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgd2hpbGUgKGJ1ZmZlclJlY29yZHMgPT09IG51bGwgfHwgYnVmZmVyUmVjb3JkcyA9PT0gdm9pZCAwID8gdm9pZCAwIDogYnVmZmVyUmVjb3Jkcy5sZW5ndGgpIHtcbiAgICAgICAgICAgICAgICBzdWJzY3JpYmVyLm5leHQoYnVmZmVyUmVjb3Jkcy5zaGlmdCgpLmJ1ZmZlcik7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBidWZmZXJUaW1lU3Vic2NyaWJlciA9PT0gbnVsbCB8fCBidWZmZXJUaW1lU3Vic2NyaWJlciA9PT0gdm9pZCAwID8gdm9pZCAwIDogYnVmZmVyVGltZVN1YnNjcmliZXIudW5zdWJzY3JpYmUoKTtcbiAgICAgICAgICAgIHN1YnNjcmliZXIuY29tcGxldGUoKTtcbiAgICAgICAgICAgIHN1YnNjcmliZXIudW5zdWJzY3JpYmUoKTtcbiAgICAgICAgfSwgdW5kZWZpbmVkLCBmdW5jdGlvbiAoKSB7IHJldHVybiAoYnVmZmVyUmVjb3JkcyA9IG51bGwpOyB9KTtcbiAgICAgICAgc291cmNlLnN1YnNjcmliZShidWZmZXJUaW1lU3Vic2NyaWJlcik7XG4gICAgfSk7XG59XG5leHBvcnRzLmJ1ZmZlclRpbWUgPSBidWZmZXJUaW1lO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9YnVmZmVyVGltZS5qcy5tYXAiLCJcInVzZSBzdHJpY3RcIjtcbnZhciBfX3ZhbHVlcyA9ICh0aGlzICYmIHRoaXMuX192YWx1ZXMpIHx8IGZ1bmN0aW9uKG8pIHtcbiAgICB2YXIgcyA9IHR5cGVvZiBTeW1ib2wgPT09IFwiZnVuY3Rpb25cIiAmJiBTeW1ib2wuaXRlcmF0b3IsIG0gPSBzICYmIG9bc10sIGkgPSAwO1xuICAgIGlmIChtKSByZXR1cm4gbS5jYWxsKG8pO1xuICAgIGlmIChvICYmIHR5cGVvZiBvLmxlbmd0aCA9PT0gXCJudW1iZXJcIikgcmV0dXJuIHtcbiAgICAgICAgbmV4dDogZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgaWYgKG8gJiYgaSA+PSBvLmxlbmd0aCkgbyA9IHZvaWQgMDtcbiAgICAgICAgICAgIHJldHVybiB7IHZhbHVlOiBvICYmIG9baSsrXSwgZG9uZTogIW8gfTtcbiAgICAgICAgfVxuICAgIH07XG4gICAgdGhyb3cgbmV3IFR5cGVFcnJvcihzID8gXCJPYmplY3QgaXMgbm90IGl0ZXJhYmxlLlwiIDogXCJTeW1ib2wuaXRlcmF0b3IgaXMgbm90IGRlZmluZWQuXCIpO1xufTtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmV4cG9ydHMuYnVmZmVyVG9nZ2xlID0gdm9pZCAwO1xudmFyIFN1YnNjcmlwdGlvbl8xID0gcmVxdWlyZShcIi4uL1N1YnNjcmlwdGlvblwiKTtcbnZhciBsaWZ0XzEgPSByZXF1aXJlKFwiLi4vdXRpbC9saWZ0XCIpO1xudmFyIGlubmVyRnJvbV8xID0gcmVxdWlyZShcIi4uL29ic2VydmFibGUvaW5uZXJGcm9tXCIpO1xudmFyIE9wZXJhdG9yU3Vic2NyaWJlcl8xID0gcmVxdWlyZShcIi4vT3BlcmF0b3JTdWJzY3JpYmVyXCIpO1xudmFyIG5vb3BfMSA9IHJlcXVpcmUoXCIuLi91dGlsL25vb3BcIik7XG52YXIgYXJyUmVtb3ZlXzEgPSByZXF1aXJlKFwiLi4vdXRpbC9hcnJSZW1vdmVcIik7XG5mdW5jdGlvbiBidWZmZXJUb2dnbGUob3BlbmluZ3MsIGNsb3NpbmdTZWxlY3Rvcikge1xuICAgIHJldHVybiBsaWZ0XzEub3BlcmF0ZShmdW5jdGlvbiAoc291cmNlLCBzdWJzY3JpYmVyKSB7XG4gICAgICAgIHZhciBidWZmZXJzID0gW107XG4gICAgICAgIGlubmVyRnJvbV8xLmlubmVyRnJvbShvcGVuaW5ncykuc3Vic2NyaWJlKE9wZXJhdG9yU3Vic2NyaWJlcl8xLmNyZWF0ZU9wZXJhdG9yU3Vic2NyaWJlcihzdWJzY3JpYmVyLCBmdW5jdGlvbiAob3BlblZhbHVlKSB7XG4gICAgICAgICAgICB2YXIgYnVmZmVyID0gW107XG4gICAgICAgICAgICBidWZmZXJzLnB1c2goYnVmZmVyKTtcbiAgICAgICAgICAgIHZhciBjbG9zaW5nU3Vic2NyaXB0aW9uID0gbmV3IFN1YnNjcmlwdGlvbl8xLlN1YnNjcmlwdGlvbigpO1xuICAgICAgICAgICAgdmFyIGVtaXRCdWZmZXIgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgYXJyUmVtb3ZlXzEuYXJyUmVtb3ZlKGJ1ZmZlcnMsIGJ1ZmZlcik7XG4gICAgICAgICAgICAgICAgc3Vic2NyaWJlci5uZXh0KGJ1ZmZlcik7XG4gICAgICAgICAgICAgICAgY2xvc2luZ1N1YnNjcmlwdGlvbi51bnN1YnNjcmliZSgpO1xuICAgICAgICAgICAgfTtcbiAgICAgICAgICAgIGNsb3NpbmdTdWJzY3JpcHRpb24uYWRkKGlubmVyRnJvbV8xLmlubmVyRnJvbShjbG9zaW5nU2VsZWN0b3Iob3BlblZhbHVlKSkuc3Vic2NyaWJlKE9wZXJhdG9yU3Vic2NyaWJlcl8xLmNyZWF0ZU9wZXJhdG9yU3Vic2NyaWJlcihzdWJzY3JpYmVyLCBlbWl0QnVmZmVyLCBub29wXzEubm9vcCkpKTtcbiAgICAgICAgfSwgbm9vcF8xLm5vb3ApKTtcbiAgICAgICAgc291cmNlLnN1YnNjcmliZShPcGVyYXRvclN1YnNjcmliZXJfMS5jcmVhdGVPcGVyYXRvclN1YnNjcmliZXIoc3Vic2NyaWJlciwgZnVuY3Rpb24gKHZhbHVlKSB7XG4gICAgICAgICAgICB2YXIgZV8xLCBfYTtcbiAgICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICAgICAgZm9yICh2YXIgYnVmZmVyc18xID0gX192YWx1ZXMoYnVmZmVycyksIGJ1ZmZlcnNfMV8xID0gYnVmZmVyc18xLm5leHQoKTsgIWJ1ZmZlcnNfMV8xLmRvbmU7IGJ1ZmZlcnNfMV8xID0gYnVmZmVyc18xLm5leHQoKSkge1xuICAgICAgICAgICAgICAgICAgICB2YXIgYnVmZmVyID0gYnVmZmVyc18xXzEudmFsdWU7XG4gICAgICAgICAgICAgICAgICAgIGJ1ZmZlci5wdXNoKHZhbHVlKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBjYXRjaCAoZV8xXzEpIHsgZV8xID0geyBlcnJvcjogZV8xXzEgfTsgfVxuICAgICAgICAgICAgZmluYWxseSB7XG4gICAgICAgICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgICAgICAgICAgaWYgKGJ1ZmZlcnNfMV8xICYmICFidWZmZXJzXzFfMS5kb25lICYmIChfYSA9IGJ1ZmZlcnNfMS5yZXR1cm4pKSBfYS5jYWxsKGJ1ZmZlcnNfMSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGZpbmFsbHkgeyBpZiAoZV8xKSB0aHJvdyBlXzEuZXJyb3I7IH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgfSwgZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgd2hpbGUgKGJ1ZmZlcnMubGVuZ3RoID4gMCkge1xuICAgICAgICAgICAgICAgIHN1YnNjcmliZXIubmV4dChidWZmZXJzLnNoaWZ0KCkpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgc3Vic2NyaWJlci5jb21wbGV0ZSgpO1xuICAgICAgICB9KSk7XG4gICAgfSk7XG59XG5leHBvcnRzLmJ1ZmZlclRvZ2dsZSA9IGJ1ZmZlclRvZ2dsZTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWJ1ZmZlclRvZ2dsZS5qcy5tYXAiLCJcInVzZSBzdHJpY3RcIjtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmV4cG9ydHMuYnVmZmVyV2hlbiA9IHZvaWQgMDtcbnZhciBsaWZ0XzEgPSByZXF1aXJlKFwiLi4vdXRpbC9saWZ0XCIpO1xudmFyIG5vb3BfMSA9IHJlcXVpcmUoXCIuLi91dGlsL25vb3BcIik7XG52YXIgT3BlcmF0b3JTdWJzY3JpYmVyXzEgPSByZXF1aXJlKFwiLi9PcGVyYXRvclN1YnNjcmliZXJcIik7XG52YXIgaW5uZXJGcm9tXzEgPSByZXF1aXJlKFwiLi4vb2JzZXJ2YWJsZS9pbm5lckZyb21cIik7XG5mdW5jdGlvbiBidWZmZXJXaGVuKGNsb3NpbmdTZWxlY3Rvcikge1xuICAgIHJldHVybiBsaWZ0XzEub3BlcmF0ZShmdW5jdGlvbiAoc291cmNlLCBzdWJzY3JpYmVyKSB7XG4gICAgICAgIHZhciBidWZmZXIgPSBudWxsO1xuICAgICAgICB2YXIgY2xvc2luZ1N1YnNjcmliZXIgPSBudWxsO1xuICAgICAgICB2YXIgb3BlbkJ1ZmZlciA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIGNsb3NpbmdTdWJzY3JpYmVyID09PSBudWxsIHx8IGNsb3NpbmdTdWJzY3JpYmVyID09PSB2b2lkIDAgPyB2b2lkIDAgOiBjbG9zaW5nU3Vic2NyaWJlci51bnN1YnNjcmliZSgpO1xuICAgICAgICAgICAgdmFyIGIgPSBidWZmZXI7XG4gICAgICAgICAgICBidWZmZXIgPSBbXTtcbiAgICAgICAgICAgIGIgJiYgc3Vic2NyaWJlci5uZXh0KGIpO1xuICAgICAgICAgICAgaW5uZXJGcm9tXzEuaW5uZXJGcm9tKGNsb3NpbmdTZWxlY3RvcigpKS5zdWJzY3JpYmUoKGNsb3NpbmdTdWJzY3JpYmVyID0gT3BlcmF0b3JTdWJzY3JpYmVyXzEuY3JlYXRlT3BlcmF0b3JTdWJzY3JpYmVyKHN1YnNjcmliZXIsIG9wZW5CdWZmZXIsIG5vb3BfMS5ub29wKSkpO1xuICAgICAgICB9O1xuICAgICAgICBvcGVuQnVmZmVyKCk7XG4gICAgICAgIHNvdXJjZS5zdWJzY3JpYmUoT3BlcmF0b3JTdWJzY3JpYmVyXzEuY3JlYXRlT3BlcmF0b3JTdWJzY3JpYmVyKHN1YnNjcmliZXIsIGZ1bmN0aW9uICh2YWx1ZSkgeyByZXR1cm4gYnVmZmVyID09PSBudWxsIHx8IGJ1ZmZlciA9PT0gdm9pZCAwID8gdm9pZCAwIDogYnVmZmVyLnB1c2godmFsdWUpOyB9LCBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICBidWZmZXIgJiYgc3Vic2NyaWJlci5uZXh0KGJ1ZmZlcik7XG4gICAgICAgICAgICBzdWJzY3JpYmVyLmNvbXBsZXRlKCk7XG4gICAgICAgIH0sIHVuZGVmaW5lZCwgZnVuY3Rpb24gKCkgeyByZXR1cm4gKGJ1ZmZlciA9IGNsb3NpbmdTdWJzY3JpYmVyID0gbnVsbCk7IH0pKTtcbiAgICB9KTtcbn1cbmV4cG9ydHMuYnVmZmVyV2hlbiA9IGJ1ZmZlcldoZW47XG4vLyMgc291cmNlTWFwcGluZ1VSTD1idWZmZXJXaGVuLmpzLm1hcCIsIlwidXNlIHN0cmljdFwiO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuZXhwb3J0cy5jYXRjaEVycm9yID0gdm9pZCAwO1xudmFyIGlubmVyRnJvbV8xID0gcmVxdWlyZShcIi4uL29ic2VydmFibGUvaW5uZXJGcm9tXCIpO1xudmFyIE9wZXJhdG9yU3Vic2NyaWJlcl8xID0gcmVxdWlyZShcIi4vT3BlcmF0b3JTdWJzY3JpYmVyXCIpO1xudmFyIGxpZnRfMSA9IHJlcXVpcmUoXCIuLi91dGlsL2xpZnRcIik7XG5mdW5jdGlvbiBjYXRjaEVycm9yKHNlbGVjdG9yKSB7XG4gICAgcmV0dXJuIGxpZnRfMS5vcGVyYXRlKGZ1bmN0aW9uIChzb3VyY2UsIHN1YnNjcmliZXIpIHtcbiAgICAgICAgdmFyIGlubmVyU3ViID0gbnVsbDtcbiAgICAgICAgdmFyIHN5bmNVbnN1YiA9IGZhbHNlO1xuICAgICAgICB2YXIgaGFuZGxlZFJlc3VsdDtcbiAgICAgICAgaW5uZXJTdWIgPSBzb3VyY2Uuc3Vic2NyaWJlKE9wZXJhdG9yU3Vic2NyaWJlcl8xLmNyZWF0ZU9wZXJhdG9yU3Vic2NyaWJlcihzdWJzY3JpYmVyLCB1bmRlZmluZWQsIHVuZGVmaW5lZCwgZnVuY3Rpb24gKGVycikge1xuICAgICAgICAgICAgaGFuZGxlZFJlc3VsdCA9IGlubmVyRnJvbV8xLmlubmVyRnJvbShzZWxlY3RvcihlcnIsIGNhdGNoRXJyb3Ioc2VsZWN0b3IpKHNvdXJjZSkpKTtcbiAgICAgICAgICAgIGlmIChpbm5lclN1Yikge1xuICAgICAgICAgICAgICAgIGlubmVyU3ViLnVuc3Vic2NyaWJlKCk7XG4gICAgICAgICAgICAgICAgaW5uZXJTdWIgPSBudWxsO1xuICAgICAgICAgICAgICAgIGhhbmRsZWRSZXN1bHQuc3Vic2NyaWJlKHN1YnNjcmliZXIpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgc3luY1Vuc3ViID0gdHJ1ZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSkpO1xuICAgICAgICBpZiAoc3luY1Vuc3ViKSB7XG4gICAgICAgICAgICBpbm5lclN1Yi51bnN1YnNjcmliZSgpO1xuICAgICAgICAgICAgaW5uZXJTdWIgPSBudWxsO1xuICAgICAgICAgICAgaGFuZGxlZFJlc3VsdC5zdWJzY3JpYmUoc3Vic2NyaWJlcik7XG4gICAgICAgIH1cbiAgICB9KTtcbn1cbmV4cG9ydHMuY2F0Y2hFcnJvciA9IGNhdGNoRXJyb3I7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1jYXRjaEVycm9yLmpzLm1hcCIsIlwidXNlIHN0cmljdFwiO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuZXhwb3J0cy5jb21iaW5lQWxsID0gdm9pZCAwO1xudmFyIGNvbWJpbmVMYXRlc3RBbGxfMSA9IHJlcXVpcmUoXCIuL2NvbWJpbmVMYXRlc3RBbGxcIik7XG5leHBvcnRzLmNvbWJpbmVBbGwgPSBjb21iaW5lTGF0ZXN0QWxsXzEuY29tYmluZUxhdGVzdEFsbDtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWNvbWJpbmVBbGwuanMubWFwIiwiXCJ1c2Ugc3RyaWN0XCI7XG52YXIgX19yZWFkID0gKHRoaXMgJiYgdGhpcy5fX3JlYWQpIHx8IGZ1bmN0aW9uIChvLCBuKSB7XG4gICAgdmFyIG0gPSB0eXBlb2YgU3ltYm9sID09PSBcImZ1bmN0aW9uXCIgJiYgb1tTeW1ib2wuaXRlcmF0b3JdO1xuICAgIGlmICghbSkgcmV0dXJuIG87XG4gICAgdmFyIGkgPSBtLmNhbGwobyksIHIsIGFyID0gW10sIGU7XG4gICAgdHJ5IHtcbiAgICAgICAgd2hpbGUgKChuID09PSB2b2lkIDAgfHwgbi0tID4gMCkgJiYgIShyID0gaS5uZXh0KCkpLmRvbmUpIGFyLnB1c2goci52YWx1ZSk7XG4gICAgfVxuICAgIGNhdGNoIChlcnJvcikgeyBlID0geyBlcnJvcjogZXJyb3IgfTsgfVxuICAgIGZpbmFsbHkge1xuICAgICAgICB0cnkge1xuICAgICAgICAgICAgaWYgKHIgJiYgIXIuZG9uZSAmJiAobSA9IGlbXCJyZXR1cm5cIl0pKSBtLmNhbGwoaSk7XG4gICAgICAgIH1cbiAgICAgICAgZmluYWxseSB7IGlmIChlKSB0aHJvdyBlLmVycm9yOyB9XG4gICAgfVxuICAgIHJldHVybiBhcjtcbn07XG52YXIgX19zcHJlYWRBcnJheSA9ICh0aGlzICYmIHRoaXMuX19zcHJlYWRBcnJheSkgfHwgZnVuY3Rpb24gKHRvLCBmcm9tKSB7XG4gICAgZm9yICh2YXIgaSA9IDAsIGlsID0gZnJvbS5sZW5ndGgsIGogPSB0by5sZW5ndGg7IGkgPCBpbDsgaSsrLCBqKyspXG4gICAgICAgIHRvW2pdID0gZnJvbVtpXTtcbiAgICByZXR1cm4gdG87XG59O1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuZXhwb3J0cy5jb21iaW5lTGF0ZXN0ID0gdm9pZCAwO1xudmFyIGNvbWJpbmVMYXRlc3RfMSA9IHJlcXVpcmUoXCIuLi9vYnNlcnZhYmxlL2NvbWJpbmVMYXRlc3RcIik7XG52YXIgbGlmdF8xID0gcmVxdWlyZShcIi4uL3V0aWwvbGlmdFwiKTtcbnZhciBhcmdzT3JBcmdBcnJheV8xID0gcmVxdWlyZShcIi4uL3V0aWwvYXJnc09yQXJnQXJyYXlcIik7XG52YXIgbWFwT25lT3JNYW55QXJnc18xID0gcmVxdWlyZShcIi4uL3V0aWwvbWFwT25lT3JNYW55QXJnc1wiKTtcbnZhciBwaXBlXzEgPSByZXF1aXJlKFwiLi4vdXRpbC9waXBlXCIpO1xudmFyIGFyZ3NfMSA9IHJlcXVpcmUoXCIuLi91dGlsL2FyZ3NcIik7XG5mdW5jdGlvbiBjb21iaW5lTGF0ZXN0KCkge1xuICAgIHZhciBhcmdzID0gW107XG4gICAgZm9yICh2YXIgX2kgPSAwOyBfaSA8IGFyZ3VtZW50cy5sZW5ndGg7IF9pKyspIHtcbiAgICAgICAgYXJnc1tfaV0gPSBhcmd1bWVudHNbX2ldO1xuICAgIH1cbiAgICB2YXIgcmVzdWx0U2VsZWN0b3IgPSBhcmdzXzEucG9wUmVzdWx0U2VsZWN0b3IoYXJncyk7XG4gICAgcmV0dXJuIHJlc3VsdFNlbGVjdG9yXG4gICAgICAgID8gcGlwZV8xLnBpcGUoY29tYmluZUxhdGVzdC5hcHBseSh2b2lkIDAsIF9fc3ByZWFkQXJyYXkoW10sIF9fcmVhZChhcmdzKSkpLCBtYXBPbmVPck1hbnlBcmdzXzEubWFwT25lT3JNYW55QXJncyhyZXN1bHRTZWxlY3RvcikpXG4gICAgICAgIDogbGlmdF8xLm9wZXJhdGUoZnVuY3Rpb24gKHNvdXJjZSwgc3Vic2NyaWJlcikge1xuICAgICAgICAgICAgY29tYmluZUxhdGVzdF8xLmNvbWJpbmVMYXRlc3RJbml0KF9fc3ByZWFkQXJyYXkoW3NvdXJjZV0sIF9fcmVhZChhcmdzT3JBcmdBcnJheV8xLmFyZ3NPckFyZ0FycmF5KGFyZ3MpKSkpKHN1YnNjcmliZXIpO1xuICAgICAgICB9KTtcbn1cbmV4cG9ydHMuY29tYmluZUxhdGVzdCA9IGNvbWJpbmVMYXRlc3Q7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1jb21iaW5lTGF0ZXN0LmpzLm1hcCIsIlwidXNlIHN0cmljdFwiO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuZXhwb3J0cy5jb21iaW5lTGF0ZXN0QWxsID0gdm9pZCAwO1xudmFyIGNvbWJpbmVMYXRlc3RfMSA9IHJlcXVpcmUoXCIuLi9vYnNlcnZhYmxlL2NvbWJpbmVMYXRlc3RcIik7XG52YXIgam9pbkFsbEludGVybmFsc18xID0gcmVxdWlyZShcIi4vam9pbkFsbEludGVybmFsc1wiKTtcbmZ1bmN0aW9uIGNvbWJpbmVMYXRlc3RBbGwocHJvamVjdCkge1xuICAgIHJldHVybiBqb2luQWxsSW50ZXJuYWxzXzEuam9pbkFsbEludGVybmFscyhjb21iaW5lTGF0ZXN0XzEuY29tYmluZUxhdGVzdCwgcHJvamVjdCk7XG59XG5leHBvcnRzLmNvbWJpbmVMYXRlc3RBbGwgPSBjb21iaW5lTGF0ZXN0QWxsO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9Y29tYmluZUxhdGVzdEFsbC5qcy5tYXAiLCJcInVzZSBzdHJpY3RcIjtcbnZhciBfX3JlYWQgPSAodGhpcyAmJiB0aGlzLl9fcmVhZCkgfHwgZnVuY3Rpb24gKG8sIG4pIHtcbiAgICB2YXIgbSA9IHR5cGVvZiBTeW1ib2wgPT09IFwiZnVuY3Rpb25cIiAmJiBvW1N5bWJvbC5pdGVyYXRvcl07XG4gICAgaWYgKCFtKSByZXR1cm4gbztcbiAgICB2YXIgaSA9IG0uY2FsbChvKSwgciwgYXIgPSBbXSwgZTtcbiAgICB0cnkge1xuICAgICAgICB3aGlsZSAoKG4gPT09IHZvaWQgMCB8fCBuLS0gPiAwKSAmJiAhKHIgPSBpLm5leHQoKSkuZG9uZSkgYXIucHVzaChyLnZhbHVlKTtcbiAgICB9XG4gICAgY2F0Y2ggKGVycm9yKSB7IGUgPSB7IGVycm9yOiBlcnJvciB9OyB9XG4gICAgZmluYWxseSB7XG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgICBpZiAociAmJiAhci5kb25lICYmIChtID0gaVtcInJldHVyblwiXSkpIG0uY2FsbChpKTtcbiAgICAgICAgfVxuICAgICAgICBmaW5hbGx5IHsgaWYgKGUpIHRocm93IGUuZXJyb3I7IH1cbiAgICB9XG4gICAgcmV0dXJuIGFyO1xufTtcbnZhciBfX3NwcmVhZEFycmF5ID0gKHRoaXMgJiYgdGhpcy5fX3NwcmVhZEFycmF5KSB8fCBmdW5jdGlvbiAodG8sIGZyb20pIHtcbiAgICBmb3IgKHZhciBpID0gMCwgaWwgPSBmcm9tLmxlbmd0aCwgaiA9IHRvLmxlbmd0aDsgaSA8IGlsOyBpKyssIGorKylcbiAgICAgICAgdG9bal0gPSBmcm9tW2ldO1xuICAgIHJldHVybiB0bztcbn07XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5leHBvcnRzLmNvbWJpbmVMYXRlc3RXaXRoID0gdm9pZCAwO1xudmFyIGNvbWJpbmVMYXRlc3RfMSA9IHJlcXVpcmUoXCIuL2NvbWJpbmVMYXRlc3RcIik7XG5mdW5jdGlvbiBjb21iaW5lTGF0ZXN0V2l0aCgpIHtcbiAgICB2YXIgb3RoZXJTb3VyY2VzID0gW107XG4gICAgZm9yICh2YXIgX2kgPSAwOyBfaSA8IGFyZ3VtZW50cy5sZW5ndGg7IF9pKyspIHtcbiAgICAgICAgb3RoZXJTb3VyY2VzW19pXSA9IGFyZ3VtZW50c1tfaV07XG4gICAgfVxuICAgIHJldHVybiBjb21iaW5lTGF0ZXN0XzEuY29tYmluZUxhdGVzdC5hcHBseSh2b2lkIDAsIF9fc3ByZWFkQXJyYXkoW10sIF9fcmVhZChvdGhlclNvdXJjZXMpKSk7XG59XG5leHBvcnRzLmNvbWJpbmVMYXRlc3RXaXRoID0gY29tYmluZUxhdGVzdFdpdGg7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1jb21iaW5lTGF0ZXN0V2l0aC5qcy5tYXAiLCJcInVzZSBzdHJpY3RcIjtcbnZhciBfX3JlYWQgPSAodGhpcyAmJiB0aGlzLl9fcmVhZCkgfHwgZnVuY3Rpb24gKG8sIG4pIHtcbiAgICB2YXIgbSA9IHR5cGVvZiBTeW1ib2wgPT09IFwiZnVuY3Rpb25cIiAmJiBvW1N5bWJvbC5pdGVyYXRvcl07XG4gICAgaWYgKCFtKSByZXR1cm4gbztcbiAgICB2YXIgaSA9IG0uY2FsbChvKSwgciwgYXIgPSBbXSwgZTtcbiAgICB0cnkge1xuICAgICAgICB3aGlsZSAoKG4gPT09IHZvaWQgMCB8fCBuLS0gPiAwKSAmJiAhKHIgPSBpLm5leHQoKSkuZG9uZSkgYXIucHVzaChyLnZhbHVlKTtcbiAgICB9XG4gICAgY2F0Y2ggKGVycm9yKSB7IGUgPSB7IGVycm9yOiBlcnJvciB9OyB9XG4gICAgZmluYWxseSB7XG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgICBpZiAociAmJiAhci5kb25lICYmIChtID0gaVtcInJldHVyblwiXSkpIG0uY2FsbChpKTtcbiAgICAgICAgfVxuICAgICAgICBmaW5hbGx5IHsgaWYgKGUpIHRocm93IGUuZXJyb3I7IH1cbiAgICB9XG4gICAgcmV0dXJuIGFyO1xufTtcbnZhciBfX3NwcmVhZEFycmF5ID0gKHRoaXMgJiYgdGhpcy5fX3NwcmVhZEFycmF5KSB8fCBmdW5jdGlvbiAodG8sIGZyb20pIHtcbiAgICBmb3IgKHZhciBpID0gMCwgaWwgPSBmcm9tLmxlbmd0aCwgaiA9IHRvLmxlbmd0aDsgaSA8IGlsOyBpKyssIGorKylcbiAgICAgICAgdG9bal0gPSBmcm9tW2ldO1xuICAgIHJldHVybiB0bztcbn07XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5leHBvcnRzLmNvbmNhdCA9IHZvaWQgMDtcbnZhciBsaWZ0XzEgPSByZXF1aXJlKFwiLi4vdXRpbC9saWZ0XCIpO1xudmFyIGNvbmNhdEFsbF8xID0gcmVxdWlyZShcIi4vY29uY2F0QWxsXCIpO1xudmFyIGFyZ3NfMSA9IHJlcXVpcmUoXCIuLi91dGlsL2FyZ3NcIik7XG52YXIgZnJvbV8xID0gcmVxdWlyZShcIi4uL29ic2VydmFibGUvZnJvbVwiKTtcbmZ1bmN0aW9uIGNvbmNhdCgpIHtcbiAgICB2YXIgYXJncyA9IFtdO1xuICAgIGZvciAodmFyIF9pID0gMDsgX2kgPCBhcmd1bWVudHMubGVuZ3RoOyBfaSsrKSB7XG4gICAgICAgIGFyZ3NbX2ldID0gYXJndW1lbnRzW19pXTtcbiAgICB9XG4gICAgdmFyIHNjaGVkdWxlciA9IGFyZ3NfMS5wb3BTY2hlZHVsZXIoYXJncyk7XG4gICAgcmV0dXJuIGxpZnRfMS5vcGVyYXRlKGZ1bmN0aW9uIChzb3VyY2UsIHN1YnNjcmliZXIpIHtcbiAgICAgICAgY29uY2F0QWxsXzEuY29uY2F0QWxsKCkoZnJvbV8xLmZyb20oX19zcHJlYWRBcnJheShbc291cmNlXSwgX19yZWFkKGFyZ3MpKSwgc2NoZWR1bGVyKSkuc3Vic2NyaWJlKHN1YnNjcmliZXIpO1xuICAgIH0pO1xufVxuZXhwb3J0cy5jb25jYXQgPSBjb25jYXQ7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1jb25jYXQuanMubWFwIiwiXCJ1c2Ugc3RyaWN0XCI7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5leHBvcnRzLmNvbmNhdEFsbCA9IHZvaWQgMDtcbnZhciBtZXJnZUFsbF8xID0gcmVxdWlyZShcIi4vbWVyZ2VBbGxcIik7XG5mdW5jdGlvbiBjb25jYXRBbGwoKSB7XG4gICAgcmV0dXJuIG1lcmdlQWxsXzEubWVyZ2VBbGwoMSk7XG59XG5leHBvcnRzLmNvbmNhdEFsbCA9IGNvbmNhdEFsbDtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWNvbmNhdEFsbC5qcy5tYXAiLCJcInVzZSBzdHJpY3RcIjtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmV4cG9ydHMuY29uY2F0TWFwID0gdm9pZCAwO1xudmFyIG1lcmdlTWFwXzEgPSByZXF1aXJlKFwiLi9tZXJnZU1hcFwiKTtcbnZhciBpc0Z1bmN0aW9uXzEgPSByZXF1aXJlKFwiLi4vdXRpbC9pc0Z1bmN0aW9uXCIpO1xuZnVuY3Rpb24gY29uY2F0TWFwKHByb2plY3QsIHJlc3VsdFNlbGVjdG9yKSB7XG4gICAgcmV0dXJuIGlzRnVuY3Rpb25fMS5pc0Z1bmN0aW9uKHJlc3VsdFNlbGVjdG9yKSA/IG1lcmdlTWFwXzEubWVyZ2VNYXAocHJvamVjdCwgcmVzdWx0U2VsZWN0b3IsIDEpIDogbWVyZ2VNYXBfMS5tZXJnZU1hcChwcm9qZWN0LCAxKTtcbn1cbmV4cG9ydHMuY29uY2F0TWFwID0gY29uY2F0TWFwO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9Y29uY2F0TWFwLmpzLm1hcCIsIlwidXNlIHN0cmljdFwiO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuZXhwb3J0cy5jb25jYXRNYXBUbyA9IHZvaWQgMDtcbnZhciBjb25jYXRNYXBfMSA9IHJlcXVpcmUoXCIuL2NvbmNhdE1hcFwiKTtcbnZhciBpc0Z1bmN0aW9uXzEgPSByZXF1aXJlKFwiLi4vdXRpbC9pc0Z1bmN0aW9uXCIpO1xuZnVuY3Rpb24gY29uY2F0TWFwVG8oaW5uZXJPYnNlcnZhYmxlLCByZXN1bHRTZWxlY3Rvcikge1xuICAgIHJldHVybiBpc0Z1bmN0aW9uXzEuaXNGdW5jdGlvbihyZXN1bHRTZWxlY3RvcikgPyBjb25jYXRNYXBfMS5jb25jYXRNYXAoZnVuY3Rpb24gKCkgeyByZXR1cm4gaW5uZXJPYnNlcnZhYmxlOyB9LCByZXN1bHRTZWxlY3RvcikgOiBjb25jYXRNYXBfMS5jb25jYXRNYXAoZnVuY3Rpb24gKCkgeyByZXR1cm4gaW5uZXJPYnNlcnZhYmxlOyB9KTtcbn1cbmV4cG9ydHMuY29uY2F0TWFwVG8gPSBjb25jYXRNYXBUbztcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWNvbmNhdE1hcFRvLmpzLm1hcCIsIlwidXNlIHN0cmljdFwiO1xudmFyIF9fcmVhZCA9ICh0aGlzICYmIHRoaXMuX19yZWFkKSB8fCBmdW5jdGlvbiAobywgbikge1xuICAgIHZhciBtID0gdHlwZW9mIFN5bWJvbCA9PT0gXCJmdW5jdGlvblwiICYmIG9bU3ltYm9sLml0ZXJhdG9yXTtcbiAgICBpZiAoIW0pIHJldHVybiBvO1xuICAgIHZhciBpID0gbS5jYWxsKG8pLCByLCBhciA9IFtdLCBlO1xuICAgIHRyeSB7XG4gICAgICAgIHdoaWxlICgobiA9PT0gdm9pZCAwIHx8IG4tLSA+IDApICYmICEociA9IGkubmV4dCgpKS5kb25lKSBhci5wdXNoKHIudmFsdWUpO1xuICAgIH1cbiAgICBjYXRjaCAoZXJyb3IpIHsgZSA9IHsgZXJyb3I6IGVycm9yIH07IH1cbiAgICBmaW5hbGx5IHtcbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgIGlmIChyICYmICFyLmRvbmUgJiYgKG0gPSBpW1wicmV0dXJuXCJdKSkgbS5jYWxsKGkpO1xuICAgICAgICB9XG4gICAgICAgIGZpbmFsbHkgeyBpZiAoZSkgdGhyb3cgZS5lcnJvcjsgfVxuICAgIH1cbiAgICByZXR1cm4gYXI7XG59O1xudmFyIF9fc3ByZWFkQXJyYXkgPSAodGhpcyAmJiB0aGlzLl9fc3ByZWFkQXJyYXkpIHx8IGZ1bmN0aW9uICh0bywgZnJvbSkge1xuICAgIGZvciAodmFyIGkgPSAwLCBpbCA9IGZyb20ubGVuZ3RoLCBqID0gdG8ubGVuZ3RoOyBpIDwgaWw7IGkrKywgaisrKVxuICAgICAgICB0b1tqXSA9IGZyb21baV07XG4gICAgcmV0dXJuIHRvO1xufTtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmV4cG9ydHMuY29uY2F0V2l0aCA9IHZvaWQgMDtcbnZhciBjb25jYXRfMSA9IHJlcXVpcmUoXCIuL2NvbmNhdFwiKTtcbmZ1bmN0aW9uIGNvbmNhdFdpdGgoKSB7XG4gICAgdmFyIG90aGVyU291cmNlcyA9IFtdO1xuICAgIGZvciAodmFyIF9pID0gMDsgX2kgPCBhcmd1bWVudHMubGVuZ3RoOyBfaSsrKSB7XG4gICAgICAgIG90aGVyU291cmNlc1tfaV0gPSBhcmd1bWVudHNbX2ldO1xuICAgIH1cbiAgICByZXR1cm4gY29uY2F0XzEuY29uY2F0LmFwcGx5KHZvaWQgMCwgX19zcHJlYWRBcnJheShbXSwgX19yZWFkKG90aGVyU291cmNlcykpKTtcbn1cbmV4cG9ydHMuY29uY2F0V2l0aCA9IGNvbmNhdFdpdGg7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1jb25jYXRXaXRoLmpzLm1hcCIsIlwidXNlIHN0cmljdFwiO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuZXhwb3J0cy5jb25uZWN0ID0gdm9pZCAwO1xudmFyIFN1YmplY3RfMSA9IHJlcXVpcmUoXCIuLi9TdWJqZWN0XCIpO1xudmFyIGlubmVyRnJvbV8xID0gcmVxdWlyZShcIi4uL29ic2VydmFibGUvaW5uZXJGcm9tXCIpO1xudmFyIGxpZnRfMSA9IHJlcXVpcmUoXCIuLi91dGlsL2xpZnRcIik7XG52YXIgZnJvbVN1YnNjcmliYWJsZV8xID0gcmVxdWlyZShcIi4uL29ic2VydmFibGUvZnJvbVN1YnNjcmliYWJsZVwiKTtcbnZhciBERUZBVUxUX0NPTkZJRyA9IHtcbiAgICBjb25uZWN0b3I6IGZ1bmN0aW9uICgpIHsgcmV0dXJuIG5ldyBTdWJqZWN0XzEuU3ViamVjdCgpOyB9LFxufTtcbmZ1bmN0aW9uIGNvbm5lY3Qoc2VsZWN0b3IsIGNvbmZpZykge1xuICAgIGlmIChjb25maWcgPT09IHZvaWQgMCkgeyBjb25maWcgPSBERUZBVUxUX0NPTkZJRzsgfVxuICAgIHZhciBjb25uZWN0b3IgPSBjb25maWcuY29ubmVjdG9yO1xuICAgIHJldHVybiBsaWZ0XzEub3BlcmF0ZShmdW5jdGlvbiAoc291cmNlLCBzdWJzY3JpYmVyKSB7XG4gICAgICAgIHZhciBzdWJqZWN0ID0gY29ubmVjdG9yKCk7XG4gICAgICAgIGlubmVyRnJvbV8xLmlubmVyRnJvbShzZWxlY3Rvcihmcm9tU3Vic2NyaWJhYmxlXzEuZnJvbVN1YnNjcmliYWJsZShzdWJqZWN0KSkpLnN1YnNjcmliZShzdWJzY3JpYmVyKTtcbiAgICAgICAgc3Vic2NyaWJlci5hZGQoc291cmNlLnN1YnNjcmliZShzdWJqZWN0KSk7XG4gICAgfSk7XG59XG5leHBvcnRzLmNvbm5lY3QgPSBjb25uZWN0O1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9Y29ubmVjdC5qcy5tYXAiLCJcInVzZSBzdHJpY3RcIjtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmV4cG9ydHMuY291bnQgPSB2b2lkIDA7XG52YXIgcmVkdWNlXzEgPSByZXF1aXJlKFwiLi9yZWR1Y2VcIik7XG5mdW5jdGlvbiBjb3VudChwcmVkaWNhdGUpIHtcbiAgICByZXR1cm4gcmVkdWNlXzEucmVkdWNlKGZ1bmN0aW9uICh0b3RhbCwgdmFsdWUsIGkpIHsgcmV0dXJuICghcHJlZGljYXRlIHx8IHByZWRpY2F0ZSh2YWx1ZSwgaSkgPyB0b3RhbCArIDEgOiB0b3RhbCk7IH0sIDApO1xufVxuZXhwb3J0cy5jb3VudCA9IGNvdW50O1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9Y291bnQuanMubWFwIiwiXCJ1c2Ugc3RyaWN0XCI7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5leHBvcnRzLmRlYm91bmNlID0gdm9pZCAwO1xudmFyIGxpZnRfMSA9IHJlcXVpcmUoXCIuLi91dGlsL2xpZnRcIik7XG52YXIgbm9vcF8xID0gcmVxdWlyZShcIi4uL3V0aWwvbm9vcFwiKTtcbnZhciBPcGVyYXRvclN1YnNjcmliZXJfMSA9IHJlcXVpcmUoXCIuL09wZXJhdG9yU3Vic2NyaWJlclwiKTtcbnZhciBpbm5lckZyb21fMSA9IHJlcXVpcmUoXCIuLi9vYnNlcnZhYmxlL2lubmVyRnJvbVwiKTtcbmZ1bmN0aW9uIGRlYm91bmNlKGR1cmF0aW9uU2VsZWN0b3IpIHtcbiAgICByZXR1cm4gbGlmdF8xLm9wZXJhdGUoZnVuY3Rpb24gKHNvdXJjZSwgc3Vic2NyaWJlcikge1xuICAgICAgICB2YXIgaGFzVmFsdWUgPSBmYWxzZTtcbiAgICAgICAgdmFyIGxhc3RWYWx1ZSA9IG51bGw7XG4gICAgICAgIHZhciBkdXJhdGlvblN1YnNjcmliZXIgPSBudWxsO1xuICAgICAgICB2YXIgZW1pdCA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIGR1cmF0aW9uU3Vic2NyaWJlciA9PT0gbnVsbCB8fCBkdXJhdGlvblN1YnNjcmliZXIgPT09IHZvaWQgMCA/IHZvaWQgMCA6IGR1cmF0aW9uU3Vic2NyaWJlci51bnN1YnNjcmliZSgpO1xuICAgICAgICAgICAgZHVyYXRpb25TdWJzY3JpYmVyID0gbnVsbDtcbiAgICAgICAgICAgIGlmIChoYXNWYWx1ZSkge1xuICAgICAgICAgICAgICAgIGhhc1ZhbHVlID0gZmFsc2U7XG4gICAgICAgICAgICAgICAgdmFyIHZhbHVlID0gbGFzdFZhbHVlO1xuICAgICAgICAgICAgICAgIGxhc3RWYWx1ZSA9IG51bGw7XG4gICAgICAgICAgICAgICAgc3Vic2NyaWJlci5uZXh0KHZhbHVlKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfTtcbiAgICAgICAgc291cmNlLnN1YnNjcmliZShPcGVyYXRvclN1YnNjcmliZXJfMS5jcmVhdGVPcGVyYXRvclN1YnNjcmliZXIoc3Vic2NyaWJlciwgZnVuY3Rpb24gKHZhbHVlKSB7XG4gICAgICAgICAgICBkdXJhdGlvblN1YnNjcmliZXIgPT09IG51bGwgfHwgZHVyYXRpb25TdWJzY3JpYmVyID09PSB2b2lkIDAgPyB2b2lkIDAgOiBkdXJhdGlvblN1YnNjcmliZXIudW5zdWJzY3JpYmUoKTtcbiAgICAgICAgICAgIGhhc1ZhbHVlID0gdHJ1ZTtcbiAgICAgICAgICAgIGxhc3RWYWx1ZSA9IHZhbHVlO1xuICAgICAgICAgICAgZHVyYXRpb25TdWJzY3JpYmVyID0gT3BlcmF0b3JTdWJzY3JpYmVyXzEuY3JlYXRlT3BlcmF0b3JTdWJzY3JpYmVyKHN1YnNjcmliZXIsIGVtaXQsIG5vb3BfMS5ub29wKTtcbiAgICAgICAgICAgIGlubmVyRnJvbV8xLmlubmVyRnJvbShkdXJhdGlvblNlbGVjdG9yKHZhbHVlKSkuc3Vic2NyaWJlKGR1cmF0aW9uU3Vic2NyaWJlcik7XG4gICAgICAgIH0sIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIGVtaXQoKTtcbiAgICAgICAgICAgIHN1YnNjcmliZXIuY29tcGxldGUoKTtcbiAgICAgICAgfSwgdW5kZWZpbmVkLCBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICBsYXN0VmFsdWUgPSBkdXJhdGlvblN1YnNjcmliZXIgPSBudWxsO1xuICAgICAgICB9KSk7XG4gICAgfSk7XG59XG5leHBvcnRzLmRlYm91bmNlID0gZGVib3VuY2U7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1kZWJvdW5jZS5qcy5tYXAiLCJcInVzZSBzdHJpY3RcIjtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmV4cG9ydHMuZGVib3VuY2VUaW1lID0gdm9pZCAwO1xudmFyIGFzeW5jXzEgPSByZXF1aXJlKFwiLi4vc2NoZWR1bGVyL2FzeW5jXCIpO1xudmFyIGxpZnRfMSA9IHJlcXVpcmUoXCIuLi91dGlsL2xpZnRcIik7XG52YXIgT3BlcmF0b3JTdWJzY3JpYmVyXzEgPSByZXF1aXJlKFwiLi9PcGVyYXRvclN1YnNjcmliZXJcIik7XG5mdW5jdGlvbiBkZWJvdW5jZVRpbWUoZHVlVGltZSwgc2NoZWR1bGVyKSB7XG4gICAgaWYgKHNjaGVkdWxlciA9PT0gdm9pZCAwKSB7IHNjaGVkdWxlciA9IGFzeW5jXzEuYXN5bmNTY2hlZHVsZXI7IH1cbiAgICByZXR1cm4gbGlmdF8xLm9wZXJhdGUoZnVuY3Rpb24gKHNvdXJjZSwgc3Vic2NyaWJlcikge1xuICAgICAgICB2YXIgYWN0aXZlVGFzayA9IG51bGw7XG4gICAgICAgIHZhciBsYXN0VmFsdWUgPSBudWxsO1xuICAgICAgICB2YXIgbGFzdFRpbWUgPSBudWxsO1xuICAgICAgICB2YXIgZW1pdCA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIGlmIChhY3RpdmVUYXNrKSB7XG4gICAgICAgICAgICAgICAgYWN0aXZlVGFzay51bnN1YnNjcmliZSgpO1xuICAgICAgICAgICAgICAgIGFjdGl2ZVRhc2sgPSBudWxsO1xuICAgICAgICAgICAgICAgIHZhciB2YWx1ZSA9IGxhc3RWYWx1ZTtcbiAgICAgICAgICAgICAgICBsYXN0VmFsdWUgPSBudWxsO1xuICAgICAgICAgICAgICAgIHN1YnNjcmliZXIubmV4dCh2YWx1ZSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH07XG4gICAgICAgIGZ1bmN0aW9uIGVtaXRXaGVuSWRsZSgpIHtcbiAgICAgICAgICAgIHZhciB0YXJnZXRUaW1lID0gbGFzdFRpbWUgKyBkdWVUaW1lO1xuICAgICAgICAgICAgdmFyIG5vdyA9IHNjaGVkdWxlci5ub3coKTtcbiAgICAgICAgICAgIGlmIChub3cgPCB0YXJnZXRUaW1lKSB7XG4gICAgICAgICAgICAgICAgYWN0aXZlVGFzayA9IHRoaXMuc2NoZWR1bGUodW5kZWZpbmVkLCB0YXJnZXRUaW1lIC0gbm93KTtcbiAgICAgICAgICAgICAgICBzdWJzY3JpYmVyLmFkZChhY3RpdmVUYXNrKTtcbiAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbWl0KCk7XG4gICAgICAgIH1cbiAgICAgICAgc291cmNlLnN1YnNjcmliZShPcGVyYXRvclN1YnNjcmliZXJfMS5jcmVhdGVPcGVyYXRvclN1YnNjcmliZXIoc3Vic2NyaWJlciwgZnVuY3Rpb24gKHZhbHVlKSB7XG4gICAgICAgICAgICBsYXN0VmFsdWUgPSB2YWx1ZTtcbiAgICAgICAgICAgIGxhc3RUaW1lID0gc2NoZWR1bGVyLm5vdygpO1xuICAgICAgICAgICAgaWYgKCFhY3RpdmVUYXNrKSB7XG4gICAgICAgICAgICAgICAgYWN0aXZlVGFzayA9IHNjaGVkdWxlci5zY2hlZHVsZShlbWl0V2hlbklkbGUsIGR1ZVRpbWUpO1xuICAgICAgICAgICAgICAgIHN1YnNjcmliZXIuYWRkKGFjdGl2ZVRhc2spO1xuICAgICAgICAgICAgfVxuICAgICAgICB9LCBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICBlbWl0KCk7XG4gICAgICAgICAgICBzdWJzY3JpYmVyLmNvbXBsZXRlKCk7XG4gICAgICAgIH0sIHVuZGVmaW5lZCwgZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgbGFzdFZhbHVlID0gYWN0aXZlVGFzayA9IG51bGw7XG4gICAgICAgIH0pKTtcbiAgICB9KTtcbn1cbmV4cG9ydHMuZGVib3VuY2VUaW1lID0gZGVib3VuY2VUaW1lO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9ZGVib3VuY2VUaW1lLmpzLm1hcCIsIlwidXNlIHN0cmljdFwiO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuZXhwb3J0cy5kZWZhdWx0SWZFbXB0eSA9IHZvaWQgMDtcbnZhciBsaWZ0XzEgPSByZXF1aXJlKFwiLi4vdXRpbC9saWZ0XCIpO1xudmFyIE9wZXJhdG9yU3Vic2NyaWJlcl8xID0gcmVxdWlyZShcIi4vT3BlcmF0b3JTdWJzY3JpYmVyXCIpO1xuZnVuY3Rpb24gZGVmYXVsdElmRW1wdHkoZGVmYXVsdFZhbHVlKSB7XG4gICAgcmV0dXJuIGxpZnRfMS5vcGVyYXRlKGZ1bmN0aW9uIChzb3VyY2UsIHN1YnNjcmliZXIpIHtcbiAgICAgICAgdmFyIGhhc1ZhbHVlID0gZmFsc2U7XG4gICAgICAgIHNvdXJjZS5zdWJzY3JpYmUoT3BlcmF0b3JTdWJzY3JpYmVyXzEuY3JlYXRlT3BlcmF0b3JTdWJzY3JpYmVyKHN1YnNjcmliZXIsIGZ1bmN0aW9uICh2YWx1ZSkge1xuICAgICAgICAgICAgaGFzVmFsdWUgPSB0cnVlO1xuICAgICAgICAgICAgc3Vic2NyaWJlci5uZXh0KHZhbHVlKTtcbiAgICAgICAgfSwgZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgaWYgKCFoYXNWYWx1ZSkge1xuICAgICAgICAgICAgICAgIHN1YnNjcmliZXIubmV4dChkZWZhdWx0VmFsdWUpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgc3Vic2NyaWJlci5jb21wbGV0ZSgpO1xuICAgICAgICB9KSk7XG4gICAgfSk7XG59XG5leHBvcnRzLmRlZmF1bHRJZkVtcHR5ID0gZGVmYXVsdElmRW1wdHk7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1kZWZhdWx0SWZFbXB0eS5qcy5tYXAiLCJcInVzZSBzdHJpY3RcIjtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmV4cG9ydHMuZGVsYXkgPSB2b2lkIDA7XG52YXIgYXN5bmNfMSA9IHJlcXVpcmUoXCIuLi9zY2hlZHVsZXIvYXN5bmNcIik7XG52YXIgZGVsYXlXaGVuXzEgPSByZXF1aXJlKFwiLi9kZWxheVdoZW5cIik7XG52YXIgdGltZXJfMSA9IHJlcXVpcmUoXCIuLi9vYnNlcnZhYmxlL3RpbWVyXCIpO1xuZnVuY3Rpb24gZGVsYXkoZHVlLCBzY2hlZHVsZXIpIHtcbiAgICBpZiAoc2NoZWR1bGVyID09PSB2b2lkIDApIHsgc2NoZWR1bGVyID0gYXN5bmNfMS5hc3luY1NjaGVkdWxlcjsgfVxuICAgIHZhciBkdXJhdGlvbiA9IHRpbWVyXzEudGltZXIoZHVlLCBzY2hlZHVsZXIpO1xuICAgIHJldHVybiBkZWxheVdoZW5fMS5kZWxheVdoZW4oZnVuY3Rpb24gKCkgeyByZXR1cm4gZHVyYXRpb247IH0pO1xufVxuZXhwb3J0cy5kZWxheSA9IGRlbGF5O1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9ZGVsYXkuanMubWFwIiwiXCJ1c2Ugc3RyaWN0XCI7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5leHBvcnRzLmRlbGF5V2hlbiA9IHZvaWQgMDtcbnZhciBjb25jYXRfMSA9IHJlcXVpcmUoXCIuLi9vYnNlcnZhYmxlL2NvbmNhdFwiKTtcbnZhciB0YWtlXzEgPSByZXF1aXJlKFwiLi90YWtlXCIpO1xudmFyIGlnbm9yZUVsZW1lbnRzXzEgPSByZXF1aXJlKFwiLi9pZ25vcmVFbGVtZW50c1wiKTtcbnZhciBtYXBUb18xID0gcmVxdWlyZShcIi4vbWFwVG9cIik7XG52YXIgbWVyZ2VNYXBfMSA9IHJlcXVpcmUoXCIuL21lcmdlTWFwXCIpO1xudmFyIGlubmVyRnJvbV8xID0gcmVxdWlyZShcIi4uL29ic2VydmFibGUvaW5uZXJGcm9tXCIpO1xuZnVuY3Rpb24gZGVsYXlXaGVuKGRlbGF5RHVyYXRpb25TZWxlY3Rvciwgc3Vic2NyaXB0aW9uRGVsYXkpIHtcbiAgICBpZiAoc3Vic2NyaXB0aW9uRGVsYXkpIHtcbiAgICAgICAgcmV0dXJuIGZ1bmN0aW9uIChzb3VyY2UpIHtcbiAgICAgICAgICAgIHJldHVybiBjb25jYXRfMS5jb25jYXQoc3Vic2NyaXB0aW9uRGVsYXkucGlwZSh0YWtlXzEudGFrZSgxKSwgaWdub3JlRWxlbWVudHNfMS5pZ25vcmVFbGVtZW50cygpKSwgc291cmNlLnBpcGUoZGVsYXlXaGVuKGRlbGF5RHVyYXRpb25TZWxlY3RvcikpKTtcbiAgICAgICAgfTtcbiAgICB9XG4gICAgcmV0dXJuIG1lcmdlTWFwXzEubWVyZ2VNYXAoZnVuY3Rpb24gKHZhbHVlLCBpbmRleCkgeyByZXR1cm4gaW5uZXJGcm9tXzEuaW5uZXJGcm9tKGRlbGF5RHVyYXRpb25TZWxlY3Rvcih2YWx1ZSwgaW5kZXgpKS5waXBlKHRha2VfMS50YWtlKDEpLCBtYXBUb18xLm1hcFRvKHZhbHVlKSk7IH0pO1xufVxuZXhwb3J0cy5kZWxheVdoZW4gPSBkZWxheVdoZW47XG4vLyMgc291cmNlTWFwcGluZ1VSTD1kZWxheVdoZW4uanMubWFwIiwiXCJ1c2Ugc3RyaWN0XCI7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5leHBvcnRzLmRlbWF0ZXJpYWxpemUgPSB2b2lkIDA7XG52YXIgTm90aWZpY2F0aW9uXzEgPSByZXF1aXJlKFwiLi4vTm90aWZpY2F0aW9uXCIpO1xudmFyIGxpZnRfMSA9IHJlcXVpcmUoXCIuLi91dGlsL2xpZnRcIik7XG52YXIgT3BlcmF0b3JTdWJzY3JpYmVyXzEgPSByZXF1aXJlKFwiLi9PcGVyYXRvclN1YnNjcmliZXJcIik7XG5mdW5jdGlvbiBkZW1hdGVyaWFsaXplKCkge1xuICAgIHJldHVybiBsaWZ0XzEub3BlcmF0ZShmdW5jdGlvbiAoc291cmNlLCBzdWJzY3JpYmVyKSB7XG4gICAgICAgIHNvdXJjZS5zdWJzY3JpYmUoT3BlcmF0b3JTdWJzY3JpYmVyXzEuY3JlYXRlT3BlcmF0b3JTdWJzY3JpYmVyKHN1YnNjcmliZXIsIGZ1bmN0aW9uIChub3RpZmljYXRpb24pIHsgcmV0dXJuIE5vdGlmaWNhdGlvbl8xLm9ic2VydmVOb3RpZmljYXRpb24obm90aWZpY2F0aW9uLCBzdWJzY3JpYmVyKTsgfSkpO1xuICAgIH0pO1xufVxuZXhwb3J0cy5kZW1hdGVyaWFsaXplID0gZGVtYXRlcmlhbGl6ZTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWRlbWF0ZXJpYWxpemUuanMubWFwIiwiXCJ1c2Ugc3RyaWN0XCI7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5leHBvcnRzLmRpc3RpbmN0ID0gdm9pZCAwO1xudmFyIGxpZnRfMSA9IHJlcXVpcmUoXCIuLi91dGlsL2xpZnRcIik7XG52YXIgT3BlcmF0b3JTdWJzY3JpYmVyXzEgPSByZXF1aXJlKFwiLi9PcGVyYXRvclN1YnNjcmliZXJcIik7XG52YXIgbm9vcF8xID0gcmVxdWlyZShcIi4uL3V0aWwvbm9vcFwiKTtcbnZhciBpbm5lckZyb21fMSA9IHJlcXVpcmUoXCIuLi9vYnNlcnZhYmxlL2lubmVyRnJvbVwiKTtcbmZ1bmN0aW9uIGRpc3RpbmN0KGtleVNlbGVjdG9yLCBmbHVzaGVzKSB7XG4gICAgcmV0dXJuIGxpZnRfMS5vcGVyYXRlKGZ1bmN0aW9uIChzb3VyY2UsIHN1YnNjcmliZXIpIHtcbiAgICAgICAgdmFyIGRpc3RpbmN0S2V5cyA9IG5ldyBTZXQoKTtcbiAgICAgICAgc291cmNlLnN1YnNjcmliZShPcGVyYXRvclN1YnNjcmliZXJfMS5jcmVhdGVPcGVyYXRvclN1YnNjcmliZXIoc3Vic2NyaWJlciwgZnVuY3Rpb24gKHZhbHVlKSB7XG4gICAgICAgICAgICB2YXIga2V5ID0ga2V5U2VsZWN0b3IgPyBrZXlTZWxlY3Rvcih2YWx1ZSkgOiB2YWx1ZTtcbiAgICAgICAgICAgIGlmICghZGlzdGluY3RLZXlzLmhhcyhrZXkpKSB7XG4gICAgICAgICAgICAgICAgZGlzdGluY3RLZXlzLmFkZChrZXkpO1xuICAgICAgICAgICAgICAgIHN1YnNjcmliZXIubmV4dCh2YWx1ZSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0pKTtcbiAgICAgICAgZmx1c2hlcyAmJiBpbm5lckZyb21fMS5pbm5lckZyb20oZmx1c2hlcykuc3Vic2NyaWJlKE9wZXJhdG9yU3Vic2NyaWJlcl8xLmNyZWF0ZU9wZXJhdG9yU3Vic2NyaWJlcihzdWJzY3JpYmVyLCBmdW5jdGlvbiAoKSB7IHJldHVybiBkaXN0aW5jdEtleXMuY2xlYXIoKTsgfSwgbm9vcF8xLm5vb3ApKTtcbiAgICB9KTtcbn1cbmV4cG9ydHMuZGlzdGluY3QgPSBkaXN0aW5jdDtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWRpc3RpbmN0LmpzLm1hcCIsIlwidXNlIHN0cmljdFwiO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuZXhwb3J0cy5kaXN0aW5jdFVudGlsQ2hhbmdlZCA9IHZvaWQgMDtcbnZhciBpZGVudGl0eV8xID0gcmVxdWlyZShcIi4uL3V0aWwvaWRlbnRpdHlcIik7XG52YXIgbGlmdF8xID0gcmVxdWlyZShcIi4uL3V0aWwvbGlmdFwiKTtcbnZhciBPcGVyYXRvclN1YnNjcmliZXJfMSA9IHJlcXVpcmUoXCIuL09wZXJhdG9yU3Vic2NyaWJlclwiKTtcbmZ1bmN0aW9uIGRpc3RpbmN0VW50aWxDaGFuZ2VkKGNvbXBhcmF0b3IsIGtleVNlbGVjdG9yKSB7XG4gICAgaWYgKGtleVNlbGVjdG9yID09PSB2b2lkIDApIHsga2V5U2VsZWN0b3IgPSBpZGVudGl0eV8xLmlkZW50aXR5OyB9XG4gICAgY29tcGFyYXRvciA9IGNvbXBhcmF0b3IgIT09IG51bGwgJiYgY29tcGFyYXRvciAhPT0gdm9pZCAwID8gY29tcGFyYXRvciA6IGRlZmF1bHRDb21wYXJlO1xuICAgIHJldHVybiBsaWZ0XzEub3BlcmF0ZShmdW5jdGlvbiAoc291cmNlLCBzdWJzY3JpYmVyKSB7XG4gICAgICAgIHZhciBwcmV2aW91c0tleTtcbiAgICAgICAgdmFyIGZpcnN0ID0gdHJ1ZTtcbiAgICAgICAgc291cmNlLnN1YnNjcmliZShPcGVyYXRvclN1YnNjcmliZXJfMS5jcmVhdGVPcGVyYXRvclN1YnNjcmliZXIoc3Vic2NyaWJlciwgZnVuY3Rpb24gKHZhbHVlKSB7XG4gICAgICAgICAgICB2YXIgY3VycmVudEtleSA9IGtleVNlbGVjdG9yKHZhbHVlKTtcbiAgICAgICAgICAgIGlmIChmaXJzdCB8fCAhY29tcGFyYXRvcihwcmV2aW91c0tleSwgY3VycmVudEtleSkpIHtcbiAgICAgICAgICAgICAgICBmaXJzdCA9IGZhbHNlO1xuICAgICAgICAgICAgICAgIHByZXZpb3VzS2V5ID0gY3VycmVudEtleTtcbiAgICAgICAgICAgICAgICBzdWJzY3JpYmVyLm5leHQodmFsdWUpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9KSk7XG4gICAgfSk7XG59XG5leHBvcnRzLmRpc3RpbmN0VW50aWxDaGFuZ2VkID0gZGlzdGluY3RVbnRpbENoYW5nZWQ7XG5mdW5jdGlvbiBkZWZhdWx0Q29tcGFyZShhLCBiKSB7XG4gICAgcmV0dXJuIGEgPT09IGI7XG59XG4vLyMgc291cmNlTWFwcGluZ1VSTD1kaXN0aW5jdFVudGlsQ2hhbmdlZC5qcy5tYXAiLCJcInVzZSBzdHJpY3RcIjtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmV4cG9ydHMuZGlzdGluY3RVbnRpbEtleUNoYW5nZWQgPSB2b2lkIDA7XG52YXIgZGlzdGluY3RVbnRpbENoYW5nZWRfMSA9IHJlcXVpcmUoXCIuL2Rpc3RpbmN0VW50aWxDaGFuZ2VkXCIpO1xuZnVuY3Rpb24gZGlzdGluY3RVbnRpbEtleUNoYW5nZWQoa2V5LCBjb21wYXJlKSB7XG4gICAgcmV0dXJuIGRpc3RpbmN0VW50aWxDaGFuZ2VkXzEuZGlzdGluY3RVbnRpbENoYW5nZWQoZnVuY3Rpb24gKHgsIHkpIHsgcmV0dXJuIGNvbXBhcmUgPyBjb21wYXJlKHhba2V5XSwgeVtrZXldKSA6IHhba2V5XSA9PT0geVtrZXldOyB9KTtcbn1cbmV4cG9ydHMuZGlzdGluY3RVbnRpbEtleUNoYW5nZWQgPSBkaXN0aW5jdFVudGlsS2V5Q2hhbmdlZDtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWRpc3RpbmN0VW50aWxLZXlDaGFuZ2VkLmpzLm1hcCIsIlwidXNlIHN0cmljdFwiO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuZXhwb3J0cy5lbGVtZW50QXQgPSB2b2lkIDA7XG52YXIgQXJndW1lbnRPdXRPZlJhbmdlRXJyb3JfMSA9IHJlcXVpcmUoXCIuLi91dGlsL0FyZ3VtZW50T3V0T2ZSYW5nZUVycm9yXCIpO1xudmFyIGZpbHRlcl8xID0gcmVxdWlyZShcIi4vZmlsdGVyXCIpO1xudmFyIHRocm93SWZFbXB0eV8xID0gcmVxdWlyZShcIi4vdGhyb3dJZkVtcHR5XCIpO1xudmFyIGRlZmF1bHRJZkVtcHR5XzEgPSByZXF1aXJlKFwiLi9kZWZhdWx0SWZFbXB0eVwiKTtcbnZhciB0YWtlXzEgPSByZXF1aXJlKFwiLi90YWtlXCIpO1xuZnVuY3Rpb24gZWxlbWVudEF0KGluZGV4LCBkZWZhdWx0VmFsdWUpIHtcbiAgICBpZiAoaW5kZXggPCAwKSB7XG4gICAgICAgIHRocm93IG5ldyBBcmd1bWVudE91dE9mUmFuZ2VFcnJvcl8xLkFyZ3VtZW50T3V0T2ZSYW5nZUVycm9yKCk7XG4gICAgfVxuICAgIHZhciBoYXNEZWZhdWx0VmFsdWUgPSBhcmd1bWVudHMubGVuZ3RoID49IDI7XG4gICAgcmV0dXJuIGZ1bmN0aW9uIChzb3VyY2UpIHtcbiAgICAgICAgcmV0dXJuIHNvdXJjZS5waXBlKGZpbHRlcl8xLmZpbHRlcihmdW5jdGlvbiAodiwgaSkgeyByZXR1cm4gaSA9PT0gaW5kZXg7IH0pLCB0YWtlXzEudGFrZSgxKSwgaGFzRGVmYXVsdFZhbHVlID8gZGVmYXVsdElmRW1wdHlfMS5kZWZhdWx0SWZFbXB0eShkZWZhdWx0VmFsdWUpIDogdGhyb3dJZkVtcHR5XzEudGhyb3dJZkVtcHR5KGZ1bmN0aW9uICgpIHsgcmV0dXJuIG5ldyBBcmd1bWVudE91dE9mUmFuZ2VFcnJvcl8xLkFyZ3VtZW50T3V0T2ZSYW5nZUVycm9yKCk7IH0pKTtcbiAgICB9O1xufVxuZXhwb3J0cy5lbGVtZW50QXQgPSBlbGVtZW50QXQ7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1lbGVtZW50QXQuanMubWFwIiwiXCJ1c2Ugc3RyaWN0XCI7XG52YXIgX19yZWFkID0gKHRoaXMgJiYgdGhpcy5fX3JlYWQpIHx8IGZ1bmN0aW9uIChvLCBuKSB7XG4gICAgdmFyIG0gPSB0eXBlb2YgU3ltYm9sID09PSBcImZ1bmN0aW9uXCIgJiYgb1tTeW1ib2wuaXRlcmF0b3JdO1xuICAgIGlmICghbSkgcmV0dXJuIG87XG4gICAgdmFyIGkgPSBtLmNhbGwobyksIHIsIGFyID0gW10sIGU7XG4gICAgdHJ5IHtcbiAgICAgICAgd2hpbGUgKChuID09PSB2b2lkIDAgfHwgbi0tID4gMCkgJiYgIShyID0gaS5uZXh0KCkpLmRvbmUpIGFyLnB1c2goci52YWx1ZSk7XG4gICAgfVxuICAgIGNhdGNoIChlcnJvcikgeyBlID0geyBlcnJvcjogZXJyb3IgfTsgfVxuICAgIGZpbmFsbHkge1xuICAgICAgICB0cnkge1xuICAgICAgICAgICAgaWYgKHIgJiYgIXIuZG9uZSAmJiAobSA9IGlbXCJyZXR1cm5cIl0pKSBtLmNhbGwoaSk7XG4gICAgICAgIH1cbiAgICAgICAgZmluYWxseSB7IGlmIChlKSB0aHJvdyBlLmVycm9yOyB9XG4gICAgfVxuICAgIHJldHVybiBhcjtcbn07XG52YXIgX19zcHJlYWRBcnJheSA9ICh0aGlzICYmIHRoaXMuX19zcHJlYWRBcnJheSkgfHwgZnVuY3Rpb24gKHRvLCBmcm9tKSB7XG4gICAgZm9yICh2YXIgaSA9IDAsIGlsID0gZnJvbS5sZW5ndGgsIGogPSB0by5sZW5ndGg7IGkgPCBpbDsgaSsrLCBqKyspXG4gICAgICAgIHRvW2pdID0gZnJvbVtpXTtcbiAgICByZXR1cm4gdG87XG59O1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuZXhwb3J0cy5lbmRXaXRoID0gdm9pZCAwO1xudmFyIGNvbmNhdF8xID0gcmVxdWlyZShcIi4uL29ic2VydmFibGUvY29uY2F0XCIpO1xudmFyIG9mXzEgPSByZXF1aXJlKFwiLi4vb2JzZXJ2YWJsZS9vZlwiKTtcbmZ1bmN0aW9uIGVuZFdpdGgoKSB7XG4gICAgdmFyIHZhbHVlcyA9IFtdO1xuICAgIGZvciAodmFyIF9pID0gMDsgX2kgPCBhcmd1bWVudHMubGVuZ3RoOyBfaSsrKSB7XG4gICAgICAgIHZhbHVlc1tfaV0gPSBhcmd1bWVudHNbX2ldO1xuICAgIH1cbiAgICByZXR1cm4gZnVuY3Rpb24gKHNvdXJjZSkgeyByZXR1cm4gY29uY2F0XzEuY29uY2F0KHNvdXJjZSwgb2ZfMS5vZi5hcHBseSh2b2lkIDAsIF9fc3ByZWFkQXJyYXkoW10sIF9fcmVhZCh2YWx1ZXMpKSkpOyB9O1xufVxuZXhwb3J0cy5lbmRXaXRoID0gZW5kV2l0aDtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWVuZFdpdGguanMubWFwIiwiXCJ1c2Ugc3RyaWN0XCI7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5leHBvcnRzLmV2ZXJ5ID0gdm9pZCAwO1xudmFyIGxpZnRfMSA9IHJlcXVpcmUoXCIuLi91dGlsL2xpZnRcIik7XG52YXIgT3BlcmF0b3JTdWJzY3JpYmVyXzEgPSByZXF1aXJlKFwiLi9PcGVyYXRvclN1YnNjcmliZXJcIik7XG5mdW5jdGlvbiBldmVyeShwcmVkaWNhdGUsIHRoaXNBcmcpIHtcbiAgICByZXR1cm4gbGlmdF8xLm9wZXJhdGUoZnVuY3Rpb24gKHNvdXJjZSwgc3Vic2NyaWJlcikge1xuICAgICAgICB2YXIgaW5kZXggPSAwO1xuICAgICAgICBzb3VyY2Uuc3Vic2NyaWJlKE9wZXJhdG9yU3Vic2NyaWJlcl8xLmNyZWF0ZU9wZXJhdG9yU3Vic2NyaWJlcihzdWJzY3JpYmVyLCBmdW5jdGlvbiAodmFsdWUpIHtcbiAgICAgICAgICAgIGlmICghcHJlZGljYXRlLmNhbGwodGhpc0FyZywgdmFsdWUsIGluZGV4KyssIHNvdXJjZSkpIHtcbiAgICAgICAgICAgICAgICBzdWJzY3JpYmVyLm5leHQoZmFsc2UpO1xuICAgICAgICAgICAgICAgIHN1YnNjcmliZXIuY29tcGxldGUoKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSwgZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgc3Vic2NyaWJlci5uZXh0KHRydWUpO1xuICAgICAgICAgICAgc3Vic2NyaWJlci5jb21wbGV0ZSgpO1xuICAgICAgICB9KSk7XG4gICAgfSk7XG59XG5leHBvcnRzLmV2ZXJ5ID0gZXZlcnk7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1ldmVyeS5qcy5tYXAiLCJcInVzZSBzdHJpY3RcIjtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmV4cG9ydHMuZXhoYXVzdCA9IHZvaWQgMDtcbnZhciBleGhhdXN0QWxsXzEgPSByZXF1aXJlKFwiLi9leGhhdXN0QWxsXCIpO1xuZXhwb3J0cy5leGhhdXN0ID0gZXhoYXVzdEFsbF8xLmV4aGF1c3RBbGw7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1leGhhdXN0LmpzLm1hcCIsIlwidXNlIHN0cmljdFwiO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuZXhwb3J0cy5leGhhdXN0QWxsID0gdm9pZCAwO1xudmFyIGV4aGF1c3RNYXBfMSA9IHJlcXVpcmUoXCIuL2V4aGF1c3RNYXBcIik7XG52YXIgaWRlbnRpdHlfMSA9IHJlcXVpcmUoXCIuLi91dGlsL2lkZW50aXR5XCIpO1xuZnVuY3Rpb24gZXhoYXVzdEFsbCgpIHtcbiAgICByZXR1cm4gZXhoYXVzdE1hcF8xLmV4aGF1c3RNYXAoaWRlbnRpdHlfMS5pZGVudGl0eSk7XG59XG5leHBvcnRzLmV4aGF1c3RBbGwgPSBleGhhdXN0QWxsO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9ZXhoYXVzdEFsbC5qcy5tYXAiLCJcInVzZSBzdHJpY3RcIjtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmV4cG9ydHMuZXhoYXVzdE1hcCA9IHZvaWQgMDtcbnZhciBtYXBfMSA9IHJlcXVpcmUoXCIuL21hcFwiKTtcbnZhciBpbm5lckZyb21fMSA9IHJlcXVpcmUoXCIuLi9vYnNlcnZhYmxlL2lubmVyRnJvbVwiKTtcbnZhciBsaWZ0XzEgPSByZXF1aXJlKFwiLi4vdXRpbC9saWZ0XCIpO1xudmFyIE9wZXJhdG9yU3Vic2NyaWJlcl8xID0gcmVxdWlyZShcIi4vT3BlcmF0b3JTdWJzY3JpYmVyXCIpO1xuZnVuY3Rpb24gZXhoYXVzdE1hcChwcm9qZWN0LCByZXN1bHRTZWxlY3Rvcikge1xuICAgIGlmIChyZXN1bHRTZWxlY3Rvcikge1xuICAgICAgICByZXR1cm4gZnVuY3Rpb24gKHNvdXJjZSkge1xuICAgICAgICAgICAgcmV0dXJuIHNvdXJjZS5waXBlKGV4aGF1c3RNYXAoZnVuY3Rpb24gKGEsIGkpIHsgcmV0dXJuIGlubmVyRnJvbV8xLmlubmVyRnJvbShwcm9qZWN0KGEsIGkpKS5waXBlKG1hcF8xLm1hcChmdW5jdGlvbiAoYiwgaWkpIHsgcmV0dXJuIHJlc3VsdFNlbGVjdG9yKGEsIGIsIGksIGlpKTsgfSkpOyB9KSk7XG4gICAgICAgIH07XG4gICAgfVxuICAgIHJldHVybiBsaWZ0XzEub3BlcmF0ZShmdW5jdGlvbiAoc291cmNlLCBzdWJzY3JpYmVyKSB7XG4gICAgICAgIHZhciBpbmRleCA9IDA7XG4gICAgICAgIHZhciBpbm5lclN1YiA9IG51bGw7XG4gICAgICAgIHZhciBpc0NvbXBsZXRlID0gZmFsc2U7XG4gICAgICAgIHNvdXJjZS5zdWJzY3JpYmUoT3BlcmF0b3JTdWJzY3JpYmVyXzEuY3JlYXRlT3BlcmF0b3JTdWJzY3JpYmVyKHN1YnNjcmliZXIsIGZ1bmN0aW9uIChvdXRlclZhbHVlKSB7XG4gICAgICAgICAgICBpZiAoIWlubmVyU3ViKSB7XG4gICAgICAgICAgICAgICAgaW5uZXJTdWIgPSBPcGVyYXRvclN1YnNjcmliZXJfMS5jcmVhdGVPcGVyYXRvclN1YnNjcmliZXIoc3Vic2NyaWJlciwgdW5kZWZpbmVkLCBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgICAgIGlubmVyU3ViID0gbnVsbDtcbiAgICAgICAgICAgICAgICAgICAgaXNDb21wbGV0ZSAmJiBzdWJzY3JpYmVyLmNvbXBsZXRlKCk7XG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgaW5uZXJGcm9tXzEuaW5uZXJGcm9tKHByb2plY3Qob3V0ZXJWYWx1ZSwgaW5kZXgrKykpLnN1YnNjcmliZShpbm5lclN1Yik7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0sIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIGlzQ29tcGxldGUgPSB0cnVlO1xuICAgICAgICAgICAgIWlubmVyU3ViICYmIHN1YnNjcmliZXIuY29tcGxldGUoKTtcbiAgICAgICAgfSkpO1xuICAgIH0pO1xufVxuZXhwb3J0cy5leGhhdXN0TWFwID0gZXhoYXVzdE1hcDtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWV4aGF1c3RNYXAuanMubWFwIiwiXCJ1c2Ugc3RyaWN0XCI7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5leHBvcnRzLmV4cGFuZCA9IHZvaWQgMDtcbnZhciBsaWZ0XzEgPSByZXF1aXJlKFwiLi4vdXRpbC9saWZ0XCIpO1xudmFyIG1lcmdlSW50ZXJuYWxzXzEgPSByZXF1aXJlKFwiLi9tZXJnZUludGVybmFsc1wiKTtcbmZ1bmN0aW9uIGV4cGFuZChwcm9qZWN0LCBjb25jdXJyZW50LCBzY2hlZHVsZXIpIHtcbiAgICBpZiAoY29uY3VycmVudCA9PT0gdm9pZCAwKSB7IGNvbmN1cnJlbnQgPSBJbmZpbml0eTsgfVxuICAgIGNvbmN1cnJlbnQgPSAoY29uY3VycmVudCB8fCAwKSA8IDEgPyBJbmZpbml0eSA6IGNvbmN1cnJlbnQ7XG4gICAgcmV0dXJuIGxpZnRfMS5vcGVyYXRlKGZ1bmN0aW9uIChzb3VyY2UsIHN1YnNjcmliZXIpIHtcbiAgICAgICAgcmV0dXJuIG1lcmdlSW50ZXJuYWxzXzEubWVyZ2VJbnRlcm5hbHMoc291cmNlLCBzdWJzY3JpYmVyLCBwcm9qZWN0LCBjb25jdXJyZW50LCB1bmRlZmluZWQsIHRydWUsIHNjaGVkdWxlcik7XG4gICAgfSk7XG59XG5leHBvcnRzLmV4cGFuZCA9IGV4cGFuZDtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWV4cGFuZC5qcy5tYXAiLCJcInVzZSBzdHJpY3RcIjtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmV4cG9ydHMuZmlsdGVyID0gdm9pZCAwO1xudmFyIGxpZnRfMSA9IHJlcXVpcmUoXCIuLi91dGlsL2xpZnRcIik7XG52YXIgT3BlcmF0b3JTdWJzY3JpYmVyXzEgPSByZXF1aXJlKFwiLi9PcGVyYXRvclN1YnNjcmliZXJcIik7XG5mdW5jdGlvbiBmaWx0ZXIocHJlZGljYXRlLCB0aGlzQXJnKSB7XG4gICAgcmV0dXJuIGxpZnRfMS5vcGVyYXRlKGZ1bmN0aW9uIChzb3VyY2UsIHN1YnNjcmliZXIpIHtcbiAgICAgICAgdmFyIGluZGV4ID0gMDtcbiAgICAgICAgc291cmNlLnN1YnNjcmliZShPcGVyYXRvclN1YnNjcmliZXJfMS5jcmVhdGVPcGVyYXRvclN1YnNjcmliZXIoc3Vic2NyaWJlciwgZnVuY3Rpb24gKHZhbHVlKSB7IHJldHVybiBwcmVkaWNhdGUuY2FsbCh0aGlzQXJnLCB2YWx1ZSwgaW5kZXgrKykgJiYgc3Vic2NyaWJlci5uZXh0KHZhbHVlKTsgfSkpO1xuICAgIH0pO1xufVxuZXhwb3J0cy5maWx0ZXIgPSBmaWx0ZXI7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1maWx0ZXIuanMubWFwIiwiXCJ1c2Ugc3RyaWN0XCI7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5leHBvcnRzLmZpbmFsaXplID0gdm9pZCAwO1xudmFyIGxpZnRfMSA9IHJlcXVpcmUoXCIuLi91dGlsL2xpZnRcIik7XG5mdW5jdGlvbiBmaW5hbGl6ZShjYWxsYmFjaykge1xuICAgIHJldHVybiBsaWZ0XzEub3BlcmF0ZShmdW5jdGlvbiAoc291cmNlLCBzdWJzY3JpYmVyKSB7XG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgICBzb3VyY2Uuc3Vic2NyaWJlKHN1YnNjcmliZXIpO1xuICAgICAgICB9XG4gICAgICAgIGZpbmFsbHkge1xuICAgICAgICAgICAgc3Vic2NyaWJlci5hZGQoY2FsbGJhY2spO1xuICAgICAgICB9XG4gICAgfSk7XG59XG5leHBvcnRzLmZpbmFsaXplID0gZmluYWxpemU7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1maW5hbGl6ZS5qcy5tYXAiLCJcInVzZSBzdHJpY3RcIjtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmV4cG9ydHMuY3JlYXRlRmluZCA9IGV4cG9ydHMuZmluZCA9IHZvaWQgMDtcbnZhciBsaWZ0XzEgPSByZXF1aXJlKFwiLi4vdXRpbC9saWZ0XCIpO1xudmFyIE9wZXJhdG9yU3Vic2NyaWJlcl8xID0gcmVxdWlyZShcIi4vT3BlcmF0b3JTdWJzY3JpYmVyXCIpO1xuZnVuY3Rpb24gZmluZChwcmVkaWNhdGUsIHRoaXNBcmcpIHtcbiAgICByZXR1cm4gbGlmdF8xLm9wZXJhdGUoY3JlYXRlRmluZChwcmVkaWNhdGUsIHRoaXNBcmcsICd2YWx1ZScpKTtcbn1cbmV4cG9ydHMuZmluZCA9IGZpbmQ7XG5mdW5jdGlvbiBjcmVhdGVGaW5kKHByZWRpY2F0ZSwgdGhpc0FyZywgZW1pdCkge1xuICAgIHZhciBmaW5kSW5kZXggPSBlbWl0ID09PSAnaW5kZXgnO1xuICAgIHJldHVybiBmdW5jdGlvbiAoc291cmNlLCBzdWJzY3JpYmVyKSB7XG4gICAgICAgIHZhciBpbmRleCA9IDA7XG4gICAgICAgIHNvdXJjZS5zdWJzY3JpYmUoT3BlcmF0b3JTdWJzY3JpYmVyXzEuY3JlYXRlT3BlcmF0b3JTdWJzY3JpYmVyKHN1YnNjcmliZXIsIGZ1bmN0aW9uICh2YWx1ZSkge1xuICAgICAgICAgICAgdmFyIGkgPSBpbmRleCsrO1xuICAgICAgICAgICAgaWYgKHByZWRpY2F0ZS5jYWxsKHRoaXNBcmcsIHZhbHVlLCBpLCBzb3VyY2UpKSB7XG4gICAgICAgICAgICAgICAgc3Vic2NyaWJlci5uZXh0KGZpbmRJbmRleCA/IGkgOiB2YWx1ZSk7XG4gICAgICAgICAgICAgICAgc3Vic2NyaWJlci5jb21wbGV0ZSgpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9LCBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICBzdWJzY3JpYmVyLm5leHQoZmluZEluZGV4ID8gLTEgOiB1bmRlZmluZWQpO1xuICAgICAgICAgICAgc3Vic2NyaWJlci5jb21wbGV0ZSgpO1xuICAgICAgICB9KSk7XG4gICAgfTtcbn1cbmV4cG9ydHMuY3JlYXRlRmluZCA9IGNyZWF0ZUZpbmQ7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1maW5kLmpzLm1hcCIsIlwidXNlIHN0cmljdFwiO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuZXhwb3J0cy5maW5kSW5kZXggPSB2b2lkIDA7XG52YXIgbGlmdF8xID0gcmVxdWlyZShcIi4uL3V0aWwvbGlmdFwiKTtcbnZhciBmaW5kXzEgPSByZXF1aXJlKFwiLi9maW5kXCIpO1xuZnVuY3Rpb24gZmluZEluZGV4KHByZWRpY2F0ZSwgdGhpc0FyZykge1xuICAgIHJldHVybiBsaWZ0XzEub3BlcmF0ZShmaW5kXzEuY3JlYXRlRmluZChwcmVkaWNhdGUsIHRoaXNBcmcsICdpbmRleCcpKTtcbn1cbmV4cG9ydHMuZmluZEluZGV4ID0gZmluZEluZGV4O1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9ZmluZEluZGV4LmpzLm1hcCIsIlwidXNlIHN0cmljdFwiO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuZXhwb3J0cy5maXJzdCA9IHZvaWQgMDtcbnZhciBFbXB0eUVycm9yXzEgPSByZXF1aXJlKFwiLi4vdXRpbC9FbXB0eUVycm9yXCIpO1xudmFyIGZpbHRlcl8xID0gcmVxdWlyZShcIi4vZmlsdGVyXCIpO1xudmFyIHRha2VfMSA9IHJlcXVpcmUoXCIuL3Rha2VcIik7XG52YXIgZGVmYXVsdElmRW1wdHlfMSA9IHJlcXVpcmUoXCIuL2RlZmF1bHRJZkVtcHR5XCIpO1xudmFyIHRocm93SWZFbXB0eV8xID0gcmVxdWlyZShcIi4vdGhyb3dJZkVtcHR5XCIpO1xudmFyIGlkZW50aXR5XzEgPSByZXF1aXJlKFwiLi4vdXRpbC9pZGVudGl0eVwiKTtcbmZ1bmN0aW9uIGZpcnN0KHByZWRpY2F0ZSwgZGVmYXVsdFZhbHVlKSB7XG4gICAgdmFyIGhhc0RlZmF1bHRWYWx1ZSA9IGFyZ3VtZW50cy5sZW5ndGggPj0gMjtcbiAgICByZXR1cm4gZnVuY3Rpb24gKHNvdXJjZSkge1xuICAgICAgICByZXR1cm4gc291cmNlLnBpcGUocHJlZGljYXRlID8gZmlsdGVyXzEuZmlsdGVyKGZ1bmN0aW9uICh2LCBpKSB7IHJldHVybiBwcmVkaWNhdGUodiwgaSwgc291cmNlKTsgfSkgOiBpZGVudGl0eV8xLmlkZW50aXR5LCB0YWtlXzEudGFrZSgxKSwgaGFzRGVmYXVsdFZhbHVlID8gZGVmYXVsdElmRW1wdHlfMS5kZWZhdWx0SWZFbXB0eShkZWZhdWx0VmFsdWUpIDogdGhyb3dJZkVtcHR5XzEudGhyb3dJZkVtcHR5KGZ1bmN0aW9uICgpIHsgcmV0dXJuIG5ldyBFbXB0eUVycm9yXzEuRW1wdHlFcnJvcigpOyB9KSk7XG4gICAgfTtcbn1cbmV4cG9ydHMuZmlyc3QgPSBmaXJzdDtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWZpcnN0LmpzLm1hcCIsIlwidXNlIHN0cmljdFwiO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuZXhwb3J0cy5mbGF0TWFwID0gdm9pZCAwO1xudmFyIG1lcmdlTWFwXzEgPSByZXF1aXJlKFwiLi9tZXJnZU1hcFwiKTtcbmV4cG9ydHMuZmxhdE1hcCA9IG1lcmdlTWFwXzEubWVyZ2VNYXA7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1mbGF0TWFwLmpzLm1hcCIsIlwidXNlIHN0cmljdFwiO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuZXhwb3J0cy5ncm91cEJ5ID0gdm9pZCAwO1xudmFyIE9ic2VydmFibGVfMSA9IHJlcXVpcmUoXCIuLi9PYnNlcnZhYmxlXCIpO1xudmFyIGlubmVyRnJvbV8xID0gcmVxdWlyZShcIi4uL29ic2VydmFibGUvaW5uZXJGcm9tXCIpO1xudmFyIFN1YmplY3RfMSA9IHJlcXVpcmUoXCIuLi9TdWJqZWN0XCIpO1xudmFyIGxpZnRfMSA9IHJlcXVpcmUoXCIuLi91dGlsL2xpZnRcIik7XG52YXIgT3BlcmF0b3JTdWJzY3JpYmVyXzEgPSByZXF1aXJlKFwiLi9PcGVyYXRvclN1YnNjcmliZXJcIik7XG5mdW5jdGlvbiBncm91cEJ5KGtleVNlbGVjdG9yLCBlbGVtZW50T3JPcHRpb25zLCBkdXJhdGlvbiwgY29ubmVjdG9yKSB7XG4gICAgcmV0dXJuIGxpZnRfMS5vcGVyYXRlKGZ1bmN0aW9uIChzb3VyY2UsIHN1YnNjcmliZXIpIHtcbiAgICAgICAgdmFyIGVsZW1lbnQ7XG4gICAgICAgIGlmICghZWxlbWVudE9yT3B0aW9ucyB8fCB0eXBlb2YgZWxlbWVudE9yT3B0aW9ucyA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgICAgICAgZWxlbWVudCA9IGVsZW1lbnRPck9wdGlvbnM7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAoZHVyYXRpb24gPSBlbGVtZW50T3JPcHRpb25zLmR1cmF0aW9uLCBlbGVtZW50ID0gZWxlbWVudE9yT3B0aW9ucy5lbGVtZW50LCBjb25uZWN0b3IgPSBlbGVtZW50T3JPcHRpb25zLmNvbm5lY3Rvcik7XG4gICAgICAgIH1cbiAgICAgICAgdmFyIGdyb3VwcyA9IG5ldyBNYXAoKTtcbiAgICAgICAgdmFyIG5vdGlmeSA9IGZ1bmN0aW9uIChjYikge1xuICAgICAgICAgICAgZ3JvdXBzLmZvckVhY2goY2IpO1xuICAgICAgICAgICAgY2Ioc3Vic2NyaWJlcik7XG4gICAgICAgIH07XG4gICAgICAgIHZhciBoYW5kbGVFcnJvciA9IGZ1bmN0aW9uIChlcnIpIHsgcmV0dXJuIG5vdGlmeShmdW5jdGlvbiAoY29uc3VtZXIpIHsgcmV0dXJuIGNvbnN1bWVyLmVycm9yKGVycik7IH0pOyB9O1xuICAgICAgICB2YXIgYWN0aXZlR3JvdXBzID0gMDtcbiAgICAgICAgdmFyIHRlYXJkb3duQXR0ZW1wdGVkID0gZmFsc2U7XG4gICAgICAgIHZhciBncm91cEJ5U291cmNlU3Vic2NyaWJlciA9IG5ldyBPcGVyYXRvclN1YnNjcmliZXJfMS5PcGVyYXRvclN1YnNjcmliZXIoc3Vic2NyaWJlciwgZnVuY3Rpb24gKHZhbHVlKSB7XG4gICAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgICAgIHZhciBrZXlfMSA9IGtleVNlbGVjdG9yKHZhbHVlKTtcbiAgICAgICAgICAgICAgICB2YXIgZ3JvdXBfMSA9IGdyb3Vwcy5nZXQoa2V5XzEpO1xuICAgICAgICAgICAgICAgIGlmICghZ3JvdXBfMSkge1xuICAgICAgICAgICAgICAgICAgICBncm91cHMuc2V0KGtleV8xLCAoZ3JvdXBfMSA9IGNvbm5lY3RvciA/IGNvbm5lY3RvcigpIDogbmV3IFN1YmplY3RfMS5TdWJqZWN0KCkpKTtcbiAgICAgICAgICAgICAgICAgICAgdmFyIGdyb3VwZWQgPSBjcmVhdGVHcm91cGVkT2JzZXJ2YWJsZShrZXlfMSwgZ3JvdXBfMSk7XG4gICAgICAgICAgICAgICAgICAgIHN1YnNjcmliZXIubmV4dChncm91cGVkKTtcbiAgICAgICAgICAgICAgICAgICAgaWYgKGR1cmF0aW9uKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICB2YXIgZHVyYXRpb25TdWJzY3JpYmVyXzEgPSBPcGVyYXRvclN1YnNjcmliZXJfMS5jcmVhdGVPcGVyYXRvclN1YnNjcmliZXIoZ3JvdXBfMSwgZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGdyb3VwXzEuY29tcGxldGUoKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBkdXJhdGlvblN1YnNjcmliZXJfMSA9PT0gbnVsbCB8fCBkdXJhdGlvblN1YnNjcmliZXJfMSA9PT0gdm9pZCAwID8gdm9pZCAwIDogZHVyYXRpb25TdWJzY3JpYmVyXzEudW5zdWJzY3JpYmUoKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH0sIHVuZGVmaW5lZCwgdW5kZWZpbmVkLCBmdW5jdGlvbiAoKSB7IHJldHVybiBncm91cHMuZGVsZXRlKGtleV8xKTsgfSk7XG4gICAgICAgICAgICAgICAgICAgICAgICBncm91cEJ5U291cmNlU3Vic2NyaWJlci5hZGQoaW5uZXJGcm9tXzEuaW5uZXJGcm9tKGR1cmF0aW9uKGdyb3VwZWQpKS5zdWJzY3JpYmUoZHVyYXRpb25TdWJzY3JpYmVyXzEpKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBncm91cF8xLm5leHQoZWxlbWVudCA/IGVsZW1lbnQodmFsdWUpIDogdmFsdWUpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgY2F0Y2ggKGVycikge1xuICAgICAgICAgICAgICAgIGhhbmRsZUVycm9yKGVycik7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0sIGZ1bmN0aW9uICgpIHsgcmV0dXJuIG5vdGlmeShmdW5jdGlvbiAoY29uc3VtZXIpIHsgcmV0dXJuIGNvbnN1bWVyLmNvbXBsZXRlKCk7IH0pOyB9LCBoYW5kbGVFcnJvciwgZnVuY3Rpb24gKCkgeyByZXR1cm4gZ3JvdXBzLmNsZWFyKCk7IH0sIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIHRlYXJkb3duQXR0ZW1wdGVkID0gdHJ1ZTtcbiAgICAgICAgICAgIHJldHVybiBhY3RpdmVHcm91cHMgPT09IDA7XG4gICAgICAgIH0pO1xuICAgICAgICBzb3VyY2Uuc3Vic2NyaWJlKGdyb3VwQnlTb3VyY2VTdWJzY3JpYmVyKTtcbiAgICAgICAgZnVuY3Rpb24gY3JlYXRlR3JvdXBlZE9ic2VydmFibGUoa2V5LCBncm91cFN1YmplY3QpIHtcbiAgICAgICAgICAgIHZhciByZXN1bHQgPSBuZXcgT2JzZXJ2YWJsZV8xLk9ic2VydmFibGUoZnVuY3Rpb24gKGdyb3VwU3Vic2NyaWJlcikge1xuICAgICAgICAgICAgICAgIGFjdGl2ZUdyb3VwcysrO1xuICAgICAgICAgICAgICAgIHZhciBpbm5lclN1YiA9IGdyb3VwU3ViamVjdC5zdWJzY3JpYmUoZ3JvdXBTdWJzY3JpYmVyKTtcbiAgICAgICAgICAgICAgICByZXR1cm4gZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgICAgICBpbm5lclN1Yi51bnN1YnNjcmliZSgpO1xuICAgICAgICAgICAgICAgICAgICAtLWFjdGl2ZUdyb3VwcyA9PT0gMCAmJiB0ZWFyZG93bkF0dGVtcHRlZCAmJiBncm91cEJ5U291cmNlU3Vic2NyaWJlci51bnN1YnNjcmliZSgpO1xuICAgICAgICAgICAgICAgIH07XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIHJlc3VsdC5rZXkgPSBrZXk7XG4gICAgICAgICAgICByZXR1cm4gcmVzdWx0O1xuICAgICAgICB9XG4gICAgfSk7XG59XG5leHBvcnRzLmdyb3VwQnkgPSBncm91cEJ5O1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9Z3JvdXBCeS5qcy5tYXAiLCJcInVzZSBzdHJpY3RcIjtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmV4cG9ydHMuaWdub3JlRWxlbWVudHMgPSB2b2lkIDA7XG52YXIgbGlmdF8xID0gcmVxdWlyZShcIi4uL3V0aWwvbGlmdFwiKTtcbnZhciBPcGVyYXRvclN1YnNjcmliZXJfMSA9IHJlcXVpcmUoXCIuL09wZXJhdG9yU3Vic2NyaWJlclwiKTtcbnZhciBub29wXzEgPSByZXF1aXJlKFwiLi4vdXRpbC9ub29wXCIpO1xuZnVuY3Rpb24gaWdub3JlRWxlbWVudHMoKSB7XG4gICAgcmV0dXJuIGxpZnRfMS5vcGVyYXRlKGZ1bmN0aW9uIChzb3VyY2UsIHN1YnNjcmliZXIpIHtcbiAgICAgICAgc291cmNlLnN1YnNjcmliZShPcGVyYXRvclN1YnNjcmliZXJfMS5jcmVhdGVPcGVyYXRvclN1YnNjcmliZXIoc3Vic2NyaWJlciwgbm9vcF8xLm5vb3ApKTtcbiAgICB9KTtcbn1cbmV4cG9ydHMuaWdub3JlRWxlbWVudHMgPSBpZ25vcmVFbGVtZW50cztcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWlnbm9yZUVsZW1lbnRzLmpzLm1hcCIsIlwidXNlIHN0cmljdFwiO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuZXhwb3J0cy5pc0VtcHR5ID0gdm9pZCAwO1xudmFyIGxpZnRfMSA9IHJlcXVpcmUoXCIuLi91dGlsL2xpZnRcIik7XG52YXIgT3BlcmF0b3JTdWJzY3JpYmVyXzEgPSByZXF1aXJlKFwiLi9PcGVyYXRvclN1YnNjcmliZXJcIik7XG5mdW5jdGlvbiBpc0VtcHR5KCkge1xuICAgIHJldHVybiBsaWZ0XzEub3BlcmF0ZShmdW5jdGlvbiAoc291cmNlLCBzdWJzY3JpYmVyKSB7XG4gICAgICAgIHNvdXJjZS5zdWJzY3JpYmUoT3BlcmF0b3JTdWJzY3JpYmVyXzEuY3JlYXRlT3BlcmF0b3JTdWJzY3JpYmVyKHN1YnNjcmliZXIsIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIHN1YnNjcmliZXIubmV4dChmYWxzZSk7XG4gICAgICAgICAgICBzdWJzY3JpYmVyLmNvbXBsZXRlKCk7XG4gICAgICAgIH0sIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIHN1YnNjcmliZXIubmV4dCh0cnVlKTtcbiAgICAgICAgICAgIHN1YnNjcmliZXIuY29tcGxldGUoKTtcbiAgICAgICAgfSkpO1xuICAgIH0pO1xufVxuZXhwb3J0cy5pc0VtcHR5ID0gaXNFbXB0eTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWlzRW1wdHkuanMubWFwIiwiXCJ1c2Ugc3RyaWN0XCI7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5leHBvcnRzLmpvaW5BbGxJbnRlcm5hbHMgPSB2b2lkIDA7XG52YXIgaWRlbnRpdHlfMSA9IHJlcXVpcmUoXCIuLi91dGlsL2lkZW50aXR5XCIpO1xudmFyIG1hcE9uZU9yTWFueUFyZ3NfMSA9IHJlcXVpcmUoXCIuLi91dGlsL21hcE9uZU9yTWFueUFyZ3NcIik7XG52YXIgcGlwZV8xID0gcmVxdWlyZShcIi4uL3V0aWwvcGlwZVwiKTtcbnZhciBtZXJnZU1hcF8xID0gcmVxdWlyZShcIi4vbWVyZ2VNYXBcIik7XG52YXIgdG9BcnJheV8xID0gcmVxdWlyZShcIi4vdG9BcnJheVwiKTtcbmZ1bmN0aW9uIGpvaW5BbGxJbnRlcm5hbHMoam9pbkZuLCBwcm9qZWN0KSB7XG4gICAgcmV0dXJuIHBpcGVfMS5waXBlKHRvQXJyYXlfMS50b0FycmF5KCksIG1lcmdlTWFwXzEubWVyZ2VNYXAoZnVuY3Rpb24gKHNvdXJjZXMpIHsgcmV0dXJuIGpvaW5Gbihzb3VyY2VzKTsgfSksIHByb2plY3QgPyBtYXBPbmVPck1hbnlBcmdzXzEubWFwT25lT3JNYW55QXJncyhwcm9qZWN0KSA6IGlkZW50aXR5XzEuaWRlbnRpdHkpO1xufVxuZXhwb3J0cy5qb2luQWxsSW50ZXJuYWxzID0gam9pbkFsbEludGVybmFscztcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWpvaW5BbGxJbnRlcm5hbHMuanMubWFwIiwiXCJ1c2Ugc3RyaWN0XCI7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5leHBvcnRzLmxhc3QgPSB2b2lkIDA7XG52YXIgRW1wdHlFcnJvcl8xID0gcmVxdWlyZShcIi4uL3V0aWwvRW1wdHlFcnJvclwiKTtcbnZhciBmaWx0ZXJfMSA9IHJlcXVpcmUoXCIuL2ZpbHRlclwiKTtcbnZhciB0YWtlTGFzdF8xID0gcmVxdWlyZShcIi4vdGFrZUxhc3RcIik7XG52YXIgdGhyb3dJZkVtcHR5XzEgPSByZXF1aXJlKFwiLi90aHJvd0lmRW1wdHlcIik7XG52YXIgZGVmYXVsdElmRW1wdHlfMSA9IHJlcXVpcmUoXCIuL2RlZmF1bHRJZkVtcHR5XCIpO1xudmFyIGlkZW50aXR5XzEgPSByZXF1aXJlKFwiLi4vdXRpbC9pZGVudGl0eVwiKTtcbmZ1bmN0aW9uIGxhc3QocHJlZGljYXRlLCBkZWZhdWx0VmFsdWUpIHtcbiAgICB2YXIgaGFzRGVmYXVsdFZhbHVlID0gYXJndW1lbnRzLmxlbmd0aCA+PSAyO1xuICAgIHJldHVybiBmdW5jdGlvbiAoc291cmNlKSB7XG4gICAgICAgIHJldHVybiBzb3VyY2UucGlwZShwcmVkaWNhdGUgPyBmaWx0ZXJfMS5maWx0ZXIoZnVuY3Rpb24gKHYsIGkpIHsgcmV0dXJuIHByZWRpY2F0ZSh2LCBpLCBzb3VyY2UpOyB9KSA6IGlkZW50aXR5XzEuaWRlbnRpdHksIHRha2VMYXN0XzEudGFrZUxhc3QoMSksIGhhc0RlZmF1bHRWYWx1ZSA/IGRlZmF1bHRJZkVtcHR5XzEuZGVmYXVsdElmRW1wdHkoZGVmYXVsdFZhbHVlKSA6IHRocm93SWZFbXB0eV8xLnRocm93SWZFbXB0eShmdW5jdGlvbiAoKSB7IHJldHVybiBuZXcgRW1wdHlFcnJvcl8xLkVtcHR5RXJyb3IoKTsgfSkpO1xuICAgIH07XG59XG5leHBvcnRzLmxhc3QgPSBsYXN0O1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9bGFzdC5qcy5tYXAiLCJcInVzZSBzdHJpY3RcIjtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmV4cG9ydHMubWFwID0gdm9pZCAwO1xudmFyIGxpZnRfMSA9IHJlcXVpcmUoXCIuLi91dGlsL2xpZnRcIik7XG52YXIgT3BlcmF0b3JTdWJzY3JpYmVyXzEgPSByZXF1aXJlKFwiLi9PcGVyYXRvclN1YnNjcmliZXJcIik7XG5mdW5jdGlvbiBtYXAocHJvamVjdCwgdGhpc0FyZykge1xuICAgIHJldHVybiBsaWZ0XzEub3BlcmF0ZShmdW5jdGlvbiAoc291cmNlLCBzdWJzY3JpYmVyKSB7XG4gICAgICAgIHZhciBpbmRleCA9IDA7XG4gICAgICAgIHNvdXJjZS5zdWJzY3JpYmUoT3BlcmF0b3JTdWJzY3JpYmVyXzEuY3JlYXRlT3BlcmF0b3JTdWJzY3JpYmVyKHN1YnNjcmliZXIsIGZ1bmN0aW9uICh2YWx1ZSkge1xuICAgICAgICAgICAgc3Vic2NyaWJlci5uZXh0KHByb2plY3QuY2FsbCh0aGlzQXJnLCB2YWx1ZSwgaW5kZXgrKykpO1xuICAgICAgICB9KSk7XG4gICAgfSk7XG59XG5leHBvcnRzLm1hcCA9IG1hcDtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPW1hcC5qcy5tYXAiLCJcInVzZSBzdHJpY3RcIjtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmV4cG9ydHMubWFwVG8gPSB2b2lkIDA7XG52YXIgbWFwXzEgPSByZXF1aXJlKFwiLi9tYXBcIik7XG5mdW5jdGlvbiBtYXBUbyh2YWx1ZSkge1xuICAgIHJldHVybiBtYXBfMS5tYXAoZnVuY3Rpb24gKCkgeyByZXR1cm4gdmFsdWU7IH0pO1xufVxuZXhwb3J0cy5tYXBUbyA9IG1hcFRvO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9bWFwVG8uanMubWFwIiwiXCJ1c2Ugc3RyaWN0XCI7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5leHBvcnRzLm1hdGVyaWFsaXplID0gdm9pZCAwO1xudmFyIE5vdGlmaWNhdGlvbl8xID0gcmVxdWlyZShcIi4uL05vdGlmaWNhdGlvblwiKTtcbnZhciBsaWZ0XzEgPSByZXF1aXJlKFwiLi4vdXRpbC9saWZ0XCIpO1xudmFyIE9wZXJhdG9yU3Vic2NyaWJlcl8xID0gcmVxdWlyZShcIi4vT3BlcmF0b3JTdWJzY3JpYmVyXCIpO1xuZnVuY3Rpb24gbWF0ZXJpYWxpemUoKSB7XG4gICAgcmV0dXJuIGxpZnRfMS5vcGVyYXRlKGZ1bmN0aW9uIChzb3VyY2UsIHN1YnNjcmliZXIpIHtcbiAgICAgICAgc291cmNlLnN1YnNjcmliZShPcGVyYXRvclN1YnNjcmliZXJfMS5jcmVhdGVPcGVyYXRvclN1YnNjcmliZXIoc3Vic2NyaWJlciwgZnVuY3Rpb24gKHZhbHVlKSB7XG4gICAgICAgICAgICBzdWJzY3JpYmVyLm5leHQoTm90aWZpY2F0aW9uXzEuTm90aWZpY2F0aW9uLmNyZWF0ZU5leHQodmFsdWUpKTtcbiAgICAgICAgfSwgZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgc3Vic2NyaWJlci5uZXh0KE5vdGlmaWNhdGlvbl8xLk5vdGlmaWNhdGlvbi5jcmVhdGVDb21wbGV0ZSgpKTtcbiAgICAgICAgICAgIHN1YnNjcmliZXIuY29tcGxldGUoKTtcbiAgICAgICAgfSwgZnVuY3Rpb24gKGVycikge1xuICAgICAgICAgICAgc3Vic2NyaWJlci5uZXh0KE5vdGlmaWNhdGlvbl8xLk5vdGlmaWNhdGlvbi5jcmVhdGVFcnJvcihlcnIpKTtcbiAgICAgICAgICAgIHN1YnNjcmliZXIuY29tcGxldGUoKTtcbiAgICAgICAgfSkpO1xuICAgIH0pO1xufVxuZXhwb3J0cy5tYXRlcmlhbGl6ZSA9IG1hdGVyaWFsaXplO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9bWF0ZXJpYWxpemUuanMubWFwIiwiXCJ1c2Ugc3RyaWN0XCI7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5leHBvcnRzLm1heCA9IHZvaWQgMDtcbnZhciByZWR1Y2VfMSA9IHJlcXVpcmUoXCIuL3JlZHVjZVwiKTtcbnZhciBpc0Z1bmN0aW9uXzEgPSByZXF1aXJlKFwiLi4vdXRpbC9pc0Z1bmN0aW9uXCIpO1xuZnVuY3Rpb24gbWF4KGNvbXBhcmVyKSB7XG4gICAgcmV0dXJuIHJlZHVjZV8xLnJlZHVjZShpc0Z1bmN0aW9uXzEuaXNGdW5jdGlvbihjb21wYXJlcikgPyBmdW5jdGlvbiAoeCwgeSkgeyByZXR1cm4gKGNvbXBhcmVyKHgsIHkpID4gMCA/IHggOiB5KTsgfSA6IGZ1bmN0aW9uICh4LCB5KSB7IHJldHVybiAoeCA+IHkgPyB4IDogeSk7IH0pO1xufVxuZXhwb3J0cy5tYXggPSBtYXg7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1tYXguanMubWFwIiwiXCJ1c2Ugc3RyaWN0XCI7XG52YXIgX19yZWFkID0gKHRoaXMgJiYgdGhpcy5fX3JlYWQpIHx8IGZ1bmN0aW9uIChvLCBuKSB7XG4gICAgdmFyIG0gPSB0eXBlb2YgU3ltYm9sID09PSBcImZ1bmN0aW9uXCIgJiYgb1tTeW1ib2wuaXRlcmF0b3JdO1xuICAgIGlmICghbSkgcmV0dXJuIG87XG4gICAgdmFyIGkgPSBtLmNhbGwobyksIHIsIGFyID0gW10sIGU7XG4gICAgdHJ5IHtcbiAgICAgICAgd2hpbGUgKChuID09PSB2b2lkIDAgfHwgbi0tID4gMCkgJiYgIShyID0gaS5uZXh0KCkpLmRvbmUpIGFyLnB1c2goci52YWx1ZSk7XG4gICAgfVxuICAgIGNhdGNoIChlcnJvcikgeyBlID0geyBlcnJvcjogZXJyb3IgfTsgfVxuICAgIGZpbmFsbHkge1xuICAgICAgICB0cnkge1xuICAgICAgICAgICAgaWYgKHIgJiYgIXIuZG9uZSAmJiAobSA9IGlbXCJyZXR1cm5cIl0pKSBtLmNhbGwoaSk7XG4gICAgICAgIH1cbiAgICAgICAgZmluYWxseSB7IGlmIChlKSB0aHJvdyBlLmVycm9yOyB9XG4gICAgfVxuICAgIHJldHVybiBhcjtcbn07XG52YXIgX19zcHJlYWRBcnJheSA9ICh0aGlzICYmIHRoaXMuX19zcHJlYWRBcnJheSkgfHwgZnVuY3Rpb24gKHRvLCBmcm9tKSB7XG4gICAgZm9yICh2YXIgaSA9IDAsIGlsID0gZnJvbS5sZW5ndGgsIGogPSB0by5sZW5ndGg7IGkgPCBpbDsgaSsrLCBqKyspXG4gICAgICAgIHRvW2pdID0gZnJvbVtpXTtcbiAgICByZXR1cm4gdG87XG59O1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuZXhwb3J0cy5tZXJnZSA9IHZvaWQgMDtcbnZhciBsaWZ0XzEgPSByZXF1aXJlKFwiLi4vdXRpbC9saWZ0XCIpO1xudmFyIGFyZ3NPckFyZ0FycmF5XzEgPSByZXF1aXJlKFwiLi4vdXRpbC9hcmdzT3JBcmdBcnJheVwiKTtcbnZhciBtZXJnZUFsbF8xID0gcmVxdWlyZShcIi4vbWVyZ2VBbGxcIik7XG52YXIgYXJnc18xID0gcmVxdWlyZShcIi4uL3V0aWwvYXJnc1wiKTtcbnZhciBmcm9tXzEgPSByZXF1aXJlKFwiLi4vb2JzZXJ2YWJsZS9mcm9tXCIpO1xuZnVuY3Rpb24gbWVyZ2UoKSB7XG4gICAgdmFyIGFyZ3MgPSBbXTtcbiAgICBmb3IgKHZhciBfaSA9IDA7IF9pIDwgYXJndW1lbnRzLmxlbmd0aDsgX2krKykge1xuICAgICAgICBhcmdzW19pXSA9IGFyZ3VtZW50c1tfaV07XG4gICAgfVxuICAgIHZhciBzY2hlZHVsZXIgPSBhcmdzXzEucG9wU2NoZWR1bGVyKGFyZ3MpO1xuICAgIHZhciBjb25jdXJyZW50ID0gYXJnc18xLnBvcE51bWJlcihhcmdzLCBJbmZpbml0eSk7XG4gICAgYXJncyA9IGFyZ3NPckFyZ0FycmF5XzEuYXJnc09yQXJnQXJyYXkoYXJncyk7XG4gICAgcmV0dXJuIGxpZnRfMS5vcGVyYXRlKGZ1bmN0aW9uIChzb3VyY2UsIHN1YnNjcmliZXIpIHtcbiAgICAgICAgbWVyZ2VBbGxfMS5tZXJnZUFsbChjb25jdXJyZW50KShmcm9tXzEuZnJvbShfX3NwcmVhZEFycmF5KFtzb3VyY2VdLCBfX3JlYWQoYXJncykpLCBzY2hlZHVsZXIpKS5zdWJzY3JpYmUoc3Vic2NyaWJlcik7XG4gICAgfSk7XG59XG5leHBvcnRzLm1lcmdlID0gbWVyZ2U7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1tZXJnZS5qcy5tYXAiLCJcInVzZSBzdHJpY3RcIjtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmV4cG9ydHMubWVyZ2VBbGwgPSB2b2lkIDA7XG52YXIgbWVyZ2VNYXBfMSA9IHJlcXVpcmUoXCIuL21lcmdlTWFwXCIpO1xudmFyIGlkZW50aXR5XzEgPSByZXF1aXJlKFwiLi4vdXRpbC9pZGVudGl0eVwiKTtcbmZ1bmN0aW9uIG1lcmdlQWxsKGNvbmN1cnJlbnQpIHtcbiAgICBpZiAoY29uY3VycmVudCA9PT0gdm9pZCAwKSB7IGNvbmN1cnJlbnQgPSBJbmZpbml0eTsgfVxuICAgIHJldHVybiBtZXJnZU1hcF8xLm1lcmdlTWFwKGlkZW50aXR5XzEuaWRlbnRpdHksIGNvbmN1cnJlbnQpO1xufVxuZXhwb3J0cy5tZXJnZUFsbCA9IG1lcmdlQWxsO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9bWVyZ2VBbGwuanMubWFwIiwiXCJ1c2Ugc3RyaWN0XCI7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5leHBvcnRzLm1lcmdlSW50ZXJuYWxzID0gdm9pZCAwO1xudmFyIGlubmVyRnJvbV8xID0gcmVxdWlyZShcIi4uL29ic2VydmFibGUvaW5uZXJGcm9tXCIpO1xudmFyIGV4ZWN1dGVTY2hlZHVsZV8xID0gcmVxdWlyZShcIi4uL3V0aWwvZXhlY3V0ZVNjaGVkdWxlXCIpO1xudmFyIE9wZXJhdG9yU3Vic2NyaWJlcl8xID0gcmVxdWlyZShcIi4vT3BlcmF0b3JTdWJzY3JpYmVyXCIpO1xuZnVuY3Rpb24gbWVyZ2VJbnRlcm5hbHMoc291cmNlLCBzdWJzY3JpYmVyLCBwcm9qZWN0LCBjb25jdXJyZW50LCBvbkJlZm9yZU5leHQsIGV4cGFuZCwgaW5uZXJTdWJTY2hlZHVsZXIsIGFkZGl0aW9uYWxGaW5hbGl6ZXIpIHtcbiAgICB2YXIgYnVmZmVyID0gW107XG4gICAgdmFyIGFjdGl2ZSA9IDA7XG4gICAgdmFyIGluZGV4ID0gMDtcbiAgICB2YXIgaXNDb21wbGV0ZSA9IGZhbHNlO1xuICAgIHZhciBjaGVja0NvbXBsZXRlID0gZnVuY3Rpb24gKCkge1xuICAgICAgICBpZiAoaXNDb21wbGV0ZSAmJiAhYnVmZmVyLmxlbmd0aCAmJiAhYWN0aXZlKSB7XG4gICAgICAgICAgICBzdWJzY3JpYmVyLmNvbXBsZXRlKCk7XG4gICAgICAgIH1cbiAgICB9O1xuICAgIHZhciBvdXRlck5leHQgPSBmdW5jdGlvbiAodmFsdWUpIHsgcmV0dXJuIChhY3RpdmUgPCBjb25jdXJyZW50ID8gZG9Jbm5lclN1Yih2YWx1ZSkgOiBidWZmZXIucHVzaCh2YWx1ZSkpOyB9O1xuICAgIHZhciBkb0lubmVyU3ViID0gZnVuY3Rpb24gKHZhbHVlKSB7XG4gICAgICAgIGV4cGFuZCAmJiBzdWJzY3JpYmVyLm5leHQodmFsdWUpO1xuICAgICAgICBhY3RpdmUrKztcbiAgICAgICAgdmFyIGlubmVyQ29tcGxldGUgPSBmYWxzZTtcbiAgICAgICAgaW5uZXJGcm9tXzEuaW5uZXJGcm9tKHByb2plY3QodmFsdWUsIGluZGV4KyspKS5zdWJzY3JpYmUoT3BlcmF0b3JTdWJzY3JpYmVyXzEuY3JlYXRlT3BlcmF0b3JTdWJzY3JpYmVyKHN1YnNjcmliZXIsIGZ1bmN0aW9uIChpbm5lclZhbHVlKSB7XG4gICAgICAgICAgICBvbkJlZm9yZU5leHQgPT09IG51bGwgfHwgb25CZWZvcmVOZXh0ID09PSB2b2lkIDAgPyB2b2lkIDAgOiBvbkJlZm9yZU5leHQoaW5uZXJWYWx1ZSk7XG4gICAgICAgICAgICBpZiAoZXhwYW5kKSB7XG4gICAgICAgICAgICAgICAgb3V0ZXJOZXh0KGlubmVyVmFsdWUpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgc3Vic2NyaWJlci5uZXh0KGlubmVyVmFsdWUpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9LCBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICBpbm5lckNvbXBsZXRlID0gdHJ1ZTtcbiAgICAgICAgfSwgdW5kZWZpbmVkLCBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICBpZiAoaW5uZXJDb21wbGV0ZSkge1xuICAgICAgICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICAgICAgICAgIGFjdGl2ZS0tO1xuICAgICAgICAgICAgICAgICAgICB2YXIgX2xvb3BfMSA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhciBidWZmZXJlZFZhbHVlID0gYnVmZmVyLnNoaWZ0KCk7XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoaW5uZXJTdWJTY2hlZHVsZXIpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBleGVjdXRlU2NoZWR1bGVfMS5leGVjdXRlU2NoZWR1bGUoc3Vic2NyaWJlciwgaW5uZXJTdWJTY2hlZHVsZXIsIGZ1bmN0aW9uICgpIHsgcmV0dXJuIGRvSW5uZXJTdWIoYnVmZmVyZWRWYWx1ZSk7IH0pO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZG9Jbm5lclN1YihidWZmZXJlZFZhbHVlKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgfTtcbiAgICAgICAgICAgICAgICAgICAgd2hpbGUgKGJ1ZmZlci5sZW5ndGggJiYgYWN0aXZlIDwgY29uY3VycmVudCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgX2xvb3BfMSgpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIGNoZWNrQ29tcGxldGUoKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgY2F0Y2ggKGVycikge1xuICAgICAgICAgICAgICAgICAgICBzdWJzY3JpYmVyLmVycm9yKGVycik7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICB9KSk7XG4gICAgfTtcbiAgICBzb3VyY2Uuc3Vic2NyaWJlKE9wZXJhdG9yU3Vic2NyaWJlcl8xLmNyZWF0ZU9wZXJhdG9yU3Vic2NyaWJlcihzdWJzY3JpYmVyLCBvdXRlck5leHQsIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgaXNDb21wbGV0ZSA9IHRydWU7XG4gICAgICAgIGNoZWNrQ29tcGxldGUoKTtcbiAgICB9KSk7XG4gICAgcmV0dXJuIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgYWRkaXRpb25hbEZpbmFsaXplciA9PT0gbnVsbCB8fCBhZGRpdGlvbmFsRmluYWxpemVyID09PSB2b2lkIDAgPyB2b2lkIDAgOiBhZGRpdGlvbmFsRmluYWxpemVyKCk7XG4gICAgfTtcbn1cbmV4cG9ydHMubWVyZ2VJbnRlcm5hbHMgPSBtZXJnZUludGVybmFscztcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPW1lcmdlSW50ZXJuYWxzLmpzLm1hcCIsIlwidXNlIHN0cmljdFwiO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuZXhwb3J0cy5tZXJnZU1hcCA9IHZvaWQgMDtcbnZhciBtYXBfMSA9IHJlcXVpcmUoXCIuL21hcFwiKTtcbnZhciBpbm5lckZyb21fMSA9IHJlcXVpcmUoXCIuLi9vYnNlcnZhYmxlL2lubmVyRnJvbVwiKTtcbnZhciBsaWZ0XzEgPSByZXF1aXJlKFwiLi4vdXRpbC9saWZ0XCIpO1xudmFyIG1lcmdlSW50ZXJuYWxzXzEgPSByZXF1aXJlKFwiLi9tZXJnZUludGVybmFsc1wiKTtcbnZhciBpc0Z1bmN0aW9uXzEgPSByZXF1aXJlKFwiLi4vdXRpbC9pc0Z1bmN0aW9uXCIpO1xuZnVuY3Rpb24gbWVyZ2VNYXAocHJvamVjdCwgcmVzdWx0U2VsZWN0b3IsIGNvbmN1cnJlbnQpIHtcbiAgICBpZiAoY29uY3VycmVudCA9PT0gdm9pZCAwKSB7IGNvbmN1cnJlbnQgPSBJbmZpbml0eTsgfVxuICAgIGlmIChpc0Z1bmN0aW9uXzEuaXNGdW5jdGlvbihyZXN1bHRTZWxlY3RvcikpIHtcbiAgICAgICAgcmV0dXJuIG1lcmdlTWFwKGZ1bmN0aW9uIChhLCBpKSB7IHJldHVybiBtYXBfMS5tYXAoZnVuY3Rpb24gKGIsIGlpKSB7IHJldHVybiByZXN1bHRTZWxlY3RvcihhLCBiLCBpLCBpaSk7IH0pKGlubmVyRnJvbV8xLmlubmVyRnJvbShwcm9qZWN0KGEsIGkpKSk7IH0sIGNvbmN1cnJlbnQpO1xuICAgIH1cbiAgICBlbHNlIGlmICh0eXBlb2YgcmVzdWx0U2VsZWN0b3IgPT09ICdudW1iZXInKSB7XG4gICAgICAgIGNvbmN1cnJlbnQgPSByZXN1bHRTZWxlY3RvcjtcbiAgICB9XG4gICAgcmV0dXJuIGxpZnRfMS5vcGVyYXRlKGZ1bmN0aW9uIChzb3VyY2UsIHN1YnNjcmliZXIpIHsgcmV0dXJuIG1lcmdlSW50ZXJuYWxzXzEubWVyZ2VJbnRlcm5hbHMoc291cmNlLCBzdWJzY3JpYmVyLCBwcm9qZWN0LCBjb25jdXJyZW50KTsgfSk7XG59XG5leHBvcnRzLm1lcmdlTWFwID0gbWVyZ2VNYXA7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1tZXJnZU1hcC5qcy5tYXAiLCJcInVzZSBzdHJpY3RcIjtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmV4cG9ydHMubWVyZ2VNYXBUbyA9IHZvaWQgMDtcbnZhciBtZXJnZU1hcF8xID0gcmVxdWlyZShcIi4vbWVyZ2VNYXBcIik7XG52YXIgaXNGdW5jdGlvbl8xID0gcmVxdWlyZShcIi4uL3V0aWwvaXNGdW5jdGlvblwiKTtcbmZ1bmN0aW9uIG1lcmdlTWFwVG8oaW5uZXJPYnNlcnZhYmxlLCByZXN1bHRTZWxlY3RvciwgY29uY3VycmVudCkge1xuICAgIGlmIChjb25jdXJyZW50ID09PSB2b2lkIDApIHsgY29uY3VycmVudCA9IEluZmluaXR5OyB9XG4gICAgaWYgKGlzRnVuY3Rpb25fMS5pc0Z1bmN0aW9uKHJlc3VsdFNlbGVjdG9yKSkge1xuICAgICAgICByZXR1cm4gbWVyZ2VNYXBfMS5tZXJnZU1hcChmdW5jdGlvbiAoKSB7IHJldHVybiBpbm5lck9ic2VydmFibGU7IH0sIHJlc3VsdFNlbGVjdG9yLCBjb25jdXJyZW50KTtcbiAgICB9XG4gICAgaWYgKHR5cGVvZiByZXN1bHRTZWxlY3RvciA9PT0gJ251bWJlcicpIHtcbiAgICAgICAgY29uY3VycmVudCA9IHJlc3VsdFNlbGVjdG9yO1xuICAgIH1cbiAgICByZXR1cm4gbWVyZ2VNYXBfMS5tZXJnZU1hcChmdW5jdGlvbiAoKSB7IHJldHVybiBpbm5lck9ic2VydmFibGU7IH0sIGNvbmN1cnJlbnQpO1xufVxuZXhwb3J0cy5tZXJnZU1hcFRvID0gbWVyZ2VNYXBUbztcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPW1lcmdlTWFwVG8uanMubWFwIiwiXCJ1c2Ugc3RyaWN0XCI7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5leHBvcnRzLm1lcmdlU2NhbiA9IHZvaWQgMDtcbnZhciBsaWZ0XzEgPSByZXF1aXJlKFwiLi4vdXRpbC9saWZ0XCIpO1xudmFyIG1lcmdlSW50ZXJuYWxzXzEgPSByZXF1aXJlKFwiLi9tZXJnZUludGVybmFsc1wiKTtcbmZ1bmN0aW9uIG1lcmdlU2NhbihhY2N1bXVsYXRvciwgc2VlZCwgY29uY3VycmVudCkge1xuICAgIGlmIChjb25jdXJyZW50ID09PSB2b2lkIDApIHsgY29uY3VycmVudCA9IEluZmluaXR5OyB9XG4gICAgcmV0dXJuIGxpZnRfMS5vcGVyYXRlKGZ1bmN0aW9uIChzb3VyY2UsIHN1YnNjcmliZXIpIHtcbiAgICAgICAgdmFyIHN0YXRlID0gc2VlZDtcbiAgICAgICAgcmV0dXJuIG1lcmdlSW50ZXJuYWxzXzEubWVyZ2VJbnRlcm5hbHMoc291cmNlLCBzdWJzY3JpYmVyLCBmdW5jdGlvbiAodmFsdWUsIGluZGV4KSB7IHJldHVybiBhY2N1bXVsYXRvcihzdGF0ZSwgdmFsdWUsIGluZGV4KTsgfSwgY29uY3VycmVudCwgZnVuY3Rpb24gKHZhbHVlKSB7XG4gICAgICAgICAgICBzdGF0ZSA9IHZhbHVlO1xuICAgICAgICB9LCBmYWxzZSwgdW5kZWZpbmVkLCBmdW5jdGlvbiAoKSB7IHJldHVybiAoc3RhdGUgPSBudWxsKTsgfSk7XG4gICAgfSk7XG59XG5leHBvcnRzLm1lcmdlU2NhbiA9IG1lcmdlU2Nhbjtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPW1lcmdlU2Nhbi5qcy5tYXAiLCJcInVzZSBzdHJpY3RcIjtcbnZhciBfX3JlYWQgPSAodGhpcyAmJiB0aGlzLl9fcmVhZCkgfHwgZnVuY3Rpb24gKG8sIG4pIHtcbiAgICB2YXIgbSA9IHR5cGVvZiBTeW1ib2wgPT09IFwiZnVuY3Rpb25cIiAmJiBvW1N5bWJvbC5pdGVyYXRvcl07XG4gICAgaWYgKCFtKSByZXR1cm4gbztcbiAgICB2YXIgaSA9IG0uY2FsbChvKSwgciwgYXIgPSBbXSwgZTtcbiAgICB0cnkge1xuICAgICAgICB3aGlsZSAoKG4gPT09IHZvaWQgMCB8fCBuLS0gPiAwKSAmJiAhKHIgPSBpLm5leHQoKSkuZG9uZSkgYXIucHVzaChyLnZhbHVlKTtcbiAgICB9XG4gICAgY2F0Y2ggKGVycm9yKSB7IGUgPSB7IGVycm9yOiBlcnJvciB9OyB9XG4gICAgZmluYWxseSB7XG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgICBpZiAociAmJiAhci5kb25lICYmIChtID0gaVtcInJldHVyblwiXSkpIG0uY2FsbChpKTtcbiAgICAgICAgfVxuICAgICAgICBmaW5hbGx5IHsgaWYgKGUpIHRocm93IGUuZXJyb3I7IH1cbiAgICB9XG4gICAgcmV0dXJuIGFyO1xufTtcbnZhciBfX3NwcmVhZEFycmF5ID0gKHRoaXMgJiYgdGhpcy5fX3NwcmVhZEFycmF5KSB8fCBmdW5jdGlvbiAodG8sIGZyb20pIHtcbiAgICBmb3IgKHZhciBpID0gMCwgaWwgPSBmcm9tLmxlbmd0aCwgaiA9IHRvLmxlbmd0aDsgaSA8IGlsOyBpKyssIGorKylcbiAgICAgICAgdG9bal0gPSBmcm9tW2ldO1xuICAgIHJldHVybiB0bztcbn07XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5leHBvcnRzLm1lcmdlV2l0aCA9IHZvaWQgMDtcbnZhciBtZXJnZV8xID0gcmVxdWlyZShcIi4vbWVyZ2VcIik7XG5mdW5jdGlvbiBtZXJnZVdpdGgoKSB7XG4gICAgdmFyIG90aGVyU291cmNlcyA9IFtdO1xuICAgIGZvciAodmFyIF9pID0gMDsgX2kgPCBhcmd1bWVudHMubGVuZ3RoOyBfaSsrKSB7XG4gICAgICAgIG90aGVyU291cmNlc1tfaV0gPSBhcmd1bWVudHNbX2ldO1xuICAgIH1cbiAgICByZXR1cm4gbWVyZ2VfMS5tZXJnZS5hcHBseSh2b2lkIDAsIF9fc3ByZWFkQXJyYXkoW10sIF9fcmVhZChvdGhlclNvdXJjZXMpKSk7XG59XG5leHBvcnRzLm1lcmdlV2l0aCA9IG1lcmdlV2l0aDtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPW1lcmdlV2l0aC5qcy5tYXAiLCJcInVzZSBzdHJpY3RcIjtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmV4cG9ydHMubWluID0gdm9pZCAwO1xudmFyIHJlZHVjZV8xID0gcmVxdWlyZShcIi4vcmVkdWNlXCIpO1xudmFyIGlzRnVuY3Rpb25fMSA9IHJlcXVpcmUoXCIuLi91dGlsL2lzRnVuY3Rpb25cIik7XG5mdW5jdGlvbiBtaW4oY29tcGFyZXIpIHtcbiAgICByZXR1cm4gcmVkdWNlXzEucmVkdWNlKGlzRnVuY3Rpb25fMS5pc0Z1bmN0aW9uKGNvbXBhcmVyKSA/IGZ1bmN0aW9uICh4LCB5KSB7IHJldHVybiAoY29tcGFyZXIoeCwgeSkgPCAwID8geCA6IHkpOyB9IDogZnVuY3Rpb24gKHgsIHkpIHsgcmV0dXJuICh4IDwgeSA/IHggOiB5KTsgfSk7XG59XG5leHBvcnRzLm1pbiA9IG1pbjtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPW1pbi5qcy5tYXAiLCJcInVzZSBzdHJpY3RcIjtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmV4cG9ydHMubXVsdGljYXN0ID0gdm9pZCAwO1xudmFyIENvbm5lY3RhYmxlT2JzZXJ2YWJsZV8xID0gcmVxdWlyZShcIi4uL29ic2VydmFibGUvQ29ubmVjdGFibGVPYnNlcnZhYmxlXCIpO1xudmFyIGlzRnVuY3Rpb25fMSA9IHJlcXVpcmUoXCIuLi91dGlsL2lzRnVuY3Rpb25cIik7XG52YXIgY29ubmVjdF8xID0gcmVxdWlyZShcIi4vY29ubmVjdFwiKTtcbmZ1bmN0aW9uIG11bHRpY2FzdChzdWJqZWN0T3JTdWJqZWN0RmFjdG9yeSwgc2VsZWN0b3IpIHtcbiAgICB2YXIgc3ViamVjdEZhY3RvcnkgPSBpc0Z1bmN0aW9uXzEuaXNGdW5jdGlvbihzdWJqZWN0T3JTdWJqZWN0RmFjdG9yeSkgPyBzdWJqZWN0T3JTdWJqZWN0RmFjdG9yeSA6IGZ1bmN0aW9uICgpIHsgcmV0dXJuIHN1YmplY3RPclN1YmplY3RGYWN0b3J5OyB9O1xuICAgIGlmIChpc0Z1bmN0aW9uXzEuaXNGdW5jdGlvbihzZWxlY3RvcikpIHtcbiAgICAgICAgcmV0dXJuIGNvbm5lY3RfMS5jb25uZWN0KHNlbGVjdG9yLCB7XG4gICAgICAgICAgICBjb25uZWN0b3I6IHN1YmplY3RGYWN0b3J5LFxuICAgICAgICB9KTtcbiAgICB9XG4gICAgcmV0dXJuIGZ1bmN0aW9uIChzb3VyY2UpIHsgcmV0dXJuIG5ldyBDb25uZWN0YWJsZU9ic2VydmFibGVfMS5Db25uZWN0YWJsZU9ic2VydmFibGUoc291cmNlLCBzdWJqZWN0RmFjdG9yeSk7IH07XG59XG5leHBvcnRzLm11bHRpY2FzdCA9IG11bHRpY2FzdDtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPW11bHRpY2FzdC5qcy5tYXAiLCJcInVzZSBzdHJpY3RcIjtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmV4cG9ydHMub2JzZXJ2ZU9uID0gdm9pZCAwO1xudmFyIGV4ZWN1dGVTY2hlZHVsZV8xID0gcmVxdWlyZShcIi4uL3V0aWwvZXhlY3V0ZVNjaGVkdWxlXCIpO1xudmFyIGxpZnRfMSA9IHJlcXVpcmUoXCIuLi91dGlsL2xpZnRcIik7XG52YXIgT3BlcmF0b3JTdWJzY3JpYmVyXzEgPSByZXF1aXJlKFwiLi9PcGVyYXRvclN1YnNjcmliZXJcIik7XG5mdW5jdGlvbiBvYnNlcnZlT24oc2NoZWR1bGVyLCBkZWxheSkge1xuICAgIGlmIChkZWxheSA9PT0gdm9pZCAwKSB7IGRlbGF5ID0gMDsgfVxuICAgIHJldHVybiBsaWZ0XzEub3BlcmF0ZShmdW5jdGlvbiAoc291cmNlLCBzdWJzY3JpYmVyKSB7XG4gICAgICAgIHNvdXJjZS5zdWJzY3JpYmUoT3BlcmF0b3JTdWJzY3JpYmVyXzEuY3JlYXRlT3BlcmF0b3JTdWJzY3JpYmVyKHN1YnNjcmliZXIsIGZ1bmN0aW9uICh2YWx1ZSkgeyByZXR1cm4gZXhlY3V0ZVNjaGVkdWxlXzEuZXhlY3V0ZVNjaGVkdWxlKHN1YnNjcmliZXIsIHNjaGVkdWxlciwgZnVuY3Rpb24gKCkgeyByZXR1cm4gc3Vic2NyaWJlci5uZXh0KHZhbHVlKTsgfSwgZGVsYXkpOyB9LCBmdW5jdGlvbiAoKSB7IHJldHVybiBleGVjdXRlU2NoZWR1bGVfMS5leGVjdXRlU2NoZWR1bGUoc3Vic2NyaWJlciwgc2NoZWR1bGVyLCBmdW5jdGlvbiAoKSB7IHJldHVybiBzdWJzY3JpYmVyLmNvbXBsZXRlKCk7IH0sIGRlbGF5KTsgfSwgZnVuY3Rpb24gKGVycikgeyByZXR1cm4gZXhlY3V0ZVNjaGVkdWxlXzEuZXhlY3V0ZVNjaGVkdWxlKHN1YnNjcmliZXIsIHNjaGVkdWxlciwgZnVuY3Rpb24gKCkgeyByZXR1cm4gc3Vic2NyaWJlci5lcnJvcihlcnIpOyB9LCBkZWxheSk7IH0pKTtcbiAgICB9KTtcbn1cbmV4cG9ydHMub2JzZXJ2ZU9uID0gb2JzZXJ2ZU9uO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9b2JzZXJ2ZU9uLmpzLm1hcCIsIlwidXNlIHN0cmljdFwiO1xudmFyIF9fcmVhZCA9ICh0aGlzICYmIHRoaXMuX19yZWFkKSB8fCBmdW5jdGlvbiAobywgbikge1xuICAgIHZhciBtID0gdHlwZW9mIFN5bWJvbCA9PT0gXCJmdW5jdGlvblwiICYmIG9bU3ltYm9sLml0ZXJhdG9yXTtcbiAgICBpZiAoIW0pIHJldHVybiBvO1xuICAgIHZhciBpID0gbS5jYWxsKG8pLCByLCBhciA9IFtdLCBlO1xuICAgIHRyeSB7XG4gICAgICAgIHdoaWxlICgobiA9PT0gdm9pZCAwIHx8IG4tLSA+IDApICYmICEociA9IGkubmV4dCgpKS5kb25lKSBhci5wdXNoKHIudmFsdWUpO1xuICAgIH1cbiAgICBjYXRjaCAoZXJyb3IpIHsgZSA9IHsgZXJyb3I6IGVycm9yIH07IH1cbiAgICBmaW5hbGx5IHtcbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgIGlmIChyICYmICFyLmRvbmUgJiYgKG0gPSBpW1wicmV0dXJuXCJdKSkgbS5jYWxsKGkpO1xuICAgICAgICB9XG4gICAgICAgIGZpbmFsbHkgeyBpZiAoZSkgdGhyb3cgZS5lcnJvcjsgfVxuICAgIH1cbiAgICByZXR1cm4gYXI7XG59O1xudmFyIF9fc3ByZWFkQXJyYXkgPSAodGhpcyAmJiB0aGlzLl9fc3ByZWFkQXJyYXkpIHx8IGZ1bmN0aW9uICh0bywgZnJvbSkge1xuICAgIGZvciAodmFyIGkgPSAwLCBpbCA9IGZyb20ubGVuZ3RoLCBqID0gdG8ubGVuZ3RoOyBpIDwgaWw7IGkrKywgaisrKVxuICAgICAgICB0b1tqXSA9IGZyb21baV07XG4gICAgcmV0dXJuIHRvO1xufTtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmV4cG9ydHMub25FcnJvclJlc3VtZU5leHQgPSBleHBvcnRzLm9uRXJyb3JSZXN1bWVOZXh0V2l0aCA9IHZvaWQgMDtcbnZhciBhcmdzT3JBcmdBcnJheV8xID0gcmVxdWlyZShcIi4uL3V0aWwvYXJnc09yQXJnQXJyYXlcIik7XG52YXIgb25FcnJvclJlc3VtZU5leHRfMSA9IHJlcXVpcmUoXCIuLi9vYnNlcnZhYmxlL29uRXJyb3JSZXN1bWVOZXh0XCIpO1xuZnVuY3Rpb24gb25FcnJvclJlc3VtZU5leHRXaXRoKCkge1xuICAgIHZhciBzb3VyY2VzID0gW107XG4gICAgZm9yICh2YXIgX2kgPSAwOyBfaSA8IGFyZ3VtZW50cy5sZW5ndGg7IF9pKyspIHtcbiAgICAgICAgc291cmNlc1tfaV0gPSBhcmd1bWVudHNbX2ldO1xuICAgIH1cbiAgICB2YXIgbmV4dFNvdXJjZXMgPSBhcmdzT3JBcmdBcnJheV8xLmFyZ3NPckFyZ0FycmF5KHNvdXJjZXMpO1xuICAgIHJldHVybiBmdW5jdGlvbiAoc291cmNlKSB7IHJldHVybiBvbkVycm9yUmVzdW1lTmV4dF8xLm9uRXJyb3JSZXN1bWVOZXh0LmFwcGx5KHZvaWQgMCwgX19zcHJlYWRBcnJheShbc291cmNlXSwgX19yZWFkKG5leHRTb3VyY2VzKSkpOyB9O1xufVxuZXhwb3J0cy5vbkVycm9yUmVzdW1lTmV4dFdpdGggPSBvbkVycm9yUmVzdW1lTmV4dFdpdGg7XG5leHBvcnRzLm9uRXJyb3JSZXN1bWVOZXh0ID0gb25FcnJvclJlc3VtZU5leHRXaXRoO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9b25FcnJvclJlc3VtZU5leHRXaXRoLmpzLm1hcCIsIlwidXNlIHN0cmljdFwiO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuZXhwb3J0cy5wYWlyd2lzZSA9IHZvaWQgMDtcbnZhciBsaWZ0XzEgPSByZXF1aXJlKFwiLi4vdXRpbC9saWZ0XCIpO1xudmFyIE9wZXJhdG9yU3Vic2NyaWJlcl8xID0gcmVxdWlyZShcIi4vT3BlcmF0b3JTdWJzY3JpYmVyXCIpO1xuZnVuY3Rpb24gcGFpcndpc2UoKSB7XG4gICAgcmV0dXJuIGxpZnRfMS5vcGVyYXRlKGZ1bmN0aW9uIChzb3VyY2UsIHN1YnNjcmliZXIpIHtcbiAgICAgICAgdmFyIHByZXY7XG4gICAgICAgIHZhciBoYXNQcmV2ID0gZmFsc2U7XG4gICAgICAgIHNvdXJjZS5zdWJzY3JpYmUoT3BlcmF0b3JTdWJzY3JpYmVyXzEuY3JlYXRlT3BlcmF0b3JTdWJzY3JpYmVyKHN1YnNjcmliZXIsIGZ1bmN0aW9uICh2YWx1ZSkge1xuICAgICAgICAgICAgdmFyIHAgPSBwcmV2O1xuICAgICAgICAgICAgcHJldiA9IHZhbHVlO1xuICAgICAgICAgICAgaGFzUHJldiAmJiBzdWJzY3JpYmVyLm5leHQoW3AsIHZhbHVlXSk7XG4gICAgICAgICAgICBoYXNQcmV2ID0gdHJ1ZTtcbiAgICAgICAgfSkpO1xuICAgIH0pO1xufVxuZXhwb3J0cy5wYWlyd2lzZSA9IHBhaXJ3aXNlO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9cGFpcndpc2UuanMubWFwIiwiXCJ1c2Ugc3RyaWN0XCI7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5leHBvcnRzLnBsdWNrID0gdm9pZCAwO1xudmFyIG1hcF8xID0gcmVxdWlyZShcIi4vbWFwXCIpO1xuZnVuY3Rpb24gcGx1Y2soKSB7XG4gICAgdmFyIHByb3BlcnRpZXMgPSBbXTtcbiAgICBmb3IgKHZhciBfaSA9IDA7IF9pIDwgYXJndW1lbnRzLmxlbmd0aDsgX2krKykge1xuICAgICAgICBwcm9wZXJ0aWVzW19pXSA9IGFyZ3VtZW50c1tfaV07XG4gICAgfVxuICAgIHZhciBsZW5ndGggPSBwcm9wZXJ0aWVzLmxlbmd0aDtcbiAgICBpZiAobGVuZ3RoID09PSAwKSB7XG4gICAgICAgIHRocm93IG5ldyBFcnJvcignbGlzdCBvZiBwcm9wZXJ0aWVzIGNhbm5vdCBiZSBlbXB0eS4nKTtcbiAgICB9XG4gICAgcmV0dXJuIG1hcF8xLm1hcChmdW5jdGlvbiAoeCkge1xuICAgICAgICB2YXIgY3VycmVudFByb3AgPSB4O1xuICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IGxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgICB2YXIgcCA9IGN1cnJlbnRQcm9wID09PSBudWxsIHx8IGN1cnJlbnRQcm9wID09PSB2b2lkIDAgPyB2b2lkIDAgOiBjdXJyZW50UHJvcFtwcm9wZXJ0aWVzW2ldXTtcbiAgICAgICAgICAgIGlmICh0eXBlb2YgcCAhPT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgICAgICAgICAgICBjdXJyZW50UHJvcCA9IHA7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gdW5kZWZpbmVkO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHJldHVybiBjdXJyZW50UHJvcDtcbiAgICB9KTtcbn1cbmV4cG9ydHMucGx1Y2sgPSBwbHVjaztcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPXBsdWNrLmpzLm1hcCIsIlwidXNlIHN0cmljdFwiO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuZXhwb3J0cy5wdWJsaXNoID0gdm9pZCAwO1xudmFyIFN1YmplY3RfMSA9IHJlcXVpcmUoXCIuLi9TdWJqZWN0XCIpO1xudmFyIG11bHRpY2FzdF8xID0gcmVxdWlyZShcIi4vbXVsdGljYXN0XCIpO1xudmFyIGNvbm5lY3RfMSA9IHJlcXVpcmUoXCIuL2Nvbm5lY3RcIik7XG5mdW5jdGlvbiBwdWJsaXNoKHNlbGVjdG9yKSB7XG4gICAgcmV0dXJuIHNlbGVjdG9yID8gZnVuY3Rpb24gKHNvdXJjZSkgeyByZXR1cm4gY29ubmVjdF8xLmNvbm5lY3Qoc2VsZWN0b3IpKHNvdXJjZSk7IH0gOiBmdW5jdGlvbiAoc291cmNlKSB7IHJldHVybiBtdWx0aWNhc3RfMS5tdWx0aWNhc3QobmV3IFN1YmplY3RfMS5TdWJqZWN0KCkpKHNvdXJjZSk7IH07XG59XG5leHBvcnRzLnB1Ymxpc2ggPSBwdWJsaXNoO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9cHVibGlzaC5qcy5tYXAiLCJcInVzZSBzdHJpY3RcIjtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmV4cG9ydHMucHVibGlzaEJlaGF2aW9yID0gdm9pZCAwO1xudmFyIEJlaGF2aW9yU3ViamVjdF8xID0gcmVxdWlyZShcIi4uL0JlaGF2aW9yU3ViamVjdFwiKTtcbnZhciBDb25uZWN0YWJsZU9ic2VydmFibGVfMSA9IHJlcXVpcmUoXCIuLi9vYnNlcnZhYmxlL0Nvbm5lY3RhYmxlT2JzZXJ2YWJsZVwiKTtcbmZ1bmN0aW9uIHB1Ymxpc2hCZWhhdmlvcihpbml0aWFsVmFsdWUpIHtcbiAgICByZXR1cm4gZnVuY3Rpb24gKHNvdXJjZSkge1xuICAgICAgICB2YXIgc3ViamVjdCA9IG5ldyBCZWhhdmlvclN1YmplY3RfMS5CZWhhdmlvclN1YmplY3QoaW5pdGlhbFZhbHVlKTtcbiAgICAgICAgcmV0dXJuIG5ldyBDb25uZWN0YWJsZU9ic2VydmFibGVfMS5Db25uZWN0YWJsZU9ic2VydmFibGUoc291cmNlLCBmdW5jdGlvbiAoKSB7IHJldHVybiBzdWJqZWN0OyB9KTtcbiAgICB9O1xufVxuZXhwb3J0cy5wdWJsaXNoQmVoYXZpb3IgPSBwdWJsaXNoQmVoYXZpb3I7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1wdWJsaXNoQmVoYXZpb3IuanMubWFwIiwiXCJ1c2Ugc3RyaWN0XCI7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5leHBvcnRzLnB1Ymxpc2hMYXN0ID0gdm9pZCAwO1xudmFyIEFzeW5jU3ViamVjdF8xID0gcmVxdWlyZShcIi4uL0FzeW5jU3ViamVjdFwiKTtcbnZhciBDb25uZWN0YWJsZU9ic2VydmFibGVfMSA9IHJlcXVpcmUoXCIuLi9vYnNlcnZhYmxlL0Nvbm5lY3RhYmxlT2JzZXJ2YWJsZVwiKTtcbmZ1bmN0aW9uIHB1Ymxpc2hMYXN0KCkge1xuICAgIHJldHVybiBmdW5jdGlvbiAoc291cmNlKSB7XG4gICAgICAgIHZhciBzdWJqZWN0ID0gbmV3IEFzeW5jU3ViamVjdF8xLkFzeW5jU3ViamVjdCgpO1xuICAgICAgICByZXR1cm4gbmV3IENvbm5lY3RhYmxlT2JzZXJ2YWJsZV8xLkNvbm5lY3RhYmxlT2JzZXJ2YWJsZShzb3VyY2UsIGZ1bmN0aW9uICgpIHsgcmV0dXJuIHN1YmplY3Q7IH0pO1xuICAgIH07XG59XG5leHBvcnRzLnB1Ymxpc2hMYXN0ID0gcHVibGlzaExhc3Q7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1wdWJsaXNoTGFzdC5qcy5tYXAiLCJcInVzZSBzdHJpY3RcIjtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmV4cG9ydHMucHVibGlzaFJlcGxheSA9IHZvaWQgMDtcbnZhciBSZXBsYXlTdWJqZWN0XzEgPSByZXF1aXJlKFwiLi4vUmVwbGF5U3ViamVjdFwiKTtcbnZhciBtdWx0aWNhc3RfMSA9IHJlcXVpcmUoXCIuL211bHRpY2FzdFwiKTtcbnZhciBpc0Z1bmN0aW9uXzEgPSByZXF1aXJlKFwiLi4vdXRpbC9pc0Z1bmN0aW9uXCIpO1xuZnVuY3Rpb24gcHVibGlzaFJlcGxheShidWZmZXJTaXplLCB3aW5kb3dUaW1lLCBzZWxlY3Rvck9yU2NoZWR1bGVyLCB0aW1lc3RhbXBQcm92aWRlcikge1xuICAgIGlmIChzZWxlY3Rvck9yU2NoZWR1bGVyICYmICFpc0Z1bmN0aW9uXzEuaXNGdW5jdGlvbihzZWxlY3Rvck9yU2NoZWR1bGVyKSkge1xuICAgICAgICB0aW1lc3RhbXBQcm92aWRlciA9IHNlbGVjdG9yT3JTY2hlZHVsZXI7XG4gICAgfVxuICAgIHZhciBzZWxlY3RvciA9IGlzRnVuY3Rpb25fMS5pc0Z1bmN0aW9uKHNlbGVjdG9yT3JTY2hlZHVsZXIpID8gc2VsZWN0b3JPclNjaGVkdWxlciA6IHVuZGVmaW5lZDtcbiAgICByZXR1cm4gZnVuY3Rpb24gKHNvdXJjZSkgeyByZXR1cm4gbXVsdGljYXN0XzEubXVsdGljYXN0KG5ldyBSZXBsYXlTdWJqZWN0XzEuUmVwbGF5U3ViamVjdChidWZmZXJTaXplLCB3aW5kb3dUaW1lLCB0aW1lc3RhbXBQcm92aWRlciksIHNlbGVjdG9yKShzb3VyY2UpOyB9O1xufVxuZXhwb3J0cy5wdWJsaXNoUmVwbGF5ID0gcHVibGlzaFJlcGxheTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPXB1Ymxpc2hSZXBsYXkuanMubWFwIiwiXCJ1c2Ugc3RyaWN0XCI7XG52YXIgX19yZWFkID0gKHRoaXMgJiYgdGhpcy5fX3JlYWQpIHx8IGZ1bmN0aW9uIChvLCBuKSB7XG4gICAgdmFyIG0gPSB0eXBlb2YgU3ltYm9sID09PSBcImZ1bmN0aW9uXCIgJiYgb1tTeW1ib2wuaXRlcmF0b3JdO1xuICAgIGlmICghbSkgcmV0dXJuIG87XG4gICAgdmFyIGkgPSBtLmNhbGwobyksIHIsIGFyID0gW10sIGU7XG4gICAgdHJ5IHtcbiAgICAgICAgd2hpbGUgKChuID09PSB2b2lkIDAgfHwgbi0tID4gMCkgJiYgIShyID0gaS5uZXh0KCkpLmRvbmUpIGFyLnB1c2goci52YWx1ZSk7XG4gICAgfVxuICAgIGNhdGNoIChlcnJvcikgeyBlID0geyBlcnJvcjogZXJyb3IgfTsgfVxuICAgIGZpbmFsbHkge1xuICAgICAgICB0cnkge1xuICAgICAgICAgICAgaWYgKHIgJiYgIXIuZG9uZSAmJiAobSA9IGlbXCJyZXR1cm5cIl0pKSBtLmNhbGwoaSk7XG4gICAgICAgIH1cbiAgICAgICAgZmluYWxseSB7IGlmIChlKSB0aHJvdyBlLmVycm9yOyB9XG4gICAgfVxuICAgIHJldHVybiBhcjtcbn07XG52YXIgX19zcHJlYWRBcnJheSA9ICh0aGlzICYmIHRoaXMuX19zcHJlYWRBcnJheSkgfHwgZnVuY3Rpb24gKHRvLCBmcm9tKSB7XG4gICAgZm9yICh2YXIgaSA9IDAsIGlsID0gZnJvbS5sZW5ndGgsIGogPSB0by5sZW5ndGg7IGkgPCBpbDsgaSsrLCBqKyspXG4gICAgICAgIHRvW2pdID0gZnJvbVtpXTtcbiAgICByZXR1cm4gdG87XG59O1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuZXhwb3J0cy5yYWNlV2l0aCA9IHZvaWQgMDtcbnZhciByYWNlXzEgPSByZXF1aXJlKFwiLi4vb2JzZXJ2YWJsZS9yYWNlXCIpO1xudmFyIGxpZnRfMSA9IHJlcXVpcmUoXCIuLi91dGlsL2xpZnRcIik7XG52YXIgaWRlbnRpdHlfMSA9IHJlcXVpcmUoXCIuLi91dGlsL2lkZW50aXR5XCIpO1xuZnVuY3Rpb24gcmFjZVdpdGgoKSB7XG4gICAgdmFyIG90aGVyU291cmNlcyA9IFtdO1xuICAgIGZvciAodmFyIF9pID0gMDsgX2kgPCBhcmd1bWVudHMubGVuZ3RoOyBfaSsrKSB7XG4gICAgICAgIG90aGVyU291cmNlc1tfaV0gPSBhcmd1bWVudHNbX2ldO1xuICAgIH1cbiAgICByZXR1cm4gIW90aGVyU291cmNlcy5sZW5ndGhcbiAgICAgICAgPyBpZGVudGl0eV8xLmlkZW50aXR5XG4gICAgICAgIDogbGlmdF8xLm9wZXJhdGUoZnVuY3Rpb24gKHNvdXJjZSwgc3Vic2NyaWJlcikge1xuICAgICAgICAgICAgcmFjZV8xLnJhY2VJbml0KF9fc3ByZWFkQXJyYXkoW3NvdXJjZV0sIF9fcmVhZChvdGhlclNvdXJjZXMpKSkoc3Vic2NyaWJlcik7XG4gICAgICAgIH0pO1xufVxuZXhwb3J0cy5yYWNlV2l0aCA9IHJhY2VXaXRoO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9cmFjZVdpdGguanMubWFwIiwiXCJ1c2Ugc3RyaWN0XCI7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5leHBvcnRzLnJlZHVjZSA9IHZvaWQgMDtcbnZhciBzY2FuSW50ZXJuYWxzXzEgPSByZXF1aXJlKFwiLi9zY2FuSW50ZXJuYWxzXCIpO1xudmFyIGxpZnRfMSA9IHJlcXVpcmUoXCIuLi91dGlsL2xpZnRcIik7XG5mdW5jdGlvbiByZWR1Y2UoYWNjdW11bGF0b3IsIHNlZWQpIHtcbiAgICByZXR1cm4gbGlmdF8xLm9wZXJhdGUoc2NhbkludGVybmFsc18xLnNjYW5JbnRlcm5hbHMoYWNjdW11bGF0b3IsIHNlZWQsIGFyZ3VtZW50cy5sZW5ndGggPj0gMiwgZmFsc2UsIHRydWUpKTtcbn1cbmV4cG9ydHMucmVkdWNlID0gcmVkdWNlO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9cmVkdWNlLmpzLm1hcCIsIlwidXNlIHN0cmljdFwiO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuZXhwb3J0cy5yZWZDb3VudCA9IHZvaWQgMDtcbnZhciBsaWZ0XzEgPSByZXF1aXJlKFwiLi4vdXRpbC9saWZ0XCIpO1xudmFyIE9wZXJhdG9yU3Vic2NyaWJlcl8xID0gcmVxdWlyZShcIi4vT3BlcmF0b3JTdWJzY3JpYmVyXCIpO1xuZnVuY3Rpb24gcmVmQ291bnQoKSB7XG4gICAgcmV0dXJuIGxpZnRfMS5vcGVyYXRlKGZ1bmN0aW9uIChzb3VyY2UsIHN1YnNjcmliZXIpIHtcbiAgICAgICAgdmFyIGNvbm5lY3Rpb24gPSBudWxsO1xuICAgICAgICBzb3VyY2UuX3JlZkNvdW50Kys7XG4gICAgICAgIHZhciByZWZDb3VudGVyID0gT3BlcmF0b3JTdWJzY3JpYmVyXzEuY3JlYXRlT3BlcmF0b3JTdWJzY3JpYmVyKHN1YnNjcmliZXIsIHVuZGVmaW5lZCwgdW5kZWZpbmVkLCB1bmRlZmluZWQsIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIGlmICghc291cmNlIHx8IHNvdXJjZS5fcmVmQ291bnQgPD0gMCB8fCAwIDwgLS1zb3VyY2UuX3JlZkNvdW50KSB7XG4gICAgICAgICAgICAgICAgY29ubmVjdGlvbiA9IG51bGw7XG4gICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgdmFyIHNoYXJlZENvbm5lY3Rpb24gPSBzb3VyY2UuX2Nvbm5lY3Rpb247XG4gICAgICAgICAgICB2YXIgY29ubiA9IGNvbm5lY3Rpb247XG4gICAgICAgICAgICBjb25uZWN0aW9uID0gbnVsbDtcbiAgICAgICAgICAgIGlmIChzaGFyZWRDb25uZWN0aW9uICYmICghY29ubiB8fCBzaGFyZWRDb25uZWN0aW9uID09PSBjb25uKSkge1xuICAgICAgICAgICAgICAgIHNoYXJlZENvbm5lY3Rpb24udW5zdWJzY3JpYmUoKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHN1YnNjcmliZXIudW5zdWJzY3JpYmUoKTtcbiAgICAgICAgfSk7XG4gICAgICAgIHNvdXJjZS5zdWJzY3JpYmUocmVmQ291bnRlcik7XG4gICAgICAgIGlmICghcmVmQ291bnRlci5jbG9zZWQpIHtcbiAgICAgICAgICAgIGNvbm5lY3Rpb24gPSBzb3VyY2UuY29ubmVjdCgpO1xuICAgICAgICB9XG4gICAgfSk7XG59XG5leHBvcnRzLnJlZkNvdW50ID0gcmVmQ291bnQ7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1yZWZDb3VudC5qcy5tYXAiLCJcInVzZSBzdHJpY3RcIjtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmV4cG9ydHMucmVwZWF0ID0gdm9pZCAwO1xudmFyIGVtcHR5XzEgPSByZXF1aXJlKFwiLi4vb2JzZXJ2YWJsZS9lbXB0eVwiKTtcbnZhciBsaWZ0XzEgPSByZXF1aXJlKFwiLi4vdXRpbC9saWZ0XCIpO1xudmFyIE9wZXJhdG9yU3Vic2NyaWJlcl8xID0gcmVxdWlyZShcIi4vT3BlcmF0b3JTdWJzY3JpYmVyXCIpO1xudmFyIGlubmVyRnJvbV8xID0gcmVxdWlyZShcIi4uL29ic2VydmFibGUvaW5uZXJGcm9tXCIpO1xudmFyIHRpbWVyXzEgPSByZXF1aXJlKFwiLi4vb2JzZXJ2YWJsZS90aW1lclwiKTtcbmZ1bmN0aW9uIHJlcGVhdChjb3VudE9yQ29uZmlnKSB7XG4gICAgdmFyIF9hO1xuICAgIHZhciBjb3VudCA9IEluZmluaXR5O1xuICAgIHZhciBkZWxheTtcbiAgICBpZiAoY291bnRPckNvbmZpZyAhPSBudWxsKSB7XG4gICAgICAgIGlmICh0eXBlb2YgY291bnRPckNvbmZpZyA9PT0gJ29iamVjdCcpIHtcbiAgICAgICAgICAgIChfYSA9IGNvdW50T3JDb25maWcuY291bnQsIGNvdW50ID0gX2EgPT09IHZvaWQgMCA/IEluZmluaXR5IDogX2EsIGRlbGF5ID0gY291bnRPckNvbmZpZy5kZWxheSk7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICBjb3VudCA9IGNvdW50T3JDb25maWc7XG4gICAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIGNvdW50IDw9IDBcbiAgICAgICAgPyBmdW5jdGlvbiAoKSB7IHJldHVybiBlbXB0eV8xLkVNUFRZOyB9XG4gICAgICAgIDogbGlmdF8xLm9wZXJhdGUoZnVuY3Rpb24gKHNvdXJjZSwgc3Vic2NyaWJlcikge1xuICAgICAgICAgICAgdmFyIHNvRmFyID0gMDtcbiAgICAgICAgICAgIHZhciBzb3VyY2VTdWI7XG4gICAgICAgICAgICB2YXIgcmVzdWJzY3JpYmUgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgc291cmNlU3ViID09PSBudWxsIHx8IHNvdXJjZVN1YiA9PT0gdm9pZCAwID8gdm9pZCAwIDogc291cmNlU3ViLnVuc3Vic2NyaWJlKCk7XG4gICAgICAgICAgICAgICAgc291cmNlU3ViID0gbnVsbDtcbiAgICAgICAgICAgICAgICBpZiAoZGVsYXkgIT0gbnVsbCkge1xuICAgICAgICAgICAgICAgICAgICB2YXIgbm90aWZpZXIgPSB0eXBlb2YgZGVsYXkgPT09ICdudW1iZXInID8gdGltZXJfMS50aW1lcihkZWxheSkgOiBpbm5lckZyb21fMS5pbm5lckZyb20oZGVsYXkoc29GYXIpKTtcbiAgICAgICAgICAgICAgICAgICAgdmFyIG5vdGlmaWVyU3Vic2NyaWJlcl8xID0gT3BlcmF0b3JTdWJzY3JpYmVyXzEuY3JlYXRlT3BlcmF0b3JTdWJzY3JpYmVyKHN1YnNjcmliZXIsIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIG5vdGlmaWVyU3Vic2NyaWJlcl8xLnVuc3Vic2NyaWJlKCk7XG4gICAgICAgICAgICAgICAgICAgICAgICBzdWJzY3JpYmVUb1NvdXJjZSgpO1xuICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICAgICAgbm90aWZpZXIuc3Vic2NyaWJlKG5vdGlmaWVyU3Vic2NyaWJlcl8xKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIHN1YnNjcmliZVRvU291cmNlKCk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfTtcbiAgICAgICAgICAgIHZhciBzdWJzY3JpYmVUb1NvdXJjZSA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICB2YXIgc3luY1Vuc3ViID0gZmFsc2U7XG4gICAgICAgICAgICAgICAgc291cmNlU3ViID0gc291cmNlLnN1YnNjcmliZShPcGVyYXRvclN1YnNjcmliZXJfMS5jcmVhdGVPcGVyYXRvclN1YnNjcmliZXIoc3Vic2NyaWJlciwgdW5kZWZpbmVkLCBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgICAgIGlmICgrK3NvRmFyIDwgY291bnQpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChzb3VyY2VTdWIpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXN1YnNjcmliZSgpO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgc3luY1Vuc3ViID0gdHJ1ZTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHN1YnNjcmliZXIuY29tcGxldGUoKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH0pKTtcbiAgICAgICAgICAgICAgICBpZiAoc3luY1Vuc3ViKSB7XG4gICAgICAgICAgICAgICAgICAgIHJlc3Vic2NyaWJlKCk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfTtcbiAgICAgICAgICAgIHN1YnNjcmliZVRvU291cmNlKCk7XG4gICAgICAgIH0pO1xufVxuZXhwb3J0cy5yZXBlYXQgPSByZXBlYXQ7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1yZXBlYXQuanMubWFwIiwiXCJ1c2Ugc3RyaWN0XCI7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5leHBvcnRzLnJlcGVhdFdoZW4gPSB2b2lkIDA7XG52YXIgaW5uZXJGcm9tXzEgPSByZXF1aXJlKFwiLi4vb2JzZXJ2YWJsZS9pbm5lckZyb21cIik7XG52YXIgU3ViamVjdF8xID0gcmVxdWlyZShcIi4uL1N1YmplY3RcIik7XG52YXIgbGlmdF8xID0gcmVxdWlyZShcIi4uL3V0aWwvbGlmdFwiKTtcbnZhciBPcGVyYXRvclN1YnNjcmliZXJfMSA9IHJlcXVpcmUoXCIuL09wZXJhdG9yU3Vic2NyaWJlclwiKTtcbmZ1bmN0aW9uIHJlcGVhdFdoZW4obm90aWZpZXIpIHtcbiAgICByZXR1cm4gbGlmdF8xLm9wZXJhdGUoZnVuY3Rpb24gKHNvdXJjZSwgc3Vic2NyaWJlcikge1xuICAgICAgICB2YXIgaW5uZXJTdWI7XG4gICAgICAgIHZhciBzeW5jUmVzdWIgPSBmYWxzZTtcbiAgICAgICAgdmFyIGNvbXBsZXRpb25zJDtcbiAgICAgICAgdmFyIGlzTm90aWZpZXJDb21wbGV0ZSA9IGZhbHNlO1xuICAgICAgICB2YXIgaXNNYWluQ29tcGxldGUgPSBmYWxzZTtcbiAgICAgICAgdmFyIGNoZWNrQ29tcGxldGUgPSBmdW5jdGlvbiAoKSB7IHJldHVybiBpc01haW5Db21wbGV0ZSAmJiBpc05vdGlmaWVyQ29tcGxldGUgJiYgKHN1YnNjcmliZXIuY29tcGxldGUoKSwgdHJ1ZSk7IH07XG4gICAgICAgIHZhciBnZXRDb21wbGV0aW9uU3ViamVjdCA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIGlmICghY29tcGxldGlvbnMkKSB7XG4gICAgICAgICAgICAgICAgY29tcGxldGlvbnMkID0gbmV3IFN1YmplY3RfMS5TdWJqZWN0KCk7XG4gICAgICAgICAgICAgICAgaW5uZXJGcm9tXzEuaW5uZXJGcm9tKG5vdGlmaWVyKGNvbXBsZXRpb25zJCkpLnN1YnNjcmliZShPcGVyYXRvclN1YnNjcmliZXJfMS5jcmVhdGVPcGVyYXRvclN1YnNjcmliZXIoc3Vic2NyaWJlciwgZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgICAgICBpZiAoaW5uZXJTdWIpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHN1YnNjcmliZUZvclJlcGVhdFdoZW4oKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHN5bmNSZXN1YiA9IHRydWU7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9LCBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgICAgIGlzTm90aWZpZXJDb21wbGV0ZSA9IHRydWU7XG4gICAgICAgICAgICAgICAgICAgIGNoZWNrQ29tcGxldGUoKTtcbiAgICAgICAgICAgICAgICB9KSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4gY29tcGxldGlvbnMkO1xuICAgICAgICB9O1xuICAgICAgICB2YXIgc3Vic2NyaWJlRm9yUmVwZWF0V2hlbiA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIGlzTWFpbkNvbXBsZXRlID0gZmFsc2U7XG4gICAgICAgICAgICBpbm5lclN1YiA9IHNvdXJjZS5zdWJzY3JpYmUoT3BlcmF0b3JTdWJzY3JpYmVyXzEuY3JlYXRlT3BlcmF0b3JTdWJzY3JpYmVyKHN1YnNjcmliZXIsIHVuZGVmaW5lZCwgZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgIGlzTWFpbkNvbXBsZXRlID0gdHJ1ZTtcbiAgICAgICAgICAgICAgICAhY2hlY2tDb21wbGV0ZSgpICYmIGdldENvbXBsZXRpb25TdWJqZWN0KCkubmV4dCgpO1xuICAgICAgICAgICAgfSkpO1xuICAgICAgICAgICAgaWYgKHN5bmNSZXN1Yikge1xuICAgICAgICAgICAgICAgIGlubmVyU3ViLnVuc3Vic2NyaWJlKCk7XG4gICAgICAgICAgICAgICAgaW5uZXJTdWIgPSBudWxsO1xuICAgICAgICAgICAgICAgIHN5bmNSZXN1YiA9IGZhbHNlO1xuICAgICAgICAgICAgICAgIHN1YnNjcmliZUZvclJlcGVhdFdoZW4oKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfTtcbiAgICAgICAgc3Vic2NyaWJlRm9yUmVwZWF0V2hlbigpO1xuICAgIH0pO1xufVxuZXhwb3J0cy5yZXBlYXRXaGVuID0gcmVwZWF0V2hlbjtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPXJlcGVhdFdoZW4uanMubWFwIiwiXCJ1c2Ugc3RyaWN0XCI7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5leHBvcnRzLnJldHJ5ID0gdm9pZCAwO1xudmFyIGxpZnRfMSA9IHJlcXVpcmUoXCIuLi91dGlsL2xpZnRcIik7XG52YXIgT3BlcmF0b3JTdWJzY3JpYmVyXzEgPSByZXF1aXJlKFwiLi9PcGVyYXRvclN1YnNjcmliZXJcIik7XG52YXIgaWRlbnRpdHlfMSA9IHJlcXVpcmUoXCIuLi91dGlsL2lkZW50aXR5XCIpO1xudmFyIHRpbWVyXzEgPSByZXF1aXJlKFwiLi4vb2JzZXJ2YWJsZS90aW1lclwiKTtcbnZhciBpbm5lckZyb21fMSA9IHJlcXVpcmUoXCIuLi9vYnNlcnZhYmxlL2lubmVyRnJvbVwiKTtcbmZ1bmN0aW9uIHJldHJ5KGNvbmZpZ09yQ291bnQpIHtcbiAgICBpZiAoY29uZmlnT3JDb3VudCA9PT0gdm9pZCAwKSB7IGNvbmZpZ09yQ291bnQgPSBJbmZpbml0eTsgfVxuICAgIHZhciBjb25maWc7XG4gICAgaWYgKGNvbmZpZ09yQ291bnQgJiYgdHlwZW9mIGNvbmZpZ09yQ291bnQgPT09ICdvYmplY3QnKSB7XG4gICAgICAgIGNvbmZpZyA9IGNvbmZpZ09yQ291bnQ7XG4gICAgfVxuICAgIGVsc2Uge1xuICAgICAgICBjb25maWcgPSB7XG4gICAgICAgICAgICBjb3VudDogY29uZmlnT3JDb3VudCxcbiAgICAgICAgfTtcbiAgICB9XG4gICAgdmFyIF9hID0gY29uZmlnLmNvdW50LCBjb3VudCA9IF9hID09PSB2b2lkIDAgPyBJbmZpbml0eSA6IF9hLCBkZWxheSA9IGNvbmZpZy5kZWxheSwgX2IgPSBjb25maWcucmVzZXRPblN1Y2Nlc3MsIHJlc2V0T25TdWNjZXNzID0gX2IgPT09IHZvaWQgMCA/IGZhbHNlIDogX2I7XG4gICAgcmV0dXJuIGNvdW50IDw9IDBcbiAgICAgICAgPyBpZGVudGl0eV8xLmlkZW50aXR5XG4gICAgICAgIDogbGlmdF8xLm9wZXJhdGUoZnVuY3Rpb24gKHNvdXJjZSwgc3Vic2NyaWJlcikge1xuICAgICAgICAgICAgdmFyIHNvRmFyID0gMDtcbiAgICAgICAgICAgIHZhciBpbm5lclN1YjtcbiAgICAgICAgICAgIHZhciBzdWJzY3JpYmVGb3JSZXRyeSA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICB2YXIgc3luY1Vuc3ViID0gZmFsc2U7XG4gICAgICAgICAgICAgICAgaW5uZXJTdWIgPSBzb3VyY2Uuc3Vic2NyaWJlKE9wZXJhdG9yU3Vic2NyaWJlcl8xLmNyZWF0ZU9wZXJhdG9yU3Vic2NyaWJlcihzdWJzY3JpYmVyLCBmdW5jdGlvbiAodmFsdWUpIHtcbiAgICAgICAgICAgICAgICAgICAgaWYgKHJlc2V0T25TdWNjZXNzKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBzb0ZhciA9IDA7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgc3Vic2NyaWJlci5uZXh0KHZhbHVlKTtcbiAgICAgICAgICAgICAgICB9LCB1bmRlZmluZWQsIGZ1bmN0aW9uIChlcnIpIHtcbiAgICAgICAgICAgICAgICAgICAgaWYgKHNvRmFyKysgPCBjb3VudCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgdmFyIHJlc3ViXzEgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGlubmVyU3ViKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlubmVyU3ViLnVuc3Vic2NyaWJlKCk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlubmVyU3ViID0gbnVsbDtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgc3Vic2NyaWJlRm9yUmV0cnkoKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHN5bmNVbnN1YiA9IHRydWU7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgfTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChkZWxheSAhPSBudWxsKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIG5vdGlmaWVyID0gdHlwZW9mIGRlbGF5ID09PSAnbnVtYmVyJyA/IHRpbWVyXzEudGltZXIoZGVsYXkpIDogaW5uZXJGcm9tXzEuaW5uZXJGcm9tKGRlbGF5KGVyciwgc29GYXIpKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgbm90aWZpZXJTdWJzY3JpYmVyXzEgPSBPcGVyYXRvclN1YnNjcmliZXJfMS5jcmVhdGVPcGVyYXRvclN1YnNjcmliZXIoc3Vic2NyaWJlciwgZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBub3RpZmllclN1YnNjcmliZXJfMS51bnN1YnNjcmliZSgpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXN1Yl8xKCk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfSwgZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzdWJzY3JpYmVyLmNvbXBsZXRlKCk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbm90aWZpZXIuc3Vic2NyaWJlKG5vdGlmaWVyU3Vic2NyaWJlcl8xKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJlc3ViXzEoKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHN1YnNjcmliZXIuZXJyb3IoZXJyKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH0pKTtcbiAgICAgICAgICAgICAgICBpZiAoc3luY1Vuc3ViKSB7XG4gICAgICAgICAgICAgICAgICAgIGlubmVyU3ViLnVuc3Vic2NyaWJlKCk7XG4gICAgICAgICAgICAgICAgICAgIGlubmVyU3ViID0gbnVsbDtcbiAgICAgICAgICAgICAgICAgICAgc3Vic2NyaWJlRm9yUmV0cnkoKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9O1xuICAgICAgICAgICAgc3Vic2NyaWJlRm9yUmV0cnkoKTtcbiAgICAgICAgfSk7XG59XG5leHBvcnRzLnJldHJ5ID0gcmV0cnk7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1yZXRyeS5qcy5tYXAiLCJcInVzZSBzdHJpY3RcIjtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmV4cG9ydHMucmV0cnlXaGVuID0gdm9pZCAwO1xudmFyIGlubmVyRnJvbV8xID0gcmVxdWlyZShcIi4uL29ic2VydmFibGUvaW5uZXJGcm9tXCIpO1xudmFyIFN1YmplY3RfMSA9IHJlcXVpcmUoXCIuLi9TdWJqZWN0XCIpO1xudmFyIGxpZnRfMSA9IHJlcXVpcmUoXCIuLi91dGlsL2xpZnRcIik7XG52YXIgT3BlcmF0b3JTdWJzY3JpYmVyXzEgPSByZXF1aXJlKFwiLi9PcGVyYXRvclN1YnNjcmliZXJcIik7XG5mdW5jdGlvbiByZXRyeVdoZW4obm90aWZpZXIpIHtcbiAgICByZXR1cm4gbGlmdF8xLm9wZXJhdGUoZnVuY3Rpb24gKHNvdXJjZSwgc3Vic2NyaWJlcikge1xuICAgICAgICB2YXIgaW5uZXJTdWI7XG4gICAgICAgIHZhciBzeW5jUmVzdWIgPSBmYWxzZTtcbiAgICAgICAgdmFyIGVycm9ycyQ7XG4gICAgICAgIHZhciBzdWJzY3JpYmVGb3JSZXRyeVdoZW4gPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICBpbm5lclN1YiA9IHNvdXJjZS5zdWJzY3JpYmUoT3BlcmF0b3JTdWJzY3JpYmVyXzEuY3JlYXRlT3BlcmF0b3JTdWJzY3JpYmVyKHN1YnNjcmliZXIsIHVuZGVmaW5lZCwgdW5kZWZpbmVkLCBmdW5jdGlvbiAoZXJyKSB7XG4gICAgICAgICAgICAgICAgaWYgKCFlcnJvcnMkKSB7XG4gICAgICAgICAgICAgICAgICAgIGVycm9ycyQgPSBuZXcgU3ViamVjdF8xLlN1YmplY3QoKTtcbiAgICAgICAgICAgICAgICAgICAgaW5uZXJGcm9tXzEuaW5uZXJGcm9tKG5vdGlmaWVyKGVycm9ycyQpKS5zdWJzY3JpYmUoT3BlcmF0b3JTdWJzY3JpYmVyXzEuY3JlYXRlT3BlcmF0b3JTdWJzY3JpYmVyKHN1YnNjcmliZXIsIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBpbm5lclN1YiA/IHN1YnNjcmliZUZvclJldHJ5V2hlbigpIDogKHN5bmNSZXN1YiA9IHRydWUpO1xuICAgICAgICAgICAgICAgICAgICB9KSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGlmIChlcnJvcnMkKSB7XG4gICAgICAgICAgICAgICAgICAgIGVycm9ycyQubmV4dChlcnIpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0pKTtcbiAgICAgICAgICAgIGlmIChzeW5jUmVzdWIpIHtcbiAgICAgICAgICAgICAgICBpbm5lclN1Yi51bnN1YnNjcmliZSgpO1xuICAgICAgICAgICAgICAgIGlubmVyU3ViID0gbnVsbDtcbiAgICAgICAgICAgICAgICBzeW5jUmVzdWIgPSBmYWxzZTtcbiAgICAgICAgICAgICAgICBzdWJzY3JpYmVGb3JSZXRyeVdoZW4oKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfTtcbiAgICAgICAgc3Vic2NyaWJlRm9yUmV0cnlXaGVuKCk7XG4gICAgfSk7XG59XG5leHBvcnRzLnJldHJ5V2hlbiA9IHJldHJ5V2hlbjtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPXJldHJ5V2hlbi5qcy5tYXAiLCJcInVzZSBzdHJpY3RcIjtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmV4cG9ydHMuc2FtcGxlID0gdm9pZCAwO1xudmFyIGlubmVyRnJvbV8xID0gcmVxdWlyZShcIi4uL29ic2VydmFibGUvaW5uZXJGcm9tXCIpO1xudmFyIGxpZnRfMSA9IHJlcXVpcmUoXCIuLi91dGlsL2xpZnRcIik7XG52YXIgbm9vcF8xID0gcmVxdWlyZShcIi4uL3V0aWwvbm9vcFwiKTtcbnZhciBPcGVyYXRvclN1YnNjcmliZXJfMSA9IHJlcXVpcmUoXCIuL09wZXJhdG9yU3Vic2NyaWJlclwiKTtcbmZ1bmN0aW9uIHNhbXBsZShub3RpZmllcikge1xuICAgIHJldHVybiBsaWZ0XzEub3BlcmF0ZShmdW5jdGlvbiAoc291cmNlLCBzdWJzY3JpYmVyKSB7XG4gICAgICAgIHZhciBoYXNWYWx1ZSA9IGZhbHNlO1xuICAgICAgICB2YXIgbGFzdFZhbHVlID0gbnVsbDtcbiAgICAgICAgc291cmNlLnN1YnNjcmliZShPcGVyYXRvclN1YnNjcmliZXJfMS5jcmVhdGVPcGVyYXRvclN1YnNjcmliZXIoc3Vic2NyaWJlciwgZnVuY3Rpb24gKHZhbHVlKSB7XG4gICAgICAgICAgICBoYXNWYWx1ZSA9IHRydWU7XG4gICAgICAgICAgICBsYXN0VmFsdWUgPSB2YWx1ZTtcbiAgICAgICAgfSkpO1xuICAgICAgICBpbm5lckZyb21fMS5pbm5lckZyb20obm90aWZpZXIpLnN1YnNjcmliZShPcGVyYXRvclN1YnNjcmliZXJfMS5jcmVhdGVPcGVyYXRvclN1YnNjcmliZXIoc3Vic2NyaWJlciwgZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgaWYgKGhhc1ZhbHVlKSB7XG4gICAgICAgICAgICAgICAgaGFzVmFsdWUgPSBmYWxzZTtcbiAgICAgICAgICAgICAgICB2YXIgdmFsdWUgPSBsYXN0VmFsdWU7XG4gICAgICAgICAgICAgICAgbGFzdFZhbHVlID0gbnVsbDtcbiAgICAgICAgICAgICAgICBzdWJzY3JpYmVyLm5leHQodmFsdWUpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9LCBub29wXzEubm9vcCkpO1xuICAgIH0pO1xufVxuZXhwb3J0cy5zYW1wbGUgPSBzYW1wbGU7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1zYW1wbGUuanMubWFwIiwiXCJ1c2Ugc3RyaWN0XCI7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5leHBvcnRzLnNhbXBsZVRpbWUgPSB2b2lkIDA7XG52YXIgYXN5bmNfMSA9IHJlcXVpcmUoXCIuLi9zY2hlZHVsZXIvYXN5bmNcIik7XG52YXIgc2FtcGxlXzEgPSByZXF1aXJlKFwiLi9zYW1wbGVcIik7XG52YXIgaW50ZXJ2YWxfMSA9IHJlcXVpcmUoXCIuLi9vYnNlcnZhYmxlL2ludGVydmFsXCIpO1xuZnVuY3Rpb24gc2FtcGxlVGltZShwZXJpb2QsIHNjaGVkdWxlcikge1xuICAgIGlmIChzY2hlZHVsZXIgPT09IHZvaWQgMCkgeyBzY2hlZHVsZXIgPSBhc3luY18xLmFzeW5jU2NoZWR1bGVyOyB9XG4gICAgcmV0dXJuIHNhbXBsZV8xLnNhbXBsZShpbnRlcnZhbF8xLmludGVydmFsKHBlcmlvZCwgc2NoZWR1bGVyKSk7XG59XG5leHBvcnRzLnNhbXBsZVRpbWUgPSBzYW1wbGVUaW1lO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9c2FtcGxlVGltZS5qcy5tYXAiLCJcInVzZSBzdHJpY3RcIjtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmV4cG9ydHMuc2NhbiA9IHZvaWQgMDtcbnZhciBsaWZ0XzEgPSByZXF1aXJlKFwiLi4vdXRpbC9saWZ0XCIpO1xudmFyIHNjYW5JbnRlcm5hbHNfMSA9IHJlcXVpcmUoXCIuL3NjYW5JbnRlcm5hbHNcIik7XG5mdW5jdGlvbiBzY2FuKGFjY3VtdWxhdG9yLCBzZWVkKSB7XG4gICAgcmV0dXJuIGxpZnRfMS5vcGVyYXRlKHNjYW5JbnRlcm5hbHNfMS5zY2FuSW50ZXJuYWxzKGFjY3VtdWxhdG9yLCBzZWVkLCBhcmd1bWVudHMubGVuZ3RoID49IDIsIHRydWUpKTtcbn1cbmV4cG9ydHMuc2NhbiA9IHNjYW47XG4vLyMgc291cmNlTWFwcGluZ1VSTD1zY2FuLmpzLm1hcCIsIlwidXNlIHN0cmljdFwiO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuZXhwb3J0cy5zY2FuSW50ZXJuYWxzID0gdm9pZCAwO1xudmFyIE9wZXJhdG9yU3Vic2NyaWJlcl8xID0gcmVxdWlyZShcIi4vT3BlcmF0b3JTdWJzY3JpYmVyXCIpO1xuZnVuY3Rpb24gc2NhbkludGVybmFscyhhY2N1bXVsYXRvciwgc2VlZCwgaGFzU2VlZCwgZW1pdE9uTmV4dCwgZW1pdEJlZm9yZUNvbXBsZXRlKSB7XG4gICAgcmV0dXJuIGZ1bmN0aW9uIChzb3VyY2UsIHN1YnNjcmliZXIpIHtcbiAgICAgICAgdmFyIGhhc1N0YXRlID0gaGFzU2VlZDtcbiAgICAgICAgdmFyIHN0YXRlID0gc2VlZDtcbiAgICAgICAgdmFyIGluZGV4ID0gMDtcbiAgICAgICAgc291cmNlLnN1YnNjcmliZShPcGVyYXRvclN1YnNjcmliZXJfMS5jcmVhdGVPcGVyYXRvclN1YnNjcmliZXIoc3Vic2NyaWJlciwgZnVuY3Rpb24gKHZhbHVlKSB7XG4gICAgICAgICAgICB2YXIgaSA9IGluZGV4Kys7XG4gICAgICAgICAgICBzdGF0ZSA9IGhhc1N0YXRlXG4gICAgICAgICAgICAgICAgP1xuICAgICAgICAgICAgICAgICAgICBhY2N1bXVsYXRvcihzdGF0ZSwgdmFsdWUsIGkpXG4gICAgICAgICAgICAgICAgOlxuICAgICAgICAgICAgICAgICAgICAoKGhhc1N0YXRlID0gdHJ1ZSksIHZhbHVlKTtcbiAgICAgICAgICAgIGVtaXRPbk5leHQgJiYgc3Vic2NyaWJlci5uZXh0KHN0YXRlKTtcbiAgICAgICAgfSwgZW1pdEJlZm9yZUNvbXBsZXRlICYmXG4gICAgICAgICAgICAoZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgIGhhc1N0YXRlICYmIHN1YnNjcmliZXIubmV4dChzdGF0ZSk7XG4gICAgICAgICAgICAgICAgc3Vic2NyaWJlci5jb21wbGV0ZSgpO1xuICAgICAgICAgICAgfSkpKTtcbiAgICB9O1xufVxuZXhwb3J0cy5zY2FuSW50ZXJuYWxzID0gc2NhbkludGVybmFscztcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPXNjYW5JbnRlcm5hbHMuanMubWFwIiwiXCJ1c2Ugc3RyaWN0XCI7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5leHBvcnRzLnNlcXVlbmNlRXF1YWwgPSB2b2lkIDA7XG52YXIgbGlmdF8xID0gcmVxdWlyZShcIi4uL3V0aWwvbGlmdFwiKTtcbnZhciBPcGVyYXRvclN1YnNjcmliZXJfMSA9IHJlcXVpcmUoXCIuL09wZXJhdG9yU3Vic2NyaWJlclwiKTtcbnZhciBpbm5lckZyb21fMSA9IHJlcXVpcmUoXCIuLi9vYnNlcnZhYmxlL2lubmVyRnJvbVwiKTtcbmZ1bmN0aW9uIHNlcXVlbmNlRXF1YWwoY29tcGFyZVRvLCBjb21wYXJhdG9yKSB7XG4gICAgaWYgKGNvbXBhcmF0b3IgPT09IHZvaWQgMCkgeyBjb21wYXJhdG9yID0gZnVuY3Rpb24gKGEsIGIpIHsgcmV0dXJuIGEgPT09IGI7IH07IH1cbiAgICByZXR1cm4gbGlmdF8xLm9wZXJhdGUoZnVuY3Rpb24gKHNvdXJjZSwgc3Vic2NyaWJlcikge1xuICAgICAgICB2YXIgYVN0YXRlID0gY3JlYXRlU3RhdGUoKTtcbiAgICAgICAgdmFyIGJTdGF0ZSA9IGNyZWF0ZVN0YXRlKCk7XG4gICAgICAgIHZhciBlbWl0ID0gZnVuY3Rpb24gKGlzRXF1YWwpIHtcbiAgICAgICAgICAgIHN1YnNjcmliZXIubmV4dChpc0VxdWFsKTtcbiAgICAgICAgICAgIHN1YnNjcmliZXIuY29tcGxldGUoKTtcbiAgICAgICAgfTtcbiAgICAgICAgdmFyIGNyZWF0ZVN1YnNjcmliZXIgPSBmdW5jdGlvbiAoc2VsZlN0YXRlLCBvdGhlclN0YXRlKSB7XG4gICAgICAgICAgICB2YXIgc2VxdWVuY2VFcXVhbFN1YnNjcmliZXIgPSBPcGVyYXRvclN1YnNjcmliZXJfMS5jcmVhdGVPcGVyYXRvclN1YnNjcmliZXIoc3Vic2NyaWJlciwgZnVuY3Rpb24gKGEpIHtcbiAgICAgICAgICAgICAgICB2YXIgYnVmZmVyID0gb3RoZXJTdGF0ZS5idWZmZXIsIGNvbXBsZXRlID0gb3RoZXJTdGF0ZS5jb21wbGV0ZTtcbiAgICAgICAgICAgICAgICBpZiAoYnVmZmVyLmxlbmd0aCA9PT0gMCkge1xuICAgICAgICAgICAgICAgICAgICBjb21wbGV0ZSA/IGVtaXQoZmFsc2UpIDogc2VsZlN0YXRlLmJ1ZmZlci5wdXNoKGEpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgIWNvbXBhcmF0b3IoYSwgYnVmZmVyLnNoaWZ0KCkpICYmIGVtaXQoZmFsc2UpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0sIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICBzZWxmU3RhdGUuY29tcGxldGUgPSB0cnVlO1xuICAgICAgICAgICAgICAgIHZhciBjb21wbGV0ZSA9IG90aGVyU3RhdGUuY29tcGxldGUsIGJ1ZmZlciA9IG90aGVyU3RhdGUuYnVmZmVyO1xuICAgICAgICAgICAgICAgIGNvbXBsZXRlICYmIGVtaXQoYnVmZmVyLmxlbmd0aCA9PT0gMCk7XG4gICAgICAgICAgICAgICAgc2VxdWVuY2VFcXVhbFN1YnNjcmliZXIgPT09IG51bGwgfHwgc2VxdWVuY2VFcXVhbFN1YnNjcmliZXIgPT09IHZvaWQgMCA/IHZvaWQgMCA6IHNlcXVlbmNlRXF1YWxTdWJzY3JpYmVyLnVuc3Vic2NyaWJlKCk7XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIHJldHVybiBzZXF1ZW5jZUVxdWFsU3Vic2NyaWJlcjtcbiAgICAgICAgfTtcbiAgICAgICAgc291cmNlLnN1YnNjcmliZShjcmVhdGVTdWJzY3JpYmVyKGFTdGF0ZSwgYlN0YXRlKSk7XG4gICAgICAgIGlubmVyRnJvbV8xLmlubmVyRnJvbShjb21wYXJlVG8pLnN1YnNjcmliZShjcmVhdGVTdWJzY3JpYmVyKGJTdGF0ZSwgYVN0YXRlKSk7XG4gICAgfSk7XG59XG5leHBvcnRzLnNlcXVlbmNlRXF1YWwgPSBzZXF1ZW5jZUVxdWFsO1xuZnVuY3Rpb24gY3JlYXRlU3RhdGUoKSB7XG4gICAgcmV0dXJuIHtcbiAgICAgICAgYnVmZmVyOiBbXSxcbiAgICAgICAgY29tcGxldGU6IGZhbHNlLFxuICAgIH07XG59XG4vLyMgc291cmNlTWFwcGluZ1VSTD1zZXF1ZW5jZUVxdWFsLmpzLm1hcCIsIlwidXNlIHN0cmljdFwiO1xudmFyIF9fcmVhZCA9ICh0aGlzICYmIHRoaXMuX19yZWFkKSB8fCBmdW5jdGlvbiAobywgbikge1xuICAgIHZhciBtID0gdHlwZW9mIFN5bWJvbCA9PT0gXCJmdW5jdGlvblwiICYmIG9bU3ltYm9sLml0ZXJhdG9yXTtcbiAgICBpZiAoIW0pIHJldHVybiBvO1xuICAgIHZhciBpID0gbS5jYWxsKG8pLCByLCBhciA9IFtdLCBlO1xuICAgIHRyeSB7XG4gICAgICAgIHdoaWxlICgobiA9PT0gdm9pZCAwIHx8IG4tLSA+IDApICYmICEociA9IGkubmV4dCgpKS5kb25lKSBhci5wdXNoKHIudmFsdWUpO1xuICAgIH1cbiAgICBjYXRjaCAoZXJyb3IpIHsgZSA9IHsgZXJyb3I6IGVycm9yIH07IH1cbiAgICBmaW5hbGx5IHtcbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgIGlmIChyICYmICFyLmRvbmUgJiYgKG0gPSBpW1wicmV0dXJuXCJdKSkgbS5jYWxsKGkpO1xuICAgICAgICB9XG4gICAgICAgIGZpbmFsbHkgeyBpZiAoZSkgdGhyb3cgZS5lcnJvcjsgfVxuICAgIH1cbiAgICByZXR1cm4gYXI7XG59O1xudmFyIF9fc3ByZWFkQXJyYXkgPSAodGhpcyAmJiB0aGlzLl9fc3ByZWFkQXJyYXkpIHx8IGZ1bmN0aW9uICh0bywgZnJvbSkge1xuICAgIGZvciAodmFyIGkgPSAwLCBpbCA9IGZyb20ubGVuZ3RoLCBqID0gdG8ubGVuZ3RoOyBpIDwgaWw7IGkrKywgaisrKVxuICAgICAgICB0b1tqXSA9IGZyb21baV07XG4gICAgcmV0dXJuIHRvO1xufTtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmV4cG9ydHMuc2hhcmUgPSB2b2lkIDA7XG52YXIgaW5uZXJGcm9tXzEgPSByZXF1aXJlKFwiLi4vb2JzZXJ2YWJsZS9pbm5lckZyb21cIik7XG52YXIgU3ViamVjdF8xID0gcmVxdWlyZShcIi4uL1N1YmplY3RcIik7XG52YXIgU3Vic2NyaWJlcl8xID0gcmVxdWlyZShcIi4uL1N1YnNjcmliZXJcIik7XG52YXIgbGlmdF8xID0gcmVxdWlyZShcIi4uL3V0aWwvbGlmdFwiKTtcbmZ1bmN0aW9uIHNoYXJlKG9wdGlvbnMpIHtcbiAgICBpZiAob3B0aW9ucyA9PT0gdm9pZCAwKSB7IG9wdGlvbnMgPSB7fTsgfVxuICAgIHZhciBfYSA9IG9wdGlvbnMuY29ubmVjdG9yLCBjb25uZWN0b3IgPSBfYSA9PT0gdm9pZCAwID8gZnVuY3Rpb24gKCkgeyByZXR1cm4gbmV3IFN1YmplY3RfMS5TdWJqZWN0KCk7IH0gOiBfYSwgX2IgPSBvcHRpb25zLnJlc2V0T25FcnJvciwgcmVzZXRPbkVycm9yID0gX2IgPT09IHZvaWQgMCA/IHRydWUgOiBfYiwgX2MgPSBvcHRpb25zLnJlc2V0T25Db21wbGV0ZSwgcmVzZXRPbkNvbXBsZXRlID0gX2MgPT09IHZvaWQgMCA/IHRydWUgOiBfYywgX2QgPSBvcHRpb25zLnJlc2V0T25SZWZDb3VudFplcm8sIHJlc2V0T25SZWZDb3VudFplcm8gPSBfZCA9PT0gdm9pZCAwID8gdHJ1ZSA6IF9kO1xuICAgIHJldHVybiBmdW5jdGlvbiAod3JhcHBlclNvdXJjZSkge1xuICAgICAgICB2YXIgY29ubmVjdGlvbjtcbiAgICAgICAgdmFyIHJlc2V0Q29ubmVjdGlvbjtcbiAgICAgICAgdmFyIHN1YmplY3Q7XG4gICAgICAgIHZhciByZWZDb3VudCA9IDA7XG4gICAgICAgIHZhciBoYXNDb21wbGV0ZWQgPSBmYWxzZTtcbiAgICAgICAgdmFyIGhhc0Vycm9yZWQgPSBmYWxzZTtcbiAgICAgICAgdmFyIGNhbmNlbFJlc2V0ID0gZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgcmVzZXRDb25uZWN0aW9uID09PSBudWxsIHx8IHJlc2V0Q29ubmVjdGlvbiA9PT0gdm9pZCAwID8gdm9pZCAwIDogcmVzZXRDb25uZWN0aW9uLnVuc3Vic2NyaWJlKCk7XG4gICAgICAgICAgICByZXNldENvbm5lY3Rpb24gPSB1bmRlZmluZWQ7XG4gICAgICAgIH07XG4gICAgICAgIHZhciByZXNldCA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIGNhbmNlbFJlc2V0KCk7XG4gICAgICAgICAgICBjb25uZWN0aW9uID0gc3ViamVjdCA9IHVuZGVmaW5lZDtcbiAgICAgICAgICAgIGhhc0NvbXBsZXRlZCA9IGhhc0Vycm9yZWQgPSBmYWxzZTtcbiAgICAgICAgfTtcbiAgICAgICAgdmFyIHJlc2V0QW5kVW5zdWJzY3JpYmUgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICB2YXIgY29ubiA9IGNvbm5lY3Rpb247XG4gICAgICAgICAgICByZXNldCgpO1xuICAgICAgICAgICAgY29ubiA9PT0gbnVsbCB8fCBjb25uID09PSB2b2lkIDAgPyB2b2lkIDAgOiBjb25uLnVuc3Vic2NyaWJlKCk7XG4gICAgICAgIH07XG4gICAgICAgIHJldHVybiBsaWZ0XzEub3BlcmF0ZShmdW5jdGlvbiAoc291cmNlLCBzdWJzY3JpYmVyKSB7XG4gICAgICAgICAgICByZWZDb3VudCsrO1xuICAgICAgICAgICAgaWYgKCFoYXNFcnJvcmVkICYmICFoYXNDb21wbGV0ZWQpIHtcbiAgICAgICAgICAgICAgICBjYW5jZWxSZXNldCgpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgdmFyIGRlc3QgPSAoc3ViamVjdCA9IHN1YmplY3QgIT09IG51bGwgJiYgc3ViamVjdCAhPT0gdm9pZCAwID8gc3ViamVjdCA6IGNvbm5lY3RvcigpKTtcbiAgICAgICAgICAgIHN1YnNjcmliZXIuYWRkKGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICByZWZDb3VudC0tO1xuICAgICAgICAgICAgICAgIGlmIChyZWZDb3VudCA9PT0gMCAmJiAhaGFzRXJyb3JlZCAmJiAhaGFzQ29tcGxldGVkKSB7XG4gICAgICAgICAgICAgICAgICAgIHJlc2V0Q29ubmVjdGlvbiA9IGhhbmRsZVJlc2V0KHJlc2V0QW5kVW5zdWJzY3JpYmUsIHJlc2V0T25SZWZDb3VudFplcm8pO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgZGVzdC5zdWJzY3JpYmUoc3Vic2NyaWJlcik7XG4gICAgICAgICAgICBpZiAoIWNvbm5lY3Rpb24gJiZcbiAgICAgICAgICAgICAgICByZWZDb3VudCA+IDApIHtcbiAgICAgICAgICAgICAgICBjb25uZWN0aW9uID0gbmV3IFN1YnNjcmliZXJfMS5TYWZlU3Vic2NyaWJlcih7XG4gICAgICAgICAgICAgICAgICAgIG5leHQ6IGZ1bmN0aW9uICh2YWx1ZSkgeyByZXR1cm4gZGVzdC5uZXh0KHZhbHVlKTsgfSxcbiAgICAgICAgICAgICAgICAgICAgZXJyb3I6IGZ1bmN0aW9uIChlcnIpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGhhc0Vycm9yZWQgPSB0cnVlO1xuICAgICAgICAgICAgICAgICAgICAgICAgY2FuY2VsUmVzZXQoKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJlc2V0Q29ubmVjdGlvbiA9IGhhbmRsZVJlc2V0KHJlc2V0LCByZXNldE9uRXJyb3IsIGVycik7XG4gICAgICAgICAgICAgICAgICAgICAgICBkZXN0LmVycm9yKGVycik7XG4gICAgICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgICAgIGNvbXBsZXRlOiBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBoYXNDb21wbGV0ZWQgPSB0cnVlO1xuICAgICAgICAgICAgICAgICAgICAgICAgY2FuY2VsUmVzZXQoKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJlc2V0Q29ubmVjdGlvbiA9IGhhbmRsZVJlc2V0KHJlc2V0LCByZXNldE9uQ29tcGxldGUpO1xuICAgICAgICAgICAgICAgICAgICAgICAgZGVzdC5jb21wbGV0ZSgpO1xuICAgICAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgIGlubmVyRnJvbV8xLmlubmVyRnJvbShzb3VyY2UpLnN1YnNjcmliZShjb25uZWN0aW9uKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSkod3JhcHBlclNvdXJjZSk7XG4gICAgfTtcbn1cbmV4cG9ydHMuc2hhcmUgPSBzaGFyZTtcbmZ1bmN0aW9uIGhhbmRsZVJlc2V0KHJlc2V0LCBvbikge1xuICAgIHZhciBhcmdzID0gW107XG4gICAgZm9yICh2YXIgX2kgPSAyOyBfaSA8IGFyZ3VtZW50cy5sZW5ndGg7IF9pKyspIHtcbiAgICAgICAgYXJnc1tfaSAtIDJdID0gYXJndW1lbnRzW19pXTtcbiAgICB9XG4gICAgaWYgKG9uID09PSB0cnVlKSB7XG4gICAgICAgIHJlc2V0KCk7XG4gICAgICAgIHJldHVybjtcbiAgICB9XG4gICAgaWYgKG9uID09PSBmYWxzZSkge1xuICAgICAgICByZXR1cm47XG4gICAgfVxuICAgIHZhciBvblN1YnNjcmliZXIgPSBuZXcgU3Vic2NyaWJlcl8xLlNhZmVTdWJzY3JpYmVyKHtcbiAgICAgICAgbmV4dDogZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgb25TdWJzY3JpYmVyLnVuc3Vic2NyaWJlKCk7XG4gICAgICAgICAgICByZXNldCgpO1xuICAgICAgICB9LFxuICAgIH0pO1xuICAgIHJldHVybiBpbm5lckZyb21fMS5pbm5lckZyb20ob24uYXBwbHkodm9pZCAwLCBfX3NwcmVhZEFycmF5KFtdLCBfX3JlYWQoYXJncykpKSkuc3Vic2NyaWJlKG9uU3Vic2NyaWJlcik7XG59XG4vLyMgc291cmNlTWFwcGluZ1VSTD1zaGFyZS5qcy5tYXAiLCJcInVzZSBzdHJpY3RcIjtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmV4cG9ydHMuc2hhcmVSZXBsYXkgPSB2b2lkIDA7XG52YXIgUmVwbGF5U3ViamVjdF8xID0gcmVxdWlyZShcIi4uL1JlcGxheVN1YmplY3RcIik7XG52YXIgc2hhcmVfMSA9IHJlcXVpcmUoXCIuL3NoYXJlXCIpO1xuZnVuY3Rpb24gc2hhcmVSZXBsYXkoY29uZmlnT3JCdWZmZXJTaXplLCB3aW5kb3dUaW1lLCBzY2hlZHVsZXIpIHtcbiAgICB2YXIgX2EsIF9iLCBfYztcbiAgICB2YXIgYnVmZmVyU2l6ZTtcbiAgICB2YXIgcmVmQ291bnQgPSBmYWxzZTtcbiAgICBpZiAoY29uZmlnT3JCdWZmZXJTaXplICYmIHR5cGVvZiBjb25maWdPckJ1ZmZlclNpemUgPT09ICdvYmplY3QnKSB7XG4gICAgICAgIChfYSA9IGNvbmZpZ09yQnVmZmVyU2l6ZS5idWZmZXJTaXplLCBidWZmZXJTaXplID0gX2EgPT09IHZvaWQgMCA/IEluZmluaXR5IDogX2EsIF9iID0gY29uZmlnT3JCdWZmZXJTaXplLndpbmRvd1RpbWUsIHdpbmRvd1RpbWUgPSBfYiA9PT0gdm9pZCAwID8gSW5maW5pdHkgOiBfYiwgX2MgPSBjb25maWdPckJ1ZmZlclNpemUucmVmQ291bnQsIHJlZkNvdW50ID0gX2MgPT09IHZvaWQgMCA/IGZhbHNlIDogX2MsIHNjaGVkdWxlciA9IGNvbmZpZ09yQnVmZmVyU2l6ZS5zY2hlZHVsZXIpO1xuICAgIH1cbiAgICBlbHNlIHtcbiAgICAgICAgYnVmZmVyU2l6ZSA9IChjb25maWdPckJ1ZmZlclNpemUgIT09IG51bGwgJiYgY29uZmlnT3JCdWZmZXJTaXplICE9PSB2b2lkIDAgPyBjb25maWdPckJ1ZmZlclNpemUgOiBJbmZpbml0eSk7XG4gICAgfVxuICAgIHJldHVybiBzaGFyZV8xLnNoYXJlKHtcbiAgICAgICAgY29ubmVjdG9yOiBmdW5jdGlvbiAoKSB7IHJldHVybiBuZXcgUmVwbGF5U3ViamVjdF8xLlJlcGxheVN1YmplY3QoYnVmZmVyU2l6ZSwgd2luZG93VGltZSwgc2NoZWR1bGVyKTsgfSxcbiAgICAgICAgcmVzZXRPbkVycm9yOiB0cnVlLFxuICAgICAgICByZXNldE9uQ29tcGxldGU6IGZhbHNlLFxuICAgICAgICByZXNldE9uUmVmQ291bnRaZXJvOiByZWZDb3VudCxcbiAgICB9KTtcbn1cbmV4cG9ydHMuc2hhcmVSZXBsYXkgPSBzaGFyZVJlcGxheTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPXNoYXJlUmVwbGF5LmpzLm1hcCIsIlwidXNlIHN0cmljdFwiO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuZXhwb3J0cy5zaW5nbGUgPSB2b2lkIDA7XG52YXIgRW1wdHlFcnJvcl8xID0gcmVxdWlyZShcIi4uL3V0aWwvRW1wdHlFcnJvclwiKTtcbnZhciBTZXF1ZW5jZUVycm9yXzEgPSByZXF1aXJlKFwiLi4vdXRpbC9TZXF1ZW5jZUVycm9yXCIpO1xudmFyIE5vdEZvdW5kRXJyb3JfMSA9IHJlcXVpcmUoXCIuLi91dGlsL05vdEZvdW5kRXJyb3JcIik7XG52YXIgbGlmdF8xID0gcmVxdWlyZShcIi4uL3V0aWwvbGlmdFwiKTtcbnZhciBPcGVyYXRvclN1YnNjcmliZXJfMSA9IHJlcXVpcmUoXCIuL09wZXJhdG9yU3Vic2NyaWJlclwiKTtcbmZ1bmN0aW9uIHNpbmdsZShwcmVkaWNhdGUpIHtcbiAgICByZXR1cm4gbGlmdF8xLm9wZXJhdGUoZnVuY3Rpb24gKHNvdXJjZSwgc3Vic2NyaWJlcikge1xuICAgICAgICB2YXIgaGFzVmFsdWUgPSBmYWxzZTtcbiAgICAgICAgdmFyIHNpbmdsZVZhbHVlO1xuICAgICAgICB2YXIgc2VlblZhbHVlID0gZmFsc2U7XG4gICAgICAgIHZhciBpbmRleCA9IDA7XG4gICAgICAgIHNvdXJjZS5zdWJzY3JpYmUoT3BlcmF0b3JTdWJzY3JpYmVyXzEuY3JlYXRlT3BlcmF0b3JTdWJzY3JpYmVyKHN1YnNjcmliZXIsIGZ1bmN0aW9uICh2YWx1ZSkge1xuICAgICAgICAgICAgc2VlblZhbHVlID0gdHJ1ZTtcbiAgICAgICAgICAgIGlmICghcHJlZGljYXRlIHx8IHByZWRpY2F0ZSh2YWx1ZSwgaW5kZXgrKywgc291cmNlKSkge1xuICAgICAgICAgICAgICAgIGhhc1ZhbHVlICYmIHN1YnNjcmliZXIuZXJyb3IobmV3IFNlcXVlbmNlRXJyb3JfMS5TZXF1ZW5jZUVycm9yKCdUb28gbWFueSBtYXRjaGluZyB2YWx1ZXMnKSk7XG4gICAgICAgICAgICAgICAgaGFzVmFsdWUgPSB0cnVlO1xuICAgICAgICAgICAgICAgIHNpbmdsZVZhbHVlID0gdmFsdWU7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0sIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIGlmIChoYXNWYWx1ZSkge1xuICAgICAgICAgICAgICAgIHN1YnNjcmliZXIubmV4dChzaW5nbGVWYWx1ZSk7XG4gICAgICAgICAgICAgICAgc3Vic2NyaWJlci5jb21wbGV0ZSgpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgc3Vic2NyaWJlci5lcnJvcihzZWVuVmFsdWUgPyBuZXcgTm90Rm91bmRFcnJvcl8xLk5vdEZvdW5kRXJyb3IoJ05vIG1hdGNoaW5nIHZhbHVlcycpIDogbmV3IEVtcHR5RXJyb3JfMS5FbXB0eUVycm9yKCkpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9KSk7XG4gICAgfSk7XG59XG5leHBvcnRzLnNpbmdsZSA9IHNpbmdsZTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPXNpbmdsZS5qcy5tYXAiLCJcInVzZSBzdHJpY3RcIjtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmV4cG9ydHMuc2tpcCA9IHZvaWQgMDtcbnZhciBmaWx0ZXJfMSA9IHJlcXVpcmUoXCIuL2ZpbHRlclwiKTtcbmZ1bmN0aW9uIHNraXAoY291bnQpIHtcbiAgICByZXR1cm4gZmlsdGVyXzEuZmlsdGVyKGZ1bmN0aW9uIChfLCBpbmRleCkgeyByZXR1cm4gY291bnQgPD0gaW5kZXg7IH0pO1xufVxuZXhwb3J0cy5za2lwID0gc2tpcDtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPXNraXAuanMubWFwIiwiXCJ1c2Ugc3RyaWN0XCI7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5leHBvcnRzLnNraXBMYXN0ID0gdm9pZCAwO1xudmFyIGlkZW50aXR5XzEgPSByZXF1aXJlKFwiLi4vdXRpbC9pZGVudGl0eVwiKTtcbnZhciBsaWZ0XzEgPSByZXF1aXJlKFwiLi4vdXRpbC9saWZ0XCIpO1xudmFyIE9wZXJhdG9yU3Vic2NyaWJlcl8xID0gcmVxdWlyZShcIi4vT3BlcmF0b3JTdWJzY3JpYmVyXCIpO1xuZnVuY3Rpb24gc2tpcExhc3Qoc2tpcENvdW50KSB7XG4gICAgcmV0dXJuIHNraXBDb3VudCA8PSAwXG4gICAgICAgID9cbiAgICAgICAgICAgIGlkZW50aXR5XzEuaWRlbnRpdHlcbiAgICAgICAgOiBsaWZ0XzEub3BlcmF0ZShmdW5jdGlvbiAoc291cmNlLCBzdWJzY3JpYmVyKSB7XG4gICAgICAgICAgICB2YXIgcmluZyA9IG5ldyBBcnJheShza2lwQ291bnQpO1xuICAgICAgICAgICAgdmFyIHNlZW4gPSAwO1xuICAgICAgICAgICAgc291cmNlLnN1YnNjcmliZShPcGVyYXRvclN1YnNjcmliZXJfMS5jcmVhdGVPcGVyYXRvclN1YnNjcmliZXIoc3Vic2NyaWJlciwgZnVuY3Rpb24gKHZhbHVlKSB7XG4gICAgICAgICAgICAgICAgdmFyIHZhbHVlSW5kZXggPSBzZWVuKys7XG4gICAgICAgICAgICAgICAgaWYgKHZhbHVlSW5kZXggPCBza2lwQ291bnQpIHtcbiAgICAgICAgICAgICAgICAgICAgcmluZ1t2YWx1ZUluZGV4XSA9IHZhbHVlO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgdmFyIGluZGV4ID0gdmFsdWVJbmRleCAlIHNraXBDb3VudDtcbiAgICAgICAgICAgICAgICAgICAgdmFyIG9sZFZhbHVlID0gcmluZ1tpbmRleF07XG4gICAgICAgICAgICAgICAgICAgIHJpbmdbaW5kZXhdID0gdmFsdWU7XG4gICAgICAgICAgICAgICAgICAgIHN1YnNjcmliZXIubmV4dChvbGRWYWx1ZSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSkpO1xuICAgICAgICAgICAgcmV0dXJuIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICByaW5nID0gbnVsbDtcbiAgICAgICAgICAgIH07XG4gICAgICAgIH0pO1xufVxuZXhwb3J0cy5za2lwTGFzdCA9IHNraXBMYXN0O1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9c2tpcExhc3QuanMubWFwIiwiXCJ1c2Ugc3RyaWN0XCI7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5leHBvcnRzLnNraXBVbnRpbCA9IHZvaWQgMDtcbnZhciBsaWZ0XzEgPSByZXF1aXJlKFwiLi4vdXRpbC9saWZ0XCIpO1xudmFyIE9wZXJhdG9yU3Vic2NyaWJlcl8xID0gcmVxdWlyZShcIi4vT3BlcmF0b3JTdWJzY3JpYmVyXCIpO1xudmFyIGlubmVyRnJvbV8xID0gcmVxdWlyZShcIi4uL29ic2VydmFibGUvaW5uZXJGcm9tXCIpO1xudmFyIG5vb3BfMSA9IHJlcXVpcmUoXCIuLi91dGlsL25vb3BcIik7XG5mdW5jdGlvbiBza2lwVW50aWwobm90aWZpZXIpIHtcbiAgICByZXR1cm4gbGlmdF8xLm9wZXJhdGUoZnVuY3Rpb24gKHNvdXJjZSwgc3Vic2NyaWJlcikge1xuICAgICAgICB2YXIgdGFraW5nID0gZmFsc2U7XG4gICAgICAgIHZhciBza2lwU3Vic2NyaWJlciA9IE9wZXJhdG9yU3Vic2NyaWJlcl8xLmNyZWF0ZU9wZXJhdG9yU3Vic2NyaWJlcihzdWJzY3JpYmVyLCBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICBza2lwU3Vic2NyaWJlciA9PT0gbnVsbCB8fCBza2lwU3Vic2NyaWJlciA9PT0gdm9pZCAwID8gdm9pZCAwIDogc2tpcFN1YnNjcmliZXIudW5zdWJzY3JpYmUoKTtcbiAgICAgICAgICAgIHRha2luZyA9IHRydWU7XG4gICAgICAgIH0sIG5vb3BfMS5ub29wKTtcbiAgICAgICAgaW5uZXJGcm9tXzEuaW5uZXJGcm9tKG5vdGlmaWVyKS5zdWJzY3JpYmUoc2tpcFN1YnNjcmliZXIpO1xuICAgICAgICBzb3VyY2Uuc3Vic2NyaWJlKE9wZXJhdG9yU3Vic2NyaWJlcl8xLmNyZWF0ZU9wZXJhdG9yU3Vic2NyaWJlcihzdWJzY3JpYmVyLCBmdW5jdGlvbiAodmFsdWUpIHsgcmV0dXJuIHRha2luZyAmJiBzdWJzY3JpYmVyLm5leHQodmFsdWUpOyB9KSk7XG4gICAgfSk7XG59XG5leHBvcnRzLnNraXBVbnRpbCA9IHNraXBVbnRpbDtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPXNraXBVbnRpbC5qcy5tYXAiLCJcInVzZSBzdHJpY3RcIjtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmV4cG9ydHMuc2tpcFdoaWxlID0gdm9pZCAwO1xudmFyIGxpZnRfMSA9IHJlcXVpcmUoXCIuLi91dGlsL2xpZnRcIik7XG52YXIgT3BlcmF0b3JTdWJzY3JpYmVyXzEgPSByZXF1aXJlKFwiLi9PcGVyYXRvclN1YnNjcmliZXJcIik7XG5mdW5jdGlvbiBza2lwV2hpbGUocHJlZGljYXRlKSB7XG4gICAgcmV0dXJuIGxpZnRfMS5vcGVyYXRlKGZ1bmN0aW9uIChzb3VyY2UsIHN1YnNjcmliZXIpIHtcbiAgICAgICAgdmFyIHRha2luZyA9IGZhbHNlO1xuICAgICAgICB2YXIgaW5kZXggPSAwO1xuICAgICAgICBzb3VyY2Uuc3Vic2NyaWJlKE9wZXJhdG9yU3Vic2NyaWJlcl8xLmNyZWF0ZU9wZXJhdG9yU3Vic2NyaWJlcihzdWJzY3JpYmVyLCBmdW5jdGlvbiAodmFsdWUpIHsgcmV0dXJuICh0YWtpbmcgfHwgKHRha2luZyA9ICFwcmVkaWNhdGUodmFsdWUsIGluZGV4KyspKSkgJiYgc3Vic2NyaWJlci5uZXh0KHZhbHVlKTsgfSkpO1xuICAgIH0pO1xufVxuZXhwb3J0cy5za2lwV2hpbGUgPSBza2lwV2hpbGU7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1za2lwV2hpbGUuanMubWFwIiwiXCJ1c2Ugc3RyaWN0XCI7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5leHBvcnRzLnN0YXJ0V2l0aCA9IHZvaWQgMDtcbnZhciBjb25jYXRfMSA9IHJlcXVpcmUoXCIuLi9vYnNlcnZhYmxlL2NvbmNhdFwiKTtcbnZhciBhcmdzXzEgPSByZXF1aXJlKFwiLi4vdXRpbC9hcmdzXCIpO1xudmFyIGxpZnRfMSA9IHJlcXVpcmUoXCIuLi91dGlsL2xpZnRcIik7XG5mdW5jdGlvbiBzdGFydFdpdGgoKSB7XG4gICAgdmFyIHZhbHVlcyA9IFtdO1xuICAgIGZvciAodmFyIF9pID0gMDsgX2kgPCBhcmd1bWVudHMubGVuZ3RoOyBfaSsrKSB7XG4gICAgICAgIHZhbHVlc1tfaV0gPSBhcmd1bWVudHNbX2ldO1xuICAgIH1cbiAgICB2YXIgc2NoZWR1bGVyID0gYXJnc18xLnBvcFNjaGVkdWxlcih2YWx1ZXMpO1xuICAgIHJldHVybiBsaWZ0XzEub3BlcmF0ZShmdW5jdGlvbiAoc291cmNlLCBzdWJzY3JpYmVyKSB7XG4gICAgICAgIChzY2hlZHVsZXIgPyBjb25jYXRfMS5jb25jYXQodmFsdWVzLCBzb3VyY2UsIHNjaGVkdWxlcikgOiBjb25jYXRfMS5jb25jYXQodmFsdWVzLCBzb3VyY2UpKS5zdWJzY3JpYmUoc3Vic2NyaWJlcik7XG4gICAgfSk7XG59XG5leHBvcnRzLnN0YXJ0V2l0aCA9IHN0YXJ0V2l0aDtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPXN0YXJ0V2l0aC5qcy5tYXAiLCJcInVzZSBzdHJpY3RcIjtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmV4cG9ydHMuc3Vic2NyaWJlT24gPSB2b2lkIDA7XG52YXIgbGlmdF8xID0gcmVxdWlyZShcIi4uL3V0aWwvbGlmdFwiKTtcbmZ1bmN0aW9uIHN1YnNjcmliZU9uKHNjaGVkdWxlciwgZGVsYXkpIHtcbiAgICBpZiAoZGVsYXkgPT09IHZvaWQgMCkgeyBkZWxheSA9IDA7IH1cbiAgICByZXR1cm4gbGlmdF8xLm9wZXJhdGUoZnVuY3Rpb24gKHNvdXJjZSwgc3Vic2NyaWJlcikge1xuICAgICAgICBzdWJzY3JpYmVyLmFkZChzY2hlZHVsZXIuc2NoZWR1bGUoZnVuY3Rpb24gKCkgeyByZXR1cm4gc291cmNlLnN1YnNjcmliZShzdWJzY3JpYmVyKTsgfSwgZGVsYXkpKTtcbiAgICB9KTtcbn1cbmV4cG9ydHMuc3Vic2NyaWJlT24gPSBzdWJzY3JpYmVPbjtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPXN1YnNjcmliZU9uLmpzLm1hcCIsIlwidXNlIHN0cmljdFwiO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuZXhwb3J0cy5zd2l0Y2hBbGwgPSB2b2lkIDA7XG52YXIgc3dpdGNoTWFwXzEgPSByZXF1aXJlKFwiLi9zd2l0Y2hNYXBcIik7XG52YXIgaWRlbnRpdHlfMSA9IHJlcXVpcmUoXCIuLi91dGlsL2lkZW50aXR5XCIpO1xuZnVuY3Rpb24gc3dpdGNoQWxsKCkge1xuICAgIHJldHVybiBzd2l0Y2hNYXBfMS5zd2l0Y2hNYXAoaWRlbnRpdHlfMS5pZGVudGl0eSk7XG59XG5leHBvcnRzLnN3aXRjaEFsbCA9IHN3aXRjaEFsbDtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPXN3aXRjaEFsbC5qcy5tYXAiLCJcInVzZSBzdHJpY3RcIjtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmV4cG9ydHMuc3dpdGNoTWFwID0gdm9pZCAwO1xudmFyIGlubmVyRnJvbV8xID0gcmVxdWlyZShcIi4uL29ic2VydmFibGUvaW5uZXJGcm9tXCIpO1xudmFyIGxpZnRfMSA9IHJlcXVpcmUoXCIuLi91dGlsL2xpZnRcIik7XG52YXIgT3BlcmF0b3JTdWJzY3JpYmVyXzEgPSByZXF1aXJlKFwiLi9PcGVyYXRvclN1YnNjcmliZXJcIik7XG5mdW5jdGlvbiBzd2l0Y2hNYXAocHJvamVjdCwgcmVzdWx0U2VsZWN0b3IpIHtcbiAgICByZXR1cm4gbGlmdF8xLm9wZXJhdGUoZnVuY3Rpb24gKHNvdXJjZSwgc3Vic2NyaWJlcikge1xuICAgICAgICB2YXIgaW5uZXJTdWJzY3JpYmVyID0gbnVsbDtcbiAgICAgICAgdmFyIGluZGV4ID0gMDtcbiAgICAgICAgdmFyIGlzQ29tcGxldGUgPSBmYWxzZTtcbiAgICAgICAgdmFyIGNoZWNrQ29tcGxldGUgPSBmdW5jdGlvbiAoKSB7IHJldHVybiBpc0NvbXBsZXRlICYmICFpbm5lclN1YnNjcmliZXIgJiYgc3Vic2NyaWJlci5jb21wbGV0ZSgpOyB9O1xuICAgICAgICBzb3VyY2Uuc3Vic2NyaWJlKE9wZXJhdG9yU3Vic2NyaWJlcl8xLmNyZWF0ZU9wZXJhdG9yU3Vic2NyaWJlcihzdWJzY3JpYmVyLCBmdW5jdGlvbiAodmFsdWUpIHtcbiAgICAgICAgICAgIGlubmVyU3Vic2NyaWJlciA9PT0gbnVsbCB8fCBpbm5lclN1YnNjcmliZXIgPT09IHZvaWQgMCA/IHZvaWQgMCA6IGlubmVyU3Vic2NyaWJlci51bnN1YnNjcmliZSgpO1xuICAgICAgICAgICAgdmFyIGlubmVySW5kZXggPSAwO1xuICAgICAgICAgICAgdmFyIG91dGVySW5kZXggPSBpbmRleCsrO1xuICAgICAgICAgICAgaW5uZXJGcm9tXzEuaW5uZXJGcm9tKHByb2plY3QodmFsdWUsIG91dGVySW5kZXgpKS5zdWJzY3JpYmUoKGlubmVyU3Vic2NyaWJlciA9IE9wZXJhdG9yU3Vic2NyaWJlcl8xLmNyZWF0ZU9wZXJhdG9yU3Vic2NyaWJlcihzdWJzY3JpYmVyLCBmdW5jdGlvbiAoaW5uZXJWYWx1ZSkgeyByZXR1cm4gc3Vic2NyaWJlci5uZXh0KHJlc3VsdFNlbGVjdG9yID8gcmVzdWx0U2VsZWN0b3IodmFsdWUsIGlubmVyVmFsdWUsIG91dGVySW5kZXgsIGlubmVySW5kZXgrKykgOiBpbm5lclZhbHVlKTsgfSwgZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgIGlubmVyU3Vic2NyaWJlciA9IG51bGw7XG4gICAgICAgICAgICAgICAgY2hlY2tDb21wbGV0ZSgpO1xuICAgICAgICAgICAgfSkpKTtcbiAgICAgICAgfSwgZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgaXNDb21wbGV0ZSA9IHRydWU7XG4gICAgICAgICAgICBjaGVja0NvbXBsZXRlKCk7XG4gICAgICAgIH0pKTtcbiAgICB9KTtcbn1cbmV4cG9ydHMuc3dpdGNoTWFwID0gc3dpdGNoTWFwO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9c3dpdGNoTWFwLmpzLm1hcCIsIlwidXNlIHN0cmljdFwiO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuZXhwb3J0cy5zd2l0Y2hNYXBUbyA9IHZvaWQgMDtcbnZhciBzd2l0Y2hNYXBfMSA9IHJlcXVpcmUoXCIuL3N3aXRjaE1hcFwiKTtcbnZhciBpc0Z1bmN0aW9uXzEgPSByZXF1aXJlKFwiLi4vdXRpbC9pc0Z1bmN0aW9uXCIpO1xuZnVuY3Rpb24gc3dpdGNoTWFwVG8oaW5uZXJPYnNlcnZhYmxlLCByZXN1bHRTZWxlY3Rvcikge1xuICAgIHJldHVybiBpc0Z1bmN0aW9uXzEuaXNGdW5jdGlvbihyZXN1bHRTZWxlY3RvcikgPyBzd2l0Y2hNYXBfMS5zd2l0Y2hNYXAoZnVuY3Rpb24gKCkgeyByZXR1cm4gaW5uZXJPYnNlcnZhYmxlOyB9LCByZXN1bHRTZWxlY3RvcikgOiBzd2l0Y2hNYXBfMS5zd2l0Y2hNYXAoZnVuY3Rpb24gKCkgeyByZXR1cm4gaW5uZXJPYnNlcnZhYmxlOyB9KTtcbn1cbmV4cG9ydHMuc3dpdGNoTWFwVG8gPSBzd2l0Y2hNYXBUbztcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPXN3aXRjaE1hcFRvLmpzLm1hcCIsIlwidXNlIHN0cmljdFwiO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuZXhwb3J0cy5zd2l0Y2hTY2FuID0gdm9pZCAwO1xudmFyIHN3aXRjaE1hcF8xID0gcmVxdWlyZShcIi4vc3dpdGNoTWFwXCIpO1xudmFyIGxpZnRfMSA9IHJlcXVpcmUoXCIuLi91dGlsL2xpZnRcIik7XG5mdW5jdGlvbiBzd2l0Y2hTY2FuKGFjY3VtdWxhdG9yLCBzZWVkKSB7XG4gICAgcmV0dXJuIGxpZnRfMS5vcGVyYXRlKGZ1bmN0aW9uIChzb3VyY2UsIHN1YnNjcmliZXIpIHtcbiAgICAgICAgdmFyIHN0YXRlID0gc2VlZDtcbiAgICAgICAgc3dpdGNoTWFwXzEuc3dpdGNoTWFwKGZ1bmN0aW9uICh2YWx1ZSwgaW5kZXgpIHsgcmV0dXJuIGFjY3VtdWxhdG9yKHN0YXRlLCB2YWx1ZSwgaW5kZXgpOyB9LCBmdW5jdGlvbiAoXywgaW5uZXJWYWx1ZSkgeyByZXR1cm4gKChzdGF0ZSA9IGlubmVyVmFsdWUpLCBpbm5lclZhbHVlKTsgfSkoc291cmNlKS5zdWJzY3JpYmUoc3Vic2NyaWJlcik7XG4gICAgICAgIHJldHVybiBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICBzdGF0ZSA9IG51bGw7XG4gICAgICAgIH07XG4gICAgfSk7XG59XG5leHBvcnRzLnN3aXRjaFNjYW4gPSBzd2l0Y2hTY2FuO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9c3dpdGNoU2Nhbi5qcy5tYXAiLCJcInVzZSBzdHJpY3RcIjtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmV4cG9ydHMudGFrZSA9IHZvaWQgMDtcbnZhciBlbXB0eV8xID0gcmVxdWlyZShcIi4uL29ic2VydmFibGUvZW1wdHlcIik7XG52YXIgbGlmdF8xID0gcmVxdWlyZShcIi4uL3V0aWwvbGlmdFwiKTtcbnZhciBPcGVyYXRvclN1YnNjcmliZXJfMSA9IHJlcXVpcmUoXCIuL09wZXJhdG9yU3Vic2NyaWJlclwiKTtcbmZ1bmN0aW9uIHRha2UoY291bnQpIHtcbiAgICByZXR1cm4gY291bnQgPD0gMFxuICAgICAgICA/XG4gICAgICAgICAgICBmdW5jdGlvbiAoKSB7IHJldHVybiBlbXB0eV8xLkVNUFRZOyB9XG4gICAgICAgIDogbGlmdF8xLm9wZXJhdGUoZnVuY3Rpb24gKHNvdXJjZSwgc3Vic2NyaWJlcikge1xuICAgICAgICAgICAgdmFyIHNlZW4gPSAwO1xuICAgICAgICAgICAgc291cmNlLnN1YnNjcmliZShPcGVyYXRvclN1YnNjcmliZXJfMS5jcmVhdGVPcGVyYXRvclN1YnNjcmliZXIoc3Vic2NyaWJlciwgZnVuY3Rpb24gKHZhbHVlKSB7XG4gICAgICAgICAgICAgICAgaWYgKCsrc2VlbiA8PSBjb3VudCkge1xuICAgICAgICAgICAgICAgICAgICBzdWJzY3JpYmVyLm5leHQodmFsdWUpO1xuICAgICAgICAgICAgICAgICAgICBpZiAoY291bnQgPD0gc2Vlbikge1xuICAgICAgICAgICAgICAgICAgICAgICAgc3Vic2NyaWJlci5jb21wbGV0ZSgpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSkpO1xuICAgICAgICB9KTtcbn1cbmV4cG9ydHMudGFrZSA9IHRha2U7XG4vLyMgc291cmNlTWFwcGluZ1VSTD10YWtlLmpzLm1hcCIsIlwidXNlIHN0cmljdFwiO1xudmFyIF9fdmFsdWVzID0gKHRoaXMgJiYgdGhpcy5fX3ZhbHVlcykgfHwgZnVuY3Rpb24obykge1xuICAgIHZhciBzID0gdHlwZW9mIFN5bWJvbCA9PT0gXCJmdW5jdGlvblwiICYmIFN5bWJvbC5pdGVyYXRvciwgbSA9IHMgJiYgb1tzXSwgaSA9IDA7XG4gICAgaWYgKG0pIHJldHVybiBtLmNhbGwobyk7XG4gICAgaWYgKG8gJiYgdHlwZW9mIG8ubGVuZ3RoID09PSBcIm51bWJlclwiKSByZXR1cm4ge1xuICAgICAgICBuZXh0OiBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICBpZiAobyAmJiBpID49IG8ubGVuZ3RoKSBvID0gdm9pZCAwO1xuICAgICAgICAgICAgcmV0dXJuIHsgdmFsdWU6IG8gJiYgb1tpKytdLCBkb25lOiAhbyB9O1xuICAgICAgICB9XG4gICAgfTtcbiAgICB0aHJvdyBuZXcgVHlwZUVycm9yKHMgPyBcIk9iamVjdCBpcyBub3QgaXRlcmFibGUuXCIgOiBcIlN5bWJvbC5pdGVyYXRvciBpcyBub3QgZGVmaW5lZC5cIik7XG59O1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuZXhwb3J0cy50YWtlTGFzdCA9IHZvaWQgMDtcbnZhciBlbXB0eV8xID0gcmVxdWlyZShcIi4uL29ic2VydmFibGUvZW1wdHlcIik7XG52YXIgbGlmdF8xID0gcmVxdWlyZShcIi4uL3V0aWwvbGlmdFwiKTtcbnZhciBPcGVyYXRvclN1YnNjcmliZXJfMSA9IHJlcXVpcmUoXCIuL09wZXJhdG9yU3Vic2NyaWJlclwiKTtcbmZ1bmN0aW9uIHRha2VMYXN0KGNvdW50KSB7XG4gICAgcmV0dXJuIGNvdW50IDw9IDBcbiAgICAgICAgPyBmdW5jdGlvbiAoKSB7IHJldHVybiBlbXB0eV8xLkVNUFRZOyB9XG4gICAgICAgIDogbGlmdF8xLm9wZXJhdGUoZnVuY3Rpb24gKHNvdXJjZSwgc3Vic2NyaWJlcikge1xuICAgICAgICAgICAgdmFyIGJ1ZmZlciA9IFtdO1xuICAgICAgICAgICAgc291cmNlLnN1YnNjcmliZShPcGVyYXRvclN1YnNjcmliZXJfMS5jcmVhdGVPcGVyYXRvclN1YnNjcmliZXIoc3Vic2NyaWJlciwgZnVuY3Rpb24gKHZhbHVlKSB7XG4gICAgICAgICAgICAgICAgYnVmZmVyLnB1c2godmFsdWUpO1xuICAgICAgICAgICAgICAgIGNvdW50IDwgYnVmZmVyLmxlbmd0aCAmJiBidWZmZXIuc2hpZnQoKTtcbiAgICAgICAgICAgIH0sIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICB2YXIgZV8xLCBfYTtcbiAgICAgICAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgICAgICAgICBmb3IgKHZhciBidWZmZXJfMSA9IF9fdmFsdWVzKGJ1ZmZlciksIGJ1ZmZlcl8xXzEgPSBidWZmZXJfMS5uZXh0KCk7ICFidWZmZXJfMV8xLmRvbmU7IGJ1ZmZlcl8xXzEgPSBidWZmZXJfMS5uZXh0KCkpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhciB2YWx1ZSA9IGJ1ZmZlcl8xXzEudmFsdWU7XG4gICAgICAgICAgICAgICAgICAgICAgICBzdWJzY3JpYmVyLm5leHQodmFsdWUpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGNhdGNoIChlXzFfMSkgeyBlXzEgPSB7IGVycm9yOiBlXzFfMSB9OyB9XG4gICAgICAgICAgICAgICAgZmluYWxseSB7XG4gICAgICAgICAgICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoYnVmZmVyXzFfMSAmJiAhYnVmZmVyXzFfMS5kb25lICYmIChfYSA9IGJ1ZmZlcl8xLnJldHVybikpIF9hLmNhbGwoYnVmZmVyXzEpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIGZpbmFsbHkgeyBpZiAoZV8xKSB0aHJvdyBlXzEuZXJyb3I7IH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgc3Vic2NyaWJlci5jb21wbGV0ZSgpO1xuICAgICAgICAgICAgfSwgdW5kZWZpbmVkLCBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgYnVmZmVyID0gbnVsbDtcbiAgICAgICAgICAgIH0pKTtcbiAgICAgICAgfSk7XG59XG5leHBvcnRzLnRha2VMYXN0ID0gdGFrZUxhc3Q7XG4vLyMgc291cmNlTWFwcGluZ1VSTD10YWtlTGFzdC5qcy5tYXAiLCJcInVzZSBzdHJpY3RcIjtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmV4cG9ydHMudGFrZVVudGlsID0gdm9pZCAwO1xudmFyIGxpZnRfMSA9IHJlcXVpcmUoXCIuLi91dGlsL2xpZnRcIik7XG52YXIgT3BlcmF0b3JTdWJzY3JpYmVyXzEgPSByZXF1aXJlKFwiLi9PcGVyYXRvclN1YnNjcmliZXJcIik7XG52YXIgaW5uZXJGcm9tXzEgPSByZXF1aXJlKFwiLi4vb2JzZXJ2YWJsZS9pbm5lckZyb21cIik7XG52YXIgbm9vcF8xID0gcmVxdWlyZShcIi4uL3V0aWwvbm9vcFwiKTtcbmZ1bmN0aW9uIHRha2VVbnRpbChub3RpZmllcikge1xuICAgIHJldHVybiBsaWZ0XzEub3BlcmF0ZShmdW5jdGlvbiAoc291cmNlLCBzdWJzY3JpYmVyKSB7XG4gICAgICAgIGlubmVyRnJvbV8xLmlubmVyRnJvbShub3RpZmllcikuc3Vic2NyaWJlKE9wZXJhdG9yU3Vic2NyaWJlcl8xLmNyZWF0ZU9wZXJhdG9yU3Vic2NyaWJlcihzdWJzY3JpYmVyLCBmdW5jdGlvbiAoKSB7IHJldHVybiBzdWJzY3JpYmVyLmNvbXBsZXRlKCk7IH0sIG5vb3BfMS5ub29wKSk7XG4gICAgICAgICFzdWJzY3JpYmVyLmNsb3NlZCAmJiBzb3VyY2Uuc3Vic2NyaWJlKHN1YnNjcmliZXIpO1xuICAgIH0pO1xufVxuZXhwb3J0cy50YWtlVW50aWwgPSB0YWtlVW50aWw7XG4vLyMgc291cmNlTWFwcGluZ1VSTD10YWtlVW50aWwuanMubWFwIiwiXCJ1c2Ugc3RyaWN0XCI7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5leHBvcnRzLnRha2VXaGlsZSA9IHZvaWQgMDtcbnZhciBsaWZ0XzEgPSByZXF1aXJlKFwiLi4vdXRpbC9saWZ0XCIpO1xudmFyIE9wZXJhdG9yU3Vic2NyaWJlcl8xID0gcmVxdWlyZShcIi4vT3BlcmF0b3JTdWJzY3JpYmVyXCIpO1xuZnVuY3Rpb24gdGFrZVdoaWxlKHByZWRpY2F0ZSwgaW5jbHVzaXZlKSB7XG4gICAgaWYgKGluY2x1c2l2ZSA9PT0gdm9pZCAwKSB7IGluY2x1c2l2ZSA9IGZhbHNlOyB9XG4gICAgcmV0dXJuIGxpZnRfMS5vcGVyYXRlKGZ1bmN0aW9uIChzb3VyY2UsIHN1YnNjcmliZXIpIHtcbiAgICAgICAgdmFyIGluZGV4ID0gMDtcbiAgICAgICAgc291cmNlLnN1YnNjcmliZShPcGVyYXRvclN1YnNjcmliZXJfMS5jcmVhdGVPcGVyYXRvclN1YnNjcmliZXIoc3Vic2NyaWJlciwgZnVuY3Rpb24gKHZhbHVlKSB7XG4gICAgICAgICAgICB2YXIgcmVzdWx0ID0gcHJlZGljYXRlKHZhbHVlLCBpbmRleCsrKTtcbiAgICAgICAgICAgIChyZXN1bHQgfHwgaW5jbHVzaXZlKSAmJiBzdWJzY3JpYmVyLm5leHQodmFsdWUpO1xuICAgICAgICAgICAgIXJlc3VsdCAmJiBzdWJzY3JpYmVyLmNvbXBsZXRlKCk7XG4gICAgICAgIH0pKTtcbiAgICB9KTtcbn1cbmV4cG9ydHMudGFrZVdoaWxlID0gdGFrZVdoaWxlO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9dGFrZVdoaWxlLmpzLm1hcCIsIlwidXNlIHN0cmljdFwiO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuZXhwb3J0cy50YXAgPSB2b2lkIDA7XG52YXIgaXNGdW5jdGlvbl8xID0gcmVxdWlyZShcIi4uL3V0aWwvaXNGdW5jdGlvblwiKTtcbnZhciBsaWZ0XzEgPSByZXF1aXJlKFwiLi4vdXRpbC9saWZ0XCIpO1xudmFyIE9wZXJhdG9yU3Vic2NyaWJlcl8xID0gcmVxdWlyZShcIi4vT3BlcmF0b3JTdWJzY3JpYmVyXCIpO1xudmFyIGlkZW50aXR5XzEgPSByZXF1aXJlKFwiLi4vdXRpbC9pZGVudGl0eVwiKTtcbmZ1bmN0aW9uIHRhcChvYnNlcnZlck9yTmV4dCwgZXJyb3IsIGNvbXBsZXRlKSB7XG4gICAgdmFyIHRhcE9ic2VydmVyID0gaXNGdW5jdGlvbl8xLmlzRnVuY3Rpb24ob2JzZXJ2ZXJPck5leHQpIHx8IGVycm9yIHx8IGNvbXBsZXRlXG4gICAgICAgID9cbiAgICAgICAgICAgIHsgbmV4dDogb2JzZXJ2ZXJPck5leHQsIGVycm9yOiBlcnJvciwgY29tcGxldGU6IGNvbXBsZXRlIH1cbiAgICAgICAgOiBvYnNlcnZlck9yTmV4dDtcbiAgICByZXR1cm4gdGFwT2JzZXJ2ZXJcbiAgICAgICAgPyBsaWZ0XzEub3BlcmF0ZShmdW5jdGlvbiAoc291cmNlLCBzdWJzY3JpYmVyKSB7XG4gICAgICAgICAgICB2YXIgX2E7XG4gICAgICAgICAgICAoX2EgPSB0YXBPYnNlcnZlci5zdWJzY3JpYmUpID09PSBudWxsIHx8IF9hID09PSB2b2lkIDAgPyB2b2lkIDAgOiBfYS5jYWxsKHRhcE9ic2VydmVyKTtcbiAgICAgICAgICAgIHZhciBpc1Vuc3ViID0gdHJ1ZTtcbiAgICAgICAgICAgIHNvdXJjZS5zdWJzY3JpYmUoT3BlcmF0b3JTdWJzY3JpYmVyXzEuY3JlYXRlT3BlcmF0b3JTdWJzY3JpYmVyKHN1YnNjcmliZXIsIGZ1bmN0aW9uICh2YWx1ZSkge1xuICAgICAgICAgICAgICAgIHZhciBfYTtcbiAgICAgICAgICAgICAgICAoX2EgPSB0YXBPYnNlcnZlci5uZXh0KSA9PT0gbnVsbCB8fCBfYSA9PT0gdm9pZCAwID8gdm9pZCAwIDogX2EuY2FsbCh0YXBPYnNlcnZlciwgdmFsdWUpO1xuICAgICAgICAgICAgICAgIHN1YnNjcmliZXIubmV4dCh2YWx1ZSk7XG4gICAgICAgICAgICB9LCBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgdmFyIF9hO1xuICAgICAgICAgICAgICAgIGlzVW5zdWIgPSBmYWxzZTtcbiAgICAgICAgICAgICAgICAoX2EgPSB0YXBPYnNlcnZlci5jb21wbGV0ZSkgPT09IG51bGwgfHwgX2EgPT09IHZvaWQgMCA/IHZvaWQgMCA6IF9hLmNhbGwodGFwT2JzZXJ2ZXIpO1xuICAgICAgICAgICAgICAgIHN1YnNjcmliZXIuY29tcGxldGUoKTtcbiAgICAgICAgICAgIH0sIGZ1bmN0aW9uIChlcnIpIHtcbiAgICAgICAgICAgICAgICB2YXIgX2E7XG4gICAgICAgICAgICAgICAgaXNVbnN1YiA9IGZhbHNlO1xuICAgICAgICAgICAgICAgIChfYSA9IHRhcE9ic2VydmVyLmVycm9yKSA9PT0gbnVsbCB8fCBfYSA9PT0gdm9pZCAwID8gdm9pZCAwIDogX2EuY2FsbCh0YXBPYnNlcnZlciwgZXJyKTtcbiAgICAgICAgICAgICAgICBzdWJzY3JpYmVyLmVycm9yKGVycik7XG4gICAgICAgICAgICB9LCBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgdmFyIF9hLCBfYjtcbiAgICAgICAgICAgICAgICBpZiAoaXNVbnN1Yikge1xuICAgICAgICAgICAgICAgICAgICAoX2EgPSB0YXBPYnNlcnZlci51bnN1YnNjcmliZSkgPT09IG51bGwgfHwgX2EgPT09IHZvaWQgMCA/IHZvaWQgMCA6IF9hLmNhbGwodGFwT2JzZXJ2ZXIpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAoX2IgPSB0YXBPYnNlcnZlci5maW5hbGl6ZSkgPT09IG51bGwgfHwgX2IgPT09IHZvaWQgMCA/IHZvaWQgMCA6IF9iLmNhbGwodGFwT2JzZXJ2ZXIpO1xuICAgICAgICAgICAgfSkpO1xuICAgICAgICB9KVxuICAgICAgICA6XG4gICAgICAgICAgICBpZGVudGl0eV8xLmlkZW50aXR5O1xufVxuZXhwb3J0cy50YXAgPSB0YXA7XG4vLyMgc291cmNlTWFwcGluZ1VSTD10YXAuanMubWFwIiwiXCJ1c2Ugc3RyaWN0XCI7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5leHBvcnRzLnRocm90dGxlID0gdm9pZCAwO1xudmFyIGxpZnRfMSA9IHJlcXVpcmUoXCIuLi91dGlsL2xpZnRcIik7XG52YXIgT3BlcmF0b3JTdWJzY3JpYmVyXzEgPSByZXF1aXJlKFwiLi9PcGVyYXRvclN1YnNjcmliZXJcIik7XG52YXIgaW5uZXJGcm9tXzEgPSByZXF1aXJlKFwiLi4vb2JzZXJ2YWJsZS9pbm5lckZyb21cIik7XG5mdW5jdGlvbiB0aHJvdHRsZShkdXJhdGlvblNlbGVjdG9yLCBjb25maWcpIHtcbiAgICByZXR1cm4gbGlmdF8xLm9wZXJhdGUoZnVuY3Rpb24gKHNvdXJjZSwgc3Vic2NyaWJlcikge1xuICAgICAgICB2YXIgX2EgPSBjb25maWcgIT09IG51bGwgJiYgY29uZmlnICE9PSB2b2lkIDAgPyBjb25maWcgOiB7fSwgX2IgPSBfYS5sZWFkaW5nLCBsZWFkaW5nID0gX2IgPT09IHZvaWQgMCA/IHRydWUgOiBfYiwgX2MgPSBfYS50cmFpbGluZywgdHJhaWxpbmcgPSBfYyA9PT0gdm9pZCAwID8gZmFsc2UgOiBfYztcbiAgICAgICAgdmFyIGhhc1ZhbHVlID0gZmFsc2U7XG4gICAgICAgIHZhciBzZW5kVmFsdWUgPSBudWxsO1xuICAgICAgICB2YXIgdGhyb3R0bGVkID0gbnVsbDtcbiAgICAgICAgdmFyIGlzQ29tcGxldGUgPSBmYWxzZTtcbiAgICAgICAgdmFyIGVuZFRocm90dGxpbmcgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICB0aHJvdHRsZWQgPT09IG51bGwgfHwgdGhyb3R0bGVkID09PSB2b2lkIDAgPyB2b2lkIDAgOiB0aHJvdHRsZWQudW5zdWJzY3JpYmUoKTtcbiAgICAgICAgICAgIHRocm90dGxlZCA9IG51bGw7XG4gICAgICAgICAgICBpZiAodHJhaWxpbmcpIHtcbiAgICAgICAgICAgICAgICBzZW5kKCk7XG4gICAgICAgICAgICAgICAgaXNDb21wbGV0ZSAmJiBzdWJzY3JpYmVyLmNvbXBsZXRlKCk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH07XG4gICAgICAgIHZhciBjbGVhbnVwVGhyb3R0bGluZyA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIHRocm90dGxlZCA9IG51bGw7XG4gICAgICAgICAgICBpc0NvbXBsZXRlICYmIHN1YnNjcmliZXIuY29tcGxldGUoKTtcbiAgICAgICAgfTtcbiAgICAgICAgdmFyIHN0YXJ0VGhyb3R0bGUgPSBmdW5jdGlvbiAodmFsdWUpIHtcbiAgICAgICAgICAgIHJldHVybiAodGhyb3R0bGVkID0gaW5uZXJGcm9tXzEuaW5uZXJGcm9tKGR1cmF0aW9uU2VsZWN0b3IodmFsdWUpKS5zdWJzY3JpYmUoT3BlcmF0b3JTdWJzY3JpYmVyXzEuY3JlYXRlT3BlcmF0b3JTdWJzY3JpYmVyKHN1YnNjcmliZXIsIGVuZFRocm90dGxpbmcsIGNsZWFudXBUaHJvdHRsaW5nKSkpO1xuICAgICAgICB9O1xuICAgICAgICB2YXIgc2VuZCA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIGlmIChoYXNWYWx1ZSkge1xuICAgICAgICAgICAgICAgIGhhc1ZhbHVlID0gZmFsc2U7XG4gICAgICAgICAgICAgICAgdmFyIHZhbHVlID0gc2VuZFZhbHVlO1xuICAgICAgICAgICAgICAgIHNlbmRWYWx1ZSA9IG51bGw7XG4gICAgICAgICAgICAgICAgc3Vic2NyaWJlci5uZXh0KHZhbHVlKTtcbiAgICAgICAgICAgICAgICAhaXNDb21wbGV0ZSAmJiBzdGFydFRocm90dGxlKHZhbHVlKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfTtcbiAgICAgICAgc291cmNlLnN1YnNjcmliZShPcGVyYXRvclN1YnNjcmliZXJfMS5jcmVhdGVPcGVyYXRvclN1YnNjcmliZXIoc3Vic2NyaWJlciwgZnVuY3Rpb24gKHZhbHVlKSB7XG4gICAgICAgICAgICBoYXNWYWx1ZSA9IHRydWU7XG4gICAgICAgICAgICBzZW5kVmFsdWUgPSB2YWx1ZTtcbiAgICAgICAgICAgICEodGhyb3R0bGVkICYmICF0aHJvdHRsZWQuY2xvc2VkKSAmJiAobGVhZGluZyA/IHNlbmQoKSA6IHN0YXJ0VGhyb3R0bGUodmFsdWUpKTtcbiAgICAgICAgfSwgZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgaXNDb21wbGV0ZSA9IHRydWU7XG4gICAgICAgICAgICAhKHRyYWlsaW5nICYmIGhhc1ZhbHVlICYmIHRocm90dGxlZCAmJiAhdGhyb3R0bGVkLmNsb3NlZCkgJiYgc3Vic2NyaWJlci5jb21wbGV0ZSgpO1xuICAgICAgICB9KSk7XG4gICAgfSk7XG59XG5leHBvcnRzLnRocm90dGxlID0gdGhyb3R0bGU7XG4vLyMgc291cmNlTWFwcGluZ1VSTD10aHJvdHRsZS5qcy5tYXAiLCJcInVzZSBzdHJpY3RcIjtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmV4cG9ydHMudGhyb3R0bGVUaW1lID0gdm9pZCAwO1xudmFyIGFzeW5jXzEgPSByZXF1aXJlKFwiLi4vc2NoZWR1bGVyL2FzeW5jXCIpO1xudmFyIHRocm90dGxlXzEgPSByZXF1aXJlKFwiLi90aHJvdHRsZVwiKTtcbnZhciB0aW1lcl8xID0gcmVxdWlyZShcIi4uL29ic2VydmFibGUvdGltZXJcIik7XG5mdW5jdGlvbiB0aHJvdHRsZVRpbWUoZHVyYXRpb24sIHNjaGVkdWxlciwgY29uZmlnKSB7XG4gICAgaWYgKHNjaGVkdWxlciA9PT0gdm9pZCAwKSB7IHNjaGVkdWxlciA9IGFzeW5jXzEuYXN5bmNTY2hlZHVsZXI7IH1cbiAgICB2YXIgZHVyYXRpb24kID0gdGltZXJfMS50aW1lcihkdXJhdGlvbiwgc2NoZWR1bGVyKTtcbiAgICByZXR1cm4gdGhyb3R0bGVfMS50aHJvdHRsZShmdW5jdGlvbiAoKSB7IHJldHVybiBkdXJhdGlvbiQ7IH0sIGNvbmZpZyk7XG59XG5leHBvcnRzLnRocm90dGxlVGltZSA9IHRocm90dGxlVGltZTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPXRocm90dGxlVGltZS5qcy5tYXAiLCJcInVzZSBzdHJpY3RcIjtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmV4cG9ydHMudGhyb3dJZkVtcHR5ID0gdm9pZCAwO1xudmFyIEVtcHR5RXJyb3JfMSA9IHJlcXVpcmUoXCIuLi91dGlsL0VtcHR5RXJyb3JcIik7XG52YXIgbGlmdF8xID0gcmVxdWlyZShcIi4uL3V0aWwvbGlmdFwiKTtcbnZhciBPcGVyYXRvclN1YnNjcmliZXJfMSA9IHJlcXVpcmUoXCIuL09wZXJhdG9yU3Vic2NyaWJlclwiKTtcbmZ1bmN0aW9uIHRocm93SWZFbXB0eShlcnJvckZhY3RvcnkpIHtcbiAgICBpZiAoZXJyb3JGYWN0b3J5ID09PSB2b2lkIDApIHsgZXJyb3JGYWN0b3J5ID0gZGVmYXVsdEVycm9yRmFjdG9yeTsgfVxuICAgIHJldHVybiBsaWZ0XzEub3BlcmF0ZShmdW5jdGlvbiAoc291cmNlLCBzdWJzY3JpYmVyKSB7XG4gICAgICAgIHZhciBoYXNWYWx1ZSA9IGZhbHNlO1xuICAgICAgICBzb3VyY2Uuc3Vic2NyaWJlKE9wZXJhdG9yU3Vic2NyaWJlcl8xLmNyZWF0ZU9wZXJhdG9yU3Vic2NyaWJlcihzdWJzY3JpYmVyLCBmdW5jdGlvbiAodmFsdWUpIHtcbiAgICAgICAgICAgIGhhc1ZhbHVlID0gdHJ1ZTtcbiAgICAgICAgICAgIHN1YnNjcmliZXIubmV4dCh2YWx1ZSk7XG4gICAgICAgIH0sIGZ1bmN0aW9uICgpIHsgcmV0dXJuIChoYXNWYWx1ZSA/IHN1YnNjcmliZXIuY29tcGxldGUoKSA6IHN1YnNjcmliZXIuZXJyb3IoZXJyb3JGYWN0b3J5KCkpKTsgfSkpO1xuICAgIH0pO1xufVxuZXhwb3J0cy50aHJvd0lmRW1wdHkgPSB0aHJvd0lmRW1wdHk7XG5mdW5jdGlvbiBkZWZhdWx0RXJyb3JGYWN0b3J5KCkge1xuICAgIHJldHVybiBuZXcgRW1wdHlFcnJvcl8xLkVtcHR5RXJyb3IoKTtcbn1cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPXRocm93SWZFbXB0eS5qcy5tYXAiLCJcInVzZSBzdHJpY3RcIjtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmV4cG9ydHMuVGltZUludGVydmFsID0gZXhwb3J0cy50aW1lSW50ZXJ2YWwgPSB2b2lkIDA7XG52YXIgYXN5bmNfMSA9IHJlcXVpcmUoXCIuLi9zY2hlZHVsZXIvYXN5bmNcIik7XG52YXIgbGlmdF8xID0gcmVxdWlyZShcIi4uL3V0aWwvbGlmdFwiKTtcbnZhciBPcGVyYXRvclN1YnNjcmliZXJfMSA9IHJlcXVpcmUoXCIuL09wZXJhdG9yU3Vic2NyaWJlclwiKTtcbmZ1bmN0aW9uIHRpbWVJbnRlcnZhbChzY2hlZHVsZXIpIHtcbiAgICBpZiAoc2NoZWR1bGVyID09PSB2b2lkIDApIHsgc2NoZWR1bGVyID0gYXN5bmNfMS5hc3luY1NjaGVkdWxlcjsgfVxuICAgIHJldHVybiBsaWZ0XzEub3BlcmF0ZShmdW5jdGlvbiAoc291cmNlLCBzdWJzY3JpYmVyKSB7XG4gICAgICAgIHZhciBsYXN0ID0gc2NoZWR1bGVyLm5vdygpO1xuICAgICAgICBzb3VyY2Uuc3Vic2NyaWJlKE9wZXJhdG9yU3Vic2NyaWJlcl8xLmNyZWF0ZU9wZXJhdG9yU3Vic2NyaWJlcihzdWJzY3JpYmVyLCBmdW5jdGlvbiAodmFsdWUpIHtcbiAgICAgICAgICAgIHZhciBub3cgPSBzY2hlZHVsZXIubm93KCk7XG4gICAgICAgICAgICB2YXIgaW50ZXJ2YWwgPSBub3cgLSBsYXN0O1xuICAgICAgICAgICAgbGFzdCA9IG5vdztcbiAgICAgICAgICAgIHN1YnNjcmliZXIubmV4dChuZXcgVGltZUludGVydmFsKHZhbHVlLCBpbnRlcnZhbCkpO1xuICAgICAgICB9KSk7XG4gICAgfSk7XG59XG5leHBvcnRzLnRpbWVJbnRlcnZhbCA9IHRpbWVJbnRlcnZhbDtcbnZhciBUaW1lSW50ZXJ2YWwgPSAoZnVuY3Rpb24gKCkge1xuICAgIGZ1bmN0aW9uIFRpbWVJbnRlcnZhbCh2YWx1ZSwgaW50ZXJ2YWwpIHtcbiAgICAgICAgdGhpcy52YWx1ZSA9IHZhbHVlO1xuICAgICAgICB0aGlzLmludGVydmFsID0gaW50ZXJ2YWw7XG4gICAgfVxuICAgIHJldHVybiBUaW1lSW50ZXJ2YWw7XG59KCkpO1xuZXhwb3J0cy5UaW1lSW50ZXJ2YWwgPSBUaW1lSW50ZXJ2YWw7XG4vLyMgc291cmNlTWFwcGluZ1VSTD10aW1lSW50ZXJ2YWwuanMubWFwIiwiXCJ1c2Ugc3RyaWN0XCI7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5leHBvcnRzLnRpbWVvdXQgPSBleHBvcnRzLlRpbWVvdXRFcnJvciA9IHZvaWQgMDtcbnZhciBhc3luY18xID0gcmVxdWlyZShcIi4uL3NjaGVkdWxlci9hc3luY1wiKTtcbnZhciBpc0RhdGVfMSA9IHJlcXVpcmUoXCIuLi91dGlsL2lzRGF0ZVwiKTtcbnZhciBsaWZ0XzEgPSByZXF1aXJlKFwiLi4vdXRpbC9saWZ0XCIpO1xudmFyIGlubmVyRnJvbV8xID0gcmVxdWlyZShcIi4uL29ic2VydmFibGUvaW5uZXJGcm9tXCIpO1xudmFyIGNyZWF0ZUVycm9yQ2xhc3NfMSA9IHJlcXVpcmUoXCIuLi91dGlsL2NyZWF0ZUVycm9yQ2xhc3NcIik7XG52YXIgT3BlcmF0b3JTdWJzY3JpYmVyXzEgPSByZXF1aXJlKFwiLi9PcGVyYXRvclN1YnNjcmliZXJcIik7XG52YXIgZXhlY3V0ZVNjaGVkdWxlXzEgPSByZXF1aXJlKFwiLi4vdXRpbC9leGVjdXRlU2NoZWR1bGVcIik7XG5leHBvcnRzLlRpbWVvdXRFcnJvciA9IGNyZWF0ZUVycm9yQ2xhc3NfMS5jcmVhdGVFcnJvckNsYXNzKGZ1bmN0aW9uIChfc3VwZXIpIHtcbiAgICByZXR1cm4gZnVuY3Rpb24gVGltZW91dEVycm9ySW1wbChpbmZvKSB7XG4gICAgICAgIGlmIChpbmZvID09PSB2b2lkIDApIHsgaW5mbyA9IG51bGw7IH1cbiAgICAgICAgX3N1cGVyKHRoaXMpO1xuICAgICAgICB0aGlzLm1lc3NhZ2UgPSAnVGltZW91dCBoYXMgb2NjdXJyZWQnO1xuICAgICAgICB0aGlzLm5hbWUgPSAnVGltZW91dEVycm9yJztcbiAgICAgICAgdGhpcy5pbmZvID0gaW5mbztcbiAgICB9O1xufSk7XG5mdW5jdGlvbiB0aW1lb3V0KGNvbmZpZywgc2NoZWR1bGVyQXJnKSB7XG4gICAgdmFyIF9hID0gKGlzRGF0ZV8xLmlzVmFsaWREYXRlKGNvbmZpZykgPyB7IGZpcnN0OiBjb25maWcgfSA6IHR5cGVvZiBjb25maWcgPT09ICdudW1iZXInID8geyBlYWNoOiBjb25maWcgfSA6IGNvbmZpZyksIGZpcnN0ID0gX2EuZmlyc3QsIGVhY2ggPSBfYS5lYWNoLCBfYiA9IF9hLndpdGgsIF93aXRoID0gX2IgPT09IHZvaWQgMCA/IHRpbWVvdXRFcnJvckZhY3RvcnkgOiBfYiwgX2MgPSBfYS5zY2hlZHVsZXIsIHNjaGVkdWxlciA9IF9jID09PSB2b2lkIDAgPyBzY2hlZHVsZXJBcmcgIT09IG51bGwgJiYgc2NoZWR1bGVyQXJnICE9PSB2b2lkIDAgPyBzY2hlZHVsZXJBcmcgOiBhc3luY18xLmFzeW5jU2NoZWR1bGVyIDogX2MsIF9kID0gX2EubWV0YSwgbWV0YSA9IF9kID09PSB2b2lkIDAgPyBudWxsIDogX2Q7XG4gICAgaWYgKGZpcnN0ID09IG51bGwgJiYgZWFjaCA9PSBudWxsKSB7XG4gICAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ05vIHRpbWVvdXQgcHJvdmlkZWQuJyk7XG4gICAgfVxuICAgIHJldHVybiBsaWZ0XzEub3BlcmF0ZShmdW5jdGlvbiAoc291cmNlLCBzdWJzY3JpYmVyKSB7XG4gICAgICAgIHZhciBvcmlnaW5hbFNvdXJjZVN1YnNjcmlwdGlvbjtcbiAgICAgICAgdmFyIHRpbWVyU3Vic2NyaXB0aW9uO1xuICAgICAgICB2YXIgbGFzdFZhbHVlID0gbnVsbDtcbiAgICAgICAgdmFyIHNlZW4gPSAwO1xuICAgICAgICB2YXIgc3RhcnRUaW1lciA9IGZ1bmN0aW9uIChkZWxheSkge1xuICAgICAgICAgICAgdGltZXJTdWJzY3JpcHRpb24gPSBleGVjdXRlU2NoZWR1bGVfMS5leGVjdXRlU2NoZWR1bGUoc3Vic2NyaWJlciwgc2NoZWR1bGVyLCBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgICAgICAgICAgb3JpZ2luYWxTb3VyY2VTdWJzY3JpcHRpb24udW5zdWJzY3JpYmUoKTtcbiAgICAgICAgICAgICAgICAgICAgaW5uZXJGcm9tXzEuaW5uZXJGcm9tKF93aXRoKHtcbiAgICAgICAgICAgICAgICAgICAgICAgIG1ldGE6IG1ldGEsXG4gICAgICAgICAgICAgICAgICAgICAgICBsYXN0VmFsdWU6IGxhc3RWYWx1ZSxcbiAgICAgICAgICAgICAgICAgICAgICAgIHNlZW46IHNlZW4sXG4gICAgICAgICAgICAgICAgICAgIH0pKS5zdWJzY3JpYmUoc3Vic2NyaWJlcik7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGNhdGNoIChlcnIpIHtcbiAgICAgICAgICAgICAgICAgICAgc3Vic2NyaWJlci5lcnJvcihlcnIpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0sIGRlbGF5KTtcbiAgICAgICAgfTtcbiAgICAgICAgb3JpZ2luYWxTb3VyY2VTdWJzY3JpcHRpb24gPSBzb3VyY2Uuc3Vic2NyaWJlKE9wZXJhdG9yU3Vic2NyaWJlcl8xLmNyZWF0ZU9wZXJhdG9yU3Vic2NyaWJlcihzdWJzY3JpYmVyLCBmdW5jdGlvbiAodmFsdWUpIHtcbiAgICAgICAgICAgIHRpbWVyU3Vic2NyaXB0aW9uID09PSBudWxsIHx8IHRpbWVyU3Vic2NyaXB0aW9uID09PSB2b2lkIDAgPyB2b2lkIDAgOiB0aW1lclN1YnNjcmlwdGlvbi51bnN1YnNjcmliZSgpO1xuICAgICAgICAgICAgc2VlbisrO1xuICAgICAgICAgICAgc3Vic2NyaWJlci5uZXh0KChsYXN0VmFsdWUgPSB2YWx1ZSkpO1xuICAgICAgICAgICAgZWFjaCA+IDAgJiYgc3RhcnRUaW1lcihlYWNoKTtcbiAgICAgICAgfSwgdW5kZWZpbmVkLCB1bmRlZmluZWQsIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIGlmICghKHRpbWVyU3Vic2NyaXB0aW9uID09PSBudWxsIHx8IHRpbWVyU3Vic2NyaXB0aW9uID09PSB2b2lkIDAgPyB2b2lkIDAgOiB0aW1lclN1YnNjcmlwdGlvbi5jbG9zZWQpKSB7XG4gICAgICAgICAgICAgICAgdGltZXJTdWJzY3JpcHRpb24gPT09IG51bGwgfHwgdGltZXJTdWJzY3JpcHRpb24gPT09IHZvaWQgMCA/IHZvaWQgMCA6IHRpbWVyU3Vic2NyaXB0aW9uLnVuc3Vic2NyaWJlKCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBsYXN0VmFsdWUgPSBudWxsO1xuICAgICAgICB9KSk7XG4gICAgICAgICFzZWVuICYmIHN0YXJ0VGltZXIoZmlyc3QgIT0gbnVsbCA/ICh0eXBlb2YgZmlyc3QgPT09ICdudW1iZXInID8gZmlyc3QgOiArZmlyc3QgLSBzY2hlZHVsZXIubm93KCkpIDogZWFjaCk7XG4gICAgfSk7XG59XG5leHBvcnRzLnRpbWVvdXQgPSB0aW1lb3V0O1xuZnVuY3Rpb24gdGltZW91dEVycm9yRmFjdG9yeShpbmZvKSB7XG4gICAgdGhyb3cgbmV3IGV4cG9ydHMuVGltZW91dEVycm9yKGluZm8pO1xufVxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9dGltZW91dC5qcy5tYXAiLCJcInVzZSBzdHJpY3RcIjtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmV4cG9ydHMudGltZW91dFdpdGggPSB2b2lkIDA7XG52YXIgYXN5bmNfMSA9IHJlcXVpcmUoXCIuLi9zY2hlZHVsZXIvYXN5bmNcIik7XG52YXIgaXNEYXRlXzEgPSByZXF1aXJlKFwiLi4vdXRpbC9pc0RhdGVcIik7XG52YXIgdGltZW91dF8xID0gcmVxdWlyZShcIi4vdGltZW91dFwiKTtcbmZ1bmN0aW9uIHRpbWVvdXRXaXRoKGR1ZSwgd2l0aE9ic2VydmFibGUsIHNjaGVkdWxlcikge1xuICAgIHZhciBmaXJzdDtcbiAgICB2YXIgZWFjaDtcbiAgICB2YXIgX3dpdGg7XG4gICAgc2NoZWR1bGVyID0gc2NoZWR1bGVyICE9PSBudWxsICYmIHNjaGVkdWxlciAhPT0gdm9pZCAwID8gc2NoZWR1bGVyIDogYXN5bmNfMS5hc3luYztcbiAgICBpZiAoaXNEYXRlXzEuaXNWYWxpZERhdGUoZHVlKSkge1xuICAgICAgICBmaXJzdCA9IGR1ZTtcbiAgICB9XG4gICAgZWxzZSBpZiAodHlwZW9mIGR1ZSA9PT0gJ251bWJlcicpIHtcbiAgICAgICAgZWFjaCA9IGR1ZTtcbiAgICB9XG4gICAgaWYgKHdpdGhPYnNlcnZhYmxlKSB7XG4gICAgICAgIF93aXRoID0gZnVuY3Rpb24gKCkgeyByZXR1cm4gd2l0aE9ic2VydmFibGU7IH07XG4gICAgfVxuICAgIGVsc2Uge1xuICAgICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCdObyBvYnNlcnZhYmxlIHByb3ZpZGVkIHRvIHN3aXRjaCB0bycpO1xuICAgIH1cbiAgICBpZiAoZmlyc3QgPT0gbnVsbCAmJiBlYWNoID09IG51bGwpIHtcbiAgICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcignTm8gdGltZW91dCBwcm92aWRlZC4nKTtcbiAgICB9XG4gICAgcmV0dXJuIHRpbWVvdXRfMS50aW1lb3V0KHtcbiAgICAgICAgZmlyc3Q6IGZpcnN0LFxuICAgICAgICBlYWNoOiBlYWNoLFxuICAgICAgICBzY2hlZHVsZXI6IHNjaGVkdWxlcixcbiAgICAgICAgd2l0aDogX3dpdGgsXG4gICAgfSk7XG59XG5leHBvcnRzLnRpbWVvdXRXaXRoID0gdGltZW91dFdpdGg7XG4vLyMgc291cmNlTWFwcGluZ1VSTD10aW1lb3V0V2l0aC5qcy5tYXAiLCJcInVzZSBzdHJpY3RcIjtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmV4cG9ydHMudGltZXN0YW1wID0gdm9pZCAwO1xudmFyIGRhdGVUaW1lc3RhbXBQcm92aWRlcl8xID0gcmVxdWlyZShcIi4uL3NjaGVkdWxlci9kYXRlVGltZXN0YW1wUHJvdmlkZXJcIik7XG52YXIgbWFwXzEgPSByZXF1aXJlKFwiLi9tYXBcIik7XG5mdW5jdGlvbiB0aW1lc3RhbXAodGltZXN0YW1wUHJvdmlkZXIpIHtcbiAgICBpZiAodGltZXN0YW1wUHJvdmlkZXIgPT09IHZvaWQgMCkgeyB0aW1lc3RhbXBQcm92aWRlciA9IGRhdGVUaW1lc3RhbXBQcm92aWRlcl8xLmRhdGVUaW1lc3RhbXBQcm92aWRlcjsgfVxuICAgIHJldHVybiBtYXBfMS5tYXAoZnVuY3Rpb24gKHZhbHVlKSB7IHJldHVybiAoeyB2YWx1ZTogdmFsdWUsIHRpbWVzdGFtcDogdGltZXN0YW1wUHJvdmlkZXIubm93KCkgfSk7IH0pO1xufVxuZXhwb3J0cy50aW1lc3RhbXAgPSB0aW1lc3RhbXA7XG4vLyMgc291cmNlTWFwcGluZ1VSTD10aW1lc3RhbXAuanMubWFwIiwiXCJ1c2Ugc3RyaWN0XCI7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5leHBvcnRzLnRvQXJyYXkgPSB2b2lkIDA7XG52YXIgcmVkdWNlXzEgPSByZXF1aXJlKFwiLi9yZWR1Y2VcIik7XG52YXIgbGlmdF8xID0gcmVxdWlyZShcIi4uL3V0aWwvbGlmdFwiKTtcbnZhciBhcnJSZWR1Y2VyID0gZnVuY3Rpb24gKGFyciwgdmFsdWUpIHsgcmV0dXJuIChhcnIucHVzaCh2YWx1ZSksIGFycik7IH07XG5mdW5jdGlvbiB0b0FycmF5KCkge1xuICAgIHJldHVybiBsaWZ0XzEub3BlcmF0ZShmdW5jdGlvbiAoc291cmNlLCBzdWJzY3JpYmVyKSB7XG4gICAgICAgIHJlZHVjZV8xLnJlZHVjZShhcnJSZWR1Y2VyLCBbXSkoc291cmNlKS5zdWJzY3JpYmUoc3Vic2NyaWJlcik7XG4gICAgfSk7XG59XG5leHBvcnRzLnRvQXJyYXkgPSB0b0FycmF5O1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9dG9BcnJheS5qcy5tYXAiLCJcInVzZSBzdHJpY3RcIjtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmV4cG9ydHMud2luZG93ID0gdm9pZCAwO1xudmFyIFN1YmplY3RfMSA9IHJlcXVpcmUoXCIuLi9TdWJqZWN0XCIpO1xudmFyIGxpZnRfMSA9IHJlcXVpcmUoXCIuLi91dGlsL2xpZnRcIik7XG52YXIgT3BlcmF0b3JTdWJzY3JpYmVyXzEgPSByZXF1aXJlKFwiLi9PcGVyYXRvclN1YnNjcmliZXJcIik7XG52YXIgbm9vcF8xID0gcmVxdWlyZShcIi4uL3V0aWwvbm9vcFwiKTtcbnZhciBpbm5lckZyb21fMSA9IHJlcXVpcmUoXCIuLi9vYnNlcnZhYmxlL2lubmVyRnJvbVwiKTtcbmZ1bmN0aW9uIHdpbmRvdyh3aW5kb3dCb3VuZGFyaWVzKSB7XG4gICAgcmV0dXJuIGxpZnRfMS5vcGVyYXRlKGZ1bmN0aW9uIChzb3VyY2UsIHN1YnNjcmliZXIpIHtcbiAgICAgICAgdmFyIHdpbmRvd1N1YmplY3QgPSBuZXcgU3ViamVjdF8xLlN1YmplY3QoKTtcbiAgICAgICAgc3Vic2NyaWJlci5uZXh0KHdpbmRvd1N1YmplY3QuYXNPYnNlcnZhYmxlKCkpO1xuICAgICAgICB2YXIgZXJyb3JIYW5kbGVyID0gZnVuY3Rpb24gKGVycikge1xuICAgICAgICAgICAgd2luZG93U3ViamVjdC5lcnJvcihlcnIpO1xuICAgICAgICAgICAgc3Vic2NyaWJlci5lcnJvcihlcnIpO1xuICAgICAgICB9O1xuICAgICAgICBzb3VyY2Uuc3Vic2NyaWJlKE9wZXJhdG9yU3Vic2NyaWJlcl8xLmNyZWF0ZU9wZXJhdG9yU3Vic2NyaWJlcihzdWJzY3JpYmVyLCBmdW5jdGlvbiAodmFsdWUpIHsgcmV0dXJuIHdpbmRvd1N1YmplY3QgPT09IG51bGwgfHwgd2luZG93U3ViamVjdCA9PT0gdm9pZCAwID8gdm9pZCAwIDogd2luZG93U3ViamVjdC5uZXh0KHZhbHVlKTsgfSwgZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgd2luZG93U3ViamVjdC5jb21wbGV0ZSgpO1xuICAgICAgICAgICAgc3Vic2NyaWJlci5jb21wbGV0ZSgpO1xuICAgICAgICB9LCBlcnJvckhhbmRsZXIpKTtcbiAgICAgICAgaW5uZXJGcm9tXzEuaW5uZXJGcm9tKHdpbmRvd0JvdW5kYXJpZXMpLnN1YnNjcmliZShPcGVyYXRvclN1YnNjcmliZXJfMS5jcmVhdGVPcGVyYXRvclN1YnNjcmliZXIoc3Vic2NyaWJlciwgZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgd2luZG93U3ViamVjdC5jb21wbGV0ZSgpO1xuICAgICAgICAgICAgc3Vic2NyaWJlci5uZXh0KCh3aW5kb3dTdWJqZWN0ID0gbmV3IFN1YmplY3RfMS5TdWJqZWN0KCkpKTtcbiAgICAgICAgfSwgbm9vcF8xLm5vb3AsIGVycm9ySGFuZGxlcikpO1xuICAgICAgICByZXR1cm4gZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgd2luZG93U3ViamVjdCA9PT0gbnVsbCB8fCB3aW5kb3dTdWJqZWN0ID09PSB2b2lkIDAgPyB2b2lkIDAgOiB3aW5kb3dTdWJqZWN0LnVuc3Vic2NyaWJlKCk7XG4gICAgICAgICAgICB3aW5kb3dTdWJqZWN0ID0gbnVsbDtcbiAgICAgICAgfTtcbiAgICB9KTtcbn1cbmV4cG9ydHMud2luZG93ID0gd2luZG93O1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9d2luZG93LmpzLm1hcCIsIlwidXNlIHN0cmljdFwiO1xudmFyIF9fdmFsdWVzID0gKHRoaXMgJiYgdGhpcy5fX3ZhbHVlcykgfHwgZnVuY3Rpb24obykge1xuICAgIHZhciBzID0gdHlwZW9mIFN5bWJvbCA9PT0gXCJmdW5jdGlvblwiICYmIFN5bWJvbC5pdGVyYXRvciwgbSA9IHMgJiYgb1tzXSwgaSA9IDA7XG4gICAgaWYgKG0pIHJldHVybiBtLmNhbGwobyk7XG4gICAgaWYgKG8gJiYgdHlwZW9mIG8ubGVuZ3RoID09PSBcIm51bWJlclwiKSByZXR1cm4ge1xuICAgICAgICBuZXh0OiBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICBpZiAobyAmJiBpID49IG8ubGVuZ3RoKSBvID0gdm9pZCAwO1xuICAgICAgICAgICAgcmV0dXJuIHsgdmFsdWU6IG8gJiYgb1tpKytdLCBkb25lOiAhbyB9O1xuICAgICAgICB9XG4gICAgfTtcbiAgICB0aHJvdyBuZXcgVHlwZUVycm9yKHMgPyBcIk9iamVjdCBpcyBub3QgaXRlcmFibGUuXCIgOiBcIlN5bWJvbC5pdGVyYXRvciBpcyBub3QgZGVmaW5lZC5cIik7XG59O1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuZXhwb3J0cy53aW5kb3dDb3VudCA9IHZvaWQgMDtcbnZhciBTdWJqZWN0XzEgPSByZXF1aXJlKFwiLi4vU3ViamVjdFwiKTtcbnZhciBsaWZ0XzEgPSByZXF1aXJlKFwiLi4vdXRpbC9saWZ0XCIpO1xudmFyIE9wZXJhdG9yU3Vic2NyaWJlcl8xID0gcmVxdWlyZShcIi4vT3BlcmF0b3JTdWJzY3JpYmVyXCIpO1xuZnVuY3Rpb24gd2luZG93Q291bnQod2luZG93U2l6ZSwgc3RhcnRXaW5kb3dFdmVyeSkge1xuICAgIGlmIChzdGFydFdpbmRvd0V2ZXJ5ID09PSB2b2lkIDApIHsgc3RhcnRXaW5kb3dFdmVyeSA9IDA7IH1cbiAgICB2YXIgc3RhcnRFdmVyeSA9IHN0YXJ0V2luZG93RXZlcnkgPiAwID8gc3RhcnRXaW5kb3dFdmVyeSA6IHdpbmRvd1NpemU7XG4gICAgcmV0dXJuIGxpZnRfMS5vcGVyYXRlKGZ1bmN0aW9uIChzb3VyY2UsIHN1YnNjcmliZXIpIHtcbiAgICAgICAgdmFyIHdpbmRvd3MgPSBbbmV3IFN1YmplY3RfMS5TdWJqZWN0KCldO1xuICAgICAgICB2YXIgc3RhcnRzID0gW107XG4gICAgICAgIHZhciBjb3VudCA9IDA7XG4gICAgICAgIHN1YnNjcmliZXIubmV4dCh3aW5kb3dzWzBdLmFzT2JzZXJ2YWJsZSgpKTtcbiAgICAgICAgc291cmNlLnN1YnNjcmliZShPcGVyYXRvclN1YnNjcmliZXJfMS5jcmVhdGVPcGVyYXRvclN1YnNjcmliZXIoc3Vic2NyaWJlciwgZnVuY3Rpb24gKHZhbHVlKSB7XG4gICAgICAgICAgICB2YXIgZV8xLCBfYTtcbiAgICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICAgICAgZm9yICh2YXIgd2luZG93c18xID0gX192YWx1ZXMod2luZG93cyksIHdpbmRvd3NfMV8xID0gd2luZG93c18xLm5leHQoKTsgIXdpbmRvd3NfMV8xLmRvbmU7IHdpbmRvd3NfMV8xID0gd2luZG93c18xLm5leHQoKSkge1xuICAgICAgICAgICAgICAgICAgICB2YXIgd2luZG93XzEgPSB3aW5kb3dzXzFfMS52YWx1ZTtcbiAgICAgICAgICAgICAgICAgICAgd2luZG93XzEubmV4dCh2YWx1ZSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgY2F0Y2ggKGVfMV8xKSB7IGVfMSA9IHsgZXJyb3I6IGVfMV8xIH07IH1cbiAgICAgICAgICAgIGZpbmFsbHkge1xuICAgICAgICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICAgICAgICAgIGlmICh3aW5kb3dzXzFfMSAmJiAhd2luZG93c18xXzEuZG9uZSAmJiAoX2EgPSB3aW5kb3dzXzEucmV0dXJuKSkgX2EuY2FsbCh3aW5kb3dzXzEpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBmaW5hbGx5IHsgaWYgKGVfMSkgdGhyb3cgZV8xLmVycm9yOyB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICB2YXIgYyA9IGNvdW50IC0gd2luZG93U2l6ZSArIDE7XG4gICAgICAgICAgICBpZiAoYyA+PSAwICYmIGMgJSBzdGFydEV2ZXJ5ID09PSAwKSB7XG4gICAgICAgICAgICAgICAgd2luZG93cy5zaGlmdCgpLmNvbXBsZXRlKCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAoKytjb3VudCAlIHN0YXJ0RXZlcnkgPT09IDApIHtcbiAgICAgICAgICAgICAgICB2YXIgd2luZG93XzIgPSBuZXcgU3ViamVjdF8xLlN1YmplY3QoKTtcbiAgICAgICAgICAgICAgICB3aW5kb3dzLnB1c2god2luZG93XzIpO1xuICAgICAgICAgICAgICAgIHN1YnNjcmliZXIubmV4dCh3aW5kb3dfMi5hc09ic2VydmFibGUoKSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0sIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIHdoaWxlICh3aW5kb3dzLmxlbmd0aCA+IDApIHtcbiAgICAgICAgICAgICAgICB3aW5kb3dzLnNoaWZ0KCkuY29tcGxldGUoKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHN1YnNjcmliZXIuY29tcGxldGUoKTtcbiAgICAgICAgfSwgZnVuY3Rpb24gKGVycikge1xuICAgICAgICAgICAgd2hpbGUgKHdpbmRvd3MubGVuZ3RoID4gMCkge1xuICAgICAgICAgICAgICAgIHdpbmRvd3Muc2hpZnQoKS5lcnJvcihlcnIpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgc3Vic2NyaWJlci5lcnJvcihlcnIpO1xuICAgICAgICB9LCBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICBzdGFydHMgPSBudWxsO1xuICAgICAgICAgICAgd2luZG93cyA9IG51bGw7XG4gICAgICAgIH0pKTtcbiAgICB9KTtcbn1cbmV4cG9ydHMud2luZG93Q291bnQgPSB3aW5kb3dDb3VudDtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPXdpbmRvd0NvdW50LmpzLm1hcCIsIlwidXNlIHN0cmljdFwiO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuZXhwb3J0cy53aW5kb3dUaW1lID0gdm9pZCAwO1xudmFyIFN1YmplY3RfMSA9IHJlcXVpcmUoXCIuLi9TdWJqZWN0XCIpO1xudmFyIGFzeW5jXzEgPSByZXF1aXJlKFwiLi4vc2NoZWR1bGVyL2FzeW5jXCIpO1xudmFyIFN1YnNjcmlwdGlvbl8xID0gcmVxdWlyZShcIi4uL1N1YnNjcmlwdGlvblwiKTtcbnZhciBsaWZ0XzEgPSByZXF1aXJlKFwiLi4vdXRpbC9saWZ0XCIpO1xudmFyIE9wZXJhdG9yU3Vic2NyaWJlcl8xID0gcmVxdWlyZShcIi4vT3BlcmF0b3JTdWJzY3JpYmVyXCIpO1xudmFyIGFyclJlbW92ZV8xID0gcmVxdWlyZShcIi4uL3V0aWwvYXJyUmVtb3ZlXCIpO1xudmFyIGFyZ3NfMSA9IHJlcXVpcmUoXCIuLi91dGlsL2FyZ3NcIik7XG52YXIgZXhlY3V0ZVNjaGVkdWxlXzEgPSByZXF1aXJlKFwiLi4vdXRpbC9leGVjdXRlU2NoZWR1bGVcIik7XG5mdW5jdGlvbiB3aW5kb3dUaW1lKHdpbmRvd1RpbWVTcGFuKSB7XG4gICAgdmFyIF9hLCBfYjtcbiAgICB2YXIgb3RoZXJBcmdzID0gW107XG4gICAgZm9yICh2YXIgX2kgPSAxOyBfaSA8IGFyZ3VtZW50cy5sZW5ndGg7IF9pKyspIHtcbiAgICAgICAgb3RoZXJBcmdzW19pIC0gMV0gPSBhcmd1bWVudHNbX2ldO1xuICAgIH1cbiAgICB2YXIgc2NoZWR1bGVyID0gKF9hID0gYXJnc18xLnBvcFNjaGVkdWxlcihvdGhlckFyZ3MpKSAhPT0gbnVsbCAmJiBfYSAhPT0gdm9pZCAwID8gX2EgOiBhc3luY18xLmFzeW5jU2NoZWR1bGVyO1xuICAgIHZhciB3aW5kb3dDcmVhdGlvbkludGVydmFsID0gKF9iID0gb3RoZXJBcmdzWzBdKSAhPT0gbnVsbCAmJiBfYiAhPT0gdm9pZCAwID8gX2IgOiBudWxsO1xuICAgIHZhciBtYXhXaW5kb3dTaXplID0gb3RoZXJBcmdzWzFdIHx8IEluZmluaXR5O1xuICAgIHJldHVybiBsaWZ0XzEub3BlcmF0ZShmdW5jdGlvbiAoc291cmNlLCBzdWJzY3JpYmVyKSB7XG4gICAgICAgIHZhciB3aW5kb3dSZWNvcmRzID0gW107XG4gICAgICAgIHZhciByZXN0YXJ0T25DbG9zZSA9IGZhbHNlO1xuICAgICAgICB2YXIgY2xvc2VXaW5kb3cgPSBmdW5jdGlvbiAocmVjb3JkKSB7XG4gICAgICAgICAgICB2YXIgd2luZG93ID0gcmVjb3JkLndpbmRvdywgc3VicyA9IHJlY29yZC5zdWJzO1xuICAgICAgICAgICAgd2luZG93LmNvbXBsZXRlKCk7XG4gICAgICAgICAgICBzdWJzLnVuc3Vic2NyaWJlKCk7XG4gICAgICAgICAgICBhcnJSZW1vdmVfMS5hcnJSZW1vdmUod2luZG93UmVjb3JkcywgcmVjb3JkKTtcbiAgICAgICAgICAgIHJlc3RhcnRPbkNsb3NlICYmIHN0YXJ0V2luZG93KCk7XG4gICAgICAgIH07XG4gICAgICAgIHZhciBzdGFydFdpbmRvdyA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIGlmICh3aW5kb3dSZWNvcmRzKSB7XG4gICAgICAgICAgICAgICAgdmFyIHN1YnMgPSBuZXcgU3Vic2NyaXB0aW9uXzEuU3Vic2NyaXB0aW9uKCk7XG4gICAgICAgICAgICAgICAgc3Vic2NyaWJlci5hZGQoc3Vicyk7XG4gICAgICAgICAgICAgICAgdmFyIHdpbmRvd18xID0gbmV3IFN1YmplY3RfMS5TdWJqZWN0KCk7XG4gICAgICAgICAgICAgICAgdmFyIHJlY29yZF8xID0ge1xuICAgICAgICAgICAgICAgICAgICB3aW5kb3c6IHdpbmRvd18xLFxuICAgICAgICAgICAgICAgICAgICBzdWJzOiBzdWJzLFxuICAgICAgICAgICAgICAgICAgICBzZWVuOiAwLFxuICAgICAgICAgICAgICAgIH07XG4gICAgICAgICAgICAgICAgd2luZG93UmVjb3Jkcy5wdXNoKHJlY29yZF8xKTtcbiAgICAgICAgICAgICAgICBzdWJzY3JpYmVyLm5leHQod2luZG93XzEuYXNPYnNlcnZhYmxlKCkpO1xuICAgICAgICAgICAgICAgIGV4ZWN1dGVTY2hlZHVsZV8xLmV4ZWN1dGVTY2hlZHVsZShzdWJzLCBzY2hlZHVsZXIsIGZ1bmN0aW9uICgpIHsgcmV0dXJuIGNsb3NlV2luZG93KHJlY29yZF8xKTsgfSwgd2luZG93VGltZVNwYW4pO1xuICAgICAgICAgICAgfVxuICAgICAgICB9O1xuICAgICAgICBpZiAod2luZG93Q3JlYXRpb25JbnRlcnZhbCAhPT0gbnVsbCAmJiB3aW5kb3dDcmVhdGlvbkludGVydmFsID49IDApIHtcbiAgICAgICAgICAgIGV4ZWN1dGVTY2hlZHVsZV8xLmV4ZWN1dGVTY2hlZHVsZShzdWJzY3JpYmVyLCBzY2hlZHVsZXIsIHN0YXJ0V2luZG93LCB3aW5kb3dDcmVhdGlvbkludGVydmFsLCB0cnVlKTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIHJlc3RhcnRPbkNsb3NlID0gdHJ1ZTtcbiAgICAgICAgfVxuICAgICAgICBzdGFydFdpbmRvdygpO1xuICAgICAgICB2YXIgbG9vcCA9IGZ1bmN0aW9uIChjYikgeyByZXR1cm4gd2luZG93UmVjb3Jkcy5zbGljZSgpLmZvckVhY2goY2IpOyB9O1xuICAgICAgICB2YXIgdGVybWluYXRlID0gZnVuY3Rpb24gKGNiKSB7XG4gICAgICAgICAgICBsb29wKGZ1bmN0aW9uIChfYSkge1xuICAgICAgICAgICAgICAgIHZhciB3aW5kb3cgPSBfYS53aW5kb3c7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGNiKHdpbmRvdyk7XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIGNiKHN1YnNjcmliZXIpO1xuICAgICAgICAgICAgc3Vic2NyaWJlci51bnN1YnNjcmliZSgpO1xuICAgICAgICB9O1xuICAgICAgICBzb3VyY2Uuc3Vic2NyaWJlKE9wZXJhdG9yU3Vic2NyaWJlcl8xLmNyZWF0ZU9wZXJhdG9yU3Vic2NyaWJlcihzdWJzY3JpYmVyLCBmdW5jdGlvbiAodmFsdWUpIHtcbiAgICAgICAgICAgIGxvb3AoZnVuY3Rpb24gKHJlY29yZCkge1xuICAgICAgICAgICAgICAgIHJlY29yZC53aW5kb3cubmV4dCh2YWx1ZSk7XG4gICAgICAgICAgICAgICAgbWF4V2luZG93U2l6ZSA8PSArK3JlY29yZC5zZWVuICYmIGNsb3NlV2luZG93KHJlY29yZCk7XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfSwgZnVuY3Rpb24gKCkgeyByZXR1cm4gdGVybWluYXRlKGZ1bmN0aW9uIChjb25zdW1lcikgeyByZXR1cm4gY29uc3VtZXIuY29tcGxldGUoKTsgfSk7IH0sIGZ1bmN0aW9uIChlcnIpIHsgcmV0dXJuIHRlcm1pbmF0ZShmdW5jdGlvbiAoY29uc3VtZXIpIHsgcmV0dXJuIGNvbnN1bWVyLmVycm9yKGVycik7IH0pOyB9KSk7XG4gICAgICAgIHJldHVybiBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICB3aW5kb3dSZWNvcmRzID0gbnVsbDtcbiAgICAgICAgfTtcbiAgICB9KTtcbn1cbmV4cG9ydHMud2luZG93VGltZSA9IHdpbmRvd1RpbWU7XG4vLyMgc291cmNlTWFwcGluZ1VSTD13aW5kb3dUaW1lLmpzLm1hcCIsIlwidXNlIHN0cmljdFwiO1xudmFyIF9fdmFsdWVzID0gKHRoaXMgJiYgdGhpcy5fX3ZhbHVlcykgfHwgZnVuY3Rpb24obykge1xuICAgIHZhciBzID0gdHlwZW9mIFN5bWJvbCA9PT0gXCJmdW5jdGlvblwiICYmIFN5bWJvbC5pdGVyYXRvciwgbSA9IHMgJiYgb1tzXSwgaSA9IDA7XG4gICAgaWYgKG0pIHJldHVybiBtLmNhbGwobyk7XG4gICAgaWYgKG8gJiYgdHlwZW9mIG8ubGVuZ3RoID09PSBcIm51bWJlclwiKSByZXR1cm4ge1xuICAgICAgICBuZXh0OiBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICBpZiAobyAmJiBpID49IG8ubGVuZ3RoKSBvID0gdm9pZCAwO1xuICAgICAgICAgICAgcmV0dXJuIHsgdmFsdWU6IG8gJiYgb1tpKytdLCBkb25lOiAhbyB9O1xuICAgICAgICB9XG4gICAgfTtcbiAgICB0aHJvdyBuZXcgVHlwZUVycm9yKHMgPyBcIk9iamVjdCBpcyBub3QgaXRlcmFibGUuXCIgOiBcIlN5bWJvbC5pdGVyYXRvciBpcyBub3QgZGVmaW5lZC5cIik7XG59O1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuZXhwb3J0cy53aW5kb3dUb2dnbGUgPSB2b2lkIDA7XG52YXIgU3ViamVjdF8xID0gcmVxdWlyZShcIi4uL1N1YmplY3RcIik7XG52YXIgU3Vic2NyaXB0aW9uXzEgPSByZXF1aXJlKFwiLi4vU3Vic2NyaXB0aW9uXCIpO1xudmFyIGxpZnRfMSA9IHJlcXVpcmUoXCIuLi91dGlsL2xpZnRcIik7XG52YXIgaW5uZXJGcm9tXzEgPSByZXF1aXJlKFwiLi4vb2JzZXJ2YWJsZS9pbm5lckZyb21cIik7XG52YXIgT3BlcmF0b3JTdWJzY3JpYmVyXzEgPSByZXF1aXJlKFwiLi9PcGVyYXRvclN1YnNjcmliZXJcIik7XG52YXIgbm9vcF8xID0gcmVxdWlyZShcIi4uL3V0aWwvbm9vcFwiKTtcbnZhciBhcnJSZW1vdmVfMSA9IHJlcXVpcmUoXCIuLi91dGlsL2FyclJlbW92ZVwiKTtcbmZ1bmN0aW9uIHdpbmRvd1RvZ2dsZShvcGVuaW5ncywgY2xvc2luZ1NlbGVjdG9yKSB7XG4gICAgcmV0dXJuIGxpZnRfMS5vcGVyYXRlKGZ1bmN0aW9uIChzb3VyY2UsIHN1YnNjcmliZXIpIHtcbiAgICAgICAgdmFyIHdpbmRvd3MgPSBbXTtcbiAgICAgICAgdmFyIGhhbmRsZUVycm9yID0gZnVuY3Rpb24gKGVycikge1xuICAgICAgICAgICAgd2hpbGUgKDAgPCB3aW5kb3dzLmxlbmd0aCkge1xuICAgICAgICAgICAgICAgIHdpbmRvd3Muc2hpZnQoKS5lcnJvcihlcnIpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgc3Vic2NyaWJlci5lcnJvcihlcnIpO1xuICAgICAgICB9O1xuICAgICAgICBpbm5lckZyb21fMS5pbm5lckZyb20ob3BlbmluZ3MpLnN1YnNjcmliZShPcGVyYXRvclN1YnNjcmliZXJfMS5jcmVhdGVPcGVyYXRvclN1YnNjcmliZXIoc3Vic2NyaWJlciwgZnVuY3Rpb24gKG9wZW5WYWx1ZSkge1xuICAgICAgICAgICAgdmFyIHdpbmRvdyA9IG5ldyBTdWJqZWN0XzEuU3ViamVjdCgpO1xuICAgICAgICAgICAgd2luZG93cy5wdXNoKHdpbmRvdyk7XG4gICAgICAgICAgICB2YXIgY2xvc2luZ1N1YnNjcmlwdGlvbiA9IG5ldyBTdWJzY3JpcHRpb25fMS5TdWJzY3JpcHRpb24oKTtcbiAgICAgICAgICAgIHZhciBjbG9zZVdpbmRvdyA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICBhcnJSZW1vdmVfMS5hcnJSZW1vdmUod2luZG93cywgd2luZG93KTtcbiAgICAgICAgICAgICAgICB3aW5kb3cuY29tcGxldGUoKTtcbiAgICAgICAgICAgICAgICBjbG9zaW5nU3Vic2NyaXB0aW9uLnVuc3Vic2NyaWJlKCk7XG4gICAgICAgICAgICB9O1xuICAgICAgICAgICAgdmFyIGNsb3NpbmdOb3RpZmllcjtcbiAgICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICAgICAgY2xvc2luZ05vdGlmaWVyID0gaW5uZXJGcm9tXzEuaW5uZXJGcm9tKGNsb3NpbmdTZWxlY3RvcihvcGVuVmFsdWUpKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGNhdGNoIChlcnIpIHtcbiAgICAgICAgICAgICAgICBoYW5kbGVFcnJvcihlcnIpO1xuICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHN1YnNjcmliZXIubmV4dCh3aW5kb3cuYXNPYnNlcnZhYmxlKCkpO1xuICAgICAgICAgICAgY2xvc2luZ1N1YnNjcmlwdGlvbi5hZGQoY2xvc2luZ05vdGlmaWVyLnN1YnNjcmliZShPcGVyYXRvclN1YnNjcmliZXJfMS5jcmVhdGVPcGVyYXRvclN1YnNjcmliZXIoc3Vic2NyaWJlciwgY2xvc2VXaW5kb3csIG5vb3BfMS5ub29wLCBoYW5kbGVFcnJvcikpKTtcbiAgICAgICAgfSwgbm9vcF8xLm5vb3ApKTtcbiAgICAgICAgc291cmNlLnN1YnNjcmliZShPcGVyYXRvclN1YnNjcmliZXJfMS5jcmVhdGVPcGVyYXRvclN1YnNjcmliZXIoc3Vic2NyaWJlciwgZnVuY3Rpb24gKHZhbHVlKSB7XG4gICAgICAgICAgICB2YXIgZV8xLCBfYTtcbiAgICAgICAgICAgIHZhciB3aW5kb3dzQ29weSA9IHdpbmRvd3Muc2xpY2UoKTtcbiAgICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICAgICAgZm9yICh2YXIgd2luZG93c0NvcHlfMSA9IF9fdmFsdWVzKHdpbmRvd3NDb3B5KSwgd2luZG93c0NvcHlfMV8xID0gd2luZG93c0NvcHlfMS5uZXh0KCk7ICF3aW5kb3dzQ29weV8xXzEuZG9uZTsgd2luZG93c0NvcHlfMV8xID0gd2luZG93c0NvcHlfMS5uZXh0KCkpIHtcbiAgICAgICAgICAgICAgICAgICAgdmFyIHdpbmRvd18xID0gd2luZG93c0NvcHlfMV8xLnZhbHVlO1xuICAgICAgICAgICAgICAgICAgICB3aW5kb3dfMS5uZXh0KHZhbHVlKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBjYXRjaCAoZV8xXzEpIHsgZV8xID0geyBlcnJvcjogZV8xXzEgfTsgfVxuICAgICAgICAgICAgZmluYWxseSB7XG4gICAgICAgICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgICAgICAgICAgaWYgKHdpbmRvd3NDb3B5XzFfMSAmJiAhd2luZG93c0NvcHlfMV8xLmRvbmUgJiYgKF9hID0gd2luZG93c0NvcHlfMS5yZXR1cm4pKSBfYS5jYWxsKHdpbmRvd3NDb3B5XzEpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBmaW5hbGx5IHsgaWYgKGVfMSkgdGhyb3cgZV8xLmVycm9yOyB9XG4gICAgICAgICAgICB9XG4gICAgICAgIH0sIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIHdoaWxlICgwIDwgd2luZG93cy5sZW5ndGgpIHtcbiAgICAgICAgICAgICAgICB3aW5kb3dzLnNoaWZ0KCkuY29tcGxldGUoKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHN1YnNjcmliZXIuY29tcGxldGUoKTtcbiAgICAgICAgfSwgaGFuZGxlRXJyb3IsIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIHdoaWxlICgwIDwgd2luZG93cy5sZW5ndGgpIHtcbiAgICAgICAgICAgICAgICB3aW5kb3dzLnNoaWZ0KCkudW5zdWJzY3JpYmUoKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSkpO1xuICAgIH0pO1xufVxuZXhwb3J0cy53aW5kb3dUb2dnbGUgPSB3aW5kb3dUb2dnbGU7XG4vLyMgc291cmNlTWFwcGluZ1VSTD13aW5kb3dUb2dnbGUuanMubWFwIiwiXCJ1c2Ugc3RyaWN0XCI7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5leHBvcnRzLndpbmRvd1doZW4gPSB2b2lkIDA7XG52YXIgU3ViamVjdF8xID0gcmVxdWlyZShcIi4uL1N1YmplY3RcIik7XG52YXIgbGlmdF8xID0gcmVxdWlyZShcIi4uL3V0aWwvbGlmdFwiKTtcbnZhciBPcGVyYXRvclN1YnNjcmliZXJfMSA9IHJlcXVpcmUoXCIuL09wZXJhdG9yU3Vic2NyaWJlclwiKTtcbnZhciBpbm5lckZyb21fMSA9IHJlcXVpcmUoXCIuLi9vYnNlcnZhYmxlL2lubmVyRnJvbVwiKTtcbmZ1bmN0aW9uIHdpbmRvd1doZW4oY2xvc2luZ1NlbGVjdG9yKSB7XG4gICAgcmV0dXJuIGxpZnRfMS5vcGVyYXRlKGZ1bmN0aW9uIChzb3VyY2UsIHN1YnNjcmliZXIpIHtcbiAgICAgICAgdmFyIHdpbmRvdztcbiAgICAgICAgdmFyIGNsb3NpbmdTdWJzY3JpYmVyO1xuICAgICAgICB2YXIgaGFuZGxlRXJyb3IgPSBmdW5jdGlvbiAoZXJyKSB7XG4gICAgICAgICAgICB3aW5kb3cuZXJyb3IoZXJyKTtcbiAgICAgICAgICAgIHN1YnNjcmliZXIuZXJyb3IoZXJyKTtcbiAgICAgICAgfTtcbiAgICAgICAgdmFyIG9wZW5XaW5kb3cgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICBjbG9zaW5nU3Vic2NyaWJlciA9PT0gbnVsbCB8fCBjbG9zaW5nU3Vic2NyaWJlciA9PT0gdm9pZCAwID8gdm9pZCAwIDogY2xvc2luZ1N1YnNjcmliZXIudW5zdWJzY3JpYmUoKTtcbiAgICAgICAgICAgIHdpbmRvdyA9PT0gbnVsbCB8fCB3aW5kb3cgPT09IHZvaWQgMCA/IHZvaWQgMCA6IHdpbmRvdy5jb21wbGV0ZSgpO1xuICAgICAgICAgICAgd2luZG93ID0gbmV3IFN1YmplY3RfMS5TdWJqZWN0KCk7XG4gICAgICAgICAgICBzdWJzY3JpYmVyLm5leHQod2luZG93LmFzT2JzZXJ2YWJsZSgpKTtcbiAgICAgICAgICAgIHZhciBjbG9zaW5nTm90aWZpZXI7XG4gICAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgICAgIGNsb3NpbmdOb3RpZmllciA9IGlubmVyRnJvbV8xLmlubmVyRnJvbShjbG9zaW5nU2VsZWN0b3IoKSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBjYXRjaCAoZXJyKSB7XG4gICAgICAgICAgICAgICAgaGFuZGxlRXJyb3IoZXJyKTtcbiAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBjbG9zaW5nTm90aWZpZXIuc3Vic2NyaWJlKChjbG9zaW5nU3Vic2NyaWJlciA9IE9wZXJhdG9yU3Vic2NyaWJlcl8xLmNyZWF0ZU9wZXJhdG9yU3Vic2NyaWJlcihzdWJzY3JpYmVyLCBvcGVuV2luZG93LCBvcGVuV2luZG93LCBoYW5kbGVFcnJvcikpKTtcbiAgICAgICAgfTtcbiAgICAgICAgb3BlbldpbmRvdygpO1xuICAgICAgICBzb3VyY2Uuc3Vic2NyaWJlKE9wZXJhdG9yU3Vic2NyaWJlcl8xLmNyZWF0ZU9wZXJhdG9yU3Vic2NyaWJlcihzdWJzY3JpYmVyLCBmdW5jdGlvbiAodmFsdWUpIHsgcmV0dXJuIHdpbmRvdy5uZXh0KHZhbHVlKTsgfSwgZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgd2luZG93LmNvbXBsZXRlKCk7XG4gICAgICAgICAgICBzdWJzY3JpYmVyLmNvbXBsZXRlKCk7XG4gICAgICAgIH0sIGhhbmRsZUVycm9yLCBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICBjbG9zaW5nU3Vic2NyaWJlciA9PT0gbnVsbCB8fCBjbG9zaW5nU3Vic2NyaWJlciA9PT0gdm9pZCAwID8gdm9pZCAwIDogY2xvc2luZ1N1YnNjcmliZXIudW5zdWJzY3JpYmUoKTtcbiAgICAgICAgICAgIHdpbmRvdyA9IG51bGw7XG4gICAgICAgIH0pKTtcbiAgICB9KTtcbn1cbmV4cG9ydHMud2luZG93V2hlbiA9IHdpbmRvd1doZW47XG4vLyMgc291cmNlTWFwcGluZ1VSTD13aW5kb3dXaGVuLmpzLm1hcCIsIlwidXNlIHN0cmljdFwiO1xudmFyIF9fcmVhZCA9ICh0aGlzICYmIHRoaXMuX19yZWFkKSB8fCBmdW5jdGlvbiAobywgbikge1xuICAgIHZhciBtID0gdHlwZW9mIFN5bWJvbCA9PT0gXCJmdW5jdGlvblwiICYmIG9bU3ltYm9sLml0ZXJhdG9yXTtcbiAgICBpZiAoIW0pIHJldHVybiBvO1xuICAgIHZhciBpID0gbS5jYWxsKG8pLCByLCBhciA9IFtdLCBlO1xuICAgIHRyeSB7XG4gICAgICAgIHdoaWxlICgobiA9PT0gdm9pZCAwIHx8IG4tLSA+IDApICYmICEociA9IGkubmV4dCgpKS5kb25lKSBhci5wdXNoKHIudmFsdWUpO1xuICAgIH1cbiAgICBjYXRjaCAoZXJyb3IpIHsgZSA9IHsgZXJyb3I6IGVycm9yIH07IH1cbiAgICBmaW5hbGx5IHtcbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgIGlmIChyICYmICFyLmRvbmUgJiYgKG0gPSBpW1wicmV0dXJuXCJdKSkgbS5jYWxsKGkpO1xuICAgICAgICB9XG4gICAgICAgIGZpbmFsbHkgeyBpZiAoZSkgdGhyb3cgZS5lcnJvcjsgfVxuICAgIH1cbiAgICByZXR1cm4gYXI7XG59O1xudmFyIF9fc3ByZWFkQXJyYXkgPSAodGhpcyAmJiB0aGlzLl9fc3ByZWFkQXJyYXkpIHx8IGZ1bmN0aW9uICh0bywgZnJvbSkge1xuICAgIGZvciAodmFyIGkgPSAwLCBpbCA9IGZyb20ubGVuZ3RoLCBqID0gdG8ubGVuZ3RoOyBpIDwgaWw7IGkrKywgaisrKVxuICAgICAgICB0b1tqXSA9IGZyb21baV07XG4gICAgcmV0dXJuIHRvO1xufTtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmV4cG9ydHMud2l0aExhdGVzdEZyb20gPSB2b2lkIDA7XG52YXIgbGlmdF8xID0gcmVxdWlyZShcIi4uL3V0aWwvbGlmdFwiKTtcbnZhciBPcGVyYXRvclN1YnNjcmliZXJfMSA9IHJlcXVpcmUoXCIuL09wZXJhdG9yU3Vic2NyaWJlclwiKTtcbnZhciBpbm5lckZyb21fMSA9IHJlcXVpcmUoXCIuLi9vYnNlcnZhYmxlL2lubmVyRnJvbVwiKTtcbnZhciBpZGVudGl0eV8xID0gcmVxdWlyZShcIi4uL3V0aWwvaWRlbnRpdHlcIik7XG52YXIgbm9vcF8xID0gcmVxdWlyZShcIi4uL3V0aWwvbm9vcFwiKTtcbnZhciBhcmdzXzEgPSByZXF1aXJlKFwiLi4vdXRpbC9hcmdzXCIpO1xuZnVuY3Rpb24gd2l0aExhdGVzdEZyb20oKSB7XG4gICAgdmFyIGlucHV0cyA9IFtdO1xuICAgIGZvciAodmFyIF9pID0gMDsgX2kgPCBhcmd1bWVudHMubGVuZ3RoOyBfaSsrKSB7XG4gICAgICAgIGlucHV0c1tfaV0gPSBhcmd1bWVudHNbX2ldO1xuICAgIH1cbiAgICB2YXIgcHJvamVjdCA9IGFyZ3NfMS5wb3BSZXN1bHRTZWxlY3RvcihpbnB1dHMpO1xuICAgIHJldHVybiBsaWZ0XzEub3BlcmF0ZShmdW5jdGlvbiAoc291cmNlLCBzdWJzY3JpYmVyKSB7XG4gICAgICAgIHZhciBsZW4gPSBpbnB1dHMubGVuZ3RoO1xuICAgICAgICB2YXIgb3RoZXJWYWx1ZXMgPSBuZXcgQXJyYXkobGVuKTtcbiAgICAgICAgdmFyIGhhc1ZhbHVlID0gaW5wdXRzLm1hcChmdW5jdGlvbiAoKSB7IHJldHVybiBmYWxzZTsgfSk7XG4gICAgICAgIHZhciByZWFkeSA9IGZhbHNlO1xuICAgICAgICB2YXIgX2xvb3BfMSA9IGZ1bmN0aW9uIChpKSB7XG4gICAgICAgICAgICBpbm5lckZyb21fMS5pbm5lckZyb20oaW5wdXRzW2ldKS5zdWJzY3JpYmUoT3BlcmF0b3JTdWJzY3JpYmVyXzEuY3JlYXRlT3BlcmF0b3JTdWJzY3JpYmVyKHN1YnNjcmliZXIsIGZ1bmN0aW9uICh2YWx1ZSkge1xuICAgICAgICAgICAgICAgIG90aGVyVmFsdWVzW2ldID0gdmFsdWU7XG4gICAgICAgICAgICAgICAgaWYgKCFyZWFkeSAmJiAhaGFzVmFsdWVbaV0pIHtcbiAgICAgICAgICAgICAgICAgICAgaGFzVmFsdWVbaV0gPSB0cnVlO1xuICAgICAgICAgICAgICAgICAgICAocmVhZHkgPSBoYXNWYWx1ZS5ldmVyeShpZGVudGl0eV8xLmlkZW50aXR5KSkgJiYgKGhhc1ZhbHVlID0gbnVsbCk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSwgbm9vcF8xLm5vb3ApKTtcbiAgICAgICAgfTtcbiAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBsZW47IGkrKykge1xuICAgICAgICAgICAgX2xvb3BfMShpKTtcbiAgICAgICAgfVxuICAgICAgICBzb3VyY2Uuc3Vic2NyaWJlKE9wZXJhdG9yU3Vic2NyaWJlcl8xLmNyZWF0ZU9wZXJhdG9yU3Vic2NyaWJlcihzdWJzY3JpYmVyLCBmdW5jdGlvbiAodmFsdWUpIHtcbiAgICAgICAgICAgIGlmIChyZWFkeSkge1xuICAgICAgICAgICAgICAgIHZhciB2YWx1ZXMgPSBfX3NwcmVhZEFycmF5KFt2YWx1ZV0sIF9fcmVhZChvdGhlclZhbHVlcykpO1xuICAgICAgICAgICAgICAgIHN1YnNjcmliZXIubmV4dChwcm9qZWN0ID8gcHJvamVjdC5hcHBseSh2b2lkIDAsIF9fc3ByZWFkQXJyYXkoW10sIF9fcmVhZCh2YWx1ZXMpKSkgOiB2YWx1ZXMpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9KSk7XG4gICAgfSk7XG59XG5leHBvcnRzLndpdGhMYXRlc3RGcm9tID0gd2l0aExhdGVzdEZyb207XG4vLyMgc291cmNlTWFwcGluZ1VSTD13aXRoTGF0ZXN0RnJvbS5qcy5tYXAiLCJcInVzZSBzdHJpY3RcIjtcbnZhciBfX3JlYWQgPSAodGhpcyAmJiB0aGlzLl9fcmVhZCkgfHwgZnVuY3Rpb24gKG8sIG4pIHtcbiAgICB2YXIgbSA9IHR5cGVvZiBTeW1ib2wgPT09IFwiZnVuY3Rpb25cIiAmJiBvW1N5bWJvbC5pdGVyYXRvcl07XG4gICAgaWYgKCFtKSByZXR1cm4gbztcbiAgICB2YXIgaSA9IG0uY2FsbChvKSwgciwgYXIgPSBbXSwgZTtcbiAgICB0cnkge1xuICAgICAgICB3aGlsZSAoKG4gPT09IHZvaWQgMCB8fCBuLS0gPiAwKSAmJiAhKHIgPSBpLm5leHQoKSkuZG9uZSkgYXIucHVzaChyLnZhbHVlKTtcbiAgICB9XG4gICAgY2F0Y2ggKGVycm9yKSB7IGUgPSB7IGVycm9yOiBlcnJvciB9OyB9XG4gICAgZmluYWxseSB7XG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgICBpZiAociAmJiAhci5kb25lICYmIChtID0gaVtcInJldHVyblwiXSkpIG0uY2FsbChpKTtcbiAgICAgICAgfVxuICAgICAgICBmaW5hbGx5IHsgaWYgKGUpIHRocm93IGUuZXJyb3I7IH1cbiAgICB9XG4gICAgcmV0dXJuIGFyO1xufTtcbnZhciBfX3NwcmVhZEFycmF5ID0gKHRoaXMgJiYgdGhpcy5fX3NwcmVhZEFycmF5KSB8fCBmdW5jdGlvbiAodG8sIGZyb20pIHtcbiAgICBmb3IgKHZhciBpID0gMCwgaWwgPSBmcm9tLmxlbmd0aCwgaiA9IHRvLmxlbmd0aDsgaSA8IGlsOyBpKyssIGorKylcbiAgICAgICAgdG9bal0gPSBmcm9tW2ldO1xuICAgIHJldHVybiB0bztcbn07XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5leHBvcnRzLnppcCA9IHZvaWQgMDtcbnZhciB6aXBfMSA9IHJlcXVpcmUoXCIuLi9vYnNlcnZhYmxlL3ppcFwiKTtcbnZhciBsaWZ0XzEgPSByZXF1aXJlKFwiLi4vdXRpbC9saWZ0XCIpO1xuZnVuY3Rpb24gemlwKCkge1xuICAgIHZhciBzb3VyY2VzID0gW107XG4gICAgZm9yICh2YXIgX2kgPSAwOyBfaSA8IGFyZ3VtZW50cy5sZW5ndGg7IF9pKyspIHtcbiAgICAgICAgc291cmNlc1tfaV0gPSBhcmd1bWVudHNbX2ldO1xuICAgIH1cbiAgICByZXR1cm4gbGlmdF8xLm9wZXJhdGUoZnVuY3Rpb24gKHNvdXJjZSwgc3Vic2NyaWJlcikge1xuICAgICAgICB6aXBfMS56aXAuYXBwbHkodm9pZCAwLCBfX3NwcmVhZEFycmF5KFtzb3VyY2VdLCBfX3JlYWQoc291cmNlcykpKS5zdWJzY3JpYmUoc3Vic2NyaWJlcik7XG4gICAgfSk7XG59XG5leHBvcnRzLnppcCA9IHppcDtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPXppcC5qcy5tYXAiLCJcInVzZSBzdHJpY3RcIjtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmV4cG9ydHMuemlwQWxsID0gdm9pZCAwO1xudmFyIHppcF8xID0gcmVxdWlyZShcIi4uL29ic2VydmFibGUvemlwXCIpO1xudmFyIGpvaW5BbGxJbnRlcm5hbHNfMSA9IHJlcXVpcmUoXCIuL2pvaW5BbGxJbnRlcm5hbHNcIik7XG5mdW5jdGlvbiB6aXBBbGwocHJvamVjdCkge1xuICAgIHJldHVybiBqb2luQWxsSW50ZXJuYWxzXzEuam9pbkFsbEludGVybmFscyh6aXBfMS56aXAsIHByb2plY3QpO1xufVxuZXhwb3J0cy56aXBBbGwgPSB6aXBBbGw7XG4vLyMgc291cmNlTWFwcGluZ1VSTD16aXBBbGwuanMubWFwIiwiXCJ1c2Ugc3RyaWN0XCI7XG52YXIgX19yZWFkID0gKHRoaXMgJiYgdGhpcy5fX3JlYWQpIHx8IGZ1bmN0aW9uIChvLCBuKSB7XG4gICAgdmFyIG0gPSB0eXBlb2YgU3ltYm9sID09PSBcImZ1bmN0aW9uXCIgJiYgb1tTeW1ib2wuaXRlcmF0b3JdO1xuICAgIGlmICghbSkgcmV0dXJuIG87XG4gICAgdmFyIGkgPSBtLmNhbGwobyksIHIsIGFyID0gW10sIGU7XG4gICAgdHJ5IHtcbiAgICAgICAgd2hpbGUgKChuID09PSB2b2lkIDAgfHwgbi0tID4gMCkgJiYgIShyID0gaS5uZXh0KCkpLmRvbmUpIGFyLnB1c2goci52YWx1ZSk7XG4gICAgfVxuICAgIGNhdGNoIChlcnJvcikgeyBlID0geyBlcnJvcjogZXJyb3IgfTsgfVxuICAgIGZpbmFsbHkge1xuICAgICAgICB0cnkge1xuICAgICAgICAgICAgaWYgKHIgJiYgIXIuZG9uZSAmJiAobSA9IGlbXCJyZXR1cm5cIl0pKSBtLmNhbGwoaSk7XG4gICAgICAgIH1cbiAgICAgICAgZmluYWxseSB7IGlmIChlKSB0aHJvdyBlLmVycm9yOyB9XG4gICAgfVxuICAgIHJldHVybiBhcjtcbn07XG52YXIgX19zcHJlYWRBcnJheSA9ICh0aGlzICYmIHRoaXMuX19zcHJlYWRBcnJheSkgfHwgZnVuY3Rpb24gKHRvLCBmcm9tKSB7XG4gICAgZm9yICh2YXIgaSA9IDAsIGlsID0gZnJvbS5sZW5ndGgsIGogPSB0by5sZW5ndGg7IGkgPCBpbDsgaSsrLCBqKyspXG4gICAgICAgIHRvW2pdID0gZnJvbVtpXTtcbiAgICByZXR1cm4gdG87XG59O1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuZXhwb3J0cy56aXBXaXRoID0gdm9pZCAwO1xudmFyIHppcF8xID0gcmVxdWlyZShcIi4vemlwXCIpO1xuZnVuY3Rpb24gemlwV2l0aCgpIHtcbiAgICB2YXIgb3RoZXJJbnB1dHMgPSBbXTtcbiAgICBmb3IgKHZhciBfaSA9IDA7IF9pIDwgYXJndW1lbnRzLmxlbmd0aDsgX2krKykge1xuICAgICAgICBvdGhlcklucHV0c1tfaV0gPSBhcmd1bWVudHNbX2ldO1xuICAgIH1cbiAgICByZXR1cm4gemlwXzEuemlwLmFwcGx5KHZvaWQgMCwgX19zcHJlYWRBcnJheShbXSwgX19yZWFkKG90aGVySW5wdXRzKSkpO1xufVxuZXhwb3J0cy56aXBXaXRoID0gemlwV2l0aDtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPXppcFdpdGguanMubWFwIiwiXCJ1c2Ugc3RyaWN0XCI7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5leHBvcnRzLnNjaGVkdWxlQXJyYXkgPSB2b2lkIDA7XG52YXIgT2JzZXJ2YWJsZV8xID0gcmVxdWlyZShcIi4uL09ic2VydmFibGVcIik7XG5mdW5jdGlvbiBzY2hlZHVsZUFycmF5KGlucHV0LCBzY2hlZHVsZXIpIHtcbiAgICByZXR1cm4gbmV3IE9ic2VydmFibGVfMS5PYnNlcnZhYmxlKGZ1bmN0aW9uIChzdWJzY3JpYmVyKSB7XG4gICAgICAgIHZhciBpID0gMDtcbiAgICAgICAgcmV0dXJuIHNjaGVkdWxlci5zY2hlZHVsZShmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICBpZiAoaSA9PT0gaW5wdXQubGVuZ3RoKSB7XG4gICAgICAgICAgICAgICAgc3Vic2NyaWJlci5jb21wbGV0ZSgpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgc3Vic2NyaWJlci5uZXh0KGlucHV0W2krK10pO1xuICAgICAgICAgICAgICAgIGlmICghc3Vic2NyaWJlci5jbG9zZWQpIHtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5zY2hlZHVsZSgpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgfSk7XG4gICAgfSk7XG59XG5leHBvcnRzLnNjaGVkdWxlQXJyYXkgPSBzY2hlZHVsZUFycmF5O1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9c2NoZWR1bGVBcnJheS5qcy5tYXAiLCJcInVzZSBzdHJpY3RcIjtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmV4cG9ydHMuc2NoZWR1bGVBc3luY0l0ZXJhYmxlID0gdm9pZCAwO1xudmFyIE9ic2VydmFibGVfMSA9IHJlcXVpcmUoXCIuLi9PYnNlcnZhYmxlXCIpO1xudmFyIGV4ZWN1dGVTY2hlZHVsZV8xID0gcmVxdWlyZShcIi4uL3V0aWwvZXhlY3V0ZVNjaGVkdWxlXCIpO1xuZnVuY3Rpb24gc2NoZWR1bGVBc3luY0l0ZXJhYmxlKGlucHV0LCBzY2hlZHVsZXIpIHtcbiAgICBpZiAoIWlucHV0KSB7XG4gICAgICAgIHRocm93IG5ldyBFcnJvcignSXRlcmFibGUgY2Fubm90IGJlIG51bGwnKTtcbiAgICB9XG4gICAgcmV0dXJuIG5ldyBPYnNlcnZhYmxlXzEuT2JzZXJ2YWJsZShmdW5jdGlvbiAoc3Vic2NyaWJlcikge1xuICAgICAgICBleGVjdXRlU2NoZWR1bGVfMS5leGVjdXRlU2NoZWR1bGUoc3Vic2NyaWJlciwgc2NoZWR1bGVyLCBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICB2YXIgaXRlcmF0b3IgPSBpbnB1dFtTeW1ib2wuYXN5bmNJdGVyYXRvcl0oKTtcbiAgICAgICAgICAgIGV4ZWN1dGVTY2hlZHVsZV8xLmV4ZWN1dGVTY2hlZHVsZShzdWJzY3JpYmVyLCBzY2hlZHVsZXIsIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICBpdGVyYXRvci5uZXh0KCkudGhlbihmdW5jdGlvbiAocmVzdWx0KSB7XG4gICAgICAgICAgICAgICAgICAgIGlmIChyZXN1bHQuZG9uZSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgc3Vic2NyaWJlci5jb21wbGV0ZSgpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAgICAgc3Vic2NyaWJlci5uZXh0KHJlc3VsdC52YWx1ZSk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIH0sIDAsIHRydWUpO1xuICAgICAgICB9KTtcbiAgICB9KTtcbn1cbmV4cG9ydHMuc2NoZWR1bGVBc3luY0l0ZXJhYmxlID0gc2NoZWR1bGVBc3luY0l0ZXJhYmxlO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9c2NoZWR1bGVBc3luY0l0ZXJhYmxlLmpzLm1hcCIsIlwidXNlIHN0cmljdFwiO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuZXhwb3J0cy5zY2hlZHVsZUl0ZXJhYmxlID0gdm9pZCAwO1xudmFyIE9ic2VydmFibGVfMSA9IHJlcXVpcmUoXCIuLi9PYnNlcnZhYmxlXCIpO1xudmFyIGl0ZXJhdG9yXzEgPSByZXF1aXJlKFwiLi4vc3ltYm9sL2l0ZXJhdG9yXCIpO1xudmFyIGlzRnVuY3Rpb25fMSA9IHJlcXVpcmUoXCIuLi91dGlsL2lzRnVuY3Rpb25cIik7XG52YXIgZXhlY3V0ZVNjaGVkdWxlXzEgPSByZXF1aXJlKFwiLi4vdXRpbC9leGVjdXRlU2NoZWR1bGVcIik7XG5mdW5jdGlvbiBzY2hlZHVsZUl0ZXJhYmxlKGlucHV0LCBzY2hlZHVsZXIpIHtcbiAgICByZXR1cm4gbmV3IE9ic2VydmFibGVfMS5PYnNlcnZhYmxlKGZ1bmN0aW9uIChzdWJzY3JpYmVyKSB7XG4gICAgICAgIHZhciBpdGVyYXRvcjtcbiAgICAgICAgZXhlY3V0ZVNjaGVkdWxlXzEuZXhlY3V0ZVNjaGVkdWxlKHN1YnNjcmliZXIsIHNjaGVkdWxlciwgZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgaXRlcmF0b3IgPSBpbnB1dFtpdGVyYXRvcl8xLml0ZXJhdG9yXSgpO1xuICAgICAgICAgICAgZXhlY3V0ZVNjaGVkdWxlXzEuZXhlY3V0ZVNjaGVkdWxlKHN1YnNjcmliZXIsIHNjaGVkdWxlciwgZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgIHZhciBfYTtcbiAgICAgICAgICAgICAgICB2YXIgdmFsdWU7XG4gICAgICAgICAgICAgICAgdmFyIGRvbmU7XG4gICAgICAgICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgICAgICAgICAgKF9hID0gaXRlcmF0b3IubmV4dCgpLCB2YWx1ZSA9IF9hLnZhbHVlLCBkb25lID0gX2EuZG9uZSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGNhdGNoIChlcnIpIHtcbiAgICAgICAgICAgICAgICAgICAgc3Vic2NyaWJlci5lcnJvcihlcnIpO1xuICAgICAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGlmIChkb25lKSB7XG4gICAgICAgICAgICAgICAgICAgIHN1YnNjcmliZXIuY29tcGxldGUoKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIHN1YnNjcmliZXIubmV4dCh2YWx1ZSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSwgMCwgdHJ1ZSk7XG4gICAgICAgIH0pO1xuICAgICAgICByZXR1cm4gZnVuY3Rpb24gKCkgeyByZXR1cm4gaXNGdW5jdGlvbl8xLmlzRnVuY3Rpb24oaXRlcmF0b3IgPT09IG51bGwgfHwgaXRlcmF0b3IgPT09IHZvaWQgMCA/IHZvaWQgMCA6IGl0ZXJhdG9yLnJldHVybikgJiYgaXRlcmF0b3IucmV0dXJuKCk7IH07XG4gICAgfSk7XG59XG5leHBvcnRzLnNjaGVkdWxlSXRlcmFibGUgPSBzY2hlZHVsZUl0ZXJhYmxlO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9c2NoZWR1bGVJdGVyYWJsZS5qcy5tYXAiLCJcInVzZSBzdHJpY3RcIjtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmV4cG9ydHMuc2NoZWR1bGVPYnNlcnZhYmxlID0gdm9pZCAwO1xudmFyIGlubmVyRnJvbV8xID0gcmVxdWlyZShcIi4uL29ic2VydmFibGUvaW5uZXJGcm9tXCIpO1xudmFyIG9ic2VydmVPbl8xID0gcmVxdWlyZShcIi4uL29wZXJhdG9ycy9vYnNlcnZlT25cIik7XG52YXIgc3Vic2NyaWJlT25fMSA9IHJlcXVpcmUoXCIuLi9vcGVyYXRvcnMvc3Vic2NyaWJlT25cIik7XG5mdW5jdGlvbiBzY2hlZHVsZU9ic2VydmFibGUoaW5wdXQsIHNjaGVkdWxlcikge1xuICAgIHJldHVybiBpbm5lckZyb21fMS5pbm5lckZyb20oaW5wdXQpLnBpcGUoc3Vic2NyaWJlT25fMS5zdWJzY3JpYmVPbihzY2hlZHVsZXIpLCBvYnNlcnZlT25fMS5vYnNlcnZlT24oc2NoZWR1bGVyKSk7XG59XG5leHBvcnRzLnNjaGVkdWxlT2JzZXJ2YWJsZSA9IHNjaGVkdWxlT2JzZXJ2YWJsZTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPXNjaGVkdWxlT2JzZXJ2YWJsZS5qcy5tYXAiLCJcInVzZSBzdHJpY3RcIjtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmV4cG9ydHMuc2NoZWR1bGVQcm9taXNlID0gdm9pZCAwO1xudmFyIGlubmVyRnJvbV8xID0gcmVxdWlyZShcIi4uL29ic2VydmFibGUvaW5uZXJGcm9tXCIpO1xudmFyIG9ic2VydmVPbl8xID0gcmVxdWlyZShcIi4uL29wZXJhdG9ycy9vYnNlcnZlT25cIik7XG52YXIgc3Vic2NyaWJlT25fMSA9IHJlcXVpcmUoXCIuLi9vcGVyYXRvcnMvc3Vic2NyaWJlT25cIik7XG5mdW5jdGlvbiBzY2hlZHVsZVByb21pc2UoaW5wdXQsIHNjaGVkdWxlcikge1xuICAgIHJldHVybiBpbm5lckZyb21fMS5pbm5lckZyb20oaW5wdXQpLnBpcGUoc3Vic2NyaWJlT25fMS5zdWJzY3JpYmVPbihzY2hlZHVsZXIpLCBvYnNlcnZlT25fMS5vYnNlcnZlT24oc2NoZWR1bGVyKSk7XG59XG5leHBvcnRzLnNjaGVkdWxlUHJvbWlzZSA9IHNjaGVkdWxlUHJvbWlzZTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPXNjaGVkdWxlUHJvbWlzZS5qcy5tYXAiLCJcInVzZSBzdHJpY3RcIjtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmV4cG9ydHMuc2NoZWR1bGVSZWFkYWJsZVN0cmVhbUxpa2UgPSB2b2lkIDA7XG52YXIgc2NoZWR1bGVBc3luY0l0ZXJhYmxlXzEgPSByZXF1aXJlKFwiLi9zY2hlZHVsZUFzeW5jSXRlcmFibGVcIik7XG52YXIgaXNSZWFkYWJsZVN0cmVhbUxpa2VfMSA9IHJlcXVpcmUoXCIuLi91dGlsL2lzUmVhZGFibGVTdHJlYW1MaWtlXCIpO1xuZnVuY3Rpb24gc2NoZWR1bGVSZWFkYWJsZVN0cmVhbUxpa2UoaW5wdXQsIHNjaGVkdWxlcikge1xuICAgIHJldHVybiBzY2hlZHVsZUFzeW5jSXRlcmFibGVfMS5zY2hlZHVsZUFzeW5jSXRlcmFibGUoaXNSZWFkYWJsZVN0cmVhbUxpa2VfMS5yZWFkYWJsZVN0cmVhbUxpa2VUb0FzeW5jR2VuZXJhdG9yKGlucHV0KSwgc2NoZWR1bGVyKTtcbn1cbmV4cG9ydHMuc2NoZWR1bGVSZWFkYWJsZVN0cmVhbUxpa2UgPSBzY2hlZHVsZVJlYWRhYmxlU3RyZWFtTGlrZTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPXNjaGVkdWxlUmVhZGFibGVTdHJlYW1MaWtlLmpzLm1hcCIsIlwidXNlIHN0cmljdFwiO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuZXhwb3J0cy5zY2hlZHVsZWQgPSB2b2lkIDA7XG52YXIgc2NoZWR1bGVPYnNlcnZhYmxlXzEgPSByZXF1aXJlKFwiLi9zY2hlZHVsZU9ic2VydmFibGVcIik7XG52YXIgc2NoZWR1bGVQcm9taXNlXzEgPSByZXF1aXJlKFwiLi9zY2hlZHVsZVByb21pc2VcIik7XG52YXIgc2NoZWR1bGVBcnJheV8xID0gcmVxdWlyZShcIi4vc2NoZWR1bGVBcnJheVwiKTtcbnZhciBzY2hlZHVsZUl0ZXJhYmxlXzEgPSByZXF1aXJlKFwiLi9zY2hlZHVsZUl0ZXJhYmxlXCIpO1xudmFyIHNjaGVkdWxlQXN5bmNJdGVyYWJsZV8xID0gcmVxdWlyZShcIi4vc2NoZWR1bGVBc3luY0l0ZXJhYmxlXCIpO1xudmFyIGlzSW50ZXJvcE9ic2VydmFibGVfMSA9IHJlcXVpcmUoXCIuLi91dGlsL2lzSW50ZXJvcE9ic2VydmFibGVcIik7XG52YXIgaXNQcm9taXNlXzEgPSByZXF1aXJlKFwiLi4vdXRpbC9pc1Byb21pc2VcIik7XG52YXIgaXNBcnJheUxpa2VfMSA9IHJlcXVpcmUoXCIuLi91dGlsL2lzQXJyYXlMaWtlXCIpO1xudmFyIGlzSXRlcmFibGVfMSA9IHJlcXVpcmUoXCIuLi91dGlsL2lzSXRlcmFibGVcIik7XG52YXIgaXNBc3luY0l0ZXJhYmxlXzEgPSByZXF1aXJlKFwiLi4vdXRpbC9pc0FzeW5jSXRlcmFibGVcIik7XG52YXIgdGhyb3dVbm9ic2VydmFibGVFcnJvcl8xID0gcmVxdWlyZShcIi4uL3V0aWwvdGhyb3dVbm9ic2VydmFibGVFcnJvclwiKTtcbnZhciBpc1JlYWRhYmxlU3RyZWFtTGlrZV8xID0gcmVxdWlyZShcIi4uL3V0aWwvaXNSZWFkYWJsZVN0cmVhbUxpa2VcIik7XG52YXIgc2NoZWR1bGVSZWFkYWJsZVN0cmVhbUxpa2VfMSA9IHJlcXVpcmUoXCIuL3NjaGVkdWxlUmVhZGFibGVTdHJlYW1MaWtlXCIpO1xuZnVuY3Rpb24gc2NoZWR1bGVkKGlucHV0LCBzY2hlZHVsZXIpIHtcbiAgICBpZiAoaW5wdXQgIT0gbnVsbCkge1xuICAgICAgICBpZiAoaXNJbnRlcm9wT2JzZXJ2YWJsZV8xLmlzSW50ZXJvcE9ic2VydmFibGUoaW5wdXQpKSB7XG4gICAgICAgICAgICByZXR1cm4gc2NoZWR1bGVPYnNlcnZhYmxlXzEuc2NoZWR1bGVPYnNlcnZhYmxlKGlucHV0LCBzY2hlZHVsZXIpO1xuICAgICAgICB9XG4gICAgICAgIGlmIChpc0FycmF5TGlrZV8xLmlzQXJyYXlMaWtlKGlucHV0KSkge1xuICAgICAgICAgICAgcmV0dXJuIHNjaGVkdWxlQXJyYXlfMS5zY2hlZHVsZUFycmF5KGlucHV0LCBzY2hlZHVsZXIpO1xuICAgICAgICB9XG4gICAgICAgIGlmIChpc1Byb21pc2VfMS5pc1Byb21pc2UoaW5wdXQpKSB7XG4gICAgICAgICAgICByZXR1cm4gc2NoZWR1bGVQcm9taXNlXzEuc2NoZWR1bGVQcm9taXNlKGlucHV0LCBzY2hlZHVsZXIpO1xuICAgICAgICB9XG4gICAgICAgIGlmIChpc0FzeW5jSXRlcmFibGVfMS5pc0FzeW5jSXRlcmFibGUoaW5wdXQpKSB7XG4gICAgICAgICAgICByZXR1cm4gc2NoZWR1bGVBc3luY0l0ZXJhYmxlXzEuc2NoZWR1bGVBc3luY0l0ZXJhYmxlKGlucHV0LCBzY2hlZHVsZXIpO1xuICAgICAgICB9XG4gICAgICAgIGlmIChpc0l0ZXJhYmxlXzEuaXNJdGVyYWJsZShpbnB1dCkpIHtcbiAgICAgICAgICAgIHJldHVybiBzY2hlZHVsZUl0ZXJhYmxlXzEuc2NoZWR1bGVJdGVyYWJsZShpbnB1dCwgc2NoZWR1bGVyKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoaXNSZWFkYWJsZVN0cmVhbUxpa2VfMS5pc1JlYWRhYmxlU3RyZWFtTGlrZShpbnB1dCkpIHtcbiAgICAgICAgICAgIHJldHVybiBzY2hlZHVsZVJlYWRhYmxlU3RyZWFtTGlrZV8xLnNjaGVkdWxlUmVhZGFibGVTdHJlYW1MaWtlKGlucHV0LCBzY2hlZHVsZXIpO1xuICAgICAgICB9XG4gICAgfVxuICAgIHRocm93IHRocm93VW5vYnNlcnZhYmxlRXJyb3JfMS5jcmVhdGVJbnZhbGlkT2JzZXJ2YWJsZVR5cGVFcnJvcihpbnB1dCk7XG59XG5leHBvcnRzLnNjaGVkdWxlZCA9IHNjaGVkdWxlZDtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPXNjaGVkdWxlZC5qcy5tYXAiLCJcInVzZSBzdHJpY3RcIjtcbnZhciBfX2V4dGVuZHMgPSAodGhpcyAmJiB0aGlzLl9fZXh0ZW5kcykgfHwgKGZ1bmN0aW9uICgpIHtcbiAgICB2YXIgZXh0ZW5kU3RhdGljcyA9IGZ1bmN0aW9uIChkLCBiKSB7XG4gICAgICAgIGV4dGVuZFN0YXRpY3MgPSBPYmplY3Quc2V0UHJvdG90eXBlT2YgfHxcbiAgICAgICAgICAgICh7IF9fcHJvdG9fXzogW10gfSBpbnN0YW5jZW9mIEFycmF5ICYmIGZ1bmN0aW9uIChkLCBiKSB7IGQuX19wcm90b19fID0gYjsgfSkgfHxcbiAgICAgICAgICAgIGZ1bmN0aW9uIChkLCBiKSB7IGZvciAodmFyIHAgaW4gYikgaWYgKE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChiLCBwKSkgZFtwXSA9IGJbcF07IH07XG4gICAgICAgIHJldHVybiBleHRlbmRTdGF0aWNzKGQsIGIpO1xuICAgIH07XG4gICAgcmV0dXJuIGZ1bmN0aW9uIChkLCBiKSB7XG4gICAgICAgIGlmICh0eXBlb2YgYiAhPT0gXCJmdW5jdGlvblwiICYmIGIgIT09IG51bGwpXG4gICAgICAgICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKFwiQ2xhc3MgZXh0ZW5kcyB2YWx1ZSBcIiArIFN0cmluZyhiKSArIFwiIGlzIG5vdCBhIGNvbnN0cnVjdG9yIG9yIG51bGxcIik7XG4gICAgICAgIGV4dGVuZFN0YXRpY3MoZCwgYik7XG4gICAgICAgIGZ1bmN0aW9uIF9fKCkgeyB0aGlzLmNvbnN0cnVjdG9yID0gZDsgfVxuICAgICAgICBkLnByb3RvdHlwZSA9IGIgPT09IG51bGwgPyBPYmplY3QuY3JlYXRlKGIpIDogKF9fLnByb3RvdHlwZSA9IGIucHJvdG90eXBlLCBuZXcgX18oKSk7XG4gICAgfTtcbn0pKCk7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5leHBvcnRzLkFjdGlvbiA9IHZvaWQgMDtcbnZhciBTdWJzY3JpcHRpb25fMSA9IHJlcXVpcmUoXCIuLi9TdWJzY3JpcHRpb25cIik7XG52YXIgQWN0aW9uID0gKGZ1bmN0aW9uIChfc3VwZXIpIHtcbiAgICBfX2V4dGVuZHMoQWN0aW9uLCBfc3VwZXIpO1xuICAgIGZ1bmN0aW9uIEFjdGlvbihzY2hlZHVsZXIsIHdvcmspIHtcbiAgICAgICAgcmV0dXJuIF9zdXBlci5jYWxsKHRoaXMpIHx8IHRoaXM7XG4gICAgfVxuICAgIEFjdGlvbi5wcm90b3R5cGUuc2NoZWR1bGUgPSBmdW5jdGlvbiAoc3RhdGUsIGRlbGF5KSB7XG4gICAgICAgIGlmIChkZWxheSA9PT0gdm9pZCAwKSB7IGRlbGF5ID0gMDsgfVxuICAgICAgICByZXR1cm4gdGhpcztcbiAgICB9O1xuICAgIHJldHVybiBBY3Rpb247XG59KFN1YnNjcmlwdGlvbl8xLlN1YnNjcmlwdGlvbikpO1xuZXhwb3J0cy5BY3Rpb24gPSBBY3Rpb247XG4vLyMgc291cmNlTWFwcGluZ1VSTD1BY3Rpb24uanMubWFwIiwiXCJ1c2Ugc3RyaWN0XCI7XG52YXIgX19leHRlbmRzID0gKHRoaXMgJiYgdGhpcy5fX2V4dGVuZHMpIHx8IChmdW5jdGlvbiAoKSB7XG4gICAgdmFyIGV4dGVuZFN0YXRpY3MgPSBmdW5jdGlvbiAoZCwgYikge1xuICAgICAgICBleHRlbmRTdGF0aWNzID0gT2JqZWN0LnNldFByb3RvdHlwZU9mIHx8XG4gICAgICAgICAgICAoeyBfX3Byb3RvX186IFtdIH0gaW5zdGFuY2VvZiBBcnJheSAmJiBmdW5jdGlvbiAoZCwgYikgeyBkLl9fcHJvdG9fXyA9IGI7IH0pIHx8XG4gICAgICAgICAgICBmdW5jdGlvbiAoZCwgYikgeyBmb3IgKHZhciBwIGluIGIpIGlmIChPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwoYiwgcCkpIGRbcF0gPSBiW3BdOyB9O1xuICAgICAgICByZXR1cm4gZXh0ZW5kU3RhdGljcyhkLCBiKTtcbiAgICB9O1xuICAgIHJldHVybiBmdW5jdGlvbiAoZCwgYikge1xuICAgICAgICBpZiAodHlwZW9mIGIgIT09IFwiZnVuY3Rpb25cIiAmJiBiICE9PSBudWxsKVxuICAgICAgICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcihcIkNsYXNzIGV4dGVuZHMgdmFsdWUgXCIgKyBTdHJpbmcoYikgKyBcIiBpcyBub3QgYSBjb25zdHJ1Y3RvciBvciBudWxsXCIpO1xuICAgICAgICBleHRlbmRTdGF0aWNzKGQsIGIpO1xuICAgICAgICBmdW5jdGlvbiBfXygpIHsgdGhpcy5jb25zdHJ1Y3RvciA9IGQ7IH1cbiAgICAgICAgZC5wcm90b3R5cGUgPSBiID09PSBudWxsID8gT2JqZWN0LmNyZWF0ZShiKSA6IChfXy5wcm90b3R5cGUgPSBiLnByb3RvdHlwZSwgbmV3IF9fKCkpO1xuICAgIH07XG59KSgpO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuZXhwb3J0cy5BbmltYXRpb25GcmFtZUFjdGlvbiA9IHZvaWQgMDtcbnZhciBBc3luY0FjdGlvbl8xID0gcmVxdWlyZShcIi4vQXN5bmNBY3Rpb25cIik7XG52YXIgYW5pbWF0aW9uRnJhbWVQcm92aWRlcl8xID0gcmVxdWlyZShcIi4vYW5pbWF0aW9uRnJhbWVQcm92aWRlclwiKTtcbnZhciBBbmltYXRpb25GcmFtZUFjdGlvbiA9IChmdW5jdGlvbiAoX3N1cGVyKSB7XG4gICAgX19leHRlbmRzKEFuaW1hdGlvbkZyYW1lQWN0aW9uLCBfc3VwZXIpO1xuICAgIGZ1bmN0aW9uIEFuaW1hdGlvbkZyYW1lQWN0aW9uKHNjaGVkdWxlciwgd29yaykge1xuICAgICAgICB2YXIgX3RoaXMgPSBfc3VwZXIuY2FsbCh0aGlzLCBzY2hlZHVsZXIsIHdvcmspIHx8IHRoaXM7XG4gICAgICAgIF90aGlzLnNjaGVkdWxlciA9IHNjaGVkdWxlcjtcbiAgICAgICAgX3RoaXMud29yayA9IHdvcms7XG4gICAgICAgIHJldHVybiBfdGhpcztcbiAgICB9XG4gICAgQW5pbWF0aW9uRnJhbWVBY3Rpb24ucHJvdG90eXBlLnJlcXVlc3RBc3luY0lkID0gZnVuY3Rpb24gKHNjaGVkdWxlciwgaWQsIGRlbGF5KSB7XG4gICAgICAgIGlmIChkZWxheSA9PT0gdm9pZCAwKSB7IGRlbGF5ID0gMDsgfVxuICAgICAgICBpZiAoZGVsYXkgIT09IG51bGwgJiYgZGVsYXkgPiAwKSB7XG4gICAgICAgICAgICByZXR1cm4gX3N1cGVyLnByb3RvdHlwZS5yZXF1ZXN0QXN5bmNJZC5jYWxsKHRoaXMsIHNjaGVkdWxlciwgaWQsIGRlbGF5KTtcbiAgICAgICAgfVxuICAgICAgICBzY2hlZHVsZXIuYWN0aW9ucy5wdXNoKHRoaXMpO1xuICAgICAgICByZXR1cm4gc2NoZWR1bGVyLl9zY2hlZHVsZWQgfHwgKHNjaGVkdWxlci5fc2NoZWR1bGVkID0gYW5pbWF0aW9uRnJhbWVQcm92aWRlcl8xLmFuaW1hdGlvbkZyYW1lUHJvdmlkZXIucmVxdWVzdEFuaW1hdGlvbkZyYW1lKGZ1bmN0aW9uICgpIHsgcmV0dXJuIHNjaGVkdWxlci5mbHVzaCh1bmRlZmluZWQpOyB9KSk7XG4gICAgfTtcbiAgICBBbmltYXRpb25GcmFtZUFjdGlvbi5wcm90b3R5cGUucmVjeWNsZUFzeW5jSWQgPSBmdW5jdGlvbiAoc2NoZWR1bGVyLCBpZCwgZGVsYXkpIHtcbiAgICAgICAgdmFyIF9hO1xuICAgICAgICBpZiAoZGVsYXkgPT09IHZvaWQgMCkgeyBkZWxheSA9IDA7IH1cbiAgICAgICAgaWYgKGRlbGF5ICE9IG51bGwgPyBkZWxheSA+IDAgOiB0aGlzLmRlbGF5ID4gMCkge1xuICAgICAgICAgICAgcmV0dXJuIF9zdXBlci5wcm90b3R5cGUucmVjeWNsZUFzeW5jSWQuY2FsbCh0aGlzLCBzY2hlZHVsZXIsIGlkLCBkZWxheSk7XG4gICAgICAgIH1cbiAgICAgICAgdmFyIGFjdGlvbnMgPSBzY2hlZHVsZXIuYWN0aW9ucztcbiAgICAgICAgaWYgKGlkICE9IG51bGwgJiYgKChfYSA9IGFjdGlvbnNbYWN0aW9ucy5sZW5ndGggLSAxXSkgPT09IG51bGwgfHwgX2EgPT09IHZvaWQgMCA/IHZvaWQgMCA6IF9hLmlkKSAhPT0gaWQpIHtcbiAgICAgICAgICAgIGFuaW1hdGlvbkZyYW1lUHJvdmlkZXJfMS5hbmltYXRpb25GcmFtZVByb3ZpZGVyLmNhbmNlbEFuaW1hdGlvbkZyYW1lKGlkKTtcbiAgICAgICAgICAgIHNjaGVkdWxlci5fc2NoZWR1bGVkID0gdW5kZWZpbmVkO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiB1bmRlZmluZWQ7XG4gICAgfTtcbiAgICByZXR1cm4gQW5pbWF0aW9uRnJhbWVBY3Rpb247XG59KEFzeW5jQWN0aW9uXzEuQXN5bmNBY3Rpb24pKTtcbmV4cG9ydHMuQW5pbWF0aW9uRnJhbWVBY3Rpb24gPSBBbmltYXRpb25GcmFtZUFjdGlvbjtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPUFuaW1hdGlvbkZyYW1lQWN0aW9uLmpzLm1hcCIsIlwidXNlIHN0cmljdFwiO1xudmFyIF9fZXh0ZW5kcyA9ICh0aGlzICYmIHRoaXMuX19leHRlbmRzKSB8fCAoZnVuY3Rpb24gKCkge1xuICAgIHZhciBleHRlbmRTdGF0aWNzID0gZnVuY3Rpb24gKGQsIGIpIHtcbiAgICAgICAgZXh0ZW5kU3RhdGljcyA9IE9iamVjdC5zZXRQcm90b3R5cGVPZiB8fFxuICAgICAgICAgICAgKHsgX19wcm90b19fOiBbXSB9IGluc3RhbmNlb2YgQXJyYXkgJiYgZnVuY3Rpb24gKGQsIGIpIHsgZC5fX3Byb3RvX18gPSBiOyB9KSB8fFxuICAgICAgICAgICAgZnVuY3Rpb24gKGQsIGIpIHsgZm9yICh2YXIgcCBpbiBiKSBpZiAoT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKGIsIHApKSBkW3BdID0gYltwXTsgfTtcbiAgICAgICAgcmV0dXJuIGV4dGVuZFN0YXRpY3MoZCwgYik7XG4gICAgfTtcbiAgICByZXR1cm4gZnVuY3Rpb24gKGQsIGIpIHtcbiAgICAgICAgaWYgKHR5cGVvZiBiICE9PSBcImZ1bmN0aW9uXCIgJiYgYiAhPT0gbnVsbClcbiAgICAgICAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoXCJDbGFzcyBleHRlbmRzIHZhbHVlIFwiICsgU3RyaW5nKGIpICsgXCIgaXMgbm90IGEgY29uc3RydWN0b3Igb3IgbnVsbFwiKTtcbiAgICAgICAgZXh0ZW5kU3RhdGljcyhkLCBiKTtcbiAgICAgICAgZnVuY3Rpb24gX18oKSB7IHRoaXMuY29uc3RydWN0b3IgPSBkOyB9XG4gICAgICAgIGQucHJvdG90eXBlID0gYiA9PT0gbnVsbCA/IE9iamVjdC5jcmVhdGUoYikgOiAoX18ucHJvdG90eXBlID0gYi5wcm90b3R5cGUsIG5ldyBfXygpKTtcbiAgICB9O1xufSkoKTtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmV4cG9ydHMuQW5pbWF0aW9uRnJhbWVTY2hlZHVsZXIgPSB2b2lkIDA7XG52YXIgQXN5bmNTY2hlZHVsZXJfMSA9IHJlcXVpcmUoXCIuL0FzeW5jU2NoZWR1bGVyXCIpO1xudmFyIEFuaW1hdGlvbkZyYW1lU2NoZWR1bGVyID0gKGZ1bmN0aW9uIChfc3VwZXIpIHtcbiAgICBfX2V4dGVuZHMoQW5pbWF0aW9uRnJhbWVTY2hlZHVsZXIsIF9zdXBlcik7XG4gICAgZnVuY3Rpb24gQW5pbWF0aW9uRnJhbWVTY2hlZHVsZXIoKSB7XG4gICAgICAgIHJldHVybiBfc3VwZXIgIT09IG51bGwgJiYgX3N1cGVyLmFwcGx5KHRoaXMsIGFyZ3VtZW50cykgfHwgdGhpcztcbiAgICB9XG4gICAgQW5pbWF0aW9uRnJhbWVTY2hlZHVsZXIucHJvdG90eXBlLmZsdXNoID0gZnVuY3Rpb24gKGFjdGlvbikge1xuICAgICAgICB0aGlzLl9hY3RpdmUgPSB0cnVlO1xuICAgICAgICB2YXIgZmx1c2hJZCA9IHRoaXMuX3NjaGVkdWxlZDtcbiAgICAgICAgdGhpcy5fc2NoZWR1bGVkID0gdW5kZWZpbmVkO1xuICAgICAgICB2YXIgYWN0aW9ucyA9IHRoaXMuYWN0aW9ucztcbiAgICAgICAgdmFyIGVycm9yO1xuICAgICAgICBhY3Rpb24gPSBhY3Rpb24gfHwgYWN0aW9ucy5zaGlmdCgpO1xuICAgICAgICBkbyB7XG4gICAgICAgICAgICBpZiAoKGVycm9yID0gYWN0aW9uLmV4ZWN1dGUoYWN0aW9uLnN0YXRlLCBhY3Rpb24uZGVsYXkpKSkge1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgfVxuICAgICAgICB9IHdoaWxlICgoYWN0aW9uID0gYWN0aW9uc1swXSkgJiYgYWN0aW9uLmlkID09PSBmbHVzaElkICYmIGFjdGlvbnMuc2hpZnQoKSk7XG4gICAgICAgIHRoaXMuX2FjdGl2ZSA9IGZhbHNlO1xuICAgICAgICBpZiAoZXJyb3IpIHtcbiAgICAgICAgICAgIHdoaWxlICgoYWN0aW9uID0gYWN0aW9uc1swXSkgJiYgYWN0aW9uLmlkID09PSBmbHVzaElkICYmIGFjdGlvbnMuc2hpZnQoKSkge1xuICAgICAgICAgICAgICAgIGFjdGlvbi51bnN1YnNjcmliZSgpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgdGhyb3cgZXJyb3I7XG4gICAgICAgIH1cbiAgICB9O1xuICAgIHJldHVybiBBbmltYXRpb25GcmFtZVNjaGVkdWxlcjtcbn0oQXN5bmNTY2hlZHVsZXJfMS5Bc3luY1NjaGVkdWxlcikpO1xuZXhwb3J0cy5BbmltYXRpb25GcmFtZVNjaGVkdWxlciA9IEFuaW1hdGlvbkZyYW1lU2NoZWR1bGVyO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9QW5pbWF0aW9uRnJhbWVTY2hlZHVsZXIuanMubWFwIiwiXCJ1c2Ugc3RyaWN0XCI7XG52YXIgX19leHRlbmRzID0gKHRoaXMgJiYgdGhpcy5fX2V4dGVuZHMpIHx8IChmdW5jdGlvbiAoKSB7XG4gICAgdmFyIGV4dGVuZFN0YXRpY3MgPSBmdW5jdGlvbiAoZCwgYikge1xuICAgICAgICBleHRlbmRTdGF0aWNzID0gT2JqZWN0LnNldFByb3RvdHlwZU9mIHx8XG4gICAgICAgICAgICAoeyBfX3Byb3RvX186IFtdIH0gaW5zdGFuY2VvZiBBcnJheSAmJiBmdW5jdGlvbiAoZCwgYikgeyBkLl9fcHJvdG9fXyA9IGI7IH0pIHx8XG4gICAgICAgICAgICBmdW5jdGlvbiAoZCwgYikgeyBmb3IgKHZhciBwIGluIGIpIGlmIChPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwoYiwgcCkpIGRbcF0gPSBiW3BdOyB9O1xuICAgICAgICByZXR1cm4gZXh0ZW5kU3RhdGljcyhkLCBiKTtcbiAgICB9O1xuICAgIHJldHVybiBmdW5jdGlvbiAoZCwgYikge1xuICAgICAgICBpZiAodHlwZW9mIGIgIT09IFwiZnVuY3Rpb25cIiAmJiBiICE9PSBudWxsKVxuICAgICAgICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcihcIkNsYXNzIGV4dGVuZHMgdmFsdWUgXCIgKyBTdHJpbmcoYikgKyBcIiBpcyBub3QgYSBjb25zdHJ1Y3RvciBvciBudWxsXCIpO1xuICAgICAgICBleHRlbmRTdGF0aWNzKGQsIGIpO1xuICAgICAgICBmdW5jdGlvbiBfXygpIHsgdGhpcy5jb25zdHJ1Y3RvciA9IGQ7IH1cbiAgICAgICAgZC5wcm90b3R5cGUgPSBiID09PSBudWxsID8gT2JqZWN0LmNyZWF0ZShiKSA6IChfXy5wcm90b3R5cGUgPSBiLnByb3RvdHlwZSwgbmV3IF9fKCkpO1xuICAgIH07XG59KSgpO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuZXhwb3J0cy5Bc2FwQWN0aW9uID0gdm9pZCAwO1xudmFyIEFzeW5jQWN0aW9uXzEgPSByZXF1aXJlKFwiLi9Bc3luY0FjdGlvblwiKTtcbnZhciBpbW1lZGlhdGVQcm92aWRlcl8xID0gcmVxdWlyZShcIi4vaW1tZWRpYXRlUHJvdmlkZXJcIik7XG52YXIgQXNhcEFjdGlvbiA9IChmdW5jdGlvbiAoX3N1cGVyKSB7XG4gICAgX19leHRlbmRzKEFzYXBBY3Rpb24sIF9zdXBlcik7XG4gICAgZnVuY3Rpb24gQXNhcEFjdGlvbihzY2hlZHVsZXIsIHdvcmspIHtcbiAgICAgICAgdmFyIF90aGlzID0gX3N1cGVyLmNhbGwodGhpcywgc2NoZWR1bGVyLCB3b3JrKSB8fCB0aGlzO1xuICAgICAgICBfdGhpcy5zY2hlZHVsZXIgPSBzY2hlZHVsZXI7XG4gICAgICAgIF90aGlzLndvcmsgPSB3b3JrO1xuICAgICAgICByZXR1cm4gX3RoaXM7XG4gICAgfVxuICAgIEFzYXBBY3Rpb24ucHJvdG90eXBlLnJlcXVlc3RBc3luY0lkID0gZnVuY3Rpb24gKHNjaGVkdWxlciwgaWQsIGRlbGF5KSB7XG4gICAgICAgIGlmIChkZWxheSA9PT0gdm9pZCAwKSB7IGRlbGF5ID0gMDsgfVxuICAgICAgICBpZiAoZGVsYXkgIT09IG51bGwgJiYgZGVsYXkgPiAwKSB7XG4gICAgICAgICAgICByZXR1cm4gX3N1cGVyLnByb3RvdHlwZS5yZXF1ZXN0QXN5bmNJZC5jYWxsKHRoaXMsIHNjaGVkdWxlciwgaWQsIGRlbGF5KTtcbiAgICAgICAgfVxuICAgICAgICBzY2hlZHVsZXIuYWN0aW9ucy5wdXNoKHRoaXMpO1xuICAgICAgICByZXR1cm4gc2NoZWR1bGVyLl9zY2hlZHVsZWQgfHwgKHNjaGVkdWxlci5fc2NoZWR1bGVkID0gaW1tZWRpYXRlUHJvdmlkZXJfMS5pbW1lZGlhdGVQcm92aWRlci5zZXRJbW1lZGlhdGUoc2NoZWR1bGVyLmZsdXNoLmJpbmQoc2NoZWR1bGVyLCB1bmRlZmluZWQpKSk7XG4gICAgfTtcbiAgICBBc2FwQWN0aW9uLnByb3RvdHlwZS5yZWN5Y2xlQXN5bmNJZCA9IGZ1bmN0aW9uIChzY2hlZHVsZXIsIGlkLCBkZWxheSkge1xuICAgICAgICB2YXIgX2E7XG4gICAgICAgIGlmIChkZWxheSA9PT0gdm9pZCAwKSB7IGRlbGF5ID0gMDsgfVxuICAgICAgICBpZiAoZGVsYXkgIT0gbnVsbCA/IGRlbGF5ID4gMCA6IHRoaXMuZGVsYXkgPiAwKSB7XG4gICAgICAgICAgICByZXR1cm4gX3N1cGVyLnByb3RvdHlwZS5yZWN5Y2xlQXN5bmNJZC5jYWxsKHRoaXMsIHNjaGVkdWxlciwgaWQsIGRlbGF5KTtcbiAgICAgICAgfVxuICAgICAgICB2YXIgYWN0aW9ucyA9IHNjaGVkdWxlci5hY3Rpb25zO1xuICAgICAgICBpZiAoaWQgIT0gbnVsbCAmJiAoKF9hID0gYWN0aW9uc1thY3Rpb25zLmxlbmd0aCAtIDFdKSA9PT0gbnVsbCB8fCBfYSA9PT0gdm9pZCAwID8gdm9pZCAwIDogX2EuaWQpICE9PSBpZCkge1xuICAgICAgICAgICAgaW1tZWRpYXRlUHJvdmlkZXJfMS5pbW1lZGlhdGVQcm92aWRlci5jbGVhckltbWVkaWF0ZShpZCk7XG4gICAgICAgICAgICBpZiAoc2NoZWR1bGVyLl9zY2hlZHVsZWQgPT09IGlkKSB7XG4gICAgICAgICAgICAgICAgc2NoZWR1bGVyLl9zY2hlZHVsZWQgPSB1bmRlZmluZWQ7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHVuZGVmaW5lZDtcbiAgICB9O1xuICAgIHJldHVybiBBc2FwQWN0aW9uO1xufShBc3luY0FjdGlvbl8xLkFzeW5jQWN0aW9uKSk7XG5leHBvcnRzLkFzYXBBY3Rpb24gPSBBc2FwQWN0aW9uO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9QXNhcEFjdGlvbi5qcy5tYXAiLCJcInVzZSBzdHJpY3RcIjtcbnZhciBfX2V4dGVuZHMgPSAodGhpcyAmJiB0aGlzLl9fZXh0ZW5kcykgfHwgKGZ1bmN0aW9uICgpIHtcbiAgICB2YXIgZXh0ZW5kU3RhdGljcyA9IGZ1bmN0aW9uIChkLCBiKSB7XG4gICAgICAgIGV4dGVuZFN0YXRpY3MgPSBPYmplY3Quc2V0UHJvdG90eXBlT2YgfHxcbiAgICAgICAgICAgICh7IF9fcHJvdG9fXzogW10gfSBpbnN0YW5jZW9mIEFycmF5ICYmIGZ1bmN0aW9uIChkLCBiKSB7IGQuX19wcm90b19fID0gYjsgfSkgfHxcbiAgICAgICAgICAgIGZ1bmN0aW9uIChkLCBiKSB7IGZvciAodmFyIHAgaW4gYikgaWYgKE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChiLCBwKSkgZFtwXSA9IGJbcF07IH07XG4gICAgICAgIHJldHVybiBleHRlbmRTdGF0aWNzKGQsIGIpO1xuICAgIH07XG4gICAgcmV0dXJuIGZ1bmN0aW9uIChkLCBiKSB7XG4gICAgICAgIGlmICh0eXBlb2YgYiAhPT0gXCJmdW5jdGlvblwiICYmIGIgIT09IG51bGwpXG4gICAgICAgICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKFwiQ2xhc3MgZXh0ZW5kcyB2YWx1ZSBcIiArIFN0cmluZyhiKSArIFwiIGlzIG5vdCBhIGNvbnN0cnVjdG9yIG9yIG51bGxcIik7XG4gICAgICAgIGV4dGVuZFN0YXRpY3MoZCwgYik7XG4gICAgICAgIGZ1bmN0aW9uIF9fKCkgeyB0aGlzLmNvbnN0cnVjdG9yID0gZDsgfVxuICAgICAgICBkLnByb3RvdHlwZSA9IGIgPT09IG51bGwgPyBPYmplY3QuY3JlYXRlKGIpIDogKF9fLnByb3RvdHlwZSA9IGIucHJvdG90eXBlLCBuZXcgX18oKSk7XG4gICAgfTtcbn0pKCk7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5leHBvcnRzLkFzYXBTY2hlZHVsZXIgPSB2b2lkIDA7XG52YXIgQXN5bmNTY2hlZHVsZXJfMSA9IHJlcXVpcmUoXCIuL0FzeW5jU2NoZWR1bGVyXCIpO1xudmFyIEFzYXBTY2hlZHVsZXIgPSAoZnVuY3Rpb24gKF9zdXBlcikge1xuICAgIF9fZXh0ZW5kcyhBc2FwU2NoZWR1bGVyLCBfc3VwZXIpO1xuICAgIGZ1bmN0aW9uIEFzYXBTY2hlZHVsZXIoKSB7XG4gICAgICAgIHJldHVybiBfc3VwZXIgIT09IG51bGwgJiYgX3N1cGVyLmFwcGx5KHRoaXMsIGFyZ3VtZW50cykgfHwgdGhpcztcbiAgICB9XG4gICAgQXNhcFNjaGVkdWxlci5wcm90b3R5cGUuZmx1c2ggPSBmdW5jdGlvbiAoYWN0aW9uKSB7XG4gICAgICAgIHRoaXMuX2FjdGl2ZSA9IHRydWU7XG4gICAgICAgIHZhciBmbHVzaElkID0gdGhpcy5fc2NoZWR1bGVkO1xuICAgICAgICB0aGlzLl9zY2hlZHVsZWQgPSB1bmRlZmluZWQ7XG4gICAgICAgIHZhciBhY3Rpb25zID0gdGhpcy5hY3Rpb25zO1xuICAgICAgICB2YXIgZXJyb3I7XG4gICAgICAgIGFjdGlvbiA9IGFjdGlvbiB8fCBhY3Rpb25zLnNoaWZ0KCk7XG4gICAgICAgIGRvIHtcbiAgICAgICAgICAgIGlmICgoZXJyb3IgPSBhY3Rpb24uZXhlY3V0ZShhY3Rpb24uc3RhdGUsIGFjdGlvbi5kZWxheSkpKSB7XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0gd2hpbGUgKChhY3Rpb24gPSBhY3Rpb25zWzBdKSAmJiBhY3Rpb24uaWQgPT09IGZsdXNoSWQgJiYgYWN0aW9ucy5zaGlmdCgpKTtcbiAgICAgICAgdGhpcy5fYWN0aXZlID0gZmFsc2U7XG4gICAgICAgIGlmIChlcnJvcikge1xuICAgICAgICAgICAgd2hpbGUgKChhY3Rpb24gPSBhY3Rpb25zWzBdKSAmJiBhY3Rpb24uaWQgPT09IGZsdXNoSWQgJiYgYWN0aW9ucy5zaGlmdCgpKSB7XG4gICAgICAgICAgICAgICAgYWN0aW9uLnVuc3Vic2NyaWJlKCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICB0aHJvdyBlcnJvcjtcbiAgICAgICAgfVxuICAgIH07XG4gICAgcmV0dXJuIEFzYXBTY2hlZHVsZXI7XG59KEFzeW5jU2NoZWR1bGVyXzEuQXN5bmNTY2hlZHVsZXIpKTtcbmV4cG9ydHMuQXNhcFNjaGVkdWxlciA9IEFzYXBTY2hlZHVsZXI7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1Bc2FwU2NoZWR1bGVyLmpzLm1hcCIsIlwidXNlIHN0cmljdFwiO1xudmFyIF9fZXh0ZW5kcyA9ICh0aGlzICYmIHRoaXMuX19leHRlbmRzKSB8fCAoZnVuY3Rpb24gKCkge1xuICAgIHZhciBleHRlbmRTdGF0aWNzID0gZnVuY3Rpb24gKGQsIGIpIHtcbiAgICAgICAgZXh0ZW5kU3RhdGljcyA9IE9iamVjdC5zZXRQcm90b3R5cGVPZiB8fFxuICAgICAgICAgICAgKHsgX19wcm90b19fOiBbXSB9IGluc3RhbmNlb2YgQXJyYXkgJiYgZnVuY3Rpb24gKGQsIGIpIHsgZC5fX3Byb3RvX18gPSBiOyB9KSB8fFxuICAgICAgICAgICAgZnVuY3Rpb24gKGQsIGIpIHsgZm9yICh2YXIgcCBpbiBiKSBpZiAoT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKGIsIHApKSBkW3BdID0gYltwXTsgfTtcbiAgICAgICAgcmV0dXJuIGV4dGVuZFN0YXRpY3MoZCwgYik7XG4gICAgfTtcbiAgICByZXR1cm4gZnVuY3Rpb24gKGQsIGIpIHtcbiAgICAgICAgaWYgKHR5cGVvZiBiICE9PSBcImZ1bmN0aW9uXCIgJiYgYiAhPT0gbnVsbClcbiAgICAgICAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoXCJDbGFzcyBleHRlbmRzIHZhbHVlIFwiICsgU3RyaW5nKGIpICsgXCIgaXMgbm90IGEgY29uc3RydWN0b3Igb3IgbnVsbFwiKTtcbiAgICAgICAgZXh0ZW5kU3RhdGljcyhkLCBiKTtcbiAgICAgICAgZnVuY3Rpb24gX18oKSB7IHRoaXMuY29uc3RydWN0b3IgPSBkOyB9XG4gICAgICAgIGQucHJvdG90eXBlID0gYiA9PT0gbnVsbCA/IE9iamVjdC5jcmVhdGUoYikgOiAoX18ucHJvdG90eXBlID0gYi5wcm90b3R5cGUsIG5ldyBfXygpKTtcbiAgICB9O1xufSkoKTtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmV4cG9ydHMuQXN5bmNBY3Rpb24gPSB2b2lkIDA7XG52YXIgQWN0aW9uXzEgPSByZXF1aXJlKFwiLi9BY3Rpb25cIik7XG52YXIgaW50ZXJ2YWxQcm92aWRlcl8xID0gcmVxdWlyZShcIi4vaW50ZXJ2YWxQcm92aWRlclwiKTtcbnZhciBhcnJSZW1vdmVfMSA9IHJlcXVpcmUoXCIuLi91dGlsL2FyclJlbW92ZVwiKTtcbnZhciBBc3luY0FjdGlvbiA9IChmdW5jdGlvbiAoX3N1cGVyKSB7XG4gICAgX19leHRlbmRzKEFzeW5jQWN0aW9uLCBfc3VwZXIpO1xuICAgIGZ1bmN0aW9uIEFzeW5jQWN0aW9uKHNjaGVkdWxlciwgd29yaykge1xuICAgICAgICB2YXIgX3RoaXMgPSBfc3VwZXIuY2FsbCh0aGlzLCBzY2hlZHVsZXIsIHdvcmspIHx8IHRoaXM7XG4gICAgICAgIF90aGlzLnNjaGVkdWxlciA9IHNjaGVkdWxlcjtcbiAgICAgICAgX3RoaXMud29yayA9IHdvcms7XG4gICAgICAgIF90aGlzLnBlbmRpbmcgPSBmYWxzZTtcbiAgICAgICAgcmV0dXJuIF90aGlzO1xuICAgIH1cbiAgICBBc3luY0FjdGlvbi5wcm90b3R5cGUuc2NoZWR1bGUgPSBmdW5jdGlvbiAoc3RhdGUsIGRlbGF5KSB7XG4gICAgICAgIHZhciBfYTtcbiAgICAgICAgaWYgKGRlbGF5ID09PSB2b2lkIDApIHsgZGVsYXkgPSAwOyB9XG4gICAgICAgIGlmICh0aGlzLmNsb3NlZCkge1xuICAgICAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5zdGF0ZSA9IHN0YXRlO1xuICAgICAgICB2YXIgaWQgPSB0aGlzLmlkO1xuICAgICAgICB2YXIgc2NoZWR1bGVyID0gdGhpcy5zY2hlZHVsZXI7XG4gICAgICAgIGlmIChpZCAhPSBudWxsKSB7XG4gICAgICAgICAgICB0aGlzLmlkID0gdGhpcy5yZWN5Y2xlQXN5bmNJZChzY2hlZHVsZXIsIGlkLCBkZWxheSk7XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5wZW5kaW5nID0gdHJ1ZTtcbiAgICAgICAgdGhpcy5kZWxheSA9IGRlbGF5O1xuICAgICAgICB0aGlzLmlkID0gKF9hID0gdGhpcy5pZCkgIT09IG51bGwgJiYgX2EgIT09IHZvaWQgMCA/IF9hIDogdGhpcy5yZXF1ZXN0QXN5bmNJZChzY2hlZHVsZXIsIHRoaXMuaWQsIGRlbGF5KTtcbiAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfTtcbiAgICBBc3luY0FjdGlvbi5wcm90b3R5cGUucmVxdWVzdEFzeW5jSWQgPSBmdW5jdGlvbiAoc2NoZWR1bGVyLCBfaWQsIGRlbGF5KSB7XG4gICAgICAgIGlmIChkZWxheSA9PT0gdm9pZCAwKSB7IGRlbGF5ID0gMDsgfVxuICAgICAgICByZXR1cm4gaW50ZXJ2YWxQcm92aWRlcl8xLmludGVydmFsUHJvdmlkZXIuc2V0SW50ZXJ2YWwoc2NoZWR1bGVyLmZsdXNoLmJpbmQoc2NoZWR1bGVyLCB0aGlzKSwgZGVsYXkpO1xuICAgIH07XG4gICAgQXN5bmNBY3Rpb24ucHJvdG90eXBlLnJlY3ljbGVBc3luY0lkID0gZnVuY3Rpb24gKF9zY2hlZHVsZXIsIGlkLCBkZWxheSkge1xuICAgICAgICBpZiAoZGVsYXkgPT09IHZvaWQgMCkgeyBkZWxheSA9IDA7IH1cbiAgICAgICAgaWYgKGRlbGF5ICE9IG51bGwgJiYgdGhpcy5kZWxheSA9PT0gZGVsYXkgJiYgdGhpcy5wZW5kaW5nID09PSBmYWxzZSkge1xuICAgICAgICAgICAgcmV0dXJuIGlkO1xuICAgICAgICB9XG4gICAgICAgIGlmIChpZCAhPSBudWxsKSB7XG4gICAgICAgICAgICBpbnRlcnZhbFByb3ZpZGVyXzEuaW50ZXJ2YWxQcm92aWRlci5jbGVhckludGVydmFsKGlkKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gdW5kZWZpbmVkO1xuICAgIH07XG4gICAgQXN5bmNBY3Rpb24ucHJvdG90eXBlLmV4ZWN1dGUgPSBmdW5jdGlvbiAoc3RhdGUsIGRlbGF5KSB7XG4gICAgICAgIGlmICh0aGlzLmNsb3NlZCkge1xuICAgICAgICAgICAgcmV0dXJuIG5ldyBFcnJvcignZXhlY3V0aW5nIGEgY2FuY2VsbGVkIGFjdGlvbicpO1xuICAgICAgICB9XG4gICAgICAgIHRoaXMucGVuZGluZyA9IGZhbHNlO1xuICAgICAgICB2YXIgZXJyb3IgPSB0aGlzLl9leGVjdXRlKHN0YXRlLCBkZWxheSk7XG4gICAgICAgIGlmIChlcnJvcikge1xuICAgICAgICAgICAgcmV0dXJuIGVycm9yO1xuICAgICAgICB9XG4gICAgICAgIGVsc2UgaWYgKHRoaXMucGVuZGluZyA9PT0gZmFsc2UgJiYgdGhpcy5pZCAhPSBudWxsKSB7XG4gICAgICAgICAgICB0aGlzLmlkID0gdGhpcy5yZWN5Y2xlQXN5bmNJZCh0aGlzLnNjaGVkdWxlciwgdGhpcy5pZCwgbnVsbCk7XG4gICAgICAgIH1cbiAgICB9O1xuICAgIEFzeW5jQWN0aW9uLnByb3RvdHlwZS5fZXhlY3V0ZSA9IGZ1bmN0aW9uIChzdGF0ZSwgX2RlbGF5KSB7XG4gICAgICAgIHZhciBlcnJvcmVkID0gZmFsc2U7XG4gICAgICAgIHZhciBlcnJvclZhbHVlO1xuICAgICAgICB0cnkge1xuICAgICAgICAgICAgdGhpcy53b3JrKHN0YXRlKTtcbiAgICAgICAgfVxuICAgICAgICBjYXRjaCAoZSkge1xuICAgICAgICAgICAgZXJyb3JlZCA9IHRydWU7XG4gICAgICAgICAgICBlcnJvclZhbHVlID0gZSA/IGUgOiBuZXcgRXJyb3IoJ1NjaGVkdWxlZCBhY3Rpb24gdGhyZXcgZmFsc3kgZXJyb3InKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoZXJyb3JlZCkge1xuICAgICAgICAgICAgdGhpcy51bnN1YnNjcmliZSgpO1xuICAgICAgICAgICAgcmV0dXJuIGVycm9yVmFsdWU7XG4gICAgICAgIH1cbiAgICB9O1xuICAgIEFzeW5jQWN0aW9uLnByb3RvdHlwZS51bnN1YnNjcmliZSA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgaWYgKCF0aGlzLmNsb3NlZCkge1xuICAgICAgICAgICAgdmFyIF9hID0gdGhpcywgaWQgPSBfYS5pZCwgc2NoZWR1bGVyID0gX2Euc2NoZWR1bGVyO1xuICAgICAgICAgICAgdmFyIGFjdGlvbnMgPSBzY2hlZHVsZXIuYWN0aW9ucztcbiAgICAgICAgICAgIHRoaXMud29yayA9IHRoaXMuc3RhdGUgPSB0aGlzLnNjaGVkdWxlciA9IG51bGw7XG4gICAgICAgICAgICB0aGlzLnBlbmRpbmcgPSBmYWxzZTtcbiAgICAgICAgICAgIGFyclJlbW92ZV8xLmFyclJlbW92ZShhY3Rpb25zLCB0aGlzKTtcbiAgICAgICAgICAgIGlmIChpZCAhPSBudWxsKSB7XG4gICAgICAgICAgICAgICAgdGhpcy5pZCA9IHRoaXMucmVjeWNsZUFzeW5jSWQoc2NoZWR1bGVyLCBpZCwgbnVsbCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICB0aGlzLmRlbGF5ID0gbnVsbDtcbiAgICAgICAgICAgIF9zdXBlci5wcm90b3R5cGUudW5zdWJzY3JpYmUuY2FsbCh0aGlzKTtcbiAgICAgICAgfVxuICAgIH07XG4gICAgcmV0dXJuIEFzeW5jQWN0aW9uO1xufShBY3Rpb25fMS5BY3Rpb24pKTtcbmV4cG9ydHMuQXN5bmNBY3Rpb24gPSBBc3luY0FjdGlvbjtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPUFzeW5jQWN0aW9uLmpzLm1hcCIsIlwidXNlIHN0cmljdFwiO1xudmFyIF9fZXh0ZW5kcyA9ICh0aGlzICYmIHRoaXMuX19leHRlbmRzKSB8fCAoZnVuY3Rpb24gKCkge1xuICAgIHZhciBleHRlbmRTdGF0aWNzID0gZnVuY3Rpb24gKGQsIGIpIHtcbiAgICAgICAgZXh0ZW5kU3RhdGljcyA9IE9iamVjdC5zZXRQcm90b3R5cGVPZiB8fFxuICAgICAgICAgICAgKHsgX19wcm90b19fOiBbXSB9IGluc3RhbmNlb2YgQXJyYXkgJiYgZnVuY3Rpb24gKGQsIGIpIHsgZC5fX3Byb3RvX18gPSBiOyB9KSB8fFxuICAgICAgICAgICAgZnVuY3Rpb24gKGQsIGIpIHsgZm9yICh2YXIgcCBpbiBiKSBpZiAoT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKGIsIHApKSBkW3BdID0gYltwXTsgfTtcbiAgICAgICAgcmV0dXJuIGV4dGVuZFN0YXRpY3MoZCwgYik7XG4gICAgfTtcbiAgICByZXR1cm4gZnVuY3Rpb24gKGQsIGIpIHtcbiAgICAgICAgaWYgKHR5cGVvZiBiICE9PSBcImZ1bmN0aW9uXCIgJiYgYiAhPT0gbnVsbClcbiAgICAgICAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoXCJDbGFzcyBleHRlbmRzIHZhbHVlIFwiICsgU3RyaW5nKGIpICsgXCIgaXMgbm90IGEgY29uc3RydWN0b3Igb3IgbnVsbFwiKTtcbiAgICAgICAgZXh0ZW5kU3RhdGljcyhkLCBiKTtcbiAgICAgICAgZnVuY3Rpb24gX18oKSB7IHRoaXMuY29uc3RydWN0b3IgPSBkOyB9XG4gICAgICAgIGQucHJvdG90eXBlID0gYiA9PT0gbnVsbCA/IE9iamVjdC5jcmVhdGUoYikgOiAoX18ucHJvdG90eXBlID0gYi5wcm90b3R5cGUsIG5ldyBfXygpKTtcbiAgICB9O1xufSkoKTtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmV4cG9ydHMuQXN5bmNTY2hlZHVsZXIgPSB2b2lkIDA7XG52YXIgU2NoZWR1bGVyXzEgPSByZXF1aXJlKFwiLi4vU2NoZWR1bGVyXCIpO1xudmFyIEFzeW5jU2NoZWR1bGVyID0gKGZ1bmN0aW9uIChfc3VwZXIpIHtcbiAgICBfX2V4dGVuZHMoQXN5bmNTY2hlZHVsZXIsIF9zdXBlcik7XG4gICAgZnVuY3Rpb24gQXN5bmNTY2hlZHVsZXIoU2NoZWR1bGVyQWN0aW9uLCBub3cpIHtcbiAgICAgICAgaWYgKG5vdyA9PT0gdm9pZCAwKSB7IG5vdyA9IFNjaGVkdWxlcl8xLlNjaGVkdWxlci5ub3c7IH1cbiAgICAgICAgdmFyIF90aGlzID0gX3N1cGVyLmNhbGwodGhpcywgU2NoZWR1bGVyQWN0aW9uLCBub3cpIHx8IHRoaXM7XG4gICAgICAgIF90aGlzLmFjdGlvbnMgPSBbXTtcbiAgICAgICAgX3RoaXMuX2FjdGl2ZSA9IGZhbHNlO1xuICAgICAgICByZXR1cm4gX3RoaXM7XG4gICAgfVxuICAgIEFzeW5jU2NoZWR1bGVyLnByb3RvdHlwZS5mbHVzaCA9IGZ1bmN0aW9uIChhY3Rpb24pIHtcbiAgICAgICAgdmFyIGFjdGlvbnMgPSB0aGlzLmFjdGlvbnM7XG4gICAgICAgIGlmICh0aGlzLl9hY3RpdmUpIHtcbiAgICAgICAgICAgIGFjdGlvbnMucHVzaChhY3Rpb24pO1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgICAgIHZhciBlcnJvcjtcbiAgICAgICAgdGhpcy5fYWN0aXZlID0gdHJ1ZTtcbiAgICAgICAgZG8ge1xuICAgICAgICAgICAgaWYgKChlcnJvciA9IGFjdGlvbi5leGVjdXRlKGFjdGlvbi5zdGF0ZSwgYWN0aW9uLmRlbGF5KSkpIHtcbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSB3aGlsZSAoKGFjdGlvbiA9IGFjdGlvbnMuc2hpZnQoKSkpO1xuICAgICAgICB0aGlzLl9hY3RpdmUgPSBmYWxzZTtcbiAgICAgICAgaWYgKGVycm9yKSB7XG4gICAgICAgICAgICB3aGlsZSAoKGFjdGlvbiA9IGFjdGlvbnMuc2hpZnQoKSkpIHtcbiAgICAgICAgICAgICAgICBhY3Rpb24udW5zdWJzY3JpYmUoKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHRocm93IGVycm9yO1xuICAgICAgICB9XG4gICAgfTtcbiAgICByZXR1cm4gQXN5bmNTY2hlZHVsZXI7XG59KFNjaGVkdWxlcl8xLlNjaGVkdWxlcikpO1xuZXhwb3J0cy5Bc3luY1NjaGVkdWxlciA9IEFzeW5jU2NoZWR1bGVyO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9QXN5bmNTY2hlZHVsZXIuanMubWFwIiwiXCJ1c2Ugc3RyaWN0XCI7XG52YXIgX19leHRlbmRzID0gKHRoaXMgJiYgdGhpcy5fX2V4dGVuZHMpIHx8IChmdW5jdGlvbiAoKSB7XG4gICAgdmFyIGV4dGVuZFN0YXRpY3MgPSBmdW5jdGlvbiAoZCwgYikge1xuICAgICAgICBleHRlbmRTdGF0aWNzID0gT2JqZWN0LnNldFByb3RvdHlwZU9mIHx8XG4gICAgICAgICAgICAoeyBfX3Byb3RvX186IFtdIH0gaW5zdGFuY2VvZiBBcnJheSAmJiBmdW5jdGlvbiAoZCwgYikgeyBkLl9fcHJvdG9fXyA9IGI7IH0pIHx8XG4gICAgICAgICAgICBmdW5jdGlvbiAoZCwgYikgeyBmb3IgKHZhciBwIGluIGIpIGlmIChPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwoYiwgcCkpIGRbcF0gPSBiW3BdOyB9O1xuICAgICAgICByZXR1cm4gZXh0ZW5kU3RhdGljcyhkLCBiKTtcbiAgICB9O1xuICAgIHJldHVybiBmdW5jdGlvbiAoZCwgYikge1xuICAgICAgICBpZiAodHlwZW9mIGIgIT09IFwiZnVuY3Rpb25cIiAmJiBiICE9PSBudWxsKVxuICAgICAgICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcihcIkNsYXNzIGV4dGVuZHMgdmFsdWUgXCIgKyBTdHJpbmcoYikgKyBcIiBpcyBub3QgYSBjb25zdHJ1Y3RvciBvciBudWxsXCIpO1xuICAgICAgICBleHRlbmRTdGF0aWNzKGQsIGIpO1xuICAgICAgICBmdW5jdGlvbiBfXygpIHsgdGhpcy5jb25zdHJ1Y3RvciA9IGQ7IH1cbiAgICAgICAgZC5wcm90b3R5cGUgPSBiID09PSBudWxsID8gT2JqZWN0LmNyZWF0ZShiKSA6IChfXy5wcm90b3R5cGUgPSBiLnByb3RvdHlwZSwgbmV3IF9fKCkpO1xuICAgIH07XG59KSgpO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuZXhwb3J0cy5RdWV1ZUFjdGlvbiA9IHZvaWQgMDtcbnZhciBBc3luY0FjdGlvbl8xID0gcmVxdWlyZShcIi4vQXN5bmNBY3Rpb25cIik7XG52YXIgUXVldWVBY3Rpb24gPSAoZnVuY3Rpb24gKF9zdXBlcikge1xuICAgIF9fZXh0ZW5kcyhRdWV1ZUFjdGlvbiwgX3N1cGVyKTtcbiAgICBmdW5jdGlvbiBRdWV1ZUFjdGlvbihzY2hlZHVsZXIsIHdvcmspIHtcbiAgICAgICAgdmFyIF90aGlzID0gX3N1cGVyLmNhbGwodGhpcywgc2NoZWR1bGVyLCB3b3JrKSB8fCB0aGlzO1xuICAgICAgICBfdGhpcy5zY2hlZHVsZXIgPSBzY2hlZHVsZXI7XG4gICAgICAgIF90aGlzLndvcmsgPSB3b3JrO1xuICAgICAgICByZXR1cm4gX3RoaXM7XG4gICAgfVxuICAgIFF1ZXVlQWN0aW9uLnByb3RvdHlwZS5zY2hlZHVsZSA9IGZ1bmN0aW9uIChzdGF0ZSwgZGVsYXkpIHtcbiAgICAgICAgaWYgKGRlbGF5ID09PSB2b2lkIDApIHsgZGVsYXkgPSAwOyB9XG4gICAgICAgIGlmIChkZWxheSA+IDApIHtcbiAgICAgICAgICAgIHJldHVybiBfc3VwZXIucHJvdG90eXBlLnNjaGVkdWxlLmNhbGwodGhpcywgc3RhdGUsIGRlbGF5KTtcbiAgICAgICAgfVxuICAgICAgICB0aGlzLmRlbGF5ID0gZGVsYXk7XG4gICAgICAgIHRoaXMuc3RhdGUgPSBzdGF0ZTtcbiAgICAgICAgdGhpcy5zY2hlZHVsZXIuZmx1c2godGhpcyk7XG4gICAgICAgIHJldHVybiB0aGlzO1xuICAgIH07XG4gICAgUXVldWVBY3Rpb24ucHJvdG90eXBlLmV4ZWN1dGUgPSBmdW5jdGlvbiAoc3RhdGUsIGRlbGF5KSB7XG4gICAgICAgIHJldHVybiBkZWxheSA+IDAgfHwgdGhpcy5jbG9zZWQgPyBfc3VwZXIucHJvdG90eXBlLmV4ZWN1dGUuY2FsbCh0aGlzLCBzdGF0ZSwgZGVsYXkpIDogdGhpcy5fZXhlY3V0ZShzdGF0ZSwgZGVsYXkpO1xuICAgIH07XG4gICAgUXVldWVBY3Rpb24ucHJvdG90eXBlLnJlcXVlc3RBc3luY0lkID0gZnVuY3Rpb24gKHNjaGVkdWxlciwgaWQsIGRlbGF5KSB7XG4gICAgICAgIGlmIChkZWxheSA9PT0gdm9pZCAwKSB7IGRlbGF5ID0gMDsgfVxuICAgICAgICBpZiAoKGRlbGF5ICE9IG51bGwgJiYgZGVsYXkgPiAwKSB8fCAoZGVsYXkgPT0gbnVsbCAmJiB0aGlzLmRlbGF5ID4gMCkpIHtcbiAgICAgICAgICAgIHJldHVybiBfc3VwZXIucHJvdG90eXBlLnJlcXVlc3RBc3luY0lkLmNhbGwodGhpcywgc2NoZWR1bGVyLCBpZCwgZGVsYXkpO1xuICAgICAgICB9XG4gICAgICAgIHNjaGVkdWxlci5mbHVzaCh0aGlzKTtcbiAgICAgICAgcmV0dXJuIDA7XG4gICAgfTtcbiAgICByZXR1cm4gUXVldWVBY3Rpb247XG59KEFzeW5jQWN0aW9uXzEuQXN5bmNBY3Rpb24pKTtcbmV4cG9ydHMuUXVldWVBY3Rpb24gPSBRdWV1ZUFjdGlvbjtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPVF1ZXVlQWN0aW9uLmpzLm1hcCIsIlwidXNlIHN0cmljdFwiO1xudmFyIF9fZXh0ZW5kcyA9ICh0aGlzICYmIHRoaXMuX19leHRlbmRzKSB8fCAoZnVuY3Rpb24gKCkge1xuICAgIHZhciBleHRlbmRTdGF0aWNzID0gZnVuY3Rpb24gKGQsIGIpIHtcbiAgICAgICAgZXh0ZW5kU3RhdGljcyA9IE9iamVjdC5zZXRQcm90b3R5cGVPZiB8fFxuICAgICAgICAgICAgKHsgX19wcm90b19fOiBbXSB9IGluc3RhbmNlb2YgQXJyYXkgJiYgZnVuY3Rpb24gKGQsIGIpIHsgZC5fX3Byb3RvX18gPSBiOyB9KSB8fFxuICAgICAgICAgICAgZnVuY3Rpb24gKGQsIGIpIHsgZm9yICh2YXIgcCBpbiBiKSBpZiAoT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKGIsIHApKSBkW3BdID0gYltwXTsgfTtcbiAgICAgICAgcmV0dXJuIGV4dGVuZFN0YXRpY3MoZCwgYik7XG4gICAgfTtcbiAgICByZXR1cm4gZnVuY3Rpb24gKGQsIGIpIHtcbiAgICAgICAgaWYgKHR5cGVvZiBiICE9PSBcImZ1bmN0aW9uXCIgJiYgYiAhPT0gbnVsbClcbiAgICAgICAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoXCJDbGFzcyBleHRlbmRzIHZhbHVlIFwiICsgU3RyaW5nKGIpICsgXCIgaXMgbm90IGEgY29uc3RydWN0b3Igb3IgbnVsbFwiKTtcbiAgICAgICAgZXh0ZW5kU3RhdGljcyhkLCBiKTtcbiAgICAgICAgZnVuY3Rpb24gX18oKSB7IHRoaXMuY29uc3RydWN0b3IgPSBkOyB9XG4gICAgICAgIGQucHJvdG90eXBlID0gYiA9PT0gbnVsbCA/IE9iamVjdC5jcmVhdGUoYikgOiAoX18ucHJvdG90eXBlID0gYi5wcm90b3R5cGUsIG5ldyBfXygpKTtcbiAgICB9O1xufSkoKTtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmV4cG9ydHMuUXVldWVTY2hlZHVsZXIgPSB2b2lkIDA7XG52YXIgQXN5bmNTY2hlZHVsZXJfMSA9IHJlcXVpcmUoXCIuL0FzeW5jU2NoZWR1bGVyXCIpO1xudmFyIFF1ZXVlU2NoZWR1bGVyID0gKGZ1bmN0aW9uIChfc3VwZXIpIHtcbiAgICBfX2V4dGVuZHMoUXVldWVTY2hlZHVsZXIsIF9zdXBlcik7XG4gICAgZnVuY3Rpb24gUXVldWVTY2hlZHVsZXIoKSB7XG4gICAgICAgIHJldHVybiBfc3VwZXIgIT09IG51bGwgJiYgX3N1cGVyLmFwcGx5KHRoaXMsIGFyZ3VtZW50cykgfHwgdGhpcztcbiAgICB9XG4gICAgcmV0dXJuIFF1ZXVlU2NoZWR1bGVyO1xufShBc3luY1NjaGVkdWxlcl8xLkFzeW5jU2NoZWR1bGVyKSk7XG5leHBvcnRzLlF1ZXVlU2NoZWR1bGVyID0gUXVldWVTY2hlZHVsZXI7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1RdWV1ZVNjaGVkdWxlci5qcy5tYXAiLCJcInVzZSBzdHJpY3RcIjtcbnZhciBfX2V4dGVuZHMgPSAodGhpcyAmJiB0aGlzLl9fZXh0ZW5kcykgfHwgKGZ1bmN0aW9uICgpIHtcbiAgICB2YXIgZXh0ZW5kU3RhdGljcyA9IGZ1bmN0aW9uIChkLCBiKSB7XG4gICAgICAgIGV4dGVuZFN0YXRpY3MgPSBPYmplY3Quc2V0UHJvdG90eXBlT2YgfHxcbiAgICAgICAgICAgICh7IF9fcHJvdG9fXzogW10gfSBpbnN0YW5jZW9mIEFycmF5ICYmIGZ1bmN0aW9uIChkLCBiKSB7IGQuX19wcm90b19fID0gYjsgfSkgfHxcbiAgICAgICAgICAgIGZ1bmN0aW9uIChkLCBiKSB7IGZvciAodmFyIHAgaW4gYikgaWYgKE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChiLCBwKSkgZFtwXSA9IGJbcF07IH07XG4gICAgICAgIHJldHVybiBleHRlbmRTdGF0aWNzKGQsIGIpO1xuICAgIH07XG4gICAgcmV0dXJuIGZ1bmN0aW9uIChkLCBiKSB7XG4gICAgICAgIGlmICh0eXBlb2YgYiAhPT0gXCJmdW5jdGlvblwiICYmIGIgIT09IG51bGwpXG4gICAgICAgICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKFwiQ2xhc3MgZXh0ZW5kcyB2YWx1ZSBcIiArIFN0cmluZyhiKSArIFwiIGlzIG5vdCBhIGNvbnN0cnVjdG9yIG9yIG51bGxcIik7XG4gICAgICAgIGV4dGVuZFN0YXRpY3MoZCwgYik7XG4gICAgICAgIGZ1bmN0aW9uIF9fKCkgeyB0aGlzLmNvbnN0cnVjdG9yID0gZDsgfVxuICAgICAgICBkLnByb3RvdHlwZSA9IGIgPT09IG51bGwgPyBPYmplY3QuY3JlYXRlKGIpIDogKF9fLnByb3RvdHlwZSA9IGIucHJvdG90eXBlLCBuZXcgX18oKSk7XG4gICAgfTtcbn0pKCk7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5leHBvcnRzLlZpcnR1YWxBY3Rpb24gPSBleHBvcnRzLlZpcnR1YWxUaW1lU2NoZWR1bGVyID0gdm9pZCAwO1xudmFyIEFzeW5jQWN0aW9uXzEgPSByZXF1aXJlKFwiLi9Bc3luY0FjdGlvblwiKTtcbnZhciBTdWJzY3JpcHRpb25fMSA9IHJlcXVpcmUoXCIuLi9TdWJzY3JpcHRpb25cIik7XG52YXIgQXN5bmNTY2hlZHVsZXJfMSA9IHJlcXVpcmUoXCIuL0FzeW5jU2NoZWR1bGVyXCIpO1xudmFyIFZpcnR1YWxUaW1lU2NoZWR1bGVyID0gKGZ1bmN0aW9uIChfc3VwZXIpIHtcbiAgICBfX2V4dGVuZHMoVmlydHVhbFRpbWVTY2hlZHVsZXIsIF9zdXBlcik7XG4gICAgZnVuY3Rpb24gVmlydHVhbFRpbWVTY2hlZHVsZXIoc2NoZWR1bGVyQWN0aW9uQ3RvciwgbWF4RnJhbWVzKSB7XG4gICAgICAgIGlmIChzY2hlZHVsZXJBY3Rpb25DdG9yID09PSB2b2lkIDApIHsgc2NoZWR1bGVyQWN0aW9uQ3RvciA9IFZpcnR1YWxBY3Rpb247IH1cbiAgICAgICAgaWYgKG1heEZyYW1lcyA9PT0gdm9pZCAwKSB7IG1heEZyYW1lcyA9IEluZmluaXR5OyB9XG4gICAgICAgIHZhciBfdGhpcyA9IF9zdXBlci5jYWxsKHRoaXMsIHNjaGVkdWxlckFjdGlvbkN0b3IsIGZ1bmN0aW9uICgpIHsgcmV0dXJuIF90aGlzLmZyYW1lOyB9KSB8fCB0aGlzO1xuICAgICAgICBfdGhpcy5tYXhGcmFtZXMgPSBtYXhGcmFtZXM7XG4gICAgICAgIF90aGlzLmZyYW1lID0gMDtcbiAgICAgICAgX3RoaXMuaW5kZXggPSAtMTtcbiAgICAgICAgcmV0dXJuIF90aGlzO1xuICAgIH1cbiAgICBWaXJ0dWFsVGltZVNjaGVkdWxlci5wcm90b3R5cGUuZmx1c2ggPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHZhciBfYSA9IHRoaXMsIGFjdGlvbnMgPSBfYS5hY3Rpb25zLCBtYXhGcmFtZXMgPSBfYS5tYXhGcmFtZXM7XG4gICAgICAgIHZhciBlcnJvcjtcbiAgICAgICAgdmFyIGFjdGlvbjtcbiAgICAgICAgd2hpbGUgKChhY3Rpb24gPSBhY3Rpb25zWzBdKSAmJiBhY3Rpb24uZGVsYXkgPD0gbWF4RnJhbWVzKSB7XG4gICAgICAgICAgICBhY3Rpb25zLnNoaWZ0KCk7XG4gICAgICAgICAgICB0aGlzLmZyYW1lID0gYWN0aW9uLmRlbGF5O1xuICAgICAgICAgICAgaWYgKChlcnJvciA9IGFjdGlvbi5leGVjdXRlKGFjdGlvbi5zdGF0ZSwgYWN0aW9uLmRlbGF5KSkpIHtcbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBpZiAoZXJyb3IpIHtcbiAgICAgICAgICAgIHdoaWxlICgoYWN0aW9uID0gYWN0aW9ucy5zaGlmdCgpKSkge1xuICAgICAgICAgICAgICAgIGFjdGlvbi51bnN1YnNjcmliZSgpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgdGhyb3cgZXJyb3I7XG4gICAgICAgIH1cbiAgICB9O1xuICAgIFZpcnR1YWxUaW1lU2NoZWR1bGVyLmZyYW1lVGltZUZhY3RvciA9IDEwO1xuICAgIHJldHVybiBWaXJ0dWFsVGltZVNjaGVkdWxlcjtcbn0oQXN5bmNTY2hlZHVsZXJfMS5Bc3luY1NjaGVkdWxlcikpO1xuZXhwb3J0cy5WaXJ0dWFsVGltZVNjaGVkdWxlciA9IFZpcnR1YWxUaW1lU2NoZWR1bGVyO1xudmFyIFZpcnR1YWxBY3Rpb24gPSAoZnVuY3Rpb24gKF9zdXBlcikge1xuICAgIF9fZXh0ZW5kcyhWaXJ0dWFsQWN0aW9uLCBfc3VwZXIpO1xuICAgIGZ1bmN0aW9uIFZpcnR1YWxBY3Rpb24oc2NoZWR1bGVyLCB3b3JrLCBpbmRleCkge1xuICAgICAgICBpZiAoaW5kZXggPT09IHZvaWQgMCkgeyBpbmRleCA9IChzY2hlZHVsZXIuaW5kZXggKz0gMSk7IH1cbiAgICAgICAgdmFyIF90aGlzID0gX3N1cGVyLmNhbGwodGhpcywgc2NoZWR1bGVyLCB3b3JrKSB8fCB0aGlzO1xuICAgICAgICBfdGhpcy5zY2hlZHVsZXIgPSBzY2hlZHVsZXI7XG4gICAgICAgIF90aGlzLndvcmsgPSB3b3JrO1xuICAgICAgICBfdGhpcy5pbmRleCA9IGluZGV4O1xuICAgICAgICBfdGhpcy5hY3RpdmUgPSB0cnVlO1xuICAgICAgICBfdGhpcy5pbmRleCA9IHNjaGVkdWxlci5pbmRleCA9IGluZGV4O1xuICAgICAgICByZXR1cm4gX3RoaXM7XG4gICAgfVxuICAgIFZpcnR1YWxBY3Rpb24ucHJvdG90eXBlLnNjaGVkdWxlID0gZnVuY3Rpb24gKHN0YXRlLCBkZWxheSkge1xuICAgICAgICBpZiAoZGVsYXkgPT09IHZvaWQgMCkgeyBkZWxheSA9IDA7IH1cbiAgICAgICAgaWYgKE51bWJlci5pc0Zpbml0ZShkZWxheSkpIHtcbiAgICAgICAgICAgIGlmICghdGhpcy5pZCkge1xuICAgICAgICAgICAgICAgIHJldHVybiBfc3VwZXIucHJvdG90eXBlLnNjaGVkdWxlLmNhbGwodGhpcywgc3RhdGUsIGRlbGF5KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHRoaXMuYWN0aXZlID0gZmFsc2U7XG4gICAgICAgICAgICB2YXIgYWN0aW9uID0gbmV3IFZpcnR1YWxBY3Rpb24odGhpcy5zY2hlZHVsZXIsIHRoaXMud29yayk7XG4gICAgICAgICAgICB0aGlzLmFkZChhY3Rpb24pO1xuICAgICAgICAgICAgcmV0dXJuIGFjdGlvbi5zY2hlZHVsZShzdGF0ZSwgZGVsYXkpO1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgcmV0dXJuIFN1YnNjcmlwdGlvbl8xLlN1YnNjcmlwdGlvbi5FTVBUWTtcbiAgICAgICAgfVxuICAgIH07XG4gICAgVmlydHVhbEFjdGlvbi5wcm90b3R5cGUucmVxdWVzdEFzeW5jSWQgPSBmdW5jdGlvbiAoc2NoZWR1bGVyLCBpZCwgZGVsYXkpIHtcbiAgICAgICAgaWYgKGRlbGF5ID09PSB2b2lkIDApIHsgZGVsYXkgPSAwOyB9XG4gICAgICAgIHRoaXMuZGVsYXkgPSBzY2hlZHVsZXIuZnJhbWUgKyBkZWxheTtcbiAgICAgICAgdmFyIGFjdGlvbnMgPSBzY2hlZHVsZXIuYWN0aW9ucztcbiAgICAgICAgYWN0aW9ucy5wdXNoKHRoaXMpO1xuICAgICAgICBhY3Rpb25zLnNvcnQoVmlydHVhbEFjdGlvbi5zb3J0QWN0aW9ucyk7XG4gICAgICAgIHJldHVybiAxO1xuICAgIH07XG4gICAgVmlydHVhbEFjdGlvbi5wcm90b3R5cGUucmVjeWNsZUFzeW5jSWQgPSBmdW5jdGlvbiAoc2NoZWR1bGVyLCBpZCwgZGVsYXkpIHtcbiAgICAgICAgaWYgKGRlbGF5ID09PSB2b2lkIDApIHsgZGVsYXkgPSAwOyB9XG4gICAgICAgIHJldHVybiB1bmRlZmluZWQ7XG4gICAgfTtcbiAgICBWaXJ0dWFsQWN0aW9uLnByb3RvdHlwZS5fZXhlY3V0ZSA9IGZ1bmN0aW9uIChzdGF0ZSwgZGVsYXkpIHtcbiAgICAgICAgaWYgKHRoaXMuYWN0aXZlID09PSB0cnVlKSB7XG4gICAgICAgICAgICByZXR1cm4gX3N1cGVyLnByb3RvdHlwZS5fZXhlY3V0ZS5jYWxsKHRoaXMsIHN0YXRlLCBkZWxheSk7XG4gICAgICAgIH1cbiAgICB9O1xuICAgIFZpcnR1YWxBY3Rpb24uc29ydEFjdGlvbnMgPSBmdW5jdGlvbiAoYSwgYikge1xuICAgICAgICBpZiAoYS5kZWxheSA9PT0gYi5kZWxheSkge1xuICAgICAgICAgICAgaWYgKGEuaW5kZXggPT09IGIuaW5kZXgpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gMDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2UgaWYgKGEuaW5kZXggPiBiLmluZGV4KSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIDE7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gLTE7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSBpZiAoYS5kZWxheSA+IGIuZGVsYXkpIHtcbiAgICAgICAgICAgIHJldHVybiAxO1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgcmV0dXJuIC0xO1xuICAgICAgICB9XG4gICAgfTtcbiAgICByZXR1cm4gVmlydHVhbEFjdGlvbjtcbn0oQXN5bmNBY3Rpb25fMS5Bc3luY0FjdGlvbikpO1xuZXhwb3J0cy5WaXJ0dWFsQWN0aW9uID0gVmlydHVhbEFjdGlvbjtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPVZpcnR1YWxUaW1lU2NoZWR1bGVyLmpzLm1hcCIsIlwidXNlIHN0cmljdFwiO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuZXhwb3J0cy5hbmltYXRpb25GcmFtZSA9IGV4cG9ydHMuYW5pbWF0aW9uRnJhbWVTY2hlZHVsZXIgPSB2b2lkIDA7XG52YXIgQW5pbWF0aW9uRnJhbWVBY3Rpb25fMSA9IHJlcXVpcmUoXCIuL0FuaW1hdGlvbkZyYW1lQWN0aW9uXCIpO1xudmFyIEFuaW1hdGlvbkZyYW1lU2NoZWR1bGVyXzEgPSByZXF1aXJlKFwiLi9BbmltYXRpb25GcmFtZVNjaGVkdWxlclwiKTtcbmV4cG9ydHMuYW5pbWF0aW9uRnJhbWVTY2hlZHVsZXIgPSBuZXcgQW5pbWF0aW9uRnJhbWVTY2hlZHVsZXJfMS5BbmltYXRpb25GcmFtZVNjaGVkdWxlcihBbmltYXRpb25GcmFtZUFjdGlvbl8xLkFuaW1hdGlvbkZyYW1lQWN0aW9uKTtcbmV4cG9ydHMuYW5pbWF0aW9uRnJhbWUgPSBleHBvcnRzLmFuaW1hdGlvbkZyYW1lU2NoZWR1bGVyO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9YW5pbWF0aW9uRnJhbWUuanMubWFwIiwiXCJ1c2Ugc3RyaWN0XCI7XG52YXIgX19yZWFkID0gKHRoaXMgJiYgdGhpcy5fX3JlYWQpIHx8IGZ1bmN0aW9uIChvLCBuKSB7XG4gICAgdmFyIG0gPSB0eXBlb2YgU3ltYm9sID09PSBcImZ1bmN0aW9uXCIgJiYgb1tTeW1ib2wuaXRlcmF0b3JdO1xuICAgIGlmICghbSkgcmV0dXJuIG87XG4gICAgdmFyIGkgPSBtLmNhbGwobyksIHIsIGFyID0gW10sIGU7XG4gICAgdHJ5IHtcbiAgICAgICAgd2hpbGUgKChuID09PSB2b2lkIDAgfHwgbi0tID4gMCkgJiYgIShyID0gaS5uZXh0KCkpLmRvbmUpIGFyLnB1c2goci52YWx1ZSk7XG4gICAgfVxuICAgIGNhdGNoIChlcnJvcikgeyBlID0geyBlcnJvcjogZXJyb3IgfTsgfVxuICAgIGZpbmFsbHkge1xuICAgICAgICB0cnkge1xuICAgICAgICAgICAgaWYgKHIgJiYgIXIuZG9uZSAmJiAobSA9IGlbXCJyZXR1cm5cIl0pKSBtLmNhbGwoaSk7XG4gICAgICAgIH1cbiAgICAgICAgZmluYWxseSB7IGlmIChlKSB0aHJvdyBlLmVycm9yOyB9XG4gICAgfVxuICAgIHJldHVybiBhcjtcbn07XG52YXIgX19zcHJlYWRBcnJheSA9ICh0aGlzICYmIHRoaXMuX19zcHJlYWRBcnJheSkgfHwgZnVuY3Rpb24gKHRvLCBmcm9tKSB7XG4gICAgZm9yICh2YXIgaSA9IDAsIGlsID0gZnJvbS5sZW5ndGgsIGogPSB0by5sZW5ndGg7IGkgPCBpbDsgaSsrLCBqKyspXG4gICAgICAgIHRvW2pdID0gZnJvbVtpXTtcbiAgICByZXR1cm4gdG87XG59O1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuZXhwb3J0cy5hbmltYXRpb25GcmFtZVByb3ZpZGVyID0gdm9pZCAwO1xudmFyIFN1YnNjcmlwdGlvbl8xID0gcmVxdWlyZShcIi4uL1N1YnNjcmlwdGlvblwiKTtcbmV4cG9ydHMuYW5pbWF0aW9uRnJhbWVQcm92aWRlciA9IHtcbiAgICBzY2hlZHVsZTogZnVuY3Rpb24gKGNhbGxiYWNrKSB7XG4gICAgICAgIHZhciByZXF1ZXN0ID0gcmVxdWVzdEFuaW1hdGlvbkZyYW1lO1xuICAgICAgICB2YXIgY2FuY2VsID0gY2FuY2VsQW5pbWF0aW9uRnJhbWU7XG4gICAgICAgIHZhciBkZWxlZ2F0ZSA9IGV4cG9ydHMuYW5pbWF0aW9uRnJhbWVQcm92aWRlci5kZWxlZ2F0ZTtcbiAgICAgICAgaWYgKGRlbGVnYXRlKSB7XG4gICAgICAgICAgICByZXF1ZXN0ID0gZGVsZWdhdGUucmVxdWVzdEFuaW1hdGlvbkZyYW1lO1xuICAgICAgICAgICAgY2FuY2VsID0gZGVsZWdhdGUuY2FuY2VsQW5pbWF0aW9uRnJhbWU7XG4gICAgICAgIH1cbiAgICAgICAgdmFyIGhhbmRsZSA9IHJlcXVlc3QoZnVuY3Rpb24gKHRpbWVzdGFtcCkge1xuICAgICAgICAgICAgY2FuY2VsID0gdW5kZWZpbmVkO1xuICAgICAgICAgICAgY2FsbGJhY2sodGltZXN0YW1wKTtcbiAgICAgICAgfSk7XG4gICAgICAgIHJldHVybiBuZXcgU3Vic2NyaXB0aW9uXzEuU3Vic2NyaXB0aW9uKGZ1bmN0aW9uICgpIHsgcmV0dXJuIGNhbmNlbCA9PT0gbnVsbCB8fCBjYW5jZWwgPT09IHZvaWQgMCA/IHZvaWQgMCA6IGNhbmNlbChoYW5kbGUpOyB9KTtcbiAgICB9LFxuICAgIHJlcXVlc3RBbmltYXRpb25GcmFtZTogZnVuY3Rpb24gKCkge1xuICAgICAgICB2YXIgYXJncyA9IFtdO1xuICAgICAgICBmb3IgKHZhciBfaSA9IDA7IF9pIDwgYXJndW1lbnRzLmxlbmd0aDsgX2krKykge1xuICAgICAgICAgICAgYXJnc1tfaV0gPSBhcmd1bWVudHNbX2ldO1xuICAgICAgICB9XG4gICAgICAgIHZhciBkZWxlZ2F0ZSA9IGV4cG9ydHMuYW5pbWF0aW9uRnJhbWVQcm92aWRlci5kZWxlZ2F0ZTtcbiAgICAgICAgcmV0dXJuICgoZGVsZWdhdGUgPT09IG51bGwgfHwgZGVsZWdhdGUgPT09IHZvaWQgMCA/IHZvaWQgMCA6IGRlbGVnYXRlLnJlcXVlc3RBbmltYXRpb25GcmFtZSkgfHwgcmVxdWVzdEFuaW1hdGlvbkZyYW1lKS5hcHBseSh2b2lkIDAsIF9fc3ByZWFkQXJyYXkoW10sIF9fcmVhZChhcmdzKSkpO1xuICAgIH0sXG4gICAgY2FuY2VsQW5pbWF0aW9uRnJhbWU6IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgdmFyIGFyZ3MgPSBbXTtcbiAgICAgICAgZm9yICh2YXIgX2kgPSAwOyBfaSA8IGFyZ3VtZW50cy5sZW5ndGg7IF9pKyspIHtcbiAgICAgICAgICAgIGFyZ3NbX2ldID0gYXJndW1lbnRzW19pXTtcbiAgICAgICAgfVxuICAgICAgICB2YXIgZGVsZWdhdGUgPSBleHBvcnRzLmFuaW1hdGlvbkZyYW1lUHJvdmlkZXIuZGVsZWdhdGU7XG4gICAgICAgIHJldHVybiAoKGRlbGVnYXRlID09PSBudWxsIHx8IGRlbGVnYXRlID09PSB2b2lkIDAgPyB2b2lkIDAgOiBkZWxlZ2F0ZS5jYW5jZWxBbmltYXRpb25GcmFtZSkgfHwgY2FuY2VsQW5pbWF0aW9uRnJhbWUpLmFwcGx5KHZvaWQgMCwgX19zcHJlYWRBcnJheShbXSwgX19yZWFkKGFyZ3MpKSk7XG4gICAgfSxcbiAgICBkZWxlZ2F0ZTogdW5kZWZpbmVkLFxufTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWFuaW1hdGlvbkZyYW1lUHJvdmlkZXIuanMubWFwIiwiXCJ1c2Ugc3RyaWN0XCI7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5leHBvcnRzLmFzYXAgPSBleHBvcnRzLmFzYXBTY2hlZHVsZXIgPSB2b2lkIDA7XG52YXIgQXNhcEFjdGlvbl8xID0gcmVxdWlyZShcIi4vQXNhcEFjdGlvblwiKTtcbnZhciBBc2FwU2NoZWR1bGVyXzEgPSByZXF1aXJlKFwiLi9Bc2FwU2NoZWR1bGVyXCIpO1xuZXhwb3J0cy5hc2FwU2NoZWR1bGVyID0gbmV3IEFzYXBTY2hlZHVsZXJfMS5Bc2FwU2NoZWR1bGVyKEFzYXBBY3Rpb25fMS5Bc2FwQWN0aW9uKTtcbmV4cG9ydHMuYXNhcCA9IGV4cG9ydHMuYXNhcFNjaGVkdWxlcjtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWFzYXAuanMubWFwIiwiXCJ1c2Ugc3RyaWN0XCI7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5leHBvcnRzLmFzeW5jID0gZXhwb3J0cy5hc3luY1NjaGVkdWxlciA9IHZvaWQgMDtcbnZhciBBc3luY0FjdGlvbl8xID0gcmVxdWlyZShcIi4vQXN5bmNBY3Rpb25cIik7XG52YXIgQXN5bmNTY2hlZHVsZXJfMSA9IHJlcXVpcmUoXCIuL0FzeW5jU2NoZWR1bGVyXCIpO1xuZXhwb3J0cy5hc3luY1NjaGVkdWxlciA9IG5ldyBBc3luY1NjaGVkdWxlcl8xLkFzeW5jU2NoZWR1bGVyKEFzeW5jQWN0aW9uXzEuQXN5bmNBY3Rpb24pO1xuZXhwb3J0cy5hc3luYyA9IGV4cG9ydHMuYXN5bmNTY2hlZHVsZXI7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1hc3luYy5qcy5tYXAiLCJcInVzZSBzdHJpY3RcIjtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmV4cG9ydHMuZGF0ZVRpbWVzdGFtcFByb3ZpZGVyID0gdm9pZCAwO1xuZXhwb3J0cy5kYXRlVGltZXN0YW1wUHJvdmlkZXIgPSB7XG4gICAgbm93OiBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHJldHVybiAoZXhwb3J0cy5kYXRlVGltZXN0YW1wUHJvdmlkZXIuZGVsZWdhdGUgfHwgRGF0ZSkubm93KCk7XG4gICAgfSxcbiAgICBkZWxlZ2F0ZTogdW5kZWZpbmVkLFxufTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWRhdGVUaW1lc3RhbXBQcm92aWRlci5qcy5tYXAiLCJcInVzZSBzdHJpY3RcIjtcbnZhciBfX3JlYWQgPSAodGhpcyAmJiB0aGlzLl9fcmVhZCkgfHwgZnVuY3Rpb24gKG8sIG4pIHtcbiAgICB2YXIgbSA9IHR5cGVvZiBTeW1ib2wgPT09IFwiZnVuY3Rpb25cIiAmJiBvW1N5bWJvbC5pdGVyYXRvcl07XG4gICAgaWYgKCFtKSByZXR1cm4gbztcbiAgICB2YXIgaSA9IG0uY2FsbChvKSwgciwgYXIgPSBbXSwgZTtcbiAgICB0cnkge1xuICAgICAgICB3aGlsZSAoKG4gPT09IHZvaWQgMCB8fCBuLS0gPiAwKSAmJiAhKHIgPSBpLm5leHQoKSkuZG9uZSkgYXIucHVzaChyLnZhbHVlKTtcbiAgICB9XG4gICAgY2F0Y2ggKGVycm9yKSB7IGUgPSB7IGVycm9yOiBlcnJvciB9OyB9XG4gICAgZmluYWxseSB7XG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgICBpZiAociAmJiAhci5kb25lICYmIChtID0gaVtcInJldHVyblwiXSkpIG0uY2FsbChpKTtcbiAgICAgICAgfVxuICAgICAgICBmaW5hbGx5IHsgaWYgKGUpIHRocm93IGUuZXJyb3I7IH1cbiAgICB9XG4gICAgcmV0dXJuIGFyO1xufTtcbnZhciBfX3NwcmVhZEFycmF5ID0gKHRoaXMgJiYgdGhpcy5fX3NwcmVhZEFycmF5KSB8fCBmdW5jdGlvbiAodG8sIGZyb20pIHtcbiAgICBmb3IgKHZhciBpID0gMCwgaWwgPSBmcm9tLmxlbmd0aCwgaiA9IHRvLmxlbmd0aDsgaSA8IGlsOyBpKyssIGorKylcbiAgICAgICAgdG9bal0gPSBmcm9tW2ldO1xuICAgIHJldHVybiB0bztcbn07XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5leHBvcnRzLmltbWVkaWF0ZVByb3ZpZGVyID0gdm9pZCAwO1xudmFyIEltbWVkaWF0ZV8xID0gcmVxdWlyZShcIi4uL3V0aWwvSW1tZWRpYXRlXCIpO1xudmFyIHNldEltbWVkaWF0ZSA9IEltbWVkaWF0ZV8xLkltbWVkaWF0ZS5zZXRJbW1lZGlhdGUsIGNsZWFySW1tZWRpYXRlID0gSW1tZWRpYXRlXzEuSW1tZWRpYXRlLmNsZWFySW1tZWRpYXRlO1xuZXhwb3J0cy5pbW1lZGlhdGVQcm92aWRlciA9IHtcbiAgICBzZXRJbW1lZGlhdGU6IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgdmFyIGFyZ3MgPSBbXTtcbiAgICAgICAgZm9yICh2YXIgX2kgPSAwOyBfaSA8IGFyZ3VtZW50cy5sZW5ndGg7IF9pKyspIHtcbiAgICAgICAgICAgIGFyZ3NbX2ldID0gYXJndW1lbnRzW19pXTtcbiAgICAgICAgfVxuICAgICAgICB2YXIgZGVsZWdhdGUgPSBleHBvcnRzLmltbWVkaWF0ZVByb3ZpZGVyLmRlbGVnYXRlO1xuICAgICAgICByZXR1cm4gKChkZWxlZ2F0ZSA9PT0gbnVsbCB8fCBkZWxlZ2F0ZSA9PT0gdm9pZCAwID8gdm9pZCAwIDogZGVsZWdhdGUuc2V0SW1tZWRpYXRlKSB8fCBzZXRJbW1lZGlhdGUpLmFwcGx5KHZvaWQgMCwgX19zcHJlYWRBcnJheShbXSwgX19yZWFkKGFyZ3MpKSk7XG4gICAgfSxcbiAgICBjbGVhckltbWVkaWF0ZTogZnVuY3Rpb24gKGhhbmRsZSkge1xuICAgICAgICB2YXIgZGVsZWdhdGUgPSBleHBvcnRzLmltbWVkaWF0ZVByb3ZpZGVyLmRlbGVnYXRlO1xuICAgICAgICByZXR1cm4gKChkZWxlZ2F0ZSA9PT0gbnVsbCB8fCBkZWxlZ2F0ZSA9PT0gdm9pZCAwID8gdm9pZCAwIDogZGVsZWdhdGUuY2xlYXJJbW1lZGlhdGUpIHx8IGNsZWFySW1tZWRpYXRlKShoYW5kbGUpO1xuICAgIH0sXG4gICAgZGVsZWdhdGU6IHVuZGVmaW5lZCxcbn07XG4vLyMgc291cmNlTWFwcGluZ1VSTD1pbW1lZGlhdGVQcm92aWRlci5qcy5tYXAiLCJcInVzZSBzdHJpY3RcIjtcbnZhciBfX3JlYWQgPSAodGhpcyAmJiB0aGlzLl9fcmVhZCkgfHwgZnVuY3Rpb24gKG8sIG4pIHtcbiAgICB2YXIgbSA9IHR5cGVvZiBTeW1ib2wgPT09IFwiZnVuY3Rpb25cIiAmJiBvW1N5bWJvbC5pdGVyYXRvcl07XG4gICAgaWYgKCFtKSByZXR1cm4gbztcbiAgICB2YXIgaSA9IG0uY2FsbChvKSwgciwgYXIgPSBbXSwgZTtcbiAgICB0cnkge1xuICAgICAgICB3aGlsZSAoKG4gPT09IHZvaWQgMCB8fCBuLS0gPiAwKSAmJiAhKHIgPSBpLm5leHQoKSkuZG9uZSkgYXIucHVzaChyLnZhbHVlKTtcbiAgICB9XG4gICAgY2F0Y2ggKGVycm9yKSB7IGUgPSB7IGVycm9yOiBlcnJvciB9OyB9XG4gICAgZmluYWxseSB7XG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgICBpZiAociAmJiAhci5kb25lICYmIChtID0gaVtcInJldHVyblwiXSkpIG0uY2FsbChpKTtcbiAgICAgICAgfVxuICAgICAgICBmaW5hbGx5IHsgaWYgKGUpIHRocm93IGUuZXJyb3I7IH1cbiAgICB9XG4gICAgcmV0dXJuIGFyO1xufTtcbnZhciBfX3NwcmVhZEFycmF5ID0gKHRoaXMgJiYgdGhpcy5fX3NwcmVhZEFycmF5KSB8fCBmdW5jdGlvbiAodG8sIGZyb20pIHtcbiAgICBmb3IgKHZhciBpID0gMCwgaWwgPSBmcm9tLmxlbmd0aCwgaiA9IHRvLmxlbmd0aDsgaSA8IGlsOyBpKyssIGorKylcbiAgICAgICAgdG9bal0gPSBmcm9tW2ldO1xuICAgIHJldHVybiB0bztcbn07XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5leHBvcnRzLmludGVydmFsUHJvdmlkZXIgPSB2b2lkIDA7XG5leHBvcnRzLmludGVydmFsUHJvdmlkZXIgPSB7XG4gICAgc2V0SW50ZXJ2YWw6IGZ1bmN0aW9uIChoYW5kbGVyLCB0aW1lb3V0KSB7XG4gICAgICAgIHZhciBhcmdzID0gW107XG4gICAgICAgIGZvciAodmFyIF9pID0gMjsgX2kgPCBhcmd1bWVudHMubGVuZ3RoOyBfaSsrKSB7XG4gICAgICAgICAgICBhcmdzW19pIC0gMl0gPSBhcmd1bWVudHNbX2ldO1xuICAgICAgICB9XG4gICAgICAgIHZhciBkZWxlZ2F0ZSA9IGV4cG9ydHMuaW50ZXJ2YWxQcm92aWRlci5kZWxlZ2F0ZTtcbiAgICAgICAgaWYgKGRlbGVnYXRlID09PSBudWxsIHx8IGRlbGVnYXRlID09PSB2b2lkIDAgPyB2b2lkIDAgOiBkZWxlZ2F0ZS5zZXRJbnRlcnZhbCkge1xuICAgICAgICAgICAgcmV0dXJuIGRlbGVnYXRlLnNldEludGVydmFsLmFwcGx5KGRlbGVnYXRlLCBfX3NwcmVhZEFycmF5KFtoYW5kbGVyLCB0aW1lb3V0XSwgX19yZWFkKGFyZ3MpKSk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHNldEludGVydmFsLmFwcGx5KHZvaWQgMCwgX19zcHJlYWRBcnJheShbaGFuZGxlciwgdGltZW91dF0sIF9fcmVhZChhcmdzKSkpO1xuICAgIH0sXG4gICAgY2xlYXJJbnRlcnZhbDogZnVuY3Rpb24gKGhhbmRsZSkge1xuICAgICAgICB2YXIgZGVsZWdhdGUgPSBleHBvcnRzLmludGVydmFsUHJvdmlkZXIuZGVsZWdhdGU7XG4gICAgICAgIHJldHVybiAoKGRlbGVnYXRlID09PSBudWxsIHx8IGRlbGVnYXRlID09PSB2b2lkIDAgPyB2b2lkIDAgOiBkZWxlZ2F0ZS5jbGVhckludGVydmFsKSB8fCBjbGVhckludGVydmFsKShoYW5kbGUpO1xuICAgIH0sXG4gICAgZGVsZWdhdGU6IHVuZGVmaW5lZCxcbn07XG4vLyMgc291cmNlTWFwcGluZ1VSTD1pbnRlcnZhbFByb3ZpZGVyLmpzLm1hcCIsIlwidXNlIHN0cmljdFwiO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuZXhwb3J0cy5wZXJmb3JtYW5jZVRpbWVzdGFtcFByb3ZpZGVyID0gdm9pZCAwO1xuZXhwb3J0cy5wZXJmb3JtYW5jZVRpbWVzdGFtcFByb3ZpZGVyID0ge1xuICAgIG5vdzogZnVuY3Rpb24gKCkge1xuICAgICAgICByZXR1cm4gKGV4cG9ydHMucGVyZm9ybWFuY2VUaW1lc3RhbXBQcm92aWRlci5kZWxlZ2F0ZSB8fCBwZXJmb3JtYW5jZSkubm93KCk7XG4gICAgfSxcbiAgICBkZWxlZ2F0ZTogdW5kZWZpbmVkLFxufTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPXBlcmZvcm1hbmNlVGltZXN0YW1wUHJvdmlkZXIuanMubWFwIiwiXCJ1c2Ugc3RyaWN0XCI7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5leHBvcnRzLnF1ZXVlID0gZXhwb3J0cy5xdWV1ZVNjaGVkdWxlciA9IHZvaWQgMDtcbnZhciBRdWV1ZUFjdGlvbl8xID0gcmVxdWlyZShcIi4vUXVldWVBY3Rpb25cIik7XG52YXIgUXVldWVTY2hlZHVsZXJfMSA9IHJlcXVpcmUoXCIuL1F1ZXVlU2NoZWR1bGVyXCIpO1xuZXhwb3J0cy5xdWV1ZVNjaGVkdWxlciA9IG5ldyBRdWV1ZVNjaGVkdWxlcl8xLlF1ZXVlU2NoZWR1bGVyKFF1ZXVlQWN0aW9uXzEuUXVldWVBY3Rpb24pO1xuZXhwb3J0cy5xdWV1ZSA9IGV4cG9ydHMucXVldWVTY2hlZHVsZXI7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1xdWV1ZS5qcy5tYXAiLCJcInVzZSBzdHJpY3RcIjtcbnZhciBfX3JlYWQgPSAodGhpcyAmJiB0aGlzLl9fcmVhZCkgfHwgZnVuY3Rpb24gKG8sIG4pIHtcbiAgICB2YXIgbSA9IHR5cGVvZiBTeW1ib2wgPT09IFwiZnVuY3Rpb25cIiAmJiBvW1N5bWJvbC5pdGVyYXRvcl07XG4gICAgaWYgKCFtKSByZXR1cm4gbztcbiAgICB2YXIgaSA9IG0uY2FsbChvKSwgciwgYXIgPSBbXSwgZTtcbiAgICB0cnkge1xuICAgICAgICB3aGlsZSAoKG4gPT09IHZvaWQgMCB8fCBuLS0gPiAwKSAmJiAhKHIgPSBpLm5leHQoKSkuZG9uZSkgYXIucHVzaChyLnZhbHVlKTtcbiAgICB9XG4gICAgY2F0Y2ggKGVycm9yKSB7IGUgPSB7IGVycm9yOiBlcnJvciB9OyB9XG4gICAgZmluYWxseSB7XG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgICBpZiAociAmJiAhci5kb25lICYmIChtID0gaVtcInJldHVyblwiXSkpIG0uY2FsbChpKTtcbiAgICAgICAgfVxuICAgICAgICBmaW5hbGx5IHsgaWYgKGUpIHRocm93IGUuZXJyb3I7IH1cbiAgICB9XG4gICAgcmV0dXJuIGFyO1xufTtcbnZhciBfX3NwcmVhZEFycmF5ID0gKHRoaXMgJiYgdGhpcy5fX3NwcmVhZEFycmF5KSB8fCBmdW5jdGlvbiAodG8sIGZyb20pIHtcbiAgICBmb3IgKHZhciBpID0gMCwgaWwgPSBmcm9tLmxlbmd0aCwgaiA9IHRvLmxlbmd0aDsgaSA8IGlsOyBpKyssIGorKylcbiAgICAgICAgdG9bal0gPSBmcm9tW2ldO1xuICAgIHJldHVybiB0bztcbn07XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5leHBvcnRzLnRpbWVvdXRQcm92aWRlciA9IHZvaWQgMDtcbmV4cG9ydHMudGltZW91dFByb3ZpZGVyID0ge1xuICAgIHNldFRpbWVvdXQ6IGZ1bmN0aW9uIChoYW5kbGVyLCB0aW1lb3V0KSB7XG4gICAgICAgIHZhciBhcmdzID0gW107XG4gICAgICAgIGZvciAodmFyIF9pID0gMjsgX2kgPCBhcmd1bWVudHMubGVuZ3RoOyBfaSsrKSB7XG4gICAgICAgICAgICBhcmdzW19pIC0gMl0gPSBhcmd1bWVudHNbX2ldO1xuICAgICAgICB9XG4gICAgICAgIHZhciBkZWxlZ2F0ZSA9IGV4cG9ydHMudGltZW91dFByb3ZpZGVyLmRlbGVnYXRlO1xuICAgICAgICBpZiAoZGVsZWdhdGUgPT09IG51bGwgfHwgZGVsZWdhdGUgPT09IHZvaWQgMCA/IHZvaWQgMCA6IGRlbGVnYXRlLnNldFRpbWVvdXQpIHtcbiAgICAgICAgICAgIHJldHVybiBkZWxlZ2F0ZS5zZXRUaW1lb3V0LmFwcGx5KGRlbGVnYXRlLCBfX3NwcmVhZEFycmF5KFtoYW5kbGVyLCB0aW1lb3V0XSwgX19yZWFkKGFyZ3MpKSk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHNldFRpbWVvdXQuYXBwbHkodm9pZCAwLCBfX3NwcmVhZEFycmF5KFtoYW5kbGVyLCB0aW1lb3V0XSwgX19yZWFkKGFyZ3MpKSk7XG4gICAgfSxcbiAgICBjbGVhclRpbWVvdXQ6IGZ1bmN0aW9uIChoYW5kbGUpIHtcbiAgICAgICAgdmFyIGRlbGVnYXRlID0gZXhwb3J0cy50aW1lb3V0UHJvdmlkZXIuZGVsZWdhdGU7XG4gICAgICAgIHJldHVybiAoKGRlbGVnYXRlID09PSBudWxsIHx8IGRlbGVnYXRlID09PSB2b2lkIDAgPyB2b2lkIDAgOiBkZWxlZ2F0ZS5jbGVhclRpbWVvdXQpIHx8IGNsZWFyVGltZW91dCkoaGFuZGxlKTtcbiAgICB9LFxuICAgIGRlbGVnYXRlOiB1bmRlZmluZWQsXG59O1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9dGltZW91dFByb3ZpZGVyLmpzLm1hcCIsIlwidXNlIHN0cmljdFwiO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuZXhwb3J0cy5pdGVyYXRvciA9IGV4cG9ydHMuZ2V0U3ltYm9sSXRlcmF0b3IgPSB2b2lkIDA7XG5mdW5jdGlvbiBnZXRTeW1ib2xJdGVyYXRvcigpIHtcbiAgICBpZiAodHlwZW9mIFN5bWJvbCAhPT0gJ2Z1bmN0aW9uJyB8fCAhU3ltYm9sLml0ZXJhdG9yKSB7XG4gICAgICAgIHJldHVybiAnQEBpdGVyYXRvcic7XG4gICAgfVxuICAgIHJldHVybiBTeW1ib2wuaXRlcmF0b3I7XG59XG5leHBvcnRzLmdldFN5bWJvbEl0ZXJhdG9yID0gZ2V0U3ltYm9sSXRlcmF0b3I7XG5leHBvcnRzLml0ZXJhdG9yID0gZ2V0U3ltYm9sSXRlcmF0b3IoKTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWl0ZXJhdG9yLmpzLm1hcCIsIlwidXNlIHN0cmljdFwiO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuZXhwb3J0cy5vYnNlcnZhYmxlID0gdm9pZCAwO1xuZXhwb3J0cy5vYnNlcnZhYmxlID0gKGZ1bmN0aW9uICgpIHsgcmV0dXJuICh0eXBlb2YgU3ltYm9sID09PSAnZnVuY3Rpb24nICYmIFN5bWJvbC5vYnNlcnZhYmxlKSB8fCAnQEBvYnNlcnZhYmxlJzsgfSkoKTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPW9ic2VydmFibGUuanMubWFwIiwiXCJ1c2Ugc3RyaWN0XCI7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG4vLyMgc291cmNlTWFwcGluZ1VSTD10eXBlcy5qcy5tYXAiLCJcInVzZSBzdHJpY3RcIjtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmV4cG9ydHMuQXJndW1lbnRPdXRPZlJhbmdlRXJyb3IgPSB2b2lkIDA7XG52YXIgY3JlYXRlRXJyb3JDbGFzc18xID0gcmVxdWlyZShcIi4vY3JlYXRlRXJyb3JDbGFzc1wiKTtcbmV4cG9ydHMuQXJndW1lbnRPdXRPZlJhbmdlRXJyb3IgPSBjcmVhdGVFcnJvckNsYXNzXzEuY3JlYXRlRXJyb3JDbGFzcyhmdW5jdGlvbiAoX3N1cGVyKSB7XG4gICAgcmV0dXJuIGZ1bmN0aW9uIEFyZ3VtZW50T3V0T2ZSYW5nZUVycm9ySW1wbCgpIHtcbiAgICAgICAgX3N1cGVyKHRoaXMpO1xuICAgICAgICB0aGlzLm5hbWUgPSAnQXJndW1lbnRPdXRPZlJhbmdlRXJyb3InO1xuICAgICAgICB0aGlzLm1lc3NhZ2UgPSAnYXJndW1lbnQgb3V0IG9mIHJhbmdlJztcbiAgICB9O1xufSk7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1Bcmd1bWVudE91dE9mUmFuZ2VFcnJvci5qcy5tYXAiLCJcInVzZSBzdHJpY3RcIjtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmV4cG9ydHMuRW1wdHlFcnJvciA9IHZvaWQgMDtcbnZhciBjcmVhdGVFcnJvckNsYXNzXzEgPSByZXF1aXJlKFwiLi9jcmVhdGVFcnJvckNsYXNzXCIpO1xuZXhwb3J0cy5FbXB0eUVycm9yID0gY3JlYXRlRXJyb3JDbGFzc18xLmNyZWF0ZUVycm9yQ2xhc3MoZnVuY3Rpb24gKF9zdXBlcikgeyByZXR1cm4gZnVuY3Rpb24gRW1wdHlFcnJvckltcGwoKSB7XG4gICAgX3N1cGVyKHRoaXMpO1xuICAgIHRoaXMubmFtZSA9ICdFbXB0eUVycm9yJztcbiAgICB0aGlzLm1lc3NhZ2UgPSAnbm8gZWxlbWVudHMgaW4gc2VxdWVuY2UnO1xufTsgfSk7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1FbXB0eUVycm9yLmpzLm1hcCIsIlwidXNlIHN0cmljdFwiO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuZXhwb3J0cy5UZXN0VG9vbHMgPSBleHBvcnRzLkltbWVkaWF0ZSA9IHZvaWQgMDtcbnZhciBuZXh0SGFuZGxlID0gMTtcbnZhciByZXNvbHZlZDtcbnZhciBhY3RpdmVIYW5kbGVzID0ge307XG5mdW5jdGlvbiBmaW5kQW5kQ2xlYXJIYW5kbGUoaGFuZGxlKSB7XG4gICAgaWYgKGhhbmRsZSBpbiBhY3RpdmVIYW5kbGVzKSB7XG4gICAgICAgIGRlbGV0ZSBhY3RpdmVIYW5kbGVzW2hhbmRsZV07XG4gICAgICAgIHJldHVybiB0cnVlO1xuICAgIH1cbiAgICByZXR1cm4gZmFsc2U7XG59XG5leHBvcnRzLkltbWVkaWF0ZSA9IHtcbiAgICBzZXRJbW1lZGlhdGU6IGZ1bmN0aW9uIChjYikge1xuICAgICAgICB2YXIgaGFuZGxlID0gbmV4dEhhbmRsZSsrO1xuICAgICAgICBhY3RpdmVIYW5kbGVzW2hhbmRsZV0gPSB0cnVlO1xuICAgICAgICBpZiAoIXJlc29sdmVkKSB7XG4gICAgICAgICAgICByZXNvbHZlZCA9IFByb21pc2UucmVzb2x2ZSgpO1xuICAgICAgICB9XG4gICAgICAgIHJlc29sdmVkLnRoZW4oZnVuY3Rpb24gKCkgeyByZXR1cm4gZmluZEFuZENsZWFySGFuZGxlKGhhbmRsZSkgJiYgY2IoKTsgfSk7XG4gICAgICAgIHJldHVybiBoYW5kbGU7XG4gICAgfSxcbiAgICBjbGVhckltbWVkaWF0ZTogZnVuY3Rpb24gKGhhbmRsZSkge1xuICAgICAgICBmaW5kQW5kQ2xlYXJIYW5kbGUoaGFuZGxlKTtcbiAgICB9LFxufTtcbmV4cG9ydHMuVGVzdFRvb2xzID0ge1xuICAgIHBlbmRpbmc6IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgcmV0dXJuIE9iamVjdC5rZXlzKGFjdGl2ZUhhbmRsZXMpLmxlbmd0aDtcbiAgICB9XG59O1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9SW1tZWRpYXRlLmpzLm1hcCIsIlwidXNlIHN0cmljdFwiO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuZXhwb3J0cy5Ob3RGb3VuZEVycm9yID0gdm9pZCAwO1xudmFyIGNyZWF0ZUVycm9yQ2xhc3NfMSA9IHJlcXVpcmUoXCIuL2NyZWF0ZUVycm9yQ2xhc3NcIik7XG5leHBvcnRzLk5vdEZvdW5kRXJyb3IgPSBjcmVhdGVFcnJvckNsYXNzXzEuY3JlYXRlRXJyb3JDbGFzcyhmdW5jdGlvbiAoX3N1cGVyKSB7XG4gICAgcmV0dXJuIGZ1bmN0aW9uIE5vdEZvdW5kRXJyb3JJbXBsKG1lc3NhZ2UpIHtcbiAgICAgICAgX3N1cGVyKHRoaXMpO1xuICAgICAgICB0aGlzLm5hbWUgPSAnTm90Rm91bmRFcnJvcic7XG4gICAgICAgIHRoaXMubWVzc2FnZSA9IG1lc3NhZ2U7XG4gICAgfTtcbn0pO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9Tm90Rm91bmRFcnJvci5qcy5tYXAiLCJcInVzZSBzdHJpY3RcIjtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmV4cG9ydHMuT2JqZWN0VW5zdWJzY3JpYmVkRXJyb3IgPSB2b2lkIDA7XG52YXIgY3JlYXRlRXJyb3JDbGFzc18xID0gcmVxdWlyZShcIi4vY3JlYXRlRXJyb3JDbGFzc1wiKTtcbmV4cG9ydHMuT2JqZWN0VW5zdWJzY3JpYmVkRXJyb3IgPSBjcmVhdGVFcnJvckNsYXNzXzEuY3JlYXRlRXJyb3JDbGFzcyhmdW5jdGlvbiAoX3N1cGVyKSB7XG4gICAgcmV0dXJuIGZ1bmN0aW9uIE9iamVjdFVuc3Vic2NyaWJlZEVycm9ySW1wbCgpIHtcbiAgICAgICAgX3N1cGVyKHRoaXMpO1xuICAgICAgICB0aGlzLm5hbWUgPSAnT2JqZWN0VW5zdWJzY3JpYmVkRXJyb3InO1xuICAgICAgICB0aGlzLm1lc3NhZ2UgPSAnb2JqZWN0IHVuc3Vic2NyaWJlZCc7XG4gICAgfTtcbn0pO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9T2JqZWN0VW5zdWJzY3JpYmVkRXJyb3IuanMubWFwIiwiXCJ1c2Ugc3RyaWN0XCI7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5leHBvcnRzLlNlcXVlbmNlRXJyb3IgPSB2b2lkIDA7XG52YXIgY3JlYXRlRXJyb3JDbGFzc18xID0gcmVxdWlyZShcIi4vY3JlYXRlRXJyb3JDbGFzc1wiKTtcbmV4cG9ydHMuU2VxdWVuY2VFcnJvciA9IGNyZWF0ZUVycm9yQ2xhc3NfMS5jcmVhdGVFcnJvckNsYXNzKGZ1bmN0aW9uIChfc3VwZXIpIHtcbiAgICByZXR1cm4gZnVuY3Rpb24gU2VxdWVuY2VFcnJvckltcGwobWVzc2FnZSkge1xuICAgICAgICBfc3VwZXIodGhpcyk7XG4gICAgICAgIHRoaXMubmFtZSA9ICdTZXF1ZW5jZUVycm9yJztcbiAgICAgICAgdGhpcy5tZXNzYWdlID0gbWVzc2FnZTtcbiAgICB9O1xufSk7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1TZXF1ZW5jZUVycm9yLmpzLm1hcCIsIlwidXNlIHN0cmljdFwiO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuZXhwb3J0cy5VbnN1YnNjcmlwdGlvbkVycm9yID0gdm9pZCAwO1xudmFyIGNyZWF0ZUVycm9yQ2xhc3NfMSA9IHJlcXVpcmUoXCIuL2NyZWF0ZUVycm9yQ2xhc3NcIik7XG5leHBvcnRzLlVuc3Vic2NyaXB0aW9uRXJyb3IgPSBjcmVhdGVFcnJvckNsYXNzXzEuY3JlYXRlRXJyb3JDbGFzcyhmdW5jdGlvbiAoX3N1cGVyKSB7XG4gICAgcmV0dXJuIGZ1bmN0aW9uIFVuc3Vic2NyaXB0aW9uRXJyb3JJbXBsKGVycm9ycykge1xuICAgICAgICBfc3VwZXIodGhpcyk7XG4gICAgICAgIHRoaXMubWVzc2FnZSA9IGVycm9yc1xuICAgICAgICAgICAgPyBlcnJvcnMubGVuZ3RoICsgXCIgZXJyb3JzIG9jY3VycmVkIGR1cmluZyB1bnN1YnNjcmlwdGlvbjpcXG5cIiArIGVycm9ycy5tYXAoZnVuY3Rpb24gKGVyciwgaSkgeyByZXR1cm4gaSArIDEgKyBcIikgXCIgKyBlcnIudG9TdHJpbmcoKTsgfSkuam9pbignXFxuICAnKVxuICAgICAgICAgICAgOiAnJztcbiAgICAgICAgdGhpcy5uYW1lID0gJ1Vuc3Vic2NyaXB0aW9uRXJyb3InO1xuICAgICAgICB0aGlzLmVycm9ycyA9IGVycm9ycztcbiAgICB9O1xufSk7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1VbnN1YnNjcmlwdGlvbkVycm9yLmpzLm1hcCIsIlwidXNlIHN0cmljdFwiO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuZXhwb3J0cy5wb3BOdW1iZXIgPSBleHBvcnRzLnBvcFNjaGVkdWxlciA9IGV4cG9ydHMucG9wUmVzdWx0U2VsZWN0b3IgPSB2b2lkIDA7XG52YXIgaXNGdW5jdGlvbl8xID0gcmVxdWlyZShcIi4vaXNGdW5jdGlvblwiKTtcbnZhciBpc1NjaGVkdWxlcl8xID0gcmVxdWlyZShcIi4vaXNTY2hlZHVsZXJcIik7XG5mdW5jdGlvbiBsYXN0KGFycikge1xuICAgIHJldHVybiBhcnJbYXJyLmxlbmd0aCAtIDFdO1xufVxuZnVuY3Rpb24gcG9wUmVzdWx0U2VsZWN0b3IoYXJncykge1xuICAgIHJldHVybiBpc0Z1bmN0aW9uXzEuaXNGdW5jdGlvbihsYXN0KGFyZ3MpKSA/IGFyZ3MucG9wKCkgOiB1bmRlZmluZWQ7XG59XG5leHBvcnRzLnBvcFJlc3VsdFNlbGVjdG9yID0gcG9wUmVzdWx0U2VsZWN0b3I7XG5mdW5jdGlvbiBwb3BTY2hlZHVsZXIoYXJncykge1xuICAgIHJldHVybiBpc1NjaGVkdWxlcl8xLmlzU2NoZWR1bGVyKGxhc3QoYXJncykpID8gYXJncy5wb3AoKSA6IHVuZGVmaW5lZDtcbn1cbmV4cG9ydHMucG9wU2NoZWR1bGVyID0gcG9wU2NoZWR1bGVyO1xuZnVuY3Rpb24gcG9wTnVtYmVyKGFyZ3MsIGRlZmF1bHRWYWx1ZSkge1xuICAgIHJldHVybiB0eXBlb2YgbGFzdChhcmdzKSA9PT0gJ251bWJlcicgPyBhcmdzLnBvcCgpIDogZGVmYXVsdFZhbHVlO1xufVxuZXhwb3J0cy5wb3BOdW1iZXIgPSBwb3BOdW1iZXI7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1hcmdzLmpzLm1hcCIsIlwidXNlIHN0cmljdFwiO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuZXhwb3J0cy5hcmdzQXJnQXJyYXlPck9iamVjdCA9IHZvaWQgMDtcbnZhciBpc0FycmF5ID0gQXJyYXkuaXNBcnJheTtcbnZhciBnZXRQcm90b3R5cGVPZiA9IE9iamVjdC5nZXRQcm90b3R5cGVPZiwgb2JqZWN0UHJvdG8gPSBPYmplY3QucHJvdG90eXBlLCBnZXRLZXlzID0gT2JqZWN0LmtleXM7XG5mdW5jdGlvbiBhcmdzQXJnQXJyYXlPck9iamVjdChhcmdzKSB7XG4gICAgaWYgKGFyZ3MubGVuZ3RoID09PSAxKSB7XG4gICAgICAgIHZhciBmaXJzdF8xID0gYXJnc1swXTtcbiAgICAgICAgaWYgKGlzQXJyYXkoZmlyc3RfMSkpIHtcbiAgICAgICAgICAgIHJldHVybiB7IGFyZ3M6IGZpcnN0XzEsIGtleXM6IG51bGwgfTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoaXNQT0pPKGZpcnN0XzEpKSB7XG4gICAgICAgICAgICB2YXIga2V5cyA9IGdldEtleXMoZmlyc3RfMSk7XG4gICAgICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgICAgIGFyZ3M6IGtleXMubWFwKGZ1bmN0aW9uIChrZXkpIHsgcmV0dXJuIGZpcnN0XzFba2V5XTsgfSksXG4gICAgICAgICAgICAgICAga2V5czoga2V5cyxcbiAgICAgICAgICAgIH07XG4gICAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIHsgYXJnczogYXJncywga2V5czogbnVsbCB9O1xufVxuZXhwb3J0cy5hcmdzQXJnQXJyYXlPck9iamVjdCA9IGFyZ3NBcmdBcnJheU9yT2JqZWN0O1xuZnVuY3Rpb24gaXNQT0pPKG9iaikge1xuICAgIHJldHVybiBvYmogJiYgdHlwZW9mIG9iaiA9PT0gJ29iamVjdCcgJiYgZ2V0UHJvdG90eXBlT2Yob2JqKSA9PT0gb2JqZWN0UHJvdG87XG59XG4vLyMgc291cmNlTWFwcGluZ1VSTD1hcmdzQXJnQXJyYXlPck9iamVjdC5qcy5tYXAiLCJcInVzZSBzdHJpY3RcIjtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmV4cG9ydHMuYXJnc09yQXJnQXJyYXkgPSB2b2lkIDA7XG52YXIgaXNBcnJheSA9IEFycmF5LmlzQXJyYXk7XG5mdW5jdGlvbiBhcmdzT3JBcmdBcnJheShhcmdzKSB7XG4gICAgcmV0dXJuIGFyZ3MubGVuZ3RoID09PSAxICYmIGlzQXJyYXkoYXJnc1swXSkgPyBhcmdzWzBdIDogYXJncztcbn1cbmV4cG9ydHMuYXJnc09yQXJnQXJyYXkgPSBhcmdzT3JBcmdBcnJheTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWFyZ3NPckFyZ0FycmF5LmpzLm1hcCIsIlwidXNlIHN0cmljdFwiO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuZXhwb3J0cy5hcnJSZW1vdmUgPSB2b2lkIDA7XG5mdW5jdGlvbiBhcnJSZW1vdmUoYXJyLCBpdGVtKSB7XG4gICAgaWYgKGFycikge1xuICAgICAgICB2YXIgaW5kZXggPSBhcnIuaW5kZXhPZihpdGVtKTtcbiAgICAgICAgMCA8PSBpbmRleCAmJiBhcnIuc3BsaWNlKGluZGV4LCAxKTtcbiAgICB9XG59XG5leHBvcnRzLmFyclJlbW92ZSA9IGFyclJlbW92ZTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWFyclJlbW92ZS5qcy5tYXAiLCJcInVzZSBzdHJpY3RcIjtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmV4cG9ydHMuY3JlYXRlRXJyb3JDbGFzcyA9IHZvaWQgMDtcbmZ1bmN0aW9uIGNyZWF0ZUVycm9yQ2xhc3MoY3JlYXRlSW1wbCkge1xuICAgIHZhciBfc3VwZXIgPSBmdW5jdGlvbiAoaW5zdGFuY2UpIHtcbiAgICAgICAgRXJyb3IuY2FsbChpbnN0YW5jZSk7XG4gICAgICAgIGluc3RhbmNlLnN0YWNrID0gbmV3IEVycm9yKCkuc3RhY2s7XG4gICAgfTtcbiAgICB2YXIgY3RvckZ1bmMgPSBjcmVhdGVJbXBsKF9zdXBlcik7XG4gICAgY3RvckZ1bmMucHJvdG90eXBlID0gT2JqZWN0LmNyZWF0ZShFcnJvci5wcm90b3R5cGUpO1xuICAgIGN0b3JGdW5jLnByb3RvdHlwZS5jb25zdHJ1Y3RvciA9IGN0b3JGdW5jO1xuICAgIHJldHVybiBjdG9yRnVuYztcbn1cbmV4cG9ydHMuY3JlYXRlRXJyb3JDbGFzcyA9IGNyZWF0ZUVycm9yQ2xhc3M7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1jcmVhdGVFcnJvckNsYXNzLmpzLm1hcCIsIlwidXNlIHN0cmljdFwiO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuZXhwb3J0cy5jcmVhdGVPYmplY3QgPSB2b2lkIDA7XG5mdW5jdGlvbiBjcmVhdGVPYmplY3Qoa2V5cywgdmFsdWVzKSB7XG4gICAgcmV0dXJuIGtleXMucmVkdWNlKGZ1bmN0aW9uIChyZXN1bHQsIGtleSwgaSkgeyByZXR1cm4gKChyZXN1bHRba2V5XSA9IHZhbHVlc1tpXSksIHJlc3VsdCk7IH0sIHt9KTtcbn1cbmV4cG9ydHMuY3JlYXRlT2JqZWN0ID0gY3JlYXRlT2JqZWN0O1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9Y3JlYXRlT2JqZWN0LmpzLm1hcCIsIlwidXNlIHN0cmljdFwiO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuZXhwb3J0cy5jYXB0dXJlRXJyb3IgPSBleHBvcnRzLmVycm9yQ29udGV4dCA9IHZvaWQgMDtcbnZhciBjb25maWdfMSA9IHJlcXVpcmUoXCIuLi9jb25maWdcIik7XG52YXIgY29udGV4dCA9IG51bGw7XG5mdW5jdGlvbiBlcnJvckNvbnRleHQoY2IpIHtcbiAgICBpZiAoY29uZmlnXzEuY29uZmlnLnVzZURlcHJlY2F0ZWRTeW5jaHJvbm91c0Vycm9ySGFuZGxpbmcpIHtcbiAgICAgICAgdmFyIGlzUm9vdCA9ICFjb250ZXh0O1xuICAgICAgICBpZiAoaXNSb290KSB7XG4gICAgICAgICAgICBjb250ZXh0ID0geyBlcnJvclRocm93bjogZmFsc2UsIGVycm9yOiBudWxsIH07XG4gICAgICAgIH1cbiAgICAgICAgY2IoKTtcbiAgICAgICAgaWYgKGlzUm9vdCkge1xuICAgICAgICAgICAgdmFyIF9hID0gY29udGV4dCwgZXJyb3JUaHJvd24gPSBfYS5lcnJvclRocm93biwgZXJyb3IgPSBfYS5lcnJvcjtcbiAgICAgICAgICAgIGNvbnRleHQgPSBudWxsO1xuICAgICAgICAgICAgaWYgKGVycm9yVGhyb3duKSB7XG4gICAgICAgICAgICAgICAgdGhyb3cgZXJyb3I7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9XG4gICAgZWxzZSB7XG4gICAgICAgIGNiKCk7XG4gICAgfVxufVxuZXhwb3J0cy5lcnJvckNvbnRleHQgPSBlcnJvckNvbnRleHQ7XG5mdW5jdGlvbiBjYXB0dXJlRXJyb3IoZXJyKSB7XG4gICAgaWYgKGNvbmZpZ18xLmNvbmZpZy51c2VEZXByZWNhdGVkU3luY2hyb25vdXNFcnJvckhhbmRsaW5nICYmIGNvbnRleHQpIHtcbiAgICAgICAgY29udGV4dC5lcnJvclRocm93biA9IHRydWU7XG4gICAgICAgIGNvbnRleHQuZXJyb3IgPSBlcnI7XG4gICAgfVxufVxuZXhwb3J0cy5jYXB0dXJlRXJyb3IgPSBjYXB0dXJlRXJyb3I7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1lcnJvckNvbnRleHQuanMubWFwIiwiXCJ1c2Ugc3RyaWN0XCI7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5leHBvcnRzLmV4ZWN1dGVTY2hlZHVsZSA9IHZvaWQgMDtcbmZ1bmN0aW9uIGV4ZWN1dGVTY2hlZHVsZShwYXJlbnRTdWJzY3JpcHRpb24sIHNjaGVkdWxlciwgd29yaywgZGVsYXksIHJlcGVhdCkge1xuICAgIGlmIChkZWxheSA9PT0gdm9pZCAwKSB7IGRlbGF5ID0gMDsgfVxuICAgIGlmIChyZXBlYXQgPT09IHZvaWQgMCkgeyByZXBlYXQgPSBmYWxzZTsgfVxuICAgIHZhciBzY2hlZHVsZVN1YnNjcmlwdGlvbiA9IHNjaGVkdWxlci5zY2hlZHVsZShmdW5jdGlvbiAoKSB7XG4gICAgICAgIHdvcmsoKTtcbiAgICAgICAgaWYgKHJlcGVhdCkge1xuICAgICAgICAgICAgcGFyZW50U3Vic2NyaXB0aW9uLmFkZCh0aGlzLnNjaGVkdWxlKG51bGwsIGRlbGF5KSk7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICB0aGlzLnVuc3Vic2NyaWJlKCk7XG4gICAgICAgIH1cbiAgICB9LCBkZWxheSk7XG4gICAgcGFyZW50U3Vic2NyaXB0aW9uLmFkZChzY2hlZHVsZVN1YnNjcmlwdGlvbik7XG4gICAgaWYgKCFyZXBlYXQpIHtcbiAgICAgICAgcmV0dXJuIHNjaGVkdWxlU3Vic2NyaXB0aW9uO1xuICAgIH1cbn1cbmV4cG9ydHMuZXhlY3V0ZVNjaGVkdWxlID0gZXhlY3V0ZVNjaGVkdWxlO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9ZXhlY3V0ZVNjaGVkdWxlLmpzLm1hcCIsIlwidXNlIHN0cmljdFwiO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuZXhwb3J0cy5pZGVudGl0eSA9IHZvaWQgMDtcbmZ1bmN0aW9uIGlkZW50aXR5KHgpIHtcbiAgICByZXR1cm4geDtcbn1cbmV4cG9ydHMuaWRlbnRpdHkgPSBpZGVudGl0eTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWlkZW50aXR5LmpzLm1hcCIsIlwidXNlIHN0cmljdFwiO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuZXhwb3J0cy5pc0FycmF5TGlrZSA9IHZvaWQgMDtcbmV4cG9ydHMuaXNBcnJheUxpa2UgPSAoZnVuY3Rpb24gKHgpIHsgcmV0dXJuIHggJiYgdHlwZW9mIHgubGVuZ3RoID09PSAnbnVtYmVyJyAmJiB0eXBlb2YgeCAhPT0gJ2Z1bmN0aW9uJzsgfSk7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1pc0FycmF5TGlrZS5qcy5tYXAiLCJcInVzZSBzdHJpY3RcIjtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmV4cG9ydHMuaXNBc3luY0l0ZXJhYmxlID0gdm9pZCAwO1xudmFyIGlzRnVuY3Rpb25fMSA9IHJlcXVpcmUoXCIuL2lzRnVuY3Rpb25cIik7XG5mdW5jdGlvbiBpc0FzeW5jSXRlcmFibGUob2JqKSB7XG4gICAgcmV0dXJuIFN5bWJvbC5hc3luY0l0ZXJhdG9yICYmIGlzRnVuY3Rpb25fMS5pc0Z1bmN0aW9uKG9iaiA9PT0gbnVsbCB8fCBvYmogPT09IHZvaWQgMCA/IHZvaWQgMCA6IG9ialtTeW1ib2wuYXN5bmNJdGVyYXRvcl0pO1xufVxuZXhwb3J0cy5pc0FzeW5jSXRlcmFibGUgPSBpc0FzeW5jSXRlcmFibGU7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1pc0FzeW5jSXRlcmFibGUuanMubWFwIiwiXCJ1c2Ugc3RyaWN0XCI7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5leHBvcnRzLmlzVmFsaWREYXRlID0gdm9pZCAwO1xuZnVuY3Rpb24gaXNWYWxpZERhdGUodmFsdWUpIHtcbiAgICByZXR1cm4gdmFsdWUgaW5zdGFuY2VvZiBEYXRlICYmICFpc05hTih2YWx1ZSk7XG59XG5leHBvcnRzLmlzVmFsaWREYXRlID0gaXNWYWxpZERhdGU7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1pc0RhdGUuanMubWFwIiwiXCJ1c2Ugc3RyaWN0XCI7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5leHBvcnRzLmlzRnVuY3Rpb24gPSB2b2lkIDA7XG5mdW5jdGlvbiBpc0Z1bmN0aW9uKHZhbHVlKSB7XG4gICAgcmV0dXJuIHR5cGVvZiB2YWx1ZSA9PT0gJ2Z1bmN0aW9uJztcbn1cbmV4cG9ydHMuaXNGdW5jdGlvbiA9IGlzRnVuY3Rpb247XG4vLyMgc291cmNlTWFwcGluZ1VSTD1pc0Z1bmN0aW9uLmpzLm1hcCIsIlwidXNlIHN0cmljdFwiO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuZXhwb3J0cy5pc0ludGVyb3BPYnNlcnZhYmxlID0gdm9pZCAwO1xudmFyIG9ic2VydmFibGVfMSA9IHJlcXVpcmUoXCIuLi9zeW1ib2wvb2JzZXJ2YWJsZVwiKTtcbnZhciBpc0Z1bmN0aW9uXzEgPSByZXF1aXJlKFwiLi9pc0Z1bmN0aW9uXCIpO1xuZnVuY3Rpb24gaXNJbnRlcm9wT2JzZXJ2YWJsZShpbnB1dCkge1xuICAgIHJldHVybiBpc0Z1bmN0aW9uXzEuaXNGdW5jdGlvbihpbnB1dFtvYnNlcnZhYmxlXzEub2JzZXJ2YWJsZV0pO1xufVxuZXhwb3J0cy5pc0ludGVyb3BPYnNlcnZhYmxlID0gaXNJbnRlcm9wT2JzZXJ2YWJsZTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWlzSW50ZXJvcE9ic2VydmFibGUuanMubWFwIiwiXCJ1c2Ugc3RyaWN0XCI7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5leHBvcnRzLmlzSXRlcmFibGUgPSB2b2lkIDA7XG52YXIgaXRlcmF0b3JfMSA9IHJlcXVpcmUoXCIuLi9zeW1ib2wvaXRlcmF0b3JcIik7XG52YXIgaXNGdW5jdGlvbl8xID0gcmVxdWlyZShcIi4vaXNGdW5jdGlvblwiKTtcbmZ1bmN0aW9uIGlzSXRlcmFibGUoaW5wdXQpIHtcbiAgICByZXR1cm4gaXNGdW5jdGlvbl8xLmlzRnVuY3Rpb24oaW5wdXQgPT09IG51bGwgfHwgaW5wdXQgPT09IHZvaWQgMCA/IHZvaWQgMCA6IGlucHV0W2l0ZXJhdG9yXzEuaXRlcmF0b3JdKTtcbn1cbmV4cG9ydHMuaXNJdGVyYWJsZSA9IGlzSXRlcmFibGU7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1pc0l0ZXJhYmxlLmpzLm1hcCIsIlwidXNlIHN0cmljdFwiO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuZXhwb3J0cy5pc09ic2VydmFibGUgPSB2b2lkIDA7XG52YXIgT2JzZXJ2YWJsZV8xID0gcmVxdWlyZShcIi4uL09ic2VydmFibGVcIik7XG52YXIgaXNGdW5jdGlvbl8xID0gcmVxdWlyZShcIi4vaXNGdW5jdGlvblwiKTtcbmZ1bmN0aW9uIGlzT2JzZXJ2YWJsZShvYmopIHtcbiAgICByZXR1cm4gISFvYmogJiYgKG9iaiBpbnN0YW5jZW9mIE9ic2VydmFibGVfMS5PYnNlcnZhYmxlIHx8IChpc0Z1bmN0aW9uXzEuaXNGdW5jdGlvbihvYmoubGlmdCkgJiYgaXNGdW5jdGlvbl8xLmlzRnVuY3Rpb24ob2JqLnN1YnNjcmliZSkpKTtcbn1cbmV4cG9ydHMuaXNPYnNlcnZhYmxlID0gaXNPYnNlcnZhYmxlO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9aXNPYnNlcnZhYmxlLmpzLm1hcCIsIlwidXNlIHN0cmljdFwiO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuZXhwb3J0cy5pc1Byb21pc2UgPSB2b2lkIDA7XG52YXIgaXNGdW5jdGlvbl8xID0gcmVxdWlyZShcIi4vaXNGdW5jdGlvblwiKTtcbmZ1bmN0aW9uIGlzUHJvbWlzZSh2YWx1ZSkge1xuICAgIHJldHVybiBpc0Z1bmN0aW9uXzEuaXNGdW5jdGlvbih2YWx1ZSA9PT0gbnVsbCB8fCB2YWx1ZSA9PT0gdm9pZCAwID8gdm9pZCAwIDogdmFsdWUudGhlbik7XG59XG5leHBvcnRzLmlzUHJvbWlzZSA9IGlzUHJvbWlzZTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWlzUHJvbWlzZS5qcy5tYXAiLCJcInVzZSBzdHJpY3RcIjtcbnZhciBfX2dlbmVyYXRvciA9ICh0aGlzICYmIHRoaXMuX19nZW5lcmF0b3IpIHx8IGZ1bmN0aW9uICh0aGlzQXJnLCBib2R5KSB7XG4gICAgdmFyIF8gPSB7IGxhYmVsOiAwLCBzZW50OiBmdW5jdGlvbigpIHsgaWYgKHRbMF0gJiAxKSB0aHJvdyB0WzFdOyByZXR1cm4gdFsxXTsgfSwgdHJ5czogW10sIG9wczogW10gfSwgZiwgeSwgdCwgZztcbiAgICByZXR1cm4gZyA9IHsgbmV4dDogdmVyYigwKSwgXCJ0aHJvd1wiOiB2ZXJiKDEpLCBcInJldHVyblwiOiB2ZXJiKDIpIH0sIHR5cGVvZiBTeW1ib2wgPT09IFwiZnVuY3Rpb25cIiAmJiAoZ1tTeW1ib2wuaXRlcmF0b3JdID0gZnVuY3Rpb24oKSB7IHJldHVybiB0aGlzOyB9KSwgZztcbiAgICBmdW5jdGlvbiB2ZXJiKG4pIHsgcmV0dXJuIGZ1bmN0aW9uICh2KSB7IHJldHVybiBzdGVwKFtuLCB2XSk7IH07IH1cbiAgICBmdW5jdGlvbiBzdGVwKG9wKSB7XG4gICAgICAgIGlmIChmKSB0aHJvdyBuZXcgVHlwZUVycm9yKFwiR2VuZXJhdG9yIGlzIGFscmVhZHkgZXhlY3V0aW5nLlwiKTtcbiAgICAgICAgd2hpbGUgKF8pIHRyeSB7XG4gICAgICAgICAgICBpZiAoZiA9IDEsIHkgJiYgKHQgPSBvcFswXSAmIDIgPyB5W1wicmV0dXJuXCJdIDogb3BbMF0gPyB5W1widGhyb3dcIl0gfHwgKCh0ID0geVtcInJldHVyblwiXSkgJiYgdC5jYWxsKHkpLCAwKSA6IHkubmV4dCkgJiYgISh0ID0gdC5jYWxsKHksIG9wWzFdKSkuZG9uZSkgcmV0dXJuIHQ7XG4gICAgICAgICAgICBpZiAoeSA9IDAsIHQpIG9wID0gW29wWzBdICYgMiwgdC52YWx1ZV07XG4gICAgICAgICAgICBzd2l0Y2ggKG9wWzBdKSB7XG4gICAgICAgICAgICAgICAgY2FzZSAwOiBjYXNlIDE6IHQgPSBvcDsgYnJlYWs7XG4gICAgICAgICAgICAgICAgY2FzZSA0OiBfLmxhYmVsKys7IHJldHVybiB7IHZhbHVlOiBvcFsxXSwgZG9uZTogZmFsc2UgfTtcbiAgICAgICAgICAgICAgICBjYXNlIDU6IF8ubGFiZWwrKzsgeSA9IG9wWzFdOyBvcCA9IFswXTsgY29udGludWU7XG4gICAgICAgICAgICAgICAgY2FzZSA3OiBvcCA9IF8ub3BzLnBvcCgpOyBfLnRyeXMucG9wKCk7IGNvbnRpbnVlO1xuICAgICAgICAgICAgICAgIGRlZmF1bHQ6XG4gICAgICAgICAgICAgICAgICAgIGlmICghKHQgPSBfLnRyeXMsIHQgPSB0Lmxlbmd0aCA+IDAgJiYgdFt0Lmxlbmd0aCAtIDFdKSAmJiAob3BbMF0gPT09IDYgfHwgb3BbMF0gPT09IDIpKSB7IF8gPSAwOyBjb250aW51ZTsgfVxuICAgICAgICAgICAgICAgICAgICBpZiAob3BbMF0gPT09IDMgJiYgKCF0IHx8IChvcFsxXSA+IHRbMF0gJiYgb3BbMV0gPCB0WzNdKSkpIHsgXy5sYWJlbCA9IG9wWzFdOyBicmVhazsgfVxuICAgICAgICAgICAgICAgICAgICBpZiAob3BbMF0gPT09IDYgJiYgXy5sYWJlbCA8IHRbMV0pIHsgXy5sYWJlbCA9IHRbMV07IHQgPSBvcDsgYnJlYWs7IH1cbiAgICAgICAgICAgICAgICAgICAgaWYgKHQgJiYgXy5sYWJlbCA8IHRbMl0pIHsgXy5sYWJlbCA9IHRbMl07IF8ub3BzLnB1c2gob3ApOyBicmVhazsgfVxuICAgICAgICAgICAgICAgICAgICBpZiAodFsyXSkgXy5vcHMucG9wKCk7XG4gICAgICAgICAgICAgICAgICAgIF8udHJ5cy5wb3AoKTsgY29udGludWU7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBvcCA9IGJvZHkuY2FsbCh0aGlzQXJnLCBfKTtcbiAgICAgICAgfSBjYXRjaCAoZSkgeyBvcCA9IFs2LCBlXTsgeSA9IDA7IH0gZmluYWxseSB7IGYgPSB0ID0gMDsgfVxuICAgICAgICBpZiAob3BbMF0gJiA1KSB0aHJvdyBvcFsxXTsgcmV0dXJuIHsgdmFsdWU6IG9wWzBdID8gb3BbMV0gOiB2b2lkIDAsIGRvbmU6IHRydWUgfTtcbiAgICB9XG59O1xudmFyIF9fYXdhaXQgPSAodGhpcyAmJiB0aGlzLl9fYXdhaXQpIHx8IGZ1bmN0aW9uICh2KSB7IHJldHVybiB0aGlzIGluc3RhbmNlb2YgX19hd2FpdCA/ICh0aGlzLnYgPSB2LCB0aGlzKSA6IG5ldyBfX2F3YWl0KHYpOyB9XG52YXIgX19hc3luY0dlbmVyYXRvciA9ICh0aGlzICYmIHRoaXMuX19hc3luY0dlbmVyYXRvcikgfHwgZnVuY3Rpb24gKHRoaXNBcmcsIF9hcmd1bWVudHMsIGdlbmVyYXRvcikge1xuICAgIGlmICghU3ltYm9sLmFzeW5jSXRlcmF0b3IpIHRocm93IG5ldyBUeXBlRXJyb3IoXCJTeW1ib2wuYXN5bmNJdGVyYXRvciBpcyBub3QgZGVmaW5lZC5cIik7XG4gICAgdmFyIGcgPSBnZW5lcmF0b3IuYXBwbHkodGhpc0FyZywgX2FyZ3VtZW50cyB8fCBbXSksIGksIHEgPSBbXTtcbiAgICByZXR1cm4gaSA9IHt9LCB2ZXJiKFwibmV4dFwiKSwgdmVyYihcInRocm93XCIpLCB2ZXJiKFwicmV0dXJuXCIpLCBpW1N5bWJvbC5hc3luY0l0ZXJhdG9yXSA9IGZ1bmN0aW9uICgpIHsgcmV0dXJuIHRoaXM7IH0sIGk7XG4gICAgZnVuY3Rpb24gdmVyYihuKSB7IGlmIChnW25dKSBpW25dID0gZnVuY3Rpb24gKHYpIHsgcmV0dXJuIG5ldyBQcm9taXNlKGZ1bmN0aW9uIChhLCBiKSB7IHEucHVzaChbbiwgdiwgYSwgYl0pID4gMSB8fCByZXN1bWUobiwgdik7IH0pOyB9OyB9XG4gICAgZnVuY3Rpb24gcmVzdW1lKG4sIHYpIHsgdHJ5IHsgc3RlcChnW25dKHYpKTsgfSBjYXRjaCAoZSkgeyBzZXR0bGUocVswXVszXSwgZSk7IH0gfVxuICAgIGZ1bmN0aW9uIHN0ZXAocikgeyByLnZhbHVlIGluc3RhbmNlb2YgX19hd2FpdCA/IFByb21pc2UucmVzb2x2ZShyLnZhbHVlLnYpLnRoZW4oZnVsZmlsbCwgcmVqZWN0KSA6IHNldHRsZShxWzBdWzJdLCByKTsgfVxuICAgIGZ1bmN0aW9uIGZ1bGZpbGwodmFsdWUpIHsgcmVzdW1lKFwibmV4dFwiLCB2YWx1ZSk7IH1cbiAgICBmdW5jdGlvbiByZWplY3QodmFsdWUpIHsgcmVzdW1lKFwidGhyb3dcIiwgdmFsdWUpOyB9XG4gICAgZnVuY3Rpb24gc2V0dGxlKGYsIHYpIHsgaWYgKGYodiksIHEuc2hpZnQoKSwgcS5sZW5ndGgpIHJlc3VtZShxWzBdWzBdLCBxWzBdWzFdKTsgfVxufTtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmV4cG9ydHMuaXNSZWFkYWJsZVN0cmVhbUxpa2UgPSBleHBvcnRzLnJlYWRhYmxlU3RyZWFtTGlrZVRvQXN5bmNHZW5lcmF0b3IgPSB2b2lkIDA7XG52YXIgaXNGdW5jdGlvbl8xID0gcmVxdWlyZShcIi4vaXNGdW5jdGlvblwiKTtcbmZ1bmN0aW9uIHJlYWRhYmxlU3RyZWFtTGlrZVRvQXN5bmNHZW5lcmF0b3IocmVhZGFibGVTdHJlYW0pIHtcbiAgICByZXR1cm4gX19hc3luY0dlbmVyYXRvcih0aGlzLCBhcmd1bWVudHMsIGZ1bmN0aW9uIHJlYWRhYmxlU3RyZWFtTGlrZVRvQXN5bmNHZW5lcmF0b3JfMSgpIHtcbiAgICAgICAgdmFyIHJlYWRlciwgX2EsIHZhbHVlLCBkb25lO1xuICAgICAgICByZXR1cm4gX19nZW5lcmF0b3IodGhpcywgZnVuY3Rpb24gKF9iKSB7XG4gICAgICAgICAgICBzd2l0Y2ggKF9iLmxhYmVsKSB7XG4gICAgICAgICAgICAgICAgY2FzZSAwOlxuICAgICAgICAgICAgICAgICAgICByZWFkZXIgPSByZWFkYWJsZVN0cmVhbS5nZXRSZWFkZXIoKTtcbiAgICAgICAgICAgICAgICAgICAgX2IubGFiZWwgPSAxO1xuICAgICAgICAgICAgICAgIGNhc2UgMTpcbiAgICAgICAgICAgICAgICAgICAgX2IudHJ5cy5wdXNoKFsxLCAsIDksIDEwXSk7XG4gICAgICAgICAgICAgICAgICAgIF9iLmxhYmVsID0gMjtcbiAgICAgICAgICAgICAgICBjYXNlIDI6XG4gICAgICAgICAgICAgICAgICAgIGlmICghdHJ1ZSkgcmV0dXJuIFszLCA4XTtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIFs0LCBfX2F3YWl0KHJlYWRlci5yZWFkKCkpXTtcbiAgICAgICAgICAgICAgICBjYXNlIDM6XG4gICAgICAgICAgICAgICAgICAgIF9hID0gX2Iuc2VudCgpLCB2YWx1ZSA9IF9hLnZhbHVlLCBkb25lID0gX2EuZG9uZTtcbiAgICAgICAgICAgICAgICAgICAgaWYgKCFkb25lKSByZXR1cm4gWzMsIDVdO1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gWzQsIF9fYXdhaXQodm9pZCAwKV07XG4gICAgICAgICAgICAgICAgY2FzZSA0OiByZXR1cm4gWzIsIF9iLnNlbnQoKV07XG4gICAgICAgICAgICAgICAgY2FzZSA1OiByZXR1cm4gWzQsIF9fYXdhaXQodmFsdWUpXTtcbiAgICAgICAgICAgICAgICBjYXNlIDY6IHJldHVybiBbNCwgX2Iuc2VudCgpXTtcbiAgICAgICAgICAgICAgICBjYXNlIDc6XG4gICAgICAgICAgICAgICAgICAgIF9iLnNlbnQoKTtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIFszLCAyXTtcbiAgICAgICAgICAgICAgICBjYXNlIDg6IHJldHVybiBbMywgMTBdO1xuICAgICAgICAgICAgICAgIGNhc2UgOTpcbiAgICAgICAgICAgICAgICAgICAgcmVhZGVyLnJlbGVhc2VMb2NrKCk7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBbN107XG4gICAgICAgICAgICAgICAgY2FzZSAxMDogcmV0dXJuIFsyXTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSk7XG4gICAgfSk7XG59XG5leHBvcnRzLnJlYWRhYmxlU3RyZWFtTGlrZVRvQXN5bmNHZW5lcmF0b3IgPSByZWFkYWJsZVN0cmVhbUxpa2VUb0FzeW5jR2VuZXJhdG9yO1xuZnVuY3Rpb24gaXNSZWFkYWJsZVN0cmVhbUxpa2Uob2JqKSB7XG4gICAgcmV0dXJuIGlzRnVuY3Rpb25fMS5pc0Z1bmN0aW9uKG9iaiA9PT0gbnVsbCB8fCBvYmogPT09IHZvaWQgMCA/IHZvaWQgMCA6IG9iai5nZXRSZWFkZXIpO1xufVxuZXhwb3J0cy5pc1JlYWRhYmxlU3RyZWFtTGlrZSA9IGlzUmVhZGFibGVTdHJlYW1MaWtlO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9aXNSZWFkYWJsZVN0cmVhbUxpa2UuanMubWFwIiwiXCJ1c2Ugc3RyaWN0XCI7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5leHBvcnRzLmlzU2NoZWR1bGVyID0gdm9pZCAwO1xudmFyIGlzRnVuY3Rpb25fMSA9IHJlcXVpcmUoXCIuL2lzRnVuY3Rpb25cIik7XG5mdW5jdGlvbiBpc1NjaGVkdWxlcih2YWx1ZSkge1xuICAgIHJldHVybiB2YWx1ZSAmJiBpc0Z1bmN0aW9uXzEuaXNGdW5jdGlvbih2YWx1ZS5zY2hlZHVsZSk7XG59XG5leHBvcnRzLmlzU2NoZWR1bGVyID0gaXNTY2hlZHVsZXI7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1pc1NjaGVkdWxlci5qcy5tYXAiLCJcInVzZSBzdHJpY3RcIjtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmV4cG9ydHMub3BlcmF0ZSA9IGV4cG9ydHMuaGFzTGlmdCA9IHZvaWQgMDtcbnZhciBpc0Z1bmN0aW9uXzEgPSByZXF1aXJlKFwiLi9pc0Z1bmN0aW9uXCIpO1xuZnVuY3Rpb24gaGFzTGlmdChzb3VyY2UpIHtcbiAgICByZXR1cm4gaXNGdW5jdGlvbl8xLmlzRnVuY3Rpb24oc291cmNlID09PSBudWxsIHx8IHNvdXJjZSA9PT0gdm9pZCAwID8gdm9pZCAwIDogc291cmNlLmxpZnQpO1xufVxuZXhwb3J0cy5oYXNMaWZ0ID0gaGFzTGlmdDtcbmZ1bmN0aW9uIG9wZXJhdGUoaW5pdCkge1xuICAgIHJldHVybiBmdW5jdGlvbiAoc291cmNlKSB7XG4gICAgICAgIGlmIChoYXNMaWZ0KHNvdXJjZSkpIHtcbiAgICAgICAgICAgIHJldHVybiBzb3VyY2UubGlmdChmdW5jdGlvbiAobGlmdGVkU291cmNlKSB7XG4gICAgICAgICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGluaXQobGlmdGVkU291cmNlLCB0aGlzKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgY2F0Y2ggKGVycikge1xuICAgICAgICAgICAgICAgICAgICB0aGlzLmVycm9yKGVycik7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSk7XG4gICAgICAgIH1cbiAgICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcignVW5hYmxlIHRvIGxpZnQgdW5rbm93biBPYnNlcnZhYmxlIHR5cGUnKTtcbiAgICB9O1xufVxuZXhwb3J0cy5vcGVyYXRlID0gb3BlcmF0ZTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWxpZnQuanMubWFwIiwiXCJ1c2Ugc3RyaWN0XCI7XG52YXIgX19yZWFkID0gKHRoaXMgJiYgdGhpcy5fX3JlYWQpIHx8IGZ1bmN0aW9uIChvLCBuKSB7XG4gICAgdmFyIG0gPSB0eXBlb2YgU3ltYm9sID09PSBcImZ1bmN0aW9uXCIgJiYgb1tTeW1ib2wuaXRlcmF0b3JdO1xuICAgIGlmICghbSkgcmV0dXJuIG87XG4gICAgdmFyIGkgPSBtLmNhbGwobyksIHIsIGFyID0gW10sIGU7XG4gICAgdHJ5IHtcbiAgICAgICAgd2hpbGUgKChuID09PSB2b2lkIDAgfHwgbi0tID4gMCkgJiYgIShyID0gaS5uZXh0KCkpLmRvbmUpIGFyLnB1c2goci52YWx1ZSk7XG4gICAgfVxuICAgIGNhdGNoIChlcnJvcikgeyBlID0geyBlcnJvcjogZXJyb3IgfTsgfVxuICAgIGZpbmFsbHkge1xuICAgICAgICB0cnkge1xuICAgICAgICAgICAgaWYgKHIgJiYgIXIuZG9uZSAmJiAobSA9IGlbXCJyZXR1cm5cIl0pKSBtLmNhbGwoaSk7XG4gICAgICAgIH1cbiAgICAgICAgZmluYWxseSB7IGlmIChlKSB0aHJvdyBlLmVycm9yOyB9XG4gICAgfVxuICAgIHJldHVybiBhcjtcbn07XG52YXIgX19zcHJlYWRBcnJheSA9ICh0aGlzICYmIHRoaXMuX19zcHJlYWRBcnJheSkgfHwgZnVuY3Rpb24gKHRvLCBmcm9tKSB7XG4gICAgZm9yICh2YXIgaSA9IDAsIGlsID0gZnJvbS5sZW5ndGgsIGogPSB0by5sZW5ndGg7IGkgPCBpbDsgaSsrLCBqKyspXG4gICAgICAgIHRvW2pdID0gZnJvbVtpXTtcbiAgICByZXR1cm4gdG87XG59O1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuZXhwb3J0cy5tYXBPbmVPck1hbnlBcmdzID0gdm9pZCAwO1xudmFyIG1hcF8xID0gcmVxdWlyZShcIi4uL29wZXJhdG9ycy9tYXBcIik7XG52YXIgaXNBcnJheSA9IEFycmF5LmlzQXJyYXk7XG5mdW5jdGlvbiBjYWxsT3JBcHBseShmbiwgYXJncykge1xuICAgIHJldHVybiBpc0FycmF5KGFyZ3MpID8gZm4uYXBwbHkodm9pZCAwLCBfX3NwcmVhZEFycmF5KFtdLCBfX3JlYWQoYXJncykpKSA6IGZuKGFyZ3MpO1xufVxuZnVuY3Rpb24gbWFwT25lT3JNYW55QXJncyhmbikge1xuICAgIHJldHVybiBtYXBfMS5tYXAoZnVuY3Rpb24gKGFyZ3MpIHsgcmV0dXJuIGNhbGxPckFwcGx5KGZuLCBhcmdzKTsgfSk7XG59XG5leHBvcnRzLm1hcE9uZU9yTWFueUFyZ3MgPSBtYXBPbmVPck1hbnlBcmdzO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9bWFwT25lT3JNYW55QXJncy5qcy5tYXAiLCJcInVzZSBzdHJpY3RcIjtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmV4cG9ydHMubm9vcCA9IHZvaWQgMDtcbmZ1bmN0aW9uIG5vb3AoKSB7IH1cbmV4cG9ydHMubm9vcCA9IG5vb3A7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1ub29wLmpzLm1hcCIsIlwidXNlIHN0cmljdFwiO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuZXhwb3J0cy5ub3QgPSB2b2lkIDA7XG5mdW5jdGlvbiBub3QocHJlZCwgdGhpc0FyZykge1xuICAgIHJldHVybiBmdW5jdGlvbiAodmFsdWUsIGluZGV4KSB7IHJldHVybiAhcHJlZC5jYWxsKHRoaXNBcmcsIHZhbHVlLCBpbmRleCk7IH07XG59XG5leHBvcnRzLm5vdCA9IG5vdDtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPW5vdC5qcy5tYXAiLCJcInVzZSBzdHJpY3RcIjtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmV4cG9ydHMucGlwZUZyb21BcnJheSA9IGV4cG9ydHMucGlwZSA9IHZvaWQgMDtcbnZhciBpZGVudGl0eV8xID0gcmVxdWlyZShcIi4vaWRlbnRpdHlcIik7XG5mdW5jdGlvbiBwaXBlKCkge1xuICAgIHZhciBmbnMgPSBbXTtcbiAgICBmb3IgKHZhciBfaSA9IDA7IF9pIDwgYXJndW1lbnRzLmxlbmd0aDsgX2krKykge1xuICAgICAgICBmbnNbX2ldID0gYXJndW1lbnRzW19pXTtcbiAgICB9XG4gICAgcmV0dXJuIHBpcGVGcm9tQXJyYXkoZm5zKTtcbn1cbmV4cG9ydHMucGlwZSA9IHBpcGU7XG5mdW5jdGlvbiBwaXBlRnJvbUFycmF5KGZucykge1xuICAgIGlmIChmbnMubGVuZ3RoID09PSAwKSB7XG4gICAgICAgIHJldHVybiBpZGVudGl0eV8xLmlkZW50aXR5O1xuICAgIH1cbiAgICBpZiAoZm5zLmxlbmd0aCA9PT0gMSkge1xuICAgICAgICByZXR1cm4gZm5zWzBdO1xuICAgIH1cbiAgICByZXR1cm4gZnVuY3Rpb24gcGlwZWQoaW5wdXQpIHtcbiAgICAgICAgcmV0dXJuIGZucy5yZWR1Y2UoZnVuY3Rpb24gKHByZXYsIGZuKSB7IHJldHVybiBmbihwcmV2KTsgfSwgaW5wdXQpO1xuICAgIH07XG59XG5leHBvcnRzLnBpcGVGcm9tQXJyYXkgPSBwaXBlRnJvbUFycmF5O1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9cGlwZS5qcy5tYXAiLCJcInVzZSBzdHJpY3RcIjtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmV4cG9ydHMucmVwb3J0VW5oYW5kbGVkRXJyb3IgPSB2b2lkIDA7XG52YXIgY29uZmlnXzEgPSByZXF1aXJlKFwiLi4vY29uZmlnXCIpO1xudmFyIHRpbWVvdXRQcm92aWRlcl8xID0gcmVxdWlyZShcIi4uL3NjaGVkdWxlci90aW1lb3V0UHJvdmlkZXJcIik7XG5mdW5jdGlvbiByZXBvcnRVbmhhbmRsZWRFcnJvcihlcnIpIHtcbiAgICB0aW1lb3V0UHJvdmlkZXJfMS50aW1lb3V0UHJvdmlkZXIuc2V0VGltZW91dChmdW5jdGlvbiAoKSB7XG4gICAgICAgIHZhciBvblVuaGFuZGxlZEVycm9yID0gY29uZmlnXzEuY29uZmlnLm9uVW5oYW5kbGVkRXJyb3I7XG4gICAgICAgIGlmIChvblVuaGFuZGxlZEVycm9yKSB7XG4gICAgICAgICAgICBvblVuaGFuZGxlZEVycm9yKGVycik7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICB0aHJvdyBlcnI7XG4gICAgICAgIH1cbiAgICB9KTtcbn1cbmV4cG9ydHMucmVwb3J0VW5oYW5kbGVkRXJyb3IgPSByZXBvcnRVbmhhbmRsZWRFcnJvcjtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPXJlcG9ydFVuaGFuZGxlZEVycm9yLmpzLm1hcCIsIlwidXNlIHN0cmljdFwiO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuZXhwb3J0cy5jcmVhdGVJbnZhbGlkT2JzZXJ2YWJsZVR5cGVFcnJvciA9IHZvaWQgMDtcbmZ1bmN0aW9uIGNyZWF0ZUludmFsaWRPYnNlcnZhYmxlVHlwZUVycm9yKGlucHV0KSB7XG4gICAgcmV0dXJuIG5ldyBUeXBlRXJyb3IoXCJZb3UgcHJvdmlkZWQgXCIgKyAoaW5wdXQgIT09IG51bGwgJiYgdHlwZW9mIGlucHV0ID09PSAnb2JqZWN0JyA/ICdhbiBpbnZhbGlkIG9iamVjdCcgOiBcIidcIiArIGlucHV0ICsgXCInXCIpICsgXCIgd2hlcmUgYSBzdHJlYW0gd2FzIGV4cGVjdGVkLiBZb3UgY2FuIHByb3ZpZGUgYW4gT2JzZXJ2YWJsZSwgUHJvbWlzZSwgUmVhZGFibGVTdHJlYW0sIEFycmF5LCBBc3luY0l0ZXJhYmxlLCBvciBJdGVyYWJsZS5cIik7XG59XG5leHBvcnRzLmNyZWF0ZUludmFsaWRPYnNlcnZhYmxlVHlwZUVycm9yID0gY3JlYXRlSW52YWxpZE9ic2VydmFibGVUeXBlRXJyb3I7XG4vLyMgc291cmNlTWFwcGluZ1VSTD10aHJvd1Vub2JzZXJ2YWJsZUVycm9yLmpzLm1hcCIsImV4cG9ydCBjb25zdCBBUElfVVJMPSdodHRwOi8vbG9jYWxob3N0OjMwMDAnIiwiaW1wb3J0IHsgZGVib3VuY2VUaW1lLCBmcm9tRXZlbnQgfSBmcm9tIFwicnhqc1wiO1xyXG5pbXBvcnQgeyBHYW1lUGhhc2UgfSBmcm9tIFwiLi9lbnVtcy9HYW1lUGhhc2VcIjtcclxuXHJcbmV4cG9ydCBjbGFzcyBHYW1lIHtcclxuICAgIHByaXZhdGUgcmVhZG9ubHkgY2FudmFzOiBIVE1MQ2FudmFzRWxlbWVudDtcclxuICAgIHByaXZhdGUgcmVhZG9ubHkgY29udGV4dDogQ2FudmFzUmVuZGVyaW5nQ29udGV4dDJEO1xyXG4gICAgcHJpdmF0ZSByZWFkb25seSBnYW1lUGhhc2U6IEdhbWVQaGFzZTtcclxuXHJcbiAgICBjb25zdHJ1Y3RvcihjYW52YXM6IEhUTUxDYW52YXNFbGVtZW50KSB7XHJcbiAgICAgICAgaWYgKCFjYW52YXMuZ2V0Q29udGV4dCkge1xyXG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXCJDYW52YXMgaXMgbm90IHN1cHBvcnRlZCBpbiB0aGlzIGJyb3dzZXJcIik7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHRoaXMuY2FudmFzID0gY2FudmFzO1xyXG4gICAgICAgIHRoaXMuY29udGV4dCA9IGNhbnZhcy5nZXRDb250ZXh0KCcyZCcpO1xyXG4gICAgICAgIHRoaXMuY29udGV4dC5pbWFnZVNtb290aGluZ0VuYWJsZWQgPSBmYWxzZTtcclxuICAgIH1cclxuXHJcbiAgICBpbml0KCkge1xyXG4gICAgICAgIGZyb21FdmVudCh3aW5kb3csICdyZXNpemUnKVxyXG4gICAgICAgICAgICAucGlwZShkZWJvdW5jZVRpbWUoMTAwKSlcclxuICAgICAgICAgICAgLnN1YnNjcmliZSgoKSA9PiB7XHJcbiAgICAgICAgICAgICAgICB0aGlzLnJlc2l6ZSh3aW5kb3cuaW5uZXJXaWR0aCwgd2luZG93LmlubmVySGVpZ2h0KTtcclxuICAgICAgICAgICAgfSlcclxuICAgIH1cclxuXHJcbiAgICByZXNpemUobmV3V2lkdGg6bnVtYmVyLG5ld0hlaWdodDpudW1iZXIpe1xyXG4gICAgICAgIHRoaXMuY2FudmFzLndpZHRoPW5ld1dpZHRoO1xyXG4gICAgICAgIHRoaXMuY2FudmFzLmhlaWdodD1uZXdIZWlnaHQ7XHJcbiAgICAgICAgdGhpcy5jb250ZXh0LmltYWdlU21vb3RoaW5nRW5hYmxlZD1mYWxzZTtcclxuXHJcbiAgICAgICAgLy90b2RvOiBlbGVtZW50IHJlc2l6ZVxyXG4gICAgfVxyXG59IiwiaW1wb3J0IHsgT2JzZXJ2YWJsZSwgYXN5bmMsIGZyb20gfSBmcm9tIFwicnhqc1wiO1xyXG5pbXBvcnQgeyBBUElfVVJMIH0gZnJvbSBcIi4uL2NvbmZpZ1wiO1xyXG5pbXBvcnQgeyBBc3luY0FjdGlvbiB9IGZyb20gXCJyeGpzL2ludGVybmFsL3NjaGVkdWxlci9Bc3luY0FjdGlvblwiO1xyXG5pbXBvcnQgeyBJUGxheWVySW5mbyB9IGZyb20gXCIuLi9pbnRlcmZhY2VzL0lQbGF5ZXJJbmZvXCI7XHJcbmltcG9ydCB7IElTaGFwZVR5cGVzIH0gZnJvbSBcIi4uL2ludGVyZmFjZXMvSVNoYXBlVHlwZXNcIjtcclxuXHJcbmNvbnN0IGZldGNoRnJvbUFwaSQgPSA8VD4oXHJcbiAgICBwYXRoOiBzdHJpbmcsXHJcbiAgICByZXF1ZXN0SW5pdD86IFJlcXVlc3RJbml0LFxyXG4pOiBPYnNlcnZhYmxlPFQ+ID0+IHtcclxuICAgIHJldHVybiBmcm9tKGZldGNoKGAke0FQSV9VUkx9LyR7cGF0aH1gKVxyXG4gICAgICAgIC50aGVuKHJlcyA9PiB7XHJcbiAgICAgICAgICAgIGlmICghcmVzLm9rKSB7XHJcbiAgICAgICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXCJGYWlsZWQgdG8gZmV0Y2hcIilcclxuICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgIHJldHVybiByZXMuanNvbigpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfSlcclxuICAgICAgICAuY2F0Y2goZSA9PiBjb25zb2xlLmVycm9yKGUpKVxyXG4gICAgKTtcclxufTtcclxuXHJcbmNvbnN0IGZldGNoVXNlclByb2ZpbGUkID0gKFxyXG4gICAgdXNlcm5hbWU6IHN0cmluZ1xyXG4pOiBPYnNlcnZhYmxlPElQbGF5ZXJJbmZvPiA9PiB7XHJcbiAgICByZXR1cm4gZmV0Y2hGcm9tQXBpJDxJUGxheWVySW5mbz4oYHVzZXJzP3VzZXJuYW1lPSR7dXNlcm5hbWV9YClcclxufVxyXG5cclxuY29uc3QgZmV0Y2hMZWFkZXJCb2FyZCQgPSAoKTogT2JzZXJ2YWJsZTxJUGxheWVySW5mb1tdPiA9PiB7XHJcbiAgICByZXR1cm4gZmV0Y2hGcm9tQXBpJDxJUGxheWVySW5mb1tdPihgdXNlcnM/X3NvcnQ9aGlnaHNjb3JlJl9vcmRlcj1kZXNjJl9saW1pdD0xMGApXHJcbn1cclxuXHJcbmNvbnN0IGZldGNoU3ByaXRlJCA9ICgpOiBPYnNlcnZhYmxlPHtcclxuICAgIHBhdGg6IHN0cmluZyxcclxuICAgIHNoYXBlOiBJU2hhcGVUeXBlc1tdXHJcbn0+ID0+IHtcclxuICAgIHJldHVybiBmZXRjaEZyb21BcGkkPHtcclxuICAgICAgICBwYXRoOiBzdHJpbmcsXHJcbiAgICAgICAgc2hhcGU6IElTaGFwZVR5cGVzW11cclxuICAgIH0+KGBzcHJpdGVzYClcclxufVxyXG5cclxuXHJcbmV4cG9ydCB7IGZldGNoRnJvbUFwaSQsIGZldGNoVXNlclByb2ZpbGUkLCBmZXRjaExlYWRlckJvYXJkJCwgZmV0Y2hTcHJpdGUkIH0iLCIvLyBUaGUgbW9kdWxlIGNhY2hlXG52YXIgX193ZWJwYWNrX21vZHVsZV9jYWNoZV9fID0ge307XG5cbi8vIFRoZSByZXF1aXJlIGZ1bmN0aW9uXG5mdW5jdGlvbiBfX3dlYnBhY2tfcmVxdWlyZV9fKG1vZHVsZUlkKSB7XG5cdC8vIENoZWNrIGlmIG1vZHVsZSBpcyBpbiBjYWNoZVxuXHR2YXIgY2FjaGVkTW9kdWxlID0gX193ZWJwYWNrX21vZHVsZV9jYWNoZV9fW21vZHVsZUlkXTtcblx0aWYgKGNhY2hlZE1vZHVsZSAhPT0gdW5kZWZpbmVkKSB7XG5cdFx0cmV0dXJuIGNhY2hlZE1vZHVsZS5leHBvcnRzO1xuXHR9XG5cdC8vIENyZWF0ZSBhIG5ldyBtb2R1bGUgKGFuZCBwdXQgaXQgaW50byB0aGUgY2FjaGUpXG5cdHZhciBtb2R1bGUgPSBfX3dlYnBhY2tfbW9kdWxlX2NhY2hlX19bbW9kdWxlSWRdID0ge1xuXHRcdC8vIG5vIG1vZHVsZS5pZCBuZWVkZWRcblx0XHQvLyBubyBtb2R1bGUubG9hZGVkIG5lZWRlZFxuXHRcdGV4cG9ydHM6IHt9XG5cdH07XG5cblx0Ly8gRXhlY3V0ZSB0aGUgbW9kdWxlIGZ1bmN0aW9uXG5cdF9fd2VicGFja19tb2R1bGVzX19bbW9kdWxlSWRdLmNhbGwobW9kdWxlLmV4cG9ydHMsIG1vZHVsZSwgbW9kdWxlLmV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pO1xuXG5cdC8vIFJldHVybiB0aGUgZXhwb3J0cyBvZiB0aGUgbW9kdWxlXG5cdHJldHVybiBtb2R1bGUuZXhwb3J0cztcbn1cblxuIl0sIm5hbWVzIjpbIl9fY3JlYXRlQmluZGluZyIsInRoaXMiLCJPYmplY3QiLCJjcmVhdGUiLCJvIiwibSIsImsiLCJrMiIsInVuZGVmaW5lZCIsImRlZmluZVByb3BlcnR5IiwiZW51bWVyYWJsZSIsImdldCIsIl9fZXhwb3J0U3RhciIsImV4cG9ydHMiLCJwIiwicHJvdG90eXBlIiwiaGFzT3duUHJvcGVydHkiLCJjYWxsIiwidmFsdWUiLCJpbnRlcnZhbCIsImlpZiIsImdlbmVyYXRlIiwiZnJvbUV2ZW50UGF0dGVybiIsImZyb21FdmVudCIsImZyb20iLCJmb3JrSm9pbiIsImVtcHR5IiwiZGVmZXIiLCJjb25uZWN0YWJsZSIsImNvbmNhdCIsImNvbWJpbmVMYXRlc3QiLCJiaW5kTm9kZUNhbGxiYWNrIiwiYmluZENhbGxiYWNrIiwiVW5zdWJzY3JpcHRpb25FcnJvciIsIlRpbWVvdXRFcnJvciIsIlNlcXVlbmNlRXJyb3IiLCJPYmplY3RVbnN1YnNjcmliZWRFcnJvciIsIk5vdEZvdW5kRXJyb3IiLCJFbXB0eUVycm9yIiwiQXJndW1lbnRPdXRPZlJhbmdlRXJyb3IiLCJmaXJzdFZhbHVlRnJvbSIsImxhc3RWYWx1ZUZyb20iLCJpc09ic2VydmFibGUiLCJpZGVudGl0eSIsIm5vb3AiLCJwaXBlIiwiTm90aWZpY2F0aW9uS2luZCIsIk5vdGlmaWNhdGlvbiIsIlN1YnNjcmliZXIiLCJTdWJzY3JpcHRpb24iLCJTY2hlZHVsZXIiLCJWaXJ0dWFsQWN0aW9uIiwiVmlydHVhbFRpbWVTY2hlZHVsZXIiLCJhbmltYXRpb25GcmFtZVNjaGVkdWxlciIsImFuaW1hdGlvbkZyYW1lIiwicXVldWVTY2hlZHVsZXIiLCJxdWV1ZSIsImFzeW5jU2NoZWR1bGVyIiwiYXN5bmMiLCJhc2FwU2NoZWR1bGVyIiwiYXNhcCIsIkFzeW5jU3ViamVjdCIsIlJlcGxheVN1YmplY3QiLCJCZWhhdmlvclN1YmplY3QiLCJTdWJqZWN0IiwiYW5pbWF0aW9uRnJhbWVzIiwib2JzZXJ2YWJsZSIsIkNvbm5lY3RhYmxlT2JzZXJ2YWJsZSIsIk9ic2VydmFibGUiLCJmaWx0ZXIiLCJleHBhbmQiLCJleGhhdXN0TWFwIiwiZXhoYXVzdEFsbCIsImV4aGF1c3QiLCJldmVyeSIsImVuZFdpdGgiLCJlbGVtZW50QXQiLCJkaXN0aW5jdFVudGlsS2V5Q2hhbmdlZCIsImRpc3RpbmN0VW50aWxDaGFuZ2VkIiwiZGlzdGluY3QiLCJkZW1hdGVyaWFsaXplIiwiZGVsYXlXaGVuIiwiZGVsYXkiLCJkZWZhdWx0SWZFbXB0eSIsImRlYm91bmNlVGltZSIsImRlYm91bmNlIiwiY291bnQiLCJjb25uZWN0IiwiY29uY2F0V2l0aCIsImNvbmNhdE1hcFRvIiwiY29uY2F0TWFwIiwiY29uY2F0QWxsIiwiY29tYmluZUxhdGVzdFdpdGgiLCJjb21iaW5lTGF0ZXN0QWxsIiwiY29tYmluZUFsbCIsImNhdGNoRXJyb3IiLCJidWZmZXJXaGVuIiwiYnVmZmVyVG9nZ2xlIiwiYnVmZmVyVGltZSIsImJ1ZmZlckNvdW50IiwiYnVmZmVyIiwiYXVkaXRUaW1lIiwiYXVkaXQiLCJjb25maWciLCJORVZFUiIsIkVNUFRZIiwic2NoZWR1bGVkIiwiemlwIiwidXNpbmciLCJ0aW1lciIsInRocm93RXJyb3IiLCJyYW5nZSIsInJhY2UiLCJwYXJ0aXRpb24iLCJwYWlycyIsIm9uRXJyb3JSZXN1bWVOZXh0Iiwib2YiLCJuZXZlciIsIm1lcmdlIiwic3dpdGNoTWFwIiwic3dpdGNoQWxsIiwic3Vic2NyaWJlT24iLCJzdGFydFdpdGgiLCJza2lwV2hpbGUiLCJza2lwVW50aWwiLCJza2lwTGFzdCIsInNraXAiLCJzaW5nbGUiLCJzaGFyZVJlcGxheSIsInNoYXJlIiwic2VxdWVuY2VFcXVhbCIsInNjYW4iLCJzYW1wbGVUaW1lIiwic2FtcGxlIiwicmVmQ291bnQiLCJyZXRyeVdoZW4iLCJyZXRyeSIsInJlcGVhdFdoZW4iLCJyZXBlYXQiLCJyZWR1Y2UiLCJyYWNlV2l0aCIsInB1Ymxpc2hSZXBsYXkiLCJwdWJsaXNoTGFzdCIsInB1Ymxpc2hCZWhhdmlvciIsInB1Ymxpc2giLCJwbHVjayIsInBhaXJ3aXNlIiwib25FcnJvclJlc3VtZU5leHRXaXRoIiwib2JzZXJ2ZU9uIiwibXVsdGljYXN0IiwibWluIiwibWVyZ2VXaXRoIiwibWVyZ2VTY2FuIiwibWVyZ2VNYXBUbyIsIm1lcmdlTWFwIiwiZmxhdE1hcCIsIm1lcmdlQWxsIiwibWF4IiwibWF0ZXJpYWxpemUiLCJtYXBUbyIsIm1hcCIsImxhc3QiLCJpc0VtcHR5IiwiaWdub3JlRWxlbWVudHMiLCJncm91cEJ5IiwiZmlyc3QiLCJmaW5kSW5kZXgiLCJmaW5kIiwiZmluYWxpemUiLCJ6aXBXaXRoIiwiemlwQWxsIiwid2l0aExhdGVzdEZyb20iLCJ3aW5kb3dXaGVuIiwid2luZG93VG9nZ2xlIiwid2luZG93VGltZSIsIndpbmRvd0NvdW50Iiwid2luZG93IiwidG9BcnJheSIsInRpbWVzdGFtcCIsInRpbWVvdXRXaXRoIiwidGltZW91dCIsInRpbWVJbnRlcnZhbCIsInRocm93SWZFbXB0eSIsInRocm90dGxlVGltZSIsInRocm90dGxlIiwidGFwIiwidGFrZVdoaWxlIiwidGFrZVVudGlsIiwidGFrZUxhc3QiLCJ0YWtlIiwic3dpdGNoU2NhbiIsInN3aXRjaE1hcFRvIiwiT2JzZXJ2YWJsZV8xIiwiQ29ubmVjdGFibGVPYnNlcnZhYmxlXzEiLCJvYnNlcnZhYmxlXzEiLCJhbmltYXRpb25GcmFtZXNfMSIsIlN1YmplY3RfMSIsIkJlaGF2aW9yU3ViamVjdF8xIiwiUmVwbGF5U3ViamVjdF8xIiwiQXN5bmNTdWJqZWN0XzEiLCJhc2FwXzEiLCJhc3luY18xIiwicXVldWVfMSIsImFuaW1hdGlvbkZyYW1lXzEiLCJWaXJ0dWFsVGltZVNjaGVkdWxlcl8xIiwiU2NoZWR1bGVyXzEiLCJTdWJzY3JpcHRpb25fMSIsIlN1YnNjcmliZXJfMSIsIk5vdGlmaWNhdGlvbl8xIiwicGlwZV8xIiwibm9vcF8xIiwiaWRlbnRpdHlfMSIsImlzT2JzZXJ2YWJsZV8xIiwibGFzdFZhbHVlRnJvbV8xIiwiZmlyc3RWYWx1ZUZyb21fMSIsIkFyZ3VtZW50T3V0T2ZSYW5nZUVycm9yXzEiLCJFbXB0eUVycm9yXzEiLCJOb3RGb3VuZEVycm9yXzEiLCJPYmplY3RVbnN1YnNjcmliZWRFcnJvcl8xIiwiU2VxdWVuY2VFcnJvcl8xIiwidGltZW91dF8xIiwiVW5zdWJzY3JpcHRpb25FcnJvcl8xIiwiYmluZENhbGxiYWNrXzEiLCJiaW5kTm9kZUNhbGxiYWNrXzEiLCJjb21iaW5lTGF0ZXN0XzEiLCJjb25jYXRfMSIsImNvbm5lY3RhYmxlXzEiLCJkZWZlcl8xIiwiZW1wdHlfMSIsImZvcmtKb2luXzEiLCJmcm9tXzEiLCJmcm9tRXZlbnRfMSIsImZyb21FdmVudFBhdHRlcm5fMSIsImdlbmVyYXRlXzEiLCJpaWZfMSIsImludGVydmFsXzEiLCJtZXJnZV8xIiwibmV2ZXJfMSIsIm9mXzEiLCJvbkVycm9yUmVzdW1lTmV4dF8xIiwicGFpcnNfMSIsInBhcnRpdGlvbl8xIiwicmFjZV8xIiwicmFuZ2VfMSIsInRocm93RXJyb3JfMSIsInRpbWVyXzEiLCJ1c2luZ18xIiwiemlwXzEiLCJzY2hlZHVsZWRfMSIsImVtcHR5XzIiLCJuZXZlcl8yIiwiY29uZmlnXzEiLCJhdWRpdF8xIiwiYXVkaXRUaW1lXzEiLCJidWZmZXJfMSIsImJ1ZmZlckNvdW50XzEiLCJidWZmZXJUaW1lXzEiLCJidWZmZXJUb2dnbGVfMSIsImJ1ZmZlcldoZW5fMSIsImNhdGNoRXJyb3JfMSIsImNvbWJpbmVBbGxfMSIsImNvbWJpbmVMYXRlc3RBbGxfMSIsImNvbWJpbmVMYXRlc3RXaXRoXzEiLCJjb25jYXRBbGxfMSIsImNvbmNhdE1hcF8xIiwiY29uY2F0TWFwVG9fMSIsImNvbmNhdFdpdGhfMSIsImNvbm5lY3RfMSIsImNvdW50XzEiLCJkZWJvdW5jZV8xIiwiZGVib3VuY2VUaW1lXzEiLCJkZWZhdWx0SWZFbXB0eV8xIiwiZGVsYXlfMSIsImRlbGF5V2hlbl8xIiwiZGVtYXRlcmlhbGl6ZV8xIiwiZGlzdGluY3RfMSIsImRpc3RpbmN0VW50aWxDaGFuZ2VkXzEiLCJkaXN0aW5jdFVudGlsS2V5Q2hhbmdlZF8xIiwiZWxlbWVudEF0XzEiLCJlbmRXaXRoXzEiLCJldmVyeV8xIiwiZXhoYXVzdF8xIiwiZXhoYXVzdEFsbF8xIiwiZXhoYXVzdE1hcF8xIiwiZXhwYW5kXzEiLCJmaWx0ZXJfMSIsImZpbmFsaXplXzEiLCJmaW5kXzEiLCJmaW5kSW5kZXhfMSIsImZpcnN0XzEiLCJncm91cEJ5XzEiLCJpZ25vcmVFbGVtZW50c18xIiwiaXNFbXB0eV8xIiwibGFzdF8xIiwibWFwXzEiLCJtYXBUb18xIiwibWF0ZXJpYWxpemVfMSIsIm1heF8xIiwibWVyZ2VBbGxfMSIsImZsYXRNYXBfMSIsIm1lcmdlTWFwXzEiLCJtZXJnZU1hcFRvXzEiLCJtZXJnZVNjYW5fMSIsIm1lcmdlV2l0aF8xIiwibWluXzEiLCJtdWx0aWNhc3RfMSIsIm9ic2VydmVPbl8xIiwib25FcnJvclJlc3VtZU5leHRXaXRoXzEiLCJwYWlyd2lzZV8xIiwicGx1Y2tfMSIsInB1Ymxpc2hfMSIsInB1Ymxpc2hCZWhhdmlvcl8xIiwicHVibGlzaExhc3RfMSIsInB1Ymxpc2hSZXBsYXlfMSIsInJhY2VXaXRoXzEiLCJyZWR1Y2VfMSIsInJlcGVhdF8xIiwicmVwZWF0V2hlbl8xIiwicmV0cnlfMSIsInJldHJ5V2hlbl8xIiwicmVmQ291bnRfMSIsInNhbXBsZV8xIiwic2FtcGxlVGltZV8xIiwic2Nhbl8xIiwic2VxdWVuY2VFcXVhbF8xIiwic2hhcmVfMSIsInNoYXJlUmVwbGF5XzEiLCJzaW5nbGVfMSIsInNraXBfMSIsInNraXBMYXN0XzEiLCJza2lwVW50aWxfMSIsInNraXBXaGlsZV8xIiwic3RhcnRXaXRoXzEiLCJzdWJzY3JpYmVPbl8xIiwic3dpdGNoQWxsXzEiLCJzd2l0Y2hNYXBfMSIsInN3aXRjaE1hcFRvXzEiLCJzd2l0Y2hTY2FuXzEiLCJ0YWtlXzEiLCJ0YWtlTGFzdF8xIiwidGFrZVVudGlsXzEiLCJ0YWtlV2hpbGVfMSIsInRhcF8xIiwidGhyb3R0bGVfMSIsInRocm90dGxlVGltZV8xIiwidGhyb3dJZkVtcHR5XzEiLCJ0aW1lSW50ZXJ2YWxfMSIsInRpbWVvdXRfMiIsInRpbWVvdXRXaXRoXzEiLCJ0aW1lc3RhbXBfMSIsInRvQXJyYXlfMSIsIndpbmRvd18xIiwid2luZG93Q291bnRfMSIsIndpbmRvd1RpbWVfMSIsIndpbmRvd1RvZ2dsZV8xIiwid2luZG93V2hlbl8xIiwid2l0aExhdGVzdEZyb21fMSIsInppcEFsbF8xIiwiemlwV2l0aF8xIiwiZXh0ZW5kU3RhdGljcyIsIl9fZXh0ZW5kcyIsImQiLCJiIiwic2V0UHJvdG90eXBlT2YiLCJfX3Byb3RvX18iLCJBcnJheSIsIlR5cGVFcnJvciIsIlN0cmluZyIsIl9fIiwiY29uc3RydWN0b3IiLCJfc3VwZXIiLCJfdGhpcyIsImFwcGx5IiwiYXJndW1lbnRzIiwiX3ZhbHVlIiwiX2hhc1ZhbHVlIiwiX2lzQ29tcGxldGUiLCJfY2hlY2tGaW5hbGl6ZWRTdGF0dXNlcyIsInN1YnNjcmliZXIiLCJfYSIsImhhc0Vycm9yIiwidGhyb3duRXJyb3IiLCJpc1N0b3BwZWQiLCJlcnJvciIsIm5leHQiLCJjb21wbGV0ZSIsImdldFZhbHVlIiwiY29uZmlndXJhYmxlIiwiX3N1YnNjcmliZSIsInN1YnNjcmlwdGlvbiIsImNsb3NlZCIsIl90aHJvd0lmQ2xvc2VkIiwib2JzZXJ2ZU5vdGlmaWNhdGlvbiIsImlzRnVuY3Rpb25fMSIsImtpbmQiLCJoYXNWYWx1ZSIsIm9ic2VydmUiLCJvYnNlcnZlciIsImRvIiwibmV4dEhhbmRsZXIiLCJlcnJvckhhbmRsZXIiLCJjb21wbGV0ZUhhbmRsZXIiLCJhY2NlcHQiLCJuZXh0T3JPYnNlcnZlciIsImlzRnVuY3Rpb24iLCJ0b09ic2VydmFibGUiLCJyZXN1bHQiLCJjcmVhdGVOZXh0IiwiY3JlYXRlRXJyb3IiLCJlcnIiLCJjcmVhdGVDb21wbGV0ZSIsImNvbXBsZXRlTm90aWZpY2F0aW9uIiwibm90aWZpY2F0aW9uIiwiX2IiLCJfYyIsIl9kIiwiY3JlYXRlTm90aWZpY2F0aW9uIiwibmV4dE5vdGlmaWNhdGlvbiIsImVycm9yTm90aWZpY2F0aW9uIiwiQ09NUExFVEVfTk9USUZJQ0FUSU9OIiwiZXJyb3JDb250ZXh0XzEiLCJzdWJzY3JpYmUiLCJsaWZ0Iiwib3BlcmF0b3IiLCJzb3VyY2UiLCJvYnNlcnZlck9yTmV4dCIsImlzT2JzZXJ2ZXIiLCJpc1N1YnNjcmlwdGlvbiIsIlNhZmVTdWJzY3JpYmVyIiwiZXJyb3JDb250ZXh0IiwiYWRkIiwiX3RyeVN1YnNjcmliZSIsInNpbmsiLCJmb3JFYWNoIiwicHJvbWlzZUN0b3IiLCJnZXRQcm9taXNlQ3RvciIsInJlc29sdmUiLCJyZWplY3QiLCJ1bnN1YnNjcmliZSIsIm9wZXJhdGlvbnMiLCJfaSIsImxlbmd0aCIsInBpcGVGcm9tQXJyYXkiLCJ0b1Byb21pc2UiLCJ4IiwiUHJvbWlzZSIsImRhdGVUaW1lc3RhbXBQcm92aWRlcl8xIiwiX2J1ZmZlclNpemUiLCJfd2luZG93VGltZSIsIl90aW1lc3RhbXBQcm92aWRlciIsIkluZmluaXR5IiwiZGF0ZVRpbWVzdGFtcFByb3ZpZGVyIiwiX2J1ZmZlciIsIl9pbmZpbml0ZVRpbWVXaW5kb3ciLCJNYXRoIiwicHVzaCIsIm5vdyIsIl90cmltQnVmZmVyIiwiX2lubmVyU3Vic2NyaWJlIiwiY29weSIsInNsaWNlIiwiaSIsImFkanVzdGVkQnVmZmVyU2l6ZSIsInNwbGljZSIsInNjaGVkdWxlckFjdGlvbkN0b3IiLCJzY2hlZHVsZSIsIndvcmsiLCJzdGF0ZSIsIl9fdmFsdWVzIiwicyIsIlN5bWJvbCIsIml0ZXJhdG9yIiwiZG9uZSIsIkFub255bW91c1N1YmplY3QiLCJhcnJSZW1vdmVfMSIsImN1cnJlbnRPYnNlcnZlcnMiLCJvYnNlcnZlcnMiLCJzdWJqZWN0IiwiZV8xIiwiZV8xXzEiLCJyZXR1cm4iLCJzaGlmdCIsIkVNUFRZX1NVQlNDUklQVElPTiIsImFyclJlbW92ZSIsImFzT2JzZXJ2YWJsZSIsImRlc3RpbmF0aW9uIiwiRU1QVFlfT0JTRVJWRVIiLCJyZXBvcnRVbmhhbmRsZWRFcnJvcl8xIiwiTm90aWZpY2F0aW9uRmFjdG9yaWVzXzEiLCJ0aW1lb3V0UHJvdmlkZXJfMSIsImhhbmRsZVN0b3BwZWROb3RpZmljYXRpb24iLCJfbmV4dCIsIl9lcnJvciIsIl9jb21wbGV0ZSIsIl9iaW5kIiwiRnVuY3Rpb24iLCJiaW5kIiwiZm4iLCJ0aGlzQXJnIiwiQ29uc3VtZXJPYnNlcnZlciIsInBhcnRpYWxPYnNlcnZlciIsImhhbmRsZVVuaGFuZGxlZEVycm9yIiwiY29udGV4dF8xIiwidXNlRGVwcmVjYXRlZE5leHRDb250ZXh0IiwidXNlRGVwcmVjYXRlZFN5bmNocm9ub3VzRXJyb3JIYW5kbGluZyIsImNhcHR1cmVFcnJvciIsInJlcG9ydFVuaGFuZGxlZEVycm9yIiwib25TdG9wcGVkTm90aWZpY2F0aW9uIiwidGltZW91dFByb3ZpZGVyIiwic2V0VGltZW91dCIsIl9fcmVhZCIsIm4iLCJyIiwiZSIsImFyIiwiX19zcHJlYWRBcnJheSIsInRvIiwiaWwiLCJqIiwiaW5pdGlhbFRlYXJkb3duIiwiX3BhcmVudGFnZSIsIl9maW5hbGl6ZXJzIiwiZV8yIiwiZXJyb3JzIiwiaXNBcnJheSIsIl9wYXJlbnRhZ2VfMSIsIl9wYXJlbnRhZ2VfMV8xIiwicmVtb3ZlIiwiaW5pdGlhbEZpbmFsaXplciIsIl9maW5hbGl6ZXJzXzEiLCJfZmluYWxpemVyc18xXzEiLCJmaW5hbGl6ZXIiLCJleGVjRmluYWxpemVyIiwiZV8yXzEiLCJ0ZWFyZG93biIsIl9oYXNQYXJlbnQiLCJfYWRkUGFyZW50IiwicGFyZW50IiwiaW5jbHVkZXMiLCJfcmVtb3ZlUGFyZW50Iiwib25VbmhhbmRsZWRFcnJvciIsImhhc0NvbmZpZyIsImRlZmF1bHRWYWx1ZSIsIk9wZXJhdG9yU3Vic2NyaWJlcl8xIiwibGlmdF8xIiwic3ViamVjdEZhY3RvcnkiLCJfc3ViamVjdCIsIl9yZWZDb3VudCIsIl9jb25uZWN0aW9uIiwiaGFzTGlmdCIsImdldFN1YmplY3QiLCJfdGVhcmRvd24iLCJjb25uZWN0aW9uIiwic3ViamVjdF8xIiwiY3JlYXRlT3BlcmF0b3JTdWJzY3JpYmVyIiwiYmluZENhbGxiYWNrSW50ZXJuYWxzXzEiLCJjYWxsYmFja0Z1bmMiLCJyZXN1bHRTZWxlY3RvciIsInNjaGVkdWxlciIsImJpbmRDYWxsYmFja0ludGVybmFscyIsImlzU2NoZWR1bGVyXzEiLCJtYXBPbmVPck1hbnlBcmdzXzEiLCJpc05vZGVTdHlsZSIsImlzU2NoZWR1bGVyIiwiYXJncyIsIm1hcE9uZU9yTWFueUFyZ3MiLCJ1bmluaXRpYWxpemVkIiwic3VicyIsImlzQXN5bmNfMSIsImlzQ29tcGxldGVfMSIsInJlc3VsdHMiLCJjb21iaW5lTGF0ZXN0SW5pdCIsImFyZ3NBcmdBcnJheU9yT2JqZWN0XzEiLCJhcmdzXzEiLCJjcmVhdGVPYmplY3RfMSIsImV4ZWN1dGVTY2hlZHVsZV8xIiwib2JzZXJ2YWJsZXMiLCJ2YWx1ZVRyYW5zZm9ybSIsIm1heWJlU2NoZWR1bGUiLCJ2YWx1ZXMiLCJhY3RpdmUiLCJyZW1haW5pbmdGaXJzdFZhbHVlcyIsIl9sb29wXzEiLCJoYXNGaXJzdFZhbHVlIiwiZXhlY3V0ZSIsImV4ZWN1dGVTY2hlZHVsZSIsInBvcFNjaGVkdWxlciIsInBvcFJlc3VsdFNlbGVjdG9yIiwiYXJnc0FyZ0FycmF5T3JPYmplY3QiLCJrZXlzIiwiY3JlYXRlT2JqZWN0IiwiREVGQVVMVF9DT05GSUciLCJjb25uZWN0b3IiLCJyZXNldE9uRGlzY29ubmVjdCIsImlubmVyRnJvbV8xIiwib2JzZXJ2YWJsZUZhY3RvcnkiLCJpbm5lckZyb20iLCJwZXJmb3JtYW5jZVRpbWVzdGFtcFByb3ZpZGVyXzEiLCJhbmltYXRpb25GcmFtZVByb3ZpZGVyXzEiLCJhbmltYXRpb25GcmFtZXNGYWN0b3J5IiwidGltZXN0YW1wUHJvdmlkZXIiLCJwcm92aWRlciIsInBlcmZvcm1hbmNlVGltZXN0YW1wUHJvdmlkZXIiLCJzdGFydCIsImlkIiwicnVuIiwiYW5pbWF0aW9uRnJhbWVQcm92aWRlciIsInJlcXVlc3RBbmltYXRpb25GcmFtZSIsImVsYXBzZWQiLCJjYW5jZWxBbmltYXRpb25GcmFtZSIsIkRFRkFVTFRfQU5JTUFUSU9OX0ZSQU1FUyIsImVtcHR5U2NoZWR1bGVkIiwic291cmNlcyIsInJlbWFpbmluZ0NvbXBsZXRpb25zIiwicmVtYWluaW5nRW1pc3Npb25zIiwic291cmNlSW5kZXgiLCJpbnB1dCIsImlzQXJyYXlMaWtlXzEiLCJub2RlRXZlbnRFbWl0dGVyTWV0aG9kcyIsImV2ZW50VGFyZ2V0TWV0aG9kcyIsImpxdWVyeU1ldGhvZHMiLCJ0b0NvbW1vbkhhbmRsZXJSZWdpc3RyeSIsInRhcmdldCIsImV2ZW50TmFtZSIsIm1ldGhvZE5hbWUiLCJoYW5kbGVyIiwib3B0aW9ucyIsImFkZEV2ZW50TGlzdGVuZXIiLCJyZW1vdmVFdmVudExpc3RlbmVyIiwiaXNFdmVudFRhcmdldCIsImFkZExpc3RlbmVyIiwicmVtb3ZlTGlzdGVuZXIiLCJpc05vZGVTdHlsZUV2ZW50RW1pdHRlciIsIm9uIiwib2ZmIiwiaXNKUXVlcnlTdHlsZUV2ZW50RW1pdHRlciIsImlzQXJyYXlMaWtlIiwic3ViVGFyZ2V0IiwiYWRkSGFuZGxlciIsInJlbW92ZUhhbmRsZXIiLCJyZXRWYWx1ZSIsImZyb21TdWJzY3JpYmFibGUiLCJzdWJzY3JpYmFibGUiLCJfX2dlbmVyYXRvciIsImJvZHkiLCJmIiwieSIsInQiLCJnIiwiXyIsImxhYmVsIiwic2VudCIsInRyeXMiLCJvcHMiLCJ2ZXJiIiwidiIsIm9wIiwicG9wIiwic3RlcCIsInNjaGVkdWxlSXRlcmFibGVfMSIsImluaXRpYWxTdGF0ZU9yT3B0aW9ucyIsImNvbmRpdGlvbiIsIml0ZXJhdGUiLCJyZXN1bHRTZWxlY3Rvck9yU2NoZWR1bGVyIiwiaW5pdGlhbFN0YXRlIiwiZ2VuIiwic2NoZWR1bGVJdGVyYWJsZSIsInRydWVSZXN1bHQiLCJmYWxzZVJlc3VsdCIsIl9fYXdhaXRlciIsIl9hcmd1bWVudHMiLCJQIiwiZ2VuZXJhdG9yIiwiZnVsZmlsbGVkIiwicmVqZWN0ZWQiLCJ0aGVuIiwiX19hc3luY1ZhbHVlcyIsImFzeW5jSXRlcmF0b3IiLCJzZXR0bGUiLCJmcm9tUmVhZGFibGVTdHJlYW1MaWtlIiwiZnJvbUFzeW5jSXRlcmFibGUiLCJmcm9tSXRlcmFibGUiLCJmcm9tUHJvbWlzZSIsImZyb21BcnJheUxpa2UiLCJmcm9tSW50ZXJvcE9ic2VydmFibGUiLCJpc1Byb21pc2VfMSIsImlzSW50ZXJvcE9ic2VydmFibGVfMSIsImlzQXN5bmNJdGVyYWJsZV8xIiwidGhyb3dVbm9ic2VydmFibGVFcnJvcl8xIiwiaXNJdGVyYWJsZV8xIiwiaXNSZWFkYWJsZVN0cmVhbUxpa2VfMSIsIm9iaiIsIm9icyIsImFycmF5IiwicHJvbWlzZSIsIml0ZXJhYmxlIiwiaXRlcmFibGVfMSIsIml0ZXJhYmxlXzFfMSIsImFzeW5jSXRlcmFibGUiLCJhc3luY0l0ZXJhYmxlXzEiLCJhc3luY0l0ZXJhYmxlXzFfMSIsInByb2Nlc3MiLCJjYXRjaCIsInJlYWRhYmxlU3RyZWFtIiwicmVhZGFibGVTdHJlYW1MaWtlVG9Bc3luY0dlbmVyYXRvciIsImlzSW50ZXJvcE9ic2VydmFibGUiLCJpc1Byb21pc2UiLCJpc0FzeW5jSXRlcmFibGUiLCJpc0l0ZXJhYmxlIiwiaXNSZWFkYWJsZVN0cmVhbUxpa2UiLCJjcmVhdGVJbnZhbGlkT2JzZXJ2YWJsZVR5cGVFcnJvciIsInBlcmlvZCIsImNvbmN1cnJlbnQiLCJwb3BOdW1iZXIiLCJhcmdzT3JBcmdBcnJheV8xIiwibmV4dFNvdXJjZXMiLCJhcmdzT3JBcmdBcnJheSIsInN1YnNjcmliZU5leHQiLCJuZXh0U291cmNlIiwiaW5uZXJTdWJzY3JpYmVyIiwiT3BlcmF0b3JTdWJzY3JpYmVyIiwiZW50cmllcyIsIm5vdF8xIiwicHJlZGljYXRlIiwibm90IiwicmFjZUluaXQiLCJzdWJzY3JpcHRpb25zIiwiZW5kIiwiZXJyb3JPckVycm9yRmFjdG9yeSIsImVycm9yRmFjdG9yeSIsImluaXQiLCJpc0RhdGVfMSIsImR1ZVRpbWUiLCJpbnRlcnZhbE9yU2NoZWR1bGVyIiwiaW50ZXJ2YWxEdXJhdGlvbiIsImR1ZSIsImlzVmFsaWREYXRlIiwicmVzb3VyY2VGYWN0b3J5IiwicmVzb3VyY2UiLCJidWZmZXJzIiwiY29tcGxldGVkIiwic29tZSIsIm9uTmV4dCIsIm9uQ29tcGxldGUiLCJvbkVycm9yIiwib25GaW5hbGl6ZSIsInNob3VsZFVuc3Vic2NyaWJlIiwiY2xvc2VkXzEiLCJkdXJhdGlvblNlbGVjdG9yIiwib3BlcmF0ZSIsImxhc3RWYWx1ZSIsImR1cmF0aW9uU3Vic2NyaWJlciIsImlzQ29tcGxldGUiLCJlbmREdXJhdGlvbiIsImNsZWFudXBEdXJhdGlvbiIsImR1cmF0aW9uIiwiY2xvc2luZ05vdGlmaWVyIiwiY3VycmVudEJ1ZmZlciIsImJ1ZmZlclNpemUiLCJzdGFydEJ1ZmZlckV2ZXJ5IiwidG9FbWl0IiwiYnVmZmVyc18xIiwiYnVmZmVyc18xXzEiLCJ0b0VtaXRfMSIsInRvRW1pdF8xXzEiLCJlXzMiLCJidWZmZXJzXzIiLCJidWZmZXJzXzJfMSIsImVfM18xIiwiYnVmZmVyVGltZVNwYW4iLCJvdGhlckFyZ3MiLCJidWZmZXJDcmVhdGlvbkludGVydmFsIiwibWF4QnVmZmVyU2l6ZSIsImJ1ZmZlclJlY29yZHMiLCJyZXN0YXJ0T25FbWl0IiwiZW1pdCIsInJlY29yZCIsInN0YXJ0QnVmZmVyIiwicmVjb3JkXzEiLCJidWZmZXJUaW1lU3Vic2NyaWJlciIsInJlY29yZHNDb3B5IiwicmVjb3Jkc0NvcHlfMSIsInJlY29yZHNDb3B5XzFfMSIsIm9wZW5pbmdzIiwiY2xvc2luZ1NlbGVjdG9yIiwib3BlblZhbHVlIiwiY2xvc2luZ1N1YnNjcmlwdGlvbiIsImNsb3NpbmdTdWJzY3JpYmVyIiwib3BlbkJ1ZmZlciIsInNlbGVjdG9yIiwiaGFuZGxlZFJlc3VsdCIsImlubmVyU3ViIiwic3luY1Vuc3ViIiwiam9pbkFsbEludGVybmFsc18xIiwicHJvamVjdCIsImpvaW5BbGxJbnRlcm5hbHMiLCJvdGhlclNvdXJjZXMiLCJpbm5lck9ic2VydmFibGUiLCJmcm9tU3Vic2NyaWJhYmxlXzEiLCJ0b3RhbCIsImFjdGl2ZVRhc2siLCJsYXN0VGltZSIsImVtaXRXaGVuSWRsZSIsInRhcmdldFRpbWUiLCJkZWxheUR1cmF0aW9uU2VsZWN0b3IiLCJzdWJzY3JpcHRpb25EZWxheSIsImluZGV4Iiwia2V5U2VsZWN0b3IiLCJmbHVzaGVzIiwiZGlzdGluY3RLZXlzIiwiU2V0Iiwia2V5IiwiaGFzIiwiY2xlYXIiLCJkZWZhdWx0Q29tcGFyZSIsImEiLCJjb21wYXJhdG9yIiwicHJldmlvdXNLZXkiLCJjdXJyZW50S2V5IiwiY29tcGFyZSIsImhhc0RlZmF1bHRWYWx1ZSIsImlpIiwib3V0ZXJWYWx1ZSIsIm1lcmdlSW50ZXJuYWxzXzEiLCJtZXJnZUludGVybmFscyIsImNhbGxiYWNrIiwiY3JlYXRlRmluZCIsImVsZW1lbnRPck9wdGlvbnMiLCJlbGVtZW50IiwiZ3JvdXBzIiwiTWFwIiwibm90aWZ5IiwiY2IiLCJoYW5kbGVFcnJvciIsImNvbnN1bWVyIiwiYWN0aXZlR3JvdXBzIiwidGVhcmRvd25BdHRlbXB0ZWQiLCJncm91cEJ5U291cmNlU3Vic2NyaWJlciIsImtleV8xIiwiZ3JvdXBfMSIsInNldCIsImdyb3VwZWQiLCJncm91cFN1YmplY3QiLCJncm91cFN1YnNjcmliZXIiLCJkdXJhdGlvblN1YnNjcmliZXJfMSIsImRlbGV0ZSIsImpvaW5GbiIsImNvbXBhcmVyIiwib25CZWZvcmVOZXh0IiwiaW5uZXJTdWJTY2hlZHVsZXIiLCJhZGRpdGlvbmFsRmluYWxpemVyIiwiY2hlY2tDb21wbGV0ZSIsIm91dGVyTmV4dCIsImRvSW5uZXJTdWIiLCJpbm5lckNvbXBsZXRlIiwiaW5uZXJWYWx1ZSIsImJ1ZmZlcmVkVmFsdWUiLCJhY2N1bXVsYXRvciIsInNlZWQiLCJzdWJqZWN0T3JTdWJqZWN0RmFjdG9yeSIsInByZXYiLCJoYXNQcmV2IiwicHJvcGVydGllcyIsIkVycm9yIiwiY3VycmVudFByb3AiLCJpbml0aWFsVmFsdWUiLCJzZWxlY3Rvck9yU2NoZWR1bGVyIiwic2NhbkludGVybmFsc18xIiwic2NhbkludGVybmFscyIsInJlZkNvdW50ZXIiLCJzaGFyZWRDb25uZWN0aW9uIiwiY29ubiIsImNvdW50T3JDb25maWciLCJzb3VyY2VTdWIiLCJzb0ZhciIsInJlc3Vic2NyaWJlIiwibm90aWZpZXIiLCJub3RpZmllclN1YnNjcmliZXJfMSIsInN1YnNjcmliZVRvU291cmNlIiwiY29tcGxldGlvbnMkIiwic3luY1Jlc3ViIiwiaXNOb3RpZmllckNvbXBsZXRlIiwiaXNNYWluQ29tcGxldGUiLCJzdWJzY3JpYmVGb3JSZXBlYXRXaGVuIiwiY29uZmlnT3JDb3VudCIsInJlc2V0T25TdWNjZXNzIiwic3Vic2NyaWJlRm9yUmV0cnkiLCJyZXN1Yl8xIiwiZXJyb3JzJCIsInN1YnNjcmliZUZvclJldHJ5V2hlbiIsImhhc1NlZWQiLCJlbWl0T25OZXh0IiwiZW1pdEJlZm9yZUNvbXBsZXRlIiwiaGFzU3RhdGUiLCJjb21wYXJlVG8iLCJhU3RhdGUiLCJiU3RhdGUiLCJpc0VxdWFsIiwiY3JlYXRlU3Vic2NyaWJlciIsInNlbGZTdGF0ZSIsIm90aGVyU3RhdGUiLCJzZXF1ZW5jZUVxdWFsU3Vic2NyaWJlciIsImhhbmRsZVJlc2V0IiwicmVzZXQiLCJvblN1YnNjcmliZXIiLCJyZXNldE9uRXJyb3IiLCJyZXNldE9uQ29tcGxldGUiLCJyZXNldE9uUmVmQ291bnRaZXJvIiwid3JhcHBlclNvdXJjZSIsInJlc2V0Q29ubmVjdGlvbiIsImhhc0NvbXBsZXRlZCIsImhhc0Vycm9yZWQiLCJjYW5jZWxSZXNldCIsInJlc2V0QW5kVW5zdWJzY3JpYmUiLCJkZXN0IiwiY29uZmlnT3JCdWZmZXJTaXplIiwic2luZ2xlVmFsdWUiLCJzZWVuVmFsdWUiLCJza2lwQ291bnQiLCJyaW5nIiwic2VlbiIsInZhbHVlSW5kZXgiLCJvbGRWYWx1ZSIsInRha2luZyIsInNraXBTdWJzY3JpYmVyIiwiaW5uZXJJbmRleCIsIm91dGVySW5kZXgiLCJidWZmZXJfMV8xIiwiaW5jbHVzaXZlIiwidGFwT2JzZXJ2ZXIiLCJpc1Vuc3ViIiwibGVhZGluZyIsInRyYWlsaW5nIiwic2VuZFZhbHVlIiwidGhyb3R0bGVkIiwiZW5kVGhyb3R0bGluZyIsInNlbmQiLCJjbGVhbnVwVGhyb3R0bGluZyIsInN0YXJ0VGhyb3R0bGUiLCJkdXJhdGlvbiQiLCJkZWZhdWx0RXJyb3JGYWN0b3J5IiwiVGltZUludGVydmFsIiwiY3JlYXRlRXJyb3JDbGFzc18xIiwidGltZW91dEVycm9yRmFjdG9yeSIsImluZm8iLCJjcmVhdGVFcnJvckNsYXNzIiwibWVzc2FnZSIsIm5hbWUiLCJzY2hlZHVsZXJBcmciLCJlYWNoIiwid2l0aCIsIl93aXRoIiwibWV0YSIsIm9yaWdpbmFsU291cmNlU3Vic2NyaXB0aW9uIiwidGltZXJTdWJzY3JpcHRpb24iLCJzdGFydFRpbWVyIiwid2l0aE9ic2VydmFibGUiLCJhcnJSZWR1Y2VyIiwiYXJyIiwid2luZG93Qm91bmRhcmllcyIsIndpbmRvd1N1YmplY3QiLCJ3aW5kb3dTaXplIiwic3RhcnRXaW5kb3dFdmVyeSIsInN0YXJ0RXZlcnkiLCJ3aW5kb3dzIiwid2luZG93c18xIiwid2luZG93c18xXzEiLCJjIiwid2luZG93XzIiLCJ3aW5kb3dUaW1lU3BhbiIsIndpbmRvd0NyZWF0aW9uSW50ZXJ2YWwiLCJtYXhXaW5kb3dTaXplIiwid2luZG93UmVjb3JkcyIsInJlc3RhcnRPbkNsb3NlIiwiY2xvc2VXaW5kb3ciLCJzdGFydFdpbmRvdyIsImxvb3AiLCJ0ZXJtaW5hdGUiLCJ3aW5kb3dzQ29weSIsIndpbmRvd3NDb3B5XzEiLCJ3aW5kb3dzQ29weV8xXzEiLCJvcGVuV2luZG93IiwiaW5wdXRzIiwibGVuIiwib3RoZXJWYWx1ZXMiLCJyZWFkeSIsIm90aGVySW5wdXRzIiwic2NoZWR1bGVBcnJheSIsInNjaGVkdWxlQXN5bmNJdGVyYWJsZSIsIml0ZXJhdG9yXzEiLCJzY2hlZHVsZU9ic2VydmFibGUiLCJzY2hlZHVsZVByb21pc2UiLCJzY2hlZHVsZVJlYWRhYmxlU3RyZWFtTGlrZSIsInNjaGVkdWxlQXN5bmNJdGVyYWJsZV8xIiwic2NoZWR1bGVPYnNlcnZhYmxlXzEiLCJzY2hlZHVsZVByb21pc2VfMSIsInNjaGVkdWxlQXJyYXlfMSIsInNjaGVkdWxlUmVhZGFibGVTdHJlYW1MaWtlXzEiLCJBY3Rpb24iLCJBbmltYXRpb25GcmFtZUFjdGlvbiIsIkFzeW5jQWN0aW9uXzEiLCJyZXF1ZXN0QXN5bmNJZCIsImFjdGlvbnMiLCJfc2NoZWR1bGVkIiwiZmx1c2giLCJyZWN5Y2xlQXN5bmNJZCIsIkFzeW5jQWN0aW9uIiwiQW5pbWF0aW9uRnJhbWVTY2hlZHVsZXIiLCJhY3Rpb24iLCJfYWN0aXZlIiwiZmx1c2hJZCIsIkFzeW5jU2NoZWR1bGVyIiwiQXNhcEFjdGlvbiIsImltbWVkaWF0ZVByb3ZpZGVyXzEiLCJpbW1lZGlhdGVQcm92aWRlciIsInNldEltbWVkaWF0ZSIsImNsZWFySW1tZWRpYXRlIiwiQXNhcFNjaGVkdWxlciIsIkFjdGlvbl8xIiwiaW50ZXJ2YWxQcm92aWRlcl8xIiwicGVuZGluZyIsIl9pZCIsImludGVydmFsUHJvdmlkZXIiLCJzZXRJbnRlcnZhbCIsIl9zY2hlZHVsZXIiLCJjbGVhckludGVydmFsIiwiX2V4ZWN1dGUiLCJfZGVsYXkiLCJlcnJvclZhbHVlIiwiZXJyb3JlZCIsIlNjaGVkdWxlckFjdGlvbiIsIlF1ZXVlQWN0aW9uIiwiUXVldWVTY2hlZHVsZXIiLCJtYXhGcmFtZXMiLCJmcmFtZSIsImZyYW1lVGltZUZhY3RvciIsIk51bWJlciIsImlzRmluaXRlIiwic29ydCIsInNvcnRBY3Rpb25zIiwiQW5pbWF0aW9uRnJhbWVBY3Rpb25fMSIsIkFuaW1hdGlvbkZyYW1lU2NoZWR1bGVyXzEiLCJyZXF1ZXN0IiwiY2FuY2VsIiwiZGVsZWdhdGUiLCJoYW5kbGUiLCJBc2FwQWN0aW9uXzEiLCJBc2FwU2NoZWR1bGVyXzEiLCJBc3luY1NjaGVkdWxlcl8xIiwiRGF0ZSIsIkltbWVkaWF0ZV8xIiwiSW1tZWRpYXRlIiwicGVyZm9ybWFuY2UiLCJRdWV1ZUFjdGlvbl8xIiwiUXVldWVTY2hlZHVsZXJfMSIsImNsZWFyVGltZW91dCIsImdldFN5bWJvbEl0ZXJhdG9yIiwiVGVzdFRvb2xzIiwicmVzb2x2ZWQiLCJuZXh0SGFuZGxlIiwiYWN0aXZlSGFuZGxlcyIsImZpbmRBbmRDbGVhckhhbmRsZSIsInRvU3RyaW5nIiwiam9pbiIsImdldFByb3RvdHlwZU9mIiwib2JqZWN0UHJvdG8iLCJnZXRLZXlzIiwiaXRlbSIsImluZGV4T2YiLCJjcmVhdGVJbXBsIiwiY3RvckZ1bmMiLCJpbnN0YW5jZSIsInN0YWNrIiwiY29udGV4dCIsImlzUm9vdCIsImVycm9yVGhyb3duIiwicGFyZW50U3Vic2NyaXB0aW9uIiwic2NoZWR1bGVTdWJzY3JpcHRpb24iLCJpc05hTiIsIl9fYXdhaXQiLCJfX2FzeW5jR2VuZXJhdG9yIiwicSIsInJlc3VtZSIsImZ1bGZpbGwiLCJyZWFkZXIiLCJnZXRSZWFkZXIiLCJyZWFkIiwicmVsZWFzZUxvY2siLCJsaWZ0ZWRTb3VyY2UiLCJjYWxsT3JBcHBseSIsInByZWQiLCJmbnMiLCJBUElfVVJMIiwiY2FudmFzIiwiZ2V0Q29udGV4dCIsImltYWdlU21vb3RoaW5nRW5hYmxlZCIsInJlc2l6ZSIsImlubmVyV2lkdGgiLCJpbm5lckhlaWdodCIsIm5ld1dpZHRoIiwibmV3SGVpZ2h0Iiwid2lkdGgiLCJoZWlnaHQiLCJHYW1lIiwiZmV0Y2hGcm9tQXBpJCIsInBhdGgiLCJyZXF1ZXN0SW5pdCIsImZldGNoIiwicmVzIiwib2siLCJqc29uIiwiY29uc29sZSIsImZldGNoVXNlclByb2ZpbGUkIiwidXNlcm5hbWUiLCJmZXRjaExlYWRlckJvYXJkJCIsImZldGNoU3ByaXRlJCIsIl9fd2VicGFja19tb2R1bGVfY2FjaGVfXyIsIl9fd2VicGFja19yZXF1aXJlX18iLCJtb2R1bGVJZCIsImNhY2hlZE1vZHVsZSIsIm1vZHVsZSIsIl9fd2VicGFja19tb2R1bGVzX18iLCJkb2N1bWVudCIsImNyZWF0ZUVsZW1lbnQiLCJhcHBlbmRDaGlsZCIsImxvZyJdLCJzb3VyY2VSb290IjoiIn0=