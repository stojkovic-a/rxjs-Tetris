(()=>{"use strict";var e={2872:function(e,r,t){var n=this&&this.__createBinding||(Object.create?function(e,r,t,n){void 0===n&&(n=t),Object.defineProperty(e,n,{enumerable:!0,get:function(){return r[t]}})}:function(e,r,t,n){void 0===n&&(n=t),e[n]=r[t]}),o=this&&this.__exportStar||function(e,r){for(var t in e)"default"===t||Object.prototype.hasOwnProperty.call(r,t)||n(r,e,t)};Object.defineProperty(r,"__esModule",{value:!0}),r.interval=r.iif=r.generate=r.fromEventPattern=r.fromEvent=r.from=r.forkJoin=r.empty=r.defer=r.connectable=r.concat=r.combineLatest=r.bindNodeCallback=r.bindCallback=r.UnsubscriptionError=r.TimeoutError=r.SequenceError=r.ObjectUnsubscribedError=r.NotFoundError=r.EmptyError=r.ArgumentOutOfRangeError=r.firstValueFrom=r.lastValueFrom=r.isObservable=r.identity=r.noop=r.pipe=r.NotificationKind=r.Notification=r.Subscriber=r.Subscription=r.Scheduler=r.VirtualAction=r.VirtualTimeScheduler=r.animationFrameScheduler=r.animationFrame=r.queueScheduler=r.queue=r.asyncScheduler=r.async=r.asapScheduler=r.asap=r.AsyncSubject=r.ReplaySubject=r.BehaviorSubject=r.Subject=r.animationFrames=r.observable=r.ConnectableObservable=r.Observable=void 0,r.filter=r.expand=r.exhaustMap=r.exhaustAll=r.exhaust=r.every=r.endWith=r.elementAt=r.distinctUntilKeyChanged=r.distinctUntilChanged=r.distinct=r.dematerialize=r.delayWhen=r.delay=r.defaultIfEmpty=r.debounceTime=r.debounce=r.count=r.connect=r.concatWith=r.concatMapTo=r.concatMap=r.concatAll=r.combineLatestWith=r.combineLatestAll=r.combineAll=r.catchError=r.bufferWhen=r.bufferToggle=r.bufferTime=r.bufferCount=r.buffer=r.auditTime=r.audit=r.config=r.NEVER=r.EMPTY=r.scheduled=r.zip=r.using=r.timer=r.throwError=r.range=r.race=r.partition=r.pairs=r.onErrorResumeNext=r.of=r.never=r.merge=void 0,r.switchMap=r.switchAll=r.subscribeOn=r.startWith=r.skipWhile=r.skipUntil=r.skipLast=r.skip=r.single=r.shareReplay=r.share=r.sequenceEqual=r.scan=r.sampleTime=r.sample=r.refCount=r.retryWhen=r.retry=r.repeatWhen=r.repeat=r.reduce=r.raceWith=r.publishReplay=r.publishLast=r.publishBehavior=r.publish=r.pluck=r.pairwise=r.onErrorResumeNextWith=r.observeOn=r.multicast=r.min=r.mergeWith=r.mergeScan=r.mergeMapTo=r.mergeMap=r.flatMap=r.mergeAll=r.max=r.materialize=r.mapTo=r.map=r.last=r.isEmpty=r.ignoreElements=r.groupBy=r.first=r.findIndex=r.find=r.finalize=void 0,r.zipWith=r.zipAll=r.withLatestFrom=r.windowWhen=r.windowToggle=r.windowTime=r.windowCount=r.window=r.toArray=r.timestamp=r.timeoutWith=r.timeout=r.timeInterval=r.throwIfEmpty=r.throttleTime=r.throttle=r.tap=r.takeWhile=r.takeUntil=r.takeLast=r.take=r.switchScan=r.switchMapTo=void 0;var i=t(2419);Object.defineProperty(r,"Observable",{enumerable:!0,get:function(){return i.Observable}});var u=t(9518);Object.defineProperty(r,"ConnectableObservable",{enumerable:!0,get:function(){return u.ConnectableObservable}});var a=t(2801);Object.defineProperty(r,"observable",{enumerable:!0,get:function(){return a.observable}});var c=t(9106);Object.defineProperty(r,"animationFrames",{enumerable:!0,get:function(){return c.animationFrames}});var l=t(3032);Object.defineProperty(r,"Subject",{enumerable:!0,get:function(){return l.Subject}});var s=t(5240);Object.defineProperty(r,"BehaviorSubject",{enumerable:!0,get:function(){return s.BehaviorSubject}});var f=t(3274);Object.defineProperty(r,"ReplaySubject",{enumerable:!0,get:function(){return f.ReplaySubject}});var d=t(280);Object.defineProperty(r,"AsyncSubject",{enumerable:!0,get:function(){return d.AsyncSubject}});var p=t(580);Object.defineProperty(r,"asap",{enumerable:!0,get:function(){return p.asap}}),Object.defineProperty(r,"asapScheduler",{enumerable:!0,get:function(){return p.asapScheduler}});var v=t(2445);Object.defineProperty(r,"async",{enumerable:!0,get:function(){return v.async}}),Object.defineProperty(r,"asyncScheduler",{enumerable:!0,get:function(){return v.asyncScheduler}});var b=t(8615);Object.defineProperty(r,"queue",{enumerable:!0,get:function(){return b.queue}}),Object.defineProperty(r,"queueScheduler",{enumerable:!0,get:function(){return b.queueScheduler}});var h=t(3660);Object.defineProperty(r,"animationFrame",{enumerable:!0,get:function(){return h.animationFrame}}),Object.defineProperty(r,"animationFrameScheduler",{enumerable:!0,get:function(){return h.animationFrameScheduler}});var y=t(4123);Object.defineProperty(r,"VirtualTimeScheduler",{enumerable:!0,get:function(){return y.VirtualTimeScheduler}}),Object.defineProperty(r,"VirtualAction",{enumerable:!0,get:function(){return y.VirtualAction}});var m=t(218);Object.defineProperty(r,"Scheduler",{enumerable:!0,get:function(){return m.Scheduler}});var _=t(3865);Object.defineProperty(r,"Subscription",{enumerable:!0,get:function(){return _.Subscription}});var O=t(5125);Object.defineProperty(r,"Subscriber",{enumerable:!0,get:function(){return O.Subscriber}});var g=t(3104);Object.defineProperty(r,"Notification",{enumerable:!0,get:function(){return g.Notification}}),Object.defineProperty(r,"NotificationKind",{enumerable:!0,get:function(){return g.NotificationKind}});var P=t(9985);Object.defineProperty(r,"pipe",{enumerable:!0,get:function(){return P.pipe}});var w=t(2576);Object.defineProperty(r,"noop",{enumerable:!0,get:function(){return w.noop}});var S=t(4781);Object.defineProperty(r,"identity",{enumerable:!0,get:function(){return S.identity}});var j=t(8386);Object.defineProperty(r,"isObservable",{enumerable:!0,get:function(){return j.isObservable}});var x=t(9309);Object.defineProperty(r,"lastValueFrom",{enumerable:!0,get:function(){return x.lastValueFrom}});var E=t(8182);Object.defineProperty(r,"firstValueFrom",{enumerable:!0,get:function(){return E.firstValueFrom}});var M=t(2351);Object.defineProperty(r,"ArgumentOutOfRangeError",{enumerable:!0,get:function(){return M.ArgumentOutOfRangeError}});var A=t(9474);Object.defineProperty(r,"EmptyError",{enumerable:!0,get:function(){return A.EmptyError}});var T=t(8598);Object.defineProperty(r,"NotFoundError",{enumerable:!0,get:function(){return T.NotFoundError}});var I=t(2642);Object.defineProperty(r,"ObjectUnsubscribedError",{enumerable:!0,get:function(){return I.ObjectUnsubscribedError}});var F=t(6156);Object.defineProperty(r,"SequenceError",{enumerable:!0,get:function(){return F.SequenceError}});var C=t(4173);Object.defineProperty(r,"TimeoutError",{enumerable:!0,get:function(){return C.TimeoutError}});var k=t(4805);Object.defineProperty(r,"UnsubscriptionError",{enumerable:!0,get:function(){return k.UnsubscriptionError}});var R=t(3050);Object.defineProperty(r,"bindCallback",{enumerable:!0,get:function(){return R.bindCallback}});var N=t(8130);Object.defineProperty(r,"bindNodeCallback",{enumerable:!0,get:function(){return N.bindNodeCallback}});var L=t(9258);Object.defineProperty(r,"combineLatest",{enumerable:!0,get:function(){return L.combineLatest}});var W=t(2239);Object.defineProperty(r,"concat",{enumerable:!0,get:function(){return W.concat}});var U=t(2873);Object.defineProperty(r,"connectable",{enumerable:!0,get:function(){return U.connectable}});var D=t(7885);Object.defineProperty(r,"defer",{enumerable:!0,get:function(){return D.defer}});var z=t(6332);Object.defineProperty(r,"empty",{enumerable:!0,get:function(){return z.empty}});var G=t(7245);Object.defineProperty(r,"forkJoin",{enumerable:!0,get:function(){return G.forkJoin}});var B=t(5432);Object.defineProperty(r,"from",{enumerable:!0,get:function(){return B.from}});var V=t(3267);Object.defineProperty(r,"fromEvent",{enumerable:!0,get:function(){return V.fromEvent}});var q=t(470);Object.defineProperty(r,"fromEventPattern",{enumerable:!0,get:function(){return q.fromEventPattern}});var Y=t(4303);Object.defineProperty(r,"generate",{enumerable:!0,get:function(){return Y.generate}});var H=t(1757);Object.defineProperty(r,"iif",{enumerable:!0,get:function(){return H.iif}});var X=t(8990);Object.defineProperty(r,"interval",{enumerable:!0,get:function(){return X.interval}});var $=t(1846);Object.defineProperty(r,"merge",{enumerable:!0,get:function(){return $.merge}});var K=t(1339);Object.defineProperty(r,"never",{enumerable:!0,get:function(){return K.never}});var J=t(5726);Object.defineProperty(r,"of",{enumerable:!0,get:function(){return J.of}});var Q=t(724);Object.defineProperty(r,"onErrorResumeNext",{enumerable:!0,get:function(){return Q.onErrorResumeNext}});var Z=t(4380);Object.defineProperty(r,"pairs",{enumerable:!0,get:function(){return Z.pairs}});var ee=t(7273);Object.defineProperty(r,"partition",{enumerable:!0,get:function(){return ee.partition}});var re=t(5182);Object.defineProperty(r,"race",{enumerable:!0,get:function(){return re.race}});var te=t(322);Object.defineProperty(r,"range",{enumerable:!0,get:function(){return te.range}});var ne=t(2098);Object.defineProperty(r,"throwError",{enumerable:!0,get:function(){return ne.throwError}});var oe=t(7513);Object.defineProperty(r,"timer",{enumerable:!0,get:function(){return oe.timer}});var ie=t(2962);Object.defineProperty(r,"using",{enumerable:!0,get:function(){return ie.using}});var ue=t(7654);Object.defineProperty(r,"zip",{enumerable:!0,get:function(){return ue.zip}});var ae=t(5207);Object.defineProperty(r,"scheduled",{enumerable:!0,get:function(){return ae.scheduled}});var ce=t(6332);Object.defineProperty(r,"EMPTY",{enumerable:!0,get:function(){return ce.EMPTY}});var le=t(1339);Object.defineProperty(r,"NEVER",{enumerable:!0,get:function(){return le.NEVER}}),o(t(8433),r);var se=t(3280);Object.defineProperty(r,"config",{enumerable:!0,get:function(){return se.config}});var fe=t(6474);Object.defineProperty(r,"audit",{enumerable:!0,get:function(){return fe.audit}});var de=t(5382);Object.defineProperty(r,"auditTime",{enumerable:!0,get:function(){return de.auditTime}});var pe=t(9715);Object.defineProperty(r,"buffer",{enumerable:!0,get:function(){return pe.buffer}});var ve=t(3814);Object.defineProperty(r,"bufferCount",{enumerable:!0,get:function(){return ve.bufferCount}});var be=t(7211);Object.defineProperty(r,"bufferTime",{enumerable:!0,get:function(){return be.bufferTime}});var he=t(4943);Object.defineProperty(r,"bufferToggle",{enumerable:!0,get:function(){return he.bufferToggle}});var ye=t(1240);Object.defineProperty(r,"bufferWhen",{enumerable:!0,get:function(){return ye.bufferWhen}});var me=t(9548);Object.defineProperty(r,"catchError",{enumerable:!0,get:function(){return me.catchError}});var _e=t(2128);Object.defineProperty(r,"combineAll",{enumerable:!0,get:function(){return _e.combineAll}});var Oe=t(3240);Object.defineProperty(r,"combineLatestAll",{enumerable:!0,get:function(){return Oe.combineLatestAll}});var ge=t(5024);Object.defineProperty(r,"combineLatestWith",{enumerable:!0,get:function(){return ge.combineLatestWith}});var Pe=t(4413);Object.defineProperty(r,"concatAll",{enumerable:!0,get:function(){return Pe.concatAll}});var we=t(7498);Object.defineProperty(r,"concatMap",{enumerable:!0,get:function(){return we.concatMap}});var Se=t(6109);Object.defineProperty(r,"concatMapTo",{enumerable:!0,get:function(){return Se.concatMapTo}});var je=t(9664);Object.defineProperty(r,"concatWith",{enumerable:!0,get:function(){return je.concatWith}});var xe=t(1995);Object.defineProperty(r,"connect",{enumerable:!0,get:function(){return xe.connect}});var Ee=t(993);Object.defineProperty(r,"count",{enumerable:!0,get:function(){return Ee.count}});var Me=t(496);Object.defineProperty(r,"debounce",{enumerable:!0,get:function(){return Me.debounce}});var Ae=t(1385);Object.defineProperty(r,"debounceTime",{enumerable:!0,get:function(){return Ae.debounceTime}});var Te=t(1658);Object.defineProperty(r,"defaultIfEmpty",{enumerable:!0,get:function(){return Te.defaultIfEmpty}});var Ie=t(5841);Object.defineProperty(r,"delay",{enumerable:!0,get:function(){return Ie.delay}});var Fe=t(8798);Object.defineProperty(r,"delayWhen",{enumerable:!0,get:function(){return Fe.delayWhen}});var Ce=t(1080);Object.defineProperty(r,"dematerialize",{enumerable:!0,get:function(){return Ce.dematerialize}});var ke=t(3054);Object.defineProperty(r,"distinct",{enumerable:!0,get:function(){return ke.distinct}});var Re=t(8737);Object.defineProperty(r,"distinctUntilChanged",{enumerable:!0,get:function(){return Re.distinctUntilChanged}});var Ne=t(7957);Object.defineProperty(r,"distinctUntilKeyChanged",{enumerable:!0,get:function(){return Ne.distinctUntilKeyChanged}});var Le=t(8633);Object.defineProperty(r,"elementAt",{enumerable:!0,get:function(){return Le.elementAt}});var We=t(911);Object.defineProperty(r,"endWith",{enumerable:!0,get:function(){return We.endWith}});var Ue=t(2096);Object.defineProperty(r,"every",{enumerable:!0,get:function(){return Ue.every}});var De=t(67);Object.defineProperty(r,"exhaust",{enumerable:!0,get:function(){return De.exhaust}});var ze=t(5337);Object.defineProperty(r,"exhaustAll",{enumerable:!0,get:function(){return ze.exhaustAll}});var Ge=t(5635);Object.defineProperty(r,"exhaustMap",{enumerable:!0,get:function(){return Ge.exhaustMap}});var Be=t(9745);Object.defineProperty(r,"expand",{enumerable:!0,get:function(){return Be.expand}});var Ve=t(9154);Object.defineProperty(r,"filter",{enumerable:!0,get:function(){return Ve.filter}});var qe=t(9283);Object.defineProperty(r,"finalize",{enumerable:!0,get:function(){return qe.finalize}});var Ye=t(7119);Object.defineProperty(r,"find",{enumerable:!0,get:function(){return Ye.find}});var He=t(4706);Object.defineProperty(r,"findIndex",{enumerable:!0,get:function(){return He.findIndex}});var Xe=t(9219);Object.defineProperty(r,"first",{enumerable:!0,get:function(){return Xe.first}});var $e=t(9749);Object.defineProperty(r,"groupBy",{enumerable:!0,get:function(){return $e.groupBy}});var Ke=t(9438);Object.defineProperty(r,"ignoreElements",{enumerable:!0,get:function(){return Ke.ignoreElements}});var Je=t(8515);Object.defineProperty(r,"isEmpty",{enumerable:!0,get:function(){return Je.isEmpty}});var Qe=t(2435);Object.defineProperty(r,"last",{enumerable:!0,get:function(){return Qe.last}});var Ze=t(7291);Object.defineProperty(r,"map",{enumerable:!0,get:function(){return Ze.map}});var er=t(8313);Object.defineProperty(r,"mapTo",{enumerable:!0,get:function(){return er.mapTo}});var rr=t(3209);Object.defineProperty(r,"materialize",{enumerable:!0,get:function(){return rr.materialize}});var tr=t(2620);Object.defineProperty(r,"max",{enumerable:!0,get:function(){return tr.max}});var nr=t(3783);Object.defineProperty(r,"mergeAll",{enumerable:!0,get:function(){return nr.mergeAll}});var or=t(1788);Object.defineProperty(r,"flatMap",{enumerable:!0,get:function(){return or.flatMap}});var ir=t(9475);Object.defineProperty(r,"mergeMap",{enumerable:!0,get:function(){return ir.mergeMap}});var ur=t(1211);Object.defineProperty(r,"mergeMapTo",{enumerable:!0,get:function(){return ur.mergeMapTo}});var ar=t(7267);Object.defineProperty(r,"mergeScan",{enumerable:!0,get:function(){return ar.mergeScan}});var cr=t(9303);Object.defineProperty(r,"mergeWith",{enumerable:!0,get:function(){return cr.mergeWith}});var lr=t(9714);Object.defineProperty(r,"min",{enumerable:!0,get:function(){return lr.min}});var sr=t(3848);Object.defineProperty(r,"multicast",{enumerable:!0,get:function(){return sr.multicast}});var fr=t(1184);Object.defineProperty(r,"observeOn",{enumerable:!0,get:function(){return fr.observeOn}});var dr=t(7582);Object.defineProperty(r,"onErrorResumeNextWith",{enumerable:!0,get:function(){return dr.onErrorResumeNextWith}});var pr=t(2731);Object.defineProperty(r,"pairwise",{enumerable:!0,get:function(){return pr.pairwise}});var vr=t(4691);Object.defineProperty(r,"pluck",{enumerable:!0,get:function(){return vr.pluck}});var br=t(4474);Object.defineProperty(r,"publish",{enumerable:!0,get:function(){return br.publish}});var hr=t(52);Object.defineProperty(r,"publishBehavior",{enumerable:!0,get:function(){return hr.publishBehavior}});var yr=t(2110);Object.defineProperty(r,"publishLast",{enumerable:!0,get:function(){return yr.publishLast}});var mr=t(9864);Object.defineProperty(r,"publishReplay",{enumerable:!0,get:function(){return mr.publishReplay}});var _r=t(179);Object.defineProperty(r,"raceWith",{enumerable:!0,get:function(){return _r.raceWith}});var Or=t(122);Object.defineProperty(r,"reduce",{enumerable:!0,get:function(){return Or.reduce}});var gr=t(5313);Object.defineProperty(r,"repeat",{enumerable:!0,get:function(){return gr.repeat}});var Pr=t(4068);Object.defineProperty(r,"repeatWhen",{enumerable:!0,get:function(){return Pr.repeatWhen}});var wr=t(64);Object.defineProperty(r,"retry",{enumerable:!0,get:function(){return wr.retry}});var Sr=t(1188);Object.defineProperty(r,"retryWhen",{enumerable:!0,get:function(){return Sr.retryWhen}});var jr=t(8739);Object.defineProperty(r,"refCount",{enumerable:!0,get:function(){return jr.refCount}});var xr=t(4193);Object.defineProperty(r,"sample",{enumerable:!0,get:function(){return xr.sample}});var Er=t(6170);Object.defineProperty(r,"sampleTime",{enumerable:!0,get:function(){return Er.sampleTime}});var Mr=t(5876);Object.defineProperty(r,"scan",{enumerable:!0,get:function(){return Mr.scan}});var Ar=t(1791);Object.defineProperty(r,"sequenceEqual",{enumerable:!0,get:function(){return Ar.sequenceEqual}});var Tr=t(5137);Object.defineProperty(r,"share",{enumerable:!0,get:function(){return Tr.share}});var Ir=t(1348);Object.defineProperty(r,"shareReplay",{enumerable:!0,get:function(){return Ir.shareReplay}});var Fr=t(8242);Object.defineProperty(r,"single",{enumerable:!0,get:function(){return Fr.single}});var Cr=t(3169);Object.defineProperty(r,"skip",{enumerable:!0,get:function(){return Cr.skip}});var kr=t(2454);Object.defineProperty(r,"skipLast",{enumerable:!0,get:function(){return kr.skipLast}});var Rr=t(6931);Object.defineProperty(r,"skipUntil",{enumerable:!0,get:function(){return Rr.skipUntil}});var Nr=t(7913);Object.defineProperty(r,"skipWhile",{enumerable:!0,get:function(){return Nr.skipWhile}});var Lr=t(9234);Object.defineProperty(r,"startWith",{enumerable:!0,get:function(){return Lr.startWith}});var Wr=t(276);Object.defineProperty(r,"subscribeOn",{enumerable:!0,get:function(){return Wr.subscribeOn}});var Ur=t(9253);Object.defineProperty(r,"switchAll",{enumerable:!0,get:function(){return Ur.switchAll}});var Dr=t(8518);Object.defineProperty(r,"switchMap",{enumerable:!0,get:function(){return Dr.switchMap}});var zr=t(1173);Object.defineProperty(r,"switchMapTo",{enumerable:!0,get:function(){return zr.switchMapTo}});var Gr=t(3855);Object.defineProperty(r,"switchScan",{enumerable:!0,get:function(){return Gr.switchScan}});var Br=t(4783);Object.defineProperty(r,"take",{enumerable:!0,get:function(){return Br.take}});var Vr=t(1980);Object.defineProperty(r,"takeLast",{enumerable:!0,get:function(){return Vr.takeLast}});var qr=t(9845);Object.defineProperty(r,"takeUntil",{enumerable:!0,get:function(){return qr.takeUntil}});var Yr=t(6060);Object.defineProperty(r,"takeWhile",{enumerable:!0,get:function(){return Yr.takeWhile}});var Hr=t(1138);Object.defineProperty(r,"tap",{enumerable:!0,get:function(){return Hr.tap}});var Xr=t(7306);Object.defineProperty(r,"throttle",{enumerable:!0,get:function(){return Xr.throttle}});var $r=t(8968);Object.defineProperty(r,"throttleTime",{enumerable:!0,get:function(){return $r.throttleTime}});var Kr=t(1779);Object.defineProperty(r,"throwIfEmpty",{enumerable:!0,get:function(){return Kr.throwIfEmpty}});var Jr=t(8005);Object.defineProperty(r,"timeInterval",{enumerable:!0,get:function(){return Jr.timeInterval}});var Qr=t(4173);Object.defineProperty(r,"timeout",{enumerable:!0,get:function(){return Qr.timeout}});var Zr=t(7223);Object.defineProperty(r,"timeoutWith",{enumerable:!0,get:function(){return Zr.timeoutWith}});var et=t(8975);Object.defineProperty(r,"timestamp",{enumerable:!0,get:function(){return et.timestamp}});var rt=t(2);Object.defineProperty(r,"toArray",{enumerable:!0,get:function(){return rt.toArray}});var tt=t(2826);Object.defineProperty(r,"window",{enumerable:!0,get:function(){return tt.window}});var nt=t(7526);Object.defineProperty(r,"windowCount",{enumerable:!0,get:function(){return nt.windowCount}});var ot=t(8294);Object.defineProperty(r,"windowTime",{enumerable:!0,get:function(){return ot.windowTime}});var it=t(1883);Object.defineProperty(r,"windowToggle",{enumerable:!0,get:function(){return it.windowToggle}});var ut=t(4309);Object.defineProperty(r,"windowWhen",{enumerable:!0,get:function(){return ut.windowWhen}});var at=t(3041);Object.defineProperty(r,"withLatestFrom",{enumerable:!0,get:function(){return at.withLatestFrom}});var ct=t(8593);Object.defineProperty(r,"zipAll",{enumerable:!0,get:function(){return ct.zipAll}});var lt=t(8096);Object.defineProperty(r,"zipWith",{enumerable:!0,get:function(){return lt.zipWith}})},280:function(e,r,t){var n,o=this&&this.__extends||(n=function(e,r){return n=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,r){e.__proto__=r}||function(e,r){for(var t in r)Object.prototype.hasOwnProperty.call(r,t)&&(e[t]=r[t])},n(e,r)},function(e,r){if("function"!=typeof r&&null!==r)throw new TypeError("Class extends value "+String(r)+" is not a constructor or null");function t(){this.constructor=e}n(e,r),e.prototype=null===r?Object.create(r):(t.prototype=r.prototype,new t)});Object.defineProperty(r,"__esModule",{value:!0}),r.AsyncSubject=void 0;var i=function(e){function r(){var r=null!==e&&e.apply(this,arguments)||this;return r._value=null,r._hasValue=!1,r._isComplete=!1,r}return o(r,e),r.prototype._checkFinalizedStatuses=function(e){var r=this,t=r.hasError,n=r._hasValue,o=r._value,i=r.thrownError,u=r.isStopped,a=r._isComplete;t?e.error(i):(u||a)&&(n&&e.next(o),e.complete())},r.prototype.next=function(e){this.isStopped||(this._value=e,this._hasValue=!0)},r.prototype.complete=function(){var r=this,t=r._hasValue,n=r._value;r._isComplete||(this._isComplete=!0,t&&e.prototype.next.call(this,n),e.prototype.complete.call(this))},r}(t(3032).Subject);r.AsyncSubject=i},5240:function(e,r,t){var n,o=this&&this.__extends||(n=function(e,r){return n=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,r){e.__proto__=r}||function(e,r){for(var t in r)Object.prototype.hasOwnProperty.call(r,t)&&(e[t]=r[t])},n(e,r)},function(e,r){if("function"!=typeof r&&null!==r)throw new TypeError("Class extends value "+String(r)+" is not a constructor or null");function t(){this.constructor=e}n(e,r),e.prototype=null===r?Object.create(r):(t.prototype=r.prototype,new t)});Object.defineProperty(r,"__esModule",{value:!0}),r.BehaviorSubject=void 0;var i=function(e){function r(r){var t=e.call(this)||this;return t._value=r,t}return o(r,e),Object.defineProperty(r.prototype,"value",{get:function(){return this.getValue()},enumerable:!1,configurable:!0}),r.prototype._subscribe=function(r){var t=e.prototype._subscribe.call(this,r);return!t.closed&&r.next(this._value),t},r.prototype.getValue=function(){var e=this,r=e.hasError,t=e.thrownError,n=e._value;if(r)throw t;return this._throwIfClosed(),n},r.prototype.next=function(r){e.prototype.next.call(this,this._value=r)},r}(t(3032).Subject);r.BehaviorSubject=i},3104:(e,r,t)=>{Object.defineProperty(r,"__esModule",{value:!0}),r.observeNotification=r.Notification=r.NotificationKind=void 0;var n,o=t(6332),i=t(5726),u=t(2098),a=t(3005);(n=r.NotificationKind||(r.NotificationKind={})).NEXT="N",n.ERROR="E",n.COMPLETE="C";var c=function(){function e(e,r,t){this.kind=e,this.value=r,this.error=t,this.hasValue="N"===e}return e.prototype.observe=function(e){return l(this,e)},e.prototype.do=function(e,r,t){var n=this,o=n.kind,i=n.value,u=n.error;return"N"===o?null==e?void 0:e(i):"E"===o?null==r?void 0:r(u):null==t?void 0:t()},e.prototype.accept=function(e,r,t){var n;return a.isFunction(null===(n=e)||void 0===n?void 0:n.next)?this.observe(e):this.do(e,r,t)},e.prototype.toObservable=function(){var e=this,r=e.kind,t=e.value,n=e.error,a="N"===r?i.of(t):"E"===r?u.throwError((function(){return n})):"C"===r?o.EMPTY:0;if(!a)throw new TypeError("Unexpected notification kind "+r);return a},e.createNext=function(r){return new e("N",r)},e.createError=function(r){return new e("E",void 0,r)},e.createComplete=function(){return e.completeNotification},e.completeNotification=new e("C"),e}();function l(e,r){var t,n,o,i=e,u=i.kind,a=i.value,c=i.error;if("string"!=typeof u)throw new TypeError('Invalid notification, missing "kind"');"N"===u?null===(t=r.next)||void 0===t||t.call(r,a):"E"===u?null===(n=r.error)||void 0===n||n.call(r,c):null===(o=r.complete)||void 0===o||o.call(r)}r.Notification=c,r.observeNotification=l},7286:(e,r)=>{function t(e,r,t){return{kind:e,value:r,error:t}}Object.defineProperty(r,"__esModule",{value:!0}),r.createNotification=r.nextNotification=r.errorNotification=r.COMPLETE_NOTIFICATION=void 0,r.COMPLETE_NOTIFICATION=t("C",void 0,void 0),r.errorNotification=function(e){return t("E",void 0,e)},r.nextNotification=function(e){return t("N",e,void 0)},r.createNotification=t},2419:(e,r,t)=>{Object.defineProperty(r,"__esModule",{value:!0}),r.Observable=void 0;var n=t(5125),o=t(3865),i=t(2801),u=t(9985),a=t(3280),c=t(3005),l=t(6110),s=function(){function e(e){e&&(this._subscribe=e)}return e.prototype.lift=function(r){var t=new e;return t.source=this,t.operator=r,t},e.prototype.subscribe=function(e,r,t){var i,u=this,a=(i=e)&&i instanceof n.Subscriber||function(e){return e&&c.isFunction(e.next)&&c.isFunction(e.error)&&c.isFunction(e.complete)}(i)&&o.isSubscription(i)?e:new n.SafeSubscriber(e,r,t);return l.errorContext((function(){var e=u,r=e.operator,t=e.source;a.add(r?r.call(a,t):t?u._subscribe(a):u._trySubscribe(a))})),a},e.prototype._trySubscribe=function(e){try{return this._subscribe(e)}catch(r){e.error(r)}},e.prototype.forEach=function(e,r){var t=this;return new(r=f(r))((function(r,o){var i=new n.SafeSubscriber({next:function(r){try{e(r)}catch(e){o(e),i.unsubscribe()}},error:o,complete:r});t.subscribe(i)}))},e.prototype._subscribe=function(e){var r;return null===(r=this.source)||void 0===r?void 0:r.subscribe(e)},e.prototype[i.observable]=function(){return this},e.prototype.pipe=function(){for(var e=[],r=0;r<arguments.length;r++)e[r]=arguments[r];return u.pipeFromArray(e)(this)},e.prototype.toPromise=function(e){var r=this;return new(e=f(e))((function(e,t){var n;r.subscribe((function(e){return n=e}),(function(e){return t(e)}),(function(){return e(n)}))}))},e.create=function(r){return new e(r)},e}();function f(e){var r;return null!==(r=null!=e?e:a.config.Promise)&&void 0!==r?r:Promise}r.Observable=s},3274:function(e,r,t){var n,o=this&&this.__extends||(n=function(e,r){return n=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,r){e.__proto__=r}||function(e,r){for(var t in r)Object.prototype.hasOwnProperty.call(r,t)&&(e[t]=r[t])},n(e,r)},function(e,r){if("function"!=typeof r&&null!==r)throw new TypeError("Class extends value "+String(r)+" is not a constructor or null");function t(){this.constructor=e}n(e,r),e.prototype=null===r?Object.create(r):(t.prototype=r.prototype,new t)});Object.defineProperty(r,"__esModule",{value:!0}),r.ReplaySubject=void 0;var i=t(3032),u=t(7950),a=function(e){function r(r,t,n){void 0===r&&(r=1/0),void 0===t&&(t=1/0),void 0===n&&(n=u.dateTimestampProvider);var o=e.call(this)||this;return o._bufferSize=r,o._windowTime=t,o._timestampProvider=n,o._buffer=[],o._infiniteTimeWindow=!0,o._infiniteTimeWindow=t===1/0,o._bufferSize=Math.max(1,r),o._windowTime=Math.max(1,t),o}return o(r,e),r.prototype.next=function(r){var t=this,n=t.isStopped,o=t._buffer,i=t._infiniteTimeWindow,u=t._timestampProvider,a=t._windowTime;n||(o.push(r),!i&&o.push(u.now()+a)),this._trimBuffer(),e.prototype.next.call(this,r)},r.prototype._subscribe=function(e){this._throwIfClosed(),this._trimBuffer();for(var r=this._innerSubscribe(e),t=this._infiniteTimeWindow,n=this._buffer.slice(),o=0;o<n.length&&!e.closed;o+=t?1:2)e.next(n[o]);return this._checkFinalizedStatuses(e),r},r.prototype._trimBuffer=function(){var e=this,r=e._bufferSize,t=e._timestampProvider,n=e._buffer,o=e._infiniteTimeWindow,i=(o?1:2)*r;if(r<1/0&&i<n.length&&n.splice(0,n.length-i),!o){for(var u=t.now(),a=0,c=1;c<n.length&&n[c]<=u;c+=2)a=c;a&&n.splice(0,a+1)}},r}(i.Subject);r.ReplaySubject=a},218:(e,r,t)=>{Object.defineProperty(r,"__esModule",{value:!0}),r.Scheduler=void 0;var n=t(7950),o=function(){function e(r,t){void 0===t&&(t=e.now),this.schedulerActionCtor=r,this.now=t}return e.prototype.schedule=function(e,r,t){return void 0===r&&(r=0),new this.schedulerActionCtor(this,e).schedule(t,r)},e.now=n.dateTimestampProvider.now,e}();r.Scheduler=o},3032:function(e,r,t){var n,o=this&&this.__extends||(n=function(e,r){return n=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,r){e.__proto__=r}||function(e,r){for(var t in r)Object.prototype.hasOwnProperty.call(r,t)&&(e[t]=r[t])},n(e,r)},function(e,r){if("function"!=typeof r&&null!==r)throw new TypeError("Class extends value "+String(r)+" is not a constructor or null");function t(){this.constructor=e}n(e,r),e.prototype=null===r?Object.create(r):(t.prototype=r.prototype,new t)}),i=this&&this.__values||function(e){var r="function"==typeof Symbol&&Symbol.iterator,t=r&&e[r],n=0;if(t)return t.call(e);if(e&&"number"==typeof e.length)return{next:function(){return e&&n>=e.length&&(e=void 0),{value:e&&e[n++],done:!e}}};throw new TypeError(r?"Object is not iterable.":"Symbol.iterator is not defined.")};Object.defineProperty(r,"__esModule",{value:!0}),r.AnonymousSubject=r.Subject=void 0;var u=t(2419),a=t(3865),c=t(2642),l=t(6967),s=t(6110),f=function(e){function r(){var r=e.call(this)||this;return r.closed=!1,r.currentObservers=null,r.observers=[],r.isStopped=!1,r.hasError=!1,r.thrownError=null,r}return o(r,e),r.prototype.lift=function(e){var r=new d(this,this);return r.operator=e,r},r.prototype._throwIfClosed=function(){if(this.closed)throw new c.ObjectUnsubscribedError},r.prototype.next=function(e){var r=this;s.errorContext((function(){var t,n;if(r._throwIfClosed(),!r.isStopped){r.currentObservers||(r.currentObservers=Array.from(r.observers));try{for(var o=i(r.currentObservers),u=o.next();!u.done;u=o.next())u.value.next(e)}catch(e){t={error:e}}finally{try{u&&!u.done&&(n=o.return)&&n.call(o)}finally{if(t)throw t.error}}}}))},r.prototype.error=function(e){var r=this;s.errorContext((function(){if(r._throwIfClosed(),!r.isStopped){r.hasError=r.isStopped=!0,r.thrownError=e;for(var t=r.observers;t.length;)t.shift().error(e)}}))},r.prototype.complete=function(){var e=this;s.errorContext((function(){if(e._throwIfClosed(),!e.isStopped){e.isStopped=!0;for(var r=e.observers;r.length;)r.shift().complete()}}))},r.prototype.unsubscribe=function(){this.isStopped=this.closed=!0,this.observers=this.currentObservers=null},Object.defineProperty(r.prototype,"observed",{get:function(){var e;return(null===(e=this.observers)||void 0===e?void 0:e.length)>0},enumerable:!1,configurable:!0}),r.prototype._trySubscribe=function(r){return this._throwIfClosed(),e.prototype._trySubscribe.call(this,r)},r.prototype._subscribe=function(e){return this._throwIfClosed(),this._checkFinalizedStatuses(e),this._innerSubscribe(e)},r.prototype._innerSubscribe=function(e){var r=this,t=this,n=t.hasError,o=t.isStopped,i=t.observers;return n||o?a.EMPTY_SUBSCRIPTION:(this.currentObservers=null,i.push(e),new a.Subscription((function(){r.currentObservers=null,l.arrRemove(i,e)})))},r.prototype._checkFinalizedStatuses=function(e){var r=this,t=r.hasError,n=r.thrownError,o=r.isStopped;t?e.error(n):o&&e.complete()},r.prototype.asObservable=function(){var e=new u.Observable;return e.source=this,e},r.create=function(e,r){return new d(e,r)},r}(u.Observable);r.Subject=f;var d=function(e){function r(r,t){var n=e.call(this)||this;return n.destination=r,n.source=t,n}return o(r,e),r.prototype.next=function(e){var r,t;null===(t=null===(r=this.destination)||void 0===r?void 0:r.next)||void 0===t||t.call(r,e)},r.prototype.error=function(e){var r,t;null===(t=null===(r=this.destination)||void 0===r?void 0:r.error)||void 0===t||t.call(r,e)},r.prototype.complete=function(){var e,r;null===(r=null===(e=this.destination)||void 0===e?void 0:e.complete)||void 0===r||r.call(e)},r.prototype._subscribe=function(e){var r,t;return null!==(t=null===(r=this.source)||void 0===r?void 0:r.subscribe(e))&&void 0!==t?t:a.EMPTY_SUBSCRIPTION},r}(f);r.AnonymousSubject=d},5125:function(e,r,t){var n,o=this&&this.__extends||(n=function(e,r){return n=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,r){e.__proto__=r}||function(e,r){for(var t in r)Object.prototype.hasOwnProperty.call(r,t)&&(e[t]=r[t])},n(e,r)},function(e,r){if("function"!=typeof r&&null!==r)throw new TypeError("Class extends value "+String(r)+" is not a constructor or null");function t(){this.constructor=e}n(e,r),e.prototype=null===r?Object.create(r):(t.prototype=r.prototype,new t)});Object.defineProperty(r,"__esModule",{value:!0}),r.EMPTY_OBSERVER=r.SafeSubscriber=r.Subscriber=void 0;var i=t(3005),u=t(3865),a=t(3280),c=t(7968),l=t(2576),s=t(7286),f=t(4590),d=t(6110),p=function(e){function t(t){var n=e.call(this)||this;return n.isStopped=!1,t?(n.destination=t,u.isSubscription(t)&&t.add(n)):n.destination=r.EMPTY_OBSERVER,n}return o(t,e),t.create=function(e,r,t){return new y(e,r,t)},t.prototype.next=function(e){this.isStopped?_(s.nextNotification(e),this):this._next(e)},t.prototype.error=function(e){this.isStopped?_(s.errorNotification(e),this):(this.isStopped=!0,this._error(e))},t.prototype.complete=function(){this.isStopped?_(s.COMPLETE_NOTIFICATION,this):(this.isStopped=!0,this._complete())},t.prototype.unsubscribe=function(){this.closed||(this.isStopped=!0,e.prototype.unsubscribe.call(this),this.destination=null)},t.prototype._next=function(e){this.destination.next(e)},t.prototype._error=function(e){try{this.destination.error(e)}finally{this.unsubscribe()}},t.prototype._complete=function(){try{this.destination.complete()}finally{this.unsubscribe()}},t}(u.Subscription);r.Subscriber=p;var v=Function.prototype.bind;function b(e,r){return v.call(e,r)}var h=function(){function e(e){this.partialObserver=e}return e.prototype.next=function(e){var r=this.partialObserver;if(r.next)try{r.next(e)}catch(e){m(e)}},e.prototype.error=function(e){var r=this.partialObserver;if(r.error)try{r.error(e)}catch(e){m(e)}else m(e)},e.prototype.complete=function(){var e=this.partialObserver;if(e.complete)try{e.complete()}catch(e){m(e)}},e}(),y=function(e){function r(r,t,n){var o,u,c=e.call(this)||this;return i.isFunction(r)||!r?o={next:null!=r?r:void 0,error:null!=t?t:void 0,complete:null!=n?n:void 0}:c&&a.config.useDeprecatedNextContext?((u=Object.create(r)).unsubscribe=function(){return c.unsubscribe()},o={next:r.next&&b(r.next,u),error:r.error&&b(r.error,u),complete:r.complete&&b(r.complete,u)}):o=r,c.destination=new h(o),c}return o(r,e),r}(p);function m(e){a.config.useDeprecatedSynchronousErrorHandling?d.captureError(e):c.reportUnhandledError(e)}function _(e,r){var t=a.config.onStoppedNotification;t&&f.timeoutProvider.setTimeout((function(){return t(e,r)}))}r.SafeSubscriber=y,r.EMPTY_OBSERVER={closed:!0,next:l.noop,error:function(e){throw e},complete:l.noop}},3865:function(e,r,t){var n=this&&this.__values||function(e){var r="function"==typeof Symbol&&Symbol.iterator,t=r&&e[r],n=0;if(t)return t.call(e);if(e&&"number"==typeof e.length)return{next:function(){return e&&n>=e.length&&(e=void 0),{value:e&&e[n++],done:!e}}};throw new TypeError(r?"Object is not iterable.":"Symbol.iterator is not defined.")},o=this&&this.__read||function(e,r){var t="function"==typeof Symbol&&e[Symbol.iterator];if(!t)return e;var n,o,i=t.call(e),u=[];try{for(;(void 0===r||r-- >0)&&!(n=i.next()).done;)u.push(n.value)}catch(e){o={error:e}}finally{try{n&&!n.done&&(t=i.return)&&t.call(i)}finally{if(o)throw o.error}}return u},i=this&&this.__spreadArray||function(e,r){for(var t=0,n=r.length,o=e.length;t<n;t++,o++)e[o]=r[t];return e};Object.defineProperty(r,"__esModule",{value:!0}),r.isSubscription=r.EMPTY_SUBSCRIPTION=r.Subscription=void 0;var u=t(3005),a=t(4805),c=t(6967),l=function(){function e(e){this.initialTeardown=e,this.closed=!1,this._parentage=null,this._finalizers=null}var r;return e.prototype.unsubscribe=function(){var e,r,t,c,l;if(!this.closed){this.closed=!0;var f=this._parentage;if(f)if(this._parentage=null,Array.isArray(f))try{for(var d=n(f),p=d.next();!p.done;p=d.next())p.value.remove(this)}catch(r){e={error:r}}finally{try{p&&!p.done&&(r=d.return)&&r.call(d)}finally{if(e)throw e.error}}else f.remove(this);var v=this.initialTeardown;if(u.isFunction(v))try{v()}catch(e){l=e instanceof a.UnsubscriptionError?e.errors:[e]}var b=this._finalizers;if(b){this._finalizers=null;try{for(var h=n(b),y=h.next();!y.done;y=h.next()){var m=y.value;try{s(m)}catch(e){l=null!=l?l:[],e instanceof a.UnsubscriptionError?l=i(i([],o(l)),o(e.errors)):l.push(e)}}}catch(e){t={error:e}}finally{try{y&&!y.done&&(c=h.return)&&c.call(h)}finally{if(t)throw t.error}}}if(l)throw new a.UnsubscriptionError(l)}},e.prototype.add=function(r){var t;if(r&&r!==this)if(this.closed)s(r);else{if(r instanceof e){if(r.closed||r._hasParent(this))return;r._addParent(this)}(this._finalizers=null!==(t=this._finalizers)&&void 0!==t?t:[]).push(r)}},e.prototype._hasParent=function(e){var r=this._parentage;return r===e||Array.isArray(r)&&r.includes(e)},e.prototype._addParent=function(e){var r=this._parentage;this._parentage=Array.isArray(r)?(r.push(e),r):r?[r,e]:e},e.prototype._removeParent=function(e){var r=this._parentage;r===e?this._parentage=null:Array.isArray(r)&&c.arrRemove(r,e)},e.prototype.remove=function(r){var t=this._finalizers;t&&c.arrRemove(t,r),r instanceof e&&r._removeParent(this)},e.EMPTY=((r=new e).closed=!0,r),e}();function s(e){u.isFunction(e)?e():e.unsubscribe()}r.Subscription=l,r.EMPTY_SUBSCRIPTION=l.EMPTY,r.isSubscription=function(e){return e instanceof l||e&&"closed"in e&&u.isFunction(e.remove)&&u.isFunction(e.add)&&u.isFunction(e.unsubscribe)}},3280:(e,r)=>{Object.defineProperty(r,"__esModule",{value:!0}),r.config=void 0,r.config={onUnhandledError:null,onStoppedNotification:null,Promise:void 0,useDeprecatedSynchronousErrorHandling:!1,useDeprecatedNextContext:!1}},8182:(e,r,t)=>{Object.defineProperty(r,"__esModule",{value:!0}),r.firstValueFrom=void 0;var n=t(9474),o=t(5125);r.firstValueFrom=function(e,r){var t="object"==typeof r;return new Promise((function(i,u){var a=new o.SafeSubscriber({next:function(e){i(e),a.unsubscribe()},error:u,complete:function(){t?i(r.defaultValue):u(new n.EmptyError)}});e.subscribe(a)}))}},9309:(e,r,t)=>{Object.defineProperty(r,"__esModule",{value:!0}),r.lastValueFrom=void 0;var n=t(9474);r.lastValueFrom=function(e,r){var t="object"==typeof r;return new Promise((function(o,i){var u,a=!1;e.subscribe({next:function(e){u=e,a=!0},error:i,complete:function(){a?o(u):t?o(r.defaultValue):i(new n.EmptyError)}})}))}},9518:function(e,r,t){var n,o=this&&this.__extends||(n=function(e,r){return n=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,r){e.__proto__=r}||function(e,r){for(var t in r)Object.prototype.hasOwnProperty.call(r,t)&&(e[t]=r[t])},n(e,r)},function(e,r){if("function"!=typeof r&&null!==r)throw new TypeError("Class extends value "+String(r)+" is not a constructor or null");function t(){this.constructor=e}n(e,r),e.prototype=null===r?Object.create(r):(t.prototype=r.prototype,new t)});Object.defineProperty(r,"__esModule",{value:!0}),r.ConnectableObservable=void 0;var i=t(2419),u=t(3865),a=t(8739),c=t(4990),l=t(4935),s=function(e){function r(r,t){var n=e.call(this)||this;return n.source=r,n.subjectFactory=t,n._subject=null,n._refCount=0,n._connection=null,l.hasLift(r)&&(n.lift=r.lift),n}return o(r,e),r.prototype._subscribe=function(e){return this.getSubject().subscribe(e)},r.prototype.getSubject=function(){var e=this._subject;return e&&!e.isStopped||(this._subject=this.subjectFactory()),this._subject},r.prototype._teardown=function(){this._refCount=0;var e=this._connection;this._subject=this._connection=null,null==e||e.unsubscribe()},r.prototype.connect=function(){var e=this,r=this._connection;if(!r){r=this._connection=new u.Subscription;var t=this.getSubject();r.add(this.source.subscribe(c.createOperatorSubscriber(t,void 0,(function(){e._teardown(),t.complete()}),(function(r){e._teardown(),t.error(r)}),(function(){return e._teardown()})))),r.closed&&(this._connection=null,r=u.Subscription.EMPTY)}return r},r.prototype.refCount=function(){return a.refCount()(this)},r}(i.Observable);r.ConnectableObservable=s},3050:(e,r,t)=>{Object.defineProperty(r,"__esModule",{value:!0}),r.bindCallback=void 0;var n=t(9592);r.bindCallback=function(e,r,t){return n.bindCallbackInternals(!1,e,r,t)}},9592:function(e,r,t){var n=this&&this.__read||function(e,r){var t="function"==typeof Symbol&&e[Symbol.iterator];if(!t)return e;var n,o,i=t.call(e),u=[];try{for(;(void 0===r||r-- >0)&&!(n=i.next()).done;)u.push(n.value)}catch(e){o={error:e}}finally{try{n&&!n.done&&(t=i.return)&&t.call(i)}finally{if(o)throw o.error}}return u},o=this&&this.__spreadArray||function(e,r){for(var t=0,n=r.length,o=e.length;t<n;t++,o++)e[o]=r[t];return e};Object.defineProperty(r,"__esModule",{value:!0}),r.bindCallbackInternals=void 0;var i=t(9016),u=t(2419),a=t(276),c=t(1914),l=t(1184),s=t(280);r.bindCallbackInternals=function e(r,t,f,d){if(f){if(!i.isScheduler(f))return function(){for(var n=[],o=0;o<arguments.length;o++)n[o]=arguments[o];return e(r,t,d).apply(this,n).pipe(c.mapOneOrManyArgs(f))};d=f}return d?function(){for(var n=[],o=0;o<arguments.length;o++)n[o]=arguments[o];return e(r,t).apply(this,n).pipe(a.subscribeOn(d),l.observeOn(d))}:function(){for(var e=this,i=[],a=0;a<arguments.length;a++)i[a]=arguments[a];var c=new s.AsyncSubject,l=!0;return new u.Observable((function(u){var a=c.subscribe(u);if(l){l=!1;var s=!1,f=!1;t.apply(e,o(o([],n(i)),[function(){for(var e=[],t=0;t<arguments.length;t++)e[t]=arguments[t];if(r){var n=e.shift();if(null!=n)return void c.error(n)}c.next(1<e.length?e:e[0]),f=!0,s&&c.complete()}])),f&&c.complete(),s=!0}return a}))}}},8130:(e,r,t)=>{Object.defineProperty(r,"__esModule",{value:!0}),r.bindNodeCallback=void 0;var n=t(9592);r.bindNodeCallback=function(e,r,t){return n.bindCallbackInternals(!0,e,r,t)}},9258:(e,r,t)=>{Object.defineProperty(r,"__esModule",{value:!0}),r.combineLatestInit=r.combineLatest=void 0;var n=t(2419),o=t(1203),i=t(5432),u=t(4781),a=t(1914),c=t(2433),l=t(641),s=t(4990),f=t(7738);function d(e,r,t){return void 0===t&&(t=u.identity),function(n){p(r,(function(){for(var o=e.length,u=new Array(o),a=o,c=o,l=function(o){p(r,(function(){var l=i.from(e[o],r),f=!1;l.subscribe(s.createOperatorSubscriber(n,(function(e){u[o]=e,f||(f=!0,c--),c||n.next(t(u.slice()))}),(function(){--a||n.complete()})))}),n)},f=0;f<o;f++)l(f)}),n)}}function p(e,r,t){e?f.executeSchedule(t,e,r):r()}r.combineLatest=function(){for(var e=[],r=0;r<arguments.length;r++)e[r]=arguments[r];var t=c.popScheduler(e),s=c.popResultSelector(e),f=o.argsArgArrayOrObject(e),p=f.args,v=f.keys;if(0===p.length)return i.from([],t);var b=new n.Observable(d(p,t,v?function(e){return l.createObject(v,e)}:u.identity));return s?b.pipe(a.mapOneOrManyArgs(s)):b},r.combineLatestInit=d},2239:(e,r,t)=>{Object.defineProperty(r,"__esModule",{value:!0}),r.concat=void 0;var n=t(4413),o=t(2433),i=t(5432);r.concat=function(){for(var e=[],r=0;r<arguments.length;r++)e[r]=arguments[r];return n.concatAll()(i.from(e,o.popScheduler(e)))}},2873:(e,r,t)=>{Object.defineProperty(r,"__esModule",{value:!0}),r.connectable=void 0;var n=t(3032),o=t(2419),i=t(7885),u={connector:function(){return new n.Subject},resetOnDisconnect:!0};r.connectable=function(e,r){void 0===r&&(r=u);var t=null,n=r.connector,a=r.resetOnDisconnect,c=void 0===a||a,l=n(),s=new o.Observable((function(e){return l.subscribe(e)}));return s.connect=function(){return t&&!t.closed||(t=i.defer((function(){return e})).subscribe(l),c&&t.add((function(){return l=n()}))),t},s}},7885:(e,r,t)=>{Object.defineProperty(r,"__esModule",{value:!0}),r.defer=void 0;var n=t(2419),o=t(7103);r.defer=function(e){return new n.Observable((function(r){o.innerFrom(e()).subscribe(r)}))}},9106:(e,r,t)=>{Object.defineProperty(r,"__esModule",{value:!0}),r.animationFrames=void 0;var n=t(2419),o=t(6813),i=t(505);function u(e){return new n.Observable((function(r){var t=e||o.performanceTimestampProvider,n=t.now(),u=0,a=function(){r.closed||(u=i.animationFrameProvider.requestAnimationFrame((function(o){u=0;var i=t.now();r.next({timestamp:e?i:o,elapsed:i-n}),a()})))};return a(),function(){u&&i.animationFrameProvider.cancelAnimationFrame(u)}}))}r.animationFrames=function(e){return e?u(e):a};var a=u()},6332:(e,r,t)=>{Object.defineProperty(r,"__esModule",{value:!0}),r.empty=r.EMPTY=void 0;var n=t(2419);r.EMPTY=new n.Observable((function(e){return e.complete()})),r.empty=function(e){return e?function(e){return new n.Observable((function(r){return e.schedule((function(){return r.complete()}))}))}(e):r.EMPTY}},7245:(e,r,t)=>{Object.defineProperty(r,"__esModule",{value:!0}),r.forkJoin=void 0;var n=t(2419),o=t(1203),i=t(7103),u=t(2433),a=t(4990),c=t(1914),l=t(641);r.forkJoin=function(){for(var e=[],r=0;r<arguments.length;r++)e[r]=arguments[r];var t=u.popResultSelector(e),s=o.argsArgArrayOrObject(e),f=s.args,d=s.keys,p=new n.Observable((function(e){var r=f.length;if(r)for(var t=new Array(r),n=r,o=r,u=function(r){var u=!1;i.innerFrom(f[r]).subscribe(a.createOperatorSubscriber(e,(function(e){u||(u=!0,o--),t[r]=e}),(function(){return n--}),void 0,(function(){n&&u||(o||e.next(d?l.createObject(d,t):t),e.complete())})))},c=0;c<r;c++)u(c);else e.complete()}));return t?p.pipe(c.mapOneOrManyArgs(t)):p}},5432:(e,r,t)=>{Object.defineProperty(r,"__esModule",{value:!0}),r.from=void 0;var n=t(5207),o=t(7103);r.from=function(e,r){return r?n.scheduled(e,r):o.innerFrom(e)}},3267:function(e,r,t){var n=this&&this.__read||function(e,r){var t="function"==typeof Symbol&&e[Symbol.iterator];if(!t)return e;var n,o,i=t.call(e),u=[];try{for(;(void 0===r||r-- >0)&&!(n=i.next()).done;)u.push(n.value)}catch(e){o={error:e}}finally{try{n&&!n.done&&(t=i.return)&&t.call(i)}finally{if(o)throw o.error}}return u};Object.defineProperty(r,"__esModule",{value:!0}),r.fromEvent=void 0;var o=t(7103),i=t(2419),u=t(9475),a=t(3909),c=t(3005),l=t(1914),s=["addListener","removeListener"],f=["addEventListener","removeEventListener"],d=["on","off"];function p(e,r){return function(t){return function(n){return e[t](r,n)}}}r.fromEvent=function e(r,t,v,b){if(c.isFunction(v)&&(b=v,v=void 0),b)return e(r,t,v).pipe(l.mapOneOrManyArgs(b));var h=n(function(e){return c.isFunction(e.addEventListener)&&c.isFunction(e.removeEventListener)}(r)?f.map((function(e){return function(n){return r[e](t,n,v)}})):function(e){return c.isFunction(e.addListener)&&c.isFunction(e.removeListener)}(r)?s.map(p(r,t)):function(e){return c.isFunction(e.on)&&c.isFunction(e.off)}(r)?d.map(p(r,t)):[],2),y=h[0],m=h[1];if(!y&&a.isArrayLike(r))return u.mergeMap((function(r){return e(r,t,v)}))(o.innerFrom(r));if(!y)throw new TypeError("Invalid event target");return new i.Observable((function(e){var r=function(){for(var r=[],t=0;t<arguments.length;t++)r[t]=arguments[t];return e.next(1<r.length?r:r[0])};return y(r),function(){return m(r)}}))}},470:(e,r,t)=>{Object.defineProperty(r,"__esModule",{value:!0}),r.fromEventPattern=void 0;var n=t(2419),o=t(3005),i=t(1914);r.fromEventPattern=function e(r,t,u){return u?e(r,t).pipe(i.mapOneOrManyArgs(u)):new n.Observable((function(e){var n=function(){for(var r=[],t=0;t<arguments.length;t++)r[t]=arguments[t];return e.next(1===r.length?r[0]:r)},i=r(n);return o.isFunction(t)?function(){return t(n,i)}:void 0}))}},851:(e,r,t)=>{Object.defineProperty(r,"__esModule",{value:!0}),r.fromSubscribable=void 0;var n=t(2419);r.fromSubscribable=function(e){return new n.Observable((function(r){return e.subscribe(r)}))}},4303:function(e,r,t){var n=this&&this.__generator||function(e,r){var t,n,o,i,u={label:0,sent:function(){if(1&o[0])throw o[1];return o[1]},trys:[],ops:[]};return i={next:a(0),throw:a(1),return:a(2)},"function"==typeof Symbol&&(i[Symbol.iterator]=function(){return this}),i;function a(i){return function(a){return function(i){if(t)throw new TypeError("Generator is already executing.");for(;u;)try{if(t=1,n&&(o=2&i[0]?n.return:i[0]?n.throw||((o=n.return)&&o.call(n),0):n.next)&&!(o=o.call(n,i[1])).done)return o;switch(n=0,o&&(i=[2&i[0],o.value]),i[0]){case 0:case 1:o=i;break;case 4:return u.label++,{value:i[1],done:!1};case 5:u.label++,n=i[1],i=[0];continue;case 7:i=u.ops.pop(),u.trys.pop();continue;default:if(!((o=(o=u.trys).length>0&&o[o.length-1])||6!==i[0]&&2!==i[0])){u=0;continue}if(3===i[0]&&(!o||i[1]>o[0]&&i[1]<o[3])){u.label=i[1];break}if(6===i[0]&&u.label<o[1]){u.label=o[1],o=i;break}if(o&&u.label<o[2]){u.label=o[2],u.ops.push(i);break}o[2]&&u.ops.pop(),u.trys.pop();continue}i=r.call(e,u)}catch(e){i=[6,e],n=0}finally{t=o=0}if(5&i[0])throw i[1];return{value:i[0]?i[1]:void 0,done:!0}}([i,a])}}};Object.defineProperty(r,"__esModule",{value:!0}),r.generate=void 0;var o=t(4781),i=t(9016),u=t(7885),a=t(1297);r.generate=function(e,r,t,c,l){var s,f,d,p;function v(){var e;return n(this,(function(n){switch(n.label){case 0:e=p,n.label=1;case 1:return r&&!r(e)?[3,4]:[4,d(e)];case 2:n.sent(),n.label=3;case 3:return e=t(e),[3,1];case 4:return[2]}}))}return 1===arguments.length?(p=(s=e).initialState,r=s.condition,t=s.iterate,f=s.resultSelector,d=void 0===f?o.identity:f,l=s.scheduler):(p=e,!c||i.isScheduler(c)?(d=o.identity,l=c):d=c),u.defer(l?function(){return a.scheduleIterable(v(),l)}:v)}},1757:(e,r,t)=>{Object.defineProperty(r,"__esModule",{value:!0}),r.iif=void 0;var n=t(7885);r.iif=function(e,r,t){return n.defer((function(){return e()?r:t}))}},7103:function(e,r,t){var n=this&&this.__awaiter||function(e,r,t,n){return new(t||(t=Promise))((function(o,i){function u(e){try{c(n.next(e))}catch(e){i(e)}}function a(e){try{c(n.throw(e))}catch(e){i(e)}}function c(e){var r;e.done?o(e.value):(r=e.value,r instanceof t?r:new t((function(e){e(r)}))).then(u,a)}c((n=n.apply(e,r||[])).next())}))},o=this&&this.__generator||function(e,r){var t,n,o,i,u={label:0,sent:function(){if(1&o[0])throw o[1];return o[1]},trys:[],ops:[]};return i={next:a(0),throw:a(1),return:a(2)},"function"==typeof Symbol&&(i[Symbol.iterator]=function(){return this}),i;function a(i){return function(a){return function(i){if(t)throw new TypeError("Generator is already executing.");for(;u;)try{if(t=1,n&&(o=2&i[0]?n.return:i[0]?n.throw||((o=n.return)&&o.call(n),0):n.next)&&!(o=o.call(n,i[1])).done)return o;switch(n=0,o&&(i=[2&i[0],o.value]),i[0]){case 0:case 1:o=i;break;case 4:return u.label++,{value:i[1],done:!1};case 5:u.label++,n=i[1],i=[0];continue;case 7:i=u.ops.pop(),u.trys.pop();continue;default:if(!((o=(o=u.trys).length>0&&o[o.length-1])||6!==i[0]&&2!==i[0])){u=0;continue}if(3===i[0]&&(!o||i[1]>o[0]&&i[1]<o[3])){u.label=i[1];break}if(6===i[0]&&u.label<o[1]){u.label=o[1],o=i;break}if(o&&u.label<o[2]){u.label=o[2],u.ops.push(i);break}o[2]&&u.ops.pop(),u.trys.pop();continue}i=r.call(e,u)}catch(e){i=[6,e],n=0}finally{t=o=0}if(5&i[0])throw i[1];return{value:i[0]?i[1]:void 0,done:!0}}([i,a])}}},i=this&&this.__asyncValues||function(e){if(!Symbol.asyncIterator)throw new TypeError("Symbol.asyncIterator is not defined.");var r,t=e[Symbol.asyncIterator];return t?t.call(e):(e="function"==typeof u?u(e):e[Symbol.iterator](),r={},n("next"),n("throw"),n("return"),r[Symbol.asyncIterator]=function(){return this},r);function n(t){r[t]=e[t]&&function(r){return new Promise((function(n,o){!function(e,r,t,n){Promise.resolve(n).then((function(r){e({value:r,done:t})}),r)}(n,o,(r=e[t](r)).done,r.value)}))}}},u=this&&this.__values||function(e){var r="function"==typeof Symbol&&Symbol.iterator,t=r&&e[r],n=0;if(t)return t.call(e);if(e&&"number"==typeof e.length)return{next:function(){return e&&n>=e.length&&(e=void 0),{value:e&&e[n++],done:!e}}};throw new TypeError(r?"Object is not iterable.":"Symbol.iterator is not defined.")};Object.defineProperty(r,"__esModule",{value:!0}),r.fromReadableStreamLike=r.fromAsyncIterable=r.fromIterable=r.fromPromise=r.fromArrayLike=r.fromInteropObservable=r.innerFrom=void 0;var a=t(3909),c=t(6018),l=t(2419),s=t(9500),f=t(9595),d=t(9906),p=t(2743),v=t(7823),b=t(3005),h=t(7968),y=t(2801);function m(e){return new l.Observable((function(r){var t=e[y.observable]();if(b.isFunction(t.subscribe))return t.subscribe(r);throw new TypeError("Provided object does not correctly implement Symbol.observable")}))}function _(e){return new l.Observable((function(r){for(var t=0;t<e.length&&!r.closed;t++)r.next(e[t]);r.complete()}))}function O(e){return new l.Observable((function(r){e.then((function(e){r.closed||(r.next(e),r.complete())}),(function(e){return r.error(e)})).then(null,h.reportUnhandledError)}))}function g(e){return new l.Observable((function(r){var t,n;try{for(var o=u(e),i=o.next();!i.done;i=o.next()){var a=i.value;if(r.next(a),r.closed)return}}catch(e){t={error:e}}finally{try{i&&!i.done&&(n=o.return)&&n.call(o)}finally{if(t)throw t.error}}r.complete()}))}function P(e){return new l.Observable((function(r){(function(e,r){var t,u,a,c;return n(this,void 0,void 0,(function(){var n,l;return o(this,(function(o){switch(o.label){case 0:o.trys.push([0,5,6,11]),t=i(e),o.label=1;case 1:return[4,t.next()];case 2:if((u=o.sent()).done)return[3,4];if(n=u.value,r.next(n),r.closed)return[2];o.label=3;case 3:return[3,1];case 4:return[3,11];case 5:return l=o.sent(),a={error:l},[3,11];case 6:return o.trys.push([6,,9,10]),u&&!u.done&&(c=t.return)?[4,c.call(t)]:[3,8];case 7:o.sent(),o.label=8;case 8:return[3,10];case 9:if(a)throw a.error;return[7];case 10:return[7];case 11:return r.complete(),[2]}}))}))})(e,r).catch((function(e){return r.error(e)}))}))}function w(e){return P(v.readableStreamLikeToAsyncGenerator(e))}r.innerFrom=function(e){if(e instanceof l.Observable)return e;if(null!=e){if(s.isInteropObservable(e))return m(e);if(a.isArrayLike(e))return _(e);if(c.isPromise(e))return O(e);if(f.isAsyncIterable(e))return P(e);if(p.isIterable(e))return g(e);if(v.isReadableStreamLike(e))return w(e)}throw d.createInvalidObservableTypeError(e)},r.fromInteropObservable=m,r.fromArrayLike=_,r.fromPromise=O,r.fromIterable=g,r.fromAsyncIterable=P,r.fromReadableStreamLike=w},8990:(e,r,t)=>{Object.defineProperty(r,"__esModule",{value:!0}),r.interval=void 0;var n=t(2445),o=t(7513);r.interval=function(e,r){return void 0===e&&(e=0),void 0===r&&(r=n.asyncScheduler),e<0&&(e=0),o.timer(e,e,r)}},1846:(e,r,t)=>{Object.defineProperty(r,"__esModule",{value:!0}),r.merge=void 0;var n=t(3783),o=t(7103),i=t(6332),u=t(2433),a=t(5432);r.merge=function(){for(var e=[],r=0;r<arguments.length;r++)e[r]=arguments[r];var t=u.popScheduler(e),c=u.popNumber(e,1/0),l=e;return l.length?1===l.length?o.innerFrom(l[0]):n.mergeAll(c)(a.from(l,t)):i.EMPTY}},1339:(e,r,t)=>{Object.defineProperty(r,"__esModule",{value:!0}),r.never=r.NEVER=void 0;var n=t(2419),o=t(2576);r.NEVER=new n.Observable(o.noop),r.never=function(){return r.NEVER}},5726:(e,r,t)=>{Object.defineProperty(r,"__esModule",{value:!0}),r.of=void 0;var n=t(2433),o=t(5432);r.of=function(){for(var e=[],r=0;r<arguments.length;r++)e[r]=arguments[r];var t=n.popScheduler(e);return o.from(e,t)}},724:(e,r,t)=>{Object.defineProperty(r,"__esModule",{value:!0}),r.onErrorResumeNext=void 0;var n=t(2419),o=t(5498),i=t(4990),u=t(2576),a=t(7103);r.onErrorResumeNext=function(){for(var e=[],r=0;r<arguments.length;r++)e[r]=arguments[r];var t=o.argsOrArgArray(e);return new n.Observable((function(e){var r=0,n=function(){if(r<t.length){var o=void 0;try{o=a.innerFrom(t[r++])}catch(e){return void n()}var c=new i.OperatorSubscriber(e,void 0,u.noop,u.noop);o.subscribe(c),c.add(n)}else e.complete()};n()}))}},4380:(e,r,t)=>{Object.defineProperty(r,"__esModule",{value:!0}),r.pairs=void 0;var n=t(5432);r.pairs=function(e,r){return n.from(Object.entries(e),r)}},7273:(e,r,t)=>{Object.defineProperty(r,"__esModule",{value:!0}),r.partition=void 0;var n=t(8634),o=t(9154),i=t(7103);r.partition=function(e,r,t){return[o.filter(r,t)(i.innerFrom(e)),o.filter(n.not(r,t))(i.innerFrom(e))]}},5182:(e,r,t)=>{Object.defineProperty(r,"__esModule",{value:!0}),r.raceInit=r.race=void 0;var n=t(2419),o=t(7103),i=t(5498),u=t(4990);function a(e){return function(r){for(var t=[],n=function(n){t.push(o.innerFrom(e[n]).subscribe(u.createOperatorSubscriber(r,(function(e){if(t){for(var o=0;o<t.length;o++)o!==n&&t[o].unsubscribe();t=null}r.next(e)}))))},i=0;t&&!r.closed&&i<e.length;i++)n(i)}}r.race=function(){for(var e=[],r=0;r<arguments.length;r++)e[r]=arguments[r];return 1===(e=i.argsOrArgArray(e)).length?o.innerFrom(e[0]):new n.Observable(a(e))},r.raceInit=a},322:(e,r,t)=>{Object.defineProperty(r,"__esModule",{value:!0}),r.range=void 0;var n=t(2419),o=t(6332);r.range=function(e,r,t){if(null==r&&(r=e,e=0),r<=0)return o.EMPTY;var i=r+e;return new n.Observable(t?function(r){var n=e;return t.schedule((function(){n<i?(r.next(n++),this.schedule()):r.complete()}))}:function(r){for(var t=e;t<i&&!r.closed;)r.next(t++);r.complete()})}},2098:(e,r,t)=>{Object.defineProperty(r,"__esModule",{value:!0}),r.throwError=void 0;var n=t(2419),o=t(3005);r.throwError=function(e,r){var t=o.isFunction(e)?e:function(){return e},i=function(e){return e.error(t())};return new n.Observable(r?function(e){return r.schedule(i,0,e)}:i)}},7513:(e,r,t)=>{Object.defineProperty(r,"__esModule",{value:!0}),r.timer=void 0;var n=t(2419),o=t(2445),i=t(9016),u=t(1677);r.timer=function(e,r,t){void 0===e&&(e=0),void 0===t&&(t=o.async);var a=-1;return null!=r&&(i.isScheduler(r)?t=r:a=r),new n.Observable((function(r){var n=u.isValidDate(e)?+e-t.now():e;n<0&&(n=0);var o=0;return t.schedule((function(){r.closed||(r.next(o++),0<=a?this.schedule(void 0,a):r.complete())}),n)}))}},2962:(e,r,t)=>{Object.defineProperty(r,"__esModule",{value:!0}),r.using=void 0;var n=t(2419),o=t(7103),i=t(6332);r.using=function(e,r){return new n.Observable((function(t){var n=e(),u=r(n);return(u?o.innerFrom(u):i.EMPTY).subscribe(t),function(){n&&n.unsubscribe()}}))}},7654:function(e,r,t){var n=this&&this.__read||function(e,r){var t="function"==typeof Symbol&&e[Symbol.iterator];if(!t)return e;var n,o,i=t.call(e),u=[];try{for(;(void 0===r||r-- >0)&&!(n=i.next()).done;)u.push(n.value)}catch(e){o={error:e}}finally{try{n&&!n.done&&(t=i.return)&&t.call(i)}finally{if(o)throw o.error}}return u},o=this&&this.__spreadArray||function(e,r){for(var t=0,n=r.length,o=e.length;t<n;t++,o++)e[o]=r[t];return e};Object.defineProperty(r,"__esModule",{value:!0}),r.zip=void 0;var i=t(2419),u=t(7103),a=t(5498),c=t(6332),l=t(4990),s=t(2433);r.zip=function(){for(var e=[],r=0;r<arguments.length;r++)e[r]=arguments[r];var t=s.popResultSelector(e),f=a.argsOrArgArray(e);return f.length?new i.Observable((function(e){var r=f.map((function(){return[]})),i=f.map((function(){return!1}));e.add((function(){r=i=null}));for(var a=function(a){u.innerFrom(f[a]).subscribe(l.createOperatorSubscriber(e,(function(u){if(r[a].push(u),r.every((function(e){return e.length}))){var c=r.map((function(e){return e.shift()}));e.next(t?t.apply(void 0,o([],n(c))):c),r.some((function(e,r){return!e.length&&i[r]}))&&e.complete()}}),(function(){i[a]=!0,!r[a].length&&e.complete()})))},c=0;!e.closed&&c<f.length;c++)a(c);return function(){r=i=null}})):c.EMPTY}},4990:function(e,r,t){var n,o=this&&this.__extends||(n=function(e,r){return n=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,r){e.__proto__=r}||function(e,r){for(var t in r)Object.prototype.hasOwnProperty.call(r,t)&&(e[t]=r[t])},n(e,r)},function(e,r){if("function"!=typeof r&&null!==r)throw new TypeError("Class extends value "+String(r)+" is not a constructor or null");function t(){this.constructor=e}n(e,r),e.prototype=null===r?Object.create(r):(t.prototype=r.prototype,new t)});Object.defineProperty(r,"__esModule",{value:!0}),r.OperatorSubscriber=r.createOperatorSubscriber=void 0;var i=t(5125);r.createOperatorSubscriber=function(e,r,t,n,o){return new u(e,r,t,n,o)};var u=function(e){function r(r,t,n,o,i,u){var a=e.call(this,r)||this;return a.onFinalize=i,a.shouldUnsubscribe=u,a._next=t?function(e){try{t(e)}catch(e){r.error(e)}}:e.prototype._next,a._error=o?function(e){try{o(e)}catch(e){r.error(e)}finally{this.unsubscribe()}}:e.prototype._error,a._complete=n?function(){try{n()}catch(e){r.error(e)}finally{this.unsubscribe()}}:e.prototype._complete,a}return o(r,e),r.prototype.unsubscribe=function(){var r;if(!this.shouldUnsubscribe||this.shouldUnsubscribe()){var t=this.closed;e.prototype.unsubscribe.call(this),!t&&(null===(r=this.onFinalize)||void 0===r||r.call(this))}},r}(i.Subscriber);r.OperatorSubscriber=u},6474:(e,r,t)=>{Object.defineProperty(r,"__esModule",{value:!0}),r.audit=void 0;var n=t(4935),o=t(7103),i=t(4990);r.audit=function(e){return n.operate((function(r,t){var n=!1,u=null,a=null,c=!1,l=function(){if(null==a||a.unsubscribe(),a=null,n){n=!1;var e=u;u=null,t.next(e)}c&&t.complete()},s=function(){a=null,c&&t.complete()};r.subscribe(i.createOperatorSubscriber(t,(function(r){n=!0,u=r,a||o.innerFrom(e(r)).subscribe(a=i.createOperatorSubscriber(t,l,s))}),(function(){c=!0,(!n||!a||a.closed)&&t.complete()})))}))}},5382:(e,r,t)=>{Object.defineProperty(r,"__esModule",{value:!0}),r.auditTime=void 0;var n=t(2445),o=t(6474),i=t(7513);r.auditTime=function(e,r){return void 0===r&&(r=n.asyncScheduler),o.audit((function(){return i.timer(e,r)}))}},9715:(e,r,t)=>{Object.defineProperty(r,"__esModule",{value:!0}),r.buffer=void 0;var n=t(4935),o=t(2576),i=t(4990),u=t(7103);r.buffer=function(e){return n.operate((function(r,t){var n=[];return r.subscribe(i.createOperatorSubscriber(t,(function(e){return n.push(e)}),(function(){t.next(n),t.complete()}))),u.innerFrom(e).subscribe(i.createOperatorSubscriber(t,(function(){var e=n;n=[],t.next(e)}),o.noop)),function(){n=null}}))}},3814:function(e,r,t){var n=this&&this.__values||function(e){var r="function"==typeof Symbol&&Symbol.iterator,t=r&&e[r],n=0;if(t)return t.call(e);if(e&&"number"==typeof e.length)return{next:function(){return e&&n>=e.length&&(e=void 0),{value:e&&e[n++],done:!e}}};throw new TypeError(r?"Object is not iterable.":"Symbol.iterator is not defined.")};Object.defineProperty(r,"__esModule",{value:!0}),r.bufferCount=void 0;var o=t(4935),i=t(4990),u=t(6967);r.bufferCount=function(e,r){return void 0===r&&(r=null),r=null!=r?r:e,o.operate((function(t,o){var a=[],c=0;t.subscribe(i.createOperatorSubscriber(o,(function(t){var i,l,s,f,d=null;c++%r==0&&a.push([]);try{for(var p=n(a),v=p.next();!v.done;v=p.next())(y=v.value).push(t),e<=y.length&&(d=null!=d?d:[]).push(y)}catch(e){i={error:e}}finally{try{v&&!v.done&&(l=p.return)&&l.call(p)}finally{if(i)throw i.error}}if(d)try{for(var b=n(d),h=b.next();!h.done;h=b.next()){var y=h.value;u.arrRemove(a,y),o.next(y)}}catch(e){s={error:e}}finally{try{h&&!h.done&&(f=b.return)&&f.call(b)}finally{if(s)throw s.error}}}),(function(){var e,r;try{for(var t=n(a),i=t.next();!i.done;i=t.next()){var u=i.value;o.next(u)}}catch(r){e={error:r}}finally{try{i&&!i.done&&(r=t.return)&&r.call(t)}finally{if(e)throw e.error}}o.complete()}),void 0,(function(){a=null})))}))}},7211:function(e,r,t){var n=this&&this.__values||function(e){var r="function"==typeof Symbol&&Symbol.iterator,t=r&&e[r],n=0;if(t)return t.call(e);if(e&&"number"==typeof e.length)return{next:function(){return e&&n>=e.length&&(e=void 0),{value:e&&e[n++],done:!e}}};throw new TypeError(r?"Object is not iterable.":"Symbol.iterator is not defined.")};Object.defineProperty(r,"__esModule",{value:!0}),r.bufferTime=void 0;var o=t(3865),i=t(4935),u=t(4990),a=t(6967),c=t(2445),l=t(2433),s=t(7738);r.bufferTime=function(e){for(var r,t,f=[],d=1;d<arguments.length;d++)f[d-1]=arguments[d];var p=null!==(r=l.popScheduler(f))&&void 0!==r?r:c.asyncScheduler,v=null!==(t=f[0])&&void 0!==t?t:null,b=f[1]||1/0;return i.operate((function(r,t){var i=[],c=!1,l=function(e){var r=e.buffer;e.subs.unsubscribe(),a.arrRemove(i,e),t.next(r),c&&f()},f=function(){if(i){var r=new o.Subscription;t.add(r);var n={buffer:[],subs:r};i.push(n),s.executeSchedule(r,p,(function(){return l(n)}),e)}};null!==v&&v>=0?s.executeSchedule(t,p,f,v,!0):c=!0,f();var d=u.createOperatorSubscriber(t,(function(e){var r,t,o=i.slice();try{for(var u=n(o),a=u.next();!a.done;a=u.next()){var c=a.value,s=c.buffer;s.push(e),b<=s.length&&l(c)}}catch(e){r={error:e}}finally{try{a&&!a.done&&(t=u.return)&&t.call(u)}finally{if(r)throw r.error}}}),(function(){for(;null==i?void 0:i.length;)t.next(i.shift().buffer);null==d||d.unsubscribe(),t.complete(),t.unsubscribe()}),void 0,(function(){return i=null}));r.subscribe(d)}))}},4943:function(e,r,t){var n=this&&this.__values||function(e){var r="function"==typeof Symbol&&Symbol.iterator,t=r&&e[r],n=0;if(t)return t.call(e);if(e&&"number"==typeof e.length)return{next:function(){return e&&n>=e.length&&(e=void 0),{value:e&&e[n++],done:!e}}};throw new TypeError(r?"Object is not iterable.":"Symbol.iterator is not defined.")};Object.defineProperty(r,"__esModule",{value:!0}),r.bufferToggle=void 0;var o=t(3865),i=t(4935),u=t(7103),a=t(4990),c=t(2576),l=t(6967);r.bufferToggle=function(e,r){return i.operate((function(t,i){var s=[];u.innerFrom(e).subscribe(a.createOperatorSubscriber(i,(function(e){var t=[];s.push(t);var n=new o.Subscription;n.add(u.innerFrom(r(e)).subscribe(a.createOperatorSubscriber(i,(function(){l.arrRemove(s,t),i.next(t),n.unsubscribe()}),c.noop)))}),c.noop)),t.subscribe(a.createOperatorSubscriber(i,(function(e){var r,t;try{for(var o=n(s),i=o.next();!i.done;i=o.next())i.value.push(e)}catch(e){r={error:e}}finally{try{i&&!i.done&&(t=o.return)&&t.call(o)}finally{if(r)throw r.error}}}),(function(){for(;s.length>0;)i.next(s.shift());i.complete()})))}))}},1240:(e,r,t)=>{Object.defineProperty(r,"__esModule",{value:!0}),r.bufferWhen=void 0;var n=t(4935),o=t(2576),i=t(4990),u=t(7103);r.bufferWhen=function(e){return n.operate((function(r,t){var n=null,a=null,c=function(){null==a||a.unsubscribe();var r=n;n=[],r&&t.next(r),u.innerFrom(e()).subscribe(a=i.createOperatorSubscriber(t,c,o.noop))};c(),r.subscribe(i.createOperatorSubscriber(t,(function(e){return null==n?void 0:n.push(e)}),(function(){n&&t.next(n),t.complete()}),void 0,(function(){return n=a=null})))}))}},9548:(e,r,t)=>{Object.defineProperty(r,"__esModule",{value:!0}),r.catchError=void 0;var n=t(7103),o=t(4990),i=t(4935);r.catchError=function e(r){return i.operate((function(t,i){var u,a=null,c=!1;a=t.subscribe(o.createOperatorSubscriber(i,void 0,void 0,(function(o){u=n.innerFrom(r(o,e(r)(t))),a?(a.unsubscribe(),a=null,u.subscribe(i)):c=!0}))),c&&(a.unsubscribe(),a=null,u.subscribe(i))}))}},2128:(e,r,t)=>{Object.defineProperty(r,"__esModule",{value:!0}),r.combineAll=void 0;var n=t(3240);r.combineAll=n.combineLatestAll},6318:function(e,r,t){var n=this&&this.__read||function(e,r){var t="function"==typeof Symbol&&e[Symbol.iterator];if(!t)return e;var n,o,i=t.call(e),u=[];try{for(;(void 0===r||r-- >0)&&!(n=i.next()).done;)u.push(n.value)}catch(e){o={error:e}}finally{try{n&&!n.done&&(t=i.return)&&t.call(i)}finally{if(o)throw o.error}}return u},o=this&&this.__spreadArray||function(e,r){for(var t=0,n=r.length,o=e.length;t<n;t++,o++)e[o]=r[t];return e};Object.defineProperty(r,"__esModule",{value:!0}),r.combineLatest=void 0;var i=t(9258),u=t(4935),a=t(5498),c=t(1914),l=t(9985),s=t(2433);r.combineLatest=function e(){for(var r=[],t=0;t<arguments.length;t++)r[t]=arguments[t];var f=s.popResultSelector(r);return f?l.pipe(e.apply(void 0,o([],n(r))),c.mapOneOrManyArgs(f)):u.operate((function(e,t){i.combineLatestInit(o([e],n(a.argsOrArgArray(r))))(t)}))}},3240:(e,r,t)=>{Object.defineProperty(r,"__esModule",{value:!0}),r.combineLatestAll=void 0;var n=t(9258),o=t(2069);r.combineLatestAll=function(e){return o.joinAllInternals(n.combineLatest,e)}},5024:function(e,r,t){var n=this&&this.__read||function(e,r){var t="function"==typeof Symbol&&e[Symbol.iterator];if(!t)return e;var n,o,i=t.call(e),u=[];try{for(;(void 0===r||r-- >0)&&!(n=i.next()).done;)u.push(n.value)}catch(e){o={error:e}}finally{try{n&&!n.done&&(t=i.return)&&t.call(i)}finally{if(o)throw o.error}}return u},o=this&&this.__spreadArray||function(e,r){for(var t=0,n=r.length,o=e.length;t<n;t++,o++)e[o]=r[t];return e};Object.defineProperty(r,"__esModule",{value:!0}),r.combineLatestWith=void 0;var i=t(6318);r.combineLatestWith=function(){for(var e=[],r=0;r<arguments.length;r++)e[r]=arguments[r];return i.combineLatest.apply(void 0,o([],n(e)))}},4919:function(e,r,t){var n=this&&this.__read||function(e,r){var t="function"==typeof Symbol&&e[Symbol.iterator];if(!t)return e;var n,o,i=t.call(e),u=[];try{for(;(void 0===r||r-- >0)&&!(n=i.next()).done;)u.push(n.value)}catch(e){o={error:e}}finally{try{n&&!n.done&&(t=i.return)&&t.call(i)}finally{if(o)throw o.error}}return u},o=this&&this.__spreadArray||function(e,r){for(var t=0,n=r.length,o=e.length;t<n;t++,o++)e[o]=r[t];return e};Object.defineProperty(r,"__esModule",{value:!0}),r.concat=void 0;var i=t(4935),u=t(4413),a=t(2433),c=t(5432);r.concat=function(){for(var e=[],r=0;r<arguments.length;r++)e[r]=arguments[r];var t=a.popScheduler(e);return i.operate((function(r,i){u.concatAll()(c.from(o([r],n(e)),t)).subscribe(i)}))}},4413:(e,r,t)=>{Object.defineProperty(r,"__esModule",{value:!0}),r.concatAll=void 0;var n=t(3783);r.concatAll=function(){return n.mergeAll(1)}},7498:(e,r,t)=>{Object.defineProperty(r,"__esModule",{value:!0}),r.concatMap=void 0;var n=t(9475),o=t(3005);r.concatMap=function(e,r){return o.isFunction(r)?n.mergeMap(e,r,1):n.mergeMap(e,1)}},6109:(e,r,t)=>{Object.defineProperty(r,"__esModule",{value:!0}),r.concatMapTo=void 0;var n=t(7498),o=t(3005);r.concatMapTo=function(e,r){return o.isFunction(r)?n.concatMap((function(){return e}),r):n.concatMap((function(){return e}))}},9664:function(e,r,t){var n=this&&this.__read||function(e,r){var t="function"==typeof Symbol&&e[Symbol.iterator];if(!t)return e;var n,o,i=t.call(e),u=[];try{for(;(void 0===r||r-- >0)&&!(n=i.next()).done;)u.push(n.value)}catch(e){o={error:e}}finally{try{n&&!n.done&&(t=i.return)&&t.call(i)}finally{if(o)throw o.error}}return u},o=this&&this.__spreadArray||function(e,r){for(var t=0,n=r.length,o=e.length;t<n;t++,o++)e[o]=r[t];return e};Object.defineProperty(r,"__esModule",{value:!0}),r.concatWith=void 0;var i=t(4919);r.concatWith=function(){for(var e=[],r=0;r<arguments.length;r++)e[r]=arguments[r];return i.concat.apply(void 0,o([],n(e)))}},1995:(e,r,t)=>{Object.defineProperty(r,"__esModule",{value:!0}),r.connect=void 0;var n=t(3032),o=t(7103),i=t(4935),u=t(851),a={connector:function(){return new n.Subject}};r.connect=function(e,r){void 0===r&&(r=a);var t=r.connector;return i.operate((function(r,n){var i=t();o.innerFrom(e(u.fromSubscribable(i))).subscribe(n),n.add(r.subscribe(i))}))}},993:(e,r,t)=>{Object.defineProperty(r,"__esModule",{value:!0}),r.count=void 0;var n=t(122);r.count=function(e){return n.reduce((function(r,t,n){return!e||e(t,n)?r+1:r}),0)}},496:(e,r,t)=>{Object.defineProperty(r,"__esModule",{value:!0}),r.debounce=void 0;var n=t(4935),o=t(2576),i=t(4990),u=t(7103);r.debounce=function(e){return n.operate((function(r,t){var n=!1,a=null,c=null,l=function(){if(null==c||c.unsubscribe(),c=null,n){n=!1;var e=a;a=null,t.next(e)}};r.subscribe(i.createOperatorSubscriber(t,(function(r){null==c||c.unsubscribe(),n=!0,a=r,c=i.createOperatorSubscriber(t,l,o.noop),u.innerFrom(e(r)).subscribe(c)}),(function(){l(),t.complete()}),void 0,(function(){a=c=null})))}))}},1385:(e,r,t)=>{Object.defineProperty(r,"__esModule",{value:!0}),r.debounceTime=void 0;var n=t(2445),o=t(4935),i=t(4990);r.debounceTime=function(e,r){return void 0===r&&(r=n.asyncScheduler),o.operate((function(t,n){var o=null,u=null,a=null,c=function(){if(o){o.unsubscribe(),o=null;var e=u;u=null,n.next(e)}};function l(){var t=a+e,i=r.now();if(i<t)return o=this.schedule(void 0,t-i),void n.add(o);c()}t.subscribe(i.createOperatorSubscriber(n,(function(t){u=t,a=r.now(),o||(o=r.schedule(l,e),n.add(o))}),(function(){c(),n.complete()}),void 0,(function(){u=o=null})))}))}},1658:(e,r,t)=>{Object.defineProperty(r,"__esModule",{value:!0}),r.defaultIfEmpty=void 0;var n=t(4935),o=t(4990);r.defaultIfEmpty=function(e){return n.operate((function(r,t){var n=!1;r.subscribe(o.createOperatorSubscriber(t,(function(e){n=!0,t.next(e)}),(function(){n||t.next(e),t.complete()})))}))}},5841:(e,r,t)=>{Object.defineProperty(r,"__esModule",{value:!0}),r.delay=void 0;var n=t(2445),o=t(8798),i=t(7513);r.delay=function(e,r){void 0===r&&(r=n.asyncScheduler);var t=i.timer(e,r);return o.delayWhen((function(){return t}))}},8798:(e,r,t)=>{Object.defineProperty(r,"__esModule",{value:!0}),r.delayWhen=void 0;var n=t(2239),o=t(4783),i=t(9438),u=t(8313),a=t(9475),c=t(7103);r.delayWhen=function e(r,t){return t?function(u){return n.concat(t.pipe(o.take(1),i.ignoreElements()),u.pipe(e(r)))}:a.mergeMap((function(e,t){return c.innerFrom(r(e,t)).pipe(o.take(1),u.mapTo(e))}))}},1080:(e,r,t)=>{Object.defineProperty(r,"__esModule",{value:!0}),r.dematerialize=void 0;var n=t(3104),o=t(4935),i=t(4990);r.dematerialize=function(){return o.operate((function(e,r){e.subscribe(i.createOperatorSubscriber(r,(function(e){return n.observeNotification(e,r)})))}))}},3054:(e,r,t)=>{Object.defineProperty(r,"__esModule",{value:!0}),r.distinct=void 0;var n=t(4935),o=t(4990),i=t(2576),u=t(7103);r.distinct=function(e,r){return n.operate((function(t,n){var a=new Set;t.subscribe(o.createOperatorSubscriber(n,(function(r){var t=e?e(r):r;a.has(t)||(a.add(t),n.next(r))}))),r&&u.innerFrom(r).subscribe(o.createOperatorSubscriber(n,(function(){return a.clear()}),i.noop))}))}},8737:(e,r,t)=>{Object.defineProperty(r,"__esModule",{value:!0}),r.distinctUntilChanged=void 0;var n=t(4781),o=t(4935),i=t(4990);function u(e,r){return e===r}r.distinctUntilChanged=function(e,r){return void 0===r&&(r=n.identity),e=null!=e?e:u,o.operate((function(t,n){var o,u=!0;t.subscribe(i.createOperatorSubscriber(n,(function(t){var i=r(t);!u&&e(o,i)||(u=!1,o=i,n.next(t))})))}))}},7957:(e,r,t)=>{Object.defineProperty(r,"__esModule",{value:!0}),r.distinctUntilKeyChanged=void 0;var n=t(8737);r.distinctUntilKeyChanged=function(e,r){return n.distinctUntilChanged((function(t,n){return r?r(t[e],n[e]):t[e]===n[e]}))}},8633:(e,r,t)=>{Object.defineProperty(r,"__esModule",{value:!0}),r.elementAt=void 0;var n=t(2351),o=t(9154),i=t(1779),u=t(1658),a=t(4783);r.elementAt=function(e,r){if(e<0)throw new n.ArgumentOutOfRangeError;var t=arguments.length>=2;return function(c){return c.pipe(o.filter((function(r,t){return t===e})),a.take(1),t?u.defaultIfEmpty(r):i.throwIfEmpty((function(){return new n.ArgumentOutOfRangeError})))}}},911:function(e,r,t){var n=this&&this.__read||function(e,r){var t="function"==typeof Symbol&&e[Symbol.iterator];if(!t)return e;var n,o,i=t.call(e),u=[];try{for(;(void 0===r||r-- >0)&&!(n=i.next()).done;)u.push(n.value)}catch(e){o={error:e}}finally{try{n&&!n.done&&(t=i.return)&&t.call(i)}finally{if(o)throw o.error}}return u},o=this&&this.__spreadArray||function(e,r){for(var t=0,n=r.length,o=e.length;t<n;t++,o++)e[o]=r[t];return e};Object.defineProperty(r,"__esModule",{value:!0}),r.endWith=void 0;var i=t(2239),u=t(5726);r.endWith=function(){for(var e=[],r=0;r<arguments.length;r++)e[r]=arguments[r];return function(r){return i.concat(r,u.of.apply(void 0,o([],n(e))))}}},2096:(e,r,t)=>{Object.defineProperty(r,"__esModule",{value:!0}),r.every=void 0;var n=t(4935),o=t(4990);r.every=function(e,r){return n.operate((function(t,n){var i=0;t.subscribe(o.createOperatorSubscriber(n,(function(o){e.call(r,o,i++,t)||(n.next(!1),n.complete())}),(function(){n.next(!0),n.complete()})))}))}},67:(e,r,t)=>{Object.defineProperty(r,"__esModule",{value:!0}),r.exhaust=void 0;var n=t(5337);r.exhaust=n.exhaustAll},5337:(e,r,t)=>{Object.defineProperty(r,"__esModule",{value:!0}),r.exhaustAll=void 0;var n=t(5635),o=t(4781);r.exhaustAll=function(){return n.exhaustMap(o.identity)}},5635:(e,r,t)=>{Object.defineProperty(r,"__esModule",{value:!0}),r.exhaustMap=void 0;var n=t(7291),o=t(7103),i=t(4935),u=t(4990);r.exhaustMap=function e(r,t){return t?function(i){return i.pipe(e((function(e,i){return o.innerFrom(r(e,i)).pipe(n.map((function(r,n){return t(e,r,i,n)})))})))}:i.operate((function(e,t){var n=0,i=null,a=!1;e.subscribe(u.createOperatorSubscriber(t,(function(e){i||(i=u.createOperatorSubscriber(t,void 0,(function(){i=null,a&&t.complete()})),o.innerFrom(r(e,n++)).subscribe(i))}),(function(){a=!0,!i&&t.complete()})))}))}},9745:(e,r,t)=>{Object.defineProperty(r,"__esModule",{value:!0}),r.expand=void 0;var n=t(4935),o=t(7788);r.expand=function(e,r,t){return void 0===r&&(r=1/0),r=(r||0)<1?1/0:r,n.operate((function(n,i){return o.mergeInternals(n,i,e,r,void 0,!0,t)}))}},9154:(e,r,t)=>{Object.defineProperty(r,"__esModule",{value:!0}),r.filter=void 0;var n=t(4935),o=t(4990);r.filter=function(e,r){return n.operate((function(t,n){var i=0;t.subscribe(o.createOperatorSubscriber(n,(function(t){return e.call(r,t,i++)&&n.next(t)})))}))}},9283:(e,r,t)=>{Object.defineProperty(r,"__esModule",{value:!0}),r.finalize=void 0;var n=t(4935);r.finalize=function(e){return n.operate((function(r,t){try{r.subscribe(t)}finally{t.add(e)}}))}},7119:(e,r,t)=>{Object.defineProperty(r,"__esModule",{value:!0}),r.createFind=r.find=void 0;var n=t(4935),o=t(4990);function i(e,r,t){var n="index"===t;return function(t,i){var u=0;t.subscribe(o.createOperatorSubscriber(i,(function(o){var a=u++;e.call(r,o,a,t)&&(i.next(n?a:o),i.complete())}),(function(){i.next(n?-1:void 0),i.complete()})))}}r.find=function(e,r){return n.operate(i(e,r,"value"))},r.createFind=i},4706:(e,r,t)=>{Object.defineProperty(r,"__esModule",{value:!0}),r.findIndex=void 0;var n=t(4935),o=t(7119);r.findIndex=function(e,r){return n.operate(o.createFind(e,r,"index"))}},9219:(e,r,t)=>{Object.defineProperty(r,"__esModule",{value:!0}),r.first=void 0;var n=t(9474),o=t(9154),i=t(4783),u=t(1658),a=t(1779),c=t(4781);r.first=function(e,r){var t=arguments.length>=2;return function(l){return l.pipe(e?o.filter((function(r,t){return e(r,t,l)})):c.identity,i.take(1),t?u.defaultIfEmpty(r):a.throwIfEmpty((function(){return new n.EmptyError})))}}},1788:(e,r,t)=>{Object.defineProperty(r,"__esModule",{value:!0}),r.flatMap=void 0;var n=t(9475);r.flatMap=n.mergeMap},9749:(e,r,t)=>{Object.defineProperty(r,"__esModule",{value:!0}),r.groupBy=void 0;var n=t(2419),o=t(7103),i=t(3032),u=t(4935),a=t(4990);r.groupBy=function(e,r,t,c){return u.operate((function(u,l){var s;r&&"function"!=typeof r?(t=r.duration,s=r.element,c=r.connector):s=r;var f=new Map,d=function(e){f.forEach(e),e(l)},p=function(e){return d((function(r){return r.error(e)}))},v=0,b=!1,h=new a.OperatorSubscriber(l,(function(r){try{var u=e(r),d=f.get(u);if(!d){f.set(u,d=c?c():new i.Subject);var y=(_=u,O=d,(g=new n.Observable((function(e){v++;var r=O.subscribe(e);return function(){r.unsubscribe(),0==--v&&b&&h.unsubscribe()}}))).key=_,g);if(l.next(y),t){var m=a.createOperatorSubscriber(d,(function(){d.complete(),null==m||m.unsubscribe()}),void 0,void 0,(function(){return f.delete(u)}));h.add(o.innerFrom(t(y)).subscribe(m))}}d.next(s?s(r):r)}catch(e){p(e)}var _,O,g}),(function(){return d((function(e){return e.complete()}))}),p,(function(){return f.clear()}),(function(){return b=!0,0===v}));u.subscribe(h)}))}},9438:(e,r,t)=>{Object.defineProperty(r,"__esModule",{value:!0}),r.ignoreElements=void 0;var n=t(4935),o=t(4990),i=t(2576);r.ignoreElements=function(){return n.operate((function(e,r){e.subscribe(o.createOperatorSubscriber(r,i.noop))}))}},8515:(e,r,t)=>{Object.defineProperty(r,"__esModule",{value:!0}),r.isEmpty=void 0;var n=t(4935),o=t(4990);r.isEmpty=function(){return n.operate((function(e,r){e.subscribe(o.createOperatorSubscriber(r,(function(){r.next(!1),r.complete()}),(function(){r.next(!0),r.complete()})))}))}},2069:(e,r,t)=>{Object.defineProperty(r,"__esModule",{value:!0}),r.joinAllInternals=void 0;var n=t(4781),o=t(1914),i=t(9985),u=t(9475),a=t(2);r.joinAllInternals=function(e,r){return i.pipe(a.toArray(),u.mergeMap((function(r){return e(r)})),r?o.mapOneOrManyArgs(r):n.identity)}},2435:(e,r,t)=>{Object.defineProperty(r,"__esModule",{value:!0}),r.last=void 0;var n=t(9474),o=t(9154),i=t(1980),u=t(1779),a=t(1658),c=t(4781);r.last=function(e,r){var t=arguments.length>=2;return function(l){return l.pipe(e?o.filter((function(r,t){return e(r,t,l)})):c.identity,i.takeLast(1),t?a.defaultIfEmpty(r):u.throwIfEmpty((function(){return new n.EmptyError})))}}},7291:(e,r,t)=>{Object.defineProperty(r,"__esModule",{value:!0}),r.map=void 0;var n=t(4935),o=t(4990);r.map=function(e,r){return n.operate((function(t,n){var i=0;t.subscribe(o.createOperatorSubscriber(n,(function(t){n.next(e.call(r,t,i++))})))}))}},8313:(e,r,t)=>{Object.defineProperty(r,"__esModule",{value:!0}),r.mapTo=void 0;var n=t(7291);r.mapTo=function(e){return n.map((function(){return e}))}},3209:(e,r,t)=>{Object.defineProperty(r,"__esModule",{value:!0}),r.materialize=void 0;var n=t(3104),o=t(4935),i=t(4990);r.materialize=function(){return o.operate((function(e,r){e.subscribe(i.createOperatorSubscriber(r,(function(e){r.next(n.Notification.createNext(e))}),(function(){r.next(n.Notification.createComplete()),r.complete()}),(function(e){r.next(n.Notification.createError(e)),r.complete()})))}))}},2620:(e,r,t)=>{Object.defineProperty(r,"__esModule",{value:!0}),r.max=void 0;var n=t(122),o=t(3005);r.max=function(e){return n.reduce(o.isFunction(e)?function(r,t){return e(r,t)>0?r:t}:function(e,r){return e>r?e:r})}},9821:function(e,r,t){var n=this&&this.__read||function(e,r){var t="function"==typeof Symbol&&e[Symbol.iterator];if(!t)return e;var n,o,i=t.call(e),u=[];try{for(;(void 0===r||r-- >0)&&!(n=i.next()).done;)u.push(n.value)}catch(e){o={error:e}}finally{try{n&&!n.done&&(t=i.return)&&t.call(i)}finally{if(o)throw o.error}}return u},o=this&&this.__spreadArray||function(e,r){for(var t=0,n=r.length,o=e.length;t<n;t++,o++)e[o]=r[t];return e};Object.defineProperty(r,"__esModule",{value:!0}),r.merge=void 0;var i=t(4935),u=t(5498),a=t(3783),c=t(2433),l=t(5432);r.merge=function(){for(var e=[],r=0;r<arguments.length;r++)e[r]=arguments[r];var t=c.popScheduler(e),s=c.popNumber(e,1/0);return e=u.argsOrArgArray(e),i.operate((function(r,i){a.mergeAll(s)(l.from(o([r],n(e)),t)).subscribe(i)}))}},3783:(e,r,t)=>{Object.defineProperty(r,"__esModule",{value:!0}),r.mergeAll=void 0;var n=t(9475),o=t(4781);r.mergeAll=function(e){return void 0===e&&(e=1/0),n.mergeMap(o.identity,e)}},7788:(e,r,t)=>{Object.defineProperty(r,"__esModule",{value:!0}),r.mergeInternals=void 0;var n=t(7103),o=t(7738),i=t(4990);r.mergeInternals=function(e,r,t,u,a,c,l,s){var f=[],d=0,p=0,v=!1,b=function(){!v||f.length||d||r.complete()},h=function(e){return d<u?y(e):f.push(e)},y=function(e){c&&r.next(e),d++;var s=!1;n.innerFrom(t(e,p++)).subscribe(i.createOperatorSubscriber(r,(function(e){null==a||a(e),c?h(e):r.next(e)}),(function(){s=!0}),void 0,(function(){if(s)try{d--;for(var e=function(){var e=f.shift();l?o.executeSchedule(r,l,(function(){return y(e)})):y(e)};f.length&&d<u;)e();b()}catch(e){r.error(e)}})))};return e.subscribe(i.createOperatorSubscriber(r,h,(function(){v=!0,b()}))),function(){null==s||s()}}},9475:(e,r,t)=>{Object.defineProperty(r,"__esModule",{value:!0}),r.mergeMap=void 0;var n=t(7291),o=t(7103),i=t(4935),u=t(7788),a=t(3005);r.mergeMap=function e(r,t,c){return void 0===c&&(c=1/0),a.isFunction(t)?e((function(e,i){return n.map((function(r,n){return t(e,r,i,n)}))(o.innerFrom(r(e,i)))}),c):("number"==typeof t&&(c=t),i.operate((function(e,t){return u.mergeInternals(e,t,r,c)})))}},1211:(e,r,t)=>{Object.defineProperty(r,"__esModule",{value:!0}),r.mergeMapTo=void 0;var n=t(9475),o=t(3005);r.mergeMapTo=function(e,r,t){return void 0===t&&(t=1/0),o.isFunction(r)?n.mergeMap((function(){return e}),r,t):("number"==typeof r&&(t=r),n.mergeMap((function(){return e}),t))}},7267:(e,r,t)=>{Object.defineProperty(r,"__esModule",{value:!0}),r.mergeScan=void 0;var n=t(4935),o=t(7788);r.mergeScan=function(e,r,t){return void 0===t&&(t=1/0),n.operate((function(n,i){var u=r;return o.mergeInternals(n,i,(function(r,t){return e(u,r,t)}),t,(function(e){u=e}),!1,void 0,(function(){return u=null}))}))}},9303:function(e,r,t){var n=this&&this.__read||function(e,r){var t="function"==typeof Symbol&&e[Symbol.iterator];if(!t)return e;var n,o,i=t.call(e),u=[];try{for(;(void 0===r||r-- >0)&&!(n=i.next()).done;)u.push(n.value)}catch(e){o={error:e}}finally{try{n&&!n.done&&(t=i.return)&&t.call(i)}finally{if(o)throw o.error}}return u},o=this&&this.__spreadArray||function(e,r){for(var t=0,n=r.length,o=e.length;t<n;t++,o++)e[o]=r[t];return e};Object.defineProperty(r,"__esModule",{value:!0}),r.mergeWith=void 0;var i=t(9821);r.mergeWith=function(){for(var e=[],r=0;r<arguments.length;r++)e[r]=arguments[r];return i.merge.apply(void 0,o([],n(e)))}},9714:(e,r,t)=>{Object.defineProperty(r,"__esModule",{value:!0}),r.min=void 0;var n=t(122),o=t(3005);r.min=function(e){return n.reduce(o.isFunction(e)?function(r,t){return e(r,t)<0?r:t}:function(e,r){return e<r?e:r})}},3848:(e,r,t)=>{Object.defineProperty(r,"__esModule",{value:!0}),r.multicast=void 0;var n=t(9518),o=t(3005),i=t(1995);r.multicast=function(e,r){var t=o.isFunction(e)?e:function(){return e};return o.isFunction(r)?i.connect(r,{connector:t}):function(e){return new n.ConnectableObservable(e,t)}}},1184:(e,r,t)=>{Object.defineProperty(r,"__esModule",{value:!0}),r.observeOn=void 0;var n=t(7738),o=t(4935),i=t(4990);r.observeOn=function(e,r){return void 0===r&&(r=0),o.operate((function(t,o){t.subscribe(i.createOperatorSubscriber(o,(function(t){return n.executeSchedule(o,e,(function(){return o.next(t)}),r)}),(function(){return n.executeSchedule(o,e,(function(){return o.complete()}),r)}),(function(t){return n.executeSchedule(o,e,(function(){return o.error(t)}),r)})))}))}},7582:function(e,r,t){var n=this&&this.__read||function(e,r){var t="function"==typeof Symbol&&e[Symbol.iterator];if(!t)return e;var n,o,i=t.call(e),u=[];try{for(;(void 0===r||r-- >0)&&!(n=i.next()).done;)u.push(n.value)}catch(e){o={error:e}}finally{try{n&&!n.done&&(t=i.return)&&t.call(i)}finally{if(o)throw o.error}}return u},o=this&&this.__spreadArray||function(e,r){for(var t=0,n=r.length,o=e.length;t<n;t++,o++)e[o]=r[t];return e};Object.defineProperty(r,"__esModule",{value:!0}),r.onErrorResumeNext=r.onErrorResumeNextWith=void 0;var i=t(5498),u=t(724);function a(){for(var e=[],r=0;r<arguments.length;r++)e[r]=arguments[r];var t=i.argsOrArgArray(e);return function(e){return u.onErrorResumeNext.apply(void 0,o([e],n(t)))}}r.onErrorResumeNextWith=a,r.onErrorResumeNext=a},2731:(e,r,t)=>{Object.defineProperty(r,"__esModule",{value:!0}),r.pairwise=void 0;var n=t(4935),o=t(4990);r.pairwise=function(){return n.operate((function(e,r){var t,n=!1;e.subscribe(o.createOperatorSubscriber(r,(function(e){var o=t;t=e,n&&r.next([o,e]),n=!0})))}))}},4691:(e,r,t)=>{Object.defineProperty(r,"__esModule",{value:!0}),r.pluck=void 0;var n=t(7291);r.pluck=function(){for(var e=[],r=0;r<arguments.length;r++)e[r]=arguments[r];var t=e.length;if(0===t)throw new Error("list of properties cannot be empty.");return n.map((function(r){for(var n=r,o=0;o<t;o++){var i=null==n?void 0:n[e[o]];if(void 0===i)return;n=i}return n}))}},4474:(e,r,t)=>{Object.defineProperty(r,"__esModule",{value:!0}),r.publish=void 0;var n=t(3032),o=t(3848),i=t(1995);r.publish=function(e){return e?function(r){return i.connect(e)(r)}:function(e){return o.multicast(new n.Subject)(e)}}},52:(e,r,t)=>{Object.defineProperty(r,"__esModule",{value:!0}),r.publishBehavior=void 0;var n=t(5240),o=t(9518);r.publishBehavior=function(e){return function(r){var t=new n.BehaviorSubject(e);return new o.ConnectableObservable(r,(function(){return t}))}}},2110:(e,r,t)=>{Object.defineProperty(r,"__esModule",{value:!0}),r.publishLast=void 0;var n=t(280),o=t(9518);r.publishLast=function(){return function(e){var r=new n.AsyncSubject;return new o.ConnectableObservable(e,(function(){return r}))}}},9864:(e,r,t)=>{Object.defineProperty(r,"__esModule",{value:!0}),r.publishReplay=void 0;var n=t(3274),o=t(3848),i=t(3005);r.publishReplay=function(e,r,t,u){t&&!i.isFunction(t)&&(u=t);var a=i.isFunction(t)?t:void 0;return function(t){return o.multicast(new n.ReplaySubject(e,r,u),a)(t)}}},179:function(e,r,t){var n=this&&this.__read||function(e,r){var t="function"==typeof Symbol&&e[Symbol.iterator];if(!t)return e;var n,o,i=t.call(e),u=[];try{for(;(void 0===r||r-- >0)&&!(n=i.next()).done;)u.push(n.value)}catch(e){o={error:e}}finally{try{n&&!n.done&&(t=i.return)&&t.call(i)}finally{if(o)throw o.error}}return u},o=this&&this.__spreadArray||function(e,r){for(var t=0,n=r.length,o=e.length;t<n;t++,o++)e[o]=r[t];return e};Object.defineProperty(r,"__esModule",{value:!0}),r.raceWith=void 0;var i=t(5182),u=t(4935),a=t(4781);r.raceWith=function(){for(var e=[],r=0;r<arguments.length;r++)e[r]=arguments[r];return e.length?u.operate((function(r,t){i.raceInit(o([r],n(e)))(t)})):a.identity}},122:(e,r,t)=>{Object.defineProperty(r,"__esModule",{value:!0}),r.reduce=void 0;var n=t(8345),o=t(4935);r.reduce=function(e,r){return o.operate(n.scanInternals(e,r,arguments.length>=2,!1,!0))}},8739:(e,r,t)=>{Object.defineProperty(r,"__esModule",{value:!0}),r.refCount=void 0;var n=t(4935),o=t(4990);r.refCount=function(){return n.operate((function(e,r){var t=null;e._refCount++;var n=o.createOperatorSubscriber(r,void 0,void 0,void 0,(function(){if(!e||e._refCount<=0||0<--e._refCount)t=null;else{var n=e._connection,o=t;t=null,!n||o&&n!==o||n.unsubscribe(),r.unsubscribe()}}));e.subscribe(n),n.closed||(t=e.connect())}))}},5313:(e,r,t)=>{Object.defineProperty(r,"__esModule",{value:!0}),r.repeat=void 0;var n=t(6332),o=t(4935),i=t(4990),u=t(7103),a=t(7513);r.repeat=function(e){var r,t,c=1/0;return null!=e&&("object"==typeof e?(r=e.count,c=void 0===r?1/0:r,t=e.delay):c=e),c<=0?function(){return n.EMPTY}:o.operate((function(e,r){var n,o=0,l=function(){if(null==n||n.unsubscribe(),n=null,null!=t){var e="number"==typeof t?a.timer(t):u.innerFrom(t(o)),c=i.createOperatorSubscriber(r,(function(){c.unsubscribe(),s()}));e.subscribe(c)}else s()},s=function(){var t=!1;n=e.subscribe(i.createOperatorSubscriber(r,void 0,(function(){++o<c?n?l():t=!0:r.complete()}))),t&&l()};s()}))}},4068:(e,r,t)=>{Object.defineProperty(r,"__esModule",{value:!0}),r.repeatWhen=void 0;var n=t(7103),o=t(3032),i=t(4935),u=t(4990);r.repeatWhen=function(e){return i.operate((function(r,t){var i,a,c=!1,l=!1,s=!1,f=function(){return s&&l&&(t.complete(),!0)},d=function(){s=!1,i=r.subscribe(u.createOperatorSubscriber(t,void 0,(function(){s=!0,!f()&&(a||(a=new o.Subject,n.innerFrom(e(a)).subscribe(u.createOperatorSubscriber(t,(function(){i?d():c=!0}),(function(){l=!0,f()})))),a).next()}))),c&&(i.unsubscribe(),i=null,c=!1,d())};d()}))}},64:(e,r,t)=>{Object.defineProperty(r,"__esModule",{value:!0}),r.retry=void 0;var n=t(4935),o=t(4990),i=t(4781),u=t(7513),a=t(7103);r.retry=function(e){var r;void 0===e&&(e=1/0);var t=(r=e&&"object"==typeof e?e:{count:e}).count,c=void 0===t?1/0:t,l=r.delay,s=r.resetOnSuccess,f=void 0!==s&&s;return c<=0?i.identity:n.operate((function(e,r){var t,n=0,i=function(){var s=!1;t=e.subscribe(o.createOperatorSubscriber(r,(function(e){f&&(n=0),r.next(e)}),void 0,(function(e){if(n++<c){var f=function(){t?(t.unsubscribe(),t=null,i()):s=!0};if(null!=l){var d="number"==typeof l?u.timer(l):a.innerFrom(l(e,n)),p=o.createOperatorSubscriber(r,(function(){p.unsubscribe(),f()}),(function(){r.complete()}));d.subscribe(p)}else f()}else r.error(e)}))),s&&(t.unsubscribe(),t=null,i())};i()}))}},1188:(e,r,t)=>{Object.defineProperty(r,"__esModule",{value:!0}),r.retryWhen=void 0;var n=t(7103),o=t(3032),i=t(4935),u=t(4990);r.retryWhen=function(e){return i.operate((function(r,t){var i,a,c=!1,l=function(){i=r.subscribe(u.createOperatorSubscriber(t,void 0,void 0,(function(r){a||(a=new o.Subject,n.innerFrom(e(a)).subscribe(u.createOperatorSubscriber(t,(function(){return i?l():c=!0})))),a&&a.next(r)}))),c&&(i.unsubscribe(),i=null,c=!1,l())};l()}))}},4193:(e,r,t)=>{Object.defineProperty(r,"__esModule",{value:!0}),r.sample=void 0;var n=t(7103),o=t(4935),i=t(2576),u=t(4990);r.sample=function(e){return o.operate((function(r,t){var o=!1,a=null;r.subscribe(u.createOperatorSubscriber(t,(function(e){o=!0,a=e}))),n.innerFrom(e).subscribe(u.createOperatorSubscriber(t,(function(){if(o){o=!1;var e=a;a=null,t.next(e)}}),i.noop))}))}},6170:(e,r,t)=>{Object.defineProperty(r,"__esModule",{value:!0}),r.sampleTime=void 0;var n=t(2445),o=t(4193),i=t(8990);r.sampleTime=function(e,r){return void 0===r&&(r=n.asyncScheduler),o.sample(i.interval(e,r))}},5876:(e,r,t)=>{Object.defineProperty(r,"__esModule",{value:!0}),r.scan=void 0;var n=t(4935),o=t(8345);r.scan=function(e,r){return n.operate(o.scanInternals(e,r,arguments.length>=2,!0))}},8345:(e,r,t)=>{Object.defineProperty(r,"__esModule",{value:!0}),r.scanInternals=void 0;var n=t(4990);r.scanInternals=function(e,r,t,o,i){return function(u,a){var c=t,l=r,s=0;u.subscribe(n.createOperatorSubscriber(a,(function(r){var t=s++;l=c?e(l,r,t):(c=!0,r),o&&a.next(l)}),i&&function(){c&&a.next(l),a.complete()}))}}},1791:(e,r,t)=>{Object.defineProperty(r,"__esModule",{value:!0}),r.sequenceEqual=void 0;var n=t(4935),o=t(4990),i=t(7103);r.sequenceEqual=function(e,r){return void 0===r&&(r=function(e,r){return e===r}),n.operate((function(t,n){var u={buffer:[],complete:!1},a={buffer:[],complete:!1},c=function(e){n.next(e),n.complete()},l=function(e,t){var i=o.createOperatorSubscriber(n,(function(n){var o=t.buffer,i=t.complete;0===o.length?i?c(!1):e.buffer.push(n):!r(n,o.shift())&&c(!1)}),(function(){e.complete=!0;var r=t.complete,n=t.buffer;r&&c(0===n.length),null==i||i.unsubscribe()}));return i};t.subscribe(l(u,a)),i.innerFrom(e).subscribe(l(a,u))}))}},5137:function(e,r,t){var n=this&&this.__read||function(e,r){var t="function"==typeof Symbol&&e[Symbol.iterator];if(!t)return e;var n,o,i=t.call(e),u=[];try{for(;(void 0===r||r-- >0)&&!(n=i.next()).done;)u.push(n.value)}catch(e){o={error:e}}finally{try{n&&!n.done&&(t=i.return)&&t.call(i)}finally{if(o)throw o.error}}return u},o=this&&this.__spreadArray||function(e,r){for(var t=0,n=r.length,o=e.length;t<n;t++,o++)e[o]=r[t];return e};Object.defineProperty(r,"__esModule",{value:!0}),r.share=void 0;var i=t(7103),u=t(3032),a=t(5125),c=t(4935);function l(e,r){for(var t=[],u=2;u<arguments.length;u++)t[u-2]=arguments[u];if(!0!==r){if(!1!==r){var c=new a.SafeSubscriber({next:function(){c.unsubscribe(),e()}});return i.innerFrom(r.apply(void 0,o([],n(t)))).subscribe(c)}}else e()}r.share=function(e){void 0===e&&(e={});var r=e.connector,t=void 0===r?function(){return new u.Subject}:r,n=e.resetOnError,o=void 0===n||n,s=e.resetOnComplete,f=void 0===s||s,d=e.resetOnRefCountZero,p=void 0===d||d;return function(e){var r,n,u,s=0,d=!1,v=!1,b=function(){null==n||n.unsubscribe(),n=void 0},h=function(){b(),r=u=void 0,d=v=!1},y=function(){var e=r;h(),null==e||e.unsubscribe()};return c.operate((function(e,c){s++,v||d||b();var m=u=null!=u?u:t();c.add((function(){0!=--s||v||d||(n=l(y,p))})),m.subscribe(c),!r&&s>0&&(r=new a.SafeSubscriber({next:function(e){return m.next(e)},error:function(e){v=!0,b(),n=l(h,o,e),m.error(e)},complete:function(){d=!0,b(),n=l(h,f),m.complete()}}),i.innerFrom(e).subscribe(r))}))(e)}}},1348:(e,r,t)=>{Object.defineProperty(r,"__esModule",{value:!0}),r.shareReplay=void 0;var n=t(3274),o=t(5137);r.shareReplay=function(e,r,t){var i,u,a,c,l=!1;return e&&"object"==typeof e?(i=e.bufferSize,c=void 0===i?1/0:i,u=e.windowTime,r=void 0===u?1/0:u,l=void 0!==(a=e.refCount)&&a,t=e.scheduler):c=null!=e?e:1/0,o.share({connector:function(){return new n.ReplaySubject(c,r,t)},resetOnError:!0,resetOnComplete:!1,resetOnRefCountZero:l})}},8242:(e,r,t)=>{Object.defineProperty(r,"__esModule",{value:!0}),r.single=void 0;var n=t(9474),o=t(6156),i=t(8598),u=t(4935),a=t(4990);r.single=function(e){return u.operate((function(r,t){var u,c=!1,l=!1,s=0;r.subscribe(a.createOperatorSubscriber(t,(function(n){l=!0,e&&!e(n,s++,r)||(c&&t.error(new o.SequenceError("Too many matching values")),c=!0,u=n)}),(function(){c?(t.next(u),t.complete()):t.error(l?new i.NotFoundError("No matching values"):new n.EmptyError)})))}))}},3169:(e,r,t)=>{Object.defineProperty(r,"__esModule",{value:!0}),r.skip=void 0;var n=t(9154);r.skip=function(e){return n.filter((function(r,t){return e<=t}))}},2454:(e,r,t)=>{Object.defineProperty(r,"__esModule",{value:!0}),r.skipLast=void 0;var n=t(4781),o=t(4935),i=t(4990);r.skipLast=function(e){return e<=0?n.identity:o.operate((function(r,t){var n=new Array(e),o=0;return r.subscribe(i.createOperatorSubscriber(t,(function(r){var i=o++;if(i<e)n[i]=r;else{var u=i%e,a=n[u];n[u]=r,t.next(a)}}))),function(){n=null}}))}},6931:(e,r,t)=>{Object.defineProperty(r,"__esModule",{value:!0}),r.skipUntil=void 0;var n=t(4935),o=t(4990),i=t(7103),u=t(2576);r.skipUntil=function(e){return n.operate((function(r,t){var n=!1,a=o.createOperatorSubscriber(t,(function(){null==a||a.unsubscribe(),n=!0}),u.noop);i.innerFrom(e).subscribe(a),r.subscribe(o.createOperatorSubscriber(t,(function(e){return n&&t.next(e)})))}))}},7913:(e,r,t)=>{Object.defineProperty(r,"__esModule",{value:!0}),r.skipWhile=void 0;var n=t(4935),o=t(4990);r.skipWhile=function(e){return n.operate((function(r,t){var n=!1,i=0;r.subscribe(o.createOperatorSubscriber(t,(function(r){return(n||(n=!e(r,i++)))&&t.next(r)})))}))}},9234:(e,r,t)=>{Object.defineProperty(r,"__esModule",{value:!0}),r.startWith=void 0;var n=t(2239),o=t(2433),i=t(4935);r.startWith=function(){for(var e=[],r=0;r<arguments.length;r++)e[r]=arguments[r];var t=o.popScheduler(e);return i.operate((function(r,o){(t?n.concat(e,r,t):n.concat(e,r)).subscribe(o)}))}},276:(e,r,t)=>{Object.defineProperty(r,"__esModule",{value:!0}),r.subscribeOn=void 0;var n=t(4935);r.subscribeOn=function(e,r){return void 0===r&&(r=0),n.operate((function(t,n){n.add(e.schedule((function(){return t.subscribe(n)}),r))}))}},9253:(e,r,t)=>{Object.defineProperty(r,"__esModule",{value:!0}),r.switchAll=void 0;var n=t(8518),o=t(4781);r.switchAll=function(){return n.switchMap(o.identity)}},8518:(e,r,t)=>{Object.defineProperty(r,"__esModule",{value:!0}),r.switchMap=void 0;var n=t(7103),o=t(4935),i=t(4990);r.switchMap=function(e,r){return o.operate((function(t,o){var u=null,a=0,c=!1,l=function(){return c&&!u&&o.complete()};t.subscribe(i.createOperatorSubscriber(o,(function(t){null==u||u.unsubscribe();var c=0,s=a++;n.innerFrom(e(t,s)).subscribe(u=i.createOperatorSubscriber(o,(function(e){return o.next(r?r(t,e,s,c++):e)}),(function(){u=null,l()})))}),(function(){c=!0,l()})))}))}},1173:(e,r,t)=>{Object.defineProperty(r,"__esModule",{value:!0}),r.switchMapTo=void 0;var n=t(8518),o=t(3005);r.switchMapTo=function(e,r){return o.isFunction(r)?n.switchMap((function(){return e}),r):n.switchMap((function(){return e}))}},3855:(e,r,t)=>{Object.defineProperty(r,"__esModule",{value:!0}),r.switchScan=void 0;var n=t(8518),o=t(4935);r.switchScan=function(e,r){return o.operate((function(t,o){var i=r;return n.switchMap((function(r,t){return e(i,r,t)}),(function(e,r){return i=r,r}))(t).subscribe(o),function(){i=null}}))}},4783:(e,r,t)=>{Object.defineProperty(r,"__esModule",{value:!0}),r.take=void 0;var n=t(6332),o=t(4935),i=t(4990);r.take=function(e){return e<=0?function(){return n.EMPTY}:o.operate((function(r,t){var n=0;r.subscribe(i.createOperatorSubscriber(t,(function(r){++n<=e&&(t.next(r),e<=n&&t.complete())})))}))}},1980:function(e,r,t){var n=this&&this.__values||function(e){var r="function"==typeof Symbol&&Symbol.iterator,t=r&&e[r],n=0;if(t)return t.call(e);if(e&&"number"==typeof e.length)return{next:function(){return e&&n>=e.length&&(e=void 0),{value:e&&e[n++],done:!e}}};throw new TypeError(r?"Object is not iterable.":"Symbol.iterator is not defined.")};Object.defineProperty(r,"__esModule",{value:!0}),r.takeLast=void 0;var o=t(6332),i=t(4935),u=t(4990);r.takeLast=function(e){return e<=0?function(){return o.EMPTY}:i.operate((function(r,t){var o=[];r.subscribe(u.createOperatorSubscriber(t,(function(r){o.push(r),e<o.length&&o.shift()}),(function(){var e,r;try{for(var i=n(o),u=i.next();!u.done;u=i.next()){var a=u.value;t.next(a)}}catch(r){e={error:r}}finally{try{u&&!u.done&&(r=i.return)&&r.call(i)}finally{if(e)throw e.error}}t.complete()}),void 0,(function(){o=null})))}))}},9845:(e,r,t)=>{Object.defineProperty(r,"__esModule",{value:!0}),r.takeUntil=void 0;var n=t(4935),o=t(4990),i=t(7103),u=t(2576);r.takeUntil=function(e){return n.operate((function(r,t){i.innerFrom(e).subscribe(o.createOperatorSubscriber(t,(function(){return t.complete()}),u.noop)),!t.closed&&r.subscribe(t)}))}},6060:(e,r,t)=>{Object.defineProperty(r,"__esModule",{value:!0}),r.takeWhile=void 0;var n=t(4935),o=t(4990);r.takeWhile=function(e,r){return void 0===r&&(r=!1),n.operate((function(t,n){var i=0;t.subscribe(o.createOperatorSubscriber(n,(function(t){var o=e(t,i++);(o||r)&&n.next(t),!o&&n.complete()})))}))}},1138:(e,r,t)=>{Object.defineProperty(r,"__esModule",{value:!0}),r.tap=void 0;var n=t(3005),o=t(4935),i=t(4990),u=t(4781);r.tap=function(e,r,t){var a=n.isFunction(e)||r||t?{next:e,error:r,complete:t}:e;return a?o.operate((function(e,r){var t;null===(t=a.subscribe)||void 0===t||t.call(a);var n=!0;e.subscribe(i.createOperatorSubscriber(r,(function(e){var t;null===(t=a.next)||void 0===t||t.call(a,e),r.next(e)}),(function(){var e;n=!1,null===(e=a.complete)||void 0===e||e.call(a),r.complete()}),(function(e){var t;n=!1,null===(t=a.error)||void 0===t||t.call(a,e),r.error(e)}),(function(){var e,r;n&&(null===(e=a.unsubscribe)||void 0===e||e.call(a)),null===(r=a.finalize)||void 0===r||r.call(a)})))})):u.identity}},7306:(e,r,t)=>{Object.defineProperty(r,"__esModule",{value:!0}),r.throttle=void 0;var n=t(4935),o=t(4990),i=t(7103);r.throttle=function(e,r){return n.operate((function(t,n){var u=null!=r?r:{},a=u.leading,c=void 0===a||a,l=u.trailing,s=void 0!==l&&l,f=!1,d=null,p=null,v=!1,b=function(){null==p||p.unsubscribe(),p=null,s&&(m(),v&&n.complete())},h=function(){p=null,v&&n.complete()},y=function(r){return p=i.innerFrom(e(r)).subscribe(o.createOperatorSubscriber(n,b,h))},m=function(){if(f){f=!1;var e=d;d=null,n.next(e),!v&&y(e)}};t.subscribe(o.createOperatorSubscriber(n,(function(e){f=!0,d=e,(!p||p.closed)&&(c?m():y(e))}),(function(){v=!0,(!(s&&f&&p)||p.closed)&&n.complete()})))}))}},8968:(e,r,t)=>{Object.defineProperty(r,"__esModule",{value:!0}),r.throttleTime=void 0;var n=t(2445),o=t(7306),i=t(7513);r.throttleTime=function(e,r,t){void 0===r&&(r=n.asyncScheduler);var u=i.timer(e,r);return o.throttle((function(){return u}),t)}},1779:(e,r,t)=>{Object.defineProperty(r,"__esModule",{value:!0}),r.throwIfEmpty=void 0;var n=t(9474),o=t(4935),i=t(4990);function u(){return new n.EmptyError}r.throwIfEmpty=function(e){return void 0===e&&(e=u),o.operate((function(r,t){var n=!1;r.subscribe(i.createOperatorSubscriber(t,(function(e){n=!0,t.next(e)}),(function(){return n?t.complete():t.error(e())})))}))}},8005:(e,r,t)=>{Object.defineProperty(r,"__esModule",{value:!0}),r.TimeInterval=r.timeInterval=void 0;var n=t(2445),o=t(4935),i=t(4990);r.timeInterval=function(e){return void 0===e&&(e=n.asyncScheduler),o.operate((function(r,t){var n=e.now();r.subscribe(i.createOperatorSubscriber(t,(function(r){var o=e.now(),i=o-n;n=o,t.next(new u(r,i))})))}))};var u=function(e,r){this.value=e,this.interval=r};r.TimeInterval=u},4173:(e,r,t)=>{Object.defineProperty(r,"__esModule",{value:!0}),r.timeout=r.TimeoutError=void 0;var n=t(2445),o=t(1677),i=t(4935),u=t(7103),a=t(7029),c=t(4990),l=t(7738);function s(e){throw new r.TimeoutError(e)}r.TimeoutError=a.createErrorClass((function(e){return function(r){void 0===r&&(r=null),e(this),this.message="Timeout has occurred",this.name="TimeoutError",this.info=r}})),r.timeout=function(e,r){var t=o.isValidDate(e)?{first:e}:"number"==typeof e?{each:e}:e,a=t.first,f=t.each,d=t.with,p=void 0===d?s:d,v=t.scheduler,b=void 0===v?null!=r?r:n.asyncScheduler:v,h=t.meta,y=void 0===h?null:h;if(null==a&&null==f)throw new TypeError("No timeout provided.");return i.operate((function(e,r){var t,n,o=null,i=0,s=function(e){n=l.executeSchedule(r,b,(function(){try{t.unsubscribe(),u.innerFrom(p({meta:y,lastValue:o,seen:i})).subscribe(r)}catch(e){r.error(e)}}),e)};t=e.subscribe(c.createOperatorSubscriber(r,(function(e){null==n||n.unsubscribe(),i++,r.next(o=e),f>0&&s(f)}),void 0,void 0,(function(){(null==n?void 0:n.closed)||null==n||n.unsubscribe(),o=null}))),!i&&s(null!=a?"number"==typeof a?a:+a-b.now():f)}))}},7223:(e,r,t)=>{Object.defineProperty(r,"__esModule",{value:!0}),r.timeoutWith=void 0;var n=t(2445),o=t(1677),i=t(4173);r.timeoutWith=function(e,r,t){var u,a,c;if(t=null!=t?t:n.async,o.isValidDate(e)?u=e:"number"==typeof e&&(a=e),!r)throw new TypeError("No observable provided to switch to");if(c=function(){return r},null==u&&null==a)throw new TypeError("No timeout provided.");return i.timeout({first:u,each:a,scheduler:t,with:c})}},8975:(e,r,t)=>{Object.defineProperty(r,"__esModule",{value:!0}),r.timestamp=void 0;var n=t(7950),o=t(7291);r.timestamp=function(e){return void 0===e&&(e=n.dateTimestampProvider),o.map((function(r){return{value:r,timestamp:e.now()}}))}},2:(e,r,t)=>{Object.defineProperty(r,"__esModule",{value:!0}),r.toArray=void 0;var n=t(122),o=t(4935),i=function(e,r){return e.push(r),e};r.toArray=function(){return o.operate((function(e,r){n.reduce(i,[])(e).subscribe(r)}))}},2826:(e,r,t)=>{Object.defineProperty(r,"__esModule",{value:!0}),r.window=void 0;var n=t(3032),o=t(4935),i=t(4990),u=t(2576),a=t(7103);r.window=function(e){return o.operate((function(r,t){var o=new n.Subject;t.next(o.asObservable());var c=function(e){o.error(e),t.error(e)};return r.subscribe(i.createOperatorSubscriber(t,(function(e){return null==o?void 0:o.next(e)}),(function(){o.complete(),t.complete()}),c)),a.innerFrom(e).subscribe(i.createOperatorSubscriber(t,(function(){o.complete(),t.next(o=new n.Subject)}),u.noop,c)),function(){null==o||o.unsubscribe(),o=null}}))}},7526:function(e,r,t){var n=this&&this.__values||function(e){var r="function"==typeof Symbol&&Symbol.iterator,t=r&&e[r],n=0;if(t)return t.call(e);if(e&&"number"==typeof e.length)return{next:function(){return e&&n>=e.length&&(e=void 0),{value:e&&e[n++],done:!e}}};throw new TypeError(r?"Object is not iterable.":"Symbol.iterator is not defined.")};Object.defineProperty(r,"__esModule",{value:!0}),r.windowCount=void 0;var o=t(3032),i=t(4935),u=t(4990);r.windowCount=function(e,r){void 0===r&&(r=0);var t=r>0?r:e;return i.operate((function(r,i){var a=[new o.Subject],c=0;i.next(a[0].asObservable()),r.subscribe(u.createOperatorSubscriber(i,(function(r){var u,l;try{for(var s=n(a),f=s.next();!f.done;f=s.next())f.value.next(r)}catch(e){u={error:e}}finally{try{f&&!f.done&&(l=s.return)&&l.call(s)}finally{if(u)throw u.error}}var d=c-e+1;if(d>=0&&d%t==0&&a.shift().complete(),++c%t==0){var p=new o.Subject;a.push(p),i.next(p.asObservable())}}),(function(){for(;a.length>0;)a.shift().complete();i.complete()}),(function(e){for(;a.length>0;)a.shift().error(e);i.error(e)}),(function(){a=null})))}))}},8294:(e,r,t)=>{Object.defineProperty(r,"__esModule",{value:!0}),r.windowTime=void 0;var n=t(3032),o=t(2445),i=t(3865),u=t(4935),a=t(4990),c=t(6967),l=t(2433),s=t(7738);r.windowTime=function(e){for(var r,t,f=[],d=1;d<arguments.length;d++)f[d-1]=arguments[d];var p=null!==(r=l.popScheduler(f))&&void 0!==r?r:o.asyncScheduler,v=null!==(t=f[0])&&void 0!==t?t:null,b=f[1]||1/0;return u.operate((function(r,t){var o=[],u=!1,l=function(e){var r=e.window,t=e.subs;r.complete(),t.unsubscribe(),c.arrRemove(o,e),u&&f()},f=function(){if(o){var r=new i.Subscription;t.add(r);var u=new n.Subject,a={window:u,subs:r,seen:0};o.push(a),t.next(u.asObservable()),s.executeSchedule(r,p,(function(){return l(a)}),e)}};null!==v&&v>=0?s.executeSchedule(t,p,f,v,!0):u=!0,f();var d=function(e){return o.slice().forEach(e)},h=function(e){d((function(r){var t=r.window;return e(t)})),e(t),t.unsubscribe()};return r.subscribe(a.createOperatorSubscriber(t,(function(e){d((function(r){r.window.next(e),b<=++r.seen&&l(r)}))}),(function(){return h((function(e){return e.complete()}))}),(function(e){return h((function(r){return r.error(e)}))}))),function(){o=null}}))}},1883:function(e,r,t){var n=this&&this.__values||function(e){var r="function"==typeof Symbol&&Symbol.iterator,t=r&&e[r],n=0;if(t)return t.call(e);if(e&&"number"==typeof e.length)return{next:function(){return e&&n>=e.length&&(e=void 0),{value:e&&e[n++],done:!e}}};throw new TypeError(r?"Object is not iterable.":"Symbol.iterator is not defined.")};Object.defineProperty(r,"__esModule",{value:!0}),r.windowToggle=void 0;var o=t(3032),i=t(3865),u=t(4935),a=t(7103),c=t(4990),l=t(2576),s=t(6967);r.windowToggle=function(e,r){return u.operate((function(t,u){var f=[],d=function(e){for(;0<f.length;)f.shift().error(e);u.error(e)};a.innerFrom(e).subscribe(c.createOperatorSubscriber(u,(function(e){var t=new o.Subject;f.push(t);var n,p=new i.Subscription;try{n=a.innerFrom(r(e))}catch(e){return void d(e)}u.next(t.asObservable()),p.add(n.subscribe(c.createOperatorSubscriber(u,(function(){s.arrRemove(f,t),t.complete(),p.unsubscribe()}),l.noop,d)))}),l.noop)),t.subscribe(c.createOperatorSubscriber(u,(function(e){var r,t,o=f.slice();try{for(var i=n(o),u=i.next();!u.done;u=i.next())u.value.next(e)}catch(e){r={error:e}}finally{try{u&&!u.done&&(t=i.return)&&t.call(i)}finally{if(r)throw r.error}}}),(function(){for(;0<f.length;)f.shift().complete();u.complete()}),d,(function(){for(;0<f.length;)f.shift().unsubscribe()})))}))}},4309:(e,r,t)=>{Object.defineProperty(r,"__esModule",{value:!0}),r.windowWhen=void 0;var n=t(3032),o=t(4935),i=t(4990),u=t(7103);r.windowWhen=function(e){return o.operate((function(r,t){var o,a,c=function(e){o.error(e),t.error(e)},l=function(){var r;null==a||a.unsubscribe(),null==o||o.complete(),o=new n.Subject,t.next(o.asObservable());try{r=u.innerFrom(e())}catch(e){return void c(e)}r.subscribe(a=i.createOperatorSubscriber(t,l,l,c))};l(),r.subscribe(i.createOperatorSubscriber(t,(function(e){return o.next(e)}),(function(){o.complete(),t.complete()}),c,(function(){null==a||a.unsubscribe(),o=null})))}))}},3041:function(e,r,t){var n=this&&this.__read||function(e,r){var t="function"==typeof Symbol&&e[Symbol.iterator];if(!t)return e;var n,o,i=t.call(e),u=[];try{for(;(void 0===r||r-- >0)&&!(n=i.next()).done;)u.push(n.value)}catch(e){o={error:e}}finally{try{n&&!n.done&&(t=i.return)&&t.call(i)}finally{if(o)throw o.error}}return u},o=this&&this.__spreadArray||function(e,r){for(var t=0,n=r.length,o=e.length;t<n;t++,o++)e[o]=r[t];return e};Object.defineProperty(r,"__esModule",{value:!0}),r.withLatestFrom=void 0;var i=t(4935),u=t(4990),a=t(7103),c=t(4781),l=t(2576),s=t(2433);r.withLatestFrom=function(){for(var e=[],r=0;r<arguments.length;r++)e[r]=arguments[r];var t=s.popResultSelector(e);return i.operate((function(r,i){for(var s=e.length,f=new Array(s),d=e.map((function(){return!1})),p=!1,v=function(r){a.innerFrom(e[r]).subscribe(u.createOperatorSubscriber(i,(function(e){f[r]=e,p||d[r]||(d[r]=!0,(p=d.every(c.identity))&&(d=null))}),l.noop))},b=0;b<s;b++)v(b);r.subscribe(u.createOperatorSubscriber(i,(function(e){if(p){var r=o([e],n(f));i.next(t?t.apply(void 0,o([],n(r))):r)}})))}))}},4400:function(e,r,t){var n=this&&this.__read||function(e,r){var t="function"==typeof Symbol&&e[Symbol.iterator];if(!t)return e;var n,o,i=t.call(e),u=[];try{for(;(void 0===r||r-- >0)&&!(n=i.next()).done;)u.push(n.value)}catch(e){o={error:e}}finally{try{n&&!n.done&&(t=i.return)&&t.call(i)}finally{if(o)throw o.error}}return u},o=this&&this.__spreadArray||function(e,r){for(var t=0,n=r.length,o=e.length;t<n;t++,o++)e[o]=r[t];return e};Object.defineProperty(r,"__esModule",{value:!0}),r.zip=void 0;var i=t(7654),u=t(4935);r.zip=function(){for(var e=[],r=0;r<arguments.length;r++)e[r]=arguments[r];return u.operate((function(r,t){i.zip.apply(void 0,o([r],n(e))).subscribe(t)}))}},8593:(e,r,t)=>{Object.defineProperty(r,"__esModule",{value:!0}),r.zipAll=void 0;var n=t(7654),o=t(2069);r.zipAll=function(e){return o.joinAllInternals(n.zip,e)}},8096:function(e,r,t){var n=this&&this.__read||function(e,r){var t="function"==typeof Symbol&&e[Symbol.iterator];if(!t)return e;var n,o,i=t.call(e),u=[];try{for(;(void 0===r||r-- >0)&&!(n=i.next()).done;)u.push(n.value)}catch(e){o={error:e}}finally{try{n&&!n.done&&(t=i.return)&&t.call(i)}finally{if(o)throw o.error}}return u},o=this&&this.__spreadArray||function(e,r){for(var t=0,n=r.length,o=e.length;t<n;t++,o++)e[o]=r[t];return e};Object.defineProperty(r,"__esModule",{value:!0}),r.zipWith=void 0;var i=t(4400);r.zipWith=function(){for(var e=[],r=0;r<arguments.length;r++)e[r]=arguments[r];return i.zip.apply(void 0,o([],n(e)))}},7631:(e,r,t)=>{Object.defineProperty(r,"__esModule",{value:!0}),r.scheduleArray=void 0;var n=t(2419);r.scheduleArray=function(e,r){return new n.Observable((function(t){var n=0;return r.schedule((function(){n===e.length?t.complete():(t.next(e[n++]),t.closed||this.schedule())}))}))}},8489:(e,r,t)=>{Object.defineProperty(r,"__esModule",{value:!0}),r.scheduleAsyncIterable=void 0;var n=t(2419),o=t(7738);r.scheduleAsyncIterable=function(e,r){if(!e)throw new Error("Iterable cannot be null");return new n.Observable((function(t){o.executeSchedule(t,r,(function(){var n=e[Symbol.asyncIterator]();o.executeSchedule(t,r,(function(){n.next().then((function(e){e.done?t.complete():t.next(e.value)}))}),0,!0)}))}))}},1297:(e,r,t)=>{Object.defineProperty(r,"__esModule",{value:!0}),r.scheduleIterable=void 0;var n=t(2419),o=t(3725),i=t(3005),u=t(7738);r.scheduleIterable=function(e,r){return new n.Observable((function(t){var n;return u.executeSchedule(t,r,(function(){n=e[o.iterator](),u.executeSchedule(t,r,(function(){var e,r,o;try{r=(e=n.next()).value,o=e.done}catch(e){return void t.error(e)}o?t.complete():t.next(r)}),0,!0)})),function(){return i.isFunction(null==n?void 0:n.return)&&n.return()}}))}},4001:(e,r,t)=>{Object.defineProperty(r,"__esModule",{value:!0}),r.scheduleObservable=void 0;var n=t(7103),o=t(1184),i=t(276);r.scheduleObservable=function(e,r){return n.innerFrom(e).pipe(i.subscribeOn(r),o.observeOn(r))}},5143:(e,r,t)=>{Object.defineProperty(r,"__esModule",{value:!0}),r.schedulePromise=void 0;var n=t(7103),o=t(1184),i=t(276);r.schedulePromise=function(e,r){return n.innerFrom(e).pipe(i.subscribeOn(r),o.observeOn(r))}},3676:(e,r,t)=>{Object.defineProperty(r,"__esModule",{value:!0}),r.scheduleReadableStreamLike=void 0;var n=t(8489),o=t(7823);r.scheduleReadableStreamLike=function(e,r){return n.scheduleAsyncIterable(o.readableStreamLikeToAsyncGenerator(e),r)}},5207:(e,r,t)=>{Object.defineProperty(r,"__esModule",{value:!0}),r.scheduled=void 0;var n=t(4001),o=t(5143),i=t(7631),u=t(1297),a=t(8489),c=t(9500),l=t(6018),s=t(3909),f=t(2743),d=t(9595),p=t(9906),v=t(7823),b=t(3676);r.scheduled=function(e,r){if(null!=e){if(c.isInteropObservable(e))return n.scheduleObservable(e,r);if(s.isArrayLike(e))return i.scheduleArray(e,r);if(l.isPromise(e))return o.schedulePromise(e,r);if(d.isAsyncIterable(e))return a.scheduleAsyncIterable(e,r);if(f.isIterable(e))return u.scheduleIterable(e,r);if(v.isReadableStreamLike(e))return b.scheduleReadableStreamLike(e,r)}throw p.createInvalidObservableTypeError(e)}},1986:function(e,r,t){var n,o=this&&this.__extends||(n=function(e,r){return n=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,r){e.__proto__=r}||function(e,r){for(var t in r)Object.prototype.hasOwnProperty.call(r,t)&&(e[t]=r[t])},n(e,r)},function(e,r){if("function"!=typeof r&&null!==r)throw new TypeError("Class extends value "+String(r)+" is not a constructor or null");function t(){this.constructor=e}n(e,r),e.prototype=null===r?Object.create(r):(t.prototype=r.prototype,new t)});Object.defineProperty(r,"__esModule",{value:!0}),r.Action=void 0;var i=function(e){function r(r,t){return e.call(this)||this}return o(r,e),r.prototype.schedule=function(e,r){return void 0===r&&(r=0),this},r}(t(3865).Subscription);r.Action=i},7574:function(e,r,t){var n,o=this&&this.__extends||(n=function(e,r){return n=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,r){e.__proto__=r}||function(e,r){for(var t in r)Object.prototype.hasOwnProperty.call(r,t)&&(e[t]=r[t])},n(e,r)},function(e,r){if("function"!=typeof r&&null!==r)throw new TypeError("Class extends value "+String(r)+" is not a constructor or null");function t(){this.constructor=e}n(e,r),e.prototype=null===r?Object.create(r):(t.prototype=r.prototype,new t)});Object.defineProperty(r,"__esModule",{value:!0}),r.AnimationFrameAction=void 0;var i=t(9702),u=t(505),a=function(e){function r(r,t){var n=e.call(this,r,t)||this;return n.scheduler=r,n.work=t,n}return o(r,e),r.prototype.requestAsyncId=function(r,t,n){return void 0===n&&(n=0),null!==n&&n>0?e.prototype.requestAsyncId.call(this,r,t,n):(r.actions.push(this),r._scheduled||(r._scheduled=u.animationFrameProvider.requestAnimationFrame((function(){return r.flush(void 0)}))))},r.prototype.recycleAsyncId=function(r,t,n){var o;if(void 0===n&&(n=0),null!=n?n>0:this.delay>0)return e.prototype.recycleAsyncId.call(this,r,t,n);var i=r.actions;null!=t&&(null===(o=i[i.length-1])||void 0===o?void 0:o.id)!==t&&(u.animationFrameProvider.cancelAnimationFrame(t),r._scheduled=void 0)},r}(i.AsyncAction);r.AnimationFrameAction=a},2934:function(e,r,t){var n,o=this&&this.__extends||(n=function(e,r){return n=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,r){e.__proto__=r}||function(e,r){for(var t in r)Object.prototype.hasOwnProperty.call(r,t)&&(e[t]=r[t])},n(e,r)},function(e,r){if("function"!=typeof r&&null!==r)throw new TypeError("Class extends value "+String(r)+" is not a constructor or null");function t(){this.constructor=e}n(e,r),e.prototype=null===r?Object.create(r):(t.prototype=r.prototype,new t)});Object.defineProperty(r,"__esModule",{value:!0}),r.AnimationFrameScheduler=void 0;var i=function(e){function r(){return null!==e&&e.apply(this,arguments)||this}return o(r,e),r.prototype.flush=function(e){this._active=!0;var r=this._scheduled;this._scheduled=void 0;var t,n=this.actions;e=e||n.shift();do{if(t=e.execute(e.state,e.delay))break}while((e=n[0])&&e.id===r&&n.shift());if(this._active=!1,t){for(;(e=n[0])&&e.id===r&&n.shift();)e.unsubscribe();throw t}},r}(t(3643).AsyncScheduler);r.AnimationFrameScheduler=i},2189:function(e,r,t){var n,o=this&&this.__extends||(n=function(e,r){return n=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,r){e.__proto__=r}||function(e,r){for(var t in r)Object.prototype.hasOwnProperty.call(r,t)&&(e[t]=r[t])},n(e,r)},function(e,r){if("function"!=typeof r&&null!==r)throw new TypeError("Class extends value "+String(r)+" is not a constructor or null");function t(){this.constructor=e}n(e,r),e.prototype=null===r?Object.create(r):(t.prototype=r.prototype,new t)});Object.defineProperty(r,"__esModule",{value:!0}),r.AsapAction=void 0;var i=t(9702),u=t(8908),a=function(e){function r(r,t){var n=e.call(this,r,t)||this;return n.scheduler=r,n.work=t,n}return o(r,e),r.prototype.requestAsyncId=function(r,t,n){return void 0===n&&(n=0),null!==n&&n>0?e.prototype.requestAsyncId.call(this,r,t,n):(r.actions.push(this),r._scheduled||(r._scheduled=u.immediateProvider.setImmediate(r.flush.bind(r,void 0))))},r.prototype.recycleAsyncId=function(r,t,n){var o;if(void 0===n&&(n=0),null!=n?n>0:this.delay>0)return e.prototype.recycleAsyncId.call(this,r,t,n);var i=r.actions;null!=t&&(null===(o=i[i.length-1])||void 0===o?void 0:o.id)!==t&&(u.immediateProvider.clearImmediate(t),r._scheduled===t&&(r._scheduled=void 0))},r}(i.AsyncAction);r.AsapAction=a},5523:function(e,r,t){var n,o=this&&this.__extends||(n=function(e,r){return n=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,r){e.__proto__=r}||function(e,r){for(var t in r)Object.prototype.hasOwnProperty.call(r,t)&&(e[t]=r[t])},n(e,r)},function(e,r){if("function"!=typeof r&&null!==r)throw new TypeError("Class extends value "+String(r)+" is not a constructor or null");function t(){this.constructor=e}n(e,r),e.prototype=null===r?Object.create(r):(t.prototype=r.prototype,new t)});Object.defineProperty(r,"__esModule",{value:!0}),r.AsapScheduler=void 0;var i=function(e){function r(){return null!==e&&e.apply(this,arguments)||this}return o(r,e),r.prototype.flush=function(e){this._active=!0;var r=this._scheduled;this._scheduled=void 0;var t,n=this.actions;e=e||n.shift();do{if(t=e.execute(e.state,e.delay))break}while((e=n[0])&&e.id===r&&n.shift());if(this._active=!1,t){for(;(e=n[0])&&e.id===r&&n.shift();)e.unsubscribe();throw t}},r}(t(3643).AsyncScheduler);r.AsapScheduler=i},9702:function(e,r,t){var n,o=this&&this.__extends||(n=function(e,r){return n=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,r){e.__proto__=r}||function(e,r){for(var t in r)Object.prototype.hasOwnProperty.call(r,t)&&(e[t]=r[t])},n(e,r)},function(e,r){if("function"!=typeof r&&null!==r)throw new TypeError("Class extends value "+String(r)+" is not a constructor or null");function t(){this.constructor=e}n(e,r),e.prototype=null===r?Object.create(r):(t.prototype=r.prototype,new t)});Object.defineProperty(r,"__esModule",{value:!0}),r.AsyncAction=void 0;var i=t(1986),u=t(8203),a=t(6967),c=function(e){function r(r,t){var n=e.call(this,r,t)||this;return n.scheduler=r,n.work=t,n.pending=!1,n}return o(r,e),r.prototype.schedule=function(e,r){var t;if(void 0===r&&(r=0),this.closed)return this;this.state=e;var n=this.id,o=this.scheduler;return null!=n&&(this.id=this.recycleAsyncId(o,n,r)),this.pending=!0,this.delay=r,this.id=null!==(t=this.id)&&void 0!==t?t:this.requestAsyncId(o,this.id,r),this},r.prototype.requestAsyncId=function(e,r,t){return void 0===t&&(t=0),u.intervalProvider.setInterval(e.flush.bind(e,this),t)},r.prototype.recycleAsyncId=function(e,r,t){if(void 0===t&&(t=0),null!=t&&this.delay===t&&!1===this.pending)return r;null!=r&&u.intervalProvider.clearInterval(r)},r.prototype.execute=function(e,r){if(this.closed)return new Error("executing a cancelled action");this.pending=!1;var t=this._execute(e,r);if(t)return t;!1===this.pending&&null!=this.id&&(this.id=this.recycleAsyncId(this.scheduler,this.id,null))},r.prototype._execute=function(e,r){var t,n=!1;try{this.work(e)}catch(e){n=!0,t=e||new Error("Scheduled action threw falsy error")}if(n)return this.unsubscribe(),t},r.prototype.unsubscribe=function(){if(!this.closed){var r=this.id,t=this.scheduler,n=t.actions;this.work=this.state=this.scheduler=null,this.pending=!1,a.arrRemove(n,this),null!=r&&(this.id=this.recycleAsyncId(t,r,null)),this.delay=null,e.prototype.unsubscribe.call(this)}},r}(i.Action);r.AsyncAction=c},3643:function(e,r,t){var n,o=this&&this.__extends||(n=function(e,r){return n=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,r){e.__proto__=r}||function(e,r){for(var t in r)Object.prototype.hasOwnProperty.call(r,t)&&(e[t]=r[t])},n(e,r)},function(e,r){if("function"!=typeof r&&null!==r)throw new TypeError("Class extends value "+String(r)+" is not a constructor or null");function t(){this.constructor=e}n(e,r),e.prototype=null===r?Object.create(r):(t.prototype=r.prototype,new t)});Object.defineProperty(r,"__esModule",{value:!0}),r.AsyncScheduler=void 0;var i=t(218),u=function(e){function r(r,t){void 0===t&&(t=i.Scheduler.now);var n=e.call(this,r,t)||this;return n.actions=[],n._active=!1,n}return o(r,e),r.prototype.flush=function(e){var r=this.actions;if(this._active)r.push(e);else{var t;this._active=!0;do{if(t=e.execute(e.state,e.delay))break}while(e=r.shift());if(this._active=!1,t){for(;e=r.shift();)e.unsubscribe();throw t}}},r}(i.Scheduler);r.AsyncScheduler=u},6201:function(e,r,t){var n,o=this&&this.__extends||(n=function(e,r){return n=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,r){e.__proto__=r}||function(e,r){for(var t in r)Object.prototype.hasOwnProperty.call(r,t)&&(e[t]=r[t])},n(e,r)},function(e,r){if("function"!=typeof r&&null!==r)throw new TypeError("Class extends value "+String(r)+" is not a constructor or null");function t(){this.constructor=e}n(e,r),e.prototype=null===r?Object.create(r):(t.prototype=r.prototype,new t)});Object.defineProperty(r,"__esModule",{value:!0}),r.QueueAction=void 0;var i=function(e){function r(r,t){var n=e.call(this,r,t)||this;return n.scheduler=r,n.work=t,n}return o(r,e),r.prototype.schedule=function(r,t){return void 0===t&&(t=0),t>0?e.prototype.schedule.call(this,r,t):(this.delay=t,this.state=r,this.scheduler.flush(this),this)},r.prototype.execute=function(r,t){return t>0||this.closed?e.prototype.execute.call(this,r,t):this._execute(r,t)},r.prototype.requestAsyncId=function(r,t,n){return void 0===n&&(n=0),null!=n&&n>0||null==n&&this.delay>0?e.prototype.requestAsyncId.call(this,r,t,n):(r.flush(this),0)},r}(t(9702).AsyncAction);r.QueueAction=i},5860:function(e,r,t){var n,o=this&&this.__extends||(n=function(e,r){return n=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,r){e.__proto__=r}||function(e,r){for(var t in r)Object.prototype.hasOwnProperty.call(r,t)&&(e[t]=r[t])},n(e,r)},function(e,r){if("function"!=typeof r&&null!==r)throw new TypeError("Class extends value "+String(r)+" is not a constructor or null");function t(){this.constructor=e}n(e,r),e.prototype=null===r?Object.create(r):(t.prototype=r.prototype,new t)});Object.defineProperty(r,"__esModule",{value:!0}),r.QueueScheduler=void 0;var i=function(e){function r(){return null!==e&&e.apply(this,arguments)||this}return o(r,e),r}(t(3643).AsyncScheduler);r.QueueScheduler=i},4123:function(e,r,t){var n,o=this&&this.__extends||(n=function(e,r){return n=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,r){e.__proto__=r}||function(e,r){for(var t in r)Object.prototype.hasOwnProperty.call(r,t)&&(e[t]=r[t])},n(e,r)},function(e,r){if("function"!=typeof r&&null!==r)throw new TypeError("Class extends value "+String(r)+" is not a constructor or null");function t(){this.constructor=e}n(e,r),e.prototype=null===r?Object.create(r):(t.prototype=r.prototype,new t)});Object.defineProperty(r,"__esModule",{value:!0}),r.VirtualAction=r.VirtualTimeScheduler=void 0;var i=t(9702),u=t(3865),a=function(e){function r(r,t){void 0===r&&(r=c),void 0===t&&(t=1/0);var n=e.call(this,r,(function(){return n.frame}))||this;return n.maxFrames=t,n.frame=0,n.index=-1,n}return o(r,e),r.prototype.flush=function(){for(var e,r,t=this.actions,n=this.maxFrames;(r=t[0])&&r.delay<=n&&(t.shift(),this.frame=r.delay,!(e=r.execute(r.state,r.delay))););if(e){for(;r=t.shift();)r.unsubscribe();throw e}},r.frameTimeFactor=10,r}(t(3643).AsyncScheduler);r.VirtualTimeScheduler=a;var c=function(e){function r(r,t,n){void 0===n&&(n=r.index+=1);var o=e.call(this,r,t)||this;return o.scheduler=r,o.work=t,o.index=n,o.active=!0,o.index=r.index=n,o}return o(r,e),r.prototype.schedule=function(t,n){if(void 0===n&&(n=0),Number.isFinite(n)){if(!this.id)return e.prototype.schedule.call(this,t,n);this.active=!1;var o=new r(this.scheduler,this.work);return this.add(o),o.schedule(t,n)}return u.Subscription.EMPTY},r.prototype.requestAsyncId=function(e,t,n){void 0===n&&(n=0),this.delay=e.frame+n;var o=e.actions;return o.push(this),o.sort(r.sortActions),1},r.prototype.recycleAsyncId=function(e,r,t){void 0===t&&(t=0)},r.prototype._execute=function(r,t){if(!0===this.active)return e.prototype._execute.call(this,r,t)},r.sortActions=function(e,r){return e.delay===r.delay?e.index===r.index?0:e.index>r.index?1:-1:e.delay>r.delay?1:-1},r}(i.AsyncAction);r.VirtualAction=c},3660:(e,r,t)=>{Object.defineProperty(r,"__esModule",{value:!0}),r.animationFrame=r.animationFrameScheduler=void 0;var n=t(7574),o=t(2934);r.animationFrameScheduler=new o.AnimationFrameScheduler(n.AnimationFrameAction),r.animationFrame=r.animationFrameScheduler},505:function(e,r,t){var n=this&&this.__read||function(e,r){var t="function"==typeof Symbol&&e[Symbol.iterator];if(!t)return e;var n,o,i=t.call(e),u=[];try{for(;(void 0===r||r-- >0)&&!(n=i.next()).done;)u.push(n.value)}catch(e){o={error:e}}finally{try{n&&!n.done&&(t=i.return)&&t.call(i)}finally{if(o)throw o.error}}return u},o=this&&this.__spreadArray||function(e,r){for(var t=0,n=r.length,o=e.length;t<n;t++,o++)e[o]=r[t];return e};Object.defineProperty(r,"__esModule",{value:!0}),r.animationFrameProvider=void 0;var i=t(3865);r.animationFrameProvider={schedule:function(e){var t=requestAnimationFrame,n=cancelAnimationFrame,o=r.animationFrameProvider.delegate;o&&(t=o.requestAnimationFrame,n=o.cancelAnimationFrame);var u=t((function(r){n=void 0,e(r)}));return new i.Subscription((function(){return null==n?void 0:n(u)}))},requestAnimationFrame:function(){for(var e=[],t=0;t<arguments.length;t++)e[t]=arguments[t];var i=r.animationFrameProvider.delegate;return((null==i?void 0:i.requestAnimationFrame)||requestAnimationFrame).apply(void 0,o([],n(e)))},cancelAnimationFrame:function(){for(var e=[],t=0;t<arguments.length;t++)e[t]=arguments[t];var i=r.animationFrameProvider.delegate;return((null==i?void 0:i.cancelAnimationFrame)||cancelAnimationFrame).apply(void 0,o([],n(e)))},delegate:void 0}},580:(e,r,t)=>{Object.defineProperty(r,"__esModule",{value:!0}),r.asap=r.asapScheduler=void 0;var n=t(2189),o=t(5523);r.asapScheduler=new o.AsapScheduler(n.AsapAction),r.asap=r.asapScheduler},2445:(e,r,t)=>{Object.defineProperty(r,"__esModule",{value:!0}),r.async=r.asyncScheduler=void 0;var n=t(9702),o=t(3643);r.asyncScheduler=new o.AsyncScheduler(n.AsyncAction),r.async=r.asyncScheduler},7950:(e,r)=>{Object.defineProperty(r,"__esModule",{value:!0}),r.dateTimestampProvider=void 0,r.dateTimestampProvider={now:function(){return(r.dateTimestampProvider.delegate||Date).now()},delegate:void 0}},8908:function(e,r,t){var n=this&&this.__read||function(e,r){var t="function"==typeof Symbol&&e[Symbol.iterator];if(!t)return e;var n,o,i=t.call(e),u=[];try{for(;(void 0===r||r-- >0)&&!(n=i.next()).done;)u.push(n.value)}catch(e){o={error:e}}finally{try{n&&!n.done&&(t=i.return)&&t.call(i)}finally{if(o)throw o.error}}return u},o=this&&this.__spreadArray||function(e,r){for(var t=0,n=r.length,o=e.length;t<n;t++,o++)e[o]=r[t];return e};Object.defineProperty(r,"__esModule",{value:!0}),r.immediateProvider=void 0;var i=t(7629),u=i.Immediate.setImmediate,a=i.Immediate.clearImmediate;r.immediateProvider={setImmediate:function(){for(var e=[],t=0;t<arguments.length;t++)e[t]=arguments[t];var i=r.immediateProvider.delegate;return((null==i?void 0:i.setImmediate)||u).apply(void 0,o([],n(e)))},clearImmediate:function(e){var t=r.immediateProvider.delegate;return((null==t?void 0:t.clearImmediate)||a)(e)},delegate:void 0}},8203:function(e,r){var t=this&&this.__read||function(e,r){var t="function"==typeof Symbol&&e[Symbol.iterator];if(!t)return e;var n,o,i=t.call(e),u=[];try{for(;(void 0===r||r-- >0)&&!(n=i.next()).done;)u.push(n.value)}catch(e){o={error:e}}finally{try{n&&!n.done&&(t=i.return)&&t.call(i)}finally{if(o)throw o.error}}return u},n=this&&this.__spreadArray||function(e,r){for(var t=0,n=r.length,o=e.length;t<n;t++,o++)e[o]=r[t];return e};Object.defineProperty(r,"__esModule",{value:!0}),r.intervalProvider=void 0,r.intervalProvider={setInterval:function(e,o){for(var i=[],u=2;u<arguments.length;u++)i[u-2]=arguments[u];var a=r.intervalProvider.delegate;return(null==a?void 0:a.setInterval)?a.setInterval.apply(a,n([e,o],t(i))):setInterval.apply(void 0,n([e,o],t(i)))},clearInterval:function(e){var t=r.intervalProvider.delegate;return((null==t?void 0:t.clearInterval)||clearInterval)(e)},delegate:void 0}},6813:(e,r)=>{Object.defineProperty(r,"__esModule",{value:!0}),r.performanceTimestampProvider=void 0,r.performanceTimestampProvider={now:function(){return(r.performanceTimestampProvider.delegate||performance).now()},delegate:void 0}},8615:(e,r,t)=>{Object.defineProperty(r,"__esModule",{value:!0}),r.queue=r.queueScheduler=void 0;var n=t(6201),o=t(5860);r.queueScheduler=new o.QueueScheduler(n.QueueAction),r.queue=r.queueScheduler},4590:function(e,r){var t=this&&this.__read||function(e,r){var t="function"==typeof Symbol&&e[Symbol.iterator];if(!t)return e;var n,o,i=t.call(e),u=[];try{for(;(void 0===r||r-- >0)&&!(n=i.next()).done;)u.push(n.value)}catch(e){o={error:e}}finally{try{n&&!n.done&&(t=i.return)&&t.call(i)}finally{if(o)throw o.error}}return u},n=this&&this.__spreadArray||function(e,r){for(var t=0,n=r.length,o=e.length;t<n;t++,o++)e[o]=r[t];return e};Object.defineProperty(r,"__esModule",{value:!0}),r.timeoutProvider=void 0,r.timeoutProvider={setTimeout:function(e,o){for(var i=[],u=2;u<arguments.length;u++)i[u-2]=arguments[u];var a=r.timeoutProvider.delegate;return(null==a?void 0:a.setTimeout)?a.setTimeout.apply(a,n([e,o],t(i))):setTimeout.apply(void 0,n([e,o],t(i)))},clearTimeout:function(e){var t=r.timeoutProvider.delegate;return((null==t?void 0:t.clearTimeout)||clearTimeout)(e)},delegate:void 0}},3725:(e,r)=>{function t(){return"function"==typeof Symbol&&Symbol.iterator?Symbol.iterator:"@@iterator"}Object.defineProperty(r,"__esModule",{value:!0}),r.iterator=r.getSymbolIterator=void 0,r.getSymbolIterator=t,r.iterator=t()},2801:(e,r)=>{Object.defineProperty(r,"__esModule",{value:!0}),r.observable=void 0,r.observable="function"==typeof Symbol&&Symbol.observable||"@@observable"},8433:(e,r)=>{Object.defineProperty(r,"__esModule",{value:!0})},2351:(e,r,t)=>{Object.defineProperty(r,"__esModule",{value:!0}),r.ArgumentOutOfRangeError=void 0;var n=t(7029);r.ArgumentOutOfRangeError=n.createErrorClass((function(e){return function(){e(this),this.name="ArgumentOutOfRangeError",this.message="argument out of range"}}))},9474:(e,r,t)=>{Object.defineProperty(r,"__esModule",{value:!0}),r.EmptyError=void 0;var n=t(7029);r.EmptyError=n.createErrorClass((function(e){return function(){e(this),this.name="EmptyError",this.message="no elements in sequence"}}))},7629:(e,r)=>{Object.defineProperty(r,"__esModule",{value:!0}),r.TestTools=r.Immediate=void 0;var t,n=1,o={};function i(e){return e in o&&(delete o[e],!0)}r.Immediate={setImmediate:function(e){var r=n++;return o[r]=!0,t||(t=Promise.resolve()),t.then((function(){return i(r)&&e()})),r},clearImmediate:function(e){i(e)}},r.TestTools={pending:function(){return Object.keys(o).length}}},8598:(e,r,t)=>{Object.defineProperty(r,"__esModule",{value:!0}),r.NotFoundError=void 0;var n=t(7029);r.NotFoundError=n.createErrorClass((function(e){return function(r){e(this),this.name="NotFoundError",this.message=r}}))},2642:(e,r,t)=>{Object.defineProperty(r,"__esModule",{value:!0}),r.ObjectUnsubscribedError=void 0;var n=t(7029);r.ObjectUnsubscribedError=n.createErrorClass((function(e){return function(){e(this),this.name="ObjectUnsubscribedError",this.message="object unsubscribed"}}))},6156:(e,r,t)=>{Object.defineProperty(r,"__esModule",{value:!0}),r.SequenceError=void 0;var n=t(7029);r.SequenceError=n.createErrorClass((function(e){return function(r){e(this),this.name="SequenceError",this.message=r}}))},4805:(e,r,t)=>{Object.defineProperty(r,"__esModule",{value:!0}),r.UnsubscriptionError=void 0;var n=t(7029);r.UnsubscriptionError=n.createErrorClass((function(e){return function(r){e(this),this.message=r?r.length+" errors occurred during unsubscription:\n"+r.map((function(e,r){return r+1+") "+e.toString()})).join("\n  "):"",this.name="UnsubscriptionError",this.errors=r}}))},2433:(e,r,t)=>{Object.defineProperty(r,"__esModule",{value:!0}),r.popNumber=r.popScheduler=r.popResultSelector=void 0;var n=t(3005),o=t(9016);function i(e){return e[e.length-1]}r.popResultSelector=function(e){return n.isFunction(i(e))?e.pop():void 0},r.popScheduler=function(e){return o.isScheduler(i(e))?e.pop():void 0},r.popNumber=function(e,r){return"number"==typeof i(e)?e.pop():r}},1203:(e,r)=>{Object.defineProperty(r,"__esModule",{value:!0}),r.argsArgArrayOrObject=void 0;var t=Array.isArray,n=Object.getPrototypeOf,o=Object.prototype,i=Object.keys;r.argsArgArrayOrObject=function(e){if(1===e.length){var r=e[0];if(t(r))return{args:r,keys:null};if((a=r)&&"object"==typeof a&&n(a)===o){var u=i(r);return{args:u.map((function(e){return r[e]})),keys:u}}}var a;return{args:e,keys:null}}},5498:(e,r)=>{Object.defineProperty(r,"__esModule",{value:!0}),r.argsOrArgArray=void 0;var t=Array.isArray;r.argsOrArgArray=function(e){return 1===e.length&&t(e[0])?e[0]:e}},6967:(e,r)=>{Object.defineProperty(r,"__esModule",{value:!0}),r.arrRemove=void 0,r.arrRemove=function(e,r){if(e){var t=e.indexOf(r);0<=t&&e.splice(t,1)}}},7029:(e,r)=>{Object.defineProperty(r,"__esModule",{value:!0}),r.createErrorClass=void 0,r.createErrorClass=function(e){var r=e((function(e){Error.call(e),e.stack=(new Error).stack}));return r.prototype=Object.create(Error.prototype),r.prototype.constructor=r,r}},641:(e,r)=>{Object.defineProperty(r,"__esModule",{value:!0}),r.createObject=void 0,r.createObject=function(e,r){return e.reduce((function(e,t,n){return e[t]=r[n],e}),{})}},6110:(e,r,t)=>{Object.defineProperty(r,"__esModule",{value:!0}),r.captureError=r.errorContext=void 0;var n=t(3280),o=null;r.errorContext=function(e){if(n.config.useDeprecatedSynchronousErrorHandling){var r=!o;if(r&&(o={errorThrown:!1,error:null}),e(),r){var t=o,i=t.errorThrown,u=t.error;if(o=null,i)throw u}}else e()},r.captureError=function(e){n.config.useDeprecatedSynchronousErrorHandling&&o&&(o.errorThrown=!0,o.error=e)}},7738:(e,r)=>{Object.defineProperty(r,"__esModule",{value:!0}),r.executeSchedule=void 0,r.executeSchedule=function(e,r,t,n,o){void 0===n&&(n=0),void 0===o&&(o=!1);var i=r.schedule((function(){t(),o?e.add(this.schedule(null,n)):this.unsubscribe()}),n);if(e.add(i),!o)return i}},4781:(e,r)=>{Object.defineProperty(r,"__esModule",{value:!0}),r.identity=void 0,r.identity=function(e){return e}},3909:(e,r)=>{Object.defineProperty(r,"__esModule",{value:!0}),r.isArrayLike=void 0,r.isArrayLike=function(e){return e&&"number"==typeof e.length&&"function"!=typeof e}},9595:(e,r,t)=>{Object.defineProperty(r,"__esModule",{value:!0}),r.isAsyncIterable=void 0;var n=t(3005);r.isAsyncIterable=function(e){return Symbol.asyncIterator&&n.isFunction(null==e?void 0:e[Symbol.asyncIterator])}},1677:(e,r)=>{Object.defineProperty(r,"__esModule",{value:!0}),r.isValidDate=void 0,r.isValidDate=function(e){return e instanceof Date&&!isNaN(e)}},3005:(e,r)=>{Object.defineProperty(r,"__esModule",{value:!0}),r.isFunction=void 0,r.isFunction=function(e){return"function"==typeof e}},9500:(e,r,t)=>{Object.defineProperty(r,"__esModule",{value:!0}),r.isInteropObservable=void 0;var n=t(2801),o=t(3005);r.isInteropObservable=function(e){return o.isFunction(e[n.observable])}},2743:(e,r,t)=>{Object.defineProperty(r,"__esModule",{value:!0}),r.isIterable=void 0;var n=t(3725),o=t(3005);r.isIterable=function(e){return o.isFunction(null==e?void 0:e[n.iterator])}},8386:(e,r,t)=>{Object.defineProperty(r,"__esModule",{value:!0}),r.isObservable=void 0;var n=t(2419),o=t(3005);r.isObservable=function(e){return!!e&&(e instanceof n.Observable||o.isFunction(e.lift)&&o.isFunction(e.subscribe))}},6018:(e,r,t)=>{Object.defineProperty(r,"__esModule",{value:!0}),r.isPromise=void 0;var n=t(3005);r.isPromise=function(e){return n.isFunction(null==e?void 0:e.then)}},7823:function(e,r,t){var n=this&&this.__generator||function(e,r){var t,n,o,i,u={label:0,sent:function(){if(1&o[0])throw o[1];return o[1]},trys:[],ops:[]};return i={next:a(0),throw:a(1),return:a(2)},"function"==typeof Symbol&&(i[Symbol.iterator]=function(){return this}),i;function a(i){return function(a){return function(i){if(t)throw new TypeError("Generator is already executing.");for(;u;)try{if(t=1,n&&(o=2&i[0]?n.return:i[0]?n.throw||((o=n.return)&&o.call(n),0):n.next)&&!(o=o.call(n,i[1])).done)return o;switch(n=0,o&&(i=[2&i[0],o.value]),i[0]){case 0:case 1:o=i;break;case 4:return u.label++,{value:i[1],done:!1};case 5:u.label++,n=i[1],i=[0];continue;case 7:i=u.ops.pop(),u.trys.pop();continue;default:if(!((o=(o=u.trys).length>0&&o[o.length-1])||6!==i[0]&&2!==i[0])){u=0;continue}if(3===i[0]&&(!o||i[1]>o[0]&&i[1]<o[3])){u.label=i[1];break}if(6===i[0]&&u.label<o[1]){u.label=o[1],o=i;break}if(o&&u.label<o[2]){u.label=o[2],u.ops.push(i);break}o[2]&&u.ops.pop(),u.trys.pop();continue}i=r.call(e,u)}catch(e){i=[6,e],n=0}finally{t=o=0}if(5&i[0])throw i[1];return{value:i[0]?i[1]:void 0,done:!0}}([i,a])}}},o=this&&this.__await||function(e){return this instanceof o?(this.v=e,this):new o(e)},i=this&&this.__asyncGenerator||function(e,r,t){if(!Symbol.asyncIterator)throw new TypeError("Symbol.asyncIterator is not defined.");var n,i=t.apply(e,r||[]),u=[];return n={},a("next"),a("throw"),a("return"),n[Symbol.asyncIterator]=function(){return this},n;function a(e){i[e]&&(n[e]=function(r){return new Promise((function(t,n){u.push([e,r,t,n])>1||c(e,r)}))})}function c(e,r){try{(t=i[e](r)).value instanceof o?Promise.resolve(t.value.v).then(l,s):f(u[0][2],t)}catch(e){f(u[0][3],e)}var t}function l(e){c("next",e)}function s(e){c("throw",e)}function f(e,r){e(r),u.shift(),u.length&&c(u[0][0],u[0][1])}};Object.defineProperty(r,"__esModule",{value:!0}),r.isReadableStreamLike=r.readableStreamLikeToAsyncGenerator=void 0;var u=t(3005);r.readableStreamLikeToAsyncGenerator=function(e){return i(this,arguments,(function(){var r,t,i;return n(this,(function(n){switch(n.label){case 0:r=e.getReader(),n.label=1;case 1:n.trys.push([1,,9,10]),n.label=2;case 2:return[4,o(r.read())];case 3:return t=n.sent(),i=t.value,t.done?[4,o(void 0)]:[3,5];case 4:return[2,n.sent()];case 5:return[4,o(i)];case 6:return[4,n.sent()];case 7:return n.sent(),[3,2];case 8:return[3,10];case 9:return r.releaseLock(),[7];case 10:return[2]}}))}))},r.isReadableStreamLike=function(e){return u.isFunction(null==e?void 0:e.getReader)}},9016:(e,r,t)=>{Object.defineProperty(r,"__esModule",{value:!0}),r.isScheduler=void 0;var n=t(3005);r.isScheduler=function(e){return e&&n.isFunction(e.schedule)}},4935:(e,r,t)=>{Object.defineProperty(r,"__esModule",{value:!0}),r.operate=r.hasLift=void 0;var n=t(3005);function o(e){return n.isFunction(null==e?void 0:e.lift)}r.hasLift=o,r.operate=function(e){return function(r){if(o(r))return r.lift((function(r){try{return e(r,this)}catch(e){this.error(e)}}));throw new TypeError("Unable to lift unknown Observable type")}}},1914:function(e,r,t){var n=this&&this.__read||function(e,r){var t="function"==typeof Symbol&&e[Symbol.iterator];if(!t)return e;var n,o,i=t.call(e),u=[];try{for(;(void 0===r||r-- >0)&&!(n=i.next()).done;)u.push(n.value)}catch(e){o={error:e}}finally{try{n&&!n.done&&(t=i.return)&&t.call(i)}finally{if(o)throw o.error}}return u},o=this&&this.__spreadArray||function(e,r){for(var t=0,n=r.length,o=e.length;t<n;t++,o++)e[o]=r[t];return e};Object.defineProperty(r,"__esModule",{value:!0}),r.mapOneOrManyArgs=void 0;var i=t(7291),u=Array.isArray;r.mapOneOrManyArgs=function(e){return i.map((function(r){return function(e,r){return u(r)?e.apply(void 0,o([],n(r))):e(r)}(e,r)}))}},2576:(e,r)=>{Object.defineProperty(r,"__esModule",{value:!0}),r.noop=void 0,r.noop=function(){}},8634:(e,r)=>{Object.defineProperty(r,"__esModule",{value:!0}),r.not=void 0,r.not=function(e,r){return function(t,n){return!e.call(r,t,n)}}},9985:(e,r,t)=>{Object.defineProperty(r,"__esModule",{value:!0}),r.pipeFromArray=r.pipe=void 0;var n=t(4781);function o(e){return 0===e.length?n.identity:1===e.length?e[0]:function(r){return e.reduce((function(e,r){return r(e)}),r)}}r.pipe=function(){for(var e=[],r=0;r<arguments.length;r++)e[r]=arguments[r];return o(e)},r.pipeFromArray=o},7968:(e,r,t)=>{Object.defineProperty(r,"__esModule",{value:!0}),r.reportUnhandledError=void 0;var n=t(3280),o=t(4590);r.reportUnhandledError=function(e){o.timeoutProvider.setTimeout((function(){var r=n.config.onUnhandledError;if(!r)throw e;r(e)}))}},9906:(e,r)=>{Object.defineProperty(r,"__esModule",{value:!0}),r.createInvalidObservableTypeError=void 0,r.createInvalidObservableTypeError=function(e){return new TypeError("You provided "+(null!==e&&"object"==typeof e?"an invalid object":"'"+e+"'")+" where a stream was expected. You can provide an Observable, Promise, ReadableStream, Array, AsyncIterable, or Iterable.")}},3445:function(e,r,t){var n,o=this&&this.__extends||(n=function(e,r){return n=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,r){e.__proto__=r}||function(e,r){for(var t in r)Object.prototype.hasOwnProperty.call(r,t)&&(e[t]=r[t])},n(e,r)},function(e,r){if("function"!=typeof r&&null!==r)throw new TypeError("Class extends value "+String(r)+" is not a constructor or null");function t(){this.constructor=e}n(e,r),e.prototype=null===r?Object.create(r):(t.prototype=r.prototype,new t)});Object.defineProperty(r,"__esModule",{value:!0}),r.Background=void 0;var i=t(8913),u=t(4575),a=function(e){function r(r,t,n){var o=e.call(this,r,t)||this;return o._image=n,o}return o(r,e),r.prototype.onCreate=function(){},r.prototype.onResize=function(e,r){var t=r*i.BACKGROUND_ASPECT_RATIO,n=r;this._rect=[{x:(e-t)/2,y:0,width:t,height:n}]},r.prototype.update=function(e,r){},r.prototype.render=function(){var e=this;this._rect.forEach((function(r){r.x<=e.ctx.canvas.width&&(0,u.drawImage)(e.ctx,e._image,r)}))},r}(t(9334).Component);r.Background=a},9334:(e,r)=>{Object.defineProperty(r,"__esModule",{value:!0}),r.Component=void 0;r.Component=function(e,r,t){this.ctx=e,this.gameState=r,this.props=t,this.onCreate(),this.onResize(e.canvas.width,e.canvas.height)}},1490:function(e,r,t){var n,o=this&&this.__extends||(n=function(e,r){return n=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,r){e.__proto__=r}||function(e,r){for(var t in r)Object.prototype.hasOwnProperty.call(r,t)&&(e[t]=r[t])},n(e,r)},function(e,r){if("function"!=typeof r&&null!==r)throw new TypeError("Class extends value "+String(r)+" is not a constructor or null");function t(){this.constructor=e}n(e,r),e.prototype=null===r?Object.create(r):(t.prototype=r.prototype,new t)}),i=this&&this.__assign||function(){return i=Object.assign||function(e){for(var r,t=1,n=arguments.length;t<n;t++)for(var o in r=arguments[t])Object.prototype.hasOwnProperty.call(r,o)&&(e[o]=r[o]);return e},i.apply(this,arguments)};Object.defineProperty(r,"__esModule",{value:!0}),r.EnterUsername=void 0;var u=t(2872),a=t(1600),c=t(7419),l=t(9334),s=t(4575),f=t(8913),d=function(e){function r(){return null!==e&&e.apply(this,arguments)||this}return o(r,e),r.prototype.onCreate=function(){},r.prototype.onResize=function(e,r){},r.prototype.update=function(e,r){var t=this;this.gameState.currentState===a.GamePhase.ENTER_NAME&&r.keys.forEach((function(e){1===e.length?t._username+=e:"Backspace"===e?t.removeLastChar():"Enter"===e&&t.submitUsername()}))},r.prototype.render=function(){this.gameState.currentState===a.GamePhase.ENTER_NAME&&((0,s.drawCenteredText)(this.ctx,"Enter username",f.MEDIUM_TEXT_FONT,this.ctx.canvas.width/2,this.ctx.canvas.height/2-60),(0,s.drawCenteredText)(this.ctx,this._username,f.MEDIUM_TEXT_FONT,this.ctx.canvas.width/2,this.ctx.canvas.height))},r.prototype.removeLastChar=function(){this._username.length>0&&(this._username=this._username.substring(0,this._username.length-1))},r.prototype.submitUsername=function(){var e=this;this._username.length>0&&(this.gameState.player.username=this._username,this.gameState.currentState=a.GamePhase.READY,(0,c.fetchPlayerProfile$)(this.gameState.player.username).pipe((0,u.tap)((function(r){e.gameState.player=i(i({},r),{score:0})})),(0,u.catchError)((function(r){return console.error("Profile not found"),e.gameState.player={id:-1,score:0,linesCleared:0,elementsDroped:0,timePlaying:0,highscore:0,username:e._username},(0,u.of)(e.gameState.player)}))).subscribe((function(e){console.log(e)})))},r}(l.Component);r.EnterUsername=d},8860:function(e,r,t){var n,o=this&&this.__extends||(n=function(e,r){return n=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,r){e.__proto__=r}||function(e,r){for(var t in r)Object.prototype.hasOwnProperty.call(r,t)&&(e[t]=r[t])},n(e,r)},function(e,r){if("function"!=typeof r&&null!==r)throw new TypeError("Class extends value "+String(r)+" is not a constructor or null");function t(){this.constructor=e}n(e,r),e.prototype=null===r?Object.create(r):(t.prototype=r.prototype,new t)});Object.defineProperty(r,"__esModule",{value:!0}),r.Highscores=void 0;var i=t(1600),u=t(7419),a=t(9334),c=t(4575),l=t(8913),s=function(e){function r(){return null!==e&&e.apply(this,arguments)||this}return o(r,e),r.prototype.onCreate=function(){this._shown=!1},r.prototype.onResize=function(e,r){},r.prototype.update=function(e,r){var t=this;this.gameState.currentState===i.GamePhase.READY&&"KeyH"==r[0]&&(this._shown=!this._shown,this._shown&&(0,u.fetchHighScore$)().pipe().subscribe((function(e){t._highscores=e})))},r.prototype.render=function(){var e=this;this._shown&&this._highscores&&((0,c.drawText)(this.ctx,"Highscores:",l.MEDIUM_TEXT_FONT,.6*this.ctx.canvas.width,100),this._highscores.forEach((function(r,t){(0,c.drawText)(e.ctx,"".concat(t+1,". ").concat(r.username.padEnd(5),"- ").concat(r.highscore.toString().padStart(2)),l.MEDIUM_TEXT_FONT,.6*e.ctx.canvas.width,Math.pow(50,t)+150)})))},r}(a.Component);r.Highscores=s},4083:function(e,r,t){var n,o=this&&this.__extends||(n=function(e,r){return n=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,r){e.__proto__=r}||function(e,r){for(var t in r)Object.prototype.hasOwnProperty.call(r,t)&&(e[t]=r[t])},n(e,r)},function(e,r){if("function"!=typeof r&&null!==r)throw new TypeError("Class extends value "+String(r)+" is not a constructor or null");function t(){this.constructor=e}n(e,r),e.prototype=null===r?Object.create(r):(t.prototype=r.prototype,new t)});Object.defineProperty(r,"__esModule",{value:!0}),r.Overlay=void 0;var i=t(8913),u=t(1600),a=t(4575),c=function(e){function r(){return null!==e&&e.apply(this,arguments)||this}return o(r,e),r.prototype.onCreate=function(){},r.prototype.onResize=function(e,r){},r.prototype.update=function(e,r){},r.prototype.render=function(){switch(this.gameState.currentState){case u.GamePhase.READY:this.renderDarkenScreen(),this.renderHighscore(),this.renderControls(),this.renderInfo();break;case u.GamePhase.PLAYING:this.renderCurrentScore();break;case u.GamePhase.GAME_OVER:this.renderDarkenScreen(),this.renderGameOver(),this.renderHighscore(),this.renderControls(),this.renderInfo();break;case u.GamePhase.ENTER_NAME:this.renderDarkenScreen()}},r.prototype.renderControls=function(){(0,a.drawText)(this.ctx,"[H]-Highscores",i.SMALL_TEXT_FONT,10,this.ctx.canvas.height-30)},r.prototype.renderCurrentScore=function(){var e=this.gameState.score.toString();(0,a.drawText)(this.ctx,e,i.LARGE_TEXT_FONT,this.ctx.canvas.width+5,this.ctx.canvas.height+5)},r.prototype.renderEnterToStart=function(){(0,a.drawCenteredText)(this.ctx,"Press Enter To Start",i.MEDIUM_TEXT_FONT,this.ctx.canvas.width/2,this.ctx.canvas.height/2)},r.prototype.renderHighscore=function(){var e="Highscore: ".concat(this.gameState.player.highscore);(0,a.drawCenteredText)(this.ctx,this.gameState.player.username,i.MEDIUM_TEXT_FONT,this.ctx.canvas.width/2,this.ctx.canvas.height/2-100),(0,a.drawCenteredText)(this.ctx,e,i.MEDIUM_TEXT_FONT,this.ctx.canvas.width/2,this.ctx.canvas.height/2-50)},r.prototype.renderInfo=function(){var e="Lines cleared: ".concat(this.gameState.player.linesCleared);(0,a.drawCenteredText)(this.ctx,e,i.SMALL_TEXT_FONT,this.ctx.canvas.width/2,this.ctx.canvas.height-10)},r.prototype.renderGameOver=function(){var e="Score: ".concat(this.gameState.score);(0,a.drawCenteredText)(this.ctx,"GAME OVER",i.LARGE_TEXT_FONT,this.ctx.canvas.width/2,100),(0,a.drawCenteredText)(this.ctx,e,i.MEDIUM_TEXT_FONT,this.ctx.canvas.width/2,150)},r.prototype.renderDarkenScreen=function(){this.ctx.globalAlpha=.3,this.ctx.fillStyle="black",this.ctx.fillRect(0,0,this.ctx.canvas.width,this.ctx.canvas.height),this.ctx.globalAlpha=1},r}(t(9334).Component);r.Overlay=c},8913:(e,r,t)=>{Object.defineProperty(r,"__esModule",{value:!0}),r.GAME_SPEED=r.MAXIMUM_DELTA_TIME=r.INITIAL_GAME_STATE=r.NUM_SHAPES=r.INITIAL_TIME_MS=r.MIN_INTERVAL_MS=r.STARTING_DELTA_TIME=r.FONT_SHADOW_SIZE=r.FONT_SHADOW_COLOR=r.FONT_COLOR=r.LARGE_TEXT_FONT=r.MEDIUM_TEXT_FONT=r.SMALL_TEXT_FONT=r.BOARD_BORDER_SHIFT_Y=r.BOARD_BORDER_SHIFT_X=r.BOARD_BLOCKS_HEIGHt=r.BOARD_BLOCKS_WIDTH=r.BACKGROUND_ASPECT_RATIO=r.API_URL=void 0;var n=t(1600);r.API_URL="http://localhost:3000",r.BACKGROUND_ASPECT_RATIO=3.125,r.BOARD_BLOCKS_WIDTH=10,r.BOARD_BLOCKS_HEIGHt=20,r.BOARD_BORDER_SHIFT_X=1/12,r.BOARD_BORDER_SHIFT_Y=1/22,r.SMALL_TEXT_FONT='1rem "Press Start 2P"',r.MEDIUM_TEXT_FONT='2rem "Press Start 2P"',r.LARGE_TEXT_FONT='3rem "Press Start 2P"',r.FONT_COLOR="white",r.FONT_SHADOW_COLOR="gray",r.FONT_SHADOW_SIZE=3,r.STARTING_DELTA_TIME=.8,r.MIN_INTERVAL_MS=50,r.INITIAL_TIME_MS=800,r.NUM_SHAPES=7,r.INITIAL_GAME_STATE={currentState:n.GamePhase.ENTER_NAME,score:0,player:{id:0,username:"",score:0,linesCleared:0,elementsDroped:0,timePlaying:0,highscore:0}},r.MAXIMUM_DELTA_TIME=1/30,r.GAME_SPEED=1},1600:(e,r)=>{var t;Object.defineProperty(r,"__esModule",{value:!0}),r.GamePhase=void 0,function(e){e[e.ENTER_NAME=0]="ENTER_NAME",e[e.READY=1]="READY",e[e.PLAYING=2]="PLAYING",e[e.GAME_OVER=3]="GAME_OVER"}(t||(r.GamePhase=t={}))},7769:function(e,r,t){var n=this&&this.__assign||function(){return n=Object.assign||function(e){for(var r,t=1,n=arguments.length;t<n;t++)for(var o in r=arguments[t])Object.prototype.hasOwnProperty.call(r,o)&&(e[o]=r[o]);return e},n.apply(this,arguments)};Object.defineProperty(r,"__esModule",{value:!0}),r.Game=void 0;var o=t(2872),i=t(1600),u=t(4555),a=t(1490),c=t(8860),l=t(4083),s=t(3445),f=t(8913),d=t(338),p=t(7419),v=function(){function e(e){if(!e.getContext)throw new Error("Canvas is not supported in this browser");this.canvas=e,this.ctx=e.getContext("2d"),this.ctx.imageSmoothingEnabled=!1,this.gameState=f.INITIAL_GAME_STATE,this.background=null,this.shapes=[],this.enterUsername=new a.EnterUsername(this.ctx,this.gameState),this.highscores=new c.Highscores(this.ctx,this.gameState),this.overlay=new l.Overlay(this.ctx,this.gameState),this.mainLoop$=(0,d.initializeMainLoop)()}return e.prototype.init=function(){var e=this;(0,o.fromEvent)(window,"resize").pipe((0,o.debounceTime)(100)).subscribe((function(){e.resize(window.innerWidth,window.innerHeight)})),this.mainLoop$.subscribe((function(e){e[0];e[1],f.GAME_SPEED})),(0,u.loadBackgroundImage$)().subscribe((function(r){e.background=new s.Background(e.ctx,e.gameState,r)}))},e.prototype.startRound=function(){},e.prototype.updateLogic=function(e,r){switch(this.gameState.currentState){case i.GamePhase.PLAYING:case i.GamePhase.READY:break;case i.GamePhase.GAME_OVER:r.Space&&this.startRound()}},e.prototype.resize=function(e,r){this.canvas.width=e,this.canvas.height=r,this.ctx.imageSmoothingEnabled=!1,this.background.onResize(e,r),this.shapes.forEach((function(t){return t.onResize(e,r)})),this.enterUsername.onResize(e,r),this.highscores.onResize(e,r),this.overlay.onResize(e,r)},e.prototype.render=function(){var e=this.ctx.canvas.width,r=this.ctx.canvas.height;this.ctx.clearRect(0,0,e,r),this.background.render(),this.shapes.forEach((function(e){return e.render()})),this.overlay.render(),this.highscores.render(),this.enterUsername.render()},e.prototype.update=function(e,r){this.background.update(e,r),this.shapes.forEach((function(t){return t.update(e,r)})),this.overlay.update(e,r),this.enterUsername.update(e,r),this.highscores.update(e,r),this.updateLogic(e,r)},e.prototype.die=function(){var e=this;this.shapes=[],this.gameState.currentState=i.GamePhase.GAME_OVER,this.gameState.score>this.gameState.player.highscore&&(this.gameState.player.highscore=this.gameState.score,(0,p.putPlayerProfile)(this.gameState.player).then((function(r){e.gameState.player=n(n({},r),{score:0})})))},e}();r.Game=v},7419:function(e,r,t){var n=this&&this.__awaiter||function(e,r,t,n){return new(t||(t=Promise))((function(o,i){function u(e){try{c(n.next(e))}catch(e){i(e)}}function a(e){try{c(n.throw(e))}catch(e){i(e)}}function c(e){var r;e.done?o(e.value):(r=e.value,r instanceof t?r:new t((function(e){e(r)}))).then(u,a)}c((n=n.apply(e,r||[])).next())}))},o=this&&this.__generator||function(e,r){var t,n,o,i,u={label:0,sent:function(){if(1&o[0])throw o[1];return o[1]},trys:[],ops:[]};return i={next:a(0),throw:a(1),return:a(2)},"function"==typeof Symbol&&(i[Symbol.iterator]=function(){return this}),i;function a(a){return function(c){return function(a){if(t)throw new TypeError("Generator is already executing.");for(;i&&(i=0,a[0]&&(u=0)),u;)try{if(t=1,n&&(o=2&a[0]?n.return:a[0]?n.throw||((o=n.return)&&o.call(n),0):n.next)&&!(o=o.call(n,a[1])).done)return o;switch(n=0,o&&(a=[2&a[0],o.value]),a[0]){case 0:case 1:o=a;break;case 4:return u.label++,{value:a[1],done:!1};case 5:u.label++,n=a[1],a=[0];continue;case 7:a=u.ops.pop(),u.trys.pop();continue;default:if(!((o=(o=u.trys).length>0&&o[o.length-1])||6!==a[0]&&2!==a[0])){u=0;continue}if(3===a[0]&&(!o||a[1]>o[0]&&a[1]<o[3])){u.label=a[1];break}if(6===a[0]&&u.label<o[1]){u.label=o[1],o=a;break}if(o&&u.label<o[2]){u.label=o[2],u.ops.push(a);break}o[2]&&u.ops.pop(),u.trys.pop();continue}a=r.call(e,u)}catch(e){a=[6,e],n=0}finally{t=o=0}if(5&a[0])throw a[1];return{value:a[0]?a[1]:void 0,done:!0}}([a,c])}}};Object.defineProperty(r,"__esModule",{value:!0}),r.putPlayerProfile=r.fetchSprite$=r.fetchHighScore$=r.fetchPlayerProfile$=r.fetchFromApi$=void 0;var i=t(2872),u=t(8913),a=function(e,r){return(0,i.from)(fetch("".concat(u.API_URL,"/").concat(e)).then((function(e){if(e.ok)return e.json();throw new Error("Failed to fetch")})).catch((function(e){return console.error(e)})))};r.fetchFromApi$=a,r.fetchPlayerProfile$=function(e){return a("users?username=".concat(e))},r.fetchHighScore$=function(){return a("users?_sort=highscore&_order=desc&_limit=10")},r.fetchSprite$=function(){return a("sprites")},r.putPlayerProfile=function(e){var r,t,i,a;return 0!==e.id&&(r="PUT",t="/users"),i=t,a={method:r,body:JSON.stringify(e),headers:{"Content-Type":"application/json"}},n(void 0,void 0,void 0,(function(){var e;return o(this,(function(r){switch(r.label){case 0:return[4,fetch(u.API_URL+i,a)];case 1:if(!(e=r.sent()).ok)throw new Error("An error occured while fetching: "+e.status);return[2,e.json()]}}))}))}},4555:(e,r,t)=>{Object.defineProperty(r,"__esModule",{value:!0}),r.loadShapeSprites$=r.loadBackgroundImage$=void 0;var n=t(2872),o=t(7419);r.loadBackgroundImage$=function(){return(0,n.from)((0,o.fetchSprite$)()).pipe((0,n.mergeMap)((function(e){var r=e.path+e.board,t=new Image;return t.src=r,(0,n.fromEvent)(t,"load").pipe((0,n.map)((function(e){return e.target})))})))},r.loadShapeSprites$=function(){return(0,n.from)((0,o.fetchSprite$)()).pipe((0,n.mergeMap)((function(e){var r=e.shapes.map((function(r){return e.path+r.image})),t=[];return r.forEach((function(e,r){var n=new Image;n.src=e,t.push(n)})),(0,n.fromEvent)(t,"load").pipe((0,n.map)((function(r,t){return{type:e.shapes[t].image.replace(".png",""),img:r.target}})))})))}},338:(e,r,t)=>{Object.defineProperty(r,"__esModule",{value:!0}),r.initializeMainLoop=void 0;var n=t(2872),o=t(8913);r.initializeMainLoop=function(){var e=i(),r=u(e);return e.pipe((0,n.withLatestFrom)(r))};var i=function(){return(0,n.of)(void 0).pipe((0,n.expand)((function(e){return r=e,new n.Observable((function(e){window.requestAnimationFrame((function(t){var n=(r?t-r.timeStamp:0)/1e3;e.next({timeStamp:t,deltaTime:n})}))}));var r})),(0,n.filter)((function(e){return void 0!==e})),(0,n.map)((function(e){return Math.min(e.deltaTime,o.MAXIMUM_DELTA_TIME)})))},u=function(e){return(0,n.fromEvent)(document,"keydown").pipe((0,n.map)((function(e){return{code:e.code,key:e.key}}))).pipe((0,n.buffer)(e),(0,n.map)((function(e){return e.reduce((function(e,r){return e.keys.push(r.key),e[r.code]=!0,e}),{keys:[]})})))}},4575:(e,r,t)=>{Object.defineProperty(r,"__esModule",{value:!0}),r.drawCenteredText=r.drawText=r.drawImageRegion=r.drawImage=r.fillRect=void 0;var n=t(8913);r.fillRect=function(e,r){e.fillRect(r.x,r.y,r.width,r.height)},r.drawImage=function(e,r,t){e.drawImage(r,t.x,t.y,t.width,t.height)},r.drawImageRegion=function(e,r,t,n){e.drawImage(r,n.x,n.y,n.width,n.height,t.x,t.y,t.width,t.height)};var o=function(e,r){e.font=r,e.fillStyle=n.FONT_COLOR,e.shadowColor=n.FONT_SHADOW_COLOR,e.shadowOffsetX=n.FONT_SHADOW_SIZE,e.shadowOffsetY=n.FONT_SHADOW_SIZE},i=function(e){e.shadowColor=void 0,e.shadowOffsetX=0,e.shadowOffsetY=0};r.drawText=function(e,r,t,n,u){o(e,t),e.fillText(r,n,u),i(e)},r.drawCenteredText=function(e,r,t,n,u){o(e,t),e.fillText(r,n-e.measureText(r).width/2,u),i(e)}}},r={};function t(n){var o=r[n];if(void 0!==o)return o.exports;var i=r[n]={exports:{}};return e[n].call(i.exports,i,i.exports,t),i.exports}(()=>{var e=t(2872),r=t(7769),n=t(4555);(0,e.fromEvent)(window,"load").subscribe((function(){var e=document.createElement("canvas");e.id="game-container",e.width=window.innerWidth,e.height=window.innerHeight,document.body.appendChild(e),new r.Game(e).init()}));var o=[];(0,n.loadShapeSprites$)().pipe().subscribe((function(e){console.log(e),o.push(e)})),console.log(o)})()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,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QVV5SixPQUFRLFFBQVFxUCxXQUFVLFdBQ2hDLElBQU1rckIsRUFBUytILFNBQVN1QixjQUFjLFVBQ3RDdEosRUFBTzNmLEdBQUssaUJBQ1oyZixFQUFPUCxNQUFRaDZCLE9BQU9xL0IsV0FDdEI5RSxFQUFPTixPQUFTajZCLE9BQU9zL0IsWUFDdkJnRCxTQUFTbGxCLEtBQUswbUIsWUFBWXZKLEdBRWIsSUFBSSxFQUFBMkYsS0FBSzNGLEdBQ2pCN1gsTUFHVCxJQXNDQSxJQUFJdWUsRUFBYyxJQUVsQixJQUFBTSxxQkFDQTFwQyxPQUdDd1gsV0FDRyxTQUFDdUIsR0FDRytxQixRQUFRSyxJQUFJcHJCLEdBQ1pxd0IsRUFBUTF2QixLQUFLWCxFQUNqQixJQUdKK3FCLFFBQVFLLElBQUlpRixFIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vdGV0cmlzLy4vbm9kZV9tb2R1bGVzL3J4anMvZGlzdC9janMvaW5kZXguanMiLCJ3ZWJwYWNrOi8vdGV0cmlzLy4vbm9kZV9tb2R1bGVzL3J4anMvZGlzdC9janMvaW50ZXJuYWwvQXN5bmNTdWJqZWN0LmpzIiwid2VicGFjazovL3RldHJpcy8uL25vZGVfbW9kdWxlcy9yeGpzL2Rpc3QvY2pzL2ludGVybmFsL0JlaGF2aW9yU3ViamVjdC5qcyIsIndlYnBhY2s6Ly90ZXRyaXMvLi9ub2RlX21vZHVsZXMvcnhqcy9kaXN0L2Nqcy9pbnRlcm5hbC9Ob3RpZmljYXRpb24uanMiLCJ3ZWJwYWNrOi8vdGV0cmlzLy4vbm9kZV9tb2R1bGVzL3J4anMvZGlzdC9janMvaW50ZXJuYWwvTm90aWZpY2F0aW9uRmFjdG9yaWVzLmpzIiwid2VicGFjazovL3RldHJpcy8uL25vZGVfbW9kdWxlcy9yeGpzL2Rpc3QvY2pzL2ludGVybmFsL09ic2VydmFibGUuanMiLCJ3ZWJwYWNrOi8vdGV0cmlzLy4vbm9kZV9tb2R1bGVzL3J4anMvZGlzdC9janMvaW50ZXJuYWwvUmVwbGF5U3ViamVjdC5qcyIsIndlYnBhY2s6Ly90ZXRyaXMvLi9ub2RlX21vZHVsZXMvcnhqcy9kaXN0L2Nqcy9pbnRlcm5hbC9TY2hlZHVsZXIuanMiLCJ3ZWJwYWNrOi8vdGV0cmlzLy4vbm9kZV9tb2R1bGVzL3J4anMvZGlzdC9janMvaW50ZXJuYWwvU3ViamVjdC5qcyIsIndlYnBhY2s6Ly90ZXRyaXMvLi9ub2RlX21vZHVsZXMvcnhqcy9kaXN0L2Nqcy9pbnRlcm5hbC9TdWJzY3JpYmVyLmpzIiwid2VicGFjazovL3RldHJpcy8uL25vZGVfbW9kdWxlcy9yeGpzL2Rpc3QvY2pzL2ludGVybmFsL1N1YnNjcmlwdGlvbi5qcyIsIndlYnBhY2s6Ly90ZXRyaXMvLi9ub2RlX21vZHVsZXMvcnhqcy9kaXN0L2Nqcy9pbnRlcm5hbC9jb25maWcuanMiLCJ3ZWJwYWNrOi8vdGV0cmlzLy4vbm9kZV9tb2R1bGVzL3J4anMvZGlzdC9janMvaW50ZXJuYWwvZmlyc3RWYWx1ZUZyb20uanMiLCJ3ZWJwYWNrOi8vdGV0cmlzLy4vbm9kZV9tb2R1bGVzL3J4anMvZGlzdC9janMvaW50ZXJuYWwvbGFzdFZhbHVlRnJvbS5qcyIsIndlYnBhY2s6Ly90ZXRyaXMvLi9ub2RlX21vZHVsZXMvcnhqcy9kaXN0L2Nqcy9pbnRlcm5hbC9vYnNlcnZhYmxlL0Nvbm5lY3RhYmxlT2JzZXJ2YWJsZS5qcyIsIndlYnBhY2s6Ly90ZXRyaXMvLi9ub2RlX21vZHVsZXMvcnhqcy9kaXN0L2Nqcy9pbnRlcm5hbC9vYnNlcnZhYmxlL2JpbmRDYWxsYmFjay5qcyIsIndlYnBhY2s6Ly90ZXRyaXMvLi9ub2RlX21vZHVsZXMvcnhqcy9kaXN0L2Nqcy9pbnRlcm5hbC9vYnNlcnZhYmxlL2JpbmRDYWxsYmFja0ludGVybmFscy5qcyIsIndlYnBhY2s6Ly90ZXRyaXMvLi9ub2RlX21vZHVsZXMvcnhqcy9kaXN0L2Nqcy9pbnRlcm5hbC9vYnNlcnZhYmxlL2JpbmROb2RlQ2FsbGJhY2suanMiLCJ3ZWJwYWNrOi8vdGV0cmlzLy4vbm9kZV9tb2R1bGVzL3J4anMvZGlzdC9janMvaW50ZXJuYWwvb2JzZXJ2YWJsZS9jb21iaW5lTGF0ZXN0LmpzIiwid2VicGFjazovL3RldHJpcy8uL25vZGVfbW9kdWxlcy9yeGpzL2Rpc3QvY2pzL2ludGVybmFsL29ic2VydmFibGUvY29uY2F0LmpzIiwid2VicGFjazovL3RldHJpcy8uL25vZGVfbW9kdWxlcy9yeGpzL2Rpc3QvY2pzL2ludGVybmFsL29ic2VydmFibGUvY29ubmVjdGFibGUuanMiLCJ3ZWJwYWNrOi8vdGV0cmlzLy4vbm9kZV9tb2R1bGVzL3J4anMvZGlzdC9janMvaW50ZXJuYWwvb2JzZXJ2YWJsZS9kZWZlci5qcyIsIndlYnBhY2s6Ly90ZXRyaXMvLi9ub2RlX21vZHVsZXMvcnhqcy9kaXN0L2Nqcy9pbnRlcm5hbC9vYnNlcnZhYmxlL2RvbS9hbmltYXRpb25GcmFtZXMuanMiLCJ3ZWJwYWNrOi8vdGV0cmlzLy4vbm9kZV9tb2R1bGVzL3J4anMvZGlzdC9janMvaW50ZXJuYWwvb2JzZXJ2YWJsZS9lbXB0eS5qcyIsIndlYnBhY2s6Ly90ZXRyaXMvLi9ub2RlX21vZHVsZXMvcnhqcy9kaXN0L2Nqcy9pbnRlcm5hbC9vYnNlcnZhYmxlL2ZvcmtKb2luLmpzIiwid2VicGFjazovL3RldHJpcy8uL25vZGVfbW9kdWxlcy9yeGpzL2Rpc3QvY2pzL2ludGVybmFsL29ic2VydmFibGUvZnJvbS5qcyIsIndlYnBhY2s6Ly90ZXRyaXMvLi9ub2RlX21vZHVsZXMvcnhqcy9kaXN0L2Nqcy9pbnRlcm5hbC9vYnNlcnZhYmxlL2Zyb21FdmVudC5qcyIsIndlYnBhY2s6Ly90ZXRyaXMvLi9ub2RlX21vZHVsZXMvcnhqcy9kaXN0L2Nqcy9pbnRlcm5hbC9vYnNlcnZhYmxlL2Zyb21FdmVudFBhdHRlcm4uanMiLCJ3ZWJwYWNrOi8vdGV0cmlzLy4vbm9kZV9tb2R1bGVzL3J4anMvZGlzdC9janMvaW50ZXJuYWwvb2JzZXJ2YWJsZS9mcm9tU3Vic2NyaWJhYmxlLmpzIiwid2VicGFjazovL3RldHJpcy8uL25vZGVfbW9kdWxlcy9yeGpzL2Rpc3QvY2pzL2ludGVybmFsL29ic2VydmFibGUvZ2VuZXJhdGUuanMiLCJ3ZWJwYWNrOi8vdGV0cmlzLy4vbm9kZV9tb2R1bGVzL3J4anMvZGlzdC9janMvaW50ZXJuYWwvb2JzZXJ2YWJsZS9paWYuanMiLCJ3ZWJwYWNrOi8vdGV0cmlzLy4vbm9kZV9tb2R1bGVzL3J4anMvZGlzdC9janMvaW50ZXJuYWwvb2JzZXJ2YWJsZS9pbm5lckZyb20uanMiLCJ3ZWJwYWNrOi8vdGV0cmlzLy4vbm9kZV9tb2R1bGVzL3J4anMvZGlzdC9janMvaW50ZXJuYWwvb2JzZXJ2YWJsZS9pbnRlcnZhbC5qcyIsIndlYnBhY2s6Ly90ZXRyaXMvLi9ub2RlX21vZHVsZXMvcnhqcy9kaXN0L2Nqcy9pbnRlcm5hbC9vYnNlcnZhYmxlL21lcmdlLmpzIiwid2VicGFjazovL3RldHJpcy8uL25vZGVfbW9kdWxlcy9yeGpzL2Rpc3QvY2pzL2ludGVybmFsL29ic2VydmFibGUvbmV2ZXIuanMiLCJ3ZWJwYWNrOi8vdGV0cmlzLy4vbm9kZV9tb2R1bGVzL3J4anMvZGlzdC9janMvaW50ZXJuYWwvb2JzZXJ2YWJsZS9vZi5qcyIsIndlYnBhY2s6Ly90ZXRyaXMvLi9ub2RlX21vZHVsZXMvcnhqcy9kaXN0L2Nqcy9pbnRlcm5hbC9vYnNlcnZhYmxlL29uRXJyb3JSZXN1bWVOZXh0LmpzIiwid2VicGFjazovL3RldHJpcy8uL25vZGVfbW9kdWxlcy9yeGpzL2Rpc3QvY2pzL2ludGVybmFsL29ic2VydmFibGUvcGFpcnMuanMiLCJ3ZWJwYWNrOi8vdGV0cmlzLy4vbm9kZV9tb2R1bGVzL3J4anMvZGlzdC9janMvaW50ZXJuYWwvb2JzZXJ2YWJsZS9wYXJ0aXRpb24uanMiLCJ3ZWJwYWNrOi8vdGV0cmlzLy4vbm9kZV9tb2R1bGVzL3J4anMvZGlzdC9janMvaW50ZXJuYWwvb2JzZXJ2YWJsZS9yYWNlLmpzIiwid2VicGFjazovL3RldHJpcy8uL25vZGVfbW9kdWxlcy9yeGpzL2Rpc3QvY2pzL2ludGVybmFsL29ic2VydmFibGUvcmFuZ2UuanMiLCJ3ZWJwYWNrOi8vdGV0cmlzLy4vbm9kZV9tb2R1bGVzL3J4anMvZGlzdC9janMvaW50ZXJuYWwvb2JzZXJ2YWJsZS90aHJvd0Vycm9yLmpzIiwid2VicGFjazovL3RldHJpcy8uL25vZGVfbW9kdWxlcy9yeGpzL2Rpc3QvY2pzL2ludGVybmFsL29ic2VydmFibGUvdGltZXIuanMiLCJ3ZWJwYWNrOi8vdGV0cmlzLy4vbm9kZV9tb2R1bGVzL3J4anMvZGlzdC9janMvaW50ZXJuYWwvb2JzZXJ2YWJsZS91c2luZy5qcyIsIndlYnBhY2s6Ly90ZXRyaXMvLi9ub2RlX21vZHVsZXMvcnhqcy9kaXN0L2Nqcy9pbnRlcm5hbC9vYnNlcnZhYmxlL3ppcC5qcyIsIndlYnBhY2s6Ly90ZXRyaXMvLi9ub2RlX21vZHVsZXMvcnhqcy9kaXN0L2Nqcy9pbnRlcm5hbC9vcGVyYXRvcnMvT3BlcmF0b3JTdWJzY3JpYmVyLmpzIiwid2VicGFjazovL3RldHJpcy8uL25vZGVfbW9kdWxlcy9yeGpzL2Rpc3QvY2pzL2ludGVybmFsL29wZXJhdG9ycy9hdWRpdC5qcyIsIndlYnBhY2s6Ly90ZXRyaXMvLi9ub2RlX21vZHVsZXMvcnhqcy9kaXN0L2Nqcy9pbnRlcm5hbC9vcGVyYXRvcnMvYXVkaXRUaW1lLmpzIiwid2VicGFjazovL3RldHJpcy8uL25vZGVfbW9kdWxlcy9yeGpzL2Rpc3QvY2pzL2ludGVybmFsL29wZXJhdG9ycy9idWZmZXIuanMiLCJ3ZWJwYWNrOi8vdGV0cmlzLy4vbm9kZV9tb2R1bGVzL3J4anMvZGlzdC9janMvaW50ZXJuYWwvb3BlcmF0b3JzL2J1ZmZlckNvdW50LmpzIiwid2VicGFjazovL3RldHJpcy8uL25vZGVfbW9kdWxlcy9yeGpzL2Rpc3QvY2pzL2ludGVybmFsL29wZXJhdG9ycy9idWZmZXJUaW1lLmpzIiwid2VicGFjazovL3RldHJpcy8uL25vZGVfbW9kdWxlcy9yeGpzL2Rpc3QvY2pzL2ludGVybmFsL29wZXJhdG9ycy9idWZmZXJUb2dnbGUuanMiLCJ3ZWJwYWNrOi8vdGV0cmlzLy4vbm9kZV9tb2R1bGVzL3J4anMvZGlzdC9janMvaW50ZXJuYWwvb3BlcmF0b3JzL2J1ZmZlcldoZW4uanMiLCJ3ZWJwYWNrOi8vdGV0cmlzLy4vbm9kZV9tb2R1bGVzL3J4anMvZGlzdC9janMvaW50ZXJuYWwvb3BlcmF0b3JzL2NhdGNoRXJyb3IuanMiLCJ3ZWJwYWNrOi8vdGV0cmlzLy4vbm9kZV9tb2R1bGVzL3J4anMvZGlzdC9janMvaW50ZXJuYWwvb3BlcmF0b3JzL2NvbWJpbmVBbGwuanMiLCJ3ZWJwYWNrOi8vdGV0cmlzLy4vbm9kZV9tb2R1bGVzL3J4anMvZGlzdC9janMvaW50ZXJuYWwvb3BlcmF0b3JzL2NvbWJpbmVMYXRlc3QuanMiLCJ3ZWJwYWNrOi8vdGV0cmlzLy4vbm9kZV9tb2R1bGVzL3J4anMvZGlzdC9janMvaW50ZXJuYWwvb3BlcmF0b3JzL2NvbWJpbmVMYXRlc3RBbGwuanMiLCJ3ZWJwYWNrOi8vdGV0cmlzLy4vbm9kZV9tb2R1bGVzL3J4anMvZGlzdC9janMvaW50ZXJuYWwvb3BlcmF0b3JzL2NvbWJpbmVMYXRlc3RXaXRoLmpzIiwid2VicGFjazovL3RldHJpcy8uL25vZGVfbW9kdWxlcy9yeGpzL2Rpc3QvY2pzL2ludGVybmFsL29wZXJhdG9ycy9jb25jYXQuanMiLCJ3ZWJwYWNrOi8vdGV0cmlzLy4vbm9kZV9tb2R1bGVzL3J4anMvZGlzdC9janMvaW50ZXJuYWwvb3BlcmF0b3JzL2NvbmNhdEFsbC5qcyIsIndlYnBhY2s6Ly90ZXRyaXMvLi9ub2RlX21vZHVsZXMvcnhqcy9kaXN0L2Nqcy9pbnRlcm5hbC9vcGVyYXRvcnMvY29uY2F0TWFwLmpzIiwid2VicGFjazovL3RldHJpcy8uL25vZGVfbW9kdWxlcy9yeGpzL2Rpc3QvY2pzL2ludGVybmFsL29wZXJhdG9ycy9jb25jYXRNYXBUby5qcyIsIndlYnBhY2s6Ly90ZXRyaXMvLi9ub2RlX21vZHVsZXMvcnhqcy9kaXN0L2Nqcy9pbnRlcm5hbC9vcGVyYXRvcnMvY29uY2F0V2l0aC5qcyIsIndlYnBhY2s6Ly90ZXRyaXMvLi9ub2RlX21vZHVsZXMvcnhqcy9kaXN0L2Nqcy9pbnRlcm5hbC9vcGVyYXRvcnMvY29ubmVjdC5qcyIsIndlYnBhY2s6Ly90ZXRyaXMvLi9ub2RlX21vZHVsZXMvcnhqcy9kaXN0L2Nqcy9pbnRlcm5hbC9vcGVyYXRvcnMvY291bnQuanMiLCJ3ZWJwYWNrOi8vdGV0cmlzLy4vbm9kZV9tb2R1bGVzL3J4anMvZGlzdC9janMvaW50ZXJuYWwvb3BlcmF0b3JzL2RlYm91bmNlLmpzIiwid2VicGFjazovL3RldHJpcy8uL25vZGVfbW9kdWxlcy9yeGpzL2Rpc3QvY2pzL2ludGVybmFsL29wZXJhdG9ycy9kZWJvdW5jZVRpbWUuanMiLCJ3ZWJwYWNrOi8vdGV0cmlzLy4vbm9kZV9tb2R1bGVzL3J4anMvZGlzdC9janMvaW50ZXJuYWwvb3BlcmF0b3JzL2RlZmF1bHRJZkVtcHR5LmpzIiwid2VicGFjazovL3RldHJpcy8uL25vZGVfbW9kdWxlcy9yeGpzL2Rpc3QvY2pzL2ludGVybmFsL29wZXJhdG9ycy9kZWxheS5qcyIsIndlYnBhY2s6Ly90ZXRyaXMvLi9ub2RlX21vZHVsZXMvcnhqcy9kaXN0L2Nqcy9pbnRlcm5hbC9vcGVyYXRvcnMvZGVsYXlXaGVuLmpzIiwid2VicGFjazovL3RldHJpcy8uL25vZGVfbW9kdWxlcy9yeGpzL2Rpc3QvY2pzL2ludGVybmFsL29wZXJhdG9ycy9kZW1hdGVyaWFsaXplLmpzIiwid2VicGFjazovL3RldHJpcy8uL25vZGVfbW9kdWxlcy9yeGpzL2Rpc3QvY2pzL2ludGVybmFsL29wZXJhdG9ycy9kaXN0aW5jdC5qcyIsIndlYnBhY2s6Ly90ZXRyaXMvLi9ub2RlX21vZHVsZXMvcnhqcy9kaXN0L2Nqcy9pbnRlcm5hbC9vcGVyYXRvcnMvZGlzdGluY3RVbnRpbENoYW5nZWQuanMiLCJ3ZWJwYWNrOi8vdGV0cmlzLy4vbm9kZV9tb2R1bGVzL3J4anMvZGlzdC9janMvaW50ZXJuYWwvb3BlcmF0b3JzL2Rpc3RpbmN0VW50aWxLZXlDaGFuZ2VkLmpzIiwid2VicGFjazovL3RldHJpcy8uL25vZGVfbW9kdWxlcy9yeGpzL2Rpc3QvY2pzL2ludGVybmFsL29wZXJhdG9ycy9lbGVtZW50QXQuanMiLCJ3ZWJwYWNrOi8vdGV0cmlzLy4vbm9kZV9tb2R1bGVzL3J4anMvZGlzdC9janMvaW50ZXJuYWwvb3BlcmF0b3JzL2VuZFdpdGguanMiLCJ3ZWJwYWNrOi8vdGV0cmlzLy4vbm9kZV9tb2R1bGVzL3J4anMvZGlzdC9janMvaW50ZXJuYWwvb3BlcmF0b3JzL2V2ZXJ5LmpzIiwid2VicGFjazovL3RldHJpcy8uL25vZGVfbW9kdWxlcy9yeGpzL2Rpc3QvY2pzL2ludGVybmFsL29wZXJhdG9ycy9leGhhdXN0LmpzIiwid2VicGFjazovL3RldHJpcy8uL25vZGVfbW9kdWxlcy9yeGpzL2Rpc3QvY2pzL2ludGVybmFsL29wZXJhdG9ycy9leGhhdXN0QWxsLmpzIiwid2VicGFjazovL3RldHJpcy8uL25vZGVfbW9kdWxlcy9yeGpzL2Rpc3QvY2pzL2ludGVybmFsL29wZXJhdG9ycy9leGhhdXN0TWFwLmpzIiwid2VicGFjazovL3RldHJpcy8uL25vZGVfbW9kdWxlcy9yeGpzL2Rpc3QvY2pzL2ludGVybmFsL29wZXJhdG9ycy9leHBhbmQuanMiLCJ3ZWJwYWNrOi8vdGV0cmlzLy4vbm9kZV9tb2R1bGVzL3J4anMvZGlzdC9janMvaW50ZXJuYWwvb3BlcmF0b3JzL2ZpbHRlci5qcyIsIndlYnBhY2s6Ly90ZXRyaXMvLi9ub2RlX21vZHVsZXMvcnhqcy9kaXN0L2Nqcy9pbnRlcm5hbC9vcGVyYXRvcnMvZmluYWxpemUuanMiLCJ3ZWJwYWNrOi8vdGV0cmlzLy4vbm9kZV9tb2R1bGVzL3J4anMvZGlzdC9janMvaW50ZXJuYWwvb3BlcmF0b3JzL2ZpbmQuanMiLCJ3ZWJwYWNrOi8vdGV0cmlzLy4vbm9kZV9tb2R1bGVzL3J4anMvZGlzdC9janMvaW50ZXJuYWwvb3BlcmF0b3JzL2ZpbmRJbmRleC5qcyIsIndlYnBhY2s6Ly90ZXRyaXMvLi9ub2RlX21vZHVsZXMvcnhqcy9kaXN0L2Nqcy9pbnRlcm5hbC9vcGVyYXRvcnMvZmlyc3QuanMiLCJ3ZWJwYWNrOi8vdGV0cmlzLy4vbm9kZV9tb2R1bGVzL3J4anMvZGlzdC9janMvaW50ZXJuYWwvb3BlcmF0b3JzL2ZsYXRNYXAuanMiLCJ3ZWJwYWNrOi8vdGV0cmlzLy4vbm9kZV9tb2R1bGVzL3J4anMvZGlzdC9janMvaW50ZXJuYWwvb3BlcmF0b3JzL2dyb3VwQnkuanMiLCJ3ZWJwYWNrOi8vdGV0cmlzLy4vbm9kZV9tb2R1bGVzL3J4anMvZGlzdC9janMvaW50ZXJuYWwvb3BlcmF0b3JzL2lnbm9yZUVsZW1lbnRzLmpzIiwid2VicGFjazovL3RldHJpcy8uL25vZGVfbW9kdWxlcy9yeGpzL2Rpc3QvY2pzL2ludGVybmFsL29wZXJhdG9ycy9pc0VtcHR5LmpzIiwid2VicGFjazovL3RldHJpcy8uL25vZGVfbW9kdWxlcy9yeGpzL2Rpc3QvY2pzL2ludGVybmFsL29wZXJhdG9ycy9qb2luQWxsSW50ZXJuYWxzLmpzIiwid2VicGFjazovL3RldHJpcy8uL25vZGVfbW9kdWxlcy9yeGpzL2Rpc3QvY2pzL2ludGVybmFsL29wZXJhdG9ycy9sYXN0LmpzIiwid2VicGFjazovL3RldHJpcy8uL25vZGVfbW9kdWxlcy9yeGpzL2Rpc3QvY2pzL2ludGVybmFsL29wZXJhdG9ycy9tYXAuanMiLCJ3ZWJwYWNrOi8vdGV0cmlzLy4vbm9kZV9tb2R1bGVzL3J4anMvZGlzdC9janMvaW50ZXJuYWwvb3BlcmF0b3JzL21hcFRvLmpzIiwid2VicGFjazovL3RldHJpcy8uL25vZGVfbW9kdWxlcy9yeGpzL2Rpc3QvY2pzL2ludGVybmFsL29wZXJhdG9ycy9tYXRlcmlhbGl6ZS5qcyIsIndlYnBhY2s6Ly90ZXRyaXMvLi9ub2RlX21vZHVsZXMvcnhqcy9kaXN0L2Nqcy9pbnRlcm5hbC9vcGVyYXRvcnMvbWF4LmpzIiwid2VicGFjazovL3RldHJpcy8uL25vZGVfbW9kdWxlcy9yeGpzL2Rpc3QvY2pzL2ludGVybmFsL29wZXJhdG9ycy9tZXJnZS5qcyIsIndlYnBhY2s6Ly90ZXRyaXMvLi9ub2RlX21vZHVsZXMvcnhqcy9kaXN0L2Nqcy9pbnRlcm5hbC9vcGVyYXRvcnMvbWVyZ2VBbGwuanMiLCJ3ZWJwYWNrOi8vdGV0cmlzLy4vbm9kZV9tb2R1bGVzL3J4anMvZGlzdC9janMvaW50ZXJuYWwvb3BlcmF0b3JzL21lcmdlSW50ZXJuYWxzLmpzIiwid2VicGFjazovL3RldHJpcy8uL25vZGVfbW9kdWxlcy9yeGpzL2Rpc3QvY2pzL2ludGVybmFsL29wZXJhdG9ycy9tZXJnZU1hcC5qcyIsIndlYnBhY2s6Ly90ZXRyaXMvLi9ub2RlX21vZHVsZXMvcnhqcy9kaXN0L2Nqcy9pbnRlcm5hbC9vcGVyYXRvcnMvbWVyZ2VNYXBUby5qcyIsIndlYnBhY2s6Ly90ZXRyaXMvLi9ub2RlX21vZHVsZXMvcnhqcy9kaXN0L2Nqcy9pbnRlcm5hbC9vcGVyYXRvcnMvbWVyZ2VTY2FuLmpzIiwid2VicGFjazovL3RldHJpcy8uL25vZGVfbW9kdWxlcy9yeGpzL2Rpc3QvY2pzL2ludGVybmFsL29wZXJhdG9ycy9tZXJnZVdpdGguanMiLCJ3ZWJwYWNrOi8vdGV0cmlzLy4vbm9kZV9tb2R1bGVzL3J4anMvZGlzdC9janMvaW50ZXJuYWwvb3BlcmF0b3JzL21pbi5qcyIsIndlYnBhY2s6Ly90ZXRyaXMvLi9ub2RlX21vZHVsZXMvcnhqcy9kaXN0L2Nqcy9pbnRlcm5hbC9vcGVyYXRvcnMvbXVsdGljYXN0LmpzIiwid2VicGFjazovL3RldHJpcy8uL25vZGVfbW9kdWxlcy9yeGpzL2Rpc3QvY2pzL2ludGVybmFsL29wZXJhdG9ycy9vYnNlcnZlT24uanMiLCJ3ZWJwYWNrOi8vdGV0cmlzLy4vbm9kZV9tb2R1bGVzL3J4anMvZGlzdC9janMvaW50ZXJuYWwvb3BlcmF0b3JzL29uRXJyb3JSZXN1bWVOZXh0V2l0aC5qcyIsIndlYnBhY2s6Ly90ZXRyaXMvLi9ub2RlX21vZHVsZXMvcnhqcy9kaXN0L2Nqcy9pbnRlcm5hbC9vcGVyYXRvcnMvcGFpcndpc2UuanMiLCJ3ZWJwYWNrOi8vdGV0cmlzLy4vbm9kZV9tb2R1bGVzL3J4anMvZGlzdC9janMvaW50ZXJuYWwvb3BlcmF0b3JzL3BsdWNrLmpzIiwid2VicGFjazovL3RldHJpcy8uL25vZGVfbW9kdWxlcy9yeGpzL2Rpc3QvY2pzL2ludGVybmFsL29wZXJhdG9ycy9wdWJsaXNoLmpzIiwid2VicGFjazovL3RldHJpcy8uL25vZGVfbW9kdWxlcy9yeGpzL2Rpc3QvY2pzL2ludGVybmFsL29wZXJhdG9ycy9wdWJsaXNoQmVoYXZpb3IuanMiLCJ3ZWJwYWNrOi8vdGV0cmlzLy4vbm9kZV9tb2R1bGVzL3J4anMvZGlzdC9janMvaW50ZXJuYWwvb3BlcmF0b3JzL3B1Ymxpc2hMYXN0LmpzIiwid2VicGFjazovL3RldHJpcy8uL25vZGVfbW9kdWxlcy9yeGpzL2Rpc3QvY2pzL2ludGVybmFsL29wZXJhdG9ycy9wdWJsaXNoUmVwbGF5LmpzIiwid2VicGFjazovL3RldHJpcy8uL25vZGVfbW9kdWxlcy9yeGpzL2Rpc3QvY2pzL2ludGVybmFsL29wZXJhdG9ycy9yYWNlV2l0aC5qcyIsIndlYnBhY2s6Ly90ZXRyaXMvLi9ub2RlX21vZHVsZXMvcnhqcy9kaXN0L2Nqcy9pbnRlcm5hbC9vcGVyYXRvcnMvcmVkdWNlLmpzIiwid2VicGFjazovL3RldHJpcy8uL25vZGVfbW9kdWxlcy9yeGpzL2Rpc3QvY2pzL2ludGVybmFsL29wZXJhdG9ycy9yZWZDb3VudC5qcyIsIndlYnBhY2s6Ly90ZXRyaXMvLi9ub2RlX21vZHVsZXMvcnhqcy9kaXN0L2Nqcy9pbnRlcm5hbC9vcGVyYXRvcnMvcmVwZWF0LmpzIiwid2VicGFjazovL3RldHJpcy8uL25vZGVfbW9kdWxlcy9yeGpzL2Rpc3QvY2pzL2ludGVybmFsL29wZXJhdG9ycy9yZXBlYXRXaGVuLmpzIiwid2VicGFjazovL3RldHJpcy8uL25vZGVfbW9kdWxlcy9yeGpzL2Rpc3QvY2pzL2ludGVybmFsL29wZXJhdG9ycy9yZXRyeS5qcyIsIndlYnBhY2s6Ly90ZXRyaXMvLi9ub2RlX21vZHVsZXMvcnhqcy9kaXN0L2Nqcy9pbnRlcm5hbC9vcGVyYXRvcnMvcmV0cnlXaGVuLmpzIiwid2VicGFjazovL3RldHJpcy8uL25vZGVfbW9kdWxlcy9yeGpzL2Rpc3QvY2pzL2ludGVybmFsL29wZXJhdG9ycy9zYW1wbGUuanMiLCJ3ZWJwYWNrOi8vdGV0cmlzLy4vbm9kZV9tb2R1bGVzL3J4anMvZGlzdC9janMvaW50ZXJuYWwvb3BlcmF0b3JzL3NhbXBsZVRpbWUuanMiLCJ3ZWJwYWNrOi8vdGV0cmlzLy4vbm9kZV9tb2R1bGVzL3J4anMvZGlzdC9janMvaW50ZXJuYWwvb3BlcmF0b3JzL3NjYW4uanMiLCJ3ZWJwYWNrOi8vdGV0cmlzLy4vbm9kZV9tb2R1bGVzL3J4anMvZGlzdC9janMvaW50ZXJuYWwvb3BlcmF0b3JzL3NjYW5JbnRlcm5hbHMuanMiLCJ3ZWJwYWNrOi8vdGV0cmlzLy4vbm9kZV9tb2R1bGVzL3J4anMvZGlzdC9janMvaW50ZXJuYWwvb3BlcmF0b3JzL3NlcXVlbmNlRXF1YWwuanMiLCJ3ZWJwYWNrOi8vdGV0cmlzLy4vbm9kZV9tb2R1bGVzL3J4anMvZGlzdC9janMvaW50ZXJuYWwvb3BlcmF0b3JzL3NoYXJlLmpzIiwid2VicGFjazovL3RldHJpcy8uL25vZGVfbW9kdWxlcy9yeGpzL2Rpc3QvY2pzL2ludGVybmFsL29wZXJhdG9ycy9zaGFyZVJlcGxheS5qcyIsIndlYnBhY2s6Ly90ZXRyaXMvLi9ub2RlX21vZHVsZXMvcnhqcy9kaXN0L2Nqcy9pbnRlcm5hbC9vcGVyYXRvcnMvc2luZ2xlLmpzIiwid2VicGFjazovL3RldHJpcy8uL25vZGVfbW9kdWxlcy9yeGpzL2Rpc3QvY2pzL2ludGVybmFsL29wZXJhdG9ycy9za2lwLmpzIiwid2VicGFjazovL3RldHJpcy8uL25vZGVfbW9kdWxlcy9yeGpzL2Rpc3QvY2pzL2ludGVybmFsL29wZXJhdG9ycy9za2lwTGFzdC5qcyIsIndlYnBhY2s6Ly90ZXRyaXMvLi9ub2RlX21vZHVsZXMvcnhqcy9kaXN0L2Nqcy9pbnRlcm5hbC9vcGVyYXRvcnMvc2tpcFVudGlsLmpzIiwid2VicGFjazovL3RldHJpcy8uL25vZGVfbW9kdWxlcy9yeGpzL2Rpc3QvY2pzL2ludGVybmFsL29wZXJhdG9ycy9za2lwV2hpbGUuanMiLCJ3ZWJwYWNrOi8vdGV0cmlzLy4vbm9kZV9tb2R1bGVzL3J4anMvZGlzdC9janMvaW50ZXJuYWwvb3BlcmF0b3JzL3N0YXJ0V2l0aC5qcyIsIndlYnBhY2s6Ly90ZXRyaXMvLi9ub2RlX21vZHVsZXMvcnhqcy9kaXN0L2Nqcy9pbnRlcm5hbC9vcGVyYXRvcnMvc3Vic2NyaWJlT24uanMiLCJ3ZWJwYWNrOi8vdGV0cmlzLy4vbm9kZV9tb2R1bGVzL3J4anMvZGlzdC9janMvaW50ZXJuYWwvb3BlcmF0b3JzL3N3aXRjaEFsbC5qcyIsIndlYnBhY2s6Ly90ZXRyaXMvLi9ub2RlX21vZHVsZXMvcnhqcy9kaXN0L2Nqcy9pbnRlcm5hbC9vcGVyYXRvcnMvc3dpdGNoTWFwLmpzIiwid2VicGFjazovL3RldHJpcy8uL25vZGVfbW9kdWxlcy9yeGpzL2Rpc3QvY2pzL2ludGVybmFsL29wZXJhdG9ycy9zd2l0Y2hNYXBUby5qcyIsIndlYnBhY2s6Ly90ZXRyaXMvLi9ub2RlX21vZHVsZXMvcnhqcy9kaXN0L2Nqcy9pbnRlcm5hbC9vcGVyYXRvcnMvc3dpdGNoU2Nhbi5qcyIsIndlYnBhY2s6Ly90ZXRyaXMvLi9ub2RlX21vZHVsZXMvcnhqcy9kaXN0L2Nqcy9pbnRlcm5hbC9vcGVyYXRvcnMvdGFrZS5qcyIsIndlYnBhY2s6Ly90ZXRyaXMvLi9ub2RlX21vZHVsZXMvcnhqcy9kaXN0L2Nqcy9pbnRlcm5hbC9vcGVyYXRvcnMvdGFrZUxhc3QuanMiLCJ3ZWJwYWNrOi8vdGV0cmlzLy4vbm9kZV9tb2R1bGVzL3J4anMvZGlzdC9janMvaW50ZXJuYWwvb3BlcmF0b3JzL3Rha2VVbnRpbC5qcyIsIndlYnBhY2s6Ly90ZXRyaXMvLi9ub2RlX21vZHVsZXMvcnhqcy9kaXN0L2Nqcy9pbnRlcm5hbC9vcGVyYXRvcnMvdGFrZVdoaWxlLmpzIiwid2VicGFjazovL3RldHJpcy8uL25vZGVfbW9kdWxlcy9yeGpzL2Rpc3QvY2pzL2ludGVybmFsL29wZXJhdG9ycy90YXAuanMiLCJ3ZWJwYWNrOi8vdGV0cmlzLy4vbm9kZV9tb2R1bGVzL3J4anMvZGlzdC9janMvaW50ZXJuYWwvb3BlcmF0b3JzL3Rocm90dGxlLmpzIiwid2VicGFjazovL3RldHJpcy8uL25vZGVfbW9kdWxlcy9yeGpzL2Rpc3QvY2pzL2ludGVybmFsL29wZXJhdG9ycy90aHJvdHRsZVRpbWUuanMiLCJ3ZWJwYWNrOi8vdGV0cmlzLy4vbm9kZV9tb2R1bGVzL3J4anMvZGlzdC9janMvaW50ZXJuYWwvb3BlcmF0b3JzL3Rocm93SWZFbXB0eS5qcyIsIndlYnBhY2s6Ly90ZXRyaXMvLi9ub2RlX21vZHVsZXMvcnhqcy9kaXN0L2Nqcy9pbnRlcm5hbC9vcGVyYXRvcnMvdGltZUludGVydmFsLmpzIiwid2VicGFjazovL3RldHJpcy8uL25vZGVfbW9kdWxlcy9yeGpzL2Rpc3QvY2pzL2ludGVybmFsL29wZXJhdG9ycy90aW1lb3V0LmpzIiwid2VicGFjazovL3RldHJpcy8uL25vZGVfbW9kdWxlcy9yeGpzL2Rpc3QvY2pzL2ludGVybmFsL29wZXJhdG9ycy90aW1lb3V0V2l0aC5qcyIsIndlYnBhY2s6Ly90ZXRyaXMvLi9ub2RlX21vZHVsZXMvcnhqcy9kaXN0L2Nqcy9pbnRlcm5hbC9vcGVyYXRvcnMvdGltZXN0YW1wLmpzIiwid2VicGFjazovL3RldHJpcy8uL25vZGVfbW9kdWxlcy9yeGpzL2Rpc3QvY2pzL2ludGVybmFsL29wZXJhdG9ycy90b0FycmF5LmpzIiwid2VicGFjazovL3RldHJpcy8uL25vZGVfbW9kdWxlcy9yeGpzL2Rpc3QvY2pzL2ludGVybmFsL29wZXJhdG9ycy93aW5kb3cuanMiLCJ3ZWJwYWNrOi8vdGV0cmlzLy4vbm9kZV9tb2R1bGVzL3J4anMvZGlzdC9janMvaW50ZXJuYWwvb3BlcmF0b3JzL3dpbmRvd0NvdW50LmpzIiwid2VicGFjazovL3RldHJpcy8uL25vZGVfbW9kdWxlcy9yeGpzL2Rpc3QvY2pzL2ludGVybmFsL29wZXJhdG9ycy93aW5kb3dUaW1lLmpzIiwid2VicGFjazovL3RldHJpcy8uL25vZGVfbW9kdWxlcy9yeGpzL2Rpc3QvY2pzL2ludGVybmFsL29wZXJhdG9ycy93aW5kb3dUb2dnbGUuanMiLCJ3ZWJwYWNrOi8vdGV0cmlzLy4vbm9kZV9tb2R1bGVzL3J4anMvZGlzdC9janMvaW50ZXJuYWwvb3BlcmF0b3JzL3dpbmRvd1doZW4uanMiLCJ3ZWJwYWNrOi8vdGV0cmlzLy4vbm9kZV9tb2R1bGVzL3J4anMvZGlzdC9janMvaW50ZXJuYWwvb3BlcmF0b3JzL3dpdGhMYXRlc3RGcm9tLmpzIiwid2VicGFjazovL3RldHJpcy8uL25vZGVfbW9kdWxlcy9yeGpzL2Rpc3QvY2pzL2ludGVybmFsL29wZXJhdG9ycy96aXAuanMiLCJ3ZWJwYWNrOi8vdGV0cmlzLy4vbm9kZV9tb2R1bGVzL3J4anMvZGlzdC9janMvaW50ZXJuYWwvb3BlcmF0b3JzL3ppcEFsbC5qcyIsIndlYnBhY2s6Ly90ZXRyaXMvLi9ub2RlX21vZHVsZXMvcnhqcy9kaXN0L2Nqcy9pbnRlcm5hbC9vcGVyYXRvcnMvemlwV2l0aC5qcyIsIndlYnBhY2s6Ly90ZXRyaXMvLi9ub2RlX21vZHVsZXMvcnhqcy9kaXN0L2Nqcy9pbnRlcm5hbC9zY2hlZHVsZWQvc2NoZWR1bGVBcnJheS5qcyIsIndlYnBhY2s6Ly90ZXRyaXMvLi9ub2RlX21vZHVsZXMvcnhqcy9kaXN0L2Nqcy9pbnRlcm5hbC9zY2hlZHVsZWQvc2NoZWR1bGVBc3luY0l0ZXJhYmxlLmpzIiwid2VicGFjazovL3RldHJpcy8uL25vZGVfbW9kdWxlcy9yeGpzL2Rpc3QvY2pzL2ludGVybmFsL3NjaGVkdWxlZC9zY2hlZHVsZUl0ZXJhYmxlLmpzIiwid2VicGFjazovL3RldHJpcy8uL25vZGVfbW9kdWxlcy9yeGpzL2Rpc3QvY2pzL2ludGVybmFsL3NjaGVkdWxlZC9zY2hlZHVsZU9ic2VydmFibGUuanMiLCJ3ZWJwYWNrOi8vdGV0cmlzLy4vbm9kZV9tb2R1bGVzL3J4anMvZGlzdC9janMvaW50ZXJuYWwvc2NoZWR1bGVkL3NjaGVkdWxlUHJvbWlzZS5qcyIsIndlYnBhY2s6Ly90ZXRyaXMvLi9ub2RlX21vZHVsZXMvcnhqcy9kaXN0L2Nqcy9pbnRlcm5hbC9zY2hlZHVsZWQvc2NoZWR1bGVSZWFkYWJsZVN0cmVhbUxpa2UuanMiLCJ3ZWJwYWNrOi8vdGV0cmlzLy4vbm9kZV9tb2R1bGVzL3J4anMvZGlzdC9janMvaW50ZXJuYWwvc2NoZWR1bGVkL3NjaGVkdWxlZC5qcyIsIndlYnBhY2s6Ly90ZXRyaXMvLi9ub2RlX21vZHVsZXMvcnhqcy9kaXN0L2Nqcy9pbnRlcm5hbC9zY2hlZHVsZXIvQWN0aW9uLmpzIiwid2VicGFjazovL3RldHJpcy8uL25vZGVfbW9kdWxlcy9yeGpzL2Rpc3QvY2pzL2ludGVybmFsL3NjaGVkdWxlci9BbmltYXRpb25GcmFtZUFjdGlvbi5qcyIsIndlYnBhY2s6Ly90ZXRyaXMvLi9ub2RlX21vZHVsZXMvcnhqcy9kaXN0L2Nqcy9pbnRlcm5hbC9zY2hlZHVsZXIvQW5pbWF0aW9uRnJhbWVTY2hlZHVsZXIuanMiLCJ3ZWJwYWNrOi8vdGV0cmlzLy4vbm9kZV9tb2R1bGVzL3J4anMvZGlzdC9janMvaW50ZXJuYWwvc2NoZWR1bGVyL0FzYXBBY3Rpb24uanMiLCJ3ZWJwYWNrOi8vdGV0cmlzLy4vbm9kZV9tb2R1bGVzL3J4anMvZGlzdC9janMvaW50ZXJuYWwvc2NoZWR1bGVyL0FzYXBTY2hlZHVsZXIuanMiLCJ3ZWJwYWNrOi8vdGV0cmlzLy4vbm9kZV9tb2R1bGVzL3J4anMvZGlzdC9janMvaW50ZXJuYWwvc2NoZWR1bGVyL0FzeW5jQWN0aW9uLmpzIiwid2VicGFjazovL3RldHJpcy8uL25vZGVfbW9kdWxlcy9yeGpzL2Rpc3QvY2pzL2ludGVybmFsL3NjaGVkdWxlci9Bc3luY1NjaGVkdWxlci5qcyIsIndlYnBhY2s6Ly90ZXRyaXMvLi9ub2RlX21vZHVsZXMvcnhqcy9kaXN0L2Nqcy9pbnRlcm5hbC9zY2hlZHVsZXIvUXVldWVBY3Rpb24uanMiLCJ3ZWJwYWNrOi8vdGV0cmlzLy4vbm9kZV9tb2R1bGVzL3J4anMvZGlzdC9janMvaW50ZXJuYWwvc2NoZWR1bGVyL1F1ZXVlU2NoZWR1bGVyLmpzIiwid2VicGFjazovL3RldHJpcy8uL25vZGVfbW9kdWxlcy9yeGpzL2Rpc3QvY2pzL2ludGVybmFsL3NjaGVkdWxlci9WaXJ0dWFsVGltZVNjaGVkdWxlci5qcyIsIndlYnBhY2s6Ly90ZXRyaXMvLi9ub2RlX21vZHVsZXMvcnhqcy9kaXN0L2Nqcy9pbnRlcm5hbC9zY2hlZHVsZXIvYW5pbWF0aW9uRnJhbWUuanMiLCJ3ZWJwYWNrOi8vdGV0cmlzLy4vbm9kZV9tb2R1bGVzL3J4anMvZGlzdC9janMvaW50ZXJuYWwvc2NoZWR1bGVyL2FuaW1hdGlvbkZyYW1lUHJvdmlkZXIuanMiLCJ3ZWJwYWNrOi8vdGV0cmlzLy4vbm9kZV9tb2R1bGVzL3J4anMvZGlzdC9janMvaW50ZXJuYWwvc2NoZWR1bGVyL2FzYXAuanMiLCJ3ZWJwYWNrOi8vdGV0cmlzLy4vbm9kZV9tb2R1bGVzL3J4anMvZGlzdC9janMvaW50ZXJuYWwvc2NoZWR1bGVyL2FzeW5jLmpzIiwid2VicGFjazovL3RldHJpcy8uL25vZGVfbW9kdWxlcy9yeGpzL2Rpc3QvY2pzL2ludGVybmFsL3NjaGVkdWxlci9kYXRlVGltZXN0YW1wUHJvdmlkZXIuanMiLCJ3ZWJwYWNrOi8vdGV0cmlzLy4vbm9kZV9tb2R1bGVzL3J4anMvZGlzdC9janMvaW50ZXJuYWwvc2NoZWR1bGVyL2ltbWVkaWF0ZVByb3ZpZGVyLmpzIiwid2VicGFjazovL3RldHJpcy8uL25vZGVfbW9kdWxlcy9yeGpzL2Rpc3QvY2pzL2ludGVybmFsL3NjaGVkdWxlci9pbnRlcnZhbFByb3ZpZGVyLmpzIiwid2VicGFjazovL3RldHJpcy8uL25vZGVfbW9kdWxlcy9yeGpzL2Rpc3QvY2pzL2ludGVybmFsL3NjaGVkdWxlci9wZXJmb3JtYW5jZVRpbWVzdGFtcFByb3ZpZGVyLmpzIiwid2VicGFjazovL3RldHJpcy8uL25vZGVfbW9kdWxlcy9yeGpzL2Rpc3QvY2pzL2ludGVybmFsL3NjaGVkdWxlci9xdWV1ZS5qcyIsIndlYnBhY2s6Ly90ZXRyaXMvLi9ub2RlX21vZHVsZXMvcnhqcy9kaXN0L2Nqcy9pbnRlcm5hbC9zY2hlZHVsZXIvdGltZW91dFByb3ZpZGVyLmpzIiwid2VicGFjazovL3RldHJpcy8uL25vZGVfbW9kdWxlcy9yeGpzL2Rpc3QvY2pzL2ludGVybmFsL3N5bWJvbC9pdGVyYXRvci5qcyIsIndlYnBhY2s6Ly90ZXRyaXMvLi9ub2RlX21vZHVsZXMvcnhqcy9kaXN0L2Nqcy9pbnRlcm5hbC9zeW1ib2wvb2JzZXJ2YWJsZS5qcyIsIndlYnBhY2s6Ly90ZXRyaXMvLi9ub2RlX21vZHVsZXMvcnhqcy9kaXN0L2Nqcy9pbnRlcm5hbC90eXBlcy5qcyIsIndlYnBhY2s6Ly90ZXRyaXMvLi9ub2RlX21vZHVsZXMvcnhqcy9kaXN0L2Nqcy9pbnRlcm5hbC91dGlsL0FyZ3VtZW50T3V0T2ZSYW5nZUVycm9yLmpzIiwid2VicGFjazovL3RldHJpcy8uL25vZGVfbW9kdWxlcy9yeGpzL2Rpc3QvY2pzL2ludGVybmFsL3V0aWwvRW1wdHlFcnJvci5qcyIsIndlYnBhY2s6Ly90ZXRyaXMvLi9ub2RlX21vZHVsZXMvcnhqcy9kaXN0L2Nqcy9pbnRlcm5hbC91dGlsL0ltbWVkaWF0ZS5qcyIsIndlYnBhY2s6Ly90ZXRyaXMvLi9ub2RlX21vZHVsZXMvcnhqcy9kaXN0L2Nqcy9pbnRlcm5hbC91dGlsL05vdEZvdW5kRXJyb3IuanMiLCJ3ZWJwYWNrOi8vdGV0cmlzLy4vbm9kZV9tb2R1bGVzL3J4anMvZGlzdC9janMvaW50ZXJuYWwvdXRpbC9PYmplY3RVbnN1YnNjcmliZWRFcnJvci5qcyIsIndlYnBhY2s6Ly90ZXRyaXMvLi9ub2RlX21vZHVsZXMvcnhqcy9kaXN0L2Nqcy9pbnRlcm5hbC91dGlsL1NlcXVlbmNlRXJyb3IuanMiLCJ3ZWJwYWNrOi8vdGV0cmlzLy4vbm9kZV9tb2R1bGVzL3J4anMvZGlzdC9janMvaW50ZXJuYWwvdXRpbC9VbnN1YnNjcmlwdGlvbkVycm9yLmpzIiwid2VicGFjazovL3RldHJpcy8uL25vZGVfbW9kdWxlcy9yeGpzL2Rpc3QvY2pzL2ludGVybmFsL3V0aWwvYXJncy5qcyIsIndlYnBhY2s6Ly90ZXRyaXMvLi9ub2RlX21vZHVsZXMvcnhqcy9kaXN0L2Nqcy9pbnRlcm5hbC91dGlsL2FyZ3NBcmdBcnJheU9yT2JqZWN0LmpzIiwid2VicGFjazovL3RldHJpcy8uL25vZGVfbW9kdWxlcy9yeGpzL2Rpc3QvY2pzL2ludGVybmFsL3V0aWwvYXJnc09yQXJnQXJyYXkuanMiLCJ3ZWJwYWNrOi8vdGV0cmlzLy4vbm9kZV9tb2R1bGVzL3J4anMvZGlzdC9janMvaW50ZXJuYWwvdXRpbC9hcnJSZW1vdmUuanMiLCJ3ZWJwYWNrOi8vdGV0cmlzLy4vbm9kZV9tb2R1bGVzL3J4anMvZGlzdC9janMvaW50ZXJuYWwvdXRpbC9jcmVhdGVFcnJvckNsYXNzLmpzIiwid2VicGFjazovL3RldHJpcy8uL25vZGVfbW9kdWxlcy9yeGpzL2Rpc3QvY2pzL2ludGVybmFsL3V0aWwvY3JlYXRlT2JqZWN0LmpzIiwid2VicGFjazovL3RldHJpcy8uL25vZGVfbW9kdWxlcy9yeGpzL2Rpc3QvY2pzL2ludGVybmFsL3V0aWwvZXJyb3JDb250ZXh0LmpzIiwid2VicGFjazovL3RldHJpcy8uL25vZGVfbW9kdWxlcy9yeGpzL2Rpc3QvY2pzL2ludGVybmFsL3V0aWwvZXhlY3V0ZVNjaGVkdWxlLmpzIiwid2VicGFjazovL3RldHJpcy8uL25vZGVfbW9kdWxlcy9yeGpzL2Rpc3QvY2pzL2ludGVybmFsL3V0aWwvaWRlbnRpdHkuanMiLCJ3ZWJwYWNrOi8vdGV0cmlzLy4vbm9kZV9tb2R1bGVzL3J4anMvZGlzdC9janMvaW50ZXJuYWwvdXRpbC9pc0FycmF5TGlrZS5qcyIsIndlYnBhY2s6Ly90ZXRyaXMvLi9ub2RlX21vZHVsZXMvcnhqcy9kaXN0L2Nqcy9pbnRlcm5hbC91dGlsL2lzQXN5bmNJdGVyYWJsZS5qcyIsIndlYnBhY2s6Ly90ZXRyaXMvLi9ub2RlX21vZHVsZXMvcnhqcy9kaXN0L2Nqcy9pbnRlcm5hbC91dGlsL2lzRGF0ZS5qcyIsIndlYnBhY2s6Ly90ZXRyaXMvLi9ub2RlX21vZHVsZXMvcnhqcy9kaXN0L2Nqcy9pbnRlcm5hbC91dGlsL2lzRnVuY3Rpb24uanMiLCJ3ZWJwYWNrOi8vdGV0cmlzLy4vbm9kZV9tb2R1bGVzL3J4anMvZGlzdC9janMvaW50ZXJuYWwvdXRpbC9pc0ludGVyb3BPYnNlcnZhYmxlLmpzIiwid2VicGFjazovL3RldHJpcy8uL25vZGVfbW9kdWxlcy9yeGpzL2Rpc3QvY2pzL2ludGVybmFsL3V0aWwvaXNJdGVyYWJsZS5qcyIsIndlYnBhY2s6Ly90ZXRyaXMvLi9ub2RlX21vZHVsZXMvcnhqcy9kaXN0L2Nqcy9pbnRlcm5hbC91dGlsL2lzT2JzZXJ2YWJsZS5qcyIsIndlYnBhY2s6Ly90ZXRyaXMvLi9ub2RlX21vZHVsZXMvcnhqcy9kaXN0L2Nqcy9pbnRlcm5hbC91dGlsL2lzUHJvbWlzZS5qcyIsIndlYnBhY2s6Ly90ZXRyaXMvLi9ub2RlX21vZHVsZXMvcnhqcy9kaXN0L2Nqcy9pbnRlcm5hbC91dGlsL2lzUmVhZGFibGVTdHJlYW1MaWtlLmpzIiwid2VicGFjazovL3RldHJpcy8uL25vZGVfbW9kdWxlcy9yeGpzL2Rpc3QvY2pzL2ludGVybmFsL3V0aWwvaXNTY2hlZHVsZXIuanMiLCJ3ZWJwYWNrOi8vdGV0cmlzLy4vbm9kZV9tb2R1bGVzL3J4anMvZGlzdC9janMvaW50ZXJuYWwvdXRpbC9saWZ0LmpzIiwid2VicGFjazovL3RldHJpcy8uL25vZGVfbW9kdWxlcy9yeGpzL2Rpc3QvY2pzL2ludGVybmFsL3V0aWwvbWFwT25lT3JNYW55QXJncy5qcyIsIndlYnBhY2s6Ly90ZXRyaXMvLi9ub2RlX21vZHVsZXMvcnhqcy9kaXN0L2Nqcy9pbnRlcm5hbC91dGlsL25vb3AuanMiLCJ3ZWJwYWNrOi8vdGV0cmlzLy4vbm9kZV9tb2R1bGVzL3J4anMvZGlzdC9janMvaW50ZXJuYWwvdXRpbC9ub3QuanMiLCJ3ZWJwYWNrOi8vdGV0cmlzLy4vbm9kZV9tb2R1bGVzL3J4anMvZGlzdC9janMvaW50ZXJuYWwvdXRpbC9waXBlLmpzIiwid2VicGFjazovL3RldHJpcy8uL25vZGVfbW9kdWxlcy9yeGpzL2Rpc3QvY2pzL2ludGVybmFsL3V0aWwvcmVwb3J0VW5oYW5kbGVkRXJyb3IuanMiLCJ3ZWJwYWNrOi8vdGV0cmlzLy4vbm9kZV9tb2R1bGVzL3J4anMvZGlzdC9janMvaW50ZXJuYWwvdXRpbC90aHJvd1Vub2JzZXJ2YWJsZUVycm9yLmpzIiwid2VicGFjazovL3RldHJpcy8uL3NyYy9jb21wb25lbnRzL2JhY2tncm91bmQudHMiLCJ3ZWJwYWNrOi8vdGV0cmlzLy4vc3JjL2NvbXBvbmVudHMvY29tcG9uZW50LnRzIiwid2VicGFjazovL3RldHJpcy8uL3NyYy9jb21wb25lbnRzL2VudGVyVXNlcm5hbWUudHMiLCJ3ZWJwYWNrOi8vdGV0cmlzLy4vc3JjL2NvbXBvbmVudHMvaGlnaHNjb3Jlcy50cyIsIndlYnBhY2s6Ly90ZXRyaXMvLi9zcmMvY29tcG9uZW50cy9vdmVybGF5LnRzIiwid2VicGFjazovL3RldHJpcy8uL3NyYy9jb25maWcudHMiLCJ3ZWJwYWNrOi8vdGV0cmlzLy4vc3JjL2VudW1zL0dhbWVQaGFzZS50cyIsIndlYnBhY2s6Ly90ZXRyaXMvLi9zcmMvZ2FtZS50cyIsIndlYnBhY2s6Ly90ZXRyaXMvLi9zcmMvc2VydmljZXMvYXBpU2VydmljZXMudHMiLCJ3ZWJwYWNrOi8vdGV0cmlzLy4vc3JjL3NlcnZpY2VzL2ltYWdlTG9hZGVyLnRzIiwid2VicGFjazovL3RldHJpcy8uL3NyYy9zZXJ2aWNlcy9yZW5kZXJMb29wLnRzIiwid2VicGFjazovL3RldHJpcy8uL3NyYy9zZXJ2aWNlcy9yZW5kZXJTZXJ2aWNlcy50cyIsIndlYnBhY2s6Ly90ZXRyaXMvd2VicGFjay9ib290c3RyYXAiLCJ3ZWJwYWNrOi8vdGV0cmlzLy4vc3JjL2luZGV4LnRzIl0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xudmFyIF9fY3JlYXRlQmluZGluZyA9ICh0aGlzICYmIHRoaXMuX19jcmVhdGVCaW5kaW5nKSB8fCAoT2JqZWN0LmNyZWF0ZSA/IChmdW5jdGlvbihvLCBtLCBrLCBrMikge1xuICAgIGlmIChrMiA9PT0gdW5kZWZpbmVkKSBrMiA9IGs7XG4gICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KG8sIGsyLCB7IGVudW1lcmFibGU6IHRydWUsIGdldDogZnVuY3Rpb24oKSB7IHJldHVybiBtW2tdOyB9IH0pO1xufSkgOiAoZnVuY3Rpb24obywgbSwgaywgazIpIHtcbiAgICBpZiAoazIgPT09IHVuZGVmaW5lZCkgazIgPSBrO1xuICAgIG9bazJdID0gbVtrXTtcbn0pKTtcbnZhciBfX2V4cG9ydFN0YXIgPSAodGhpcyAmJiB0aGlzLl9fZXhwb3J0U3RhcikgfHwgZnVuY3Rpb24obSwgZXhwb3J0cykge1xuICAgIGZvciAodmFyIHAgaW4gbSkgaWYgKHAgIT09IFwiZGVmYXVsdFwiICYmICFPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwoZXhwb3J0cywgcCkpIF9fY3JlYXRlQmluZGluZyhleHBvcnRzLCBtLCBwKTtcbn07XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5leHBvcnRzLmludGVydmFsID0gZXhwb3J0cy5paWYgPSBleHBvcnRzLmdlbmVyYXRlID0gZXhwb3J0cy5mcm9tRXZlbnRQYXR0ZXJuID0gZXhwb3J0cy5mcm9tRXZlbnQgPSBleHBvcnRzLmZyb20gPSBleHBvcnRzLmZvcmtKb2luID0gZXhwb3J0cy5lbXB0eSA9IGV4cG9ydHMuZGVmZXIgPSBleHBvcnRzLmNvbm5lY3RhYmxlID0gZXhwb3J0cy5jb25jYXQgPSBleHBvcnRzLmNvbWJpbmVMYXRlc3QgPSBleHBvcnRzLmJpbmROb2RlQ2FsbGJhY2sgPSBleHBvcnRzLmJpbmRDYWxsYmFjayA9IGV4cG9ydHMuVW5zdWJzY3JpcHRpb25FcnJvciA9IGV4cG9ydHMuVGltZW91dEVycm9yID0gZXhwb3J0cy5TZXF1ZW5jZUVycm9yID0gZXhwb3J0cy5PYmplY3RVbnN1YnNjcmliZWRFcnJvciA9IGV4cG9ydHMuTm90Rm91bmRFcnJvciA9IGV4cG9ydHMuRW1wdHlFcnJvciA9IGV4cG9ydHMuQXJndW1lbnRPdXRPZlJhbmdlRXJyb3IgPSBleHBvcnRzLmZpcnN0VmFsdWVGcm9tID0gZXhwb3J0cy5sYXN0VmFsdWVGcm9tID0gZXhwb3J0cy5pc09ic2VydmFibGUgPSBleHBvcnRzLmlkZW50aXR5ID0gZXhwb3J0cy5ub29wID0gZXhwb3J0cy5waXBlID0gZXhwb3J0cy5Ob3RpZmljYXRpb25LaW5kID0gZXhwb3J0cy5Ob3RpZmljYXRpb24gPSBleHBvcnRzLlN1YnNjcmliZXIgPSBleHBvcnRzLlN1YnNjcmlwdGlvbiA9IGV4cG9ydHMuU2NoZWR1bGVyID0gZXhwb3J0cy5WaXJ0dWFsQWN0aW9uID0gZXhwb3J0cy5WaXJ0dWFsVGltZVNjaGVkdWxlciA9IGV4cG9ydHMuYW5pbWF0aW9uRnJhbWVTY2hlZHVsZXIgPSBleHBvcnRzLmFuaW1hdGlvbkZyYW1lID0gZXhwb3J0cy5xdWV1ZVNjaGVkdWxlciA9IGV4cG9ydHMucXVldWUgPSBleHBvcnRzLmFzeW5jU2NoZWR1bGVyID0gZXhwb3J0cy5hc3luYyA9IGV4cG9ydHMuYXNhcFNjaGVkdWxlciA9IGV4cG9ydHMuYXNhcCA9IGV4cG9ydHMuQXN5bmNTdWJqZWN0ID0gZXhwb3J0cy5SZXBsYXlTdWJqZWN0ID0gZXhwb3J0cy5CZWhhdmlvclN1YmplY3QgPSBleHBvcnRzLlN1YmplY3QgPSBleHBvcnRzLmFuaW1hdGlvbkZyYW1lcyA9IGV4cG9ydHMub2JzZXJ2YWJsZSA9IGV4cG9ydHMuQ29ubmVjdGFibGVPYnNlcnZhYmxlID0gZXhwb3J0cy5PYnNlcnZhYmxlID0gdm9pZCAwO1xuZXhwb3J0cy5maWx0ZXIgPSBleHBvcnRzLmV4cGFuZCA9IGV4cG9ydHMuZXhoYXVzdE1hcCA9IGV4cG9ydHMuZXhoYXVzdEFsbCA9IGV4cG9ydHMuZXhoYXVzdCA9IGV4cG9ydHMuZXZlcnkgPSBleHBvcnRzLmVuZFdpdGggPSBleHBvcnRzLmVsZW1lbnRBdCA9IGV4cG9ydHMuZGlzdGluY3RVbnRpbEtleUNoYW5nZWQgPSBleHBvcnRzLmRpc3RpbmN0VW50aWxDaGFuZ2VkID0gZXhwb3J0cy5kaXN0aW5jdCA9IGV4cG9ydHMuZGVtYXRlcmlhbGl6ZSA9IGV4cG9ydHMuZGVsYXlXaGVuID0gZXhwb3J0cy5kZWxheSA9IGV4cG9ydHMuZGVmYXVsdElmRW1wdHkgPSBleHBvcnRzLmRlYm91bmNlVGltZSA9IGV4cG9ydHMuZGVib3VuY2UgPSBleHBvcnRzLmNvdW50ID0gZXhwb3J0cy5jb25uZWN0ID0gZXhwb3J0cy5jb25jYXRXaXRoID0gZXhwb3J0cy5jb25jYXRNYXBUbyA9IGV4cG9ydHMuY29uY2F0TWFwID0gZXhwb3J0cy5jb25jYXRBbGwgPSBleHBvcnRzLmNvbWJpbmVMYXRlc3RXaXRoID0gZXhwb3J0cy5jb21iaW5lTGF0ZXN0QWxsID0gZXhwb3J0cy5jb21iaW5lQWxsID0gZXhwb3J0cy5jYXRjaEVycm9yID0gZXhwb3J0cy5idWZmZXJXaGVuID0gZXhwb3J0cy5idWZmZXJUb2dnbGUgPSBleHBvcnRzLmJ1ZmZlclRpbWUgPSBleHBvcnRzLmJ1ZmZlckNvdW50ID0gZXhwb3J0cy5idWZmZXIgPSBleHBvcnRzLmF1ZGl0VGltZSA9IGV4cG9ydHMuYXVkaXQgPSBleHBvcnRzLmNvbmZpZyA9IGV4cG9ydHMuTkVWRVIgPSBleHBvcnRzLkVNUFRZID0gZXhwb3J0cy5zY2hlZHVsZWQgPSBleHBvcnRzLnppcCA9IGV4cG9ydHMudXNpbmcgPSBleHBvcnRzLnRpbWVyID0gZXhwb3J0cy50aHJvd0Vycm9yID0gZXhwb3J0cy5yYW5nZSA9IGV4cG9ydHMucmFjZSA9IGV4cG9ydHMucGFydGl0aW9uID0gZXhwb3J0cy5wYWlycyA9IGV4cG9ydHMub25FcnJvclJlc3VtZU5leHQgPSBleHBvcnRzLm9mID0gZXhwb3J0cy5uZXZlciA9IGV4cG9ydHMubWVyZ2UgPSB2b2lkIDA7XG5leHBvcnRzLnN3aXRjaE1hcCA9IGV4cG9ydHMuc3dpdGNoQWxsID0gZXhwb3J0cy5zdWJzY3JpYmVPbiA9IGV4cG9ydHMuc3RhcnRXaXRoID0gZXhwb3J0cy5za2lwV2hpbGUgPSBleHBvcnRzLnNraXBVbnRpbCA9IGV4cG9ydHMuc2tpcExhc3QgPSBleHBvcnRzLnNraXAgPSBleHBvcnRzLnNpbmdsZSA9IGV4cG9ydHMuc2hhcmVSZXBsYXkgPSBleHBvcnRzLnNoYXJlID0gZXhwb3J0cy5zZXF1ZW5jZUVxdWFsID0gZXhwb3J0cy5zY2FuID0gZXhwb3J0cy5zYW1wbGVUaW1lID0gZXhwb3J0cy5zYW1wbGUgPSBleHBvcnRzLnJlZkNvdW50ID0gZXhwb3J0cy5yZXRyeVdoZW4gPSBleHBvcnRzLnJldHJ5ID0gZXhwb3J0cy5yZXBlYXRXaGVuID0gZXhwb3J0cy5yZXBlYXQgPSBleHBvcnRzLnJlZHVjZSA9IGV4cG9ydHMucmFjZVdpdGggPSBleHBvcnRzLnB1Ymxpc2hSZXBsYXkgPSBleHBvcnRzLnB1Ymxpc2hMYXN0ID0gZXhwb3J0cy5wdWJsaXNoQmVoYXZpb3IgPSBleHBvcnRzLnB1Ymxpc2ggPSBleHBvcnRzLnBsdWNrID0gZXhwb3J0cy5wYWlyd2lzZSA9IGV4cG9ydHMub25FcnJvclJlc3VtZU5leHRXaXRoID0gZXhwb3J0cy5vYnNlcnZlT24gPSBleHBvcnRzLm11bHRpY2FzdCA9IGV4cG9ydHMubWluID0gZXhwb3J0cy5tZXJnZVdpdGggPSBleHBvcnRzLm1lcmdlU2NhbiA9IGV4cG9ydHMubWVyZ2VNYXBUbyA9IGV4cG9ydHMubWVyZ2VNYXAgPSBleHBvcnRzLmZsYXRNYXAgPSBleHBvcnRzLm1lcmdlQWxsID0gZXhwb3J0cy5tYXggPSBleHBvcnRzLm1hdGVyaWFsaXplID0gZXhwb3J0cy5tYXBUbyA9IGV4cG9ydHMubWFwID0gZXhwb3J0cy5sYXN0ID0gZXhwb3J0cy5pc0VtcHR5ID0gZXhwb3J0cy5pZ25vcmVFbGVtZW50cyA9IGV4cG9ydHMuZ3JvdXBCeSA9IGV4cG9ydHMuZmlyc3QgPSBleHBvcnRzLmZpbmRJbmRleCA9IGV4cG9ydHMuZmluZCA9IGV4cG9ydHMuZmluYWxpemUgPSB2b2lkIDA7XG5leHBvcnRzLnppcFdpdGggPSBleHBvcnRzLnppcEFsbCA9IGV4cG9ydHMud2l0aExhdGVzdEZyb20gPSBleHBvcnRzLndpbmRvd1doZW4gPSBleHBvcnRzLndpbmRvd1RvZ2dsZSA9IGV4cG9ydHMud2luZG93VGltZSA9IGV4cG9ydHMud2luZG93Q291bnQgPSBleHBvcnRzLndpbmRvdyA9IGV4cG9ydHMudG9BcnJheSA9IGV4cG9ydHMudGltZXN0YW1wID0gZXhwb3J0cy50aW1lb3V0V2l0aCA9IGV4cG9ydHMudGltZW91dCA9IGV4cG9ydHMudGltZUludGVydmFsID0gZXhwb3J0cy50aHJvd0lmRW1wdHkgPSBleHBvcnRzLnRocm90dGxlVGltZSA9IGV4cG9ydHMudGhyb3R0bGUgPSBleHBvcnRzLnRhcCA9IGV4cG9ydHMudGFrZVdoaWxlID0gZXhwb3J0cy50YWtlVW50aWwgPSBleHBvcnRzLnRha2VMYXN0ID0gZXhwb3J0cy50YWtlID0gZXhwb3J0cy5zd2l0Y2hTY2FuID0gZXhwb3J0cy5zd2l0Y2hNYXBUbyA9IHZvaWQgMDtcbnZhciBPYnNlcnZhYmxlXzEgPSByZXF1aXJlKFwiLi9pbnRlcm5hbC9PYnNlcnZhYmxlXCIpO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiT2JzZXJ2YWJsZVwiLCB7IGVudW1lcmFibGU6IHRydWUsIGdldDogZnVuY3Rpb24gKCkgeyByZXR1cm4gT2JzZXJ2YWJsZV8xLk9ic2VydmFibGU7IH0gfSk7XG52YXIgQ29ubmVjdGFibGVPYnNlcnZhYmxlXzEgPSByZXF1aXJlKFwiLi9pbnRlcm5hbC9vYnNlcnZhYmxlL0Nvbm5lY3RhYmxlT2JzZXJ2YWJsZVwiKTtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIkNvbm5lY3RhYmxlT2JzZXJ2YWJsZVwiLCB7IGVudW1lcmFibGU6IHRydWUsIGdldDogZnVuY3Rpb24gKCkgeyByZXR1cm4gQ29ubmVjdGFibGVPYnNlcnZhYmxlXzEuQ29ubmVjdGFibGVPYnNlcnZhYmxlOyB9IH0pO1xudmFyIG9ic2VydmFibGVfMSA9IHJlcXVpcmUoXCIuL2ludGVybmFsL3N5bWJvbC9vYnNlcnZhYmxlXCIpO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwib2JzZXJ2YWJsZVwiLCB7IGVudW1lcmFibGU6IHRydWUsIGdldDogZnVuY3Rpb24gKCkgeyByZXR1cm4gb2JzZXJ2YWJsZV8xLm9ic2VydmFibGU7IH0gfSk7XG52YXIgYW5pbWF0aW9uRnJhbWVzXzEgPSByZXF1aXJlKFwiLi9pbnRlcm5hbC9vYnNlcnZhYmxlL2RvbS9hbmltYXRpb25GcmFtZXNcIik7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJhbmltYXRpb25GcmFtZXNcIiwgeyBlbnVtZXJhYmxlOiB0cnVlLCBnZXQ6IGZ1bmN0aW9uICgpIHsgcmV0dXJuIGFuaW1hdGlvbkZyYW1lc18xLmFuaW1hdGlvbkZyYW1lczsgfSB9KTtcbnZhciBTdWJqZWN0XzEgPSByZXF1aXJlKFwiLi9pbnRlcm5hbC9TdWJqZWN0XCIpO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiU3ViamVjdFwiLCB7IGVudW1lcmFibGU6IHRydWUsIGdldDogZnVuY3Rpb24gKCkgeyByZXR1cm4gU3ViamVjdF8xLlN1YmplY3Q7IH0gfSk7XG52YXIgQmVoYXZpb3JTdWJqZWN0XzEgPSByZXF1aXJlKFwiLi9pbnRlcm5hbC9CZWhhdmlvclN1YmplY3RcIik7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJCZWhhdmlvclN1YmplY3RcIiwgeyBlbnVtZXJhYmxlOiB0cnVlLCBnZXQ6IGZ1bmN0aW9uICgpIHsgcmV0dXJuIEJlaGF2aW9yU3ViamVjdF8xLkJlaGF2aW9yU3ViamVjdDsgfSB9KTtcbnZhciBSZXBsYXlTdWJqZWN0XzEgPSByZXF1aXJlKFwiLi9pbnRlcm5hbC9SZXBsYXlTdWJqZWN0XCIpO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiUmVwbGF5U3ViamVjdFwiLCB7IGVudW1lcmFibGU6IHRydWUsIGdldDogZnVuY3Rpb24gKCkgeyByZXR1cm4gUmVwbGF5U3ViamVjdF8xLlJlcGxheVN1YmplY3Q7IH0gfSk7XG52YXIgQXN5bmNTdWJqZWN0XzEgPSByZXF1aXJlKFwiLi9pbnRlcm5hbC9Bc3luY1N1YmplY3RcIik7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJBc3luY1N1YmplY3RcIiwgeyBlbnVtZXJhYmxlOiB0cnVlLCBnZXQ6IGZ1bmN0aW9uICgpIHsgcmV0dXJuIEFzeW5jU3ViamVjdF8xLkFzeW5jU3ViamVjdDsgfSB9KTtcbnZhciBhc2FwXzEgPSByZXF1aXJlKFwiLi9pbnRlcm5hbC9zY2hlZHVsZXIvYXNhcFwiKTtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcImFzYXBcIiwgeyBlbnVtZXJhYmxlOiB0cnVlLCBnZXQ6IGZ1bmN0aW9uICgpIHsgcmV0dXJuIGFzYXBfMS5hc2FwOyB9IH0pO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiYXNhcFNjaGVkdWxlclwiLCB7IGVudW1lcmFibGU6IHRydWUsIGdldDogZnVuY3Rpb24gKCkgeyByZXR1cm4gYXNhcF8xLmFzYXBTY2hlZHVsZXI7IH0gfSk7XG52YXIgYXN5bmNfMSA9IHJlcXVpcmUoXCIuL2ludGVybmFsL3NjaGVkdWxlci9hc3luY1wiKTtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcImFzeW5jXCIsIHsgZW51bWVyYWJsZTogdHJ1ZSwgZ2V0OiBmdW5jdGlvbiAoKSB7IHJldHVybiBhc3luY18xLmFzeW5jOyB9IH0pO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiYXN5bmNTY2hlZHVsZXJcIiwgeyBlbnVtZXJhYmxlOiB0cnVlLCBnZXQ6IGZ1bmN0aW9uICgpIHsgcmV0dXJuIGFzeW5jXzEuYXN5bmNTY2hlZHVsZXI7IH0gfSk7XG52YXIgcXVldWVfMSA9IHJlcXVpcmUoXCIuL2ludGVybmFsL3NjaGVkdWxlci9xdWV1ZVwiKTtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcInF1ZXVlXCIsIHsgZW51bWVyYWJsZTogdHJ1ZSwgZ2V0OiBmdW5jdGlvbiAoKSB7IHJldHVybiBxdWV1ZV8xLnF1ZXVlOyB9IH0pO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwicXVldWVTY2hlZHVsZXJcIiwgeyBlbnVtZXJhYmxlOiB0cnVlLCBnZXQ6IGZ1bmN0aW9uICgpIHsgcmV0dXJuIHF1ZXVlXzEucXVldWVTY2hlZHVsZXI7IH0gfSk7XG52YXIgYW5pbWF0aW9uRnJhbWVfMSA9IHJlcXVpcmUoXCIuL2ludGVybmFsL3NjaGVkdWxlci9hbmltYXRpb25GcmFtZVwiKTtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcImFuaW1hdGlvbkZyYW1lXCIsIHsgZW51bWVyYWJsZTogdHJ1ZSwgZ2V0OiBmdW5jdGlvbiAoKSB7IHJldHVybiBhbmltYXRpb25GcmFtZV8xLmFuaW1hdGlvbkZyYW1lOyB9IH0pO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiYW5pbWF0aW9uRnJhbWVTY2hlZHVsZXJcIiwgeyBlbnVtZXJhYmxlOiB0cnVlLCBnZXQ6IGZ1bmN0aW9uICgpIHsgcmV0dXJuIGFuaW1hdGlvbkZyYW1lXzEuYW5pbWF0aW9uRnJhbWVTY2hlZHVsZXI7IH0gfSk7XG52YXIgVmlydHVhbFRpbWVTY2hlZHVsZXJfMSA9IHJlcXVpcmUoXCIuL2ludGVybmFsL3NjaGVkdWxlci9WaXJ0dWFsVGltZVNjaGVkdWxlclwiKTtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIlZpcnR1YWxUaW1lU2NoZWR1bGVyXCIsIHsgZW51bWVyYWJsZTogdHJ1ZSwgZ2V0OiBmdW5jdGlvbiAoKSB7IHJldHVybiBWaXJ0dWFsVGltZVNjaGVkdWxlcl8xLlZpcnR1YWxUaW1lU2NoZWR1bGVyOyB9IH0pO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiVmlydHVhbEFjdGlvblwiLCB7IGVudW1lcmFibGU6IHRydWUsIGdldDogZnVuY3Rpb24gKCkgeyByZXR1cm4gVmlydHVhbFRpbWVTY2hlZHVsZXJfMS5WaXJ0dWFsQWN0aW9uOyB9IH0pO1xudmFyIFNjaGVkdWxlcl8xID0gcmVxdWlyZShcIi4vaW50ZXJuYWwvU2NoZWR1bGVyXCIpO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiU2NoZWR1bGVyXCIsIHsgZW51bWVyYWJsZTogdHJ1ZSwgZ2V0OiBmdW5jdGlvbiAoKSB7IHJldHVybiBTY2hlZHVsZXJfMS5TY2hlZHVsZXI7IH0gfSk7XG52YXIgU3Vic2NyaXB0aW9uXzEgPSByZXF1aXJlKFwiLi9pbnRlcm5hbC9TdWJzY3JpcHRpb25cIik7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJTdWJzY3JpcHRpb25cIiwgeyBlbnVtZXJhYmxlOiB0cnVlLCBnZXQ6IGZ1bmN0aW9uICgpIHsgcmV0dXJuIFN1YnNjcmlwdGlvbl8xLlN1YnNjcmlwdGlvbjsgfSB9KTtcbnZhciBTdWJzY3JpYmVyXzEgPSByZXF1aXJlKFwiLi9pbnRlcm5hbC9TdWJzY3JpYmVyXCIpO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiU3Vic2NyaWJlclwiLCB7IGVudW1lcmFibGU6IHRydWUsIGdldDogZnVuY3Rpb24gKCkgeyByZXR1cm4gU3Vic2NyaWJlcl8xLlN1YnNjcmliZXI7IH0gfSk7XG52YXIgTm90aWZpY2F0aW9uXzEgPSByZXF1aXJlKFwiLi9pbnRlcm5hbC9Ob3RpZmljYXRpb25cIik7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJOb3RpZmljYXRpb25cIiwgeyBlbnVtZXJhYmxlOiB0cnVlLCBnZXQ6IGZ1bmN0aW9uICgpIHsgcmV0dXJuIE5vdGlmaWNhdGlvbl8xLk5vdGlmaWNhdGlvbjsgfSB9KTtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIk5vdGlmaWNhdGlvbktpbmRcIiwgeyBlbnVtZXJhYmxlOiB0cnVlLCBnZXQ6IGZ1bmN0aW9uICgpIHsgcmV0dXJuIE5vdGlmaWNhdGlvbl8xLk5vdGlmaWNhdGlvbktpbmQ7IH0gfSk7XG52YXIgcGlwZV8xID0gcmVxdWlyZShcIi4vaW50ZXJuYWwvdXRpbC9waXBlXCIpO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwicGlwZVwiLCB7IGVudW1lcmFibGU6IHRydWUsIGdldDogZnVuY3Rpb24gKCkgeyByZXR1cm4gcGlwZV8xLnBpcGU7IH0gfSk7XG52YXIgbm9vcF8xID0gcmVxdWlyZShcIi4vaW50ZXJuYWwvdXRpbC9ub29wXCIpO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwibm9vcFwiLCB7IGVudW1lcmFibGU6IHRydWUsIGdldDogZnVuY3Rpb24gKCkgeyByZXR1cm4gbm9vcF8xLm5vb3A7IH0gfSk7XG52YXIgaWRlbnRpdHlfMSA9IHJlcXVpcmUoXCIuL2ludGVybmFsL3V0aWwvaWRlbnRpdHlcIik7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJpZGVudGl0eVwiLCB7IGVudW1lcmFibGU6IHRydWUsIGdldDogZnVuY3Rpb24gKCkgeyByZXR1cm4gaWRlbnRpdHlfMS5pZGVudGl0eTsgfSB9KTtcbnZhciBpc09ic2VydmFibGVfMSA9IHJlcXVpcmUoXCIuL2ludGVybmFsL3V0aWwvaXNPYnNlcnZhYmxlXCIpO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiaXNPYnNlcnZhYmxlXCIsIHsgZW51bWVyYWJsZTogdHJ1ZSwgZ2V0OiBmdW5jdGlvbiAoKSB7IHJldHVybiBpc09ic2VydmFibGVfMS5pc09ic2VydmFibGU7IH0gfSk7XG52YXIgbGFzdFZhbHVlRnJvbV8xID0gcmVxdWlyZShcIi4vaW50ZXJuYWwvbGFzdFZhbHVlRnJvbVwiKTtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcImxhc3RWYWx1ZUZyb21cIiwgeyBlbnVtZXJhYmxlOiB0cnVlLCBnZXQ6IGZ1bmN0aW9uICgpIHsgcmV0dXJuIGxhc3RWYWx1ZUZyb21fMS5sYXN0VmFsdWVGcm9tOyB9IH0pO1xudmFyIGZpcnN0VmFsdWVGcm9tXzEgPSByZXF1aXJlKFwiLi9pbnRlcm5hbC9maXJzdFZhbHVlRnJvbVwiKTtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcImZpcnN0VmFsdWVGcm9tXCIsIHsgZW51bWVyYWJsZTogdHJ1ZSwgZ2V0OiBmdW5jdGlvbiAoKSB7IHJldHVybiBmaXJzdFZhbHVlRnJvbV8xLmZpcnN0VmFsdWVGcm9tOyB9IH0pO1xudmFyIEFyZ3VtZW50T3V0T2ZSYW5nZUVycm9yXzEgPSByZXF1aXJlKFwiLi9pbnRlcm5hbC91dGlsL0FyZ3VtZW50T3V0T2ZSYW5nZUVycm9yXCIpO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiQXJndW1lbnRPdXRPZlJhbmdlRXJyb3JcIiwgeyBlbnVtZXJhYmxlOiB0cnVlLCBnZXQ6IGZ1bmN0aW9uICgpIHsgcmV0dXJuIEFyZ3VtZW50T3V0T2ZSYW5nZUVycm9yXzEuQXJndW1lbnRPdXRPZlJhbmdlRXJyb3I7IH0gfSk7XG52YXIgRW1wdHlFcnJvcl8xID0gcmVxdWlyZShcIi4vaW50ZXJuYWwvdXRpbC9FbXB0eUVycm9yXCIpO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiRW1wdHlFcnJvclwiLCB7IGVudW1lcmFibGU6IHRydWUsIGdldDogZnVuY3Rpb24gKCkgeyByZXR1cm4gRW1wdHlFcnJvcl8xLkVtcHR5RXJyb3I7IH0gfSk7XG52YXIgTm90Rm91bmRFcnJvcl8xID0gcmVxdWlyZShcIi4vaW50ZXJuYWwvdXRpbC9Ob3RGb3VuZEVycm9yXCIpO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiTm90Rm91bmRFcnJvclwiLCB7IGVudW1lcmFibGU6IHRydWUsIGdldDogZnVuY3Rpb24gKCkgeyByZXR1cm4gTm90Rm91bmRFcnJvcl8xLk5vdEZvdW5kRXJyb3I7IH0gfSk7XG52YXIgT2JqZWN0VW5zdWJzY3JpYmVkRXJyb3JfMSA9IHJlcXVpcmUoXCIuL2ludGVybmFsL3V0aWwvT2JqZWN0VW5zdWJzY3JpYmVkRXJyb3JcIik7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJPYmplY3RVbnN1YnNjcmliZWRFcnJvclwiLCB7IGVudW1lcmFibGU6IHRydWUsIGdldDogZnVuY3Rpb24gKCkgeyByZXR1cm4gT2JqZWN0VW5zdWJzY3JpYmVkRXJyb3JfMS5PYmplY3RVbnN1YnNjcmliZWRFcnJvcjsgfSB9KTtcbnZhciBTZXF1ZW5jZUVycm9yXzEgPSByZXF1aXJlKFwiLi9pbnRlcm5hbC91dGlsL1NlcXVlbmNlRXJyb3JcIik7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJTZXF1ZW5jZUVycm9yXCIsIHsgZW51bWVyYWJsZTogdHJ1ZSwgZ2V0OiBmdW5jdGlvbiAoKSB7IHJldHVybiBTZXF1ZW5jZUVycm9yXzEuU2VxdWVuY2VFcnJvcjsgfSB9KTtcbnZhciB0aW1lb3V0XzEgPSByZXF1aXJlKFwiLi9pbnRlcm5hbC9vcGVyYXRvcnMvdGltZW91dFwiKTtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIlRpbWVvdXRFcnJvclwiLCB7IGVudW1lcmFibGU6IHRydWUsIGdldDogZnVuY3Rpb24gKCkgeyByZXR1cm4gdGltZW91dF8xLlRpbWVvdXRFcnJvcjsgfSB9KTtcbnZhciBVbnN1YnNjcmlwdGlvbkVycm9yXzEgPSByZXF1aXJlKFwiLi9pbnRlcm5hbC91dGlsL1Vuc3Vic2NyaXB0aW9uRXJyb3JcIik7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJVbnN1YnNjcmlwdGlvbkVycm9yXCIsIHsgZW51bWVyYWJsZTogdHJ1ZSwgZ2V0OiBmdW5jdGlvbiAoKSB7IHJldHVybiBVbnN1YnNjcmlwdGlvbkVycm9yXzEuVW5zdWJzY3JpcHRpb25FcnJvcjsgfSB9KTtcbnZhciBiaW5kQ2FsbGJhY2tfMSA9IHJlcXVpcmUoXCIuL2ludGVybmFsL29ic2VydmFibGUvYmluZENhbGxiYWNrXCIpO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiYmluZENhbGxiYWNrXCIsIHsgZW51bWVyYWJsZTogdHJ1ZSwgZ2V0OiBmdW5jdGlvbiAoKSB7IHJldHVybiBiaW5kQ2FsbGJhY2tfMS5iaW5kQ2FsbGJhY2s7IH0gfSk7XG52YXIgYmluZE5vZGVDYWxsYmFja18xID0gcmVxdWlyZShcIi4vaW50ZXJuYWwvb2JzZXJ2YWJsZS9iaW5kTm9kZUNhbGxiYWNrXCIpO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiYmluZE5vZGVDYWxsYmFja1wiLCB7IGVudW1lcmFibGU6IHRydWUsIGdldDogZnVuY3Rpb24gKCkgeyByZXR1cm4gYmluZE5vZGVDYWxsYmFja18xLmJpbmROb2RlQ2FsbGJhY2s7IH0gfSk7XG52YXIgY29tYmluZUxhdGVzdF8xID0gcmVxdWlyZShcIi4vaW50ZXJuYWwvb2JzZXJ2YWJsZS9jb21iaW5lTGF0ZXN0XCIpO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiY29tYmluZUxhdGVzdFwiLCB7IGVudW1lcmFibGU6IHRydWUsIGdldDogZnVuY3Rpb24gKCkgeyByZXR1cm4gY29tYmluZUxhdGVzdF8xLmNvbWJpbmVMYXRlc3Q7IH0gfSk7XG52YXIgY29uY2F0XzEgPSByZXF1aXJlKFwiLi9pbnRlcm5hbC9vYnNlcnZhYmxlL2NvbmNhdFwiKTtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcImNvbmNhdFwiLCB7IGVudW1lcmFibGU6IHRydWUsIGdldDogZnVuY3Rpb24gKCkgeyByZXR1cm4gY29uY2F0XzEuY29uY2F0OyB9IH0pO1xudmFyIGNvbm5lY3RhYmxlXzEgPSByZXF1aXJlKFwiLi9pbnRlcm5hbC9vYnNlcnZhYmxlL2Nvbm5lY3RhYmxlXCIpO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiY29ubmVjdGFibGVcIiwgeyBlbnVtZXJhYmxlOiB0cnVlLCBnZXQ6IGZ1bmN0aW9uICgpIHsgcmV0dXJuIGNvbm5lY3RhYmxlXzEuY29ubmVjdGFibGU7IH0gfSk7XG52YXIgZGVmZXJfMSA9IHJlcXVpcmUoXCIuL2ludGVybmFsL29ic2VydmFibGUvZGVmZXJcIik7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJkZWZlclwiLCB7IGVudW1lcmFibGU6IHRydWUsIGdldDogZnVuY3Rpb24gKCkgeyByZXR1cm4gZGVmZXJfMS5kZWZlcjsgfSB9KTtcbnZhciBlbXB0eV8xID0gcmVxdWlyZShcIi4vaW50ZXJuYWwvb2JzZXJ2YWJsZS9lbXB0eVwiKTtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcImVtcHR5XCIsIHsgZW51bWVyYWJsZTogdHJ1ZSwgZ2V0OiBmdW5jdGlvbiAoKSB7IHJldHVybiBlbXB0eV8xLmVtcHR5OyB9IH0pO1xudmFyIGZvcmtKb2luXzEgPSByZXF1aXJlKFwiLi9pbnRlcm5hbC9vYnNlcnZhYmxlL2ZvcmtKb2luXCIpO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiZm9ya0pvaW5cIiwgeyBlbnVtZXJhYmxlOiB0cnVlLCBnZXQ6IGZ1bmN0aW9uICgpIHsgcmV0dXJuIGZvcmtKb2luXzEuZm9ya0pvaW47IH0gfSk7XG52YXIgZnJvbV8xID0gcmVxdWlyZShcIi4vaW50ZXJuYWwvb2JzZXJ2YWJsZS9mcm9tXCIpO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiZnJvbVwiLCB7IGVudW1lcmFibGU6IHRydWUsIGdldDogZnVuY3Rpb24gKCkgeyByZXR1cm4gZnJvbV8xLmZyb207IH0gfSk7XG52YXIgZnJvbUV2ZW50XzEgPSByZXF1aXJlKFwiLi9pbnRlcm5hbC9vYnNlcnZhYmxlL2Zyb21FdmVudFwiKTtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcImZyb21FdmVudFwiLCB7IGVudW1lcmFibGU6IHRydWUsIGdldDogZnVuY3Rpb24gKCkgeyByZXR1cm4gZnJvbUV2ZW50XzEuZnJvbUV2ZW50OyB9IH0pO1xudmFyIGZyb21FdmVudFBhdHRlcm5fMSA9IHJlcXVpcmUoXCIuL2ludGVybmFsL29ic2VydmFibGUvZnJvbUV2ZW50UGF0dGVyblwiKTtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcImZyb21FdmVudFBhdHRlcm5cIiwgeyBlbnVtZXJhYmxlOiB0cnVlLCBnZXQ6IGZ1bmN0aW9uICgpIHsgcmV0dXJuIGZyb21FdmVudFBhdHRlcm5fMS5mcm9tRXZlbnRQYXR0ZXJuOyB9IH0pO1xudmFyIGdlbmVyYXRlXzEgPSByZXF1aXJlKFwiLi9pbnRlcm5hbC9vYnNlcnZhYmxlL2dlbmVyYXRlXCIpO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiZ2VuZXJhdGVcIiwgeyBlbnVtZXJhYmxlOiB0cnVlLCBnZXQ6IGZ1bmN0aW9uICgpIHsgcmV0dXJuIGdlbmVyYXRlXzEuZ2VuZXJhdGU7IH0gfSk7XG52YXIgaWlmXzEgPSByZXF1aXJlKFwiLi9pbnRlcm5hbC9vYnNlcnZhYmxlL2lpZlwiKTtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcImlpZlwiLCB7IGVudW1lcmFibGU6IHRydWUsIGdldDogZnVuY3Rpb24gKCkgeyByZXR1cm4gaWlmXzEuaWlmOyB9IH0pO1xudmFyIGludGVydmFsXzEgPSByZXF1aXJlKFwiLi9pbnRlcm5hbC9vYnNlcnZhYmxlL2ludGVydmFsXCIpO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiaW50ZXJ2YWxcIiwgeyBlbnVtZXJhYmxlOiB0cnVlLCBnZXQ6IGZ1bmN0aW9uICgpIHsgcmV0dXJuIGludGVydmFsXzEuaW50ZXJ2YWw7IH0gfSk7XG52YXIgbWVyZ2VfMSA9IHJlcXVpcmUoXCIuL2ludGVybmFsL29ic2VydmFibGUvbWVyZ2VcIik7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJtZXJnZVwiLCB7IGVudW1lcmFibGU6IHRydWUsIGdldDogZnVuY3Rpb24gKCkgeyByZXR1cm4gbWVyZ2VfMS5tZXJnZTsgfSB9KTtcbnZhciBuZXZlcl8xID0gcmVxdWlyZShcIi4vaW50ZXJuYWwvb2JzZXJ2YWJsZS9uZXZlclwiKTtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIm5ldmVyXCIsIHsgZW51bWVyYWJsZTogdHJ1ZSwgZ2V0OiBmdW5jdGlvbiAoKSB7IHJldHVybiBuZXZlcl8xLm5ldmVyOyB9IH0pO1xudmFyIG9mXzEgPSByZXF1aXJlKFwiLi9pbnRlcm5hbC9vYnNlcnZhYmxlL29mXCIpO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwib2ZcIiwgeyBlbnVtZXJhYmxlOiB0cnVlLCBnZXQ6IGZ1bmN0aW9uICgpIHsgcmV0dXJuIG9mXzEub2Y7IH0gfSk7XG52YXIgb25FcnJvclJlc3VtZU5leHRfMSA9IHJlcXVpcmUoXCIuL2ludGVybmFsL29ic2VydmFibGUvb25FcnJvclJlc3VtZU5leHRcIik7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJvbkVycm9yUmVzdW1lTmV4dFwiLCB7IGVudW1lcmFibGU6IHRydWUsIGdldDogZnVuY3Rpb24gKCkgeyByZXR1cm4gb25FcnJvclJlc3VtZU5leHRfMS5vbkVycm9yUmVzdW1lTmV4dDsgfSB9KTtcbnZhciBwYWlyc18xID0gcmVxdWlyZShcIi4vaW50ZXJuYWwvb2JzZXJ2YWJsZS9wYWlyc1wiKTtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcInBhaXJzXCIsIHsgZW51bWVyYWJsZTogdHJ1ZSwgZ2V0OiBmdW5jdGlvbiAoKSB7IHJldHVybiBwYWlyc18xLnBhaXJzOyB9IH0pO1xudmFyIHBhcnRpdGlvbl8xID0gcmVxdWlyZShcIi4vaW50ZXJuYWwvb2JzZXJ2YWJsZS9wYXJ0aXRpb25cIik7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJwYXJ0aXRpb25cIiwgeyBlbnVtZXJhYmxlOiB0cnVlLCBnZXQ6IGZ1bmN0aW9uICgpIHsgcmV0dXJuIHBhcnRpdGlvbl8xLnBhcnRpdGlvbjsgfSB9KTtcbnZhciByYWNlXzEgPSByZXF1aXJlKFwiLi9pbnRlcm5hbC9vYnNlcnZhYmxlL3JhY2VcIik7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJyYWNlXCIsIHsgZW51bWVyYWJsZTogdHJ1ZSwgZ2V0OiBmdW5jdGlvbiAoKSB7IHJldHVybiByYWNlXzEucmFjZTsgfSB9KTtcbnZhciByYW5nZV8xID0gcmVxdWlyZShcIi4vaW50ZXJuYWwvb2JzZXJ2YWJsZS9yYW5nZVwiKTtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcInJhbmdlXCIsIHsgZW51bWVyYWJsZTogdHJ1ZSwgZ2V0OiBmdW5jdGlvbiAoKSB7IHJldHVybiByYW5nZV8xLnJhbmdlOyB9IH0pO1xudmFyIHRocm93RXJyb3JfMSA9IHJlcXVpcmUoXCIuL2ludGVybmFsL29ic2VydmFibGUvdGhyb3dFcnJvclwiKTtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcInRocm93RXJyb3JcIiwgeyBlbnVtZXJhYmxlOiB0cnVlLCBnZXQ6IGZ1bmN0aW9uICgpIHsgcmV0dXJuIHRocm93RXJyb3JfMS50aHJvd0Vycm9yOyB9IH0pO1xudmFyIHRpbWVyXzEgPSByZXF1aXJlKFwiLi9pbnRlcm5hbC9vYnNlcnZhYmxlL3RpbWVyXCIpO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwidGltZXJcIiwgeyBlbnVtZXJhYmxlOiB0cnVlLCBnZXQ6IGZ1bmN0aW9uICgpIHsgcmV0dXJuIHRpbWVyXzEudGltZXI7IH0gfSk7XG52YXIgdXNpbmdfMSA9IHJlcXVpcmUoXCIuL2ludGVybmFsL29ic2VydmFibGUvdXNpbmdcIik7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJ1c2luZ1wiLCB7IGVudW1lcmFibGU6IHRydWUsIGdldDogZnVuY3Rpb24gKCkgeyByZXR1cm4gdXNpbmdfMS51c2luZzsgfSB9KTtcbnZhciB6aXBfMSA9IHJlcXVpcmUoXCIuL2ludGVybmFsL29ic2VydmFibGUvemlwXCIpO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiemlwXCIsIHsgZW51bWVyYWJsZTogdHJ1ZSwgZ2V0OiBmdW5jdGlvbiAoKSB7IHJldHVybiB6aXBfMS56aXA7IH0gfSk7XG52YXIgc2NoZWR1bGVkXzEgPSByZXF1aXJlKFwiLi9pbnRlcm5hbC9zY2hlZHVsZWQvc2NoZWR1bGVkXCIpO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwic2NoZWR1bGVkXCIsIHsgZW51bWVyYWJsZTogdHJ1ZSwgZ2V0OiBmdW5jdGlvbiAoKSB7IHJldHVybiBzY2hlZHVsZWRfMS5zY2hlZHVsZWQ7IH0gfSk7XG52YXIgZW1wdHlfMiA9IHJlcXVpcmUoXCIuL2ludGVybmFsL29ic2VydmFibGUvZW1wdHlcIik7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJFTVBUWVwiLCB7IGVudW1lcmFibGU6IHRydWUsIGdldDogZnVuY3Rpb24gKCkgeyByZXR1cm4gZW1wdHlfMi5FTVBUWTsgfSB9KTtcbnZhciBuZXZlcl8yID0gcmVxdWlyZShcIi4vaW50ZXJuYWwvb2JzZXJ2YWJsZS9uZXZlclwiKTtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIk5FVkVSXCIsIHsgZW51bWVyYWJsZTogdHJ1ZSwgZ2V0OiBmdW5jdGlvbiAoKSB7IHJldHVybiBuZXZlcl8yLk5FVkVSOyB9IH0pO1xuX19leHBvcnRTdGFyKHJlcXVpcmUoXCIuL2ludGVybmFsL3R5cGVzXCIpLCBleHBvcnRzKTtcbnZhciBjb25maWdfMSA9IHJlcXVpcmUoXCIuL2ludGVybmFsL2NvbmZpZ1wiKTtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcImNvbmZpZ1wiLCB7IGVudW1lcmFibGU6IHRydWUsIGdldDogZnVuY3Rpb24gKCkgeyByZXR1cm4gY29uZmlnXzEuY29uZmlnOyB9IH0pO1xudmFyIGF1ZGl0XzEgPSByZXF1aXJlKFwiLi9pbnRlcm5hbC9vcGVyYXRvcnMvYXVkaXRcIik7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJhdWRpdFwiLCB7IGVudW1lcmFibGU6IHRydWUsIGdldDogZnVuY3Rpb24gKCkgeyByZXR1cm4gYXVkaXRfMS5hdWRpdDsgfSB9KTtcbnZhciBhdWRpdFRpbWVfMSA9IHJlcXVpcmUoXCIuL2ludGVybmFsL29wZXJhdG9ycy9hdWRpdFRpbWVcIik7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJhdWRpdFRpbWVcIiwgeyBlbnVtZXJhYmxlOiB0cnVlLCBnZXQ6IGZ1bmN0aW9uICgpIHsgcmV0dXJuIGF1ZGl0VGltZV8xLmF1ZGl0VGltZTsgfSB9KTtcbnZhciBidWZmZXJfMSA9IHJlcXVpcmUoXCIuL2ludGVybmFsL29wZXJhdG9ycy9idWZmZXJcIik7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJidWZmZXJcIiwgeyBlbnVtZXJhYmxlOiB0cnVlLCBnZXQ6IGZ1bmN0aW9uICgpIHsgcmV0dXJuIGJ1ZmZlcl8xLmJ1ZmZlcjsgfSB9KTtcbnZhciBidWZmZXJDb3VudF8xID0gcmVxdWlyZShcIi4vaW50ZXJuYWwvb3BlcmF0b3JzL2J1ZmZlckNvdW50XCIpO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiYnVmZmVyQ291bnRcIiwgeyBlbnVtZXJhYmxlOiB0cnVlLCBnZXQ6IGZ1bmN0aW9uICgpIHsgcmV0dXJuIGJ1ZmZlckNvdW50XzEuYnVmZmVyQ291bnQ7IH0gfSk7XG52YXIgYnVmZmVyVGltZV8xID0gcmVxdWlyZShcIi4vaW50ZXJuYWwvb3BlcmF0b3JzL2J1ZmZlclRpbWVcIik7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJidWZmZXJUaW1lXCIsIHsgZW51bWVyYWJsZTogdHJ1ZSwgZ2V0OiBmdW5jdGlvbiAoKSB7IHJldHVybiBidWZmZXJUaW1lXzEuYnVmZmVyVGltZTsgfSB9KTtcbnZhciBidWZmZXJUb2dnbGVfMSA9IHJlcXVpcmUoXCIuL2ludGVybmFsL29wZXJhdG9ycy9idWZmZXJUb2dnbGVcIik7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJidWZmZXJUb2dnbGVcIiwgeyBlbnVtZXJhYmxlOiB0cnVlLCBnZXQ6IGZ1bmN0aW9uICgpIHsgcmV0dXJuIGJ1ZmZlclRvZ2dsZV8xLmJ1ZmZlclRvZ2dsZTsgfSB9KTtcbnZhciBidWZmZXJXaGVuXzEgPSByZXF1aXJlKFwiLi9pbnRlcm5hbC9vcGVyYXRvcnMvYnVmZmVyV2hlblwiKTtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcImJ1ZmZlcldoZW5cIiwgeyBlbnVtZXJhYmxlOiB0cnVlLCBnZXQ6IGZ1bmN0aW9uICgpIHsgcmV0dXJuIGJ1ZmZlcldoZW5fMS5idWZmZXJXaGVuOyB9IH0pO1xudmFyIGNhdGNoRXJyb3JfMSA9IHJlcXVpcmUoXCIuL2ludGVybmFsL29wZXJhdG9ycy9jYXRjaEVycm9yXCIpO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiY2F0Y2hFcnJvclwiLCB7IGVudW1lcmFibGU6IHRydWUsIGdldDogZnVuY3Rpb24gKCkgeyByZXR1cm4gY2F0Y2hFcnJvcl8xLmNhdGNoRXJyb3I7IH0gfSk7XG52YXIgY29tYmluZUFsbF8xID0gcmVxdWlyZShcIi4vaW50ZXJuYWwvb3BlcmF0b3JzL2NvbWJpbmVBbGxcIik7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJjb21iaW5lQWxsXCIsIHsgZW51bWVyYWJsZTogdHJ1ZSwgZ2V0OiBmdW5jdGlvbiAoKSB7IHJldHVybiBjb21iaW5lQWxsXzEuY29tYmluZUFsbDsgfSB9KTtcbnZhciBjb21iaW5lTGF0ZXN0QWxsXzEgPSByZXF1aXJlKFwiLi9pbnRlcm5hbC9vcGVyYXRvcnMvY29tYmluZUxhdGVzdEFsbFwiKTtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcImNvbWJpbmVMYXRlc3RBbGxcIiwgeyBlbnVtZXJhYmxlOiB0cnVlLCBnZXQ6IGZ1bmN0aW9uICgpIHsgcmV0dXJuIGNvbWJpbmVMYXRlc3RBbGxfMS5jb21iaW5lTGF0ZXN0QWxsOyB9IH0pO1xudmFyIGNvbWJpbmVMYXRlc3RXaXRoXzEgPSByZXF1aXJlKFwiLi9pbnRlcm5hbC9vcGVyYXRvcnMvY29tYmluZUxhdGVzdFdpdGhcIik7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJjb21iaW5lTGF0ZXN0V2l0aFwiLCB7IGVudW1lcmFibGU6IHRydWUsIGdldDogZnVuY3Rpb24gKCkgeyByZXR1cm4gY29tYmluZUxhdGVzdFdpdGhfMS5jb21iaW5lTGF0ZXN0V2l0aDsgfSB9KTtcbnZhciBjb25jYXRBbGxfMSA9IHJlcXVpcmUoXCIuL2ludGVybmFsL29wZXJhdG9ycy9jb25jYXRBbGxcIik7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJjb25jYXRBbGxcIiwgeyBlbnVtZXJhYmxlOiB0cnVlLCBnZXQ6IGZ1bmN0aW9uICgpIHsgcmV0dXJuIGNvbmNhdEFsbF8xLmNvbmNhdEFsbDsgfSB9KTtcbnZhciBjb25jYXRNYXBfMSA9IHJlcXVpcmUoXCIuL2ludGVybmFsL29wZXJhdG9ycy9jb25jYXRNYXBcIik7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJjb25jYXRNYXBcIiwgeyBlbnVtZXJhYmxlOiB0cnVlLCBnZXQ6IGZ1bmN0aW9uICgpIHsgcmV0dXJuIGNvbmNhdE1hcF8xLmNvbmNhdE1hcDsgfSB9KTtcbnZhciBjb25jYXRNYXBUb18xID0gcmVxdWlyZShcIi4vaW50ZXJuYWwvb3BlcmF0b3JzL2NvbmNhdE1hcFRvXCIpO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiY29uY2F0TWFwVG9cIiwgeyBlbnVtZXJhYmxlOiB0cnVlLCBnZXQ6IGZ1bmN0aW9uICgpIHsgcmV0dXJuIGNvbmNhdE1hcFRvXzEuY29uY2F0TWFwVG87IH0gfSk7XG52YXIgY29uY2F0V2l0aF8xID0gcmVxdWlyZShcIi4vaW50ZXJuYWwvb3BlcmF0b3JzL2NvbmNhdFdpdGhcIik7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJjb25jYXRXaXRoXCIsIHsgZW51bWVyYWJsZTogdHJ1ZSwgZ2V0OiBmdW5jdGlvbiAoKSB7IHJldHVybiBjb25jYXRXaXRoXzEuY29uY2F0V2l0aDsgfSB9KTtcbnZhciBjb25uZWN0XzEgPSByZXF1aXJlKFwiLi9pbnRlcm5hbC9vcGVyYXRvcnMvY29ubmVjdFwiKTtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcImNvbm5lY3RcIiwgeyBlbnVtZXJhYmxlOiB0cnVlLCBnZXQ6IGZ1bmN0aW9uICgpIHsgcmV0dXJuIGNvbm5lY3RfMS5jb25uZWN0OyB9IH0pO1xudmFyIGNvdW50XzEgPSByZXF1aXJlKFwiLi9pbnRlcm5hbC9vcGVyYXRvcnMvY291bnRcIik7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJjb3VudFwiLCB7IGVudW1lcmFibGU6IHRydWUsIGdldDogZnVuY3Rpb24gKCkgeyByZXR1cm4gY291bnRfMS5jb3VudDsgfSB9KTtcbnZhciBkZWJvdW5jZV8xID0gcmVxdWlyZShcIi4vaW50ZXJuYWwvb3BlcmF0b3JzL2RlYm91bmNlXCIpO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiZGVib3VuY2VcIiwgeyBlbnVtZXJhYmxlOiB0cnVlLCBnZXQ6IGZ1bmN0aW9uICgpIHsgcmV0dXJuIGRlYm91bmNlXzEuZGVib3VuY2U7IH0gfSk7XG52YXIgZGVib3VuY2VUaW1lXzEgPSByZXF1aXJlKFwiLi9pbnRlcm5hbC9vcGVyYXRvcnMvZGVib3VuY2VUaW1lXCIpO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiZGVib3VuY2VUaW1lXCIsIHsgZW51bWVyYWJsZTogdHJ1ZSwgZ2V0OiBmdW5jdGlvbiAoKSB7IHJldHVybiBkZWJvdW5jZVRpbWVfMS5kZWJvdW5jZVRpbWU7IH0gfSk7XG52YXIgZGVmYXVsdElmRW1wdHlfMSA9IHJlcXVpcmUoXCIuL2ludGVybmFsL29wZXJhdG9ycy9kZWZhdWx0SWZFbXB0eVwiKTtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcImRlZmF1bHRJZkVtcHR5XCIsIHsgZW51bWVyYWJsZTogdHJ1ZSwgZ2V0OiBmdW5jdGlvbiAoKSB7IHJldHVybiBkZWZhdWx0SWZFbXB0eV8xLmRlZmF1bHRJZkVtcHR5OyB9IH0pO1xudmFyIGRlbGF5XzEgPSByZXF1aXJlKFwiLi9pbnRlcm5hbC9vcGVyYXRvcnMvZGVsYXlcIik7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJkZWxheVwiLCB7IGVudW1lcmFibGU6IHRydWUsIGdldDogZnVuY3Rpb24gKCkgeyByZXR1cm4gZGVsYXlfMS5kZWxheTsgfSB9KTtcbnZhciBkZWxheVdoZW5fMSA9IHJlcXVpcmUoXCIuL2ludGVybmFsL29wZXJhdG9ycy9kZWxheVdoZW5cIik7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJkZWxheVdoZW5cIiwgeyBlbnVtZXJhYmxlOiB0cnVlLCBnZXQ6IGZ1bmN0aW9uICgpIHsgcmV0dXJuIGRlbGF5V2hlbl8xLmRlbGF5V2hlbjsgfSB9KTtcbnZhciBkZW1hdGVyaWFsaXplXzEgPSByZXF1aXJlKFwiLi9pbnRlcm5hbC9vcGVyYXRvcnMvZGVtYXRlcmlhbGl6ZVwiKTtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcImRlbWF0ZXJpYWxpemVcIiwgeyBlbnVtZXJhYmxlOiB0cnVlLCBnZXQ6IGZ1bmN0aW9uICgpIHsgcmV0dXJuIGRlbWF0ZXJpYWxpemVfMS5kZW1hdGVyaWFsaXplOyB9IH0pO1xudmFyIGRpc3RpbmN0XzEgPSByZXF1aXJlKFwiLi9pbnRlcm5hbC9vcGVyYXRvcnMvZGlzdGluY3RcIik7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJkaXN0aW5jdFwiLCB7IGVudW1lcmFibGU6IHRydWUsIGdldDogZnVuY3Rpb24gKCkgeyByZXR1cm4gZGlzdGluY3RfMS5kaXN0aW5jdDsgfSB9KTtcbnZhciBkaXN0aW5jdFVudGlsQ2hhbmdlZF8xID0gcmVxdWlyZShcIi4vaW50ZXJuYWwvb3BlcmF0b3JzL2Rpc3RpbmN0VW50aWxDaGFuZ2VkXCIpO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiZGlzdGluY3RVbnRpbENoYW5nZWRcIiwgeyBlbnVtZXJhYmxlOiB0cnVlLCBnZXQ6IGZ1bmN0aW9uICgpIHsgcmV0dXJuIGRpc3RpbmN0VW50aWxDaGFuZ2VkXzEuZGlzdGluY3RVbnRpbENoYW5nZWQ7IH0gfSk7XG52YXIgZGlzdGluY3RVbnRpbEtleUNoYW5nZWRfMSA9IHJlcXVpcmUoXCIuL2ludGVybmFsL29wZXJhdG9ycy9kaXN0aW5jdFVudGlsS2V5Q2hhbmdlZFwiKTtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcImRpc3RpbmN0VW50aWxLZXlDaGFuZ2VkXCIsIHsgZW51bWVyYWJsZTogdHJ1ZSwgZ2V0OiBmdW5jdGlvbiAoKSB7IHJldHVybiBkaXN0aW5jdFVudGlsS2V5Q2hhbmdlZF8xLmRpc3RpbmN0VW50aWxLZXlDaGFuZ2VkOyB9IH0pO1xudmFyIGVsZW1lbnRBdF8xID0gcmVxdWlyZShcIi4vaW50ZXJuYWwvb3BlcmF0b3JzL2VsZW1lbnRBdFwiKTtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcImVsZW1lbnRBdFwiLCB7IGVudW1lcmFibGU6IHRydWUsIGdldDogZnVuY3Rpb24gKCkgeyByZXR1cm4gZWxlbWVudEF0XzEuZWxlbWVudEF0OyB9IH0pO1xudmFyIGVuZFdpdGhfMSA9IHJlcXVpcmUoXCIuL2ludGVybmFsL29wZXJhdG9ycy9lbmRXaXRoXCIpO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiZW5kV2l0aFwiLCB7IGVudW1lcmFibGU6IHRydWUsIGdldDogZnVuY3Rpb24gKCkgeyByZXR1cm4gZW5kV2l0aF8xLmVuZFdpdGg7IH0gfSk7XG52YXIgZXZlcnlfMSA9IHJlcXVpcmUoXCIuL2ludGVybmFsL29wZXJhdG9ycy9ldmVyeVwiKTtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcImV2ZXJ5XCIsIHsgZW51bWVyYWJsZTogdHJ1ZSwgZ2V0OiBmdW5jdGlvbiAoKSB7IHJldHVybiBldmVyeV8xLmV2ZXJ5OyB9IH0pO1xudmFyIGV4aGF1c3RfMSA9IHJlcXVpcmUoXCIuL2ludGVybmFsL29wZXJhdG9ycy9leGhhdXN0XCIpO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiZXhoYXVzdFwiLCB7IGVudW1lcmFibGU6IHRydWUsIGdldDogZnVuY3Rpb24gKCkgeyByZXR1cm4gZXhoYXVzdF8xLmV4aGF1c3Q7IH0gfSk7XG52YXIgZXhoYXVzdEFsbF8xID0gcmVxdWlyZShcIi4vaW50ZXJuYWwvb3BlcmF0b3JzL2V4aGF1c3RBbGxcIik7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJleGhhdXN0QWxsXCIsIHsgZW51bWVyYWJsZTogdHJ1ZSwgZ2V0OiBmdW5jdGlvbiAoKSB7IHJldHVybiBleGhhdXN0QWxsXzEuZXhoYXVzdEFsbDsgfSB9KTtcbnZhciBleGhhdXN0TWFwXzEgPSByZXF1aXJlKFwiLi9pbnRlcm5hbC9vcGVyYXRvcnMvZXhoYXVzdE1hcFwiKTtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcImV4aGF1c3RNYXBcIiwgeyBlbnVtZXJhYmxlOiB0cnVlLCBnZXQ6IGZ1bmN0aW9uICgpIHsgcmV0dXJuIGV4aGF1c3RNYXBfMS5leGhhdXN0TWFwOyB9IH0pO1xudmFyIGV4cGFuZF8xID0gcmVxdWlyZShcIi4vaW50ZXJuYWwvb3BlcmF0b3JzL2V4cGFuZFwiKTtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcImV4cGFuZFwiLCB7IGVudW1lcmFibGU6IHRydWUsIGdldDogZnVuY3Rpb24gKCkgeyByZXR1cm4gZXhwYW5kXzEuZXhwYW5kOyB9IH0pO1xudmFyIGZpbHRlcl8xID0gcmVxdWlyZShcIi4vaW50ZXJuYWwvb3BlcmF0b3JzL2ZpbHRlclwiKTtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcImZpbHRlclwiLCB7IGVudW1lcmFibGU6IHRydWUsIGdldDogZnVuY3Rpb24gKCkgeyByZXR1cm4gZmlsdGVyXzEuZmlsdGVyOyB9IH0pO1xudmFyIGZpbmFsaXplXzEgPSByZXF1aXJlKFwiLi9pbnRlcm5hbC9vcGVyYXRvcnMvZmluYWxpemVcIik7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJmaW5hbGl6ZVwiLCB7IGVudW1lcmFibGU6IHRydWUsIGdldDogZnVuY3Rpb24gKCkgeyByZXR1cm4gZmluYWxpemVfMS5maW5hbGl6ZTsgfSB9KTtcbnZhciBmaW5kXzEgPSByZXF1aXJlKFwiLi9pbnRlcm5hbC9vcGVyYXRvcnMvZmluZFwiKTtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcImZpbmRcIiwgeyBlbnVtZXJhYmxlOiB0cnVlLCBnZXQ6IGZ1bmN0aW9uICgpIHsgcmV0dXJuIGZpbmRfMS5maW5kOyB9IH0pO1xudmFyIGZpbmRJbmRleF8xID0gcmVxdWlyZShcIi4vaW50ZXJuYWwvb3BlcmF0b3JzL2ZpbmRJbmRleFwiKTtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcImZpbmRJbmRleFwiLCB7IGVudW1lcmFibGU6IHRydWUsIGdldDogZnVuY3Rpb24gKCkgeyByZXR1cm4gZmluZEluZGV4XzEuZmluZEluZGV4OyB9IH0pO1xudmFyIGZpcnN0XzEgPSByZXF1aXJlKFwiLi9pbnRlcm5hbC9vcGVyYXRvcnMvZmlyc3RcIik7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJmaXJzdFwiLCB7IGVudW1lcmFibGU6IHRydWUsIGdldDogZnVuY3Rpb24gKCkgeyByZXR1cm4gZmlyc3RfMS5maXJzdDsgfSB9KTtcbnZhciBncm91cEJ5XzEgPSByZXF1aXJlKFwiLi9pbnRlcm5hbC9vcGVyYXRvcnMvZ3JvdXBCeVwiKTtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcImdyb3VwQnlcIiwgeyBlbnVtZXJhYmxlOiB0cnVlLCBnZXQ6IGZ1bmN0aW9uICgpIHsgcmV0dXJuIGdyb3VwQnlfMS5ncm91cEJ5OyB9IH0pO1xudmFyIGlnbm9yZUVsZW1lbnRzXzEgPSByZXF1aXJlKFwiLi9pbnRlcm5hbC9vcGVyYXRvcnMvaWdub3JlRWxlbWVudHNcIik7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJpZ25vcmVFbGVtZW50c1wiLCB7IGVudW1lcmFibGU6IHRydWUsIGdldDogZnVuY3Rpb24gKCkgeyByZXR1cm4gaWdub3JlRWxlbWVudHNfMS5pZ25vcmVFbGVtZW50czsgfSB9KTtcbnZhciBpc0VtcHR5XzEgPSByZXF1aXJlKFwiLi9pbnRlcm5hbC9vcGVyYXRvcnMvaXNFbXB0eVwiKTtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcImlzRW1wdHlcIiwgeyBlbnVtZXJhYmxlOiB0cnVlLCBnZXQ6IGZ1bmN0aW9uICgpIHsgcmV0dXJuIGlzRW1wdHlfMS5pc0VtcHR5OyB9IH0pO1xudmFyIGxhc3RfMSA9IHJlcXVpcmUoXCIuL2ludGVybmFsL29wZXJhdG9ycy9sYXN0XCIpO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwibGFzdFwiLCB7IGVudW1lcmFibGU6IHRydWUsIGdldDogZnVuY3Rpb24gKCkgeyByZXR1cm4gbGFzdF8xLmxhc3Q7IH0gfSk7XG52YXIgbWFwXzEgPSByZXF1aXJlKFwiLi9pbnRlcm5hbC9vcGVyYXRvcnMvbWFwXCIpO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwibWFwXCIsIHsgZW51bWVyYWJsZTogdHJ1ZSwgZ2V0OiBmdW5jdGlvbiAoKSB7IHJldHVybiBtYXBfMS5tYXA7IH0gfSk7XG52YXIgbWFwVG9fMSA9IHJlcXVpcmUoXCIuL2ludGVybmFsL29wZXJhdG9ycy9tYXBUb1wiKTtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIm1hcFRvXCIsIHsgZW51bWVyYWJsZTogdHJ1ZSwgZ2V0OiBmdW5jdGlvbiAoKSB7IHJldHVybiBtYXBUb18xLm1hcFRvOyB9IH0pO1xudmFyIG1hdGVyaWFsaXplXzEgPSByZXF1aXJlKFwiLi9pbnRlcm5hbC9vcGVyYXRvcnMvbWF0ZXJpYWxpemVcIik7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJtYXRlcmlhbGl6ZVwiLCB7IGVudW1lcmFibGU6IHRydWUsIGdldDogZnVuY3Rpb24gKCkgeyByZXR1cm4gbWF0ZXJpYWxpemVfMS5tYXRlcmlhbGl6ZTsgfSB9KTtcbnZhciBtYXhfMSA9IHJlcXVpcmUoXCIuL2ludGVybmFsL29wZXJhdG9ycy9tYXhcIik7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJtYXhcIiwgeyBlbnVtZXJhYmxlOiB0cnVlLCBnZXQ6IGZ1bmN0aW9uICgpIHsgcmV0dXJuIG1heF8xLm1heDsgfSB9KTtcbnZhciBtZXJnZUFsbF8xID0gcmVxdWlyZShcIi4vaW50ZXJuYWwvb3BlcmF0b3JzL21lcmdlQWxsXCIpO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwibWVyZ2VBbGxcIiwgeyBlbnVtZXJhYmxlOiB0cnVlLCBnZXQ6IGZ1bmN0aW9uICgpIHsgcmV0dXJuIG1lcmdlQWxsXzEubWVyZ2VBbGw7IH0gfSk7XG52YXIgZmxhdE1hcF8xID0gcmVxdWlyZShcIi4vaW50ZXJuYWwvb3BlcmF0b3JzL2ZsYXRNYXBcIik7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJmbGF0TWFwXCIsIHsgZW51bWVyYWJsZTogdHJ1ZSwgZ2V0OiBmdW5jdGlvbiAoKSB7IHJldHVybiBmbGF0TWFwXzEuZmxhdE1hcDsgfSB9KTtcbnZhciBtZXJnZU1hcF8xID0gcmVxdWlyZShcIi4vaW50ZXJuYWwvb3BlcmF0b3JzL21lcmdlTWFwXCIpO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwibWVyZ2VNYXBcIiwgeyBlbnVtZXJhYmxlOiB0cnVlLCBnZXQ6IGZ1bmN0aW9uICgpIHsgcmV0dXJuIG1lcmdlTWFwXzEubWVyZ2VNYXA7IH0gfSk7XG52YXIgbWVyZ2VNYXBUb18xID0gcmVxdWlyZShcIi4vaW50ZXJuYWwvb3BlcmF0b3JzL21lcmdlTWFwVG9cIik7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJtZXJnZU1hcFRvXCIsIHsgZW51bWVyYWJsZTogdHJ1ZSwgZ2V0OiBmdW5jdGlvbiAoKSB7IHJldHVybiBtZXJnZU1hcFRvXzEubWVyZ2VNYXBUbzsgfSB9KTtcbnZhciBtZXJnZVNjYW5fMSA9IHJlcXVpcmUoXCIuL2ludGVybmFsL29wZXJhdG9ycy9tZXJnZVNjYW5cIik7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJtZXJnZVNjYW5cIiwgeyBlbnVtZXJhYmxlOiB0cnVlLCBnZXQ6IGZ1bmN0aW9uICgpIHsgcmV0dXJuIG1lcmdlU2Nhbl8xLm1lcmdlU2NhbjsgfSB9KTtcbnZhciBtZXJnZVdpdGhfMSA9IHJlcXVpcmUoXCIuL2ludGVybmFsL29wZXJhdG9ycy9tZXJnZVdpdGhcIik7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJtZXJnZVdpdGhcIiwgeyBlbnVtZXJhYmxlOiB0cnVlLCBnZXQ6IGZ1bmN0aW9uICgpIHsgcmV0dXJuIG1lcmdlV2l0aF8xLm1lcmdlV2l0aDsgfSB9KTtcbnZhciBtaW5fMSA9IHJlcXVpcmUoXCIuL2ludGVybmFsL29wZXJhdG9ycy9taW5cIik7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJtaW5cIiwgeyBlbnVtZXJhYmxlOiB0cnVlLCBnZXQ6IGZ1bmN0aW9uICgpIHsgcmV0dXJuIG1pbl8xLm1pbjsgfSB9KTtcbnZhciBtdWx0aWNhc3RfMSA9IHJlcXVpcmUoXCIuL2ludGVybmFsL29wZXJhdG9ycy9tdWx0aWNhc3RcIik7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJtdWx0aWNhc3RcIiwgeyBlbnVtZXJhYmxlOiB0cnVlLCBnZXQ6IGZ1bmN0aW9uICgpIHsgcmV0dXJuIG11bHRpY2FzdF8xLm11bHRpY2FzdDsgfSB9KTtcbnZhciBvYnNlcnZlT25fMSA9IHJlcXVpcmUoXCIuL2ludGVybmFsL29wZXJhdG9ycy9vYnNlcnZlT25cIik7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJvYnNlcnZlT25cIiwgeyBlbnVtZXJhYmxlOiB0cnVlLCBnZXQ6IGZ1bmN0aW9uICgpIHsgcmV0dXJuIG9ic2VydmVPbl8xLm9ic2VydmVPbjsgfSB9KTtcbnZhciBvbkVycm9yUmVzdW1lTmV4dFdpdGhfMSA9IHJlcXVpcmUoXCIuL2ludGVybmFsL29wZXJhdG9ycy9vbkVycm9yUmVzdW1lTmV4dFdpdGhcIik7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJvbkVycm9yUmVzdW1lTmV4dFdpdGhcIiwgeyBlbnVtZXJhYmxlOiB0cnVlLCBnZXQ6IGZ1bmN0aW9uICgpIHsgcmV0dXJuIG9uRXJyb3JSZXN1bWVOZXh0V2l0aF8xLm9uRXJyb3JSZXN1bWVOZXh0V2l0aDsgfSB9KTtcbnZhciBwYWlyd2lzZV8xID0gcmVxdWlyZShcIi4vaW50ZXJuYWwvb3BlcmF0b3JzL3BhaXJ3aXNlXCIpO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwicGFpcndpc2VcIiwgeyBlbnVtZXJhYmxlOiB0cnVlLCBnZXQ6IGZ1bmN0aW9uICgpIHsgcmV0dXJuIHBhaXJ3aXNlXzEucGFpcndpc2U7IH0gfSk7XG52YXIgcGx1Y2tfMSA9IHJlcXVpcmUoXCIuL2ludGVybmFsL29wZXJhdG9ycy9wbHVja1wiKTtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcInBsdWNrXCIsIHsgZW51bWVyYWJsZTogdHJ1ZSwgZ2V0OiBmdW5jdGlvbiAoKSB7IHJldHVybiBwbHVja18xLnBsdWNrOyB9IH0pO1xudmFyIHB1Ymxpc2hfMSA9IHJlcXVpcmUoXCIuL2ludGVybmFsL29wZXJhdG9ycy9wdWJsaXNoXCIpO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwicHVibGlzaFwiLCB7IGVudW1lcmFibGU6IHRydWUsIGdldDogZnVuY3Rpb24gKCkgeyByZXR1cm4gcHVibGlzaF8xLnB1Ymxpc2g7IH0gfSk7XG52YXIgcHVibGlzaEJlaGF2aW9yXzEgPSByZXF1aXJlKFwiLi9pbnRlcm5hbC9vcGVyYXRvcnMvcHVibGlzaEJlaGF2aW9yXCIpO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwicHVibGlzaEJlaGF2aW9yXCIsIHsgZW51bWVyYWJsZTogdHJ1ZSwgZ2V0OiBmdW5jdGlvbiAoKSB7IHJldHVybiBwdWJsaXNoQmVoYXZpb3JfMS5wdWJsaXNoQmVoYXZpb3I7IH0gfSk7XG52YXIgcHVibGlzaExhc3RfMSA9IHJlcXVpcmUoXCIuL2ludGVybmFsL29wZXJhdG9ycy9wdWJsaXNoTGFzdFwiKTtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcInB1Ymxpc2hMYXN0XCIsIHsgZW51bWVyYWJsZTogdHJ1ZSwgZ2V0OiBmdW5jdGlvbiAoKSB7IHJldHVybiBwdWJsaXNoTGFzdF8xLnB1Ymxpc2hMYXN0OyB9IH0pO1xudmFyIHB1Ymxpc2hSZXBsYXlfMSA9IHJlcXVpcmUoXCIuL2ludGVybmFsL29wZXJhdG9ycy9wdWJsaXNoUmVwbGF5XCIpO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwicHVibGlzaFJlcGxheVwiLCB7IGVudW1lcmFibGU6IHRydWUsIGdldDogZnVuY3Rpb24gKCkgeyByZXR1cm4gcHVibGlzaFJlcGxheV8xLnB1Ymxpc2hSZXBsYXk7IH0gfSk7XG52YXIgcmFjZVdpdGhfMSA9IHJlcXVpcmUoXCIuL2ludGVybmFsL29wZXJhdG9ycy9yYWNlV2l0aFwiKTtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcInJhY2VXaXRoXCIsIHsgZW51bWVyYWJsZTogdHJ1ZSwgZ2V0OiBmdW5jdGlvbiAoKSB7IHJldHVybiByYWNlV2l0aF8xLnJhY2VXaXRoOyB9IH0pO1xudmFyIHJlZHVjZV8xID0gcmVxdWlyZShcIi4vaW50ZXJuYWwvb3BlcmF0b3JzL3JlZHVjZVwiKTtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcInJlZHVjZVwiLCB7IGVudW1lcmFibGU6IHRydWUsIGdldDogZnVuY3Rpb24gKCkgeyByZXR1cm4gcmVkdWNlXzEucmVkdWNlOyB9IH0pO1xudmFyIHJlcGVhdF8xID0gcmVxdWlyZShcIi4vaW50ZXJuYWwvb3BlcmF0b3JzL3JlcGVhdFwiKTtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcInJlcGVhdFwiLCB7IGVudW1lcmFibGU6IHRydWUsIGdldDogZnVuY3Rpb24gKCkgeyByZXR1cm4gcmVwZWF0XzEucmVwZWF0OyB9IH0pO1xudmFyIHJlcGVhdFdoZW5fMSA9IHJlcXVpcmUoXCIuL2ludGVybmFsL29wZXJhdG9ycy9yZXBlYXRXaGVuXCIpO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwicmVwZWF0V2hlblwiLCB7IGVudW1lcmFibGU6IHRydWUsIGdldDogZnVuY3Rpb24gKCkgeyByZXR1cm4gcmVwZWF0V2hlbl8xLnJlcGVhdFdoZW47IH0gfSk7XG52YXIgcmV0cnlfMSA9IHJlcXVpcmUoXCIuL2ludGVybmFsL29wZXJhdG9ycy9yZXRyeVwiKTtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcInJldHJ5XCIsIHsgZW51bWVyYWJsZTogdHJ1ZSwgZ2V0OiBmdW5jdGlvbiAoKSB7IHJldHVybiByZXRyeV8xLnJldHJ5OyB9IH0pO1xudmFyIHJldHJ5V2hlbl8xID0gcmVxdWlyZShcIi4vaW50ZXJuYWwvb3BlcmF0b3JzL3JldHJ5V2hlblwiKTtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcInJldHJ5V2hlblwiLCB7IGVudW1lcmFibGU6IHRydWUsIGdldDogZnVuY3Rpb24gKCkgeyByZXR1cm4gcmV0cnlXaGVuXzEucmV0cnlXaGVuOyB9IH0pO1xudmFyIHJlZkNvdW50XzEgPSByZXF1aXJlKFwiLi9pbnRlcm5hbC9vcGVyYXRvcnMvcmVmQ291bnRcIik7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJyZWZDb3VudFwiLCB7IGVudW1lcmFibGU6IHRydWUsIGdldDogZnVuY3Rpb24gKCkgeyByZXR1cm4gcmVmQ291bnRfMS5yZWZDb3VudDsgfSB9KTtcbnZhciBzYW1wbGVfMSA9IHJlcXVpcmUoXCIuL2ludGVybmFsL29wZXJhdG9ycy9zYW1wbGVcIik7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJzYW1wbGVcIiwgeyBlbnVtZXJhYmxlOiB0cnVlLCBnZXQ6IGZ1bmN0aW9uICgpIHsgcmV0dXJuIHNhbXBsZV8xLnNhbXBsZTsgfSB9KTtcbnZhciBzYW1wbGVUaW1lXzEgPSByZXF1aXJlKFwiLi9pbnRlcm5hbC9vcGVyYXRvcnMvc2FtcGxlVGltZVwiKTtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcInNhbXBsZVRpbWVcIiwgeyBlbnVtZXJhYmxlOiB0cnVlLCBnZXQ6IGZ1bmN0aW9uICgpIHsgcmV0dXJuIHNhbXBsZVRpbWVfMS5zYW1wbGVUaW1lOyB9IH0pO1xudmFyIHNjYW5fMSA9IHJlcXVpcmUoXCIuL2ludGVybmFsL29wZXJhdG9ycy9zY2FuXCIpO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwic2NhblwiLCB7IGVudW1lcmFibGU6IHRydWUsIGdldDogZnVuY3Rpb24gKCkgeyByZXR1cm4gc2Nhbl8xLnNjYW47IH0gfSk7XG52YXIgc2VxdWVuY2VFcXVhbF8xID0gcmVxdWlyZShcIi4vaW50ZXJuYWwvb3BlcmF0b3JzL3NlcXVlbmNlRXF1YWxcIik7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJzZXF1ZW5jZUVxdWFsXCIsIHsgZW51bWVyYWJsZTogdHJ1ZSwgZ2V0OiBmdW5jdGlvbiAoKSB7IHJldHVybiBzZXF1ZW5jZUVxdWFsXzEuc2VxdWVuY2VFcXVhbDsgfSB9KTtcbnZhciBzaGFyZV8xID0gcmVxdWlyZShcIi4vaW50ZXJuYWwvb3BlcmF0b3JzL3NoYXJlXCIpO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwic2hhcmVcIiwgeyBlbnVtZXJhYmxlOiB0cnVlLCBnZXQ6IGZ1bmN0aW9uICgpIHsgcmV0dXJuIHNoYXJlXzEuc2hhcmU7IH0gfSk7XG52YXIgc2hhcmVSZXBsYXlfMSA9IHJlcXVpcmUoXCIuL2ludGVybmFsL29wZXJhdG9ycy9zaGFyZVJlcGxheVwiKTtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcInNoYXJlUmVwbGF5XCIsIHsgZW51bWVyYWJsZTogdHJ1ZSwgZ2V0OiBmdW5jdGlvbiAoKSB7IHJldHVybiBzaGFyZVJlcGxheV8xLnNoYXJlUmVwbGF5OyB9IH0pO1xudmFyIHNpbmdsZV8xID0gcmVxdWlyZShcIi4vaW50ZXJuYWwvb3BlcmF0b3JzL3NpbmdsZVwiKTtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcInNpbmdsZVwiLCB7IGVudW1lcmFibGU6IHRydWUsIGdldDogZnVuY3Rpb24gKCkgeyByZXR1cm4gc2luZ2xlXzEuc2luZ2xlOyB9IH0pO1xudmFyIHNraXBfMSA9IHJlcXVpcmUoXCIuL2ludGVybmFsL29wZXJhdG9ycy9za2lwXCIpO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwic2tpcFwiLCB7IGVudW1lcmFibGU6IHRydWUsIGdldDogZnVuY3Rpb24gKCkgeyByZXR1cm4gc2tpcF8xLnNraXA7IH0gfSk7XG52YXIgc2tpcExhc3RfMSA9IHJlcXVpcmUoXCIuL2ludGVybmFsL29wZXJhdG9ycy9za2lwTGFzdFwiKTtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcInNraXBMYXN0XCIsIHsgZW51bWVyYWJsZTogdHJ1ZSwgZ2V0OiBmdW5jdGlvbiAoKSB7IHJldHVybiBza2lwTGFzdF8xLnNraXBMYXN0OyB9IH0pO1xudmFyIHNraXBVbnRpbF8xID0gcmVxdWlyZShcIi4vaW50ZXJuYWwvb3BlcmF0b3JzL3NraXBVbnRpbFwiKTtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcInNraXBVbnRpbFwiLCB7IGVudW1lcmFibGU6IHRydWUsIGdldDogZnVuY3Rpb24gKCkgeyByZXR1cm4gc2tpcFVudGlsXzEuc2tpcFVudGlsOyB9IH0pO1xudmFyIHNraXBXaGlsZV8xID0gcmVxdWlyZShcIi4vaW50ZXJuYWwvb3BlcmF0b3JzL3NraXBXaGlsZVwiKTtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcInNraXBXaGlsZVwiLCB7IGVudW1lcmFibGU6IHRydWUsIGdldDogZnVuY3Rpb24gKCkgeyByZXR1cm4gc2tpcFdoaWxlXzEuc2tpcFdoaWxlOyB9IH0pO1xudmFyIHN0YXJ0V2l0aF8xID0gcmVxdWlyZShcIi4vaW50ZXJuYWwvb3BlcmF0b3JzL3N0YXJ0V2l0aFwiKTtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcInN0YXJ0V2l0aFwiLCB7IGVudW1lcmFibGU6IHRydWUsIGdldDogZnVuY3Rpb24gKCkgeyByZXR1cm4gc3RhcnRXaXRoXzEuc3RhcnRXaXRoOyB9IH0pO1xudmFyIHN1YnNjcmliZU9uXzEgPSByZXF1aXJlKFwiLi9pbnRlcm5hbC9vcGVyYXRvcnMvc3Vic2NyaWJlT25cIik7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJzdWJzY3JpYmVPblwiLCB7IGVudW1lcmFibGU6IHRydWUsIGdldDogZnVuY3Rpb24gKCkgeyByZXR1cm4gc3Vic2NyaWJlT25fMS5zdWJzY3JpYmVPbjsgfSB9KTtcbnZhciBzd2l0Y2hBbGxfMSA9IHJlcXVpcmUoXCIuL2ludGVybmFsL29wZXJhdG9ycy9zd2l0Y2hBbGxcIik7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJzd2l0Y2hBbGxcIiwgeyBlbnVtZXJhYmxlOiB0cnVlLCBnZXQ6IGZ1bmN0aW9uICgpIHsgcmV0dXJuIHN3aXRjaEFsbF8xLnN3aXRjaEFsbDsgfSB9KTtcbnZhciBzd2l0Y2hNYXBfMSA9IHJlcXVpcmUoXCIuL2ludGVybmFsL29wZXJhdG9ycy9zd2l0Y2hNYXBcIik7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJzd2l0Y2hNYXBcIiwgeyBlbnVtZXJhYmxlOiB0cnVlLCBnZXQ6IGZ1bmN0aW9uICgpIHsgcmV0dXJuIHN3aXRjaE1hcF8xLnN3aXRjaE1hcDsgfSB9KTtcbnZhciBzd2l0Y2hNYXBUb18xID0gcmVxdWlyZShcIi4vaW50ZXJuYWwvb3BlcmF0b3JzL3N3aXRjaE1hcFRvXCIpO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwic3dpdGNoTWFwVG9cIiwgeyBlbnVtZXJhYmxlOiB0cnVlLCBnZXQ6IGZ1bmN0aW9uICgpIHsgcmV0dXJuIHN3aXRjaE1hcFRvXzEuc3dpdGNoTWFwVG87IH0gfSk7XG52YXIgc3dpdGNoU2Nhbl8xID0gcmVxdWlyZShcIi4vaW50ZXJuYWwvb3BlcmF0b3JzL3N3aXRjaFNjYW5cIik7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJzd2l0Y2hTY2FuXCIsIHsgZW51bWVyYWJsZTogdHJ1ZSwgZ2V0OiBmdW5jdGlvbiAoKSB7IHJldHVybiBzd2l0Y2hTY2FuXzEuc3dpdGNoU2NhbjsgfSB9KTtcbnZhciB0YWtlXzEgPSByZXF1aXJlKFwiLi9pbnRlcm5hbC9vcGVyYXRvcnMvdGFrZVwiKTtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcInRha2VcIiwgeyBlbnVtZXJhYmxlOiB0cnVlLCBnZXQ6IGZ1bmN0aW9uICgpIHsgcmV0dXJuIHRha2VfMS50YWtlOyB9IH0pO1xudmFyIHRha2VMYXN0XzEgPSByZXF1aXJlKFwiLi9pbnRlcm5hbC9vcGVyYXRvcnMvdGFrZUxhc3RcIik7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJ0YWtlTGFzdFwiLCB7IGVudW1lcmFibGU6IHRydWUsIGdldDogZnVuY3Rpb24gKCkgeyByZXR1cm4gdGFrZUxhc3RfMS50YWtlTGFzdDsgfSB9KTtcbnZhciB0YWtlVW50aWxfMSA9IHJlcXVpcmUoXCIuL2ludGVybmFsL29wZXJhdG9ycy90YWtlVW50aWxcIik7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJ0YWtlVW50aWxcIiwgeyBlbnVtZXJhYmxlOiB0cnVlLCBnZXQ6IGZ1bmN0aW9uICgpIHsgcmV0dXJuIHRha2VVbnRpbF8xLnRha2VVbnRpbDsgfSB9KTtcbnZhciB0YWtlV2hpbGVfMSA9IHJlcXVpcmUoXCIuL2ludGVybmFsL29wZXJhdG9ycy90YWtlV2hpbGVcIik7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJ0YWtlV2hpbGVcIiwgeyBlbnVtZXJhYmxlOiB0cnVlLCBnZXQ6IGZ1bmN0aW9uICgpIHsgcmV0dXJuIHRha2VXaGlsZV8xLnRha2VXaGlsZTsgfSB9KTtcbnZhciB0YXBfMSA9IHJlcXVpcmUoXCIuL2ludGVybmFsL29wZXJhdG9ycy90YXBcIik7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJ0YXBcIiwgeyBlbnVtZXJhYmxlOiB0cnVlLCBnZXQ6IGZ1bmN0aW9uICgpIHsgcmV0dXJuIHRhcF8xLnRhcDsgfSB9KTtcbnZhciB0aHJvdHRsZV8xID0gcmVxdWlyZShcIi4vaW50ZXJuYWwvb3BlcmF0b3JzL3Rocm90dGxlXCIpO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwidGhyb3R0bGVcIiwgeyBlbnVtZXJhYmxlOiB0cnVlLCBnZXQ6IGZ1bmN0aW9uICgpIHsgcmV0dXJuIHRocm90dGxlXzEudGhyb3R0bGU7IH0gfSk7XG52YXIgdGhyb3R0bGVUaW1lXzEgPSByZXF1aXJlKFwiLi9pbnRlcm5hbC9vcGVyYXRvcnMvdGhyb3R0bGVUaW1lXCIpO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwidGhyb3R0bGVUaW1lXCIsIHsgZW51bWVyYWJsZTogdHJ1ZSwgZ2V0OiBmdW5jdGlvbiAoKSB7IHJldHVybiB0aHJvdHRsZVRpbWVfMS50aHJvdHRsZVRpbWU7IH0gfSk7XG52YXIgdGhyb3dJZkVtcHR5XzEgPSByZXF1aXJlKFwiLi9pbnRlcm5hbC9vcGVyYXRvcnMvdGhyb3dJZkVtcHR5XCIpO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwidGhyb3dJZkVtcHR5XCIsIHsgZW51bWVyYWJsZTogdHJ1ZSwgZ2V0OiBmdW5jdGlvbiAoKSB7IHJldHVybiB0aHJvd0lmRW1wdHlfMS50aHJvd0lmRW1wdHk7IH0gfSk7XG52YXIgdGltZUludGVydmFsXzEgPSByZXF1aXJlKFwiLi9pbnRlcm5hbC9vcGVyYXRvcnMvdGltZUludGVydmFsXCIpO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwidGltZUludGVydmFsXCIsIHsgZW51bWVyYWJsZTogdHJ1ZSwgZ2V0OiBmdW5jdGlvbiAoKSB7IHJldHVybiB0aW1lSW50ZXJ2YWxfMS50aW1lSW50ZXJ2YWw7IH0gfSk7XG52YXIgdGltZW91dF8yID0gcmVxdWlyZShcIi4vaW50ZXJuYWwvb3BlcmF0b3JzL3RpbWVvdXRcIik7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJ0aW1lb3V0XCIsIHsgZW51bWVyYWJsZTogdHJ1ZSwgZ2V0OiBmdW5jdGlvbiAoKSB7IHJldHVybiB0aW1lb3V0XzIudGltZW91dDsgfSB9KTtcbnZhciB0aW1lb3V0V2l0aF8xID0gcmVxdWlyZShcIi4vaW50ZXJuYWwvb3BlcmF0b3JzL3RpbWVvdXRXaXRoXCIpO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwidGltZW91dFdpdGhcIiwgeyBlbnVtZXJhYmxlOiB0cnVlLCBnZXQ6IGZ1bmN0aW9uICgpIHsgcmV0dXJuIHRpbWVvdXRXaXRoXzEudGltZW91dFdpdGg7IH0gfSk7XG52YXIgdGltZXN0YW1wXzEgPSByZXF1aXJlKFwiLi9pbnRlcm5hbC9vcGVyYXRvcnMvdGltZXN0YW1wXCIpO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwidGltZXN0YW1wXCIsIHsgZW51bWVyYWJsZTogdHJ1ZSwgZ2V0OiBmdW5jdGlvbiAoKSB7IHJldHVybiB0aW1lc3RhbXBfMS50aW1lc3RhbXA7IH0gfSk7XG52YXIgdG9BcnJheV8xID0gcmVxdWlyZShcIi4vaW50ZXJuYWwvb3BlcmF0b3JzL3RvQXJyYXlcIik7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJ0b0FycmF5XCIsIHsgZW51bWVyYWJsZTogdHJ1ZSwgZ2V0OiBmdW5jdGlvbiAoKSB7IHJldHVybiB0b0FycmF5XzEudG9BcnJheTsgfSB9KTtcbnZhciB3aW5kb3dfMSA9IHJlcXVpcmUoXCIuL2ludGVybmFsL29wZXJhdG9ycy93aW5kb3dcIik7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJ3aW5kb3dcIiwgeyBlbnVtZXJhYmxlOiB0cnVlLCBnZXQ6IGZ1bmN0aW9uICgpIHsgcmV0dXJuIHdpbmRvd18xLndpbmRvdzsgfSB9KTtcbnZhciB3aW5kb3dDb3VudF8xID0gcmVxdWlyZShcIi4vaW50ZXJuYWwvb3BlcmF0b3JzL3dpbmRvd0NvdW50XCIpO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwid2luZG93Q291bnRcIiwgeyBlbnVtZXJhYmxlOiB0cnVlLCBnZXQ6IGZ1bmN0aW9uICgpIHsgcmV0dXJuIHdpbmRvd0NvdW50XzEud2luZG93Q291bnQ7IH0gfSk7XG52YXIgd2luZG93VGltZV8xID0gcmVxdWlyZShcIi4vaW50ZXJuYWwvb3BlcmF0b3JzL3dpbmRvd1RpbWVcIik7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJ3aW5kb3dUaW1lXCIsIHsgZW51bWVyYWJsZTogdHJ1ZSwgZ2V0OiBmdW5jdGlvbiAoKSB7IHJldHVybiB3aW5kb3dUaW1lXzEud2luZG93VGltZTsgfSB9KTtcbnZhciB3aW5kb3dUb2dnbGVfMSA9IHJlcXVpcmUoXCIuL2ludGVybmFsL29wZXJhdG9ycy93aW5kb3dUb2dnbGVcIik7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJ3aW5kb3dUb2dnbGVcIiwgeyBlbnVtZXJhYmxlOiB0cnVlLCBnZXQ6IGZ1bmN0aW9uICgpIHsgcmV0dXJuIHdpbmRvd1RvZ2dsZV8xLndpbmRvd1RvZ2dsZTsgfSB9KTtcbnZhciB3aW5kb3dXaGVuXzEgPSByZXF1aXJlKFwiLi9pbnRlcm5hbC9vcGVyYXRvcnMvd2luZG93V2hlblwiKTtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIndpbmRvd1doZW5cIiwgeyBlbnVtZXJhYmxlOiB0cnVlLCBnZXQ6IGZ1bmN0aW9uICgpIHsgcmV0dXJuIHdpbmRvd1doZW5fMS53aW5kb3dXaGVuOyB9IH0pO1xudmFyIHdpdGhMYXRlc3RGcm9tXzEgPSByZXF1aXJlKFwiLi9pbnRlcm5hbC9vcGVyYXRvcnMvd2l0aExhdGVzdEZyb21cIik7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJ3aXRoTGF0ZXN0RnJvbVwiLCB7IGVudW1lcmFibGU6IHRydWUsIGdldDogZnVuY3Rpb24gKCkgeyByZXR1cm4gd2l0aExhdGVzdEZyb21fMS53aXRoTGF0ZXN0RnJvbTsgfSB9KTtcbnZhciB6aXBBbGxfMSA9IHJlcXVpcmUoXCIuL2ludGVybmFsL29wZXJhdG9ycy96aXBBbGxcIik7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJ6aXBBbGxcIiwgeyBlbnVtZXJhYmxlOiB0cnVlLCBnZXQ6IGZ1bmN0aW9uICgpIHsgcmV0dXJuIHppcEFsbF8xLnppcEFsbDsgfSB9KTtcbnZhciB6aXBXaXRoXzEgPSByZXF1aXJlKFwiLi9pbnRlcm5hbC9vcGVyYXRvcnMvemlwV2l0aFwiKTtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcInppcFdpdGhcIiwgeyBlbnVtZXJhYmxlOiB0cnVlLCBnZXQ6IGZ1bmN0aW9uICgpIHsgcmV0dXJuIHppcFdpdGhfMS56aXBXaXRoOyB9IH0pO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9aW5kZXguanMubWFwIiwiXCJ1c2Ugc3RyaWN0XCI7XG52YXIgX19leHRlbmRzID0gKHRoaXMgJiYgdGhpcy5fX2V4dGVuZHMpIHx8IChmdW5jdGlvbiAoKSB7XG4gICAgdmFyIGV4dGVuZFN0YXRpY3MgPSBmdW5jdGlvbiAoZCwgYikge1xuICAgICAgICBleHRlbmRTdGF0aWNzID0gT2JqZWN0LnNldFByb3RvdHlwZU9mIHx8XG4gICAgICAgICAgICAoeyBfX3Byb3RvX186IFtdIH0gaW5zdGFuY2VvZiBBcnJheSAmJiBmdW5jdGlvbiAoZCwgYikgeyBkLl9fcHJvdG9fXyA9IGI7IH0pIHx8XG4gICAgICAgICAgICBmdW5jdGlvbiAoZCwgYikgeyBmb3IgKHZhciBwIGluIGIpIGlmIChPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwoYiwgcCkpIGRbcF0gPSBiW3BdOyB9O1xuICAgICAgICByZXR1cm4gZXh0ZW5kU3RhdGljcyhkLCBiKTtcbiAgICB9O1xuICAgIHJldHVybiBmdW5jdGlvbiAoZCwgYikge1xuICAgICAgICBpZiAodHlwZW9mIGIgIT09IFwiZnVuY3Rpb25cIiAmJiBiICE9PSBudWxsKVxuICAgICAgICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcihcIkNsYXNzIGV4dGVuZHMgdmFsdWUgXCIgKyBTdHJpbmcoYikgKyBcIiBpcyBub3QgYSBjb25zdHJ1Y3RvciBvciBudWxsXCIpO1xuICAgICAgICBleHRlbmRTdGF0aWNzKGQsIGIpO1xuICAgICAgICBmdW5jdGlvbiBfXygpIHsgdGhpcy5jb25zdHJ1Y3RvciA9IGQ7IH1cbiAgICAgICAgZC5wcm90b3R5cGUgPSBiID09PSBudWxsID8gT2JqZWN0LmNyZWF0ZShiKSA6IChfXy5wcm90b3R5cGUgPSBiLnByb3RvdHlwZSwgbmV3IF9fKCkpO1xuICAgIH07XG59KSgpO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuZXhwb3J0cy5Bc3luY1N1YmplY3QgPSB2b2lkIDA7XG52YXIgU3ViamVjdF8xID0gcmVxdWlyZShcIi4vU3ViamVjdFwiKTtcbnZhciBBc3luY1N1YmplY3QgPSAoZnVuY3Rpb24gKF9zdXBlcikge1xuICAgIF9fZXh0ZW5kcyhBc3luY1N1YmplY3QsIF9zdXBlcik7XG4gICAgZnVuY3Rpb24gQXN5bmNTdWJqZWN0KCkge1xuICAgICAgICB2YXIgX3RoaXMgPSBfc3VwZXIgIT09IG51bGwgJiYgX3N1cGVyLmFwcGx5KHRoaXMsIGFyZ3VtZW50cykgfHwgdGhpcztcbiAgICAgICAgX3RoaXMuX3ZhbHVlID0gbnVsbDtcbiAgICAgICAgX3RoaXMuX2hhc1ZhbHVlID0gZmFsc2U7XG4gICAgICAgIF90aGlzLl9pc0NvbXBsZXRlID0gZmFsc2U7XG4gICAgICAgIHJldHVybiBfdGhpcztcbiAgICB9XG4gICAgQXN5bmNTdWJqZWN0LnByb3RvdHlwZS5fY2hlY2tGaW5hbGl6ZWRTdGF0dXNlcyA9IGZ1bmN0aW9uIChzdWJzY3JpYmVyKSB7XG4gICAgICAgIHZhciBfYSA9IHRoaXMsIGhhc0Vycm9yID0gX2EuaGFzRXJyb3IsIF9oYXNWYWx1ZSA9IF9hLl9oYXNWYWx1ZSwgX3ZhbHVlID0gX2EuX3ZhbHVlLCB0aHJvd25FcnJvciA9IF9hLnRocm93bkVycm9yLCBpc1N0b3BwZWQgPSBfYS5pc1N0b3BwZWQsIF9pc0NvbXBsZXRlID0gX2EuX2lzQ29tcGxldGU7XG4gICAgICAgIGlmIChoYXNFcnJvcikge1xuICAgICAgICAgICAgc3Vic2NyaWJlci5lcnJvcih0aHJvd25FcnJvcik7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSBpZiAoaXNTdG9wcGVkIHx8IF9pc0NvbXBsZXRlKSB7XG4gICAgICAgICAgICBfaGFzVmFsdWUgJiYgc3Vic2NyaWJlci5uZXh0KF92YWx1ZSk7XG4gICAgICAgICAgICBzdWJzY3JpYmVyLmNvbXBsZXRlKCk7XG4gICAgICAgIH1cbiAgICB9O1xuICAgIEFzeW5jU3ViamVjdC5wcm90b3R5cGUubmV4dCA9IGZ1bmN0aW9uICh2YWx1ZSkge1xuICAgICAgICBpZiAoIXRoaXMuaXNTdG9wcGVkKSB7XG4gICAgICAgICAgICB0aGlzLl92YWx1ZSA9IHZhbHVlO1xuICAgICAgICAgICAgdGhpcy5faGFzVmFsdWUgPSB0cnVlO1xuICAgICAgICB9XG4gICAgfTtcbiAgICBBc3luY1N1YmplY3QucHJvdG90eXBlLmNvbXBsZXRlID0gZnVuY3Rpb24gKCkge1xuICAgICAgICB2YXIgX2EgPSB0aGlzLCBfaGFzVmFsdWUgPSBfYS5faGFzVmFsdWUsIF92YWx1ZSA9IF9hLl92YWx1ZSwgX2lzQ29tcGxldGUgPSBfYS5faXNDb21wbGV0ZTtcbiAgICAgICAgaWYgKCFfaXNDb21wbGV0ZSkge1xuICAgICAgICAgICAgdGhpcy5faXNDb21wbGV0ZSA9IHRydWU7XG4gICAgICAgICAgICBfaGFzVmFsdWUgJiYgX3N1cGVyLnByb3RvdHlwZS5uZXh0LmNhbGwodGhpcywgX3ZhbHVlKTtcbiAgICAgICAgICAgIF9zdXBlci5wcm90b3R5cGUuY29tcGxldGUuY2FsbCh0aGlzKTtcbiAgICAgICAgfVxuICAgIH07XG4gICAgcmV0dXJuIEFzeW5jU3ViamVjdDtcbn0oU3ViamVjdF8xLlN1YmplY3QpKTtcbmV4cG9ydHMuQXN5bmNTdWJqZWN0ID0gQXN5bmNTdWJqZWN0O1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9QXN5bmNTdWJqZWN0LmpzLm1hcCIsIlwidXNlIHN0cmljdFwiO1xudmFyIF9fZXh0ZW5kcyA9ICh0aGlzICYmIHRoaXMuX19leHRlbmRzKSB8fCAoZnVuY3Rpb24gKCkge1xuICAgIHZhciBleHRlbmRTdGF0aWNzID0gZnVuY3Rpb24gKGQsIGIpIHtcbiAgICAgICAgZXh0ZW5kU3RhdGljcyA9IE9iamVjdC5zZXRQcm90b3R5cGVPZiB8fFxuICAgICAgICAgICAgKHsgX19wcm90b19fOiBbXSB9IGluc3RhbmNlb2YgQXJyYXkgJiYgZnVuY3Rpb24gKGQsIGIpIHsgZC5fX3Byb3RvX18gPSBiOyB9KSB8fFxuICAgICAgICAgICAgZnVuY3Rpb24gKGQsIGIpIHsgZm9yICh2YXIgcCBpbiBiKSBpZiAoT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKGIsIHApKSBkW3BdID0gYltwXTsgfTtcbiAgICAgICAgcmV0dXJuIGV4dGVuZFN0YXRpY3MoZCwgYik7XG4gICAgfTtcbiAgICByZXR1cm4gZnVuY3Rpb24gKGQsIGIpIHtcbiAgICAgICAgaWYgKHR5cGVvZiBiICE9PSBcImZ1bmN0aW9uXCIgJiYgYiAhPT0gbnVsbClcbiAgICAgICAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoXCJDbGFzcyBleHRlbmRzIHZhbHVlIFwiICsgU3RyaW5nKGIpICsgXCIgaXMgbm90IGEgY29uc3RydWN0b3Igb3IgbnVsbFwiKTtcbiAgICAgICAgZXh0ZW5kU3RhdGljcyhkLCBiKTtcbiAgICAgICAgZnVuY3Rpb24gX18oKSB7IHRoaXMuY29uc3RydWN0b3IgPSBkOyB9XG4gICAgICAgIGQucHJvdG90eXBlID0gYiA9PT0gbnVsbCA/IE9iamVjdC5jcmVhdGUoYikgOiAoX18ucHJvdG90eXBlID0gYi5wcm90b3R5cGUsIG5ldyBfXygpKTtcbiAgICB9O1xufSkoKTtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmV4cG9ydHMuQmVoYXZpb3JTdWJqZWN0ID0gdm9pZCAwO1xudmFyIFN1YmplY3RfMSA9IHJlcXVpcmUoXCIuL1N1YmplY3RcIik7XG52YXIgQmVoYXZpb3JTdWJqZWN0ID0gKGZ1bmN0aW9uIChfc3VwZXIpIHtcbiAgICBfX2V4dGVuZHMoQmVoYXZpb3JTdWJqZWN0LCBfc3VwZXIpO1xuICAgIGZ1bmN0aW9uIEJlaGF2aW9yU3ViamVjdChfdmFsdWUpIHtcbiAgICAgICAgdmFyIF90aGlzID0gX3N1cGVyLmNhbGwodGhpcykgfHwgdGhpcztcbiAgICAgICAgX3RoaXMuX3ZhbHVlID0gX3ZhbHVlO1xuICAgICAgICByZXR1cm4gX3RoaXM7XG4gICAgfVxuICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShCZWhhdmlvclN1YmplY3QucHJvdG90eXBlLCBcInZhbHVlXCIsIHtcbiAgICAgICAgZ2V0OiBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICByZXR1cm4gdGhpcy5nZXRWYWx1ZSgpO1xuICAgICAgICB9LFxuICAgICAgICBlbnVtZXJhYmxlOiBmYWxzZSxcbiAgICAgICAgY29uZmlndXJhYmxlOiB0cnVlXG4gICAgfSk7XG4gICAgQmVoYXZpb3JTdWJqZWN0LnByb3RvdHlwZS5fc3Vic2NyaWJlID0gZnVuY3Rpb24gKHN1YnNjcmliZXIpIHtcbiAgICAgICAgdmFyIHN1YnNjcmlwdGlvbiA9IF9zdXBlci5wcm90b3R5cGUuX3N1YnNjcmliZS5jYWxsKHRoaXMsIHN1YnNjcmliZXIpO1xuICAgICAgICAhc3Vic2NyaXB0aW9uLmNsb3NlZCAmJiBzdWJzY3JpYmVyLm5leHQodGhpcy5fdmFsdWUpO1xuICAgICAgICByZXR1cm4gc3Vic2NyaXB0aW9uO1xuICAgIH07XG4gICAgQmVoYXZpb3JTdWJqZWN0LnByb3RvdHlwZS5nZXRWYWx1ZSA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgdmFyIF9hID0gdGhpcywgaGFzRXJyb3IgPSBfYS5oYXNFcnJvciwgdGhyb3duRXJyb3IgPSBfYS50aHJvd25FcnJvciwgX3ZhbHVlID0gX2EuX3ZhbHVlO1xuICAgICAgICBpZiAoaGFzRXJyb3IpIHtcbiAgICAgICAgICAgIHRocm93IHRocm93bkVycm9yO1xuICAgICAgICB9XG4gICAgICAgIHRoaXMuX3Rocm93SWZDbG9zZWQoKTtcbiAgICAgICAgcmV0dXJuIF92YWx1ZTtcbiAgICB9O1xuICAgIEJlaGF2aW9yU3ViamVjdC5wcm90b3R5cGUubmV4dCA9IGZ1bmN0aW9uICh2YWx1ZSkge1xuICAgICAgICBfc3VwZXIucHJvdG90eXBlLm5leHQuY2FsbCh0aGlzLCAodGhpcy5fdmFsdWUgPSB2YWx1ZSkpO1xuICAgIH07XG4gICAgcmV0dXJuIEJlaGF2aW9yU3ViamVjdDtcbn0oU3ViamVjdF8xLlN1YmplY3QpKTtcbmV4cG9ydHMuQmVoYXZpb3JTdWJqZWN0ID0gQmVoYXZpb3JTdWJqZWN0O1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9QmVoYXZpb3JTdWJqZWN0LmpzLm1hcCIsIlwidXNlIHN0cmljdFwiO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuZXhwb3J0cy5vYnNlcnZlTm90aWZpY2F0aW9uID0gZXhwb3J0cy5Ob3RpZmljYXRpb24gPSBleHBvcnRzLk5vdGlmaWNhdGlvbktpbmQgPSB2b2lkIDA7XG52YXIgZW1wdHlfMSA9IHJlcXVpcmUoXCIuL29ic2VydmFibGUvZW1wdHlcIik7XG52YXIgb2ZfMSA9IHJlcXVpcmUoXCIuL29ic2VydmFibGUvb2ZcIik7XG52YXIgdGhyb3dFcnJvcl8xID0gcmVxdWlyZShcIi4vb2JzZXJ2YWJsZS90aHJvd0Vycm9yXCIpO1xudmFyIGlzRnVuY3Rpb25fMSA9IHJlcXVpcmUoXCIuL3V0aWwvaXNGdW5jdGlvblwiKTtcbnZhciBOb3RpZmljYXRpb25LaW5kO1xuKGZ1bmN0aW9uIChOb3RpZmljYXRpb25LaW5kKSB7XG4gICAgTm90aWZpY2F0aW9uS2luZFtcIk5FWFRcIl0gPSBcIk5cIjtcbiAgICBOb3RpZmljYXRpb25LaW5kW1wiRVJST1JcIl0gPSBcIkVcIjtcbiAgICBOb3RpZmljYXRpb25LaW5kW1wiQ09NUExFVEVcIl0gPSBcIkNcIjtcbn0pKE5vdGlmaWNhdGlvbktpbmQgPSBleHBvcnRzLk5vdGlmaWNhdGlvbktpbmQgfHwgKGV4cG9ydHMuTm90aWZpY2F0aW9uS2luZCA9IHt9KSk7XG52YXIgTm90aWZpY2F0aW9uID0gKGZ1bmN0aW9uICgpIHtcbiAgICBmdW5jdGlvbiBOb3RpZmljYXRpb24oa2luZCwgdmFsdWUsIGVycm9yKSB7XG4gICAgICAgIHRoaXMua2luZCA9IGtpbmQ7XG4gICAgICAgIHRoaXMudmFsdWUgPSB2YWx1ZTtcbiAgICAgICAgdGhpcy5lcnJvciA9IGVycm9yO1xuICAgICAgICB0aGlzLmhhc1ZhbHVlID0ga2luZCA9PT0gJ04nO1xuICAgIH1cbiAgICBOb3RpZmljYXRpb24ucHJvdG90eXBlLm9ic2VydmUgPSBmdW5jdGlvbiAob2JzZXJ2ZXIpIHtcbiAgICAgICAgcmV0dXJuIG9ic2VydmVOb3RpZmljYXRpb24odGhpcywgb2JzZXJ2ZXIpO1xuICAgIH07XG4gICAgTm90aWZpY2F0aW9uLnByb3RvdHlwZS5kbyA9IGZ1bmN0aW9uIChuZXh0SGFuZGxlciwgZXJyb3JIYW5kbGVyLCBjb21wbGV0ZUhhbmRsZXIpIHtcbiAgICAgICAgdmFyIF9hID0gdGhpcywga2luZCA9IF9hLmtpbmQsIHZhbHVlID0gX2EudmFsdWUsIGVycm9yID0gX2EuZXJyb3I7XG4gICAgICAgIHJldHVybiBraW5kID09PSAnTicgPyBuZXh0SGFuZGxlciA9PT0gbnVsbCB8fCBuZXh0SGFuZGxlciA9PT0gdm9pZCAwID8gdm9pZCAwIDogbmV4dEhhbmRsZXIodmFsdWUpIDoga2luZCA9PT0gJ0UnID8gZXJyb3JIYW5kbGVyID09PSBudWxsIHx8IGVycm9ySGFuZGxlciA9PT0gdm9pZCAwID8gdm9pZCAwIDogZXJyb3JIYW5kbGVyKGVycm9yKSA6IGNvbXBsZXRlSGFuZGxlciA9PT0gbnVsbCB8fCBjb21wbGV0ZUhhbmRsZXIgPT09IHZvaWQgMCA/IHZvaWQgMCA6IGNvbXBsZXRlSGFuZGxlcigpO1xuICAgIH07XG4gICAgTm90aWZpY2F0aW9uLnByb3RvdHlwZS5hY2NlcHQgPSBmdW5jdGlvbiAobmV4dE9yT2JzZXJ2ZXIsIGVycm9yLCBjb21wbGV0ZSkge1xuICAgICAgICB2YXIgX2E7XG4gICAgICAgIHJldHVybiBpc0Z1bmN0aW9uXzEuaXNGdW5jdGlvbigoX2EgPSBuZXh0T3JPYnNlcnZlcikgPT09IG51bGwgfHwgX2EgPT09IHZvaWQgMCA/IHZvaWQgMCA6IF9hLm5leHQpXG4gICAgICAgICAgICA/IHRoaXMub2JzZXJ2ZShuZXh0T3JPYnNlcnZlcilcbiAgICAgICAgICAgIDogdGhpcy5kbyhuZXh0T3JPYnNlcnZlciwgZXJyb3IsIGNvbXBsZXRlKTtcbiAgICB9O1xuICAgIE5vdGlmaWNhdGlvbi5wcm90b3R5cGUudG9PYnNlcnZhYmxlID0gZnVuY3Rpb24gKCkge1xuICAgICAgICB2YXIgX2EgPSB0aGlzLCBraW5kID0gX2Eua2luZCwgdmFsdWUgPSBfYS52YWx1ZSwgZXJyb3IgPSBfYS5lcnJvcjtcbiAgICAgICAgdmFyIHJlc3VsdCA9IGtpbmQgPT09ICdOJ1xuICAgICAgICAgICAgP1xuICAgICAgICAgICAgICAgIG9mXzEub2YodmFsdWUpXG4gICAgICAgICAgICA6XG4gICAgICAgICAgICAgICAga2luZCA9PT0gJ0UnXG4gICAgICAgICAgICAgICAgICAgID9cbiAgICAgICAgICAgICAgICAgICAgICAgIHRocm93RXJyb3JfMS50aHJvd0Vycm9yKGZ1bmN0aW9uICgpIHsgcmV0dXJuIGVycm9yOyB9KVxuICAgICAgICAgICAgICAgICAgICA6XG4gICAgICAgICAgICAgICAgICAgICAgICBraW5kID09PSAnQydcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICA/XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGVtcHR5XzEuRU1QVFlcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICA6XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDA7XG4gICAgICAgIGlmICghcmVzdWx0KSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKFwiVW5leHBlY3RlZCBub3RpZmljYXRpb24ga2luZCBcIiArIGtpbmQpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgfTtcbiAgICBOb3RpZmljYXRpb24uY3JlYXRlTmV4dCA9IGZ1bmN0aW9uICh2YWx1ZSkge1xuICAgICAgICByZXR1cm4gbmV3IE5vdGlmaWNhdGlvbignTicsIHZhbHVlKTtcbiAgICB9O1xuICAgIE5vdGlmaWNhdGlvbi5jcmVhdGVFcnJvciA9IGZ1bmN0aW9uIChlcnIpIHtcbiAgICAgICAgcmV0dXJuIG5ldyBOb3RpZmljYXRpb24oJ0UnLCB1bmRlZmluZWQsIGVycik7XG4gICAgfTtcbiAgICBOb3RpZmljYXRpb24uY3JlYXRlQ29tcGxldGUgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHJldHVybiBOb3RpZmljYXRpb24uY29tcGxldGVOb3RpZmljYXRpb247XG4gICAgfTtcbiAgICBOb3RpZmljYXRpb24uY29tcGxldGVOb3RpZmljYXRpb24gPSBuZXcgTm90aWZpY2F0aW9uKCdDJyk7XG4gICAgcmV0dXJuIE5vdGlmaWNhdGlvbjtcbn0oKSk7XG5leHBvcnRzLk5vdGlmaWNhdGlvbiA9IE5vdGlmaWNhdGlvbjtcbmZ1bmN0aW9uIG9ic2VydmVOb3RpZmljYXRpb24obm90aWZpY2F0aW9uLCBvYnNlcnZlcikge1xuICAgIHZhciBfYSwgX2IsIF9jO1xuICAgIHZhciBfZCA9IG5vdGlmaWNhdGlvbiwga2luZCA9IF9kLmtpbmQsIHZhbHVlID0gX2QudmFsdWUsIGVycm9yID0gX2QuZXJyb3I7XG4gICAgaWYgKHR5cGVvZiBraW5kICE9PSAnc3RyaW5nJykge1xuICAgICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCdJbnZhbGlkIG5vdGlmaWNhdGlvbiwgbWlzc2luZyBcImtpbmRcIicpO1xuICAgIH1cbiAgICBraW5kID09PSAnTicgPyAoX2EgPSBvYnNlcnZlci5uZXh0KSA9PT0gbnVsbCB8fCBfYSA9PT0gdm9pZCAwID8gdm9pZCAwIDogX2EuY2FsbChvYnNlcnZlciwgdmFsdWUpIDoga2luZCA9PT0gJ0UnID8gKF9iID0gb2JzZXJ2ZXIuZXJyb3IpID09PSBudWxsIHx8IF9iID09PSB2b2lkIDAgPyB2b2lkIDAgOiBfYi5jYWxsKG9ic2VydmVyLCBlcnJvcikgOiAoX2MgPSBvYnNlcnZlci5jb21wbGV0ZSkgPT09IG51bGwgfHwgX2MgPT09IHZvaWQgMCA/IHZvaWQgMCA6IF9jLmNhbGwob2JzZXJ2ZXIpO1xufVxuZXhwb3J0cy5vYnNlcnZlTm90aWZpY2F0aW9uID0gb2JzZXJ2ZU5vdGlmaWNhdGlvbjtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPU5vdGlmaWNhdGlvbi5qcy5tYXAiLCJcInVzZSBzdHJpY3RcIjtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmV4cG9ydHMuY3JlYXRlTm90aWZpY2F0aW9uID0gZXhwb3J0cy5uZXh0Tm90aWZpY2F0aW9uID0gZXhwb3J0cy5lcnJvck5vdGlmaWNhdGlvbiA9IGV4cG9ydHMuQ09NUExFVEVfTk9USUZJQ0FUSU9OID0gdm9pZCAwO1xuZXhwb3J0cy5DT01QTEVURV9OT1RJRklDQVRJT04gPSAoZnVuY3Rpb24gKCkgeyByZXR1cm4gY3JlYXRlTm90aWZpY2F0aW9uKCdDJywgdW5kZWZpbmVkLCB1bmRlZmluZWQpOyB9KSgpO1xuZnVuY3Rpb24gZXJyb3JOb3RpZmljYXRpb24oZXJyb3IpIHtcbiAgICByZXR1cm4gY3JlYXRlTm90aWZpY2F0aW9uKCdFJywgdW5kZWZpbmVkLCBlcnJvcik7XG59XG5leHBvcnRzLmVycm9yTm90aWZpY2F0aW9uID0gZXJyb3JOb3RpZmljYXRpb247XG5mdW5jdGlvbiBuZXh0Tm90aWZpY2F0aW9uKHZhbHVlKSB7XG4gICAgcmV0dXJuIGNyZWF0ZU5vdGlmaWNhdGlvbignTicsIHZhbHVlLCB1bmRlZmluZWQpO1xufVxuZXhwb3J0cy5uZXh0Tm90aWZpY2F0aW9uID0gbmV4dE5vdGlmaWNhdGlvbjtcbmZ1bmN0aW9uIGNyZWF0ZU5vdGlmaWNhdGlvbihraW5kLCB2YWx1ZSwgZXJyb3IpIHtcbiAgICByZXR1cm4ge1xuICAgICAgICBraW5kOiBraW5kLFxuICAgICAgICB2YWx1ZTogdmFsdWUsXG4gICAgICAgIGVycm9yOiBlcnJvcixcbiAgICB9O1xufVxuZXhwb3J0cy5jcmVhdGVOb3RpZmljYXRpb24gPSBjcmVhdGVOb3RpZmljYXRpb247XG4vLyMgc291cmNlTWFwcGluZ1VSTD1Ob3RpZmljYXRpb25GYWN0b3JpZXMuanMubWFwIiwiXCJ1c2Ugc3RyaWN0XCI7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5leHBvcnRzLk9ic2VydmFibGUgPSB2b2lkIDA7XG52YXIgU3Vic2NyaWJlcl8xID0gcmVxdWlyZShcIi4vU3Vic2NyaWJlclwiKTtcbnZhciBTdWJzY3JpcHRpb25fMSA9IHJlcXVpcmUoXCIuL1N1YnNjcmlwdGlvblwiKTtcbnZhciBvYnNlcnZhYmxlXzEgPSByZXF1aXJlKFwiLi9zeW1ib2wvb2JzZXJ2YWJsZVwiKTtcbnZhciBwaXBlXzEgPSByZXF1aXJlKFwiLi91dGlsL3BpcGVcIik7XG52YXIgY29uZmlnXzEgPSByZXF1aXJlKFwiLi9jb25maWdcIik7XG52YXIgaXNGdW5jdGlvbl8xID0gcmVxdWlyZShcIi4vdXRpbC9pc0Z1bmN0aW9uXCIpO1xudmFyIGVycm9yQ29udGV4dF8xID0gcmVxdWlyZShcIi4vdXRpbC9lcnJvckNvbnRleHRcIik7XG52YXIgT2JzZXJ2YWJsZSA9IChmdW5jdGlvbiAoKSB7XG4gICAgZnVuY3Rpb24gT2JzZXJ2YWJsZShzdWJzY3JpYmUpIHtcbiAgICAgICAgaWYgKHN1YnNjcmliZSkge1xuICAgICAgICAgICAgdGhpcy5fc3Vic2NyaWJlID0gc3Vic2NyaWJlO1xuICAgICAgICB9XG4gICAgfVxuICAgIE9ic2VydmFibGUucHJvdG90eXBlLmxpZnQgPSBmdW5jdGlvbiAob3BlcmF0b3IpIHtcbiAgICAgICAgdmFyIG9ic2VydmFibGUgPSBuZXcgT2JzZXJ2YWJsZSgpO1xuICAgICAgICBvYnNlcnZhYmxlLnNvdXJjZSA9IHRoaXM7XG4gICAgICAgIG9ic2VydmFibGUub3BlcmF0b3IgPSBvcGVyYXRvcjtcbiAgICAgICAgcmV0dXJuIG9ic2VydmFibGU7XG4gICAgfTtcbiAgICBPYnNlcnZhYmxlLnByb3RvdHlwZS5zdWJzY3JpYmUgPSBmdW5jdGlvbiAob2JzZXJ2ZXJPck5leHQsIGVycm9yLCBjb21wbGV0ZSkge1xuICAgICAgICB2YXIgX3RoaXMgPSB0aGlzO1xuICAgICAgICB2YXIgc3Vic2NyaWJlciA9IGlzU3Vic2NyaWJlcihvYnNlcnZlck9yTmV4dCkgPyBvYnNlcnZlck9yTmV4dCA6IG5ldyBTdWJzY3JpYmVyXzEuU2FmZVN1YnNjcmliZXIob2JzZXJ2ZXJPck5leHQsIGVycm9yLCBjb21wbGV0ZSk7XG4gICAgICAgIGVycm9yQ29udGV4dF8xLmVycm9yQ29udGV4dChmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICB2YXIgX2EgPSBfdGhpcywgb3BlcmF0b3IgPSBfYS5vcGVyYXRvciwgc291cmNlID0gX2Euc291cmNlO1xuICAgICAgICAgICAgc3Vic2NyaWJlci5hZGQob3BlcmF0b3JcbiAgICAgICAgICAgICAgICA/XG4gICAgICAgICAgICAgICAgICAgIG9wZXJhdG9yLmNhbGwoc3Vic2NyaWJlciwgc291cmNlKVxuICAgICAgICAgICAgICAgIDogc291cmNlXG4gICAgICAgICAgICAgICAgICAgID9cbiAgICAgICAgICAgICAgICAgICAgICAgIF90aGlzLl9zdWJzY3JpYmUoc3Vic2NyaWJlcilcbiAgICAgICAgICAgICAgICAgICAgOlxuICAgICAgICAgICAgICAgICAgICAgICAgX3RoaXMuX3RyeVN1YnNjcmliZShzdWJzY3JpYmVyKSk7XG4gICAgICAgIH0pO1xuICAgICAgICByZXR1cm4gc3Vic2NyaWJlcjtcbiAgICB9O1xuICAgIE9ic2VydmFibGUucHJvdG90eXBlLl90cnlTdWJzY3JpYmUgPSBmdW5jdGlvbiAoc2luaykge1xuICAgICAgICB0cnkge1xuICAgICAgICAgICAgcmV0dXJuIHRoaXMuX3N1YnNjcmliZShzaW5rKTtcbiAgICAgICAgfVxuICAgICAgICBjYXRjaCAoZXJyKSB7XG4gICAgICAgICAgICBzaW5rLmVycm9yKGVycik7XG4gICAgICAgIH1cbiAgICB9O1xuICAgIE9ic2VydmFibGUucHJvdG90eXBlLmZvckVhY2ggPSBmdW5jdGlvbiAobmV4dCwgcHJvbWlzZUN0b3IpIHtcbiAgICAgICAgdmFyIF90aGlzID0gdGhpcztcbiAgICAgICAgcHJvbWlzZUN0b3IgPSBnZXRQcm9taXNlQ3Rvcihwcm9taXNlQ3Rvcik7XG4gICAgICAgIHJldHVybiBuZXcgcHJvbWlzZUN0b3IoZnVuY3Rpb24gKHJlc29sdmUsIHJlamVjdCkge1xuICAgICAgICAgICAgdmFyIHN1YnNjcmliZXIgPSBuZXcgU3Vic2NyaWJlcl8xLlNhZmVTdWJzY3JpYmVyKHtcbiAgICAgICAgICAgICAgICBuZXh0OiBmdW5jdGlvbiAodmFsdWUpIHtcbiAgICAgICAgICAgICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgICAgICAgICAgICAgIG5leHQodmFsdWUpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIGNhdGNoIChlcnIpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJlamVjdChlcnIpO1xuICAgICAgICAgICAgICAgICAgICAgICAgc3Vic2NyaWJlci51bnN1YnNjcmliZSgpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICBlcnJvcjogcmVqZWN0LFxuICAgICAgICAgICAgICAgIGNvbXBsZXRlOiByZXNvbHZlLFxuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICBfdGhpcy5zdWJzY3JpYmUoc3Vic2NyaWJlcik7XG4gICAgICAgIH0pO1xuICAgIH07XG4gICAgT2JzZXJ2YWJsZS5wcm90b3R5cGUuX3N1YnNjcmliZSA9IGZ1bmN0aW9uIChzdWJzY3JpYmVyKSB7XG4gICAgICAgIHZhciBfYTtcbiAgICAgICAgcmV0dXJuIChfYSA9IHRoaXMuc291cmNlKSA9PT0gbnVsbCB8fCBfYSA9PT0gdm9pZCAwID8gdm9pZCAwIDogX2Euc3Vic2NyaWJlKHN1YnNjcmliZXIpO1xuICAgIH07XG4gICAgT2JzZXJ2YWJsZS5wcm90b3R5cGVbb2JzZXJ2YWJsZV8xLm9ic2VydmFibGVdID0gZnVuY3Rpb24gKCkge1xuICAgICAgICByZXR1cm4gdGhpcztcbiAgICB9O1xuICAgIE9ic2VydmFibGUucHJvdG90eXBlLnBpcGUgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHZhciBvcGVyYXRpb25zID0gW107XG4gICAgICAgIGZvciAodmFyIF9pID0gMDsgX2kgPCBhcmd1bWVudHMubGVuZ3RoOyBfaSsrKSB7XG4gICAgICAgICAgICBvcGVyYXRpb25zW19pXSA9IGFyZ3VtZW50c1tfaV07XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHBpcGVfMS5waXBlRnJvbUFycmF5KG9wZXJhdGlvbnMpKHRoaXMpO1xuICAgIH07XG4gICAgT2JzZXJ2YWJsZS5wcm90b3R5cGUudG9Qcm9taXNlID0gZnVuY3Rpb24gKHByb21pc2VDdG9yKSB7XG4gICAgICAgIHZhciBfdGhpcyA9IHRoaXM7XG4gICAgICAgIHByb21pc2VDdG9yID0gZ2V0UHJvbWlzZUN0b3IocHJvbWlzZUN0b3IpO1xuICAgICAgICByZXR1cm4gbmV3IHByb21pc2VDdG9yKGZ1bmN0aW9uIChyZXNvbHZlLCByZWplY3QpIHtcbiAgICAgICAgICAgIHZhciB2YWx1ZTtcbiAgICAgICAgICAgIF90aGlzLnN1YnNjcmliZShmdW5jdGlvbiAoeCkgeyByZXR1cm4gKHZhbHVlID0geCk7IH0sIGZ1bmN0aW9uIChlcnIpIHsgcmV0dXJuIHJlamVjdChlcnIpOyB9LCBmdW5jdGlvbiAoKSB7IHJldHVybiByZXNvbHZlKHZhbHVlKTsgfSk7XG4gICAgICAgIH0pO1xuICAgIH07XG4gICAgT2JzZXJ2YWJsZS5jcmVhdGUgPSBmdW5jdGlvbiAoc3Vic2NyaWJlKSB7XG4gICAgICAgIHJldHVybiBuZXcgT2JzZXJ2YWJsZShzdWJzY3JpYmUpO1xuICAgIH07XG4gICAgcmV0dXJuIE9ic2VydmFibGU7XG59KCkpO1xuZXhwb3J0cy5PYnNlcnZhYmxlID0gT2JzZXJ2YWJsZTtcbmZ1bmN0aW9uIGdldFByb21pc2VDdG9yKHByb21pc2VDdG9yKSB7XG4gICAgdmFyIF9hO1xuICAgIHJldHVybiAoX2EgPSBwcm9taXNlQ3RvciAhPT0gbnVsbCAmJiBwcm9taXNlQ3RvciAhPT0gdm9pZCAwID8gcHJvbWlzZUN0b3IgOiBjb25maWdfMS5jb25maWcuUHJvbWlzZSkgIT09IG51bGwgJiYgX2EgIT09IHZvaWQgMCA/IF9hIDogUHJvbWlzZTtcbn1cbmZ1bmN0aW9uIGlzT2JzZXJ2ZXIodmFsdWUpIHtcbiAgICByZXR1cm4gdmFsdWUgJiYgaXNGdW5jdGlvbl8xLmlzRnVuY3Rpb24odmFsdWUubmV4dCkgJiYgaXNGdW5jdGlvbl8xLmlzRnVuY3Rpb24odmFsdWUuZXJyb3IpICYmIGlzRnVuY3Rpb25fMS5pc0Z1bmN0aW9uKHZhbHVlLmNvbXBsZXRlKTtcbn1cbmZ1bmN0aW9uIGlzU3Vic2NyaWJlcih2YWx1ZSkge1xuICAgIHJldHVybiAodmFsdWUgJiYgdmFsdWUgaW5zdGFuY2VvZiBTdWJzY3JpYmVyXzEuU3Vic2NyaWJlcikgfHwgKGlzT2JzZXJ2ZXIodmFsdWUpICYmIFN1YnNjcmlwdGlvbl8xLmlzU3Vic2NyaXB0aW9uKHZhbHVlKSk7XG59XG4vLyMgc291cmNlTWFwcGluZ1VSTD1PYnNlcnZhYmxlLmpzLm1hcCIsIlwidXNlIHN0cmljdFwiO1xudmFyIF9fZXh0ZW5kcyA9ICh0aGlzICYmIHRoaXMuX19leHRlbmRzKSB8fCAoZnVuY3Rpb24gKCkge1xuICAgIHZhciBleHRlbmRTdGF0aWNzID0gZnVuY3Rpb24gKGQsIGIpIHtcbiAgICAgICAgZXh0ZW5kU3RhdGljcyA9IE9iamVjdC5zZXRQcm90b3R5cGVPZiB8fFxuICAgICAgICAgICAgKHsgX19wcm90b19fOiBbXSB9IGluc3RhbmNlb2YgQXJyYXkgJiYgZnVuY3Rpb24gKGQsIGIpIHsgZC5fX3Byb3RvX18gPSBiOyB9KSB8fFxuICAgICAgICAgICAgZnVuY3Rpb24gKGQsIGIpIHsgZm9yICh2YXIgcCBpbiBiKSBpZiAoT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKGIsIHApKSBkW3BdID0gYltwXTsgfTtcbiAgICAgICAgcmV0dXJuIGV4dGVuZFN0YXRpY3MoZCwgYik7XG4gICAgfTtcbiAgICByZXR1cm4gZnVuY3Rpb24gKGQsIGIpIHtcbiAgICAgICAgaWYgKHR5cGVvZiBiICE9PSBcImZ1bmN0aW9uXCIgJiYgYiAhPT0gbnVsbClcbiAgICAgICAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoXCJDbGFzcyBleHRlbmRzIHZhbHVlIFwiICsgU3RyaW5nKGIpICsgXCIgaXMgbm90IGEgY29uc3RydWN0b3Igb3IgbnVsbFwiKTtcbiAgICAgICAgZXh0ZW5kU3RhdGljcyhkLCBiKTtcbiAgICAgICAgZnVuY3Rpb24gX18oKSB7IHRoaXMuY29uc3RydWN0b3IgPSBkOyB9XG4gICAgICAgIGQucHJvdG90eXBlID0gYiA9PT0gbnVsbCA/IE9iamVjdC5jcmVhdGUoYikgOiAoX18ucHJvdG90eXBlID0gYi5wcm90b3R5cGUsIG5ldyBfXygpKTtcbiAgICB9O1xufSkoKTtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmV4cG9ydHMuUmVwbGF5U3ViamVjdCA9IHZvaWQgMDtcbnZhciBTdWJqZWN0XzEgPSByZXF1aXJlKFwiLi9TdWJqZWN0XCIpO1xudmFyIGRhdGVUaW1lc3RhbXBQcm92aWRlcl8xID0gcmVxdWlyZShcIi4vc2NoZWR1bGVyL2RhdGVUaW1lc3RhbXBQcm92aWRlclwiKTtcbnZhciBSZXBsYXlTdWJqZWN0ID0gKGZ1bmN0aW9uIChfc3VwZXIpIHtcbiAgICBfX2V4dGVuZHMoUmVwbGF5U3ViamVjdCwgX3N1cGVyKTtcbiAgICBmdW5jdGlvbiBSZXBsYXlTdWJqZWN0KF9idWZmZXJTaXplLCBfd2luZG93VGltZSwgX3RpbWVzdGFtcFByb3ZpZGVyKSB7XG4gICAgICAgIGlmIChfYnVmZmVyU2l6ZSA9PT0gdm9pZCAwKSB7IF9idWZmZXJTaXplID0gSW5maW5pdHk7IH1cbiAgICAgICAgaWYgKF93aW5kb3dUaW1lID09PSB2b2lkIDApIHsgX3dpbmRvd1RpbWUgPSBJbmZpbml0eTsgfVxuICAgICAgICBpZiAoX3RpbWVzdGFtcFByb3ZpZGVyID09PSB2b2lkIDApIHsgX3RpbWVzdGFtcFByb3ZpZGVyID0gZGF0ZVRpbWVzdGFtcFByb3ZpZGVyXzEuZGF0ZVRpbWVzdGFtcFByb3ZpZGVyOyB9XG4gICAgICAgIHZhciBfdGhpcyA9IF9zdXBlci5jYWxsKHRoaXMpIHx8IHRoaXM7XG4gICAgICAgIF90aGlzLl9idWZmZXJTaXplID0gX2J1ZmZlclNpemU7XG4gICAgICAgIF90aGlzLl93aW5kb3dUaW1lID0gX3dpbmRvd1RpbWU7XG4gICAgICAgIF90aGlzLl90aW1lc3RhbXBQcm92aWRlciA9IF90aW1lc3RhbXBQcm92aWRlcjtcbiAgICAgICAgX3RoaXMuX2J1ZmZlciA9IFtdO1xuICAgICAgICBfdGhpcy5faW5maW5pdGVUaW1lV2luZG93ID0gdHJ1ZTtcbiAgICAgICAgX3RoaXMuX2luZmluaXRlVGltZVdpbmRvdyA9IF93aW5kb3dUaW1lID09PSBJbmZpbml0eTtcbiAgICAgICAgX3RoaXMuX2J1ZmZlclNpemUgPSBNYXRoLm1heCgxLCBfYnVmZmVyU2l6ZSk7XG4gICAgICAgIF90aGlzLl93aW5kb3dUaW1lID0gTWF0aC5tYXgoMSwgX3dpbmRvd1RpbWUpO1xuICAgICAgICByZXR1cm4gX3RoaXM7XG4gICAgfVxuICAgIFJlcGxheVN1YmplY3QucHJvdG90eXBlLm5leHQgPSBmdW5jdGlvbiAodmFsdWUpIHtcbiAgICAgICAgdmFyIF9hID0gdGhpcywgaXNTdG9wcGVkID0gX2EuaXNTdG9wcGVkLCBfYnVmZmVyID0gX2EuX2J1ZmZlciwgX2luZmluaXRlVGltZVdpbmRvdyA9IF9hLl9pbmZpbml0ZVRpbWVXaW5kb3csIF90aW1lc3RhbXBQcm92aWRlciA9IF9hLl90aW1lc3RhbXBQcm92aWRlciwgX3dpbmRvd1RpbWUgPSBfYS5fd2luZG93VGltZTtcbiAgICAgICAgaWYgKCFpc1N0b3BwZWQpIHtcbiAgICAgICAgICAgIF9idWZmZXIucHVzaCh2YWx1ZSk7XG4gICAgICAgICAgICAhX2luZmluaXRlVGltZVdpbmRvdyAmJiBfYnVmZmVyLnB1c2goX3RpbWVzdGFtcFByb3ZpZGVyLm5vdygpICsgX3dpbmRvd1RpbWUpO1xuICAgICAgICB9XG4gICAgICAgIHRoaXMuX3RyaW1CdWZmZXIoKTtcbiAgICAgICAgX3N1cGVyLnByb3RvdHlwZS5uZXh0LmNhbGwodGhpcywgdmFsdWUpO1xuICAgIH07XG4gICAgUmVwbGF5U3ViamVjdC5wcm90b3R5cGUuX3N1YnNjcmliZSA9IGZ1bmN0aW9uIChzdWJzY3JpYmVyKSB7XG4gICAgICAgIHRoaXMuX3Rocm93SWZDbG9zZWQoKTtcbiAgICAgICAgdGhpcy5fdHJpbUJ1ZmZlcigpO1xuICAgICAgICB2YXIgc3Vic2NyaXB0aW9uID0gdGhpcy5faW5uZXJTdWJzY3JpYmUoc3Vic2NyaWJlcik7XG4gICAgICAgIHZhciBfYSA9IHRoaXMsIF9pbmZpbml0ZVRpbWVXaW5kb3cgPSBfYS5faW5maW5pdGVUaW1lV2luZG93LCBfYnVmZmVyID0gX2EuX2J1ZmZlcjtcbiAgICAgICAgdmFyIGNvcHkgPSBfYnVmZmVyLnNsaWNlKCk7XG4gICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgY29weS5sZW5ndGggJiYgIXN1YnNjcmliZXIuY2xvc2VkOyBpICs9IF9pbmZpbml0ZVRpbWVXaW5kb3cgPyAxIDogMikge1xuICAgICAgICAgICAgc3Vic2NyaWJlci5uZXh0KGNvcHlbaV0pO1xuICAgICAgICB9XG4gICAgICAgIHRoaXMuX2NoZWNrRmluYWxpemVkU3RhdHVzZXMoc3Vic2NyaWJlcik7XG4gICAgICAgIHJldHVybiBzdWJzY3JpcHRpb247XG4gICAgfTtcbiAgICBSZXBsYXlTdWJqZWN0LnByb3RvdHlwZS5fdHJpbUJ1ZmZlciA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgdmFyIF9hID0gdGhpcywgX2J1ZmZlclNpemUgPSBfYS5fYnVmZmVyU2l6ZSwgX3RpbWVzdGFtcFByb3ZpZGVyID0gX2EuX3RpbWVzdGFtcFByb3ZpZGVyLCBfYnVmZmVyID0gX2EuX2J1ZmZlciwgX2luZmluaXRlVGltZVdpbmRvdyA9IF9hLl9pbmZpbml0ZVRpbWVXaW5kb3c7XG4gICAgICAgIHZhciBhZGp1c3RlZEJ1ZmZlclNpemUgPSAoX2luZmluaXRlVGltZVdpbmRvdyA/IDEgOiAyKSAqIF9idWZmZXJTaXplO1xuICAgICAgICBfYnVmZmVyU2l6ZSA8IEluZmluaXR5ICYmIGFkanVzdGVkQnVmZmVyU2l6ZSA8IF9idWZmZXIubGVuZ3RoICYmIF9idWZmZXIuc3BsaWNlKDAsIF9idWZmZXIubGVuZ3RoIC0gYWRqdXN0ZWRCdWZmZXJTaXplKTtcbiAgICAgICAgaWYgKCFfaW5maW5pdGVUaW1lV2luZG93KSB7XG4gICAgICAgICAgICB2YXIgbm93ID0gX3RpbWVzdGFtcFByb3ZpZGVyLm5vdygpO1xuICAgICAgICAgICAgdmFyIGxhc3QgPSAwO1xuICAgICAgICAgICAgZm9yICh2YXIgaSA9IDE7IGkgPCBfYnVmZmVyLmxlbmd0aCAmJiBfYnVmZmVyW2ldIDw9IG5vdzsgaSArPSAyKSB7XG4gICAgICAgICAgICAgICAgbGFzdCA9IGk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBsYXN0ICYmIF9idWZmZXIuc3BsaWNlKDAsIGxhc3QgKyAxKTtcbiAgICAgICAgfVxuICAgIH07XG4gICAgcmV0dXJuIFJlcGxheVN1YmplY3Q7XG59KFN1YmplY3RfMS5TdWJqZWN0KSk7XG5leHBvcnRzLlJlcGxheVN1YmplY3QgPSBSZXBsYXlTdWJqZWN0O1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9UmVwbGF5U3ViamVjdC5qcy5tYXAiLCJcInVzZSBzdHJpY3RcIjtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmV4cG9ydHMuU2NoZWR1bGVyID0gdm9pZCAwO1xudmFyIGRhdGVUaW1lc3RhbXBQcm92aWRlcl8xID0gcmVxdWlyZShcIi4vc2NoZWR1bGVyL2RhdGVUaW1lc3RhbXBQcm92aWRlclwiKTtcbnZhciBTY2hlZHVsZXIgPSAoZnVuY3Rpb24gKCkge1xuICAgIGZ1bmN0aW9uIFNjaGVkdWxlcihzY2hlZHVsZXJBY3Rpb25DdG9yLCBub3cpIHtcbiAgICAgICAgaWYgKG5vdyA9PT0gdm9pZCAwKSB7IG5vdyA9IFNjaGVkdWxlci5ub3c7IH1cbiAgICAgICAgdGhpcy5zY2hlZHVsZXJBY3Rpb25DdG9yID0gc2NoZWR1bGVyQWN0aW9uQ3RvcjtcbiAgICAgICAgdGhpcy5ub3cgPSBub3c7XG4gICAgfVxuICAgIFNjaGVkdWxlci5wcm90b3R5cGUuc2NoZWR1bGUgPSBmdW5jdGlvbiAod29yaywgZGVsYXksIHN0YXRlKSB7XG4gICAgICAgIGlmIChkZWxheSA9PT0gdm9pZCAwKSB7IGRlbGF5ID0gMDsgfVxuICAgICAgICByZXR1cm4gbmV3IHRoaXMuc2NoZWR1bGVyQWN0aW9uQ3Rvcih0aGlzLCB3b3JrKS5zY2hlZHVsZShzdGF0ZSwgZGVsYXkpO1xuICAgIH07XG4gICAgU2NoZWR1bGVyLm5vdyA9IGRhdGVUaW1lc3RhbXBQcm92aWRlcl8xLmRhdGVUaW1lc3RhbXBQcm92aWRlci5ub3c7XG4gICAgcmV0dXJuIFNjaGVkdWxlcjtcbn0oKSk7XG5leHBvcnRzLlNjaGVkdWxlciA9IFNjaGVkdWxlcjtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPVNjaGVkdWxlci5qcy5tYXAiLCJcInVzZSBzdHJpY3RcIjtcbnZhciBfX2V4dGVuZHMgPSAodGhpcyAmJiB0aGlzLl9fZXh0ZW5kcykgfHwgKGZ1bmN0aW9uICgpIHtcbiAgICB2YXIgZXh0ZW5kU3RhdGljcyA9IGZ1bmN0aW9uIChkLCBiKSB7XG4gICAgICAgIGV4dGVuZFN0YXRpY3MgPSBPYmplY3Quc2V0UHJvdG90eXBlT2YgfHxcbiAgICAgICAgICAgICh7IF9fcHJvdG9fXzogW10gfSBpbnN0YW5jZW9mIEFycmF5ICYmIGZ1bmN0aW9uIChkLCBiKSB7IGQuX19wcm90b19fID0gYjsgfSkgfHxcbiAgICAgICAgICAgIGZ1bmN0aW9uIChkLCBiKSB7IGZvciAodmFyIHAgaW4gYikgaWYgKE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChiLCBwKSkgZFtwXSA9IGJbcF07IH07XG4gICAgICAgIHJldHVybiBleHRlbmRTdGF0aWNzKGQsIGIpO1xuICAgIH07XG4gICAgcmV0dXJuIGZ1bmN0aW9uIChkLCBiKSB7XG4gICAgICAgIGlmICh0eXBlb2YgYiAhPT0gXCJmdW5jdGlvblwiICYmIGIgIT09IG51bGwpXG4gICAgICAgICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKFwiQ2xhc3MgZXh0ZW5kcyB2YWx1ZSBcIiArIFN0cmluZyhiKSArIFwiIGlzIG5vdCBhIGNvbnN0cnVjdG9yIG9yIG51bGxcIik7XG4gICAgICAgIGV4dGVuZFN0YXRpY3MoZCwgYik7XG4gICAgICAgIGZ1bmN0aW9uIF9fKCkgeyB0aGlzLmNvbnN0cnVjdG9yID0gZDsgfVxuICAgICAgICBkLnByb3RvdHlwZSA9IGIgPT09IG51bGwgPyBPYmplY3QuY3JlYXRlKGIpIDogKF9fLnByb3RvdHlwZSA9IGIucHJvdG90eXBlLCBuZXcgX18oKSk7XG4gICAgfTtcbn0pKCk7XG52YXIgX192YWx1ZXMgPSAodGhpcyAmJiB0aGlzLl9fdmFsdWVzKSB8fCBmdW5jdGlvbihvKSB7XG4gICAgdmFyIHMgPSB0eXBlb2YgU3ltYm9sID09PSBcImZ1bmN0aW9uXCIgJiYgU3ltYm9sLml0ZXJhdG9yLCBtID0gcyAmJiBvW3NdLCBpID0gMDtcbiAgICBpZiAobSkgcmV0dXJuIG0uY2FsbChvKTtcbiAgICBpZiAobyAmJiB0eXBlb2Ygby5sZW5ndGggPT09IFwibnVtYmVyXCIpIHJldHVybiB7XG4gICAgICAgIG5leHQ6IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIGlmIChvICYmIGkgPj0gby5sZW5ndGgpIG8gPSB2b2lkIDA7XG4gICAgICAgICAgICByZXR1cm4geyB2YWx1ZTogbyAmJiBvW2krK10sIGRvbmU6ICFvIH07XG4gICAgICAgIH1cbiAgICB9O1xuICAgIHRocm93IG5ldyBUeXBlRXJyb3IocyA/IFwiT2JqZWN0IGlzIG5vdCBpdGVyYWJsZS5cIiA6IFwiU3ltYm9sLml0ZXJhdG9yIGlzIG5vdCBkZWZpbmVkLlwiKTtcbn07XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5leHBvcnRzLkFub255bW91c1N1YmplY3QgPSBleHBvcnRzLlN1YmplY3QgPSB2b2lkIDA7XG52YXIgT2JzZXJ2YWJsZV8xID0gcmVxdWlyZShcIi4vT2JzZXJ2YWJsZVwiKTtcbnZhciBTdWJzY3JpcHRpb25fMSA9IHJlcXVpcmUoXCIuL1N1YnNjcmlwdGlvblwiKTtcbnZhciBPYmplY3RVbnN1YnNjcmliZWRFcnJvcl8xID0gcmVxdWlyZShcIi4vdXRpbC9PYmplY3RVbnN1YnNjcmliZWRFcnJvclwiKTtcbnZhciBhcnJSZW1vdmVfMSA9IHJlcXVpcmUoXCIuL3V0aWwvYXJyUmVtb3ZlXCIpO1xudmFyIGVycm9yQ29udGV4dF8xID0gcmVxdWlyZShcIi4vdXRpbC9lcnJvckNvbnRleHRcIik7XG52YXIgU3ViamVjdCA9IChmdW5jdGlvbiAoX3N1cGVyKSB7XG4gICAgX19leHRlbmRzKFN1YmplY3QsIF9zdXBlcik7XG4gICAgZnVuY3Rpb24gU3ViamVjdCgpIHtcbiAgICAgICAgdmFyIF90aGlzID0gX3N1cGVyLmNhbGwodGhpcykgfHwgdGhpcztcbiAgICAgICAgX3RoaXMuY2xvc2VkID0gZmFsc2U7XG4gICAgICAgIF90aGlzLmN1cnJlbnRPYnNlcnZlcnMgPSBudWxsO1xuICAgICAgICBfdGhpcy5vYnNlcnZlcnMgPSBbXTtcbiAgICAgICAgX3RoaXMuaXNTdG9wcGVkID0gZmFsc2U7XG4gICAgICAgIF90aGlzLmhhc0Vycm9yID0gZmFsc2U7XG4gICAgICAgIF90aGlzLnRocm93bkVycm9yID0gbnVsbDtcbiAgICAgICAgcmV0dXJuIF90aGlzO1xuICAgIH1cbiAgICBTdWJqZWN0LnByb3RvdHlwZS5saWZ0ID0gZnVuY3Rpb24gKG9wZXJhdG9yKSB7XG4gICAgICAgIHZhciBzdWJqZWN0ID0gbmV3IEFub255bW91c1N1YmplY3QodGhpcywgdGhpcyk7XG4gICAgICAgIHN1YmplY3Qub3BlcmF0b3IgPSBvcGVyYXRvcjtcbiAgICAgICAgcmV0dXJuIHN1YmplY3Q7XG4gICAgfTtcbiAgICBTdWJqZWN0LnByb3RvdHlwZS5fdGhyb3dJZkNsb3NlZCA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgaWYgKHRoaXMuY2xvc2VkKSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgT2JqZWN0VW5zdWJzY3JpYmVkRXJyb3JfMS5PYmplY3RVbnN1YnNjcmliZWRFcnJvcigpO1xuICAgICAgICB9XG4gICAgfTtcbiAgICBTdWJqZWN0LnByb3RvdHlwZS5uZXh0ID0gZnVuY3Rpb24gKHZhbHVlKSB7XG4gICAgICAgIHZhciBfdGhpcyA9IHRoaXM7XG4gICAgICAgIGVycm9yQ29udGV4dF8xLmVycm9yQ29udGV4dChmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICB2YXIgZV8xLCBfYTtcbiAgICAgICAgICAgIF90aGlzLl90aHJvd0lmQ2xvc2VkKCk7XG4gICAgICAgICAgICBpZiAoIV90aGlzLmlzU3RvcHBlZCkge1xuICAgICAgICAgICAgICAgIGlmICghX3RoaXMuY3VycmVudE9ic2VydmVycykge1xuICAgICAgICAgICAgICAgICAgICBfdGhpcy5jdXJyZW50T2JzZXJ2ZXJzID0gQXJyYXkuZnJvbShfdGhpcy5vYnNlcnZlcnMpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgICAgICAgICBmb3IgKHZhciBfYiA9IF9fdmFsdWVzKF90aGlzLmN1cnJlbnRPYnNlcnZlcnMpLCBfYyA9IF9iLm5leHQoKTsgIV9jLmRvbmU7IF9jID0gX2IubmV4dCgpKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICB2YXIgb2JzZXJ2ZXIgPSBfYy52YWx1ZTtcbiAgICAgICAgICAgICAgICAgICAgICAgIG9ic2VydmVyLm5leHQodmFsdWUpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGNhdGNoIChlXzFfMSkgeyBlXzEgPSB7IGVycm9yOiBlXzFfMSB9OyB9XG4gICAgICAgICAgICAgICAgZmluYWxseSB7XG4gICAgICAgICAgICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoX2MgJiYgIV9jLmRvbmUgJiYgKF9hID0gX2IucmV0dXJuKSkgX2EuY2FsbChfYik7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgZmluYWxseSB7IGlmIChlXzEpIHRocm93IGVfMS5lcnJvcjsgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgfSk7XG4gICAgfTtcbiAgICBTdWJqZWN0LnByb3RvdHlwZS5lcnJvciA9IGZ1bmN0aW9uIChlcnIpIHtcbiAgICAgICAgdmFyIF90aGlzID0gdGhpcztcbiAgICAgICAgZXJyb3JDb250ZXh0XzEuZXJyb3JDb250ZXh0KGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIF90aGlzLl90aHJvd0lmQ2xvc2VkKCk7XG4gICAgICAgICAgICBpZiAoIV90aGlzLmlzU3RvcHBlZCkge1xuICAgICAgICAgICAgICAgIF90aGlzLmhhc0Vycm9yID0gX3RoaXMuaXNTdG9wcGVkID0gdHJ1ZTtcbiAgICAgICAgICAgICAgICBfdGhpcy50aHJvd25FcnJvciA9IGVycjtcbiAgICAgICAgICAgICAgICB2YXIgb2JzZXJ2ZXJzID0gX3RoaXMub2JzZXJ2ZXJzO1xuICAgICAgICAgICAgICAgIHdoaWxlIChvYnNlcnZlcnMubGVuZ3RoKSB7XG4gICAgICAgICAgICAgICAgICAgIG9ic2VydmVycy5zaGlmdCgpLmVycm9yKGVycik7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICB9KTtcbiAgICB9O1xuICAgIFN1YmplY3QucHJvdG90eXBlLmNvbXBsZXRlID0gZnVuY3Rpb24gKCkge1xuICAgICAgICB2YXIgX3RoaXMgPSB0aGlzO1xuICAgICAgICBlcnJvckNvbnRleHRfMS5lcnJvckNvbnRleHQoZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgX3RoaXMuX3Rocm93SWZDbG9zZWQoKTtcbiAgICAgICAgICAgIGlmICghX3RoaXMuaXNTdG9wcGVkKSB7XG4gICAgICAgICAgICAgICAgX3RoaXMuaXNTdG9wcGVkID0gdHJ1ZTtcbiAgICAgICAgICAgICAgICB2YXIgb2JzZXJ2ZXJzID0gX3RoaXMub2JzZXJ2ZXJzO1xuICAgICAgICAgICAgICAgIHdoaWxlIChvYnNlcnZlcnMubGVuZ3RoKSB7XG4gICAgICAgICAgICAgICAgICAgIG9ic2VydmVycy5zaGlmdCgpLmNvbXBsZXRlKCk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICB9KTtcbiAgICB9O1xuICAgIFN1YmplY3QucHJvdG90eXBlLnVuc3Vic2NyaWJlID0gZnVuY3Rpb24gKCkge1xuICAgICAgICB0aGlzLmlzU3RvcHBlZCA9IHRoaXMuY2xvc2VkID0gdHJ1ZTtcbiAgICAgICAgdGhpcy5vYnNlcnZlcnMgPSB0aGlzLmN1cnJlbnRPYnNlcnZlcnMgPSBudWxsO1xuICAgIH07XG4gICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KFN1YmplY3QucHJvdG90eXBlLCBcIm9ic2VydmVkXCIsIHtcbiAgICAgICAgZ2V0OiBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICB2YXIgX2E7XG4gICAgICAgICAgICByZXR1cm4gKChfYSA9IHRoaXMub2JzZXJ2ZXJzKSA9PT0gbnVsbCB8fCBfYSA9PT0gdm9pZCAwID8gdm9pZCAwIDogX2EubGVuZ3RoKSA+IDA7XG4gICAgICAgIH0sXG4gICAgICAgIGVudW1lcmFibGU6IGZhbHNlLFxuICAgICAgICBjb25maWd1cmFibGU6IHRydWVcbiAgICB9KTtcbiAgICBTdWJqZWN0LnByb3RvdHlwZS5fdHJ5U3Vic2NyaWJlID0gZnVuY3Rpb24gKHN1YnNjcmliZXIpIHtcbiAgICAgICAgdGhpcy5fdGhyb3dJZkNsb3NlZCgpO1xuICAgICAgICByZXR1cm4gX3N1cGVyLnByb3RvdHlwZS5fdHJ5U3Vic2NyaWJlLmNhbGwodGhpcywgc3Vic2NyaWJlcik7XG4gICAgfTtcbiAgICBTdWJqZWN0LnByb3RvdHlwZS5fc3Vic2NyaWJlID0gZnVuY3Rpb24gKHN1YnNjcmliZXIpIHtcbiAgICAgICAgdGhpcy5fdGhyb3dJZkNsb3NlZCgpO1xuICAgICAgICB0aGlzLl9jaGVja0ZpbmFsaXplZFN0YXR1c2VzKHN1YnNjcmliZXIpO1xuICAgICAgICByZXR1cm4gdGhpcy5faW5uZXJTdWJzY3JpYmUoc3Vic2NyaWJlcik7XG4gICAgfTtcbiAgICBTdWJqZWN0LnByb3RvdHlwZS5faW5uZXJTdWJzY3JpYmUgPSBmdW5jdGlvbiAoc3Vic2NyaWJlcikge1xuICAgICAgICB2YXIgX3RoaXMgPSB0aGlzO1xuICAgICAgICB2YXIgX2EgPSB0aGlzLCBoYXNFcnJvciA9IF9hLmhhc0Vycm9yLCBpc1N0b3BwZWQgPSBfYS5pc1N0b3BwZWQsIG9ic2VydmVycyA9IF9hLm9ic2VydmVycztcbiAgICAgICAgaWYgKGhhc0Vycm9yIHx8IGlzU3RvcHBlZCkge1xuICAgICAgICAgICAgcmV0dXJuIFN1YnNjcmlwdGlvbl8xLkVNUFRZX1NVQlNDUklQVElPTjtcbiAgICAgICAgfVxuICAgICAgICB0aGlzLmN1cnJlbnRPYnNlcnZlcnMgPSBudWxsO1xuICAgICAgICBvYnNlcnZlcnMucHVzaChzdWJzY3JpYmVyKTtcbiAgICAgICAgcmV0dXJuIG5ldyBTdWJzY3JpcHRpb25fMS5TdWJzY3JpcHRpb24oZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgX3RoaXMuY3VycmVudE9ic2VydmVycyA9IG51bGw7XG4gICAgICAgICAgICBhcnJSZW1vdmVfMS5hcnJSZW1vdmUob2JzZXJ2ZXJzLCBzdWJzY3JpYmVyKTtcbiAgICAgICAgfSk7XG4gICAgfTtcbiAgICBTdWJqZWN0LnByb3RvdHlwZS5fY2hlY2tGaW5hbGl6ZWRTdGF0dXNlcyA9IGZ1bmN0aW9uIChzdWJzY3JpYmVyKSB7XG4gICAgICAgIHZhciBfYSA9IHRoaXMsIGhhc0Vycm9yID0gX2EuaGFzRXJyb3IsIHRocm93bkVycm9yID0gX2EudGhyb3duRXJyb3IsIGlzU3RvcHBlZCA9IF9hLmlzU3RvcHBlZDtcbiAgICAgICAgaWYgKGhhc0Vycm9yKSB7XG4gICAgICAgICAgICBzdWJzY3JpYmVyLmVycm9yKHRocm93bkVycm9yKTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIGlmIChpc1N0b3BwZWQpIHtcbiAgICAgICAgICAgIHN1YnNjcmliZXIuY29tcGxldGUoKTtcbiAgICAgICAgfVxuICAgIH07XG4gICAgU3ViamVjdC5wcm90b3R5cGUuYXNPYnNlcnZhYmxlID0gZnVuY3Rpb24gKCkge1xuICAgICAgICB2YXIgb2JzZXJ2YWJsZSA9IG5ldyBPYnNlcnZhYmxlXzEuT2JzZXJ2YWJsZSgpO1xuICAgICAgICBvYnNlcnZhYmxlLnNvdXJjZSA9IHRoaXM7XG4gICAgICAgIHJldHVybiBvYnNlcnZhYmxlO1xuICAgIH07XG4gICAgU3ViamVjdC5jcmVhdGUgPSBmdW5jdGlvbiAoZGVzdGluYXRpb24sIHNvdXJjZSkge1xuICAgICAgICByZXR1cm4gbmV3IEFub255bW91c1N1YmplY3QoZGVzdGluYXRpb24sIHNvdXJjZSk7XG4gICAgfTtcbiAgICByZXR1cm4gU3ViamVjdDtcbn0oT2JzZXJ2YWJsZV8xLk9ic2VydmFibGUpKTtcbmV4cG9ydHMuU3ViamVjdCA9IFN1YmplY3Q7XG52YXIgQW5vbnltb3VzU3ViamVjdCA9IChmdW5jdGlvbiAoX3N1cGVyKSB7XG4gICAgX19leHRlbmRzKEFub255bW91c1N1YmplY3QsIF9zdXBlcik7XG4gICAgZnVuY3Rpb24gQW5vbnltb3VzU3ViamVjdChkZXN0aW5hdGlvbiwgc291cmNlKSB7XG4gICAgICAgIHZhciBfdGhpcyA9IF9zdXBlci5jYWxsKHRoaXMpIHx8IHRoaXM7XG4gICAgICAgIF90aGlzLmRlc3RpbmF0aW9uID0gZGVzdGluYXRpb247XG4gICAgICAgIF90aGlzLnNvdXJjZSA9IHNvdXJjZTtcbiAgICAgICAgcmV0dXJuIF90aGlzO1xuICAgIH1cbiAgICBBbm9ueW1vdXNTdWJqZWN0LnByb3RvdHlwZS5uZXh0ID0gZnVuY3Rpb24gKHZhbHVlKSB7XG4gICAgICAgIHZhciBfYSwgX2I7XG4gICAgICAgIChfYiA9IChfYSA9IHRoaXMuZGVzdGluYXRpb24pID09PSBudWxsIHx8IF9hID09PSB2b2lkIDAgPyB2b2lkIDAgOiBfYS5uZXh0KSA9PT0gbnVsbCB8fCBfYiA9PT0gdm9pZCAwID8gdm9pZCAwIDogX2IuY2FsbChfYSwgdmFsdWUpO1xuICAgIH07XG4gICAgQW5vbnltb3VzU3ViamVjdC5wcm90b3R5cGUuZXJyb3IgPSBmdW5jdGlvbiAoZXJyKSB7XG4gICAgICAgIHZhciBfYSwgX2I7XG4gICAgICAgIChfYiA9IChfYSA9IHRoaXMuZGVzdGluYXRpb24pID09PSBudWxsIHx8IF9hID09PSB2b2lkIDAgPyB2b2lkIDAgOiBfYS5lcnJvcikgPT09IG51bGwgfHwgX2IgPT09IHZvaWQgMCA/IHZvaWQgMCA6IF9iLmNhbGwoX2EsIGVycik7XG4gICAgfTtcbiAgICBBbm9ueW1vdXNTdWJqZWN0LnByb3RvdHlwZS5jb21wbGV0ZSA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgdmFyIF9hLCBfYjtcbiAgICAgICAgKF9iID0gKF9hID0gdGhpcy5kZXN0aW5hdGlvbikgPT09IG51bGwgfHwgX2EgPT09IHZvaWQgMCA/IHZvaWQgMCA6IF9hLmNvbXBsZXRlKSA9PT0gbnVsbCB8fCBfYiA9PT0gdm9pZCAwID8gdm9pZCAwIDogX2IuY2FsbChfYSk7XG4gICAgfTtcbiAgICBBbm9ueW1vdXNTdWJqZWN0LnByb3RvdHlwZS5fc3Vic2NyaWJlID0gZnVuY3Rpb24gKHN1YnNjcmliZXIpIHtcbiAgICAgICAgdmFyIF9hLCBfYjtcbiAgICAgICAgcmV0dXJuIChfYiA9IChfYSA9IHRoaXMuc291cmNlKSA9PT0gbnVsbCB8fCBfYSA9PT0gdm9pZCAwID8gdm9pZCAwIDogX2Euc3Vic2NyaWJlKHN1YnNjcmliZXIpKSAhPT0gbnVsbCAmJiBfYiAhPT0gdm9pZCAwID8gX2IgOiBTdWJzY3JpcHRpb25fMS5FTVBUWV9TVUJTQ1JJUFRJT047XG4gICAgfTtcbiAgICByZXR1cm4gQW5vbnltb3VzU3ViamVjdDtcbn0oU3ViamVjdCkpO1xuZXhwb3J0cy5Bbm9ueW1vdXNTdWJqZWN0ID0gQW5vbnltb3VzU3ViamVjdDtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPVN1YmplY3QuanMubWFwIiwiXCJ1c2Ugc3RyaWN0XCI7XG52YXIgX19leHRlbmRzID0gKHRoaXMgJiYgdGhpcy5fX2V4dGVuZHMpIHx8IChmdW5jdGlvbiAoKSB7XG4gICAgdmFyIGV4dGVuZFN0YXRpY3MgPSBmdW5jdGlvbiAoZCwgYikge1xuICAgICAgICBleHRlbmRTdGF0aWNzID0gT2JqZWN0LnNldFByb3RvdHlwZU9mIHx8XG4gICAgICAgICAgICAoeyBfX3Byb3RvX186IFtdIH0gaW5zdGFuY2VvZiBBcnJheSAmJiBmdW5jdGlvbiAoZCwgYikgeyBkLl9fcHJvdG9fXyA9IGI7IH0pIHx8XG4gICAgICAgICAgICBmdW5jdGlvbiAoZCwgYikgeyBmb3IgKHZhciBwIGluIGIpIGlmIChPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwoYiwgcCkpIGRbcF0gPSBiW3BdOyB9O1xuICAgICAgICByZXR1cm4gZXh0ZW5kU3RhdGljcyhkLCBiKTtcbiAgICB9O1xuICAgIHJldHVybiBmdW5jdGlvbiAoZCwgYikge1xuICAgICAgICBpZiAodHlwZW9mIGIgIT09IFwiZnVuY3Rpb25cIiAmJiBiICE9PSBudWxsKVxuICAgICAgICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcihcIkNsYXNzIGV4dGVuZHMgdmFsdWUgXCIgKyBTdHJpbmcoYikgKyBcIiBpcyBub3QgYSBjb25zdHJ1Y3RvciBvciBudWxsXCIpO1xuICAgICAgICBleHRlbmRTdGF0aWNzKGQsIGIpO1xuICAgICAgICBmdW5jdGlvbiBfXygpIHsgdGhpcy5jb25zdHJ1Y3RvciA9IGQ7IH1cbiAgICAgICAgZC5wcm90b3R5cGUgPSBiID09PSBudWxsID8gT2JqZWN0LmNyZWF0ZShiKSA6IChfXy5wcm90b3R5cGUgPSBiLnByb3RvdHlwZSwgbmV3IF9fKCkpO1xuICAgIH07XG59KSgpO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuZXhwb3J0cy5FTVBUWV9PQlNFUlZFUiA9IGV4cG9ydHMuU2FmZVN1YnNjcmliZXIgPSBleHBvcnRzLlN1YnNjcmliZXIgPSB2b2lkIDA7XG52YXIgaXNGdW5jdGlvbl8xID0gcmVxdWlyZShcIi4vdXRpbC9pc0Z1bmN0aW9uXCIpO1xudmFyIFN1YnNjcmlwdGlvbl8xID0gcmVxdWlyZShcIi4vU3Vic2NyaXB0aW9uXCIpO1xudmFyIGNvbmZpZ18xID0gcmVxdWlyZShcIi4vY29uZmlnXCIpO1xudmFyIHJlcG9ydFVuaGFuZGxlZEVycm9yXzEgPSByZXF1aXJlKFwiLi91dGlsL3JlcG9ydFVuaGFuZGxlZEVycm9yXCIpO1xudmFyIG5vb3BfMSA9IHJlcXVpcmUoXCIuL3V0aWwvbm9vcFwiKTtcbnZhciBOb3RpZmljYXRpb25GYWN0b3JpZXNfMSA9IHJlcXVpcmUoXCIuL05vdGlmaWNhdGlvbkZhY3Rvcmllc1wiKTtcbnZhciB0aW1lb3V0UHJvdmlkZXJfMSA9IHJlcXVpcmUoXCIuL3NjaGVkdWxlci90aW1lb3V0UHJvdmlkZXJcIik7XG52YXIgZXJyb3JDb250ZXh0XzEgPSByZXF1aXJlKFwiLi91dGlsL2Vycm9yQ29udGV4dFwiKTtcbnZhciBTdWJzY3JpYmVyID0gKGZ1bmN0aW9uIChfc3VwZXIpIHtcbiAgICBfX2V4dGVuZHMoU3Vic2NyaWJlciwgX3N1cGVyKTtcbiAgICBmdW5jdGlvbiBTdWJzY3JpYmVyKGRlc3RpbmF0aW9uKSB7XG4gICAgICAgIHZhciBfdGhpcyA9IF9zdXBlci5jYWxsKHRoaXMpIHx8IHRoaXM7XG4gICAgICAgIF90aGlzLmlzU3RvcHBlZCA9IGZhbHNlO1xuICAgICAgICBpZiAoZGVzdGluYXRpb24pIHtcbiAgICAgICAgICAgIF90aGlzLmRlc3RpbmF0aW9uID0gZGVzdGluYXRpb247XG4gICAgICAgICAgICBpZiAoU3Vic2NyaXB0aW9uXzEuaXNTdWJzY3JpcHRpb24oZGVzdGluYXRpb24pKSB7XG4gICAgICAgICAgICAgICAgZGVzdGluYXRpb24uYWRkKF90aGlzKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIF90aGlzLmRlc3RpbmF0aW9uID0gZXhwb3J0cy5FTVBUWV9PQlNFUlZFUjtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gX3RoaXM7XG4gICAgfVxuICAgIFN1YnNjcmliZXIuY3JlYXRlID0gZnVuY3Rpb24gKG5leHQsIGVycm9yLCBjb21wbGV0ZSkge1xuICAgICAgICByZXR1cm4gbmV3IFNhZmVTdWJzY3JpYmVyKG5leHQsIGVycm9yLCBjb21wbGV0ZSk7XG4gICAgfTtcbiAgICBTdWJzY3JpYmVyLnByb3RvdHlwZS5uZXh0ID0gZnVuY3Rpb24gKHZhbHVlKSB7XG4gICAgICAgIGlmICh0aGlzLmlzU3RvcHBlZCkge1xuICAgICAgICAgICAgaGFuZGxlU3RvcHBlZE5vdGlmaWNhdGlvbihOb3RpZmljYXRpb25GYWN0b3JpZXNfMS5uZXh0Tm90aWZpY2F0aW9uKHZhbHVlKSwgdGhpcyk7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICB0aGlzLl9uZXh0KHZhbHVlKTtcbiAgICAgICAgfVxuICAgIH07XG4gICAgU3Vic2NyaWJlci5wcm90b3R5cGUuZXJyb3IgPSBmdW5jdGlvbiAoZXJyKSB7XG4gICAgICAgIGlmICh0aGlzLmlzU3RvcHBlZCkge1xuICAgICAgICAgICAgaGFuZGxlU3RvcHBlZE5vdGlmaWNhdGlvbihOb3RpZmljYXRpb25GYWN0b3JpZXNfMS5lcnJvck5vdGlmaWNhdGlvbihlcnIpLCB0aGlzKTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIHRoaXMuaXNTdG9wcGVkID0gdHJ1ZTtcbiAgICAgICAgICAgIHRoaXMuX2Vycm9yKGVycik7XG4gICAgICAgIH1cbiAgICB9O1xuICAgIFN1YnNjcmliZXIucHJvdG90eXBlLmNvbXBsZXRlID0gZnVuY3Rpb24gKCkge1xuICAgICAgICBpZiAodGhpcy5pc1N0b3BwZWQpIHtcbiAgICAgICAgICAgIGhhbmRsZVN0b3BwZWROb3RpZmljYXRpb24oTm90aWZpY2F0aW9uRmFjdG9yaWVzXzEuQ09NUExFVEVfTk9USUZJQ0FUSU9OLCB0aGlzKTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIHRoaXMuaXNTdG9wcGVkID0gdHJ1ZTtcbiAgICAgICAgICAgIHRoaXMuX2NvbXBsZXRlKCk7XG4gICAgICAgIH1cbiAgICB9O1xuICAgIFN1YnNjcmliZXIucHJvdG90eXBlLnVuc3Vic2NyaWJlID0gZnVuY3Rpb24gKCkge1xuICAgICAgICBpZiAoIXRoaXMuY2xvc2VkKSB7XG4gICAgICAgICAgICB0aGlzLmlzU3RvcHBlZCA9IHRydWU7XG4gICAgICAgICAgICBfc3VwZXIucHJvdG90eXBlLnVuc3Vic2NyaWJlLmNhbGwodGhpcyk7XG4gICAgICAgICAgICB0aGlzLmRlc3RpbmF0aW9uID0gbnVsbDtcbiAgICAgICAgfVxuICAgIH07XG4gICAgU3Vic2NyaWJlci5wcm90b3R5cGUuX25leHQgPSBmdW5jdGlvbiAodmFsdWUpIHtcbiAgICAgICAgdGhpcy5kZXN0aW5hdGlvbi5uZXh0KHZhbHVlKTtcbiAgICB9O1xuICAgIFN1YnNjcmliZXIucHJvdG90eXBlLl9lcnJvciA9IGZ1bmN0aW9uIChlcnIpIHtcbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgIHRoaXMuZGVzdGluYXRpb24uZXJyb3IoZXJyKTtcbiAgICAgICAgfVxuICAgICAgICBmaW5hbGx5IHtcbiAgICAgICAgICAgIHRoaXMudW5zdWJzY3JpYmUoKTtcbiAgICAgICAgfVxuICAgIH07XG4gICAgU3Vic2NyaWJlci5wcm90b3R5cGUuX2NvbXBsZXRlID0gZnVuY3Rpb24gKCkge1xuICAgICAgICB0cnkge1xuICAgICAgICAgICAgdGhpcy5kZXN0aW5hdGlvbi5jb21wbGV0ZSgpO1xuICAgICAgICB9XG4gICAgICAgIGZpbmFsbHkge1xuICAgICAgICAgICAgdGhpcy51bnN1YnNjcmliZSgpO1xuICAgICAgICB9XG4gICAgfTtcbiAgICByZXR1cm4gU3Vic2NyaWJlcjtcbn0oU3Vic2NyaXB0aW9uXzEuU3Vic2NyaXB0aW9uKSk7XG5leHBvcnRzLlN1YnNjcmliZXIgPSBTdWJzY3JpYmVyO1xudmFyIF9iaW5kID0gRnVuY3Rpb24ucHJvdG90eXBlLmJpbmQ7XG5mdW5jdGlvbiBiaW5kKGZuLCB0aGlzQXJnKSB7XG4gICAgcmV0dXJuIF9iaW5kLmNhbGwoZm4sIHRoaXNBcmcpO1xufVxudmFyIENvbnN1bWVyT2JzZXJ2ZXIgPSAoZnVuY3Rpb24gKCkge1xuICAgIGZ1bmN0aW9uIENvbnN1bWVyT2JzZXJ2ZXIocGFydGlhbE9ic2VydmVyKSB7XG4gICAgICAgIHRoaXMucGFydGlhbE9ic2VydmVyID0gcGFydGlhbE9ic2VydmVyO1xuICAgIH1cbiAgICBDb25zdW1lck9ic2VydmVyLnByb3RvdHlwZS5uZXh0ID0gZnVuY3Rpb24gKHZhbHVlKSB7XG4gICAgICAgIHZhciBwYXJ0aWFsT2JzZXJ2ZXIgPSB0aGlzLnBhcnRpYWxPYnNlcnZlcjtcbiAgICAgICAgaWYgKHBhcnRpYWxPYnNlcnZlci5uZXh0KSB7XG4gICAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgICAgIHBhcnRpYWxPYnNlcnZlci5uZXh0KHZhbHVlKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGNhdGNoIChlcnJvcikge1xuICAgICAgICAgICAgICAgIGhhbmRsZVVuaGFuZGxlZEVycm9yKGVycm9yKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH07XG4gICAgQ29uc3VtZXJPYnNlcnZlci5wcm90b3R5cGUuZXJyb3IgPSBmdW5jdGlvbiAoZXJyKSB7XG4gICAgICAgIHZhciBwYXJ0aWFsT2JzZXJ2ZXIgPSB0aGlzLnBhcnRpYWxPYnNlcnZlcjtcbiAgICAgICAgaWYgKHBhcnRpYWxPYnNlcnZlci5lcnJvcikge1xuICAgICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgICAgICBwYXJ0aWFsT2JzZXJ2ZXIuZXJyb3IoZXJyKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGNhdGNoIChlcnJvcikge1xuICAgICAgICAgICAgICAgIGhhbmRsZVVuaGFuZGxlZEVycm9yKGVycm9yKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIGhhbmRsZVVuaGFuZGxlZEVycm9yKGVycik7XG4gICAgICAgIH1cbiAgICB9O1xuICAgIENvbnN1bWVyT2JzZXJ2ZXIucHJvdG90eXBlLmNvbXBsZXRlID0gZnVuY3Rpb24gKCkge1xuICAgICAgICB2YXIgcGFydGlhbE9ic2VydmVyID0gdGhpcy5wYXJ0aWFsT2JzZXJ2ZXI7XG4gICAgICAgIGlmIChwYXJ0aWFsT2JzZXJ2ZXIuY29tcGxldGUpIHtcbiAgICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICAgICAgcGFydGlhbE9ic2VydmVyLmNvbXBsZXRlKCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBjYXRjaCAoZXJyb3IpIHtcbiAgICAgICAgICAgICAgICBoYW5kbGVVbmhhbmRsZWRFcnJvcihlcnJvcik7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9O1xuICAgIHJldHVybiBDb25zdW1lck9ic2VydmVyO1xufSgpKTtcbnZhciBTYWZlU3Vic2NyaWJlciA9IChmdW5jdGlvbiAoX3N1cGVyKSB7XG4gICAgX19leHRlbmRzKFNhZmVTdWJzY3JpYmVyLCBfc3VwZXIpO1xuICAgIGZ1bmN0aW9uIFNhZmVTdWJzY3JpYmVyKG9ic2VydmVyT3JOZXh0LCBlcnJvciwgY29tcGxldGUpIHtcbiAgICAgICAgdmFyIF90aGlzID0gX3N1cGVyLmNhbGwodGhpcykgfHwgdGhpcztcbiAgICAgICAgdmFyIHBhcnRpYWxPYnNlcnZlcjtcbiAgICAgICAgaWYgKGlzRnVuY3Rpb25fMS5pc0Z1bmN0aW9uKG9ic2VydmVyT3JOZXh0KSB8fCAhb2JzZXJ2ZXJPck5leHQpIHtcbiAgICAgICAgICAgIHBhcnRpYWxPYnNlcnZlciA9IHtcbiAgICAgICAgICAgICAgICBuZXh0OiAob2JzZXJ2ZXJPck5leHQgIT09IG51bGwgJiYgb2JzZXJ2ZXJPck5leHQgIT09IHZvaWQgMCA/IG9ic2VydmVyT3JOZXh0IDogdW5kZWZpbmVkKSxcbiAgICAgICAgICAgICAgICBlcnJvcjogZXJyb3IgIT09IG51bGwgJiYgZXJyb3IgIT09IHZvaWQgMCA/IGVycm9yIDogdW5kZWZpbmVkLFxuICAgICAgICAgICAgICAgIGNvbXBsZXRlOiBjb21wbGV0ZSAhPT0gbnVsbCAmJiBjb21wbGV0ZSAhPT0gdm9pZCAwID8gY29tcGxldGUgOiB1bmRlZmluZWQsXG4gICAgICAgICAgICB9O1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgdmFyIGNvbnRleHRfMTtcbiAgICAgICAgICAgIGlmIChfdGhpcyAmJiBjb25maWdfMS5jb25maWcudXNlRGVwcmVjYXRlZE5leHRDb250ZXh0KSB7XG4gICAgICAgICAgICAgICAgY29udGV4dF8xID0gT2JqZWN0LmNyZWF0ZShvYnNlcnZlck9yTmV4dCk7XG4gICAgICAgICAgICAgICAgY29udGV4dF8xLnVuc3Vic2NyaWJlID0gZnVuY3Rpb24gKCkgeyByZXR1cm4gX3RoaXMudW5zdWJzY3JpYmUoKTsgfTtcbiAgICAgICAgICAgICAgICBwYXJ0aWFsT2JzZXJ2ZXIgPSB7XG4gICAgICAgICAgICAgICAgICAgIG5leHQ6IG9ic2VydmVyT3JOZXh0Lm5leHQgJiYgYmluZChvYnNlcnZlck9yTmV4dC5uZXh0LCBjb250ZXh0XzEpLFxuICAgICAgICAgICAgICAgICAgICBlcnJvcjogb2JzZXJ2ZXJPck5leHQuZXJyb3IgJiYgYmluZChvYnNlcnZlck9yTmV4dC5lcnJvciwgY29udGV4dF8xKSxcbiAgICAgICAgICAgICAgICAgICAgY29tcGxldGU6IG9ic2VydmVyT3JOZXh0LmNvbXBsZXRlICYmIGJpbmQob2JzZXJ2ZXJPck5leHQuY29tcGxldGUsIGNvbnRleHRfMSksXG4gICAgICAgICAgICAgICAgfTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgIHBhcnRpYWxPYnNlcnZlciA9IG9ic2VydmVyT3JOZXh0O1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIF90aGlzLmRlc3RpbmF0aW9uID0gbmV3IENvbnN1bWVyT2JzZXJ2ZXIocGFydGlhbE9ic2VydmVyKTtcbiAgICAgICAgcmV0dXJuIF90aGlzO1xuICAgIH1cbiAgICByZXR1cm4gU2FmZVN1YnNjcmliZXI7XG59KFN1YnNjcmliZXIpKTtcbmV4cG9ydHMuU2FmZVN1YnNjcmliZXIgPSBTYWZlU3Vic2NyaWJlcjtcbmZ1bmN0aW9uIGhhbmRsZVVuaGFuZGxlZEVycm9yKGVycm9yKSB7XG4gICAgaWYgKGNvbmZpZ18xLmNvbmZpZy51c2VEZXByZWNhdGVkU3luY2hyb25vdXNFcnJvckhhbmRsaW5nKSB7XG4gICAgICAgIGVycm9yQ29udGV4dF8xLmNhcHR1cmVFcnJvcihlcnJvcik7XG4gICAgfVxuICAgIGVsc2Uge1xuICAgICAgICByZXBvcnRVbmhhbmRsZWRFcnJvcl8xLnJlcG9ydFVuaGFuZGxlZEVycm9yKGVycm9yKTtcbiAgICB9XG59XG5mdW5jdGlvbiBkZWZhdWx0RXJyb3JIYW5kbGVyKGVycikge1xuICAgIHRocm93IGVycjtcbn1cbmZ1bmN0aW9uIGhhbmRsZVN0b3BwZWROb3RpZmljYXRpb24obm90aWZpY2F0aW9uLCBzdWJzY3JpYmVyKSB7XG4gICAgdmFyIG9uU3RvcHBlZE5vdGlmaWNhdGlvbiA9IGNvbmZpZ18xLmNvbmZpZy5vblN0b3BwZWROb3RpZmljYXRpb247XG4gICAgb25TdG9wcGVkTm90aWZpY2F0aW9uICYmIHRpbWVvdXRQcm92aWRlcl8xLnRpbWVvdXRQcm92aWRlci5zZXRUaW1lb3V0KGZ1bmN0aW9uICgpIHsgcmV0dXJuIG9uU3RvcHBlZE5vdGlmaWNhdGlvbihub3RpZmljYXRpb24sIHN1YnNjcmliZXIpOyB9KTtcbn1cbmV4cG9ydHMuRU1QVFlfT0JTRVJWRVIgPSB7XG4gICAgY2xvc2VkOiB0cnVlLFxuICAgIG5leHQ6IG5vb3BfMS5ub29wLFxuICAgIGVycm9yOiBkZWZhdWx0RXJyb3JIYW5kbGVyLFxuICAgIGNvbXBsZXRlOiBub29wXzEubm9vcCxcbn07XG4vLyMgc291cmNlTWFwcGluZ1VSTD1TdWJzY3JpYmVyLmpzLm1hcCIsIlwidXNlIHN0cmljdFwiO1xudmFyIF9fdmFsdWVzID0gKHRoaXMgJiYgdGhpcy5fX3ZhbHVlcykgfHwgZnVuY3Rpb24obykge1xuICAgIHZhciBzID0gdHlwZW9mIFN5bWJvbCA9PT0gXCJmdW5jdGlvblwiICYmIFN5bWJvbC5pdGVyYXRvciwgbSA9IHMgJiYgb1tzXSwgaSA9IDA7XG4gICAgaWYgKG0pIHJldHVybiBtLmNhbGwobyk7XG4gICAgaWYgKG8gJiYgdHlwZW9mIG8ubGVuZ3RoID09PSBcIm51bWJlclwiKSByZXR1cm4ge1xuICAgICAgICBuZXh0OiBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICBpZiAobyAmJiBpID49IG8ubGVuZ3RoKSBvID0gdm9pZCAwO1xuICAgICAgICAgICAgcmV0dXJuIHsgdmFsdWU6IG8gJiYgb1tpKytdLCBkb25lOiAhbyB9O1xuICAgICAgICB9XG4gICAgfTtcbiAgICB0aHJvdyBuZXcgVHlwZUVycm9yKHMgPyBcIk9iamVjdCBpcyBub3QgaXRlcmFibGUuXCIgOiBcIlN5bWJvbC5pdGVyYXRvciBpcyBub3QgZGVmaW5lZC5cIik7XG59O1xudmFyIF9fcmVhZCA9ICh0aGlzICYmIHRoaXMuX19yZWFkKSB8fCBmdW5jdGlvbiAobywgbikge1xuICAgIHZhciBtID0gdHlwZW9mIFN5bWJvbCA9PT0gXCJmdW5jdGlvblwiICYmIG9bU3ltYm9sLml0ZXJhdG9yXTtcbiAgICBpZiAoIW0pIHJldHVybiBvO1xuICAgIHZhciBpID0gbS5jYWxsKG8pLCByLCBhciA9IFtdLCBlO1xuICAgIHRyeSB7XG4gICAgICAgIHdoaWxlICgobiA9PT0gdm9pZCAwIHx8IG4tLSA+IDApICYmICEociA9IGkubmV4dCgpKS5kb25lKSBhci5wdXNoKHIudmFsdWUpO1xuICAgIH1cbiAgICBjYXRjaCAoZXJyb3IpIHsgZSA9IHsgZXJyb3I6IGVycm9yIH07IH1cbiAgICBmaW5hbGx5IHtcbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgIGlmIChyICYmICFyLmRvbmUgJiYgKG0gPSBpW1wicmV0dXJuXCJdKSkgbS5jYWxsKGkpO1xuICAgICAgICB9XG4gICAgICAgIGZpbmFsbHkgeyBpZiAoZSkgdGhyb3cgZS5lcnJvcjsgfVxuICAgIH1cbiAgICByZXR1cm4gYXI7XG59O1xudmFyIF9fc3ByZWFkQXJyYXkgPSAodGhpcyAmJiB0aGlzLl9fc3ByZWFkQXJyYXkpIHx8IGZ1bmN0aW9uICh0bywgZnJvbSkge1xuICAgIGZvciAodmFyIGkgPSAwLCBpbCA9IGZyb20ubGVuZ3RoLCBqID0gdG8ubGVuZ3RoOyBpIDwgaWw7IGkrKywgaisrKVxuICAgICAgICB0b1tqXSA9IGZyb21baV07XG4gICAgcmV0dXJuIHRvO1xufTtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmV4cG9ydHMuaXNTdWJzY3JpcHRpb24gPSBleHBvcnRzLkVNUFRZX1NVQlNDUklQVElPTiA9IGV4cG9ydHMuU3Vic2NyaXB0aW9uID0gdm9pZCAwO1xudmFyIGlzRnVuY3Rpb25fMSA9IHJlcXVpcmUoXCIuL3V0aWwvaXNGdW5jdGlvblwiKTtcbnZhciBVbnN1YnNjcmlwdGlvbkVycm9yXzEgPSByZXF1aXJlKFwiLi91dGlsL1Vuc3Vic2NyaXB0aW9uRXJyb3JcIik7XG52YXIgYXJyUmVtb3ZlXzEgPSByZXF1aXJlKFwiLi91dGlsL2FyclJlbW92ZVwiKTtcbnZhciBTdWJzY3JpcHRpb24gPSAoZnVuY3Rpb24gKCkge1xuICAgIGZ1bmN0aW9uIFN1YnNjcmlwdGlvbihpbml0aWFsVGVhcmRvd24pIHtcbiAgICAgICAgdGhpcy5pbml0aWFsVGVhcmRvd24gPSBpbml0aWFsVGVhcmRvd247XG4gICAgICAgIHRoaXMuY2xvc2VkID0gZmFsc2U7XG4gICAgICAgIHRoaXMuX3BhcmVudGFnZSA9IG51bGw7XG4gICAgICAgIHRoaXMuX2ZpbmFsaXplcnMgPSBudWxsO1xuICAgIH1cbiAgICBTdWJzY3JpcHRpb24ucHJvdG90eXBlLnVuc3Vic2NyaWJlID0gZnVuY3Rpb24gKCkge1xuICAgICAgICB2YXIgZV8xLCBfYSwgZV8yLCBfYjtcbiAgICAgICAgdmFyIGVycm9ycztcbiAgICAgICAgaWYgKCF0aGlzLmNsb3NlZCkge1xuICAgICAgICAgICAgdGhpcy5jbG9zZWQgPSB0cnVlO1xuICAgICAgICAgICAgdmFyIF9wYXJlbnRhZ2UgPSB0aGlzLl9wYXJlbnRhZ2U7XG4gICAgICAgICAgICBpZiAoX3BhcmVudGFnZSkge1xuICAgICAgICAgICAgICAgIHRoaXMuX3BhcmVudGFnZSA9IG51bGw7XG4gICAgICAgICAgICAgICAgaWYgKEFycmF5LmlzQXJyYXkoX3BhcmVudGFnZSkpIHtcbiAgICAgICAgICAgICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGZvciAodmFyIF9wYXJlbnRhZ2VfMSA9IF9fdmFsdWVzKF9wYXJlbnRhZ2UpLCBfcGFyZW50YWdlXzFfMSA9IF9wYXJlbnRhZ2VfMS5uZXh0KCk7ICFfcGFyZW50YWdlXzFfMS5kb25lOyBfcGFyZW50YWdlXzFfMSA9IF9wYXJlbnRhZ2VfMS5uZXh0KCkpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgcGFyZW50XzEgPSBfcGFyZW50YWdlXzFfMS52YWx1ZTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBwYXJlbnRfMS5yZW1vdmUodGhpcyk7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgY2F0Y2ggKGVfMV8xKSB7IGVfMSA9IHsgZXJyb3I6IGVfMV8xIH07IH1cbiAgICAgICAgICAgICAgICAgICAgZmluYWxseSB7XG4gICAgICAgICAgICAgICAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChfcGFyZW50YWdlXzFfMSAmJiAhX3BhcmVudGFnZV8xXzEuZG9uZSAmJiAoX2EgPSBfcGFyZW50YWdlXzEucmV0dXJuKSkgX2EuY2FsbChfcGFyZW50YWdlXzEpO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgZmluYWxseSB7IGlmIChlXzEpIHRocm93IGVfMS5lcnJvcjsgfVxuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICBfcGFyZW50YWdlLnJlbW92ZSh0aGlzKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICB2YXIgaW5pdGlhbEZpbmFsaXplciA9IHRoaXMuaW5pdGlhbFRlYXJkb3duO1xuICAgICAgICAgICAgaWYgKGlzRnVuY3Rpb25fMS5pc0Z1bmN0aW9uKGluaXRpYWxGaW5hbGl6ZXIpKSB7XG4gICAgICAgICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgICAgICAgICAgaW5pdGlhbEZpbmFsaXplcigpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBjYXRjaCAoZSkge1xuICAgICAgICAgICAgICAgICAgICBlcnJvcnMgPSBlIGluc3RhbmNlb2YgVW5zdWJzY3JpcHRpb25FcnJvcl8xLlVuc3Vic2NyaXB0aW9uRXJyb3IgPyBlLmVycm9ycyA6IFtlXTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICB2YXIgX2ZpbmFsaXplcnMgPSB0aGlzLl9maW5hbGl6ZXJzO1xuICAgICAgICAgICAgaWYgKF9maW5hbGl6ZXJzKSB7XG4gICAgICAgICAgICAgICAgdGhpcy5fZmluYWxpemVycyA9IG51bGw7XG4gICAgICAgICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgICAgICAgICAgZm9yICh2YXIgX2ZpbmFsaXplcnNfMSA9IF9fdmFsdWVzKF9maW5hbGl6ZXJzKSwgX2ZpbmFsaXplcnNfMV8xID0gX2ZpbmFsaXplcnNfMS5uZXh0KCk7ICFfZmluYWxpemVyc18xXzEuZG9uZTsgX2ZpbmFsaXplcnNfMV8xID0gX2ZpbmFsaXplcnNfMS5uZXh0KCkpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhciBmaW5hbGl6ZXIgPSBfZmluYWxpemVyc18xXzEudmFsdWU7XG4gICAgICAgICAgICAgICAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGV4ZWNGaW5hbGl6ZXIoZmluYWxpemVyKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIGNhdGNoIChlcnIpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBlcnJvcnMgPSBlcnJvcnMgIT09IG51bGwgJiYgZXJyb3JzICE9PSB2b2lkIDAgPyBlcnJvcnMgOiBbXTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoZXJyIGluc3RhbmNlb2YgVW5zdWJzY3JpcHRpb25FcnJvcl8xLlVuc3Vic2NyaXB0aW9uRXJyb3IpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZXJyb3JzID0gX19zcHJlYWRBcnJheShfX3NwcmVhZEFycmF5KFtdLCBfX3JlYWQoZXJyb3JzKSksIF9fcmVhZChlcnIuZXJyb3JzKSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBlcnJvcnMucHVzaChlcnIpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBjYXRjaCAoZV8yXzEpIHsgZV8yID0geyBlcnJvcjogZV8yXzEgfTsgfVxuICAgICAgICAgICAgICAgIGZpbmFsbHkge1xuICAgICAgICAgICAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKF9maW5hbGl6ZXJzXzFfMSAmJiAhX2ZpbmFsaXplcnNfMV8xLmRvbmUgJiYgKF9iID0gX2ZpbmFsaXplcnNfMS5yZXR1cm4pKSBfYi5jYWxsKF9maW5hbGl6ZXJzXzEpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIGZpbmFsbHkgeyBpZiAoZV8yKSB0aHJvdyBlXzIuZXJyb3I7IH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAoZXJyb3JzKSB7XG4gICAgICAgICAgICAgICAgdGhyb3cgbmV3IFVuc3Vic2NyaXB0aW9uRXJyb3JfMS5VbnN1YnNjcmlwdGlvbkVycm9yKGVycm9ycyk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9O1xuICAgIFN1YnNjcmlwdGlvbi5wcm90b3R5cGUuYWRkID0gZnVuY3Rpb24gKHRlYXJkb3duKSB7XG4gICAgICAgIHZhciBfYTtcbiAgICAgICAgaWYgKHRlYXJkb3duICYmIHRlYXJkb3duICE9PSB0aGlzKSB7XG4gICAgICAgICAgICBpZiAodGhpcy5jbG9zZWQpIHtcbiAgICAgICAgICAgICAgICBleGVjRmluYWxpemVyKHRlYXJkb3duKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgIGlmICh0ZWFyZG93biBpbnN0YW5jZW9mIFN1YnNjcmlwdGlvbikge1xuICAgICAgICAgICAgICAgICAgICBpZiAodGVhcmRvd24uY2xvc2VkIHx8IHRlYXJkb3duLl9oYXNQYXJlbnQodGhpcykpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICB0ZWFyZG93bi5fYWRkUGFyZW50KHRoaXMpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAodGhpcy5fZmluYWxpemVycyA9IChfYSA9IHRoaXMuX2ZpbmFsaXplcnMpICE9PSBudWxsICYmIF9hICE9PSB2b2lkIDAgPyBfYSA6IFtdKS5wdXNoKHRlYXJkb3duKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH07XG4gICAgU3Vic2NyaXB0aW9uLnByb3RvdHlwZS5faGFzUGFyZW50ID0gZnVuY3Rpb24gKHBhcmVudCkge1xuICAgICAgICB2YXIgX3BhcmVudGFnZSA9IHRoaXMuX3BhcmVudGFnZTtcbiAgICAgICAgcmV0dXJuIF9wYXJlbnRhZ2UgPT09IHBhcmVudCB8fCAoQXJyYXkuaXNBcnJheShfcGFyZW50YWdlKSAmJiBfcGFyZW50YWdlLmluY2x1ZGVzKHBhcmVudCkpO1xuICAgIH07XG4gICAgU3Vic2NyaXB0aW9uLnByb3RvdHlwZS5fYWRkUGFyZW50ID0gZnVuY3Rpb24gKHBhcmVudCkge1xuICAgICAgICB2YXIgX3BhcmVudGFnZSA9IHRoaXMuX3BhcmVudGFnZTtcbiAgICAgICAgdGhpcy5fcGFyZW50YWdlID0gQXJyYXkuaXNBcnJheShfcGFyZW50YWdlKSA/IChfcGFyZW50YWdlLnB1c2gocGFyZW50KSwgX3BhcmVudGFnZSkgOiBfcGFyZW50YWdlID8gW19wYXJlbnRhZ2UsIHBhcmVudF0gOiBwYXJlbnQ7XG4gICAgfTtcbiAgICBTdWJzY3JpcHRpb24ucHJvdG90eXBlLl9yZW1vdmVQYXJlbnQgPSBmdW5jdGlvbiAocGFyZW50KSB7XG4gICAgICAgIHZhciBfcGFyZW50YWdlID0gdGhpcy5fcGFyZW50YWdlO1xuICAgICAgICBpZiAoX3BhcmVudGFnZSA9PT0gcGFyZW50KSB7XG4gICAgICAgICAgICB0aGlzLl9wYXJlbnRhZ2UgPSBudWxsO1xuICAgICAgICB9XG4gICAgICAgIGVsc2UgaWYgKEFycmF5LmlzQXJyYXkoX3BhcmVudGFnZSkpIHtcbiAgICAgICAgICAgIGFyclJlbW92ZV8xLmFyclJlbW92ZShfcGFyZW50YWdlLCBwYXJlbnQpO1xuICAgICAgICB9XG4gICAgfTtcbiAgICBTdWJzY3JpcHRpb24ucHJvdG90eXBlLnJlbW92ZSA9IGZ1bmN0aW9uICh0ZWFyZG93bikge1xuICAgICAgICB2YXIgX2ZpbmFsaXplcnMgPSB0aGlzLl9maW5hbGl6ZXJzO1xuICAgICAgICBfZmluYWxpemVycyAmJiBhcnJSZW1vdmVfMS5hcnJSZW1vdmUoX2ZpbmFsaXplcnMsIHRlYXJkb3duKTtcbiAgICAgICAgaWYgKHRlYXJkb3duIGluc3RhbmNlb2YgU3Vic2NyaXB0aW9uKSB7XG4gICAgICAgICAgICB0ZWFyZG93bi5fcmVtb3ZlUGFyZW50KHRoaXMpO1xuICAgICAgICB9XG4gICAgfTtcbiAgICBTdWJzY3JpcHRpb24uRU1QVFkgPSAoZnVuY3Rpb24gKCkge1xuICAgICAgICB2YXIgZW1wdHkgPSBuZXcgU3Vic2NyaXB0aW9uKCk7XG4gICAgICAgIGVtcHR5LmNsb3NlZCA9IHRydWU7XG4gICAgICAgIHJldHVybiBlbXB0eTtcbiAgICB9KSgpO1xuICAgIHJldHVybiBTdWJzY3JpcHRpb247XG59KCkpO1xuZXhwb3J0cy5TdWJzY3JpcHRpb24gPSBTdWJzY3JpcHRpb247XG5leHBvcnRzLkVNUFRZX1NVQlNDUklQVElPTiA9IFN1YnNjcmlwdGlvbi5FTVBUWTtcbmZ1bmN0aW9uIGlzU3Vic2NyaXB0aW9uKHZhbHVlKSB7XG4gICAgcmV0dXJuICh2YWx1ZSBpbnN0YW5jZW9mIFN1YnNjcmlwdGlvbiB8fFxuICAgICAgICAodmFsdWUgJiYgJ2Nsb3NlZCcgaW4gdmFsdWUgJiYgaXNGdW5jdGlvbl8xLmlzRnVuY3Rpb24odmFsdWUucmVtb3ZlKSAmJiBpc0Z1bmN0aW9uXzEuaXNGdW5jdGlvbih2YWx1ZS5hZGQpICYmIGlzRnVuY3Rpb25fMS5pc0Z1bmN0aW9uKHZhbHVlLnVuc3Vic2NyaWJlKSkpO1xufVxuZXhwb3J0cy5pc1N1YnNjcmlwdGlvbiA9IGlzU3Vic2NyaXB0aW9uO1xuZnVuY3Rpb24gZXhlY0ZpbmFsaXplcihmaW5hbGl6ZXIpIHtcbiAgICBpZiAoaXNGdW5jdGlvbl8xLmlzRnVuY3Rpb24oZmluYWxpemVyKSkge1xuICAgICAgICBmaW5hbGl6ZXIoKTtcbiAgICB9XG4gICAgZWxzZSB7XG4gICAgICAgIGZpbmFsaXplci51bnN1YnNjcmliZSgpO1xuICAgIH1cbn1cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPVN1YnNjcmlwdGlvbi5qcy5tYXAiLCJcInVzZSBzdHJpY3RcIjtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmV4cG9ydHMuY29uZmlnID0gdm9pZCAwO1xuZXhwb3J0cy5jb25maWcgPSB7XG4gICAgb25VbmhhbmRsZWRFcnJvcjogbnVsbCxcbiAgICBvblN0b3BwZWROb3RpZmljYXRpb246IG51bGwsXG4gICAgUHJvbWlzZTogdW5kZWZpbmVkLFxuICAgIHVzZURlcHJlY2F0ZWRTeW5jaHJvbm91c0Vycm9ySGFuZGxpbmc6IGZhbHNlLFxuICAgIHVzZURlcHJlY2F0ZWROZXh0Q29udGV4dDogZmFsc2UsXG59O1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9Y29uZmlnLmpzLm1hcCIsIlwidXNlIHN0cmljdFwiO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuZXhwb3J0cy5maXJzdFZhbHVlRnJvbSA9IHZvaWQgMDtcbnZhciBFbXB0eUVycm9yXzEgPSByZXF1aXJlKFwiLi91dGlsL0VtcHR5RXJyb3JcIik7XG52YXIgU3Vic2NyaWJlcl8xID0gcmVxdWlyZShcIi4vU3Vic2NyaWJlclwiKTtcbmZ1bmN0aW9uIGZpcnN0VmFsdWVGcm9tKHNvdXJjZSwgY29uZmlnKSB7XG4gICAgdmFyIGhhc0NvbmZpZyA9IHR5cGVvZiBjb25maWcgPT09ICdvYmplY3QnO1xuICAgIHJldHVybiBuZXcgUHJvbWlzZShmdW5jdGlvbiAocmVzb2x2ZSwgcmVqZWN0KSB7XG4gICAgICAgIHZhciBzdWJzY3JpYmVyID0gbmV3IFN1YnNjcmliZXJfMS5TYWZlU3Vic2NyaWJlcih7XG4gICAgICAgICAgICBuZXh0OiBmdW5jdGlvbiAodmFsdWUpIHtcbiAgICAgICAgICAgICAgICByZXNvbHZlKHZhbHVlKTtcbiAgICAgICAgICAgICAgICBzdWJzY3JpYmVyLnVuc3Vic2NyaWJlKCk7XG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgZXJyb3I6IHJlamVjdCxcbiAgICAgICAgICAgIGNvbXBsZXRlOiBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgaWYgKGhhc0NvbmZpZykge1xuICAgICAgICAgICAgICAgICAgICByZXNvbHZlKGNvbmZpZy5kZWZhdWx0VmFsdWUpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgcmVqZWN0KG5ldyBFbXB0eUVycm9yXzEuRW1wdHlFcnJvcigpKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9LFxuICAgICAgICB9KTtcbiAgICAgICAgc291cmNlLnN1YnNjcmliZShzdWJzY3JpYmVyKTtcbiAgICB9KTtcbn1cbmV4cG9ydHMuZmlyc3RWYWx1ZUZyb20gPSBmaXJzdFZhbHVlRnJvbTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWZpcnN0VmFsdWVGcm9tLmpzLm1hcCIsIlwidXNlIHN0cmljdFwiO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuZXhwb3J0cy5sYXN0VmFsdWVGcm9tID0gdm9pZCAwO1xudmFyIEVtcHR5RXJyb3JfMSA9IHJlcXVpcmUoXCIuL3V0aWwvRW1wdHlFcnJvclwiKTtcbmZ1bmN0aW9uIGxhc3RWYWx1ZUZyb20oc291cmNlLCBjb25maWcpIHtcbiAgICB2YXIgaGFzQ29uZmlnID0gdHlwZW9mIGNvbmZpZyA9PT0gJ29iamVjdCc7XG4gICAgcmV0dXJuIG5ldyBQcm9taXNlKGZ1bmN0aW9uIChyZXNvbHZlLCByZWplY3QpIHtcbiAgICAgICAgdmFyIF9oYXNWYWx1ZSA9IGZhbHNlO1xuICAgICAgICB2YXIgX3ZhbHVlO1xuICAgICAgICBzb3VyY2Uuc3Vic2NyaWJlKHtcbiAgICAgICAgICAgIG5leHQ6IGZ1bmN0aW9uICh2YWx1ZSkge1xuICAgICAgICAgICAgICAgIF92YWx1ZSA9IHZhbHVlO1xuICAgICAgICAgICAgICAgIF9oYXNWYWx1ZSA9IHRydWU7XG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgZXJyb3I6IHJlamVjdCxcbiAgICAgICAgICAgIGNvbXBsZXRlOiBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgaWYgKF9oYXNWYWx1ZSkge1xuICAgICAgICAgICAgICAgICAgICByZXNvbHZlKF92YWx1ZSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGVsc2UgaWYgKGhhc0NvbmZpZykge1xuICAgICAgICAgICAgICAgICAgICByZXNvbHZlKGNvbmZpZy5kZWZhdWx0VmFsdWUpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgcmVqZWN0KG5ldyBFbXB0eUVycm9yXzEuRW1wdHlFcnJvcigpKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9LFxuICAgICAgICB9KTtcbiAgICB9KTtcbn1cbmV4cG9ydHMubGFzdFZhbHVlRnJvbSA9IGxhc3RWYWx1ZUZyb207XG4vLyMgc291cmNlTWFwcGluZ1VSTD1sYXN0VmFsdWVGcm9tLmpzLm1hcCIsIlwidXNlIHN0cmljdFwiO1xudmFyIF9fZXh0ZW5kcyA9ICh0aGlzICYmIHRoaXMuX19leHRlbmRzKSB8fCAoZnVuY3Rpb24gKCkge1xuICAgIHZhciBleHRlbmRTdGF0aWNzID0gZnVuY3Rpb24gKGQsIGIpIHtcbiAgICAgICAgZXh0ZW5kU3RhdGljcyA9IE9iamVjdC5zZXRQcm90b3R5cGVPZiB8fFxuICAgICAgICAgICAgKHsgX19wcm90b19fOiBbXSB9IGluc3RhbmNlb2YgQXJyYXkgJiYgZnVuY3Rpb24gKGQsIGIpIHsgZC5fX3Byb3RvX18gPSBiOyB9KSB8fFxuICAgICAgICAgICAgZnVuY3Rpb24gKGQsIGIpIHsgZm9yICh2YXIgcCBpbiBiKSBpZiAoT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKGIsIHApKSBkW3BdID0gYltwXTsgfTtcbiAgICAgICAgcmV0dXJuIGV4dGVuZFN0YXRpY3MoZCwgYik7XG4gICAgfTtcbiAgICByZXR1cm4gZnVuY3Rpb24gKGQsIGIpIHtcbiAgICAgICAgaWYgKHR5cGVvZiBiICE9PSBcImZ1bmN0aW9uXCIgJiYgYiAhPT0gbnVsbClcbiAgICAgICAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoXCJDbGFzcyBleHRlbmRzIHZhbHVlIFwiICsgU3RyaW5nKGIpICsgXCIgaXMgbm90IGEgY29uc3RydWN0b3Igb3IgbnVsbFwiKTtcbiAgICAgICAgZXh0ZW5kU3RhdGljcyhkLCBiKTtcbiAgICAgICAgZnVuY3Rpb24gX18oKSB7IHRoaXMuY29uc3RydWN0b3IgPSBkOyB9XG4gICAgICAgIGQucHJvdG90eXBlID0gYiA9PT0gbnVsbCA/IE9iamVjdC5jcmVhdGUoYikgOiAoX18ucHJvdG90eXBlID0gYi5wcm90b3R5cGUsIG5ldyBfXygpKTtcbiAgICB9O1xufSkoKTtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmV4cG9ydHMuQ29ubmVjdGFibGVPYnNlcnZhYmxlID0gdm9pZCAwO1xudmFyIE9ic2VydmFibGVfMSA9IHJlcXVpcmUoXCIuLi9PYnNlcnZhYmxlXCIpO1xudmFyIFN1YnNjcmlwdGlvbl8xID0gcmVxdWlyZShcIi4uL1N1YnNjcmlwdGlvblwiKTtcbnZhciByZWZDb3VudF8xID0gcmVxdWlyZShcIi4uL29wZXJhdG9ycy9yZWZDb3VudFwiKTtcbnZhciBPcGVyYXRvclN1YnNjcmliZXJfMSA9IHJlcXVpcmUoXCIuLi9vcGVyYXRvcnMvT3BlcmF0b3JTdWJzY3JpYmVyXCIpO1xudmFyIGxpZnRfMSA9IHJlcXVpcmUoXCIuLi91dGlsL2xpZnRcIik7XG52YXIgQ29ubmVjdGFibGVPYnNlcnZhYmxlID0gKGZ1bmN0aW9uIChfc3VwZXIpIHtcbiAgICBfX2V4dGVuZHMoQ29ubmVjdGFibGVPYnNlcnZhYmxlLCBfc3VwZXIpO1xuICAgIGZ1bmN0aW9uIENvbm5lY3RhYmxlT2JzZXJ2YWJsZShzb3VyY2UsIHN1YmplY3RGYWN0b3J5KSB7XG4gICAgICAgIHZhciBfdGhpcyA9IF9zdXBlci5jYWxsKHRoaXMpIHx8IHRoaXM7XG4gICAgICAgIF90aGlzLnNvdXJjZSA9IHNvdXJjZTtcbiAgICAgICAgX3RoaXMuc3ViamVjdEZhY3RvcnkgPSBzdWJqZWN0RmFjdG9yeTtcbiAgICAgICAgX3RoaXMuX3N1YmplY3QgPSBudWxsO1xuICAgICAgICBfdGhpcy5fcmVmQ291bnQgPSAwO1xuICAgICAgICBfdGhpcy5fY29ubmVjdGlvbiA9IG51bGw7XG4gICAgICAgIGlmIChsaWZ0XzEuaGFzTGlmdChzb3VyY2UpKSB7XG4gICAgICAgICAgICBfdGhpcy5saWZ0ID0gc291cmNlLmxpZnQ7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIF90aGlzO1xuICAgIH1cbiAgICBDb25uZWN0YWJsZU9ic2VydmFibGUucHJvdG90eXBlLl9zdWJzY3JpYmUgPSBmdW5jdGlvbiAoc3Vic2NyaWJlcikge1xuICAgICAgICByZXR1cm4gdGhpcy5nZXRTdWJqZWN0KCkuc3Vic2NyaWJlKHN1YnNjcmliZXIpO1xuICAgIH07XG4gICAgQ29ubmVjdGFibGVPYnNlcnZhYmxlLnByb3RvdHlwZS5nZXRTdWJqZWN0ID0gZnVuY3Rpb24gKCkge1xuICAgICAgICB2YXIgc3ViamVjdCA9IHRoaXMuX3N1YmplY3Q7XG4gICAgICAgIGlmICghc3ViamVjdCB8fCBzdWJqZWN0LmlzU3RvcHBlZCkge1xuICAgICAgICAgICAgdGhpcy5fc3ViamVjdCA9IHRoaXMuc3ViamVjdEZhY3RvcnkoKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gdGhpcy5fc3ViamVjdDtcbiAgICB9O1xuICAgIENvbm5lY3RhYmxlT2JzZXJ2YWJsZS5wcm90b3R5cGUuX3RlYXJkb3duID0gZnVuY3Rpb24gKCkge1xuICAgICAgICB0aGlzLl9yZWZDb3VudCA9IDA7XG4gICAgICAgIHZhciBfY29ubmVjdGlvbiA9IHRoaXMuX2Nvbm5lY3Rpb247XG4gICAgICAgIHRoaXMuX3N1YmplY3QgPSB0aGlzLl9jb25uZWN0aW9uID0gbnVsbDtcbiAgICAgICAgX2Nvbm5lY3Rpb24gPT09IG51bGwgfHwgX2Nvbm5lY3Rpb24gPT09IHZvaWQgMCA/IHZvaWQgMCA6IF9jb25uZWN0aW9uLnVuc3Vic2NyaWJlKCk7XG4gICAgfTtcbiAgICBDb25uZWN0YWJsZU9ic2VydmFibGUucHJvdG90eXBlLmNvbm5lY3QgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHZhciBfdGhpcyA9IHRoaXM7XG4gICAgICAgIHZhciBjb25uZWN0aW9uID0gdGhpcy5fY29ubmVjdGlvbjtcbiAgICAgICAgaWYgKCFjb25uZWN0aW9uKSB7XG4gICAgICAgICAgICBjb25uZWN0aW9uID0gdGhpcy5fY29ubmVjdGlvbiA9IG5ldyBTdWJzY3JpcHRpb25fMS5TdWJzY3JpcHRpb24oKTtcbiAgICAgICAgICAgIHZhciBzdWJqZWN0XzEgPSB0aGlzLmdldFN1YmplY3QoKTtcbiAgICAgICAgICAgIGNvbm5lY3Rpb24uYWRkKHRoaXMuc291cmNlLnN1YnNjcmliZShPcGVyYXRvclN1YnNjcmliZXJfMS5jcmVhdGVPcGVyYXRvclN1YnNjcmliZXIoc3ViamVjdF8xLCB1bmRlZmluZWQsIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICBfdGhpcy5fdGVhcmRvd24oKTtcbiAgICAgICAgICAgICAgICBzdWJqZWN0XzEuY29tcGxldGUoKTtcbiAgICAgICAgICAgIH0sIGZ1bmN0aW9uIChlcnIpIHtcbiAgICAgICAgICAgICAgICBfdGhpcy5fdGVhcmRvd24oKTtcbiAgICAgICAgICAgICAgICBzdWJqZWN0XzEuZXJyb3IoZXJyKTtcbiAgICAgICAgICAgIH0sIGZ1bmN0aW9uICgpIHsgcmV0dXJuIF90aGlzLl90ZWFyZG93bigpOyB9KSkpO1xuICAgICAgICAgICAgaWYgKGNvbm5lY3Rpb24uY2xvc2VkKSB7XG4gICAgICAgICAgICAgICAgdGhpcy5fY29ubmVjdGlvbiA9IG51bGw7XG4gICAgICAgICAgICAgICAgY29ubmVjdGlvbiA9IFN1YnNjcmlwdGlvbl8xLlN1YnNjcmlwdGlvbi5FTVBUWTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gY29ubmVjdGlvbjtcbiAgICB9O1xuICAgIENvbm5lY3RhYmxlT2JzZXJ2YWJsZS5wcm90b3R5cGUucmVmQ291bnQgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHJldHVybiByZWZDb3VudF8xLnJlZkNvdW50KCkodGhpcyk7XG4gICAgfTtcbiAgICByZXR1cm4gQ29ubmVjdGFibGVPYnNlcnZhYmxlO1xufShPYnNlcnZhYmxlXzEuT2JzZXJ2YWJsZSkpO1xuZXhwb3J0cy5Db25uZWN0YWJsZU9ic2VydmFibGUgPSBDb25uZWN0YWJsZU9ic2VydmFibGU7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1Db25uZWN0YWJsZU9ic2VydmFibGUuanMubWFwIiwiXCJ1c2Ugc3RyaWN0XCI7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5leHBvcnRzLmJpbmRDYWxsYmFjayA9IHZvaWQgMDtcbnZhciBiaW5kQ2FsbGJhY2tJbnRlcm5hbHNfMSA9IHJlcXVpcmUoXCIuL2JpbmRDYWxsYmFja0ludGVybmFsc1wiKTtcbmZ1bmN0aW9uIGJpbmRDYWxsYmFjayhjYWxsYmFja0Z1bmMsIHJlc3VsdFNlbGVjdG9yLCBzY2hlZHVsZXIpIHtcbiAgICByZXR1cm4gYmluZENhbGxiYWNrSW50ZXJuYWxzXzEuYmluZENhbGxiYWNrSW50ZXJuYWxzKGZhbHNlLCBjYWxsYmFja0Z1bmMsIHJlc3VsdFNlbGVjdG9yLCBzY2hlZHVsZXIpO1xufVxuZXhwb3J0cy5iaW5kQ2FsbGJhY2sgPSBiaW5kQ2FsbGJhY2s7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1iaW5kQ2FsbGJhY2suanMubWFwIiwiXCJ1c2Ugc3RyaWN0XCI7XG52YXIgX19yZWFkID0gKHRoaXMgJiYgdGhpcy5fX3JlYWQpIHx8IGZ1bmN0aW9uIChvLCBuKSB7XG4gICAgdmFyIG0gPSB0eXBlb2YgU3ltYm9sID09PSBcImZ1bmN0aW9uXCIgJiYgb1tTeW1ib2wuaXRlcmF0b3JdO1xuICAgIGlmICghbSkgcmV0dXJuIG87XG4gICAgdmFyIGkgPSBtLmNhbGwobyksIHIsIGFyID0gW10sIGU7XG4gICAgdHJ5IHtcbiAgICAgICAgd2hpbGUgKChuID09PSB2b2lkIDAgfHwgbi0tID4gMCkgJiYgIShyID0gaS5uZXh0KCkpLmRvbmUpIGFyLnB1c2goci52YWx1ZSk7XG4gICAgfVxuICAgIGNhdGNoIChlcnJvcikgeyBlID0geyBlcnJvcjogZXJyb3IgfTsgfVxuICAgIGZpbmFsbHkge1xuICAgICAgICB0cnkge1xuICAgICAgICAgICAgaWYgKHIgJiYgIXIuZG9uZSAmJiAobSA9IGlbXCJyZXR1cm5cIl0pKSBtLmNhbGwoaSk7XG4gICAgICAgIH1cbiAgICAgICAgZmluYWxseSB7IGlmIChlKSB0aHJvdyBlLmVycm9yOyB9XG4gICAgfVxuICAgIHJldHVybiBhcjtcbn07XG52YXIgX19zcHJlYWRBcnJheSA9ICh0aGlzICYmIHRoaXMuX19zcHJlYWRBcnJheSkgfHwgZnVuY3Rpb24gKHRvLCBmcm9tKSB7XG4gICAgZm9yICh2YXIgaSA9IDAsIGlsID0gZnJvbS5sZW5ndGgsIGogPSB0by5sZW5ndGg7IGkgPCBpbDsgaSsrLCBqKyspXG4gICAgICAgIHRvW2pdID0gZnJvbVtpXTtcbiAgICByZXR1cm4gdG87XG59O1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuZXhwb3J0cy5iaW5kQ2FsbGJhY2tJbnRlcm5hbHMgPSB2b2lkIDA7XG52YXIgaXNTY2hlZHVsZXJfMSA9IHJlcXVpcmUoXCIuLi91dGlsL2lzU2NoZWR1bGVyXCIpO1xudmFyIE9ic2VydmFibGVfMSA9IHJlcXVpcmUoXCIuLi9PYnNlcnZhYmxlXCIpO1xudmFyIHN1YnNjcmliZU9uXzEgPSByZXF1aXJlKFwiLi4vb3BlcmF0b3JzL3N1YnNjcmliZU9uXCIpO1xudmFyIG1hcE9uZU9yTWFueUFyZ3NfMSA9IHJlcXVpcmUoXCIuLi91dGlsL21hcE9uZU9yTWFueUFyZ3NcIik7XG52YXIgb2JzZXJ2ZU9uXzEgPSByZXF1aXJlKFwiLi4vb3BlcmF0b3JzL29ic2VydmVPblwiKTtcbnZhciBBc3luY1N1YmplY3RfMSA9IHJlcXVpcmUoXCIuLi9Bc3luY1N1YmplY3RcIik7XG5mdW5jdGlvbiBiaW5kQ2FsbGJhY2tJbnRlcm5hbHMoaXNOb2RlU3R5bGUsIGNhbGxiYWNrRnVuYywgcmVzdWx0U2VsZWN0b3IsIHNjaGVkdWxlcikge1xuICAgIGlmIChyZXN1bHRTZWxlY3Rvcikge1xuICAgICAgICBpZiAoaXNTY2hlZHVsZXJfMS5pc1NjaGVkdWxlcihyZXN1bHRTZWxlY3RvcikpIHtcbiAgICAgICAgICAgIHNjaGVkdWxlciA9IHJlc3VsdFNlbGVjdG9yO1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgcmV0dXJuIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICB2YXIgYXJncyA9IFtdO1xuICAgICAgICAgICAgICAgIGZvciAodmFyIF9pID0gMDsgX2kgPCBhcmd1bWVudHMubGVuZ3RoOyBfaSsrKSB7XG4gICAgICAgICAgICAgICAgICAgIGFyZ3NbX2ldID0gYXJndW1lbnRzW19pXTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgcmV0dXJuIGJpbmRDYWxsYmFja0ludGVybmFscyhpc05vZGVTdHlsZSwgY2FsbGJhY2tGdW5jLCBzY2hlZHVsZXIpXG4gICAgICAgICAgICAgICAgICAgIC5hcHBseSh0aGlzLCBhcmdzKVxuICAgICAgICAgICAgICAgICAgICAucGlwZShtYXBPbmVPck1hbnlBcmdzXzEubWFwT25lT3JNYW55QXJncyhyZXN1bHRTZWxlY3RvcikpO1xuICAgICAgICAgICAgfTtcbiAgICAgICAgfVxuICAgIH1cbiAgICBpZiAoc2NoZWR1bGVyKSB7XG4gICAgICAgIHJldHVybiBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICB2YXIgYXJncyA9IFtdO1xuICAgICAgICAgICAgZm9yICh2YXIgX2kgPSAwOyBfaSA8IGFyZ3VtZW50cy5sZW5ndGg7IF9pKyspIHtcbiAgICAgICAgICAgICAgICBhcmdzW19pXSA9IGFyZ3VtZW50c1tfaV07XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4gYmluZENhbGxiYWNrSW50ZXJuYWxzKGlzTm9kZVN0eWxlLCBjYWxsYmFja0Z1bmMpXG4gICAgICAgICAgICAgICAgLmFwcGx5KHRoaXMsIGFyZ3MpXG4gICAgICAgICAgICAgICAgLnBpcGUoc3Vic2NyaWJlT25fMS5zdWJzY3JpYmVPbihzY2hlZHVsZXIpLCBvYnNlcnZlT25fMS5vYnNlcnZlT24oc2NoZWR1bGVyKSk7XG4gICAgICAgIH07XG4gICAgfVxuICAgIHJldHVybiBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHZhciBfdGhpcyA9IHRoaXM7XG4gICAgICAgIHZhciBhcmdzID0gW107XG4gICAgICAgIGZvciAodmFyIF9pID0gMDsgX2kgPCBhcmd1bWVudHMubGVuZ3RoOyBfaSsrKSB7XG4gICAgICAgICAgICBhcmdzW19pXSA9IGFyZ3VtZW50c1tfaV07XG4gICAgICAgIH1cbiAgICAgICAgdmFyIHN1YmplY3QgPSBuZXcgQXN5bmNTdWJqZWN0XzEuQXN5bmNTdWJqZWN0KCk7XG4gICAgICAgIHZhciB1bmluaXRpYWxpemVkID0gdHJ1ZTtcbiAgICAgICAgcmV0dXJuIG5ldyBPYnNlcnZhYmxlXzEuT2JzZXJ2YWJsZShmdW5jdGlvbiAoc3Vic2NyaWJlcikge1xuICAgICAgICAgICAgdmFyIHN1YnMgPSBzdWJqZWN0LnN1YnNjcmliZShzdWJzY3JpYmVyKTtcbiAgICAgICAgICAgIGlmICh1bmluaXRpYWxpemVkKSB7XG4gICAgICAgICAgICAgICAgdW5pbml0aWFsaXplZCA9IGZhbHNlO1xuICAgICAgICAgICAgICAgIHZhciBpc0FzeW5jXzEgPSBmYWxzZTtcbiAgICAgICAgICAgICAgICB2YXIgaXNDb21wbGV0ZV8xID0gZmFsc2U7XG4gICAgICAgICAgICAgICAgY2FsbGJhY2tGdW5jLmFwcGx5KF90aGlzLCBfX3NwcmVhZEFycmF5KF9fc3ByZWFkQXJyYXkoW10sIF9fcmVhZChhcmdzKSksIFtcbiAgICAgICAgICAgICAgICAgICAgZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgdmFyIHJlc3VsdHMgPSBbXTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGZvciAodmFyIF9pID0gMDsgX2kgPCBhcmd1bWVudHMubGVuZ3RoOyBfaSsrKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcmVzdWx0c1tfaV0gPSBhcmd1bWVudHNbX2ldO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGlzTm9kZVN0eWxlKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIGVyciA9IHJlc3VsdHMuc2hpZnQoKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoZXJyICE9IG51bGwpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgc3ViamVjdC5lcnJvcihlcnIpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgc3ViamVjdC5uZXh0KDEgPCByZXN1bHRzLmxlbmd0aCA/IHJlc3VsdHMgOiByZXN1bHRzWzBdKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGlzQ29tcGxldGVfMSA9IHRydWU7XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoaXNBc3luY18xKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgc3ViamVjdC5jb21wbGV0ZSgpO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgIF0pKTtcbiAgICAgICAgICAgICAgICBpZiAoaXNDb21wbGV0ZV8xKSB7XG4gICAgICAgICAgICAgICAgICAgIHN1YmplY3QuY29tcGxldGUoKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgaXNBc3luY18xID0gdHJ1ZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybiBzdWJzO1xuICAgICAgICB9KTtcbiAgICB9O1xufVxuZXhwb3J0cy5iaW5kQ2FsbGJhY2tJbnRlcm5hbHMgPSBiaW5kQ2FsbGJhY2tJbnRlcm5hbHM7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1iaW5kQ2FsbGJhY2tJbnRlcm5hbHMuanMubWFwIiwiXCJ1c2Ugc3RyaWN0XCI7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5leHBvcnRzLmJpbmROb2RlQ2FsbGJhY2sgPSB2b2lkIDA7XG52YXIgYmluZENhbGxiYWNrSW50ZXJuYWxzXzEgPSByZXF1aXJlKFwiLi9iaW5kQ2FsbGJhY2tJbnRlcm5hbHNcIik7XG5mdW5jdGlvbiBiaW5kTm9kZUNhbGxiYWNrKGNhbGxiYWNrRnVuYywgcmVzdWx0U2VsZWN0b3IsIHNjaGVkdWxlcikge1xuICAgIHJldHVybiBiaW5kQ2FsbGJhY2tJbnRlcm5hbHNfMS5iaW5kQ2FsbGJhY2tJbnRlcm5hbHModHJ1ZSwgY2FsbGJhY2tGdW5jLCByZXN1bHRTZWxlY3Rvciwgc2NoZWR1bGVyKTtcbn1cbmV4cG9ydHMuYmluZE5vZGVDYWxsYmFjayA9IGJpbmROb2RlQ2FsbGJhY2s7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1iaW5kTm9kZUNhbGxiYWNrLmpzLm1hcCIsIlwidXNlIHN0cmljdFwiO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuZXhwb3J0cy5jb21iaW5lTGF0ZXN0SW5pdCA9IGV4cG9ydHMuY29tYmluZUxhdGVzdCA9IHZvaWQgMDtcbnZhciBPYnNlcnZhYmxlXzEgPSByZXF1aXJlKFwiLi4vT2JzZXJ2YWJsZVwiKTtcbnZhciBhcmdzQXJnQXJyYXlPck9iamVjdF8xID0gcmVxdWlyZShcIi4uL3V0aWwvYXJnc0FyZ0FycmF5T3JPYmplY3RcIik7XG52YXIgZnJvbV8xID0gcmVxdWlyZShcIi4vZnJvbVwiKTtcbnZhciBpZGVudGl0eV8xID0gcmVxdWlyZShcIi4uL3V0aWwvaWRlbnRpdHlcIik7XG52YXIgbWFwT25lT3JNYW55QXJnc18xID0gcmVxdWlyZShcIi4uL3V0aWwvbWFwT25lT3JNYW55QXJnc1wiKTtcbnZhciBhcmdzXzEgPSByZXF1aXJlKFwiLi4vdXRpbC9hcmdzXCIpO1xudmFyIGNyZWF0ZU9iamVjdF8xID0gcmVxdWlyZShcIi4uL3V0aWwvY3JlYXRlT2JqZWN0XCIpO1xudmFyIE9wZXJhdG9yU3Vic2NyaWJlcl8xID0gcmVxdWlyZShcIi4uL29wZXJhdG9ycy9PcGVyYXRvclN1YnNjcmliZXJcIik7XG52YXIgZXhlY3V0ZVNjaGVkdWxlXzEgPSByZXF1aXJlKFwiLi4vdXRpbC9leGVjdXRlU2NoZWR1bGVcIik7XG5mdW5jdGlvbiBjb21iaW5lTGF0ZXN0KCkge1xuICAgIHZhciBhcmdzID0gW107XG4gICAgZm9yICh2YXIgX2kgPSAwOyBfaSA8IGFyZ3VtZW50cy5sZW5ndGg7IF9pKyspIHtcbiAgICAgICAgYXJnc1tfaV0gPSBhcmd1bWVudHNbX2ldO1xuICAgIH1cbiAgICB2YXIgc2NoZWR1bGVyID0gYXJnc18xLnBvcFNjaGVkdWxlcihhcmdzKTtcbiAgICB2YXIgcmVzdWx0U2VsZWN0b3IgPSBhcmdzXzEucG9wUmVzdWx0U2VsZWN0b3IoYXJncyk7XG4gICAgdmFyIF9hID0gYXJnc0FyZ0FycmF5T3JPYmplY3RfMS5hcmdzQXJnQXJyYXlPck9iamVjdChhcmdzKSwgb2JzZXJ2YWJsZXMgPSBfYS5hcmdzLCBrZXlzID0gX2Eua2V5cztcbiAgICBpZiAob2JzZXJ2YWJsZXMubGVuZ3RoID09PSAwKSB7XG4gICAgICAgIHJldHVybiBmcm9tXzEuZnJvbShbXSwgc2NoZWR1bGVyKTtcbiAgICB9XG4gICAgdmFyIHJlc3VsdCA9IG5ldyBPYnNlcnZhYmxlXzEuT2JzZXJ2YWJsZShjb21iaW5lTGF0ZXN0SW5pdChvYnNlcnZhYmxlcywgc2NoZWR1bGVyLCBrZXlzXG4gICAgICAgID9cbiAgICAgICAgICAgIGZ1bmN0aW9uICh2YWx1ZXMpIHsgcmV0dXJuIGNyZWF0ZU9iamVjdF8xLmNyZWF0ZU9iamVjdChrZXlzLCB2YWx1ZXMpOyB9XG4gICAgICAgIDpcbiAgICAgICAgICAgIGlkZW50aXR5XzEuaWRlbnRpdHkpKTtcbiAgICByZXR1cm4gcmVzdWx0U2VsZWN0b3IgPyByZXN1bHQucGlwZShtYXBPbmVPck1hbnlBcmdzXzEubWFwT25lT3JNYW55QXJncyhyZXN1bHRTZWxlY3RvcikpIDogcmVzdWx0O1xufVxuZXhwb3J0cy5jb21iaW5lTGF0ZXN0ID0gY29tYmluZUxhdGVzdDtcbmZ1bmN0aW9uIGNvbWJpbmVMYXRlc3RJbml0KG9ic2VydmFibGVzLCBzY2hlZHVsZXIsIHZhbHVlVHJhbnNmb3JtKSB7XG4gICAgaWYgKHZhbHVlVHJhbnNmb3JtID09PSB2b2lkIDApIHsgdmFsdWVUcmFuc2Zvcm0gPSBpZGVudGl0eV8xLmlkZW50aXR5OyB9XG4gICAgcmV0dXJuIGZ1bmN0aW9uIChzdWJzY3JpYmVyKSB7XG4gICAgICAgIG1heWJlU2NoZWR1bGUoc2NoZWR1bGVyLCBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICB2YXIgbGVuZ3RoID0gb2JzZXJ2YWJsZXMubGVuZ3RoO1xuICAgICAgICAgICAgdmFyIHZhbHVlcyA9IG5ldyBBcnJheShsZW5ndGgpO1xuICAgICAgICAgICAgdmFyIGFjdGl2ZSA9IGxlbmd0aDtcbiAgICAgICAgICAgIHZhciByZW1haW5pbmdGaXJzdFZhbHVlcyA9IGxlbmd0aDtcbiAgICAgICAgICAgIHZhciBfbG9vcF8xID0gZnVuY3Rpb24gKGkpIHtcbiAgICAgICAgICAgICAgICBtYXliZVNjaGVkdWxlKHNjaGVkdWxlciwgZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgICAgICB2YXIgc291cmNlID0gZnJvbV8xLmZyb20ob2JzZXJ2YWJsZXNbaV0sIHNjaGVkdWxlcik7XG4gICAgICAgICAgICAgICAgICAgIHZhciBoYXNGaXJzdFZhbHVlID0gZmFsc2U7XG4gICAgICAgICAgICAgICAgICAgIHNvdXJjZS5zdWJzY3JpYmUoT3BlcmF0b3JTdWJzY3JpYmVyXzEuY3JlYXRlT3BlcmF0b3JTdWJzY3JpYmVyKHN1YnNjcmliZXIsIGZ1bmN0aW9uICh2YWx1ZSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgdmFsdWVzW2ldID0gdmFsdWU7XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoIWhhc0ZpcnN0VmFsdWUpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBoYXNGaXJzdFZhbHVlID0gdHJ1ZTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZW1haW5pbmdGaXJzdFZhbHVlcy0tO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKCFyZW1haW5pbmdGaXJzdFZhbHVlcykge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHN1YnNjcmliZXIubmV4dCh2YWx1ZVRyYW5zZm9ybSh2YWx1ZXMuc2xpY2UoKSkpO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICB9LCBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoIS0tYWN0aXZlKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgc3Vic2NyaWJlci5jb21wbGV0ZSgpO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICB9KSk7XG4gICAgICAgICAgICAgICAgfSwgc3Vic2NyaWJlcik7XG4gICAgICAgICAgICB9O1xuICAgICAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBsZW5ndGg7IGkrKykge1xuICAgICAgICAgICAgICAgIF9sb29wXzEoaSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0sIHN1YnNjcmliZXIpO1xuICAgIH07XG59XG5leHBvcnRzLmNvbWJpbmVMYXRlc3RJbml0ID0gY29tYmluZUxhdGVzdEluaXQ7XG5mdW5jdGlvbiBtYXliZVNjaGVkdWxlKHNjaGVkdWxlciwgZXhlY3V0ZSwgc3Vic2NyaXB0aW9uKSB7XG4gICAgaWYgKHNjaGVkdWxlcikge1xuICAgICAgICBleGVjdXRlU2NoZWR1bGVfMS5leGVjdXRlU2NoZWR1bGUoc3Vic2NyaXB0aW9uLCBzY2hlZHVsZXIsIGV4ZWN1dGUpO1xuICAgIH1cbiAgICBlbHNlIHtcbiAgICAgICAgZXhlY3V0ZSgpO1xuICAgIH1cbn1cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWNvbWJpbmVMYXRlc3QuanMubWFwIiwiXCJ1c2Ugc3RyaWN0XCI7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5leHBvcnRzLmNvbmNhdCA9IHZvaWQgMDtcbnZhciBjb25jYXRBbGxfMSA9IHJlcXVpcmUoXCIuLi9vcGVyYXRvcnMvY29uY2F0QWxsXCIpO1xudmFyIGFyZ3NfMSA9IHJlcXVpcmUoXCIuLi91dGlsL2FyZ3NcIik7XG52YXIgZnJvbV8xID0gcmVxdWlyZShcIi4vZnJvbVwiKTtcbmZ1bmN0aW9uIGNvbmNhdCgpIHtcbiAgICB2YXIgYXJncyA9IFtdO1xuICAgIGZvciAodmFyIF9pID0gMDsgX2kgPCBhcmd1bWVudHMubGVuZ3RoOyBfaSsrKSB7XG4gICAgICAgIGFyZ3NbX2ldID0gYXJndW1lbnRzW19pXTtcbiAgICB9XG4gICAgcmV0dXJuIGNvbmNhdEFsbF8xLmNvbmNhdEFsbCgpKGZyb21fMS5mcm9tKGFyZ3MsIGFyZ3NfMS5wb3BTY2hlZHVsZXIoYXJncykpKTtcbn1cbmV4cG9ydHMuY29uY2F0ID0gY29uY2F0O1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9Y29uY2F0LmpzLm1hcCIsIlwidXNlIHN0cmljdFwiO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuZXhwb3J0cy5jb25uZWN0YWJsZSA9IHZvaWQgMDtcbnZhciBTdWJqZWN0XzEgPSByZXF1aXJlKFwiLi4vU3ViamVjdFwiKTtcbnZhciBPYnNlcnZhYmxlXzEgPSByZXF1aXJlKFwiLi4vT2JzZXJ2YWJsZVwiKTtcbnZhciBkZWZlcl8xID0gcmVxdWlyZShcIi4vZGVmZXJcIik7XG52YXIgREVGQVVMVF9DT05GSUcgPSB7XG4gICAgY29ubmVjdG9yOiBmdW5jdGlvbiAoKSB7IHJldHVybiBuZXcgU3ViamVjdF8xLlN1YmplY3QoKTsgfSxcbiAgICByZXNldE9uRGlzY29ubmVjdDogdHJ1ZSxcbn07XG5mdW5jdGlvbiBjb25uZWN0YWJsZShzb3VyY2UsIGNvbmZpZykge1xuICAgIGlmIChjb25maWcgPT09IHZvaWQgMCkgeyBjb25maWcgPSBERUZBVUxUX0NPTkZJRzsgfVxuICAgIHZhciBjb25uZWN0aW9uID0gbnVsbDtcbiAgICB2YXIgY29ubmVjdG9yID0gY29uZmlnLmNvbm5lY3RvciwgX2EgPSBjb25maWcucmVzZXRPbkRpc2Nvbm5lY3QsIHJlc2V0T25EaXNjb25uZWN0ID0gX2EgPT09IHZvaWQgMCA/IHRydWUgOiBfYTtcbiAgICB2YXIgc3ViamVjdCA9IGNvbm5lY3RvcigpO1xuICAgIHZhciByZXN1bHQgPSBuZXcgT2JzZXJ2YWJsZV8xLk9ic2VydmFibGUoZnVuY3Rpb24gKHN1YnNjcmliZXIpIHtcbiAgICAgICAgcmV0dXJuIHN1YmplY3Quc3Vic2NyaWJlKHN1YnNjcmliZXIpO1xuICAgIH0pO1xuICAgIHJlc3VsdC5jb25uZWN0ID0gZnVuY3Rpb24gKCkge1xuICAgICAgICBpZiAoIWNvbm5lY3Rpb24gfHwgY29ubmVjdGlvbi5jbG9zZWQpIHtcbiAgICAgICAgICAgIGNvbm5lY3Rpb24gPSBkZWZlcl8xLmRlZmVyKGZ1bmN0aW9uICgpIHsgcmV0dXJuIHNvdXJjZTsgfSkuc3Vic2NyaWJlKHN1YmplY3QpO1xuICAgICAgICAgICAgaWYgKHJlc2V0T25EaXNjb25uZWN0KSB7XG4gICAgICAgICAgICAgICAgY29ubmVjdGlvbi5hZGQoZnVuY3Rpb24gKCkgeyByZXR1cm4gKHN1YmplY3QgPSBjb25uZWN0b3IoKSk7IH0pO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHJldHVybiBjb25uZWN0aW9uO1xuICAgIH07XG4gICAgcmV0dXJuIHJlc3VsdDtcbn1cbmV4cG9ydHMuY29ubmVjdGFibGUgPSBjb25uZWN0YWJsZTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWNvbm5lY3RhYmxlLmpzLm1hcCIsIlwidXNlIHN0cmljdFwiO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuZXhwb3J0cy5kZWZlciA9IHZvaWQgMDtcbnZhciBPYnNlcnZhYmxlXzEgPSByZXF1aXJlKFwiLi4vT2JzZXJ2YWJsZVwiKTtcbnZhciBpbm5lckZyb21fMSA9IHJlcXVpcmUoXCIuL2lubmVyRnJvbVwiKTtcbmZ1bmN0aW9uIGRlZmVyKG9ic2VydmFibGVGYWN0b3J5KSB7XG4gICAgcmV0dXJuIG5ldyBPYnNlcnZhYmxlXzEuT2JzZXJ2YWJsZShmdW5jdGlvbiAoc3Vic2NyaWJlcikge1xuICAgICAgICBpbm5lckZyb21fMS5pbm5lckZyb20ob2JzZXJ2YWJsZUZhY3RvcnkoKSkuc3Vic2NyaWJlKHN1YnNjcmliZXIpO1xuICAgIH0pO1xufVxuZXhwb3J0cy5kZWZlciA9IGRlZmVyO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9ZGVmZXIuanMubWFwIiwiXCJ1c2Ugc3RyaWN0XCI7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5leHBvcnRzLmFuaW1hdGlvbkZyYW1lcyA9IHZvaWQgMDtcbnZhciBPYnNlcnZhYmxlXzEgPSByZXF1aXJlKFwiLi4vLi4vT2JzZXJ2YWJsZVwiKTtcbnZhciBwZXJmb3JtYW5jZVRpbWVzdGFtcFByb3ZpZGVyXzEgPSByZXF1aXJlKFwiLi4vLi4vc2NoZWR1bGVyL3BlcmZvcm1hbmNlVGltZXN0YW1wUHJvdmlkZXJcIik7XG52YXIgYW5pbWF0aW9uRnJhbWVQcm92aWRlcl8xID0gcmVxdWlyZShcIi4uLy4uL3NjaGVkdWxlci9hbmltYXRpb25GcmFtZVByb3ZpZGVyXCIpO1xuZnVuY3Rpb24gYW5pbWF0aW9uRnJhbWVzKHRpbWVzdGFtcFByb3ZpZGVyKSB7XG4gICAgcmV0dXJuIHRpbWVzdGFtcFByb3ZpZGVyID8gYW5pbWF0aW9uRnJhbWVzRmFjdG9yeSh0aW1lc3RhbXBQcm92aWRlcikgOiBERUZBVUxUX0FOSU1BVElPTl9GUkFNRVM7XG59XG5leHBvcnRzLmFuaW1hdGlvbkZyYW1lcyA9IGFuaW1hdGlvbkZyYW1lcztcbmZ1bmN0aW9uIGFuaW1hdGlvbkZyYW1lc0ZhY3RvcnkodGltZXN0YW1wUHJvdmlkZXIpIHtcbiAgICByZXR1cm4gbmV3IE9ic2VydmFibGVfMS5PYnNlcnZhYmxlKGZ1bmN0aW9uIChzdWJzY3JpYmVyKSB7XG4gICAgICAgIHZhciBwcm92aWRlciA9IHRpbWVzdGFtcFByb3ZpZGVyIHx8IHBlcmZvcm1hbmNlVGltZXN0YW1wUHJvdmlkZXJfMS5wZXJmb3JtYW5jZVRpbWVzdGFtcFByb3ZpZGVyO1xuICAgICAgICB2YXIgc3RhcnQgPSBwcm92aWRlci5ub3coKTtcbiAgICAgICAgdmFyIGlkID0gMDtcbiAgICAgICAgdmFyIHJ1biA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIGlmICghc3Vic2NyaWJlci5jbG9zZWQpIHtcbiAgICAgICAgICAgICAgICBpZCA9IGFuaW1hdGlvbkZyYW1lUHJvdmlkZXJfMS5hbmltYXRpb25GcmFtZVByb3ZpZGVyLnJlcXVlc3RBbmltYXRpb25GcmFtZShmdW5jdGlvbiAodGltZXN0YW1wKSB7XG4gICAgICAgICAgICAgICAgICAgIGlkID0gMDtcbiAgICAgICAgICAgICAgICAgICAgdmFyIG5vdyA9IHByb3ZpZGVyLm5vdygpO1xuICAgICAgICAgICAgICAgICAgICBzdWJzY3JpYmVyLm5leHQoe1xuICAgICAgICAgICAgICAgICAgICAgICAgdGltZXN0YW1wOiB0aW1lc3RhbXBQcm92aWRlciA/IG5vdyA6IHRpbWVzdGFtcCxcbiAgICAgICAgICAgICAgICAgICAgICAgIGVsYXBzZWQ6IG5vdyAtIHN0YXJ0LFxuICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICAgICAgcnVuKCk7XG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH07XG4gICAgICAgIHJ1bigpO1xuICAgICAgICByZXR1cm4gZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgaWYgKGlkKSB7XG4gICAgICAgICAgICAgICAgYW5pbWF0aW9uRnJhbWVQcm92aWRlcl8xLmFuaW1hdGlvbkZyYW1lUHJvdmlkZXIuY2FuY2VsQW5pbWF0aW9uRnJhbWUoaWQpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9O1xuICAgIH0pO1xufVxudmFyIERFRkFVTFRfQU5JTUFUSU9OX0ZSQU1FUyA9IGFuaW1hdGlvbkZyYW1lc0ZhY3RvcnkoKTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWFuaW1hdGlvbkZyYW1lcy5qcy5tYXAiLCJcInVzZSBzdHJpY3RcIjtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmV4cG9ydHMuZW1wdHkgPSBleHBvcnRzLkVNUFRZID0gdm9pZCAwO1xudmFyIE9ic2VydmFibGVfMSA9IHJlcXVpcmUoXCIuLi9PYnNlcnZhYmxlXCIpO1xuZXhwb3J0cy5FTVBUWSA9IG5ldyBPYnNlcnZhYmxlXzEuT2JzZXJ2YWJsZShmdW5jdGlvbiAoc3Vic2NyaWJlcikgeyByZXR1cm4gc3Vic2NyaWJlci5jb21wbGV0ZSgpOyB9KTtcbmZ1bmN0aW9uIGVtcHR5KHNjaGVkdWxlcikge1xuICAgIHJldHVybiBzY2hlZHVsZXIgPyBlbXB0eVNjaGVkdWxlZChzY2hlZHVsZXIpIDogZXhwb3J0cy5FTVBUWTtcbn1cbmV4cG9ydHMuZW1wdHkgPSBlbXB0eTtcbmZ1bmN0aW9uIGVtcHR5U2NoZWR1bGVkKHNjaGVkdWxlcikge1xuICAgIHJldHVybiBuZXcgT2JzZXJ2YWJsZV8xLk9ic2VydmFibGUoZnVuY3Rpb24gKHN1YnNjcmliZXIpIHsgcmV0dXJuIHNjaGVkdWxlci5zY2hlZHVsZShmdW5jdGlvbiAoKSB7IHJldHVybiBzdWJzY3JpYmVyLmNvbXBsZXRlKCk7IH0pOyB9KTtcbn1cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWVtcHR5LmpzLm1hcCIsIlwidXNlIHN0cmljdFwiO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuZXhwb3J0cy5mb3JrSm9pbiA9IHZvaWQgMDtcbnZhciBPYnNlcnZhYmxlXzEgPSByZXF1aXJlKFwiLi4vT2JzZXJ2YWJsZVwiKTtcbnZhciBhcmdzQXJnQXJyYXlPck9iamVjdF8xID0gcmVxdWlyZShcIi4uL3V0aWwvYXJnc0FyZ0FycmF5T3JPYmplY3RcIik7XG52YXIgaW5uZXJGcm9tXzEgPSByZXF1aXJlKFwiLi9pbm5lckZyb21cIik7XG52YXIgYXJnc18xID0gcmVxdWlyZShcIi4uL3V0aWwvYXJnc1wiKTtcbnZhciBPcGVyYXRvclN1YnNjcmliZXJfMSA9IHJlcXVpcmUoXCIuLi9vcGVyYXRvcnMvT3BlcmF0b3JTdWJzY3JpYmVyXCIpO1xudmFyIG1hcE9uZU9yTWFueUFyZ3NfMSA9IHJlcXVpcmUoXCIuLi91dGlsL21hcE9uZU9yTWFueUFyZ3NcIik7XG52YXIgY3JlYXRlT2JqZWN0XzEgPSByZXF1aXJlKFwiLi4vdXRpbC9jcmVhdGVPYmplY3RcIik7XG5mdW5jdGlvbiBmb3JrSm9pbigpIHtcbiAgICB2YXIgYXJncyA9IFtdO1xuICAgIGZvciAodmFyIF9pID0gMDsgX2kgPCBhcmd1bWVudHMubGVuZ3RoOyBfaSsrKSB7XG4gICAgICAgIGFyZ3NbX2ldID0gYXJndW1lbnRzW19pXTtcbiAgICB9XG4gICAgdmFyIHJlc3VsdFNlbGVjdG9yID0gYXJnc18xLnBvcFJlc3VsdFNlbGVjdG9yKGFyZ3MpO1xuICAgIHZhciBfYSA9IGFyZ3NBcmdBcnJheU9yT2JqZWN0XzEuYXJnc0FyZ0FycmF5T3JPYmplY3QoYXJncyksIHNvdXJjZXMgPSBfYS5hcmdzLCBrZXlzID0gX2Eua2V5cztcbiAgICB2YXIgcmVzdWx0ID0gbmV3IE9ic2VydmFibGVfMS5PYnNlcnZhYmxlKGZ1bmN0aW9uIChzdWJzY3JpYmVyKSB7XG4gICAgICAgIHZhciBsZW5ndGggPSBzb3VyY2VzLmxlbmd0aDtcbiAgICAgICAgaWYgKCFsZW5ndGgpIHtcbiAgICAgICAgICAgIHN1YnNjcmliZXIuY29tcGxldGUoKTtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgICB2YXIgdmFsdWVzID0gbmV3IEFycmF5KGxlbmd0aCk7XG4gICAgICAgIHZhciByZW1haW5pbmdDb21wbGV0aW9ucyA9IGxlbmd0aDtcbiAgICAgICAgdmFyIHJlbWFpbmluZ0VtaXNzaW9ucyA9IGxlbmd0aDtcbiAgICAgICAgdmFyIF9sb29wXzEgPSBmdW5jdGlvbiAoc291cmNlSW5kZXgpIHtcbiAgICAgICAgICAgIHZhciBoYXNWYWx1ZSA9IGZhbHNlO1xuICAgICAgICAgICAgaW5uZXJGcm9tXzEuaW5uZXJGcm9tKHNvdXJjZXNbc291cmNlSW5kZXhdKS5zdWJzY3JpYmUoT3BlcmF0b3JTdWJzY3JpYmVyXzEuY3JlYXRlT3BlcmF0b3JTdWJzY3JpYmVyKHN1YnNjcmliZXIsIGZ1bmN0aW9uICh2YWx1ZSkge1xuICAgICAgICAgICAgICAgIGlmICghaGFzVmFsdWUpIHtcbiAgICAgICAgICAgICAgICAgICAgaGFzVmFsdWUgPSB0cnVlO1xuICAgICAgICAgICAgICAgICAgICByZW1haW5pbmdFbWlzc2lvbnMtLTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgdmFsdWVzW3NvdXJjZUluZGV4XSA9IHZhbHVlO1xuICAgICAgICAgICAgfSwgZnVuY3Rpb24gKCkgeyByZXR1cm4gcmVtYWluaW5nQ29tcGxldGlvbnMtLTsgfSwgdW5kZWZpbmVkLCBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgaWYgKCFyZW1haW5pbmdDb21wbGV0aW9ucyB8fCAhaGFzVmFsdWUpIHtcbiAgICAgICAgICAgICAgICAgICAgaWYgKCFyZW1haW5pbmdFbWlzc2lvbnMpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHN1YnNjcmliZXIubmV4dChrZXlzID8gY3JlYXRlT2JqZWN0XzEuY3JlYXRlT2JqZWN0KGtleXMsIHZhbHVlcykgOiB2YWx1ZXMpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIHN1YnNjcmliZXIuY29tcGxldGUoKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9KSk7XG4gICAgICAgIH07XG4gICAgICAgIGZvciAodmFyIHNvdXJjZUluZGV4ID0gMDsgc291cmNlSW5kZXggPCBsZW5ndGg7IHNvdXJjZUluZGV4KyspIHtcbiAgICAgICAgICAgIF9sb29wXzEoc291cmNlSW5kZXgpO1xuICAgICAgICB9XG4gICAgfSk7XG4gICAgcmV0dXJuIHJlc3VsdFNlbGVjdG9yID8gcmVzdWx0LnBpcGUobWFwT25lT3JNYW55QXJnc18xLm1hcE9uZU9yTWFueUFyZ3MocmVzdWx0U2VsZWN0b3IpKSA6IHJlc3VsdDtcbn1cbmV4cG9ydHMuZm9ya0pvaW4gPSBmb3JrSm9pbjtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWZvcmtKb2luLmpzLm1hcCIsIlwidXNlIHN0cmljdFwiO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuZXhwb3J0cy5mcm9tID0gdm9pZCAwO1xudmFyIHNjaGVkdWxlZF8xID0gcmVxdWlyZShcIi4uL3NjaGVkdWxlZC9zY2hlZHVsZWRcIik7XG52YXIgaW5uZXJGcm9tXzEgPSByZXF1aXJlKFwiLi9pbm5lckZyb21cIik7XG5mdW5jdGlvbiBmcm9tKGlucHV0LCBzY2hlZHVsZXIpIHtcbiAgICByZXR1cm4gc2NoZWR1bGVyID8gc2NoZWR1bGVkXzEuc2NoZWR1bGVkKGlucHV0LCBzY2hlZHVsZXIpIDogaW5uZXJGcm9tXzEuaW5uZXJGcm9tKGlucHV0KTtcbn1cbmV4cG9ydHMuZnJvbSA9IGZyb207XG4vLyMgc291cmNlTWFwcGluZ1VSTD1mcm9tLmpzLm1hcCIsIlwidXNlIHN0cmljdFwiO1xudmFyIF9fcmVhZCA9ICh0aGlzICYmIHRoaXMuX19yZWFkKSB8fCBmdW5jdGlvbiAobywgbikge1xuICAgIHZhciBtID0gdHlwZW9mIFN5bWJvbCA9PT0gXCJmdW5jdGlvblwiICYmIG9bU3ltYm9sLml0ZXJhdG9yXTtcbiAgICBpZiAoIW0pIHJldHVybiBvO1xuICAgIHZhciBpID0gbS5jYWxsKG8pLCByLCBhciA9IFtdLCBlO1xuICAgIHRyeSB7XG4gICAgICAgIHdoaWxlICgobiA9PT0gdm9pZCAwIHx8IG4tLSA+IDApICYmICEociA9IGkubmV4dCgpKS5kb25lKSBhci5wdXNoKHIudmFsdWUpO1xuICAgIH1cbiAgICBjYXRjaCAoZXJyb3IpIHsgZSA9IHsgZXJyb3I6IGVycm9yIH07IH1cbiAgICBmaW5hbGx5IHtcbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgIGlmIChyICYmICFyLmRvbmUgJiYgKG0gPSBpW1wicmV0dXJuXCJdKSkgbS5jYWxsKGkpO1xuICAgICAgICB9XG4gICAgICAgIGZpbmFsbHkgeyBpZiAoZSkgdGhyb3cgZS5lcnJvcjsgfVxuICAgIH1cbiAgICByZXR1cm4gYXI7XG59O1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuZXhwb3J0cy5mcm9tRXZlbnQgPSB2b2lkIDA7XG52YXIgaW5uZXJGcm9tXzEgPSByZXF1aXJlKFwiLi4vb2JzZXJ2YWJsZS9pbm5lckZyb21cIik7XG52YXIgT2JzZXJ2YWJsZV8xID0gcmVxdWlyZShcIi4uL09ic2VydmFibGVcIik7XG52YXIgbWVyZ2VNYXBfMSA9IHJlcXVpcmUoXCIuLi9vcGVyYXRvcnMvbWVyZ2VNYXBcIik7XG52YXIgaXNBcnJheUxpa2VfMSA9IHJlcXVpcmUoXCIuLi91dGlsL2lzQXJyYXlMaWtlXCIpO1xudmFyIGlzRnVuY3Rpb25fMSA9IHJlcXVpcmUoXCIuLi91dGlsL2lzRnVuY3Rpb25cIik7XG52YXIgbWFwT25lT3JNYW55QXJnc18xID0gcmVxdWlyZShcIi4uL3V0aWwvbWFwT25lT3JNYW55QXJnc1wiKTtcbnZhciBub2RlRXZlbnRFbWl0dGVyTWV0aG9kcyA9IFsnYWRkTGlzdGVuZXInLCAncmVtb3ZlTGlzdGVuZXInXTtcbnZhciBldmVudFRhcmdldE1ldGhvZHMgPSBbJ2FkZEV2ZW50TGlzdGVuZXInLCAncmVtb3ZlRXZlbnRMaXN0ZW5lciddO1xudmFyIGpxdWVyeU1ldGhvZHMgPSBbJ29uJywgJ29mZiddO1xuZnVuY3Rpb24gZnJvbUV2ZW50KHRhcmdldCwgZXZlbnROYW1lLCBvcHRpb25zLCByZXN1bHRTZWxlY3Rvcikge1xuICAgIGlmIChpc0Z1bmN0aW9uXzEuaXNGdW5jdGlvbihvcHRpb25zKSkge1xuICAgICAgICByZXN1bHRTZWxlY3RvciA9IG9wdGlvbnM7XG4gICAgICAgIG9wdGlvbnMgPSB1bmRlZmluZWQ7XG4gICAgfVxuICAgIGlmIChyZXN1bHRTZWxlY3Rvcikge1xuICAgICAgICByZXR1cm4gZnJvbUV2ZW50KHRhcmdldCwgZXZlbnROYW1lLCBvcHRpb25zKS5waXBlKG1hcE9uZU9yTWFueUFyZ3NfMS5tYXBPbmVPck1hbnlBcmdzKHJlc3VsdFNlbGVjdG9yKSk7XG4gICAgfVxuICAgIHZhciBfYSA9IF9fcmVhZChpc0V2ZW50VGFyZ2V0KHRhcmdldClcbiAgICAgICAgPyBldmVudFRhcmdldE1ldGhvZHMubWFwKGZ1bmN0aW9uIChtZXRob2ROYW1lKSB7IHJldHVybiBmdW5jdGlvbiAoaGFuZGxlcikgeyByZXR1cm4gdGFyZ2V0W21ldGhvZE5hbWVdKGV2ZW50TmFtZSwgaGFuZGxlciwgb3B0aW9ucyk7IH07IH0pXG4gICAgICAgIDpcbiAgICAgICAgICAgIGlzTm9kZVN0eWxlRXZlbnRFbWl0dGVyKHRhcmdldClcbiAgICAgICAgICAgICAgICA/IG5vZGVFdmVudEVtaXR0ZXJNZXRob2RzLm1hcCh0b0NvbW1vbkhhbmRsZXJSZWdpc3RyeSh0YXJnZXQsIGV2ZW50TmFtZSkpXG4gICAgICAgICAgICAgICAgOiBpc0pRdWVyeVN0eWxlRXZlbnRFbWl0dGVyKHRhcmdldClcbiAgICAgICAgICAgICAgICAgICAgPyBqcXVlcnlNZXRob2RzLm1hcCh0b0NvbW1vbkhhbmRsZXJSZWdpc3RyeSh0YXJnZXQsIGV2ZW50TmFtZSkpXG4gICAgICAgICAgICAgICAgICAgIDogW10sIDIpLCBhZGQgPSBfYVswXSwgcmVtb3ZlID0gX2FbMV07XG4gICAgaWYgKCFhZGQpIHtcbiAgICAgICAgaWYgKGlzQXJyYXlMaWtlXzEuaXNBcnJheUxpa2UodGFyZ2V0KSkge1xuICAgICAgICAgICAgcmV0dXJuIG1lcmdlTWFwXzEubWVyZ2VNYXAoZnVuY3Rpb24gKHN1YlRhcmdldCkgeyByZXR1cm4gZnJvbUV2ZW50KHN1YlRhcmdldCwgZXZlbnROYW1lLCBvcHRpb25zKTsgfSkoaW5uZXJGcm9tXzEuaW5uZXJGcm9tKHRhcmdldCkpO1xuICAgICAgICB9XG4gICAgfVxuICAgIGlmICghYWRkKSB7XG4gICAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ0ludmFsaWQgZXZlbnQgdGFyZ2V0Jyk7XG4gICAgfVxuICAgIHJldHVybiBuZXcgT2JzZXJ2YWJsZV8xLk9ic2VydmFibGUoZnVuY3Rpb24gKHN1YnNjcmliZXIpIHtcbiAgICAgICAgdmFyIGhhbmRsZXIgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICB2YXIgYXJncyA9IFtdO1xuICAgICAgICAgICAgZm9yICh2YXIgX2kgPSAwOyBfaSA8IGFyZ3VtZW50cy5sZW5ndGg7IF9pKyspIHtcbiAgICAgICAgICAgICAgICBhcmdzW19pXSA9IGFyZ3VtZW50c1tfaV07XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4gc3Vic2NyaWJlci5uZXh0KDEgPCBhcmdzLmxlbmd0aCA/IGFyZ3MgOiBhcmdzWzBdKTtcbiAgICAgICAgfTtcbiAgICAgICAgYWRkKGhhbmRsZXIpO1xuICAgICAgICByZXR1cm4gZnVuY3Rpb24gKCkgeyByZXR1cm4gcmVtb3ZlKGhhbmRsZXIpOyB9O1xuICAgIH0pO1xufVxuZXhwb3J0cy5mcm9tRXZlbnQgPSBmcm9tRXZlbnQ7XG5mdW5jdGlvbiB0b0NvbW1vbkhhbmRsZXJSZWdpc3RyeSh0YXJnZXQsIGV2ZW50TmFtZSkge1xuICAgIHJldHVybiBmdW5jdGlvbiAobWV0aG9kTmFtZSkgeyByZXR1cm4gZnVuY3Rpb24gKGhhbmRsZXIpIHsgcmV0dXJuIHRhcmdldFttZXRob2ROYW1lXShldmVudE5hbWUsIGhhbmRsZXIpOyB9OyB9O1xufVxuZnVuY3Rpb24gaXNOb2RlU3R5bGVFdmVudEVtaXR0ZXIodGFyZ2V0KSB7XG4gICAgcmV0dXJuIGlzRnVuY3Rpb25fMS5pc0Z1bmN0aW9uKHRhcmdldC5hZGRMaXN0ZW5lcikgJiYgaXNGdW5jdGlvbl8xLmlzRnVuY3Rpb24odGFyZ2V0LnJlbW92ZUxpc3RlbmVyKTtcbn1cbmZ1bmN0aW9uIGlzSlF1ZXJ5U3R5bGVFdmVudEVtaXR0ZXIodGFyZ2V0KSB7XG4gICAgcmV0dXJuIGlzRnVuY3Rpb25fMS5pc0Z1bmN0aW9uKHRhcmdldC5vbikgJiYgaXNGdW5jdGlvbl8xLmlzRnVuY3Rpb24odGFyZ2V0Lm9mZik7XG59XG5mdW5jdGlvbiBpc0V2ZW50VGFyZ2V0KHRhcmdldCkge1xuICAgIHJldHVybiBpc0Z1bmN0aW9uXzEuaXNGdW5jdGlvbih0YXJnZXQuYWRkRXZlbnRMaXN0ZW5lcikgJiYgaXNGdW5jdGlvbl8xLmlzRnVuY3Rpb24odGFyZ2V0LnJlbW92ZUV2ZW50TGlzdGVuZXIpO1xufVxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9ZnJvbUV2ZW50LmpzLm1hcCIsIlwidXNlIHN0cmljdFwiO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuZXhwb3J0cy5mcm9tRXZlbnRQYXR0ZXJuID0gdm9pZCAwO1xudmFyIE9ic2VydmFibGVfMSA9IHJlcXVpcmUoXCIuLi9PYnNlcnZhYmxlXCIpO1xudmFyIGlzRnVuY3Rpb25fMSA9IHJlcXVpcmUoXCIuLi91dGlsL2lzRnVuY3Rpb25cIik7XG52YXIgbWFwT25lT3JNYW55QXJnc18xID0gcmVxdWlyZShcIi4uL3V0aWwvbWFwT25lT3JNYW55QXJnc1wiKTtcbmZ1bmN0aW9uIGZyb21FdmVudFBhdHRlcm4oYWRkSGFuZGxlciwgcmVtb3ZlSGFuZGxlciwgcmVzdWx0U2VsZWN0b3IpIHtcbiAgICBpZiAocmVzdWx0U2VsZWN0b3IpIHtcbiAgICAgICAgcmV0dXJuIGZyb21FdmVudFBhdHRlcm4oYWRkSGFuZGxlciwgcmVtb3ZlSGFuZGxlcikucGlwZShtYXBPbmVPck1hbnlBcmdzXzEubWFwT25lT3JNYW55QXJncyhyZXN1bHRTZWxlY3RvcikpO1xuICAgIH1cbiAgICByZXR1cm4gbmV3IE9ic2VydmFibGVfMS5PYnNlcnZhYmxlKGZ1bmN0aW9uIChzdWJzY3JpYmVyKSB7XG4gICAgICAgIHZhciBoYW5kbGVyID0gZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgdmFyIGUgPSBbXTtcbiAgICAgICAgICAgIGZvciAodmFyIF9pID0gMDsgX2kgPCBhcmd1bWVudHMubGVuZ3RoOyBfaSsrKSB7XG4gICAgICAgICAgICAgICAgZVtfaV0gPSBhcmd1bWVudHNbX2ldO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuIHN1YnNjcmliZXIubmV4dChlLmxlbmd0aCA9PT0gMSA/IGVbMF0gOiBlKTtcbiAgICAgICAgfTtcbiAgICAgICAgdmFyIHJldFZhbHVlID0gYWRkSGFuZGxlcihoYW5kbGVyKTtcbiAgICAgICAgcmV0dXJuIGlzRnVuY3Rpb25fMS5pc0Z1bmN0aW9uKHJlbW92ZUhhbmRsZXIpID8gZnVuY3Rpb24gKCkgeyByZXR1cm4gcmVtb3ZlSGFuZGxlcihoYW5kbGVyLCByZXRWYWx1ZSk7IH0gOiB1bmRlZmluZWQ7XG4gICAgfSk7XG59XG5leHBvcnRzLmZyb21FdmVudFBhdHRlcm4gPSBmcm9tRXZlbnRQYXR0ZXJuO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9ZnJvbUV2ZW50UGF0dGVybi5qcy5tYXAiLCJcInVzZSBzdHJpY3RcIjtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmV4cG9ydHMuZnJvbVN1YnNjcmliYWJsZSA9IHZvaWQgMDtcbnZhciBPYnNlcnZhYmxlXzEgPSByZXF1aXJlKFwiLi4vT2JzZXJ2YWJsZVwiKTtcbmZ1bmN0aW9uIGZyb21TdWJzY3JpYmFibGUoc3Vic2NyaWJhYmxlKSB7XG4gICAgcmV0dXJuIG5ldyBPYnNlcnZhYmxlXzEuT2JzZXJ2YWJsZShmdW5jdGlvbiAoc3Vic2NyaWJlcikgeyByZXR1cm4gc3Vic2NyaWJhYmxlLnN1YnNjcmliZShzdWJzY3JpYmVyKTsgfSk7XG59XG5leHBvcnRzLmZyb21TdWJzY3JpYmFibGUgPSBmcm9tU3Vic2NyaWJhYmxlO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9ZnJvbVN1YnNjcmliYWJsZS5qcy5tYXAiLCJcInVzZSBzdHJpY3RcIjtcbnZhciBfX2dlbmVyYXRvciA9ICh0aGlzICYmIHRoaXMuX19nZW5lcmF0b3IpIHx8IGZ1bmN0aW9uICh0aGlzQXJnLCBib2R5KSB7XG4gICAgdmFyIF8gPSB7IGxhYmVsOiAwLCBzZW50OiBmdW5jdGlvbigpIHsgaWYgKHRbMF0gJiAxKSB0aHJvdyB0WzFdOyByZXR1cm4gdFsxXTsgfSwgdHJ5czogW10sIG9wczogW10gfSwgZiwgeSwgdCwgZztcbiAgICByZXR1cm4gZyA9IHsgbmV4dDogdmVyYigwKSwgXCJ0aHJvd1wiOiB2ZXJiKDEpLCBcInJldHVyblwiOiB2ZXJiKDIpIH0sIHR5cGVvZiBTeW1ib2wgPT09IFwiZnVuY3Rpb25cIiAmJiAoZ1tTeW1ib2wuaXRlcmF0b3JdID0gZnVuY3Rpb24oKSB7IHJldHVybiB0aGlzOyB9KSwgZztcbiAgICBmdW5jdGlvbiB2ZXJiKG4pIHsgcmV0dXJuIGZ1bmN0aW9uICh2KSB7IHJldHVybiBzdGVwKFtuLCB2XSk7IH07IH1cbiAgICBmdW5jdGlvbiBzdGVwKG9wKSB7XG4gICAgICAgIGlmIChmKSB0aHJvdyBuZXcgVHlwZUVycm9yKFwiR2VuZXJhdG9yIGlzIGFscmVhZHkgZXhlY3V0aW5nLlwiKTtcbiAgICAgICAgd2hpbGUgKF8pIHRyeSB7XG4gICAgICAgICAgICBpZiAoZiA9IDEsIHkgJiYgKHQgPSBvcFswXSAmIDIgPyB5W1wicmV0dXJuXCJdIDogb3BbMF0gPyB5W1widGhyb3dcIl0gfHwgKCh0ID0geVtcInJldHVyblwiXSkgJiYgdC5jYWxsKHkpLCAwKSA6IHkubmV4dCkgJiYgISh0ID0gdC5jYWxsKHksIG9wWzFdKSkuZG9uZSkgcmV0dXJuIHQ7XG4gICAgICAgICAgICBpZiAoeSA9IDAsIHQpIG9wID0gW29wWzBdICYgMiwgdC52YWx1ZV07XG4gICAgICAgICAgICBzd2l0Y2ggKG9wWzBdKSB7XG4gICAgICAgICAgICAgICAgY2FzZSAwOiBjYXNlIDE6IHQgPSBvcDsgYnJlYWs7XG4gICAgICAgICAgICAgICAgY2FzZSA0OiBfLmxhYmVsKys7IHJldHVybiB7IHZhbHVlOiBvcFsxXSwgZG9uZTogZmFsc2UgfTtcbiAgICAgICAgICAgICAgICBjYXNlIDU6IF8ubGFiZWwrKzsgeSA9IG9wWzFdOyBvcCA9IFswXTsgY29udGludWU7XG4gICAgICAgICAgICAgICAgY2FzZSA3OiBvcCA9IF8ub3BzLnBvcCgpOyBfLnRyeXMucG9wKCk7IGNvbnRpbnVlO1xuICAgICAgICAgICAgICAgIGRlZmF1bHQ6XG4gICAgICAgICAgICAgICAgICAgIGlmICghKHQgPSBfLnRyeXMsIHQgPSB0Lmxlbmd0aCA+IDAgJiYgdFt0Lmxlbmd0aCAtIDFdKSAmJiAob3BbMF0gPT09IDYgfHwgb3BbMF0gPT09IDIpKSB7IF8gPSAwOyBjb250aW51ZTsgfVxuICAgICAgICAgICAgICAgICAgICBpZiAob3BbMF0gPT09IDMgJiYgKCF0IHx8IChvcFsxXSA+IHRbMF0gJiYgb3BbMV0gPCB0WzNdKSkpIHsgXy5sYWJlbCA9IG9wWzFdOyBicmVhazsgfVxuICAgICAgICAgICAgICAgICAgICBpZiAob3BbMF0gPT09IDYgJiYgXy5sYWJlbCA8IHRbMV0pIHsgXy5sYWJlbCA9IHRbMV07IHQgPSBvcDsgYnJlYWs7IH1cbiAgICAgICAgICAgICAgICAgICAgaWYgKHQgJiYgXy5sYWJlbCA8IHRbMl0pIHsgXy5sYWJlbCA9IHRbMl07IF8ub3BzLnB1c2gob3ApOyBicmVhazsgfVxuICAgICAgICAgICAgICAgICAgICBpZiAodFsyXSkgXy5vcHMucG9wKCk7XG4gICAgICAgICAgICAgICAgICAgIF8udHJ5cy5wb3AoKTsgY29udGludWU7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBvcCA9IGJvZHkuY2FsbCh0aGlzQXJnLCBfKTtcbiAgICAgICAgfSBjYXRjaCAoZSkgeyBvcCA9IFs2LCBlXTsgeSA9IDA7IH0gZmluYWxseSB7IGYgPSB0ID0gMDsgfVxuICAgICAgICBpZiAob3BbMF0gJiA1KSB0aHJvdyBvcFsxXTsgcmV0dXJuIHsgdmFsdWU6IG9wWzBdID8gb3BbMV0gOiB2b2lkIDAsIGRvbmU6IHRydWUgfTtcbiAgICB9XG59O1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuZXhwb3J0cy5nZW5lcmF0ZSA9IHZvaWQgMDtcbnZhciBpZGVudGl0eV8xID0gcmVxdWlyZShcIi4uL3V0aWwvaWRlbnRpdHlcIik7XG52YXIgaXNTY2hlZHVsZXJfMSA9IHJlcXVpcmUoXCIuLi91dGlsL2lzU2NoZWR1bGVyXCIpO1xudmFyIGRlZmVyXzEgPSByZXF1aXJlKFwiLi9kZWZlclwiKTtcbnZhciBzY2hlZHVsZUl0ZXJhYmxlXzEgPSByZXF1aXJlKFwiLi4vc2NoZWR1bGVkL3NjaGVkdWxlSXRlcmFibGVcIik7XG5mdW5jdGlvbiBnZW5lcmF0ZShpbml0aWFsU3RhdGVPck9wdGlvbnMsIGNvbmRpdGlvbiwgaXRlcmF0ZSwgcmVzdWx0U2VsZWN0b3JPclNjaGVkdWxlciwgc2NoZWR1bGVyKSB7XG4gICAgdmFyIF9hLCBfYjtcbiAgICB2YXIgcmVzdWx0U2VsZWN0b3I7XG4gICAgdmFyIGluaXRpYWxTdGF0ZTtcbiAgICBpZiAoYXJndW1lbnRzLmxlbmd0aCA9PT0gMSkge1xuICAgICAgICAoX2EgPSBpbml0aWFsU3RhdGVPck9wdGlvbnMsIGluaXRpYWxTdGF0ZSA9IF9hLmluaXRpYWxTdGF0ZSwgY29uZGl0aW9uID0gX2EuY29uZGl0aW9uLCBpdGVyYXRlID0gX2EuaXRlcmF0ZSwgX2IgPSBfYS5yZXN1bHRTZWxlY3RvciwgcmVzdWx0U2VsZWN0b3IgPSBfYiA9PT0gdm9pZCAwID8gaWRlbnRpdHlfMS5pZGVudGl0eSA6IF9iLCBzY2hlZHVsZXIgPSBfYS5zY2hlZHVsZXIpO1xuICAgIH1cbiAgICBlbHNlIHtcbiAgICAgICAgaW5pdGlhbFN0YXRlID0gaW5pdGlhbFN0YXRlT3JPcHRpb25zO1xuICAgICAgICBpZiAoIXJlc3VsdFNlbGVjdG9yT3JTY2hlZHVsZXIgfHwgaXNTY2hlZHVsZXJfMS5pc1NjaGVkdWxlcihyZXN1bHRTZWxlY3Rvck9yU2NoZWR1bGVyKSkge1xuICAgICAgICAgICAgcmVzdWx0U2VsZWN0b3IgPSBpZGVudGl0eV8xLmlkZW50aXR5O1xuICAgICAgICAgICAgc2NoZWR1bGVyID0gcmVzdWx0U2VsZWN0b3JPclNjaGVkdWxlcjtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIHJlc3VsdFNlbGVjdG9yID0gcmVzdWx0U2VsZWN0b3JPclNjaGVkdWxlcjtcbiAgICAgICAgfVxuICAgIH1cbiAgICBmdW5jdGlvbiBnZW4oKSB7XG4gICAgICAgIHZhciBzdGF0ZTtcbiAgICAgICAgcmV0dXJuIF9fZ2VuZXJhdG9yKHRoaXMsIGZ1bmN0aW9uIChfYSkge1xuICAgICAgICAgICAgc3dpdGNoIChfYS5sYWJlbCkge1xuICAgICAgICAgICAgICAgIGNhc2UgMDpcbiAgICAgICAgICAgICAgICAgICAgc3RhdGUgPSBpbml0aWFsU3RhdGU7XG4gICAgICAgICAgICAgICAgICAgIF9hLmxhYmVsID0gMTtcbiAgICAgICAgICAgICAgICBjYXNlIDE6XG4gICAgICAgICAgICAgICAgICAgIGlmICghKCFjb25kaXRpb24gfHwgY29uZGl0aW9uKHN0YXRlKSkpIHJldHVybiBbMywgNF07XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBbNCwgcmVzdWx0U2VsZWN0b3Ioc3RhdGUpXTtcbiAgICAgICAgICAgICAgICBjYXNlIDI6XG4gICAgICAgICAgICAgICAgICAgIF9hLnNlbnQoKTtcbiAgICAgICAgICAgICAgICAgICAgX2EubGFiZWwgPSAzO1xuICAgICAgICAgICAgICAgIGNhc2UgMzpcbiAgICAgICAgICAgICAgICAgICAgc3RhdGUgPSBpdGVyYXRlKHN0YXRlKTtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIFszLCAxXTtcbiAgICAgICAgICAgICAgICBjYXNlIDQ6IHJldHVybiBbMl07XG4gICAgICAgICAgICB9XG4gICAgICAgIH0pO1xuICAgIH1cbiAgICByZXR1cm4gZGVmZXJfMS5kZWZlcigoc2NoZWR1bGVyXG4gICAgICAgID9cbiAgICAgICAgICAgIGZ1bmN0aW9uICgpIHsgcmV0dXJuIHNjaGVkdWxlSXRlcmFibGVfMS5zY2hlZHVsZUl0ZXJhYmxlKGdlbigpLCBzY2hlZHVsZXIpOyB9XG4gICAgICAgIDpcbiAgICAgICAgICAgIGdlbikpO1xufVxuZXhwb3J0cy5nZW5lcmF0ZSA9IGdlbmVyYXRlO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9Z2VuZXJhdGUuanMubWFwIiwiXCJ1c2Ugc3RyaWN0XCI7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5leHBvcnRzLmlpZiA9IHZvaWQgMDtcbnZhciBkZWZlcl8xID0gcmVxdWlyZShcIi4vZGVmZXJcIik7XG5mdW5jdGlvbiBpaWYoY29uZGl0aW9uLCB0cnVlUmVzdWx0LCBmYWxzZVJlc3VsdCkge1xuICAgIHJldHVybiBkZWZlcl8xLmRlZmVyKGZ1bmN0aW9uICgpIHsgcmV0dXJuIChjb25kaXRpb24oKSA/IHRydWVSZXN1bHQgOiBmYWxzZVJlc3VsdCk7IH0pO1xufVxuZXhwb3J0cy5paWYgPSBpaWY7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1paWYuanMubWFwIiwiXCJ1c2Ugc3RyaWN0XCI7XG52YXIgX19hd2FpdGVyID0gKHRoaXMgJiYgdGhpcy5fX2F3YWl0ZXIpIHx8IGZ1bmN0aW9uICh0aGlzQXJnLCBfYXJndW1lbnRzLCBQLCBnZW5lcmF0b3IpIHtcbiAgICBmdW5jdGlvbiBhZG9wdCh2YWx1ZSkgeyByZXR1cm4gdmFsdWUgaW5zdGFuY2VvZiBQID8gdmFsdWUgOiBuZXcgUChmdW5jdGlvbiAocmVzb2x2ZSkgeyByZXNvbHZlKHZhbHVlKTsgfSk7IH1cbiAgICByZXR1cm4gbmV3IChQIHx8IChQID0gUHJvbWlzZSkpKGZ1bmN0aW9uIChyZXNvbHZlLCByZWplY3QpIHtcbiAgICAgICAgZnVuY3Rpb24gZnVsZmlsbGVkKHZhbHVlKSB7IHRyeSB7IHN0ZXAoZ2VuZXJhdG9yLm5leHQodmFsdWUpKTsgfSBjYXRjaCAoZSkgeyByZWplY3QoZSk7IH0gfVxuICAgICAgICBmdW5jdGlvbiByZWplY3RlZCh2YWx1ZSkgeyB0cnkgeyBzdGVwKGdlbmVyYXRvcltcInRocm93XCJdKHZhbHVlKSk7IH0gY2F0Y2ggKGUpIHsgcmVqZWN0KGUpOyB9IH1cbiAgICAgICAgZnVuY3Rpb24gc3RlcChyZXN1bHQpIHsgcmVzdWx0LmRvbmUgPyByZXNvbHZlKHJlc3VsdC52YWx1ZSkgOiBhZG9wdChyZXN1bHQudmFsdWUpLnRoZW4oZnVsZmlsbGVkLCByZWplY3RlZCk7IH1cbiAgICAgICAgc3RlcCgoZ2VuZXJhdG9yID0gZ2VuZXJhdG9yLmFwcGx5KHRoaXNBcmcsIF9hcmd1bWVudHMgfHwgW10pKS5uZXh0KCkpO1xuICAgIH0pO1xufTtcbnZhciBfX2dlbmVyYXRvciA9ICh0aGlzICYmIHRoaXMuX19nZW5lcmF0b3IpIHx8IGZ1bmN0aW9uICh0aGlzQXJnLCBib2R5KSB7XG4gICAgdmFyIF8gPSB7IGxhYmVsOiAwLCBzZW50OiBmdW5jdGlvbigpIHsgaWYgKHRbMF0gJiAxKSB0aHJvdyB0WzFdOyByZXR1cm4gdFsxXTsgfSwgdHJ5czogW10sIG9wczogW10gfSwgZiwgeSwgdCwgZztcbiAgICByZXR1cm4gZyA9IHsgbmV4dDogdmVyYigwKSwgXCJ0aHJvd1wiOiB2ZXJiKDEpLCBcInJldHVyblwiOiB2ZXJiKDIpIH0sIHR5cGVvZiBTeW1ib2wgPT09IFwiZnVuY3Rpb25cIiAmJiAoZ1tTeW1ib2wuaXRlcmF0b3JdID0gZnVuY3Rpb24oKSB7IHJldHVybiB0aGlzOyB9KSwgZztcbiAgICBmdW5jdGlvbiB2ZXJiKG4pIHsgcmV0dXJuIGZ1bmN0aW9uICh2KSB7IHJldHVybiBzdGVwKFtuLCB2XSk7IH07IH1cbiAgICBmdW5jdGlvbiBzdGVwKG9wKSB7XG4gICAgICAgIGlmIChmKSB0aHJvdyBuZXcgVHlwZUVycm9yKFwiR2VuZXJhdG9yIGlzIGFscmVhZHkgZXhlY3V0aW5nLlwiKTtcbiAgICAgICAgd2hpbGUgKF8pIHRyeSB7XG4gICAgICAgICAgICBpZiAoZiA9IDEsIHkgJiYgKHQgPSBvcFswXSAmIDIgPyB5W1wicmV0dXJuXCJdIDogb3BbMF0gPyB5W1widGhyb3dcIl0gfHwgKCh0ID0geVtcInJldHVyblwiXSkgJiYgdC5jYWxsKHkpLCAwKSA6IHkubmV4dCkgJiYgISh0ID0gdC5jYWxsKHksIG9wWzFdKSkuZG9uZSkgcmV0dXJuIHQ7XG4gICAgICAgICAgICBpZiAoeSA9IDAsIHQpIG9wID0gW29wWzBdICYgMiwgdC52YWx1ZV07XG4gICAgICAgICAgICBzd2l0Y2ggKG9wWzBdKSB7XG4gICAgICAgICAgICAgICAgY2FzZSAwOiBjYXNlIDE6IHQgPSBvcDsgYnJlYWs7XG4gICAgICAgICAgICAgICAgY2FzZSA0OiBfLmxhYmVsKys7IHJldHVybiB7IHZhbHVlOiBvcFsxXSwgZG9uZTogZmFsc2UgfTtcbiAgICAgICAgICAgICAgICBjYXNlIDU6IF8ubGFiZWwrKzsgeSA9IG9wWzFdOyBvcCA9IFswXTsgY29udGludWU7XG4gICAgICAgICAgICAgICAgY2FzZSA3OiBvcCA9IF8ub3BzLnBvcCgpOyBfLnRyeXMucG9wKCk7IGNvbnRpbnVlO1xuICAgICAgICAgICAgICAgIGRlZmF1bHQ6XG4gICAgICAgICAgICAgICAgICAgIGlmICghKHQgPSBfLnRyeXMsIHQgPSB0Lmxlbmd0aCA+IDAgJiYgdFt0Lmxlbmd0aCAtIDFdKSAmJiAob3BbMF0gPT09IDYgfHwgb3BbMF0gPT09IDIpKSB7IF8gPSAwOyBjb250aW51ZTsgfVxuICAgICAgICAgICAgICAgICAgICBpZiAob3BbMF0gPT09IDMgJiYgKCF0IHx8IChvcFsxXSA+IHRbMF0gJiYgb3BbMV0gPCB0WzNdKSkpIHsgXy5sYWJlbCA9IG9wWzFdOyBicmVhazsgfVxuICAgICAgICAgICAgICAgICAgICBpZiAob3BbMF0gPT09IDYgJiYgXy5sYWJlbCA8IHRbMV0pIHsgXy5sYWJlbCA9IHRbMV07IHQgPSBvcDsgYnJlYWs7IH1cbiAgICAgICAgICAgICAgICAgICAgaWYgKHQgJiYgXy5sYWJlbCA8IHRbMl0pIHsgXy5sYWJlbCA9IHRbMl07IF8ub3BzLnB1c2gob3ApOyBicmVhazsgfVxuICAgICAgICAgICAgICAgICAgICBpZiAodFsyXSkgXy5vcHMucG9wKCk7XG4gICAgICAgICAgICAgICAgICAgIF8udHJ5cy5wb3AoKTsgY29udGludWU7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBvcCA9IGJvZHkuY2FsbCh0aGlzQXJnLCBfKTtcbiAgICAgICAgfSBjYXRjaCAoZSkgeyBvcCA9IFs2LCBlXTsgeSA9IDA7IH0gZmluYWxseSB7IGYgPSB0ID0gMDsgfVxuICAgICAgICBpZiAob3BbMF0gJiA1KSB0aHJvdyBvcFsxXTsgcmV0dXJuIHsgdmFsdWU6IG9wWzBdID8gb3BbMV0gOiB2b2lkIDAsIGRvbmU6IHRydWUgfTtcbiAgICB9XG59O1xudmFyIF9fYXN5bmNWYWx1ZXMgPSAodGhpcyAmJiB0aGlzLl9fYXN5bmNWYWx1ZXMpIHx8IGZ1bmN0aW9uIChvKSB7XG4gICAgaWYgKCFTeW1ib2wuYXN5bmNJdGVyYXRvcikgdGhyb3cgbmV3IFR5cGVFcnJvcihcIlN5bWJvbC5hc3luY0l0ZXJhdG9yIGlzIG5vdCBkZWZpbmVkLlwiKTtcbiAgICB2YXIgbSA9IG9bU3ltYm9sLmFzeW5jSXRlcmF0b3JdLCBpO1xuICAgIHJldHVybiBtID8gbS5jYWxsKG8pIDogKG8gPSB0eXBlb2YgX192YWx1ZXMgPT09IFwiZnVuY3Rpb25cIiA/IF9fdmFsdWVzKG8pIDogb1tTeW1ib2wuaXRlcmF0b3JdKCksIGkgPSB7fSwgdmVyYihcIm5leHRcIiksIHZlcmIoXCJ0aHJvd1wiKSwgdmVyYihcInJldHVyblwiKSwgaVtTeW1ib2wuYXN5bmNJdGVyYXRvcl0gPSBmdW5jdGlvbiAoKSB7IHJldHVybiB0aGlzOyB9LCBpKTtcbiAgICBmdW5jdGlvbiB2ZXJiKG4pIHsgaVtuXSA9IG9bbl0gJiYgZnVuY3Rpb24gKHYpIHsgcmV0dXJuIG5ldyBQcm9taXNlKGZ1bmN0aW9uIChyZXNvbHZlLCByZWplY3QpIHsgdiA9IG9bbl0odiksIHNldHRsZShyZXNvbHZlLCByZWplY3QsIHYuZG9uZSwgdi52YWx1ZSk7IH0pOyB9OyB9XG4gICAgZnVuY3Rpb24gc2V0dGxlKHJlc29sdmUsIHJlamVjdCwgZCwgdikgeyBQcm9taXNlLnJlc29sdmUodikudGhlbihmdW5jdGlvbih2KSB7IHJlc29sdmUoeyB2YWx1ZTogdiwgZG9uZTogZCB9KTsgfSwgcmVqZWN0KTsgfVxufTtcbnZhciBfX3ZhbHVlcyA9ICh0aGlzICYmIHRoaXMuX192YWx1ZXMpIHx8IGZ1bmN0aW9uKG8pIHtcbiAgICB2YXIgcyA9IHR5cGVvZiBTeW1ib2wgPT09IFwiZnVuY3Rpb25cIiAmJiBTeW1ib2wuaXRlcmF0b3IsIG0gPSBzICYmIG9bc10sIGkgPSAwO1xuICAgIGlmIChtKSByZXR1cm4gbS5jYWxsKG8pO1xuICAgIGlmIChvICYmIHR5cGVvZiBvLmxlbmd0aCA9PT0gXCJudW1iZXJcIikgcmV0dXJuIHtcbiAgICAgICAgbmV4dDogZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgaWYgKG8gJiYgaSA+PSBvLmxlbmd0aCkgbyA9IHZvaWQgMDtcbiAgICAgICAgICAgIHJldHVybiB7IHZhbHVlOiBvICYmIG9baSsrXSwgZG9uZTogIW8gfTtcbiAgICAgICAgfVxuICAgIH07XG4gICAgdGhyb3cgbmV3IFR5cGVFcnJvcihzID8gXCJPYmplY3QgaXMgbm90IGl0ZXJhYmxlLlwiIDogXCJTeW1ib2wuaXRlcmF0b3IgaXMgbm90IGRlZmluZWQuXCIpO1xufTtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmV4cG9ydHMuZnJvbVJlYWRhYmxlU3RyZWFtTGlrZSA9IGV4cG9ydHMuZnJvbUFzeW5jSXRlcmFibGUgPSBleHBvcnRzLmZyb21JdGVyYWJsZSA9IGV4cG9ydHMuZnJvbVByb21pc2UgPSBleHBvcnRzLmZyb21BcnJheUxpa2UgPSBleHBvcnRzLmZyb21JbnRlcm9wT2JzZXJ2YWJsZSA9IGV4cG9ydHMuaW5uZXJGcm9tID0gdm9pZCAwO1xudmFyIGlzQXJyYXlMaWtlXzEgPSByZXF1aXJlKFwiLi4vdXRpbC9pc0FycmF5TGlrZVwiKTtcbnZhciBpc1Byb21pc2VfMSA9IHJlcXVpcmUoXCIuLi91dGlsL2lzUHJvbWlzZVwiKTtcbnZhciBPYnNlcnZhYmxlXzEgPSByZXF1aXJlKFwiLi4vT2JzZXJ2YWJsZVwiKTtcbnZhciBpc0ludGVyb3BPYnNlcnZhYmxlXzEgPSByZXF1aXJlKFwiLi4vdXRpbC9pc0ludGVyb3BPYnNlcnZhYmxlXCIpO1xudmFyIGlzQXN5bmNJdGVyYWJsZV8xID0gcmVxdWlyZShcIi4uL3V0aWwvaXNBc3luY0l0ZXJhYmxlXCIpO1xudmFyIHRocm93VW5vYnNlcnZhYmxlRXJyb3JfMSA9IHJlcXVpcmUoXCIuLi91dGlsL3Rocm93VW5vYnNlcnZhYmxlRXJyb3JcIik7XG52YXIgaXNJdGVyYWJsZV8xID0gcmVxdWlyZShcIi4uL3V0aWwvaXNJdGVyYWJsZVwiKTtcbnZhciBpc1JlYWRhYmxlU3RyZWFtTGlrZV8xID0gcmVxdWlyZShcIi4uL3V0aWwvaXNSZWFkYWJsZVN0cmVhbUxpa2VcIik7XG52YXIgaXNGdW5jdGlvbl8xID0gcmVxdWlyZShcIi4uL3V0aWwvaXNGdW5jdGlvblwiKTtcbnZhciByZXBvcnRVbmhhbmRsZWRFcnJvcl8xID0gcmVxdWlyZShcIi4uL3V0aWwvcmVwb3J0VW5oYW5kbGVkRXJyb3JcIik7XG52YXIgb2JzZXJ2YWJsZV8xID0gcmVxdWlyZShcIi4uL3N5bWJvbC9vYnNlcnZhYmxlXCIpO1xuZnVuY3Rpb24gaW5uZXJGcm9tKGlucHV0KSB7XG4gICAgaWYgKGlucHV0IGluc3RhbmNlb2YgT2JzZXJ2YWJsZV8xLk9ic2VydmFibGUpIHtcbiAgICAgICAgcmV0dXJuIGlucHV0O1xuICAgIH1cbiAgICBpZiAoaW5wdXQgIT0gbnVsbCkge1xuICAgICAgICBpZiAoaXNJbnRlcm9wT2JzZXJ2YWJsZV8xLmlzSW50ZXJvcE9ic2VydmFibGUoaW5wdXQpKSB7XG4gICAgICAgICAgICByZXR1cm4gZnJvbUludGVyb3BPYnNlcnZhYmxlKGlucHV0KTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoaXNBcnJheUxpa2VfMS5pc0FycmF5TGlrZShpbnB1dCkpIHtcbiAgICAgICAgICAgIHJldHVybiBmcm9tQXJyYXlMaWtlKGlucHV0KTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoaXNQcm9taXNlXzEuaXNQcm9taXNlKGlucHV0KSkge1xuICAgICAgICAgICAgcmV0dXJuIGZyb21Qcm9taXNlKGlucHV0KTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoaXNBc3luY0l0ZXJhYmxlXzEuaXNBc3luY0l0ZXJhYmxlKGlucHV0KSkge1xuICAgICAgICAgICAgcmV0dXJuIGZyb21Bc3luY0l0ZXJhYmxlKGlucHV0KTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoaXNJdGVyYWJsZV8xLmlzSXRlcmFibGUoaW5wdXQpKSB7XG4gICAgICAgICAgICByZXR1cm4gZnJvbUl0ZXJhYmxlKGlucHV0KTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoaXNSZWFkYWJsZVN0cmVhbUxpa2VfMS5pc1JlYWRhYmxlU3RyZWFtTGlrZShpbnB1dCkpIHtcbiAgICAgICAgICAgIHJldHVybiBmcm9tUmVhZGFibGVTdHJlYW1MaWtlKGlucHV0KTtcbiAgICAgICAgfVxuICAgIH1cbiAgICB0aHJvdyB0aHJvd1Vub2JzZXJ2YWJsZUVycm9yXzEuY3JlYXRlSW52YWxpZE9ic2VydmFibGVUeXBlRXJyb3IoaW5wdXQpO1xufVxuZXhwb3J0cy5pbm5lckZyb20gPSBpbm5lckZyb207XG5mdW5jdGlvbiBmcm9tSW50ZXJvcE9ic2VydmFibGUob2JqKSB7XG4gICAgcmV0dXJuIG5ldyBPYnNlcnZhYmxlXzEuT2JzZXJ2YWJsZShmdW5jdGlvbiAoc3Vic2NyaWJlcikge1xuICAgICAgICB2YXIgb2JzID0gb2JqW29ic2VydmFibGVfMS5vYnNlcnZhYmxlXSgpO1xuICAgICAgICBpZiAoaXNGdW5jdGlvbl8xLmlzRnVuY3Rpb24ob2JzLnN1YnNjcmliZSkpIHtcbiAgICAgICAgICAgIHJldHVybiBvYnMuc3Vic2NyaWJlKHN1YnNjcmliZXIpO1xuICAgICAgICB9XG4gICAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ1Byb3ZpZGVkIG9iamVjdCBkb2VzIG5vdCBjb3JyZWN0bHkgaW1wbGVtZW50IFN5bWJvbC5vYnNlcnZhYmxlJyk7XG4gICAgfSk7XG59XG5leHBvcnRzLmZyb21JbnRlcm9wT2JzZXJ2YWJsZSA9IGZyb21JbnRlcm9wT2JzZXJ2YWJsZTtcbmZ1bmN0aW9uIGZyb21BcnJheUxpa2UoYXJyYXkpIHtcbiAgICByZXR1cm4gbmV3IE9ic2VydmFibGVfMS5PYnNlcnZhYmxlKGZ1bmN0aW9uIChzdWJzY3JpYmVyKSB7XG4gICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgYXJyYXkubGVuZ3RoICYmICFzdWJzY3JpYmVyLmNsb3NlZDsgaSsrKSB7XG4gICAgICAgICAgICBzdWJzY3JpYmVyLm5leHQoYXJyYXlbaV0pO1xuICAgICAgICB9XG4gICAgICAgIHN1YnNjcmliZXIuY29tcGxldGUoKTtcbiAgICB9KTtcbn1cbmV4cG9ydHMuZnJvbUFycmF5TGlrZSA9IGZyb21BcnJheUxpa2U7XG5mdW5jdGlvbiBmcm9tUHJvbWlzZShwcm9taXNlKSB7XG4gICAgcmV0dXJuIG5ldyBPYnNlcnZhYmxlXzEuT2JzZXJ2YWJsZShmdW5jdGlvbiAoc3Vic2NyaWJlcikge1xuICAgICAgICBwcm9taXNlXG4gICAgICAgICAgICAudGhlbihmdW5jdGlvbiAodmFsdWUpIHtcbiAgICAgICAgICAgIGlmICghc3Vic2NyaWJlci5jbG9zZWQpIHtcbiAgICAgICAgICAgICAgICBzdWJzY3JpYmVyLm5leHQodmFsdWUpO1xuICAgICAgICAgICAgICAgIHN1YnNjcmliZXIuY29tcGxldGUoKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSwgZnVuY3Rpb24gKGVycikgeyByZXR1cm4gc3Vic2NyaWJlci5lcnJvcihlcnIpOyB9KVxuICAgICAgICAgICAgLnRoZW4obnVsbCwgcmVwb3J0VW5oYW5kbGVkRXJyb3JfMS5yZXBvcnRVbmhhbmRsZWRFcnJvcik7XG4gICAgfSk7XG59XG5leHBvcnRzLmZyb21Qcm9taXNlID0gZnJvbVByb21pc2U7XG5mdW5jdGlvbiBmcm9tSXRlcmFibGUoaXRlcmFibGUpIHtcbiAgICByZXR1cm4gbmV3IE9ic2VydmFibGVfMS5PYnNlcnZhYmxlKGZ1bmN0aW9uIChzdWJzY3JpYmVyKSB7XG4gICAgICAgIHZhciBlXzEsIF9hO1xuICAgICAgICB0cnkge1xuICAgICAgICAgICAgZm9yICh2YXIgaXRlcmFibGVfMSA9IF9fdmFsdWVzKGl0ZXJhYmxlKSwgaXRlcmFibGVfMV8xID0gaXRlcmFibGVfMS5uZXh0KCk7ICFpdGVyYWJsZV8xXzEuZG9uZTsgaXRlcmFibGVfMV8xID0gaXRlcmFibGVfMS5uZXh0KCkpIHtcbiAgICAgICAgICAgICAgICB2YXIgdmFsdWUgPSBpdGVyYWJsZV8xXzEudmFsdWU7XG4gICAgICAgICAgICAgICAgc3Vic2NyaWJlci5uZXh0KHZhbHVlKTtcbiAgICAgICAgICAgICAgICBpZiAoc3Vic2NyaWJlci5jbG9zZWQpIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBjYXRjaCAoZV8xXzEpIHsgZV8xID0geyBlcnJvcjogZV8xXzEgfTsgfVxuICAgICAgICBmaW5hbGx5IHtcbiAgICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICAgICAgaWYgKGl0ZXJhYmxlXzFfMSAmJiAhaXRlcmFibGVfMV8xLmRvbmUgJiYgKF9hID0gaXRlcmFibGVfMS5yZXR1cm4pKSBfYS5jYWxsKGl0ZXJhYmxlXzEpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZmluYWxseSB7IGlmIChlXzEpIHRocm93IGVfMS5lcnJvcjsgfVxuICAgICAgICB9XG4gICAgICAgIHN1YnNjcmliZXIuY29tcGxldGUoKTtcbiAgICB9KTtcbn1cbmV4cG9ydHMuZnJvbUl0ZXJhYmxlID0gZnJvbUl0ZXJhYmxlO1xuZnVuY3Rpb24gZnJvbUFzeW5jSXRlcmFibGUoYXN5bmNJdGVyYWJsZSkge1xuICAgIHJldHVybiBuZXcgT2JzZXJ2YWJsZV8xLk9ic2VydmFibGUoZnVuY3Rpb24gKHN1YnNjcmliZXIpIHtcbiAgICAgICAgcHJvY2Vzcyhhc3luY0l0ZXJhYmxlLCBzdWJzY3JpYmVyKS5jYXRjaChmdW5jdGlvbiAoZXJyKSB7IHJldHVybiBzdWJzY3JpYmVyLmVycm9yKGVycik7IH0pO1xuICAgIH0pO1xufVxuZXhwb3J0cy5mcm9tQXN5bmNJdGVyYWJsZSA9IGZyb21Bc3luY0l0ZXJhYmxlO1xuZnVuY3Rpb24gZnJvbVJlYWRhYmxlU3RyZWFtTGlrZShyZWFkYWJsZVN0cmVhbSkge1xuICAgIHJldHVybiBmcm9tQXN5bmNJdGVyYWJsZShpc1JlYWRhYmxlU3RyZWFtTGlrZV8xLnJlYWRhYmxlU3RyZWFtTGlrZVRvQXN5bmNHZW5lcmF0b3IocmVhZGFibGVTdHJlYW0pKTtcbn1cbmV4cG9ydHMuZnJvbVJlYWRhYmxlU3RyZWFtTGlrZSA9IGZyb21SZWFkYWJsZVN0cmVhbUxpa2U7XG5mdW5jdGlvbiBwcm9jZXNzKGFzeW5jSXRlcmFibGUsIHN1YnNjcmliZXIpIHtcbiAgICB2YXIgYXN5bmNJdGVyYWJsZV8xLCBhc3luY0l0ZXJhYmxlXzFfMTtcbiAgICB2YXIgZV8yLCBfYTtcbiAgICByZXR1cm4gX19hd2FpdGVyKHRoaXMsIHZvaWQgMCwgdm9pZCAwLCBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHZhciB2YWx1ZSwgZV8yXzE7XG4gICAgICAgIHJldHVybiBfX2dlbmVyYXRvcih0aGlzLCBmdW5jdGlvbiAoX2IpIHtcbiAgICAgICAgICAgIHN3aXRjaCAoX2IubGFiZWwpIHtcbiAgICAgICAgICAgICAgICBjYXNlIDA6XG4gICAgICAgICAgICAgICAgICAgIF9iLnRyeXMucHVzaChbMCwgNSwgNiwgMTFdKTtcbiAgICAgICAgICAgICAgICAgICAgYXN5bmNJdGVyYWJsZV8xID0gX19hc3luY1ZhbHVlcyhhc3luY0l0ZXJhYmxlKTtcbiAgICAgICAgICAgICAgICAgICAgX2IubGFiZWwgPSAxO1xuICAgICAgICAgICAgICAgIGNhc2UgMTogcmV0dXJuIFs0LCBhc3luY0l0ZXJhYmxlXzEubmV4dCgpXTtcbiAgICAgICAgICAgICAgICBjYXNlIDI6XG4gICAgICAgICAgICAgICAgICAgIGlmICghKGFzeW5jSXRlcmFibGVfMV8xID0gX2Iuc2VudCgpLCAhYXN5bmNJdGVyYWJsZV8xXzEuZG9uZSkpIHJldHVybiBbMywgNF07XG4gICAgICAgICAgICAgICAgICAgIHZhbHVlID0gYXN5bmNJdGVyYWJsZV8xXzEudmFsdWU7XG4gICAgICAgICAgICAgICAgICAgIHN1YnNjcmliZXIubmV4dCh2YWx1ZSk7XG4gICAgICAgICAgICAgICAgICAgIGlmIChzdWJzY3JpYmVyLmNsb3NlZCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIFsyXTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICBfYi5sYWJlbCA9IDM7XG4gICAgICAgICAgICAgICAgY2FzZSAzOiByZXR1cm4gWzMsIDFdO1xuICAgICAgICAgICAgICAgIGNhc2UgNDogcmV0dXJuIFszLCAxMV07XG4gICAgICAgICAgICAgICAgY2FzZSA1OlxuICAgICAgICAgICAgICAgICAgICBlXzJfMSA9IF9iLnNlbnQoKTtcbiAgICAgICAgICAgICAgICAgICAgZV8yID0geyBlcnJvcjogZV8yXzEgfTtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIFszLCAxMV07XG4gICAgICAgICAgICAgICAgY2FzZSA2OlxuICAgICAgICAgICAgICAgICAgICBfYi50cnlzLnB1c2goWzYsICwgOSwgMTBdKTtcbiAgICAgICAgICAgICAgICAgICAgaWYgKCEoYXN5bmNJdGVyYWJsZV8xXzEgJiYgIWFzeW5jSXRlcmFibGVfMV8xLmRvbmUgJiYgKF9hID0gYXN5bmNJdGVyYWJsZV8xLnJldHVybikpKSByZXR1cm4gWzMsIDhdO1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gWzQsIF9hLmNhbGwoYXN5bmNJdGVyYWJsZV8xKV07XG4gICAgICAgICAgICAgICAgY2FzZSA3OlxuICAgICAgICAgICAgICAgICAgICBfYi5zZW50KCk7XG4gICAgICAgICAgICAgICAgICAgIF9iLmxhYmVsID0gODtcbiAgICAgICAgICAgICAgICBjYXNlIDg6IHJldHVybiBbMywgMTBdO1xuICAgICAgICAgICAgICAgIGNhc2UgOTpcbiAgICAgICAgICAgICAgICAgICAgaWYgKGVfMikgdGhyb3cgZV8yLmVycm9yO1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gWzddO1xuICAgICAgICAgICAgICAgIGNhc2UgMTA6IHJldHVybiBbN107XG4gICAgICAgICAgICAgICAgY2FzZSAxMTpcbiAgICAgICAgICAgICAgICAgICAgc3Vic2NyaWJlci5jb21wbGV0ZSgpO1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gWzJdO1xuICAgICAgICAgICAgfVxuICAgICAgICB9KTtcbiAgICB9KTtcbn1cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWlubmVyRnJvbS5qcy5tYXAiLCJcInVzZSBzdHJpY3RcIjtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmV4cG9ydHMuaW50ZXJ2YWwgPSB2b2lkIDA7XG52YXIgYXN5bmNfMSA9IHJlcXVpcmUoXCIuLi9zY2hlZHVsZXIvYXN5bmNcIik7XG52YXIgdGltZXJfMSA9IHJlcXVpcmUoXCIuL3RpbWVyXCIpO1xuZnVuY3Rpb24gaW50ZXJ2YWwocGVyaW9kLCBzY2hlZHVsZXIpIHtcbiAgICBpZiAocGVyaW9kID09PSB2b2lkIDApIHsgcGVyaW9kID0gMDsgfVxuICAgIGlmIChzY2hlZHVsZXIgPT09IHZvaWQgMCkgeyBzY2hlZHVsZXIgPSBhc3luY18xLmFzeW5jU2NoZWR1bGVyOyB9XG4gICAgaWYgKHBlcmlvZCA8IDApIHtcbiAgICAgICAgcGVyaW9kID0gMDtcbiAgICB9XG4gICAgcmV0dXJuIHRpbWVyXzEudGltZXIocGVyaW9kLCBwZXJpb2QsIHNjaGVkdWxlcik7XG59XG5leHBvcnRzLmludGVydmFsID0gaW50ZXJ2YWw7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1pbnRlcnZhbC5qcy5tYXAiLCJcInVzZSBzdHJpY3RcIjtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmV4cG9ydHMubWVyZ2UgPSB2b2lkIDA7XG52YXIgbWVyZ2VBbGxfMSA9IHJlcXVpcmUoXCIuLi9vcGVyYXRvcnMvbWVyZ2VBbGxcIik7XG52YXIgaW5uZXJGcm9tXzEgPSByZXF1aXJlKFwiLi9pbm5lckZyb21cIik7XG52YXIgZW1wdHlfMSA9IHJlcXVpcmUoXCIuL2VtcHR5XCIpO1xudmFyIGFyZ3NfMSA9IHJlcXVpcmUoXCIuLi91dGlsL2FyZ3NcIik7XG52YXIgZnJvbV8xID0gcmVxdWlyZShcIi4vZnJvbVwiKTtcbmZ1bmN0aW9uIG1lcmdlKCkge1xuICAgIHZhciBhcmdzID0gW107XG4gICAgZm9yICh2YXIgX2kgPSAwOyBfaSA8IGFyZ3VtZW50cy5sZW5ndGg7IF9pKyspIHtcbiAgICAgICAgYXJnc1tfaV0gPSBhcmd1bWVudHNbX2ldO1xuICAgIH1cbiAgICB2YXIgc2NoZWR1bGVyID0gYXJnc18xLnBvcFNjaGVkdWxlcihhcmdzKTtcbiAgICB2YXIgY29uY3VycmVudCA9IGFyZ3NfMS5wb3BOdW1iZXIoYXJncywgSW5maW5pdHkpO1xuICAgIHZhciBzb3VyY2VzID0gYXJncztcbiAgICByZXR1cm4gIXNvdXJjZXMubGVuZ3RoXG4gICAgICAgID9cbiAgICAgICAgICAgIGVtcHR5XzEuRU1QVFlcbiAgICAgICAgOiBzb3VyY2VzLmxlbmd0aCA9PT0gMVxuICAgICAgICAgICAgP1xuICAgICAgICAgICAgICAgIGlubmVyRnJvbV8xLmlubmVyRnJvbShzb3VyY2VzWzBdKVxuICAgICAgICAgICAgOlxuICAgICAgICAgICAgICAgIG1lcmdlQWxsXzEubWVyZ2VBbGwoY29uY3VycmVudCkoZnJvbV8xLmZyb20oc291cmNlcywgc2NoZWR1bGVyKSk7XG59XG5leHBvcnRzLm1lcmdlID0gbWVyZ2U7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1tZXJnZS5qcy5tYXAiLCJcInVzZSBzdHJpY3RcIjtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmV4cG9ydHMubmV2ZXIgPSBleHBvcnRzLk5FVkVSID0gdm9pZCAwO1xudmFyIE9ic2VydmFibGVfMSA9IHJlcXVpcmUoXCIuLi9PYnNlcnZhYmxlXCIpO1xudmFyIG5vb3BfMSA9IHJlcXVpcmUoXCIuLi91dGlsL25vb3BcIik7XG5leHBvcnRzLk5FVkVSID0gbmV3IE9ic2VydmFibGVfMS5PYnNlcnZhYmxlKG5vb3BfMS5ub29wKTtcbmZ1bmN0aW9uIG5ldmVyKCkge1xuICAgIHJldHVybiBleHBvcnRzLk5FVkVSO1xufVxuZXhwb3J0cy5uZXZlciA9IG5ldmVyO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9bmV2ZXIuanMubWFwIiwiXCJ1c2Ugc3RyaWN0XCI7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5leHBvcnRzLm9mID0gdm9pZCAwO1xudmFyIGFyZ3NfMSA9IHJlcXVpcmUoXCIuLi91dGlsL2FyZ3NcIik7XG52YXIgZnJvbV8xID0gcmVxdWlyZShcIi4vZnJvbVwiKTtcbmZ1bmN0aW9uIG9mKCkge1xuICAgIHZhciBhcmdzID0gW107XG4gICAgZm9yICh2YXIgX2kgPSAwOyBfaSA8IGFyZ3VtZW50cy5sZW5ndGg7IF9pKyspIHtcbiAgICAgICAgYXJnc1tfaV0gPSBhcmd1bWVudHNbX2ldO1xuICAgIH1cbiAgICB2YXIgc2NoZWR1bGVyID0gYXJnc18xLnBvcFNjaGVkdWxlcihhcmdzKTtcbiAgICByZXR1cm4gZnJvbV8xLmZyb20oYXJncywgc2NoZWR1bGVyKTtcbn1cbmV4cG9ydHMub2YgPSBvZjtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPW9mLmpzLm1hcCIsIlwidXNlIHN0cmljdFwiO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuZXhwb3J0cy5vbkVycm9yUmVzdW1lTmV4dCA9IHZvaWQgMDtcbnZhciBPYnNlcnZhYmxlXzEgPSByZXF1aXJlKFwiLi4vT2JzZXJ2YWJsZVwiKTtcbnZhciBhcmdzT3JBcmdBcnJheV8xID0gcmVxdWlyZShcIi4uL3V0aWwvYXJnc09yQXJnQXJyYXlcIik7XG52YXIgT3BlcmF0b3JTdWJzY3JpYmVyXzEgPSByZXF1aXJlKFwiLi4vb3BlcmF0b3JzL09wZXJhdG9yU3Vic2NyaWJlclwiKTtcbnZhciBub29wXzEgPSByZXF1aXJlKFwiLi4vdXRpbC9ub29wXCIpO1xudmFyIGlubmVyRnJvbV8xID0gcmVxdWlyZShcIi4vaW5uZXJGcm9tXCIpO1xuZnVuY3Rpb24gb25FcnJvclJlc3VtZU5leHQoKSB7XG4gICAgdmFyIHNvdXJjZXMgPSBbXTtcbiAgICBmb3IgKHZhciBfaSA9IDA7IF9pIDwgYXJndW1lbnRzLmxlbmd0aDsgX2krKykge1xuICAgICAgICBzb3VyY2VzW19pXSA9IGFyZ3VtZW50c1tfaV07XG4gICAgfVxuICAgIHZhciBuZXh0U291cmNlcyA9IGFyZ3NPckFyZ0FycmF5XzEuYXJnc09yQXJnQXJyYXkoc291cmNlcyk7XG4gICAgcmV0dXJuIG5ldyBPYnNlcnZhYmxlXzEuT2JzZXJ2YWJsZShmdW5jdGlvbiAoc3Vic2NyaWJlcikge1xuICAgICAgICB2YXIgc291cmNlSW5kZXggPSAwO1xuICAgICAgICB2YXIgc3Vic2NyaWJlTmV4dCA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIGlmIChzb3VyY2VJbmRleCA8IG5leHRTb3VyY2VzLmxlbmd0aCkge1xuICAgICAgICAgICAgICAgIHZhciBuZXh0U291cmNlID0gdm9pZCAwO1xuICAgICAgICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICAgICAgICAgIG5leHRTb3VyY2UgPSBpbm5lckZyb21fMS5pbm5lckZyb20obmV4dFNvdXJjZXNbc291cmNlSW5kZXgrK10pO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBjYXRjaCAoZXJyKSB7XG4gICAgICAgICAgICAgICAgICAgIHN1YnNjcmliZU5leHQoKTtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB2YXIgaW5uZXJTdWJzY3JpYmVyID0gbmV3IE9wZXJhdG9yU3Vic2NyaWJlcl8xLk9wZXJhdG9yU3Vic2NyaWJlcihzdWJzY3JpYmVyLCB1bmRlZmluZWQsIG5vb3BfMS5ub29wLCBub29wXzEubm9vcCk7XG4gICAgICAgICAgICAgICAgbmV4dFNvdXJjZS5zdWJzY3JpYmUoaW5uZXJTdWJzY3JpYmVyKTtcbiAgICAgICAgICAgICAgICBpbm5lclN1YnNjcmliZXIuYWRkKHN1YnNjcmliZU5leHQpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgc3Vic2NyaWJlci5jb21wbGV0ZSgpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9O1xuICAgICAgICBzdWJzY3JpYmVOZXh0KCk7XG4gICAgfSk7XG59XG5leHBvcnRzLm9uRXJyb3JSZXN1bWVOZXh0ID0gb25FcnJvclJlc3VtZU5leHQ7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1vbkVycm9yUmVzdW1lTmV4dC5qcy5tYXAiLCJcInVzZSBzdHJpY3RcIjtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmV4cG9ydHMucGFpcnMgPSB2b2lkIDA7XG52YXIgZnJvbV8xID0gcmVxdWlyZShcIi4vZnJvbVwiKTtcbmZ1bmN0aW9uIHBhaXJzKG9iaiwgc2NoZWR1bGVyKSB7XG4gICAgcmV0dXJuIGZyb21fMS5mcm9tKE9iamVjdC5lbnRyaWVzKG9iaiksIHNjaGVkdWxlcik7XG59XG5leHBvcnRzLnBhaXJzID0gcGFpcnM7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1wYWlycy5qcy5tYXAiLCJcInVzZSBzdHJpY3RcIjtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmV4cG9ydHMucGFydGl0aW9uID0gdm9pZCAwO1xudmFyIG5vdF8xID0gcmVxdWlyZShcIi4uL3V0aWwvbm90XCIpO1xudmFyIGZpbHRlcl8xID0gcmVxdWlyZShcIi4uL29wZXJhdG9ycy9maWx0ZXJcIik7XG52YXIgaW5uZXJGcm9tXzEgPSByZXF1aXJlKFwiLi9pbm5lckZyb21cIik7XG5mdW5jdGlvbiBwYXJ0aXRpb24oc291cmNlLCBwcmVkaWNhdGUsIHRoaXNBcmcpIHtcbiAgICByZXR1cm4gW2ZpbHRlcl8xLmZpbHRlcihwcmVkaWNhdGUsIHRoaXNBcmcpKGlubmVyRnJvbV8xLmlubmVyRnJvbShzb3VyY2UpKSwgZmlsdGVyXzEuZmlsdGVyKG5vdF8xLm5vdChwcmVkaWNhdGUsIHRoaXNBcmcpKShpbm5lckZyb21fMS5pbm5lckZyb20oc291cmNlKSldO1xufVxuZXhwb3J0cy5wYXJ0aXRpb24gPSBwYXJ0aXRpb247XG4vLyMgc291cmNlTWFwcGluZ1VSTD1wYXJ0aXRpb24uanMubWFwIiwiXCJ1c2Ugc3RyaWN0XCI7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5leHBvcnRzLnJhY2VJbml0ID0gZXhwb3J0cy5yYWNlID0gdm9pZCAwO1xudmFyIE9ic2VydmFibGVfMSA9IHJlcXVpcmUoXCIuLi9PYnNlcnZhYmxlXCIpO1xudmFyIGlubmVyRnJvbV8xID0gcmVxdWlyZShcIi4vaW5uZXJGcm9tXCIpO1xudmFyIGFyZ3NPckFyZ0FycmF5XzEgPSByZXF1aXJlKFwiLi4vdXRpbC9hcmdzT3JBcmdBcnJheVwiKTtcbnZhciBPcGVyYXRvclN1YnNjcmliZXJfMSA9IHJlcXVpcmUoXCIuLi9vcGVyYXRvcnMvT3BlcmF0b3JTdWJzY3JpYmVyXCIpO1xuZnVuY3Rpb24gcmFjZSgpIHtcbiAgICB2YXIgc291cmNlcyA9IFtdO1xuICAgIGZvciAodmFyIF9pID0gMDsgX2kgPCBhcmd1bWVudHMubGVuZ3RoOyBfaSsrKSB7XG4gICAgICAgIHNvdXJjZXNbX2ldID0gYXJndW1lbnRzW19pXTtcbiAgICB9XG4gICAgc291cmNlcyA9IGFyZ3NPckFyZ0FycmF5XzEuYXJnc09yQXJnQXJyYXkoc291cmNlcyk7XG4gICAgcmV0dXJuIHNvdXJjZXMubGVuZ3RoID09PSAxID8gaW5uZXJGcm9tXzEuaW5uZXJGcm9tKHNvdXJjZXNbMF0pIDogbmV3IE9ic2VydmFibGVfMS5PYnNlcnZhYmxlKHJhY2VJbml0KHNvdXJjZXMpKTtcbn1cbmV4cG9ydHMucmFjZSA9IHJhY2U7XG5mdW5jdGlvbiByYWNlSW5pdChzb3VyY2VzKSB7XG4gICAgcmV0dXJuIGZ1bmN0aW9uIChzdWJzY3JpYmVyKSB7XG4gICAgICAgIHZhciBzdWJzY3JpcHRpb25zID0gW107XG4gICAgICAgIHZhciBfbG9vcF8xID0gZnVuY3Rpb24gKGkpIHtcbiAgICAgICAgICAgIHN1YnNjcmlwdGlvbnMucHVzaChpbm5lckZyb21fMS5pbm5lckZyb20oc291cmNlc1tpXSkuc3Vic2NyaWJlKE9wZXJhdG9yU3Vic2NyaWJlcl8xLmNyZWF0ZU9wZXJhdG9yU3Vic2NyaWJlcihzdWJzY3JpYmVyLCBmdW5jdGlvbiAodmFsdWUpIHtcbiAgICAgICAgICAgICAgICBpZiAoc3Vic2NyaXB0aW9ucykge1xuICAgICAgICAgICAgICAgICAgICBmb3IgKHZhciBzID0gMDsgcyA8IHN1YnNjcmlwdGlvbnMubGVuZ3RoOyBzKyspIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHMgIT09IGkgJiYgc3Vic2NyaXB0aW9uc1tzXS51bnN1YnNjcmliZSgpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIHN1YnNjcmlwdGlvbnMgPSBudWxsO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBzdWJzY3JpYmVyLm5leHQodmFsdWUpO1xuICAgICAgICAgICAgfSkpKTtcbiAgICAgICAgfTtcbiAgICAgICAgZm9yICh2YXIgaSA9IDA7IHN1YnNjcmlwdGlvbnMgJiYgIXN1YnNjcmliZXIuY2xvc2VkICYmIGkgPCBzb3VyY2VzLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgICBfbG9vcF8xKGkpO1xuICAgICAgICB9XG4gICAgfTtcbn1cbmV4cG9ydHMucmFjZUluaXQgPSByYWNlSW5pdDtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPXJhY2UuanMubWFwIiwiXCJ1c2Ugc3RyaWN0XCI7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5leHBvcnRzLnJhbmdlID0gdm9pZCAwO1xudmFyIE9ic2VydmFibGVfMSA9IHJlcXVpcmUoXCIuLi9PYnNlcnZhYmxlXCIpO1xudmFyIGVtcHR5XzEgPSByZXF1aXJlKFwiLi9lbXB0eVwiKTtcbmZ1bmN0aW9uIHJhbmdlKHN0YXJ0LCBjb3VudCwgc2NoZWR1bGVyKSB7XG4gICAgaWYgKGNvdW50ID09IG51bGwpIHtcbiAgICAgICAgY291bnQgPSBzdGFydDtcbiAgICAgICAgc3RhcnQgPSAwO1xuICAgIH1cbiAgICBpZiAoY291bnQgPD0gMCkge1xuICAgICAgICByZXR1cm4gZW1wdHlfMS5FTVBUWTtcbiAgICB9XG4gICAgdmFyIGVuZCA9IGNvdW50ICsgc3RhcnQ7XG4gICAgcmV0dXJuIG5ldyBPYnNlcnZhYmxlXzEuT2JzZXJ2YWJsZShzY2hlZHVsZXJcbiAgICAgICAgP1xuICAgICAgICAgICAgZnVuY3Rpb24gKHN1YnNjcmliZXIpIHtcbiAgICAgICAgICAgICAgICB2YXIgbiA9IHN0YXJ0O1xuICAgICAgICAgICAgICAgIHJldHVybiBzY2hlZHVsZXIuc2NoZWR1bGUoZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgICAgICBpZiAobiA8IGVuZCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgc3Vic2NyaWJlci5uZXh0KG4rKyk7XG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLnNjaGVkdWxlKCk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBzdWJzY3JpYmVyLmNvbXBsZXRlKCk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgOlxuICAgICAgICAgICAgZnVuY3Rpb24gKHN1YnNjcmliZXIpIHtcbiAgICAgICAgICAgICAgICB2YXIgbiA9IHN0YXJ0O1xuICAgICAgICAgICAgICAgIHdoaWxlIChuIDwgZW5kICYmICFzdWJzY3JpYmVyLmNsb3NlZCkge1xuICAgICAgICAgICAgICAgICAgICBzdWJzY3JpYmVyLm5leHQobisrKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgc3Vic2NyaWJlci5jb21wbGV0ZSgpO1xuICAgICAgICAgICAgfSk7XG59XG5leHBvcnRzLnJhbmdlID0gcmFuZ2U7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1yYW5nZS5qcy5tYXAiLCJcInVzZSBzdHJpY3RcIjtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmV4cG9ydHMudGhyb3dFcnJvciA9IHZvaWQgMDtcbnZhciBPYnNlcnZhYmxlXzEgPSByZXF1aXJlKFwiLi4vT2JzZXJ2YWJsZVwiKTtcbnZhciBpc0Z1bmN0aW9uXzEgPSByZXF1aXJlKFwiLi4vdXRpbC9pc0Z1bmN0aW9uXCIpO1xuZnVuY3Rpb24gdGhyb3dFcnJvcihlcnJvck9yRXJyb3JGYWN0b3J5LCBzY2hlZHVsZXIpIHtcbiAgICB2YXIgZXJyb3JGYWN0b3J5ID0gaXNGdW5jdGlvbl8xLmlzRnVuY3Rpb24oZXJyb3JPckVycm9yRmFjdG9yeSkgPyBlcnJvck9yRXJyb3JGYWN0b3J5IDogZnVuY3Rpb24gKCkgeyByZXR1cm4gZXJyb3JPckVycm9yRmFjdG9yeTsgfTtcbiAgICB2YXIgaW5pdCA9IGZ1bmN0aW9uIChzdWJzY3JpYmVyKSB7IHJldHVybiBzdWJzY3JpYmVyLmVycm9yKGVycm9yRmFjdG9yeSgpKTsgfTtcbiAgICByZXR1cm4gbmV3IE9ic2VydmFibGVfMS5PYnNlcnZhYmxlKHNjaGVkdWxlciA/IGZ1bmN0aW9uIChzdWJzY3JpYmVyKSB7IHJldHVybiBzY2hlZHVsZXIuc2NoZWR1bGUoaW5pdCwgMCwgc3Vic2NyaWJlcik7IH0gOiBpbml0KTtcbn1cbmV4cG9ydHMudGhyb3dFcnJvciA9IHRocm93RXJyb3I7XG4vLyMgc291cmNlTWFwcGluZ1VSTD10aHJvd0Vycm9yLmpzLm1hcCIsIlwidXNlIHN0cmljdFwiO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuZXhwb3J0cy50aW1lciA9IHZvaWQgMDtcbnZhciBPYnNlcnZhYmxlXzEgPSByZXF1aXJlKFwiLi4vT2JzZXJ2YWJsZVwiKTtcbnZhciBhc3luY18xID0gcmVxdWlyZShcIi4uL3NjaGVkdWxlci9hc3luY1wiKTtcbnZhciBpc1NjaGVkdWxlcl8xID0gcmVxdWlyZShcIi4uL3V0aWwvaXNTY2hlZHVsZXJcIik7XG52YXIgaXNEYXRlXzEgPSByZXF1aXJlKFwiLi4vdXRpbC9pc0RhdGVcIik7XG5mdW5jdGlvbiB0aW1lcihkdWVUaW1lLCBpbnRlcnZhbE9yU2NoZWR1bGVyLCBzY2hlZHVsZXIpIHtcbiAgICBpZiAoZHVlVGltZSA9PT0gdm9pZCAwKSB7IGR1ZVRpbWUgPSAwOyB9XG4gICAgaWYgKHNjaGVkdWxlciA9PT0gdm9pZCAwKSB7IHNjaGVkdWxlciA9IGFzeW5jXzEuYXN5bmM7IH1cbiAgICB2YXIgaW50ZXJ2YWxEdXJhdGlvbiA9IC0xO1xuICAgIGlmIChpbnRlcnZhbE9yU2NoZWR1bGVyICE9IG51bGwpIHtcbiAgICAgICAgaWYgKGlzU2NoZWR1bGVyXzEuaXNTY2hlZHVsZXIoaW50ZXJ2YWxPclNjaGVkdWxlcikpIHtcbiAgICAgICAgICAgIHNjaGVkdWxlciA9IGludGVydmFsT3JTY2hlZHVsZXI7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICBpbnRlcnZhbER1cmF0aW9uID0gaW50ZXJ2YWxPclNjaGVkdWxlcjtcbiAgICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gbmV3IE9ic2VydmFibGVfMS5PYnNlcnZhYmxlKGZ1bmN0aW9uIChzdWJzY3JpYmVyKSB7XG4gICAgICAgIHZhciBkdWUgPSBpc0RhdGVfMS5pc1ZhbGlkRGF0ZShkdWVUaW1lKSA/ICtkdWVUaW1lIC0gc2NoZWR1bGVyLm5vdygpIDogZHVlVGltZTtcbiAgICAgICAgaWYgKGR1ZSA8IDApIHtcbiAgICAgICAgICAgIGR1ZSA9IDA7XG4gICAgICAgIH1cbiAgICAgICAgdmFyIG4gPSAwO1xuICAgICAgICByZXR1cm4gc2NoZWR1bGVyLnNjaGVkdWxlKGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIGlmICghc3Vic2NyaWJlci5jbG9zZWQpIHtcbiAgICAgICAgICAgICAgICBzdWJzY3JpYmVyLm5leHQobisrKTtcbiAgICAgICAgICAgICAgICBpZiAoMCA8PSBpbnRlcnZhbER1cmF0aW9uKSB7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuc2NoZWR1bGUodW5kZWZpbmVkLCBpbnRlcnZhbER1cmF0aW9uKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIHN1YnNjcmliZXIuY29tcGxldGUoKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgIH0sIGR1ZSk7XG4gICAgfSk7XG59XG5leHBvcnRzLnRpbWVyID0gdGltZXI7XG4vLyMgc291cmNlTWFwcGluZ1VSTD10aW1lci5qcy5tYXAiLCJcInVzZSBzdHJpY3RcIjtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmV4cG9ydHMudXNpbmcgPSB2b2lkIDA7XG52YXIgT2JzZXJ2YWJsZV8xID0gcmVxdWlyZShcIi4uL09ic2VydmFibGVcIik7XG52YXIgaW5uZXJGcm9tXzEgPSByZXF1aXJlKFwiLi9pbm5lckZyb21cIik7XG52YXIgZW1wdHlfMSA9IHJlcXVpcmUoXCIuL2VtcHR5XCIpO1xuZnVuY3Rpb24gdXNpbmcocmVzb3VyY2VGYWN0b3J5LCBvYnNlcnZhYmxlRmFjdG9yeSkge1xuICAgIHJldHVybiBuZXcgT2JzZXJ2YWJsZV8xLk9ic2VydmFibGUoZnVuY3Rpb24gKHN1YnNjcmliZXIpIHtcbiAgICAgICAgdmFyIHJlc291cmNlID0gcmVzb3VyY2VGYWN0b3J5KCk7XG4gICAgICAgIHZhciByZXN1bHQgPSBvYnNlcnZhYmxlRmFjdG9yeShyZXNvdXJjZSk7XG4gICAgICAgIHZhciBzb3VyY2UgPSByZXN1bHQgPyBpbm5lckZyb21fMS5pbm5lckZyb20ocmVzdWx0KSA6IGVtcHR5XzEuRU1QVFk7XG4gICAgICAgIHNvdXJjZS5zdWJzY3JpYmUoc3Vic2NyaWJlcik7XG4gICAgICAgIHJldHVybiBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICBpZiAocmVzb3VyY2UpIHtcbiAgICAgICAgICAgICAgICByZXNvdXJjZS51bnN1YnNjcmliZSgpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9O1xuICAgIH0pO1xufVxuZXhwb3J0cy51c2luZyA9IHVzaW5nO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9dXNpbmcuanMubWFwIiwiXCJ1c2Ugc3RyaWN0XCI7XG52YXIgX19yZWFkID0gKHRoaXMgJiYgdGhpcy5fX3JlYWQpIHx8IGZ1bmN0aW9uIChvLCBuKSB7XG4gICAgdmFyIG0gPSB0eXBlb2YgU3ltYm9sID09PSBcImZ1bmN0aW9uXCIgJiYgb1tTeW1ib2wuaXRlcmF0b3JdO1xuICAgIGlmICghbSkgcmV0dXJuIG87XG4gICAgdmFyIGkgPSBtLmNhbGwobyksIHIsIGFyID0gW10sIGU7XG4gICAgdHJ5IHtcbiAgICAgICAgd2hpbGUgKChuID09PSB2b2lkIDAgfHwgbi0tID4gMCkgJiYgIShyID0gaS5uZXh0KCkpLmRvbmUpIGFyLnB1c2goci52YWx1ZSk7XG4gICAgfVxuICAgIGNhdGNoIChlcnJvcikgeyBlID0geyBlcnJvcjogZXJyb3IgfTsgfVxuICAgIGZpbmFsbHkge1xuICAgICAgICB0cnkge1xuICAgICAgICAgICAgaWYgKHIgJiYgIXIuZG9uZSAmJiAobSA9IGlbXCJyZXR1cm5cIl0pKSBtLmNhbGwoaSk7XG4gICAgICAgIH1cbiAgICAgICAgZmluYWxseSB7IGlmIChlKSB0aHJvdyBlLmVycm9yOyB9XG4gICAgfVxuICAgIHJldHVybiBhcjtcbn07XG52YXIgX19zcHJlYWRBcnJheSA9ICh0aGlzICYmIHRoaXMuX19zcHJlYWRBcnJheSkgfHwgZnVuY3Rpb24gKHRvLCBmcm9tKSB7XG4gICAgZm9yICh2YXIgaSA9IDAsIGlsID0gZnJvbS5sZW5ndGgsIGogPSB0by5sZW5ndGg7IGkgPCBpbDsgaSsrLCBqKyspXG4gICAgICAgIHRvW2pdID0gZnJvbVtpXTtcbiAgICByZXR1cm4gdG87XG59O1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuZXhwb3J0cy56aXAgPSB2b2lkIDA7XG52YXIgT2JzZXJ2YWJsZV8xID0gcmVxdWlyZShcIi4uL09ic2VydmFibGVcIik7XG52YXIgaW5uZXJGcm9tXzEgPSByZXF1aXJlKFwiLi9pbm5lckZyb21cIik7XG52YXIgYXJnc09yQXJnQXJyYXlfMSA9IHJlcXVpcmUoXCIuLi91dGlsL2FyZ3NPckFyZ0FycmF5XCIpO1xudmFyIGVtcHR5XzEgPSByZXF1aXJlKFwiLi9lbXB0eVwiKTtcbnZhciBPcGVyYXRvclN1YnNjcmliZXJfMSA9IHJlcXVpcmUoXCIuLi9vcGVyYXRvcnMvT3BlcmF0b3JTdWJzY3JpYmVyXCIpO1xudmFyIGFyZ3NfMSA9IHJlcXVpcmUoXCIuLi91dGlsL2FyZ3NcIik7XG5mdW5jdGlvbiB6aXAoKSB7XG4gICAgdmFyIGFyZ3MgPSBbXTtcbiAgICBmb3IgKHZhciBfaSA9IDA7IF9pIDwgYXJndW1lbnRzLmxlbmd0aDsgX2krKykge1xuICAgICAgICBhcmdzW19pXSA9IGFyZ3VtZW50c1tfaV07XG4gICAgfVxuICAgIHZhciByZXN1bHRTZWxlY3RvciA9IGFyZ3NfMS5wb3BSZXN1bHRTZWxlY3RvcihhcmdzKTtcbiAgICB2YXIgc291cmNlcyA9IGFyZ3NPckFyZ0FycmF5XzEuYXJnc09yQXJnQXJyYXkoYXJncyk7XG4gICAgcmV0dXJuIHNvdXJjZXMubGVuZ3RoXG4gICAgICAgID8gbmV3IE9ic2VydmFibGVfMS5PYnNlcnZhYmxlKGZ1bmN0aW9uIChzdWJzY3JpYmVyKSB7XG4gICAgICAgICAgICB2YXIgYnVmZmVycyA9IHNvdXJjZXMubWFwKGZ1bmN0aW9uICgpIHsgcmV0dXJuIFtdOyB9KTtcbiAgICAgICAgICAgIHZhciBjb21wbGV0ZWQgPSBzb3VyY2VzLm1hcChmdW5jdGlvbiAoKSB7IHJldHVybiBmYWxzZTsgfSk7XG4gICAgICAgICAgICBzdWJzY3JpYmVyLmFkZChmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgYnVmZmVycyA9IGNvbXBsZXRlZCA9IG51bGw7XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIHZhciBfbG9vcF8xID0gZnVuY3Rpb24gKHNvdXJjZUluZGV4KSB7XG4gICAgICAgICAgICAgICAgaW5uZXJGcm9tXzEuaW5uZXJGcm9tKHNvdXJjZXNbc291cmNlSW5kZXhdKS5zdWJzY3JpYmUoT3BlcmF0b3JTdWJzY3JpYmVyXzEuY3JlYXRlT3BlcmF0b3JTdWJzY3JpYmVyKHN1YnNjcmliZXIsIGZ1bmN0aW9uICh2YWx1ZSkge1xuICAgICAgICAgICAgICAgICAgICBidWZmZXJzW3NvdXJjZUluZGV4XS5wdXNoKHZhbHVlKTtcbiAgICAgICAgICAgICAgICAgICAgaWYgKGJ1ZmZlcnMuZXZlcnkoZnVuY3Rpb24gKGJ1ZmZlcikgeyByZXR1cm4gYnVmZmVyLmxlbmd0aDsgfSkpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhciByZXN1bHQgPSBidWZmZXJzLm1hcChmdW5jdGlvbiAoYnVmZmVyKSB7IHJldHVybiBidWZmZXIuc2hpZnQoKTsgfSk7XG4gICAgICAgICAgICAgICAgICAgICAgICBzdWJzY3JpYmVyLm5leHQocmVzdWx0U2VsZWN0b3IgPyByZXN1bHRTZWxlY3Rvci5hcHBseSh2b2lkIDAsIF9fc3ByZWFkQXJyYXkoW10sIF9fcmVhZChyZXN1bHQpKSkgOiByZXN1bHQpO1xuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGJ1ZmZlcnMuc29tZShmdW5jdGlvbiAoYnVmZmVyLCBpKSB7IHJldHVybiAhYnVmZmVyLmxlbmd0aCAmJiBjb21wbGV0ZWRbaV07IH0pKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgc3Vic2NyaWJlci5jb21wbGV0ZSgpO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfSwgZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgICAgICBjb21wbGV0ZWRbc291cmNlSW5kZXhdID0gdHJ1ZTtcbiAgICAgICAgICAgICAgICAgICAgIWJ1ZmZlcnNbc291cmNlSW5kZXhdLmxlbmd0aCAmJiBzdWJzY3JpYmVyLmNvbXBsZXRlKCk7XG4gICAgICAgICAgICAgICAgfSkpO1xuICAgICAgICAgICAgfTtcbiAgICAgICAgICAgIGZvciAodmFyIHNvdXJjZUluZGV4ID0gMDsgIXN1YnNjcmliZXIuY2xvc2VkICYmIHNvdXJjZUluZGV4IDwgc291cmNlcy5sZW5ndGg7IHNvdXJjZUluZGV4KyspIHtcbiAgICAgICAgICAgICAgICBfbG9vcF8xKHNvdXJjZUluZGV4KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybiBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgYnVmZmVycyA9IGNvbXBsZXRlZCA9IG51bGw7XG4gICAgICAgICAgICB9O1xuICAgICAgICB9KVxuICAgICAgICA6IGVtcHR5XzEuRU1QVFk7XG59XG5leHBvcnRzLnppcCA9IHppcDtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPXppcC5qcy5tYXAiLCJcInVzZSBzdHJpY3RcIjtcbnZhciBfX2V4dGVuZHMgPSAodGhpcyAmJiB0aGlzLl9fZXh0ZW5kcykgfHwgKGZ1bmN0aW9uICgpIHtcbiAgICB2YXIgZXh0ZW5kU3RhdGljcyA9IGZ1bmN0aW9uIChkLCBiKSB7XG4gICAgICAgIGV4dGVuZFN0YXRpY3MgPSBPYmplY3Quc2V0UHJvdG90eXBlT2YgfHxcbiAgICAgICAgICAgICh7IF9fcHJvdG9fXzogW10gfSBpbnN0YW5jZW9mIEFycmF5ICYmIGZ1bmN0aW9uIChkLCBiKSB7IGQuX19wcm90b19fID0gYjsgfSkgfHxcbiAgICAgICAgICAgIGZ1bmN0aW9uIChkLCBiKSB7IGZvciAodmFyIHAgaW4gYikgaWYgKE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChiLCBwKSkgZFtwXSA9IGJbcF07IH07XG4gICAgICAgIHJldHVybiBleHRlbmRTdGF0aWNzKGQsIGIpO1xuICAgIH07XG4gICAgcmV0dXJuIGZ1bmN0aW9uIChkLCBiKSB7XG4gICAgICAgIGlmICh0eXBlb2YgYiAhPT0gXCJmdW5jdGlvblwiICYmIGIgIT09IG51bGwpXG4gICAgICAgICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKFwiQ2xhc3MgZXh0ZW5kcyB2YWx1ZSBcIiArIFN0cmluZyhiKSArIFwiIGlzIG5vdCBhIGNvbnN0cnVjdG9yIG9yIG51bGxcIik7XG4gICAgICAgIGV4dGVuZFN0YXRpY3MoZCwgYik7XG4gICAgICAgIGZ1bmN0aW9uIF9fKCkgeyB0aGlzLmNvbnN0cnVjdG9yID0gZDsgfVxuICAgICAgICBkLnByb3RvdHlwZSA9IGIgPT09IG51bGwgPyBPYmplY3QuY3JlYXRlKGIpIDogKF9fLnByb3RvdHlwZSA9IGIucHJvdG90eXBlLCBuZXcgX18oKSk7XG4gICAgfTtcbn0pKCk7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5leHBvcnRzLk9wZXJhdG9yU3Vic2NyaWJlciA9IGV4cG9ydHMuY3JlYXRlT3BlcmF0b3JTdWJzY3JpYmVyID0gdm9pZCAwO1xudmFyIFN1YnNjcmliZXJfMSA9IHJlcXVpcmUoXCIuLi9TdWJzY3JpYmVyXCIpO1xuZnVuY3Rpb24gY3JlYXRlT3BlcmF0b3JTdWJzY3JpYmVyKGRlc3RpbmF0aW9uLCBvbk5leHQsIG9uQ29tcGxldGUsIG9uRXJyb3IsIG9uRmluYWxpemUpIHtcbiAgICByZXR1cm4gbmV3IE9wZXJhdG9yU3Vic2NyaWJlcihkZXN0aW5hdGlvbiwgb25OZXh0LCBvbkNvbXBsZXRlLCBvbkVycm9yLCBvbkZpbmFsaXplKTtcbn1cbmV4cG9ydHMuY3JlYXRlT3BlcmF0b3JTdWJzY3JpYmVyID0gY3JlYXRlT3BlcmF0b3JTdWJzY3JpYmVyO1xudmFyIE9wZXJhdG9yU3Vic2NyaWJlciA9IChmdW5jdGlvbiAoX3N1cGVyKSB7XG4gICAgX19leHRlbmRzKE9wZXJhdG9yU3Vic2NyaWJlciwgX3N1cGVyKTtcbiAgICBmdW5jdGlvbiBPcGVyYXRvclN1YnNjcmliZXIoZGVzdGluYXRpb24sIG9uTmV4dCwgb25Db21wbGV0ZSwgb25FcnJvciwgb25GaW5hbGl6ZSwgc2hvdWxkVW5zdWJzY3JpYmUpIHtcbiAgICAgICAgdmFyIF90aGlzID0gX3N1cGVyLmNhbGwodGhpcywgZGVzdGluYXRpb24pIHx8IHRoaXM7XG4gICAgICAgIF90aGlzLm9uRmluYWxpemUgPSBvbkZpbmFsaXplO1xuICAgICAgICBfdGhpcy5zaG91bGRVbnN1YnNjcmliZSA9IHNob3VsZFVuc3Vic2NyaWJlO1xuICAgICAgICBfdGhpcy5fbmV4dCA9IG9uTmV4dFxuICAgICAgICAgICAgPyBmdW5jdGlvbiAodmFsdWUpIHtcbiAgICAgICAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgICAgICAgICBvbk5leHQodmFsdWUpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBjYXRjaCAoZXJyKSB7XG4gICAgICAgICAgICAgICAgICAgIGRlc3RpbmF0aW9uLmVycm9yKGVycik7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgOiBfc3VwZXIucHJvdG90eXBlLl9uZXh0O1xuICAgICAgICBfdGhpcy5fZXJyb3IgPSBvbkVycm9yXG4gICAgICAgICAgICA/IGZ1bmN0aW9uIChlcnIpIHtcbiAgICAgICAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgICAgICAgICBvbkVycm9yKGVycik7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGNhdGNoIChlcnIpIHtcbiAgICAgICAgICAgICAgICAgICAgZGVzdGluYXRpb24uZXJyb3IoZXJyKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgZmluYWxseSB7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMudW5zdWJzY3JpYmUoKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICA6IF9zdXBlci5wcm90b3R5cGUuX2Vycm9yO1xuICAgICAgICBfdGhpcy5fY29tcGxldGUgPSBvbkNvbXBsZXRlXG4gICAgICAgICAgICA/IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgICAgICAgICBvbkNvbXBsZXRlKCk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGNhdGNoIChlcnIpIHtcbiAgICAgICAgICAgICAgICAgICAgZGVzdGluYXRpb24uZXJyb3IoZXJyKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgZmluYWxseSB7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMudW5zdWJzY3JpYmUoKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICA6IF9zdXBlci5wcm90b3R5cGUuX2NvbXBsZXRlO1xuICAgICAgICByZXR1cm4gX3RoaXM7XG4gICAgfVxuICAgIE9wZXJhdG9yU3Vic2NyaWJlci5wcm90b3R5cGUudW5zdWJzY3JpYmUgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHZhciBfYTtcbiAgICAgICAgaWYgKCF0aGlzLnNob3VsZFVuc3Vic2NyaWJlIHx8IHRoaXMuc2hvdWxkVW5zdWJzY3JpYmUoKSkge1xuICAgICAgICAgICAgdmFyIGNsb3NlZF8xID0gdGhpcy5jbG9zZWQ7XG4gICAgICAgICAgICBfc3VwZXIucHJvdG90eXBlLnVuc3Vic2NyaWJlLmNhbGwodGhpcyk7XG4gICAgICAgICAgICAhY2xvc2VkXzEgJiYgKChfYSA9IHRoaXMub25GaW5hbGl6ZSkgPT09IG51bGwgfHwgX2EgPT09IHZvaWQgMCA/IHZvaWQgMCA6IF9hLmNhbGwodGhpcykpO1xuICAgICAgICB9XG4gICAgfTtcbiAgICByZXR1cm4gT3BlcmF0b3JTdWJzY3JpYmVyO1xufShTdWJzY3JpYmVyXzEuU3Vic2NyaWJlcikpO1xuZXhwb3J0cy5PcGVyYXRvclN1YnNjcmliZXIgPSBPcGVyYXRvclN1YnNjcmliZXI7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1PcGVyYXRvclN1YnNjcmliZXIuanMubWFwIiwiXCJ1c2Ugc3RyaWN0XCI7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5leHBvcnRzLmF1ZGl0ID0gdm9pZCAwO1xudmFyIGxpZnRfMSA9IHJlcXVpcmUoXCIuLi91dGlsL2xpZnRcIik7XG52YXIgaW5uZXJGcm9tXzEgPSByZXF1aXJlKFwiLi4vb2JzZXJ2YWJsZS9pbm5lckZyb21cIik7XG52YXIgT3BlcmF0b3JTdWJzY3JpYmVyXzEgPSByZXF1aXJlKFwiLi9PcGVyYXRvclN1YnNjcmliZXJcIik7XG5mdW5jdGlvbiBhdWRpdChkdXJhdGlvblNlbGVjdG9yKSB7XG4gICAgcmV0dXJuIGxpZnRfMS5vcGVyYXRlKGZ1bmN0aW9uIChzb3VyY2UsIHN1YnNjcmliZXIpIHtcbiAgICAgICAgdmFyIGhhc1ZhbHVlID0gZmFsc2U7XG4gICAgICAgIHZhciBsYXN0VmFsdWUgPSBudWxsO1xuICAgICAgICB2YXIgZHVyYXRpb25TdWJzY3JpYmVyID0gbnVsbDtcbiAgICAgICAgdmFyIGlzQ29tcGxldGUgPSBmYWxzZTtcbiAgICAgICAgdmFyIGVuZER1cmF0aW9uID0gZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgZHVyYXRpb25TdWJzY3JpYmVyID09PSBudWxsIHx8IGR1cmF0aW9uU3Vic2NyaWJlciA9PT0gdm9pZCAwID8gdm9pZCAwIDogZHVyYXRpb25TdWJzY3JpYmVyLnVuc3Vic2NyaWJlKCk7XG4gICAgICAgICAgICBkdXJhdGlvblN1YnNjcmliZXIgPSBudWxsO1xuICAgICAgICAgICAgaWYgKGhhc1ZhbHVlKSB7XG4gICAgICAgICAgICAgICAgaGFzVmFsdWUgPSBmYWxzZTtcbiAgICAgICAgICAgICAgICB2YXIgdmFsdWUgPSBsYXN0VmFsdWU7XG4gICAgICAgICAgICAgICAgbGFzdFZhbHVlID0gbnVsbDtcbiAgICAgICAgICAgICAgICBzdWJzY3JpYmVyLm5leHQodmFsdWUpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaXNDb21wbGV0ZSAmJiBzdWJzY3JpYmVyLmNvbXBsZXRlKCk7XG4gICAgICAgIH07XG4gICAgICAgIHZhciBjbGVhbnVwRHVyYXRpb24gPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICBkdXJhdGlvblN1YnNjcmliZXIgPSBudWxsO1xuICAgICAgICAgICAgaXNDb21wbGV0ZSAmJiBzdWJzY3JpYmVyLmNvbXBsZXRlKCk7XG4gICAgICAgIH07XG4gICAgICAgIHNvdXJjZS5zdWJzY3JpYmUoT3BlcmF0b3JTdWJzY3JpYmVyXzEuY3JlYXRlT3BlcmF0b3JTdWJzY3JpYmVyKHN1YnNjcmliZXIsIGZ1bmN0aW9uICh2YWx1ZSkge1xuICAgICAgICAgICAgaGFzVmFsdWUgPSB0cnVlO1xuICAgICAgICAgICAgbGFzdFZhbHVlID0gdmFsdWU7XG4gICAgICAgICAgICBpZiAoIWR1cmF0aW9uU3Vic2NyaWJlcikge1xuICAgICAgICAgICAgICAgIGlubmVyRnJvbV8xLmlubmVyRnJvbShkdXJhdGlvblNlbGVjdG9yKHZhbHVlKSkuc3Vic2NyaWJlKChkdXJhdGlvblN1YnNjcmliZXIgPSBPcGVyYXRvclN1YnNjcmliZXJfMS5jcmVhdGVPcGVyYXRvclN1YnNjcmliZXIoc3Vic2NyaWJlciwgZW5kRHVyYXRpb24sIGNsZWFudXBEdXJhdGlvbikpKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSwgZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgaXNDb21wbGV0ZSA9IHRydWU7XG4gICAgICAgICAgICAoIWhhc1ZhbHVlIHx8ICFkdXJhdGlvblN1YnNjcmliZXIgfHwgZHVyYXRpb25TdWJzY3JpYmVyLmNsb3NlZCkgJiYgc3Vic2NyaWJlci5jb21wbGV0ZSgpO1xuICAgICAgICB9KSk7XG4gICAgfSk7XG59XG5leHBvcnRzLmF1ZGl0ID0gYXVkaXQ7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1hdWRpdC5qcy5tYXAiLCJcInVzZSBzdHJpY3RcIjtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmV4cG9ydHMuYXVkaXRUaW1lID0gdm9pZCAwO1xudmFyIGFzeW5jXzEgPSByZXF1aXJlKFwiLi4vc2NoZWR1bGVyL2FzeW5jXCIpO1xudmFyIGF1ZGl0XzEgPSByZXF1aXJlKFwiLi9hdWRpdFwiKTtcbnZhciB0aW1lcl8xID0gcmVxdWlyZShcIi4uL29ic2VydmFibGUvdGltZXJcIik7XG5mdW5jdGlvbiBhdWRpdFRpbWUoZHVyYXRpb24sIHNjaGVkdWxlcikge1xuICAgIGlmIChzY2hlZHVsZXIgPT09IHZvaWQgMCkgeyBzY2hlZHVsZXIgPSBhc3luY18xLmFzeW5jU2NoZWR1bGVyOyB9XG4gICAgcmV0dXJuIGF1ZGl0XzEuYXVkaXQoZnVuY3Rpb24gKCkgeyByZXR1cm4gdGltZXJfMS50aW1lcihkdXJhdGlvbiwgc2NoZWR1bGVyKTsgfSk7XG59XG5leHBvcnRzLmF1ZGl0VGltZSA9IGF1ZGl0VGltZTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWF1ZGl0VGltZS5qcy5tYXAiLCJcInVzZSBzdHJpY3RcIjtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmV4cG9ydHMuYnVmZmVyID0gdm9pZCAwO1xudmFyIGxpZnRfMSA9IHJlcXVpcmUoXCIuLi91dGlsL2xpZnRcIik7XG52YXIgbm9vcF8xID0gcmVxdWlyZShcIi4uL3V0aWwvbm9vcFwiKTtcbnZhciBPcGVyYXRvclN1YnNjcmliZXJfMSA9IHJlcXVpcmUoXCIuL09wZXJhdG9yU3Vic2NyaWJlclwiKTtcbnZhciBpbm5lckZyb21fMSA9IHJlcXVpcmUoXCIuLi9vYnNlcnZhYmxlL2lubmVyRnJvbVwiKTtcbmZ1bmN0aW9uIGJ1ZmZlcihjbG9zaW5nTm90aWZpZXIpIHtcbiAgICByZXR1cm4gbGlmdF8xLm9wZXJhdGUoZnVuY3Rpb24gKHNvdXJjZSwgc3Vic2NyaWJlcikge1xuICAgICAgICB2YXIgY3VycmVudEJ1ZmZlciA9IFtdO1xuICAgICAgICBzb3VyY2Uuc3Vic2NyaWJlKE9wZXJhdG9yU3Vic2NyaWJlcl8xLmNyZWF0ZU9wZXJhdG9yU3Vic2NyaWJlcihzdWJzY3JpYmVyLCBmdW5jdGlvbiAodmFsdWUpIHsgcmV0dXJuIGN1cnJlbnRCdWZmZXIucHVzaCh2YWx1ZSk7IH0sIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIHN1YnNjcmliZXIubmV4dChjdXJyZW50QnVmZmVyKTtcbiAgICAgICAgICAgIHN1YnNjcmliZXIuY29tcGxldGUoKTtcbiAgICAgICAgfSkpO1xuICAgICAgICBpbm5lckZyb21fMS5pbm5lckZyb20oY2xvc2luZ05vdGlmaWVyKS5zdWJzY3JpYmUoT3BlcmF0b3JTdWJzY3JpYmVyXzEuY3JlYXRlT3BlcmF0b3JTdWJzY3JpYmVyKHN1YnNjcmliZXIsIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIHZhciBiID0gY3VycmVudEJ1ZmZlcjtcbiAgICAgICAgICAgIGN1cnJlbnRCdWZmZXIgPSBbXTtcbiAgICAgICAgICAgIHN1YnNjcmliZXIubmV4dChiKTtcbiAgICAgICAgfSwgbm9vcF8xLm5vb3ApKTtcbiAgICAgICAgcmV0dXJuIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIGN1cnJlbnRCdWZmZXIgPSBudWxsO1xuICAgICAgICB9O1xuICAgIH0pO1xufVxuZXhwb3J0cy5idWZmZXIgPSBidWZmZXI7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1idWZmZXIuanMubWFwIiwiXCJ1c2Ugc3RyaWN0XCI7XG52YXIgX192YWx1ZXMgPSAodGhpcyAmJiB0aGlzLl9fdmFsdWVzKSB8fCBmdW5jdGlvbihvKSB7XG4gICAgdmFyIHMgPSB0eXBlb2YgU3ltYm9sID09PSBcImZ1bmN0aW9uXCIgJiYgU3ltYm9sLml0ZXJhdG9yLCBtID0gcyAmJiBvW3NdLCBpID0gMDtcbiAgICBpZiAobSkgcmV0dXJuIG0uY2FsbChvKTtcbiAgICBpZiAobyAmJiB0eXBlb2Ygby5sZW5ndGggPT09IFwibnVtYmVyXCIpIHJldHVybiB7XG4gICAgICAgIG5leHQ6IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIGlmIChvICYmIGkgPj0gby5sZW5ndGgpIG8gPSB2b2lkIDA7XG4gICAgICAgICAgICByZXR1cm4geyB2YWx1ZTogbyAmJiBvW2krK10sIGRvbmU6ICFvIH07XG4gICAgICAgIH1cbiAgICB9O1xuICAgIHRocm93IG5ldyBUeXBlRXJyb3IocyA/IFwiT2JqZWN0IGlzIG5vdCBpdGVyYWJsZS5cIiA6IFwiU3ltYm9sLml0ZXJhdG9yIGlzIG5vdCBkZWZpbmVkLlwiKTtcbn07XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5leHBvcnRzLmJ1ZmZlckNvdW50ID0gdm9pZCAwO1xudmFyIGxpZnRfMSA9IHJlcXVpcmUoXCIuLi91dGlsL2xpZnRcIik7XG52YXIgT3BlcmF0b3JTdWJzY3JpYmVyXzEgPSByZXF1aXJlKFwiLi9PcGVyYXRvclN1YnNjcmliZXJcIik7XG52YXIgYXJyUmVtb3ZlXzEgPSByZXF1aXJlKFwiLi4vdXRpbC9hcnJSZW1vdmVcIik7XG5mdW5jdGlvbiBidWZmZXJDb3VudChidWZmZXJTaXplLCBzdGFydEJ1ZmZlckV2ZXJ5KSB7XG4gICAgaWYgKHN0YXJ0QnVmZmVyRXZlcnkgPT09IHZvaWQgMCkgeyBzdGFydEJ1ZmZlckV2ZXJ5ID0gbnVsbDsgfVxuICAgIHN0YXJ0QnVmZmVyRXZlcnkgPSBzdGFydEJ1ZmZlckV2ZXJ5ICE9PSBudWxsICYmIHN0YXJ0QnVmZmVyRXZlcnkgIT09IHZvaWQgMCA/IHN0YXJ0QnVmZmVyRXZlcnkgOiBidWZmZXJTaXplO1xuICAgIHJldHVybiBsaWZ0XzEub3BlcmF0ZShmdW5jdGlvbiAoc291cmNlLCBzdWJzY3JpYmVyKSB7XG4gICAgICAgIHZhciBidWZmZXJzID0gW107XG4gICAgICAgIHZhciBjb3VudCA9IDA7XG4gICAgICAgIHNvdXJjZS5zdWJzY3JpYmUoT3BlcmF0b3JTdWJzY3JpYmVyXzEuY3JlYXRlT3BlcmF0b3JTdWJzY3JpYmVyKHN1YnNjcmliZXIsIGZ1bmN0aW9uICh2YWx1ZSkge1xuICAgICAgICAgICAgdmFyIGVfMSwgX2EsIGVfMiwgX2I7XG4gICAgICAgICAgICB2YXIgdG9FbWl0ID0gbnVsbDtcbiAgICAgICAgICAgIGlmIChjb3VudCsrICUgc3RhcnRCdWZmZXJFdmVyeSA9PT0gMCkge1xuICAgICAgICAgICAgICAgIGJ1ZmZlcnMucHVzaChbXSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgICAgIGZvciAodmFyIGJ1ZmZlcnNfMSA9IF9fdmFsdWVzKGJ1ZmZlcnMpLCBidWZmZXJzXzFfMSA9IGJ1ZmZlcnNfMS5uZXh0KCk7ICFidWZmZXJzXzFfMS5kb25lOyBidWZmZXJzXzFfMSA9IGJ1ZmZlcnNfMS5uZXh0KCkpIHtcbiAgICAgICAgICAgICAgICAgICAgdmFyIGJ1ZmZlciA9IGJ1ZmZlcnNfMV8xLnZhbHVlO1xuICAgICAgICAgICAgICAgICAgICBidWZmZXIucHVzaCh2YWx1ZSk7XG4gICAgICAgICAgICAgICAgICAgIGlmIChidWZmZXJTaXplIDw9IGJ1ZmZlci5sZW5ndGgpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHRvRW1pdCA9IHRvRW1pdCAhPT0gbnVsbCAmJiB0b0VtaXQgIT09IHZvaWQgMCA/IHRvRW1pdCA6IFtdO1xuICAgICAgICAgICAgICAgICAgICAgICAgdG9FbWl0LnB1c2goYnVmZmVyKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGNhdGNoIChlXzFfMSkgeyBlXzEgPSB7IGVycm9yOiBlXzFfMSB9OyB9XG4gICAgICAgICAgICBmaW5hbGx5IHtcbiAgICAgICAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgICAgICAgICBpZiAoYnVmZmVyc18xXzEgJiYgIWJ1ZmZlcnNfMV8xLmRvbmUgJiYgKF9hID0gYnVmZmVyc18xLnJldHVybikpIF9hLmNhbGwoYnVmZmVyc18xKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgZmluYWxseSB7IGlmIChlXzEpIHRocm93IGVfMS5lcnJvcjsgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKHRvRW1pdCkge1xuICAgICAgICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICAgICAgICAgIGZvciAodmFyIHRvRW1pdF8xID0gX192YWx1ZXModG9FbWl0KSwgdG9FbWl0XzFfMSA9IHRvRW1pdF8xLm5leHQoKTsgIXRvRW1pdF8xXzEuZG9uZTsgdG9FbWl0XzFfMSA9IHRvRW1pdF8xLm5leHQoKSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgdmFyIGJ1ZmZlciA9IHRvRW1pdF8xXzEudmFsdWU7XG4gICAgICAgICAgICAgICAgICAgICAgICBhcnJSZW1vdmVfMS5hcnJSZW1vdmUoYnVmZmVycywgYnVmZmVyKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIHN1YnNjcmliZXIubmV4dChidWZmZXIpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGNhdGNoIChlXzJfMSkgeyBlXzIgPSB7IGVycm9yOiBlXzJfMSB9OyB9XG4gICAgICAgICAgICAgICAgZmluYWxseSB7XG4gICAgICAgICAgICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAodG9FbWl0XzFfMSAmJiAhdG9FbWl0XzFfMS5kb25lICYmIChfYiA9IHRvRW1pdF8xLnJldHVybikpIF9iLmNhbGwodG9FbWl0XzEpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIGZpbmFsbHkgeyBpZiAoZV8yKSB0aHJvdyBlXzIuZXJyb3I7IH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgIH0sIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIHZhciBlXzMsIF9hO1xuICAgICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgICAgICBmb3IgKHZhciBidWZmZXJzXzIgPSBfX3ZhbHVlcyhidWZmZXJzKSwgYnVmZmVyc18yXzEgPSBidWZmZXJzXzIubmV4dCgpOyAhYnVmZmVyc18yXzEuZG9uZTsgYnVmZmVyc18yXzEgPSBidWZmZXJzXzIubmV4dCgpKSB7XG4gICAgICAgICAgICAgICAgICAgIHZhciBidWZmZXIgPSBidWZmZXJzXzJfMS52YWx1ZTtcbiAgICAgICAgICAgICAgICAgICAgc3Vic2NyaWJlci5uZXh0KGJ1ZmZlcik7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgY2F0Y2ggKGVfM18xKSB7IGVfMyA9IHsgZXJyb3I6IGVfM18xIH07IH1cbiAgICAgICAgICAgIGZpbmFsbHkge1xuICAgICAgICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICAgICAgICAgIGlmIChidWZmZXJzXzJfMSAmJiAhYnVmZmVyc18yXzEuZG9uZSAmJiAoX2EgPSBidWZmZXJzXzIucmV0dXJuKSkgX2EuY2FsbChidWZmZXJzXzIpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBmaW5hbGx5IHsgaWYgKGVfMykgdGhyb3cgZV8zLmVycm9yOyB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBzdWJzY3JpYmVyLmNvbXBsZXRlKCk7XG4gICAgICAgIH0sIHVuZGVmaW5lZCwgZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgYnVmZmVycyA9IG51bGw7XG4gICAgICAgIH0pKTtcbiAgICB9KTtcbn1cbmV4cG9ydHMuYnVmZmVyQ291bnQgPSBidWZmZXJDb3VudDtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWJ1ZmZlckNvdW50LmpzLm1hcCIsIlwidXNlIHN0cmljdFwiO1xudmFyIF9fdmFsdWVzID0gKHRoaXMgJiYgdGhpcy5fX3ZhbHVlcykgfHwgZnVuY3Rpb24obykge1xuICAgIHZhciBzID0gdHlwZW9mIFN5bWJvbCA9PT0gXCJmdW5jdGlvblwiICYmIFN5bWJvbC5pdGVyYXRvciwgbSA9IHMgJiYgb1tzXSwgaSA9IDA7XG4gICAgaWYgKG0pIHJldHVybiBtLmNhbGwobyk7XG4gICAgaWYgKG8gJiYgdHlwZW9mIG8ubGVuZ3RoID09PSBcIm51bWJlclwiKSByZXR1cm4ge1xuICAgICAgICBuZXh0OiBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICBpZiAobyAmJiBpID49IG8ubGVuZ3RoKSBvID0gdm9pZCAwO1xuICAgICAgICAgICAgcmV0dXJuIHsgdmFsdWU6IG8gJiYgb1tpKytdLCBkb25lOiAhbyB9O1xuICAgICAgICB9XG4gICAgfTtcbiAgICB0aHJvdyBuZXcgVHlwZUVycm9yKHMgPyBcIk9iamVjdCBpcyBub3QgaXRlcmFibGUuXCIgOiBcIlN5bWJvbC5pdGVyYXRvciBpcyBub3QgZGVmaW5lZC5cIik7XG59O1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuZXhwb3J0cy5idWZmZXJUaW1lID0gdm9pZCAwO1xudmFyIFN1YnNjcmlwdGlvbl8xID0gcmVxdWlyZShcIi4uL1N1YnNjcmlwdGlvblwiKTtcbnZhciBsaWZ0XzEgPSByZXF1aXJlKFwiLi4vdXRpbC9saWZ0XCIpO1xudmFyIE9wZXJhdG9yU3Vic2NyaWJlcl8xID0gcmVxdWlyZShcIi4vT3BlcmF0b3JTdWJzY3JpYmVyXCIpO1xudmFyIGFyclJlbW92ZV8xID0gcmVxdWlyZShcIi4uL3V0aWwvYXJyUmVtb3ZlXCIpO1xudmFyIGFzeW5jXzEgPSByZXF1aXJlKFwiLi4vc2NoZWR1bGVyL2FzeW5jXCIpO1xudmFyIGFyZ3NfMSA9IHJlcXVpcmUoXCIuLi91dGlsL2FyZ3NcIik7XG52YXIgZXhlY3V0ZVNjaGVkdWxlXzEgPSByZXF1aXJlKFwiLi4vdXRpbC9leGVjdXRlU2NoZWR1bGVcIik7XG5mdW5jdGlvbiBidWZmZXJUaW1lKGJ1ZmZlclRpbWVTcGFuKSB7XG4gICAgdmFyIF9hLCBfYjtcbiAgICB2YXIgb3RoZXJBcmdzID0gW107XG4gICAgZm9yICh2YXIgX2kgPSAxOyBfaSA8IGFyZ3VtZW50cy5sZW5ndGg7IF9pKyspIHtcbiAgICAgICAgb3RoZXJBcmdzW19pIC0gMV0gPSBhcmd1bWVudHNbX2ldO1xuICAgIH1cbiAgICB2YXIgc2NoZWR1bGVyID0gKF9hID0gYXJnc18xLnBvcFNjaGVkdWxlcihvdGhlckFyZ3MpKSAhPT0gbnVsbCAmJiBfYSAhPT0gdm9pZCAwID8gX2EgOiBhc3luY18xLmFzeW5jU2NoZWR1bGVyO1xuICAgIHZhciBidWZmZXJDcmVhdGlvbkludGVydmFsID0gKF9iID0gb3RoZXJBcmdzWzBdKSAhPT0gbnVsbCAmJiBfYiAhPT0gdm9pZCAwID8gX2IgOiBudWxsO1xuICAgIHZhciBtYXhCdWZmZXJTaXplID0gb3RoZXJBcmdzWzFdIHx8IEluZmluaXR5O1xuICAgIHJldHVybiBsaWZ0XzEub3BlcmF0ZShmdW5jdGlvbiAoc291cmNlLCBzdWJzY3JpYmVyKSB7XG4gICAgICAgIHZhciBidWZmZXJSZWNvcmRzID0gW107XG4gICAgICAgIHZhciByZXN0YXJ0T25FbWl0ID0gZmFsc2U7XG4gICAgICAgIHZhciBlbWl0ID0gZnVuY3Rpb24gKHJlY29yZCkge1xuICAgICAgICAgICAgdmFyIGJ1ZmZlciA9IHJlY29yZC5idWZmZXIsIHN1YnMgPSByZWNvcmQuc3VicztcbiAgICAgICAgICAgIHN1YnMudW5zdWJzY3JpYmUoKTtcbiAgICAgICAgICAgIGFyclJlbW92ZV8xLmFyclJlbW92ZShidWZmZXJSZWNvcmRzLCByZWNvcmQpO1xuICAgICAgICAgICAgc3Vic2NyaWJlci5uZXh0KGJ1ZmZlcik7XG4gICAgICAgICAgICByZXN0YXJ0T25FbWl0ICYmIHN0YXJ0QnVmZmVyKCk7XG4gICAgICAgIH07XG4gICAgICAgIHZhciBzdGFydEJ1ZmZlciA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIGlmIChidWZmZXJSZWNvcmRzKSB7XG4gICAgICAgICAgICAgICAgdmFyIHN1YnMgPSBuZXcgU3Vic2NyaXB0aW9uXzEuU3Vic2NyaXB0aW9uKCk7XG4gICAgICAgICAgICAgICAgc3Vic2NyaWJlci5hZGQoc3Vicyk7XG4gICAgICAgICAgICAgICAgdmFyIGJ1ZmZlciA9IFtdO1xuICAgICAgICAgICAgICAgIHZhciByZWNvcmRfMSA9IHtcbiAgICAgICAgICAgICAgICAgICAgYnVmZmVyOiBidWZmZXIsXG4gICAgICAgICAgICAgICAgICAgIHN1YnM6IHN1YnMsXG4gICAgICAgICAgICAgICAgfTtcbiAgICAgICAgICAgICAgICBidWZmZXJSZWNvcmRzLnB1c2gocmVjb3JkXzEpO1xuICAgICAgICAgICAgICAgIGV4ZWN1dGVTY2hlZHVsZV8xLmV4ZWN1dGVTY2hlZHVsZShzdWJzLCBzY2hlZHVsZXIsIGZ1bmN0aW9uICgpIHsgcmV0dXJuIGVtaXQocmVjb3JkXzEpOyB9LCBidWZmZXJUaW1lU3Bhbik7XG4gICAgICAgICAgICB9XG4gICAgICAgIH07XG4gICAgICAgIGlmIChidWZmZXJDcmVhdGlvbkludGVydmFsICE9PSBudWxsICYmIGJ1ZmZlckNyZWF0aW9uSW50ZXJ2YWwgPj0gMCkge1xuICAgICAgICAgICAgZXhlY3V0ZVNjaGVkdWxlXzEuZXhlY3V0ZVNjaGVkdWxlKHN1YnNjcmliZXIsIHNjaGVkdWxlciwgc3RhcnRCdWZmZXIsIGJ1ZmZlckNyZWF0aW9uSW50ZXJ2YWwsIHRydWUpO1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgcmVzdGFydE9uRW1pdCA9IHRydWU7XG4gICAgICAgIH1cbiAgICAgICAgc3RhcnRCdWZmZXIoKTtcbiAgICAgICAgdmFyIGJ1ZmZlclRpbWVTdWJzY3JpYmVyID0gT3BlcmF0b3JTdWJzY3JpYmVyXzEuY3JlYXRlT3BlcmF0b3JTdWJzY3JpYmVyKHN1YnNjcmliZXIsIGZ1bmN0aW9uICh2YWx1ZSkge1xuICAgICAgICAgICAgdmFyIGVfMSwgX2E7XG4gICAgICAgICAgICB2YXIgcmVjb3Jkc0NvcHkgPSBidWZmZXJSZWNvcmRzLnNsaWNlKCk7XG4gICAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgICAgIGZvciAodmFyIHJlY29yZHNDb3B5XzEgPSBfX3ZhbHVlcyhyZWNvcmRzQ29weSksIHJlY29yZHNDb3B5XzFfMSA9IHJlY29yZHNDb3B5XzEubmV4dCgpOyAhcmVjb3Jkc0NvcHlfMV8xLmRvbmU7IHJlY29yZHNDb3B5XzFfMSA9IHJlY29yZHNDb3B5XzEubmV4dCgpKSB7XG4gICAgICAgICAgICAgICAgICAgIHZhciByZWNvcmQgPSByZWNvcmRzQ29weV8xXzEudmFsdWU7XG4gICAgICAgICAgICAgICAgICAgIHZhciBidWZmZXIgPSByZWNvcmQuYnVmZmVyO1xuICAgICAgICAgICAgICAgICAgICBidWZmZXIucHVzaCh2YWx1ZSk7XG4gICAgICAgICAgICAgICAgICAgIG1heEJ1ZmZlclNpemUgPD0gYnVmZmVyLmxlbmd0aCAmJiBlbWl0KHJlY29yZCk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgY2F0Y2ggKGVfMV8xKSB7IGVfMSA9IHsgZXJyb3I6IGVfMV8xIH07IH1cbiAgICAgICAgICAgIGZpbmFsbHkge1xuICAgICAgICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICAgICAgICAgIGlmIChyZWNvcmRzQ29weV8xXzEgJiYgIXJlY29yZHNDb3B5XzFfMS5kb25lICYmIChfYSA9IHJlY29yZHNDb3B5XzEucmV0dXJuKSkgX2EuY2FsbChyZWNvcmRzQ29weV8xKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgZmluYWxseSB7IGlmIChlXzEpIHRocm93IGVfMS5lcnJvcjsgfVxuICAgICAgICAgICAgfVxuICAgICAgICB9LCBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICB3aGlsZSAoYnVmZmVyUmVjb3JkcyA9PT0gbnVsbCB8fCBidWZmZXJSZWNvcmRzID09PSB2b2lkIDAgPyB2b2lkIDAgOiBidWZmZXJSZWNvcmRzLmxlbmd0aCkge1xuICAgICAgICAgICAgICAgIHN1YnNjcmliZXIubmV4dChidWZmZXJSZWNvcmRzLnNoaWZ0KCkuYnVmZmVyKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGJ1ZmZlclRpbWVTdWJzY3JpYmVyID09PSBudWxsIHx8IGJ1ZmZlclRpbWVTdWJzY3JpYmVyID09PSB2b2lkIDAgPyB2b2lkIDAgOiBidWZmZXJUaW1lU3Vic2NyaWJlci51bnN1YnNjcmliZSgpO1xuICAgICAgICAgICAgc3Vic2NyaWJlci5jb21wbGV0ZSgpO1xuICAgICAgICAgICAgc3Vic2NyaWJlci51bnN1YnNjcmliZSgpO1xuICAgICAgICB9LCB1bmRlZmluZWQsIGZ1bmN0aW9uICgpIHsgcmV0dXJuIChidWZmZXJSZWNvcmRzID0gbnVsbCk7IH0pO1xuICAgICAgICBzb3VyY2Uuc3Vic2NyaWJlKGJ1ZmZlclRpbWVTdWJzY3JpYmVyKTtcbiAgICB9KTtcbn1cbmV4cG9ydHMuYnVmZmVyVGltZSA9IGJ1ZmZlclRpbWU7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1idWZmZXJUaW1lLmpzLm1hcCIsIlwidXNlIHN0cmljdFwiO1xudmFyIF9fdmFsdWVzID0gKHRoaXMgJiYgdGhpcy5fX3ZhbHVlcykgfHwgZnVuY3Rpb24obykge1xuICAgIHZhciBzID0gdHlwZW9mIFN5bWJvbCA9PT0gXCJmdW5jdGlvblwiICYmIFN5bWJvbC5pdGVyYXRvciwgbSA9IHMgJiYgb1tzXSwgaSA9IDA7XG4gICAgaWYgKG0pIHJldHVybiBtLmNhbGwobyk7XG4gICAgaWYgKG8gJiYgdHlwZW9mIG8ubGVuZ3RoID09PSBcIm51bWJlclwiKSByZXR1cm4ge1xuICAgICAgICBuZXh0OiBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICBpZiAobyAmJiBpID49IG8ubGVuZ3RoKSBvID0gdm9pZCAwO1xuICAgICAgICAgICAgcmV0dXJuIHsgdmFsdWU6IG8gJiYgb1tpKytdLCBkb25lOiAhbyB9O1xuICAgICAgICB9XG4gICAgfTtcbiAgICB0aHJvdyBuZXcgVHlwZUVycm9yKHMgPyBcIk9iamVjdCBpcyBub3QgaXRlcmFibGUuXCIgOiBcIlN5bWJvbC5pdGVyYXRvciBpcyBub3QgZGVmaW5lZC5cIik7XG59O1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuZXhwb3J0cy5idWZmZXJUb2dnbGUgPSB2b2lkIDA7XG52YXIgU3Vic2NyaXB0aW9uXzEgPSByZXF1aXJlKFwiLi4vU3Vic2NyaXB0aW9uXCIpO1xudmFyIGxpZnRfMSA9IHJlcXVpcmUoXCIuLi91dGlsL2xpZnRcIik7XG52YXIgaW5uZXJGcm9tXzEgPSByZXF1aXJlKFwiLi4vb2JzZXJ2YWJsZS9pbm5lckZyb21cIik7XG52YXIgT3BlcmF0b3JTdWJzY3JpYmVyXzEgPSByZXF1aXJlKFwiLi9PcGVyYXRvclN1YnNjcmliZXJcIik7XG52YXIgbm9vcF8xID0gcmVxdWlyZShcIi4uL3V0aWwvbm9vcFwiKTtcbnZhciBhcnJSZW1vdmVfMSA9IHJlcXVpcmUoXCIuLi91dGlsL2FyclJlbW92ZVwiKTtcbmZ1bmN0aW9uIGJ1ZmZlclRvZ2dsZShvcGVuaW5ncywgY2xvc2luZ1NlbGVjdG9yKSB7XG4gICAgcmV0dXJuIGxpZnRfMS5vcGVyYXRlKGZ1bmN0aW9uIChzb3VyY2UsIHN1YnNjcmliZXIpIHtcbiAgICAgICAgdmFyIGJ1ZmZlcnMgPSBbXTtcbiAgICAgICAgaW5uZXJGcm9tXzEuaW5uZXJGcm9tKG9wZW5pbmdzKS5zdWJzY3JpYmUoT3BlcmF0b3JTdWJzY3JpYmVyXzEuY3JlYXRlT3BlcmF0b3JTdWJzY3JpYmVyKHN1YnNjcmliZXIsIGZ1bmN0aW9uIChvcGVuVmFsdWUpIHtcbiAgICAgICAgICAgIHZhciBidWZmZXIgPSBbXTtcbiAgICAgICAgICAgIGJ1ZmZlcnMucHVzaChidWZmZXIpO1xuICAgICAgICAgICAgdmFyIGNsb3NpbmdTdWJzY3JpcHRpb24gPSBuZXcgU3Vic2NyaXB0aW9uXzEuU3Vic2NyaXB0aW9uKCk7XG4gICAgICAgICAgICB2YXIgZW1pdEJ1ZmZlciA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICBhcnJSZW1vdmVfMS5hcnJSZW1vdmUoYnVmZmVycywgYnVmZmVyKTtcbiAgICAgICAgICAgICAgICBzdWJzY3JpYmVyLm5leHQoYnVmZmVyKTtcbiAgICAgICAgICAgICAgICBjbG9zaW5nU3Vic2NyaXB0aW9uLnVuc3Vic2NyaWJlKCk7XG4gICAgICAgICAgICB9O1xuICAgICAgICAgICAgY2xvc2luZ1N1YnNjcmlwdGlvbi5hZGQoaW5uZXJGcm9tXzEuaW5uZXJGcm9tKGNsb3NpbmdTZWxlY3RvcihvcGVuVmFsdWUpKS5zdWJzY3JpYmUoT3BlcmF0b3JTdWJzY3JpYmVyXzEuY3JlYXRlT3BlcmF0b3JTdWJzY3JpYmVyKHN1YnNjcmliZXIsIGVtaXRCdWZmZXIsIG5vb3BfMS5ub29wKSkpO1xuICAgICAgICB9LCBub29wXzEubm9vcCkpO1xuICAgICAgICBzb3VyY2Uuc3Vic2NyaWJlKE9wZXJhdG9yU3Vic2NyaWJlcl8xLmNyZWF0ZU9wZXJhdG9yU3Vic2NyaWJlcihzdWJzY3JpYmVyLCBmdW5jdGlvbiAodmFsdWUpIHtcbiAgICAgICAgICAgIHZhciBlXzEsIF9hO1xuICAgICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgICAgICBmb3IgKHZhciBidWZmZXJzXzEgPSBfX3ZhbHVlcyhidWZmZXJzKSwgYnVmZmVyc18xXzEgPSBidWZmZXJzXzEubmV4dCgpOyAhYnVmZmVyc18xXzEuZG9uZTsgYnVmZmVyc18xXzEgPSBidWZmZXJzXzEubmV4dCgpKSB7XG4gICAgICAgICAgICAgICAgICAgIHZhciBidWZmZXIgPSBidWZmZXJzXzFfMS52YWx1ZTtcbiAgICAgICAgICAgICAgICAgICAgYnVmZmVyLnB1c2godmFsdWUpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGNhdGNoIChlXzFfMSkgeyBlXzEgPSB7IGVycm9yOiBlXzFfMSB9OyB9XG4gICAgICAgICAgICBmaW5hbGx5IHtcbiAgICAgICAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgICAgICAgICBpZiAoYnVmZmVyc18xXzEgJiYgIWJ1ZmZlcnNfMV8xLmRvbmUgJiYgKF9hID0gYnVmZmVyc18xLnJldHVybikpIF9hLmNhbGwoYnVmZmVyc18xKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgZmluYWxseSB7IGlmIChlXzEpIHRocm93IGVfMS5lcnJvcjsgfVxuICAgICAgICAgICAgfVxuICAgICAgICB9LCBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICB3aGlsZSAoYnVmZmVycy5sZW5ndGggPiAwKSB7XG4gICAgICAgICAgICAgICAgc3Vic2NyaWJlci5uZXh0KGJ1ZmZlcnMuc2hpZnQoKSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBzdWJzY3JpYmVyLmNvbXBsZXRlKCk7XG4gICAgICAgIH0pKTtcbiAgICB9KTtcbn1cbmV4cG9ydHMuYnVmZmVyVG9nZ2xlID0gYnVmZmVyVG9nZ2xlO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9YnVmZmVyVG9nZ2xlLmpzLm1hcCIsIlwidXNlIHN0cmljdFwiO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuZXhwb3J0cy5idWZmZXJXaGVuID0gdm9pZCAwO1xudmFyIGxpZnRfMSA9IHJlcXVpcmUoXCIuLi91dGlsL2xpZnRcIik7XG52YXIgbm9vcF8xID0gcmVxdWlyZShcIi4uL3V0aWwvbm9vcFwiKTtcbnZhciBPcGVyYXRvclN1YnNjcmliZXJfMSA9IHJlcXVpcmUoXCIuL09wZXJhdG9yU3Vic2NyaWJlclwiKTtcbnZhciBpbm5lckZyb21fMSA9IHJlcXVpcmUoXCIuLi9vYnNlcnZhYmxlL2lubmVyRnJvbVwiKTtcbmZ1bmN0aW9uIGJ1ZmZlcldoZW4oY2xvc2luZ1NlbGVjdG9yKSB7XG4gICAgcmV0dXJuIGxpZnRfMS5vcGVyYXRlKGZ1bmN0aW9uIChzb3VyY2UsIHN1YnNjcmliZXIpIHtcbiAgICAgICAgdmFyIGJ1ZmZlciA9IG51bGw7XG4gICAgICAgIHZhciBjbG9zaW5nU3Vic2NyaWJlciA9IG51bGw7XG4gICAgICAgIHZhciBvcGVuQnVmZmVyID0gZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgY2xvc2luZ1N1YnNjcmliZXIgPT09IG51bGwgfHwgY2xvc2luZ1N1YnNjcmliZXIgPT09IHZvaWQgMCA/IHZvaWQgMCA6IGNsb3NpbmdTdWJzY3JpYmVyLnVuc3Vic2NyaWJlKCk7XG4gICAgICAgICAgICB2YXIgYiA9IGJ1ZmZlcjtcbiAgICAgICAgICAgIGJ1ZmZlciA9IFtdO1xuICAgICAgICAgICAgYiAmJiBzdWJzY3JpYmVyLm5leHQoYik7XG4gICAgICAgICAgICBpbm5lckZyb21fMS5pbm5lckZyb20oY2xvc2luZ1NlbGVjdG9yKCkpLnN1YnNjcmliZSgoY2xvc2luZ1N1YnNjcmliZXIgPSBPcGVyYXRvclN1YnNjcmliZXJfMS5jcmVhdGVPcGVyYXRvclN1YnNjcmliZXIoc3Vic2NyaWJlciwgb3BlbkJ1ZmZlciwgbm9vcF8xLm5vb3ApKSk7XG4gICAgICAgIH07XG4gICAgICAgIG9wZW5CdWZmZXIoKTtcbiAgICAgICAgc291cmNlLnN1YnNjcmliZShPcGVyYXRvclN1YnNjcmliZXJfMS5jcmVhdGVPcGVyYXRvclN1YnNjcmliZXIoc3Vic2NyaWJlciwgZnVuY3Rpb24gKHZhbHVlKSB7IHJldHVybiBidWZmZXIgPT09IG51bGwgfHwgYnVmZmVyID09PSB2b2lkIDAgPyB2b2lkIDAgOiBidWZmZXIucHVzaCh2YWx1ZSk7IH0sIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIGJ1ZmZlciAmJiBzdWJzY3JpYmVyLm5leHQoYnVmZmVyKTtcbiAgICAgICAgICAgIHN1YnNjcmliZXIuY29tcGxldGUoKTtcbiAgICAgICAgfSwgdW5kZWZpbmVkLCBmdW5jdGlvbiAoKSB7IHJldHVybiAoYnVmZmVyID0gY2xvc2luZ1N1YnNjcmliZXIgPSBudWxsKTsgfSkpO1xuICAgIH0pO1xufVxuZXhwb3J0cy5idWZmZXJXaGVuID0gYnVmZmVyV2hlbjtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWJ1ZmZlcldoZW4uanMubWFwIiwiXCJ1c2Ugc3RyaWN0XCI7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5leHBvcnRzLmNhdGNoRXJyb3IgPSB2b2lkIDA7XG52YXIgaW5uZXJGcm9tXzEgPSByZXF1aXJlKFwiLi4vb2JzZXJ2YWJsZS9pbm5lckZyb21cIik7XG52YXIgT3BlcmF0b3JTdWJzY3JpYmVyXzEgPSByZXF1aXJlKFwiLi9PcGVyYXRvclN1YnNjcmliZXJcIik7XG52YXIgbGlmdF8xID0gcmVxdWlyZShcIi4uL3V0aWwvbGlmdFwiKTtcbmZ1bmN0aW9uIGNhdGNoRXJyb3Ioc2VsZWN0b3IpIHtcbiAgICByZXR1cm4gbGlmdF8xLm9wZXJhdGUoZnVuY3Rpb24gKHNvdXJjZSwgc3Vic2NyaWJlcikge1xuICAgICAgICB2YXIgaW5uZXJTdWIgPSBudWxsO1xuICAgICAgICB2YXIgc3luY1Vuc3ViID0gZmFsc2U7XG4gICAgICAgIHZhciBoYW5kbGVkUmVzdWx0O1xuICAgICAgICBpbm5lclN1YiA9IHNvdXJjZS5zdWJzY3JpYmUoT3BlcmF0b3JTdWJzY3JpYmVyXzEuY3JlYXRlT3BlcmF0b3JTdWJzY3JpYmVyKHN1YnNjcmliZXIsIHVuZGVmaW5lZCwgdW5kZWZpbmVkLCBmdW5jdGlvbiAoZXJyKSB7XG4gICAgICAgICAgICBoYW5kbGVkUmVzdWx0ID0gaW5uZXJGcm9tXzEuaW5uZXJGcm9tKHNlbGVjdG9yKGVyciwgY2F0Y2hFcnJvcihzZWxlY3Rvcikoc291cmNlKSkpO1xuICAgICAgICAgICAgaWYgKGlubmVyU3ViKSB7XG4gICAgICAgICAgICAgICAgaW5uZXJTdWIudW5zdWJzY3JpYmUoKTtcbiAgICAgICAgICAgICAgICBpbm5lclN1YiA9IG51bGw7XG4gICAgICAgICAgICAgICAgaGFuZGxlZFJlc3VsdC5zdWJzY3JpYmUoc3Vic2NyaWJlcik7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICBzeW5jVW5zdWIgPSB0cnVlO1xuICAgICAgICAgICAgfVxuICAgICAgICB9KSk7XG4gICAgICAgIGlmIChzeW5jVW5zdWIpIHtcbiAgICAgICAgICAgIGlubmVyU3ViLnVuc3Vic2NyaWJlKCk7XG4gICAgICAgICAgICBpbm5lclN1YiA9IG51bGw7XG4gICAgICAgICAgICBoYW5kbGVkUmVzdWx0LnN1YnNjcmliZShzdWJzY3JpYmVyKTtcbiAgICAgICAgfVxuICAgIH0pO1xufVxuZXhwb3J0cy5jYXRjaEVycm9yID0gY2F0Y2hFcnJvcjtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWNhdGNoRXJyb3IuanMubWFwIiwiXCJ1c2Ugc3RyaWN0XCI7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5leHBvcnRzLmNvbWJpbmVBbGwgPSB2b2lkIDA7XG52YXIgY29tYmluZUxhdGVzdEFsbF8xID0gcmVxdWlyZShcIi4vY29tYmluZUxhdGVzdEFsbFwiKTtcbmV4cG9ydHMuY29tYmluZUFsbCA9IGNvbWJpbmVMYXRlc3RBbGxfMS5jb21iaW5lTGF0ZXN0QWxsO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9Y29tYmluZUFsbC5qcy5tYXAiLCJcInVzZSBzdHJpY3RcIjtcbnZhciBfX3JlYWQgPSAodGhpcyAmJiB0aGlzLl9fcmVhZCkgfHwgZnVuY3Rpb24gKG8sIG4pIHtcbiAgICB2YXIgbSA9IHR5cGVvZiBTeW1ib2wgPT09IFwiZnVuY3Rpb25cIiAmJiBvW1N5bWJvbC5pdGVyYXRvcl07XG4gICAgaWYgKCFtKSByZXR1cm4gbztcbiAgICB2YXIgaSA9IG0uY2FsbChvKSwgciwgYXIgPSBbXSwgZTtcbiAgICB0cnkge1xuICAgICAgICB3aGlsZSAoKG4gPT09IHZvaWQgMCB8fCBuLS0gPiAwKSAmJiAhKHIgPSBpLm5leHQoKSkuZG9uZSkgYXIucHVzaChyLnZhbHVlKTtcbiAgICB9XG4gICAgY2F0Y2ggKGVycm9yKSB7IGUgPSB7IGVycm9yOiBlcnJvciB9OyB9XG4gICAgZmluYWxseSB7XG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgICBpZiAociAmJiAhci5kb25lICYmIChtID0gaVtcInJldHVyblwiXSkpIG0uY2FsbChpKTtcbiAgICAgICAgfVxuICAgICAgICBmaW5hbGx5IHsgaWYgKGUpIHRocm93IGUuZXJyb3I7IH1cbiAgICB9XG4gICAgcmV0dXJuIGFyO1xufTtcbnZhciBfX3NwcmVhZEFycmF5ID0gKHRoaXMgJiYgdGhpcy5fX3NwcmVhZEFycmF5KSB8fCBmdW5jdGlvbiAodG8sIGZyb20pIHtcbiAgICBmb3IgKHZhciBpID0gMCwgaWwgPSBmcm9tLmxlbmd0aCwgaiA9IHRvLmxlbmd0aDsgaSA8IGlsOyBpKyssIGorKylcbiAgICAgICAgdG9bal0gPSBmcm9tW2ldO1xuICAgIHJldHVybiB0bztcbn07XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5leHBvcnRzLmNvbWJpbmVMYXRlc3QgPSB2b2lkIDA7XG52YXIgY29tYmluZUxhdGVzdF8xID0gcmVxdWlyZShcIi4uL29ic2VydmFibGUvY29tYmluZUxhdGVzdFwiKTtcbnZhciBsaWZ0XzEgPSByZXF1aXJlKFwiLi4vdXRpbC9saWZ0XCIpO1xudmFyIGFyZ3NPckFyZ0FycmF5XzEgPSByZXF1aXJlKFwiLi4vdXRpbC9hcmdzT3JBcmdBcnJheVwiKTtcbnZhciBtYXBPbmVPck1hbnlBcmdzXzEgPSByZXF1aXJlKFwiLi4vdXRpbC9tYXBPbmVPck1hbnlBcmdzXCIpO1xudmFyIHBpcGVfMSA9IHJlcXVpcmUoXCIuLi91dGlsL3BpcGVcIik7XG52YXIgYXJnc18xID0gcmVxdWlyZShcIi4uL3V0aWwvYXJnc1wiKTtcbmZ1bmN0aW9uIGNvbWJpbmVMYXRlc3QoKSB7XG4gICAgdmFyIGFyZ3MgPSBbXTtcbiAgICBmb3IgKHZhciBfaSA9IDA7IF9pIDwgYXJndW1lbnRzLmxlbmd0aDsgX2krKykge1xuICAgICAgICBhcmdzW19pXSA9IGFyZ3VtZW50c1tfaV07XG4gICAgfVxuICAgIHZhciByZXN1bHRTZWxlY3RvciA9IGFyZ3NfMS5wb3BSZXN1bHRTZWxlY3RvcihhcmdzKTtcbiAgICByZXR1cm4gcmVzdWx0U2VsZWN0b3JcbiAgICAgICAgPyBwaXBlXzEucGlwZShjb21iaW5lTGF0ZXN0LmFwcGx5KHZvaWQgMCwgX19zcHJlYWRBcnJheShbXSwgX19yZWFkKGFyZ3MpKSksIG1hcE9uZU9yTWFueUFyZ3NfMS5tYXBPbmVPck1hbnlBcmdzKHJlc3VsdFNlbGVjdG9yKSlcbiAgICAgICAgOiBsaWZ0XzEub3BlcmF0ZShmdW5jdGlvbiAoc291cmNlLCBzdWJzY3JpYmVyKSB7XG4gICAgICAgICAgICBjb21iaW5lTGF0ZXN0XzEuY29tYmluZUxhdGVzdEluaXQoX19zcHJlYWRBcnJheShbc291cmNlXSwgX19yZWFkKGFyZ3NPckFyZ0FycmF5XzEuYXJnc09yQXJnQXJyYXkoYXJncykpKSkoc3Vic2NyaWJlcik7XG4gICAgICAgIH0pO1xufVxuZXhwb3J0cy5jb21iaW5lTGF0ZXN0ID0gY29tYmluZUxhdGVzdDtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWNvbWJpbmVMYXRlc3QuanMubWFwIiwiXCJ1c2Ugc3RyaWN0XCI7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5leHBvcnRzLmNvbWJpbmVMYXRlc3RBbGwgPSB2b2lkIDA7XG52YXIgY29tYmluZUxhdGVzdF8xID0gcmVxdWlyZShcIi4uL29ic2VydmFibGUvY29tYmluZUxhdGVzdFwiKTtcbnZhciBqb2luQWxsSW50ZXJuYWxzXzEgPSByZXF1aXJlKFwiLi9qb2luQWxsSW50ZXJuYWxzXCIpO1xuZnVuY3Rpb24gY29tYmluZUxhdGVzdEFsbChwcm9qZWN0KSB7XG4gICAgcmV0dXJuIGpvaW5BbGxJbnRlcm5hbHNfMS5qb2luQWxsSW50ZXJuYWxzKGNvbWJpbmVMYXRlc3RfMS5jb21iaW5lTGF0ZXN0LCBwcm9qZWN0KTtcbn1cbmV4cG9ydHMuY29tYmluZUxhdGVzdEFsbCA9IGNvbWJpbmVMYXRlc3RBbGw7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1jb21iaW5lTGF0ZXN0QWxsLmpzLm1hcCIsIlwidXNlIHN0cmljdFwiO1xudmFyIF9fcmVhZCA9ICh0aGlzICYmIHRoaXMuX19yZWFkKSB8fCBmdW5jdGlvbiAobywgbikge1xuICAgIHZhciBtID0gdHlwZW9mIFN5bWJvbCA9PT0gXCJmdW5jdGlvblwiICYmIG9bU3ltYm9sLml0ZXJhdG9yXTtcbiAgICBpZiAoIW0pIHJldHVybiBvO1xuICAgIHZhciBpID0gbS5jYWxsKG8pLCByLCBhciA9IFtdLCBlO1xuICAgIHRyeSB7XG4gICAgICAgIHdoaWxlICgobiA9PT0gdm9pZCAwIHx8IG4tLSA+IDApICYmICEociA9IGkubmV4dCgpKS5kb25lKSBhci5wdXNoKHIudmFsdWUpO1xuICAgIH1cbiAgICBjYXRjaCAoZXJyb3IpIHsgZSA9IHsgZXJyb3I6IGVycm9yIH07IH1cbiAgICBmaW5hbGx5IHtcbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgIGlmIChyICYmICFyLmRvbmUgJiYgKG0gPSBpW1wicmV0dXJuXCJdKSkgbS5jYWxsKGkpO1xuICAgICAgICB9XG4gICAgICAgIGZpbmFsbHkgeyBpZiAoZSkgdGhyb3cgZS5lcnJvcjsgfVxuICAgIH1cbiAgICByZXR1cm4gYXI7XG59O1xudmFyIF9fc3ByZWFkQXJyYXkgPSAodGhpcyAmJiB0aGlzLl9fc3ByZWFkQXJyYXkpIHx8IGZ1bmN0aW9uICh0bywgZnJvbSkge1xuICAgIGZvciAodmFyIGkgPSAwLCBpbCA9IGZyb20ubGVuZ3RoLCBqID0gdG8ubGVuZ3RoOyBpIDwgaWw7IGkrKywgaisrKVxuICAgICAgICB0b1tqXSA9IGZyb21baV07XG4gICAgcmV0dXJuIHRvO1xufTtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmV4cG9ydHMuY29tYmluZUxhdGVzdFdpdGggPSB2b2lkIDA7XG52YXIgY29tYmluZUxhdGVzdF8xID0gcmVxdWlyZShcIi4vY29tYmluZUxhdGVzdFwiKTtcbmZ1bmN0aW9uIGNvbWJpbmVMYXRlc3RXaXRoKCkge1xuICAgIHZhciBvdGhlclNvdXJjZXMgPSBbXTtcbiAgICBmb3IgKHZhciBfaSA9IDA7IF9pIDwgYXJndW1lbnRzLmxlbmd0aDsgX2krKykge1xuICAgICAgICBvdGhlclNvdXJjZXNbX2ldID0gYXJndW1lbnRzW19pXTtcbiAgICB9XG4gICAgcmV0dXJuIGNvbWJpbmVMYXRlc3RfMS5jb21iaW5lTGF0ZXN0LmFwcGx5KHZvaWQgMCwgX19zcHJlYWRBcnJheShbXSwgX19yZWFkKG90aGVyU291cmNlcykpKTtcbn1cbmV4cG9ydHMuY29tYmluZUxhdGVzdFdpdGggPSBjb21iaW5lTGF0ZXN0V2l0aDtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWNvbWJpbmVMYXRlc3RXaXRoLmpzLm1hcCIsIlwidXNlIHN0cmljdFwiO1xudmFyIF9fcmVhZCA9ICh0aGlzICYmIHRoaXMuX19yZWFkKSB8fCBmdW5jdGlvbiAobywgbikge1xuICAgIHZhciBtID0gdHlwZW9mIFN5bWJvbCA9PT0gXCJmdW5jdGlvblwiICYmIG9bU3ltYm9sLml0ZXJhdG9yXTtcbiAgICBpZiAoIW0pIHJldHVybiBvO1xuICAgIHZhciBpID0gbS5jYWxsKG8pLCByLCBhciA9IFtdLCBlO1xuICAgIHRyeSB7XG4gICAgICAgIHdoaWxlICgobiA9PT0gdm9pZCAwIHx8IG4tLSA+IDApICYmICEociA9IGkubmV4dCgpKS5kb25lKSBhci5wdXNoKHIudmFsdWUpO1xuICAgIH1cbiAgICBjYXRjaCAoZXJyb3IpIHsgZSA9IHsgZXJyb3I6IGVycm9yIH07IH1cbiAgICBmaW5hbGx5IHtcbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgIGlmIChyICYmICFyLmRvbmUgJiYgKG0gPSBpW1wicmV0dXJuXCJdKSkgbS5jYWxsKGkpO1xuICAgICAgICB9XG4gICAgICAgIGZpbmFsbHkgeyBpZiAoZSkgdGhyb3cgZS5lcnJvcjsgfVxuICAgIH1cbiAgICByZXR1cm4gYXI7XG59O1xudmFyIF9fc3ByZWFkQXJyYXkgPSAodGhpcyAmJiB0aGlzLl9fc3ByZWFkQXJyYXkpIHx8IGZ1bmN0aW9uICh0bywgZnJvbSkge1xuICAgIGZvciAodmFyIGkgPSAwLCBpbCA9IGZyb20ubGVuZ3RoLCBqID0gdG8ubGVuZ3RoOyBpIDwgaWw7IGkrKywgaisrKVxuICAgICAgICB0b1tqXSA9IGZyb21baV07XG4gICAgcmV0dXJuIHRvO1xufTtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmV4cG9ydHMuY29uY2F0ID0gdm9pZCAwO1xudmFyIGxpZnRfMSA9IHJlcXVpcmUoXCIuLi91dGlsL2xpZnRcIik7XG52YXIgY29uY2F0QWxsXzEgPSByZXF1aXJlKFwiLi9jb25jYXRBbGxcIik7XG52YXIgYXJnc18xID0gcmVxdWlyZShcIi4uL3V0aWwvYXJnc1wiKTtcbnZhciBmcm9tXzEgPSByZXF1aXJlKFwiLi4vb2JzZXJ2YWJsZS9mcm9tXCIpO1xuZnVuY3Rpb24gY29uY2F0KCkge1xuICAgIHZhciBhcmdzID0gW107XG4gICAgZm9yICh2YXIgX2kgPSAwOyBfaSA8IGFyZ3VtZW50cy5sZW5ndGg7IF9pKyspIHtcbiAgICAgICAgYXJnc1tfaV0gPSBhcmd1bWVudHNbX2ldO1xuICAgIH1cbiAgICB2YXIgc2NoZWR1bGVyID0gYXJnc18xLnBvcFNjaGVkdWxlcihhcmdzKTtcbiAgICByZXR1cm4gbGlmdF8xLm9wZXJhdGUoZnVuY3Rpb24gKHNvdXJjZSwgc3Vic2NyaWJlcikge1xuICAgICAgICBjb25jYXRBbGxfMS5jb25jYXRBbGwoKShmcm9tXzEuZnJvbShfX3NwcmVhZEFycmF5KFtzb3VyY2VdLCBfX3JlYWQoYXJncykpLCBzY2hlZHVsZXIpKS5zdWJzY3JpYmUoc3Vic2NyaWJlcik7XG4gICAgfSk7XG59XG5leHBvcnRzLmNvbmNhdCA9IGNvbmNhdDtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWNvbmNhdC5qcy5tYXAiLCJcInVzZSBzdHJpY3RcIjtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmV4cG9ydHMuY29uY2F0QWxsID0gdm9pZCAwO1xudmFyIG1lcmdlQWxsXzEgPSByZXF1aXJlKFwiLi9tZXJnZUFsbFwiKTtcbmZ1bmN0aW9uIGNvbmNhdEFsbCgpIHtcbiAgICByZXR1cm4gbWVyZ2VBbGxfMS5tZXJnZUFsbCgxKTtcbn1cbmV4cG9ydHMuY29uY2F0QWxsID0gY29uY2F0QWxsO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9Y29uY2F0QWxsLmpzLm1hcCIsIlwidXNlIHN0cmljdFwiO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuZXhwb3J0cy5jb25jYXRNYXAgPSB2b2lkIDA7XG52YXIgbWVyZ2VNYXBfMSA9IHJlcXVpcmUoXCIuL21lcmdlTWFwXCIpO1xudmFyIGlzRnVuY3Rpb25fMSA9IHJlcXVpcmUoXCIuLi91dGlsL2lzRnVuY3Rpb25cIik7XG5mdW5jdGlvbiBjb25jYXRNYXAocHJvamVjdCwgcmVzdWx0U2VsZWN0b3IpIHtcbiAgICByZXR1cm4gaXNGdW5jdGlvbl8xLmlzRnVuY3Rpb24ocmVzdWx0U2VsZWN0b3IpID8gbWVyZ2VNYXBfMS5tZXJnZU1hcChwcm9qZWN0LCByZXN1bHRTZWxlY3RvciwgMSkgOiBtZXJnZU1hcF8xLm1lcmdlTWFwKHByb2plY3QsIDEpO1xufVxuZXhwb3J0cy5jb25jYXRNYXAgPSBjb25jYXRNYXA7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1jb25jYXRNYXAuanMubWFwIiwiXCJ1c2Ugc3RyaWN0XCI7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5leHBvcnRzLmNvbmNhdE1hcFRvID0gdm9pZCAwO1xudmFyIGNvbmNhdE1hcF8xID0gcmVxdWlyZShcIi4vY29uY2F0TWFwXCIpO1xudmFyIGlzRnVuY3Rpb25fMSA9IHJlcXVpcmUoXCIuLi91dGlsL2lzRnVuY3Rpb25cIik7XG5mdW5jdGlvbiBjb25jYXRNYXBUbyhpbm5lck9ic2VydmFibGUsIHJlc3VsdFNlbGVjdG9yKSB7XG4gICAgcmV0dXJuIGlzRnVuY3Rpb25fMS5pc0Z1bmN0aW9uKHJlc3VsdFNlbGVjdG9yKSA/IGNvbmNhdE1hcF8xLmNvbmNhdE1hcChmdW5jdGlvbiAoKSB7IHJldHVybiBpbm5lck9ic2VydmFibGU7IH0sIHJlc3VsdFNlbGVjdG9yKSA6IGNvbmNhdE1hcF8xLmNvbmNhdE1hcChmdW5jdGlvbiAoKSB7IHJldHVybiBpbm5lck9ic2VydmFibGU7IH0pO1xufVxuZXhwb3J0cy5jb25jYXRNYXBUbyA9IGNvbmNhdE1hcFRvO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9Y29uY2F0TWFwVG8uanMubWFwIiwiXCJ1c2Ugc3RyaWN0XCI7XG52YXIgX19yZWFkID0gKHRoaXMgJiYgdGhpcy5fX3JlYWQpIHx8IGZ1bmN0aW9uIChvLCBuKSB7XG4gICAgdmFyIG0gPSB0eXBlb2YgU3ltYm9sID09PSBcImZ1bmN0aW9uXCIgJiYgb1tTeW1ib2wuaXRlcmF0b3JdO1xuICAgIGlmICghbSkgcmV0dXJuIG87XG4gICAgdmFyIGkgPSBtLmNhbGwobyksIHIsIGFyID0gW10sIGU7XG4gICAgdHJ5IHtcbiAgICAgICAgd2hpbGUgKChuID09PSB2b2lkIDAgfHwgbi0tID4gMCkgJiYgIShyID0gaS5uZXh0KCkpLmRvbmUpIGFyLnB1c2goci52YWx1ZSk7XG4gICAgfVxuICAgIGNhdGNoIChlcnJvcikgeyBlID0geyBlcnJvcjogZXJyb3IgfTsgfVxuICAgIGZpbmFsbHkge1xuICAgICAgICB0cnkge1xuICAgICAgICAgICAgaWYgKHIgJiYgIXIuZG9uZSAmJiAobSA9IGlbXCJyZXR1cm5cIl0pKSBtLmNhbGwoaSk7XG4gICAgICAgIH1cbiAgICAgICAgZmluYWxseSB7IGlmIChlKSB0aHJvdyBlLmVycm9yOyB9XG4gICAgfVxuICAgIHJldHVybiBhcjtcbn07XG52YXIgX19zcHJlYWRBcnJheSA9ICh0aGlzICYmIHRoaXMuX19zcHJlYWRBcnJheSkgfHwgZnVuY3Rpb24gKHRvLCBmcm9tKSB7XG4gICAgZm9yICh2YXIgaSA9IDAsIGlsID0gZnJvbS5sZW5ndGgsIGogPSB0by5sZW5ndGg7IGkgPCBpbDsgaSsrLCBqKyspXG4gICAgICAgIHRvW2pdID0gZnJvbVtpXTtcbiAgICByZXR1cm4gdG87XG59O1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuZXhwb3J0cy5jb25jYXRXaXRoID0gdm9pZCAwO1xudmFyIGNvbmNhdF8xID0gcmVxdWlyZShcIi4vY29uY2F0XCIpO1xuZnVuY3Rpb24gY29uY2F0V2l0aCgpIHtcbiAgICB2YXIgb3RoZXJTb3VyY2VzID0gW107XG4gICAgZm9yICh2YXIgX2kgPSAwOyBfaSA8IGFyZ3VtZW50cy5sZW5ndGg7IF9pKyspIHtcbiAgICAgICAgb3RoZXJTb3VyY2VzW19pXSA9IGFyZ3VtZW50c1tfaV07XG4gICAgfVxuICAgIHJldHVybiBjb25jYXRfMS5jb25jYXQuYXBwbHkodm9pZCAwLCBfX3NwcmVhZEFycmF5KFtdLCBfX3JlYWQob3RoZXJTb3VyY2VzKSkpO1xufVxuZXhwb3J0cy5jb25jYXRXaXRoID0gY29uY2F0V2l0aDtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWNvbmNhdFdpdGguanMubWFwIiwiXCJ1c2Ugc3RyaWN0XCI7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5leHBvcnRzLmNvbm5lY3QgPSB2b2lkIDA7XG52YXIgU3ViamVjdF8xID0gcmVxdWlyZShcIi4uL1N1YmplY3RcIik7XG52YXIgaW5uZXJGcm9tXzEgPSByZXF1aXJlKFwiLi4vb2JzZXJ2YWJsZS9pbm5lckZyb21cIik7XG52YXIgbGlmdF8xID0gcmVxdWlyZShcIi4uL3V0aWwvbGlmdFwiKTtcbnZhciBmcm9tU3Vic2NyaWJhYmxlXzEgPSByZXF1aXJlKFwiLi4vb2JzZXJ2YWJsZS9mcm9tU3Vic2NyaWJhYmxlXCIpO1xudmFyIERFRkFVTFRfQ09ORklHID0ge1xuICAgIGNvbm5lY3RvcjogZnVuY3Rpb24gKCkgeyByZXR1cm4gbmV3IFN1YmplY3RfMS5TdWJqZWN0KCk7IH0sXG59O1xuZnVuY3Rpb24gY29ubmVjdChzZWxlY3RvciwgY29uZmlnKSB7XG4gICAgaWYgKGNvbmZpZyA9PT0gdm9pZCAwKSB7IGNvbmZpZyA9IERFRkFVTFRfQ09ORklHOyB9XG4gICAgdmFyIGNvbm5lY3RvciA9IGNvbmZpZy5jb25uZWN0b3I7XG4gICAgcmV0dXJuIGxpZnRfMS5vcGVyYXRlKGZ1bmN0aW9uIChzb3VyY2UsIHN1YnNjcmliZXIpIHtcbiAgICAgICAgdmFyIHN1YmplY3QgPSBjb25uZWN0b3IoKTtcbiAgICAgICAgaW5uZXJGcm9tXzEuaW5uZXJGcm9tKHNlbGVjdG9yKGZyb21TdWJzY3JpYmFibGVfMS5mcm9tU3Vic2NyaWJhYmxlKHN1YmplY3QpKSkuc3Vic2NyaWJlKHN1YnNjcmliZXIpO1xuICAgICAgICBzdWJzY3JpYmVyLmFkZChzb3VyY2Uuc3Vic2NyaWJlKHN1YmplY3QpKTtcbiAgICB9KTtcbn1cbmV4cG9ydHMuY29ubmVjdCA9IGNvbm5lY3Q7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1jb25uZWN0LmpzLm1hcCIsIlwidXNlIHN0cmljdFwiO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuZXhwb3J0cy5jb3VudCA9IHZvaWQgMDtcbnZhciByZWR1Y2VfMSA9IHJlcXVpcmUoXCIuL3JlZHVjZVwiKTtcbmZ1bmN0aW9uIGNvdW50KHByZWRpY2F0ZSkge1xuICAgIHJldHVybiByZWR1Y2VfMS5yZWR1Y2UoZnVuY3Rpb24gKHRvdGFsLCB2YWx1ZSwgaSkgeyByZXR1cm4gKCFwcmVkaWNhdGUgfHwgcHJlZGljYXRlKHZhbHVlLCBpKSA/IHRvdGFsICsgMSA6IHRvdGFsKTsgfSwgMCk7XG59XG5leHBvcnRzLmNvdW50ID0gY291bnQ7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1jb3VudC5qcy5tYXAiLCJcInVzZSBzdHJpY3RcIjtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmV4cG9ydHMuZGVib3VuY2UgPSB2b2lkIDA7XG52YXIgbGlmdF8xID0gcmVxdWlyZShcIi4uL3V0aWwvbGlmdFwiKTtcbnZhciBub29wXzEgPSByZXF1aXJlKFwiLi4vdXRpbC9ub29wXCIpO1xudmFyIE9wZXJhdG9yU3Vic2NyaWJlcl8xID0gcmVxdWlyZShcIi4vT3BlcmF0b3JTdWJzY3JpYmVyXCIpO1xudmFyIGlubmVyRnJvbV8xID0gcmVxdWlyZShcIi4uL29ic2VydmFibGUvaW5uZXJGcm9tXCIpO1xuZnVuY3Rpb24gZGVib3VuY2UoZHVyYXRpb25TZWxlY3Rvcikge1xuICAgIHJldHVybiBsaWZ0XzEub3BlcmF0ZShmdW5jdGlvbiAoc291cmNlLCBzdWJzY3JpYmVyKSB7XG4gICAgICAgIHZhciBoYXNWYWx1ZSA9IGZhbHNlO1xuICAgICAgICB2YXIgbGFzdFZhbHVlID0gbnVsbDtcbiAgICAgICAgdmFyIGR1cmF0aW9uU3Vic2NyaWJlciA9IG51bGw7XG4gICAgICAgIHZhciBlbWl0ID0gZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgZHVyYXRpb25TdWJzY3JpYmVyID09PSBudWxsIHx8IGR1cmF0aW9uU3Vic2NyaWJlciA9PT0gdm9pZCAwID8gdm9pZCAwIDogZHVyYXRpb25TdWJzY3JpYmVyLnVuc3Vic2NyaWJlKCk7XG4gICAgICAgICAgICBkdXJhdGlvblN1YnNjcmliZXIgPSBudWxsO1xuICAgICAgICAgICAgaWYgKGhhc1ZhbHVlKSB7XG4gICAgICAgICAgICAgICAgaGFzVmFsdWUgPSBmYWxzZTtcbiAgICAgICAgICAgICAgICB2YXIgdmFsdWUgPSBsYXN0VmFsdWU7XG4gICAgICAgICAgICAgICAgbGFzdFZhbHVlID0gbnVsbDtcbiAgICAgICAgICAgICAgICBzdWJzY3JpYmVyLm5leHQodmFsdWUpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9O1xuICAgICAgICBzb3VyY2Uuc3Vic2NyaWJlKE9wZXJhdG9yU3Vic2NyaWJlcl8xLmNyZWF0ZU9wZXJhdG9yU3Vic2NyaWJlcihzdWJzY3JpYmVyLCBmdW5jdGlvbiAodmFsdWUpIHtcbiAgICAgICAgICAgIGR1cmF0aW9uU3Vic2NyaWJlciA9PT0gbnVsbCB8fCBkdXJhdGlvblN1YnNjcmliZXIgPT09IHZvaWQgMCA/IHZvaWQgMCA6IGR1cmF0aW9uU3Vic2NyaWJlci51bnN1YnNjcmliZSgpO1xuICAgICAgICAgICAgaGFzVmFsdWUgPSB0cnVlO1xuICAgICAgICAgICAgbGFzdFZhbHVlID0gdmFsdWU7XG4gICAgICAgICAgICBkdXJhdGlvblN1YnNjcmliZXIgPSBPcGVyYXRvclN1YnNjcmliZXJfMS5jcmVhdGVPcGVyYXRvclN1YnNjcmliZXIoc3Vic2NyaWJlciwgZW1pdCwgbm9vcF8xLm5vb3ApO1xuICAgICAgICAgICAgaW5uZXJGcm9tXzEuaW5uZXJGcm9tKGR1cmF0aW9uU2VsZWN0b3IodmFsdWUpKS5zdWJzY3JpYmUoZHVyYXRpb25TdWJzY3JpYmVyKTtcbiAgICAgICAgfSwgZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgZW1pdCgpO1xuICAgICAgICAgICAgc3Vic2NyaWJlci5jb21wbGV0ZSgpO1xuICAgICAgICB9LCB1bmRlZmluZWQsIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIGxhc3RWYWx1ZSA9IGR1cmF0aW9uU3Vic2NyaWJlciA9IG51bGw7XG4gICAgICAgIH0pKTtcbiAgICB9KTtcbn1cbmV4cG9ydHMuZGVib3VuY2UgPSBkZWJvdW5jZTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWRlYm91bmNlLmpzLm1hcCIsIlwidXNlIHN0cmljdFwiO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuZXhwb3J0cy5kZWJvdW5jZVRpbWUgPSB2b2lkIDA7XG52YXIgYXN5bmNfMSA9IHJlcXVpcmUoXCIuLi9zY2hlZHVsZXIvYXN5bmNcIik7XG52YXIgbGlmdF8xID0gcmVxdWlyZShcIi4uL3V0aWwvbGlmdFwiKTtcbnZhciBPcGVyYXRvclN1YnNjcmliZXJfMSA9IHJlcXVpcmUoXCIuL09wZXJhdG9yU3Vic2NyaWJlclwiKTtcbmZ1bmN0aW9uIGRlYm91bmNlVGltZShkdWVUaW1lLCBzY2hlZHVsZXIpIHtcbiAgICBpZiAoc2NoZWR1bGVyID09PSB2b2lkIDApIHsgc2NoZWR1bGVyID0gYXN5bmNfMS5hc3luY1NjaGVkdWxlcjsgfVxuICAgIHJldHVybiBsaWZ0XzEub3BlcmF0ZShmdW5jdGlvbiAoc291cmNlLCBzdWJzY3JpYmVyKSB7XG4gICAgICAgIHZhciBhY3RpdmVUYXNrID0gbnVsbDtcbiAgICAgICAgdmFyIGxhc3RWYWx1ZSA9IG51bGw7XG4gICAgICAgIHZhciBsYXN0VGltZSA9IG51bGw7XG4gICAgICAgIHZhciBlbWl0ID0gZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgaWYgKGFjdGl2ZVRhc2spIHtcbiAgICAgICAgICAgICAgICBhY3RpdmVUYXNrLnVuc3Vic2NyaWJlKCk7XG4gICAgICAgICAgICAgICAgYWN0aXZlVGFzayA9IG51bGw7XG4gICAgICAgICAgICAgICAgdmFyIHZhbHVlID0gbGFzdFZhbHVlO1xuICAgICAgICAgICAgICAgIGxhc3RWYWx1ZSA9IG51bGw7XG4gICAgICAgICAgICAgICAgc3Vic2NyaWJlci5uZXh0KHZhbHVlKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfTtcbiAgICAgICAgZnVuY3Rpb24gZW1pdFdoZW5JZGxlKCkge1xuICAgICAgICAgICAgdmFyIHRhcmdldFRpbWUgPSBsYXN0VGltZSArIGR1ZVRpbWU7XG4gICAgICAgICAgICB2YXIgbm93ID0gc2NoZWR1bGVyLm5vdygpO1xuICAgICAgICAgICAgaWYgKG5vdyA8IHRhcmdldFRpbWUpIHtcbiAgICAgICAgICAgICAgICBhY3RpdmVUYXNrID0gdGhpcy5zY2hlZHVsZSh1bmRlZmluZWQsIHRhcmdldFRpbWUgLSBub3cpO1xuICAgICAgICAgICAgICAgIHN1YnNjcmliZXIuYWRkKGFjdGl2ZVRhc2spO1xuICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVtaXQoKTtcbiAgICAgICAgfVxuICAgICAgICBzb3VyY2Uuc3Vic2NyaWJlKE9wZXJhdG9yU3Vic2NyaWJlcl8xLmNyZWF0ZU9wZXJhdG9yU3Vic2NyaWJlcihzdWJzY3JpYmVyLCBmdW5jdGlvbiAodmFsdWUpIHtcbiAgICAgICAgICAgIGxhc3RWYWx1ZSA9IHZhbHVlO1xuICAgICAgICAgICAgbGFzdFRpbWUgPSBzY2hlZHVsZXIubm93KCk7XG4gICAgICAgICAgICBpZiAoIWFjdGl2ZVRhc2spIHtcbiAgICAgICAgICAgICAgICBhY3RpdmVUYXNrID0gc2NoZWR1bGVyLnNjaGVkdWxlKGVtaXRXaGVuSWRsZSwgZHVlVGltZSk7XG4gICAgICAgICAgICAgICAgc3Vic2NyaWJlci5hZGQoYWN0aXZlVGFzayk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0sIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIGVtaXQoKTtcbiAgICAgICAgICAgIHN1YnNjcmliZXIuY29tcGxldGUoKTtcbiAgICAgICAgfSwgdW5kZWZpbmVkLCBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICBsYXN0VmFsdWUgPSBhY3RpdmVUYXNrID0gbnVsbDtcbiAgICAgICAgfSkpO1xuICAgIH0pO1xufVxuZXhwb3J0cy5kZWJvdW5jZVRpbWUgPSBkZWJvdW5jZVRpbWU7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1kZWJvdW5jZVRpbWUuanMubWFwIiwiXCJ1c2Ugc3RyaWN0XCI7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5leHBvcnRzLmRlZmF1bHRJZkVtcHR5ID0gdm9pZCAwO1xudmFyIGxpZnRfMSA9IHJlcXVpcmUoXCIuLi91dGlsL2xpZnRcIik7XG52YXIgT3BlcmF0b3JTdWJzY3JpYmVyXzEgPSByZXF1aXJlKFwiLi9PcGVyYXRvclN1YnNjcmliZXJcIik7XG5mdW5jdGlvbiBkZWZhdWx0SWZFbXB0eShkZWZhdWx0VmFsdWUpIHtcbiAgICByZXR1cm4gbGlmdF8xLm9wZXJhdGUoZnVuY3Rpb24gKHNvdXJjZSwgc3Vic2NyaWJlcikge1xuICAgICAgICB2YXIgaGFzVmFsdWUgPSBmYWxzZTtcbiAgICAgICAgc291cmNlLnN1YnNjcmliZShPcGVyYXRvclN1YnNjcmliZXJfMS5jcmVhdGVPcGVyYXRvclN1YnNjcmliZXIoc3Vic2NyaWJlciwgZnVuY3Rpb24gKHZhbHVlKSB7XG4gICAgICAgICAgICBoYXNWYWx1ZSA9IHRydWU7XG4gICAgICAgICAgICBzdWJzY3JpYmVyLm5leHQodmFsdWUpO1xuICAgICAgICB9LCBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICBpZiAoIWhhc1ZhbHVlKSB7XG4gICAgICAgICAgICAgICAgc3Vic2NyaWJlci5uZXh0KGRlZmF1bHRWYWx1ZSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBzdWJzY3JpYmVyLmNvbXBsZXRlKCk7XG4gICAgICAgIH0pKTtcbiAgICB9KTtcbn1cbmV4cG9ydHMuZGVmYXVsdElmRW1wdHkgPSBkZWZhdWx0SWZFbXB0eTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWRlZmF1bHRJZkVtcHR5LmpzLm1hcCIsIlwidXNlIHN0cmljdFwiO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuZXhwb3J0cy5kZWxheSA9IHZvaWQgMDtcbnZhciBhc3luY18xID0gcmVxdWlyZShcIi4uL3NjaGVkdWxlci9hc3luY1wiKTtcbnZhciBkZWxheVdoZW5fMSA9IHJlcXVpcmUoXCIuL2RlbGF5V2hlblwiKTtcbnZhciB0aW1lcl8xID0gcmVxdWlyZShcIi4uL29ic2VydmFibGUvdGltZXJcIik7XG5mdW5jdGlvbiBkZWxheShkdWUsIHNjaGVkdWxlcikge1xuICAgIGlmIChzY2hlZHVsZXIgPT09IHZvaWQgMCkgeyBzY2hlZHVsZXIgPSBhc3luY18xLmFzeW5jU2NoZWR1bGVyOyB9XG4gICAgdmFyIGR1cmF0aW9uID0gdGltZXJfMS50aW1lcihkdWUsIHNjaGVkdWxlcik7XG4gICAgcmV0dXJuIGRlbGF5V2hlbl8xLmRlbGF5V2hlbihmdW5jdGlvbiAoKSB7IHJldHVybiBkdXJhdGlvbjsgfSk7XG59XG5leHBvcnRzLmRlbGF5ID0gZGVsYXk7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1kZWxheS5qcy5tYXAiLCJcInVzZSBzdHJpY3RcIjtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmV4cG9ydHMuZGVsYXlXaGVuID0gdm9pZCAwO1xudmFyIGNvbmNhdF8xID0gcmVxdWlyZShcIi4uL29ic2VydmFibGUvY29uY2F0XCIpO1xudmFyIHRha2VfMSA9IHJlcXVpcmUoXCIuL3Rha2VcIik7XG52YXIgaWdub3JlRWxlbWVudHNfMSA9IHJlcXVpcmUoXCIuL2lnbm9yZUVsZW1lbnRzXCIpO1xudmFyIG1hcFRvXzEgPSByZXF1aXJlKFwiLi9tYXBUb1wiKTtcbnZhciBtZXJnZU1hcF8xID0gcmVxdWlyZShcIi4vbWVyZ2VNYXBcIik7XG52YXIgaW5uZXJGcm9tXzEgPSByZXF1aXJlKFwiLi4vb2JzZXJ2YWJsZS9pbm5lckZyb21cIik7XG5mdW5jdGlvbiBkZWxheVdoZW4oZGVsYXlEdXJhdGlvblNlbGVjdG9yLCBzdWJzY3JpcHRpb25EZWxheSkge1xuICAgIGlmIChzdWJzY3JpcHRpb25EZWxheSkge1xuICAgICAgICByZXR1cm4gZnVuY3Rpb24gKHNvdXJjZSkge1xuICAgICAgICAgICAgcmV0dXJuIGNvbmNhdF8xLmNvbmNhdChzdWJzY3JpcHRpb25EZWxheS5waXBlKHRha2VfMS50YWtlKDEpLCBpZ25vcmVFbGVtZW50c18xLmlnbm9yZUVsZW1lbnRzKCkpLCBzb3VyY2UucGlwZShkZWxheVdoZW4oZGVsYXlEdXJhdGlvblNlbGVjdG9yKSkpO1xuICAgICAgICB9O1xuICAgIH1cbiAgICByZXR1cm4gbWVyZ2VNYXBfMS5tZXJnZU1hcChmdW5jdGlvbiAodmFsdWUsIGluZGV4KSB7IHJldHVybiBpbm5lckZyb21fMS5pbm5lckZyb20oZGVsYXlEdXJhdGlvblNlbGVjdG9yKHZhbHVlLCBpbmRleCkpLnBpcGUodGFrZV8xLnRha2UoMSksIG1hcFRvXzEubWFwVG8odmFsdWUpKTsgfSk7XG59XG5leHBvcnRzLmRlbGF5V2hlbiA9IGRlbGF5V2hlbjtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWRlbGF5V2hlbi5qcy5tYXAiLCJcInVzZSBzdHJpY3RcIjtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmV4cG9ydHMuZGVtYXRlcmlhbGl6ZSA9IHZvaWQgMDtcbnZhciBOb3RpZmljYXRpb25fMSA9IHJlcXVpcmUoXCIuLi9Ob3RpZmljYXRpb25cIik7XG52YXIgbGlmdF8xID0gcmVxdWlyZShcIi4uL3V0aWwvbGlmdFwiKTtcbnZhciBPcGVyYXRvclN1YnNjcmliZXJfMSA9IHJlcXVpcmUoXCIuL09wZXJhdG9yU3Vic2NyaWJlclwiKTtcbmZ1bmN0aW9uIGRlbWF0ZXJpYWxpemUoKSB7XG4gICAgcmV0dXJuIGxpZnRfMS5vcGVyYXRlKGZ1bmN0aW9uIChzb3VyY2UsIHN1YnNjcmliZXIpIHtcbiAgICAgICAgc291cmNlLnN1YnNjcmliZShPcGVyYXRvclN1YnNjcmliZXJfMS5jcmVhdGVPcGVyYXRvclN1YnNjcmliZXIoc3Vic2NyaWJlciwgZnVuY3Rpb24gKG5vdGlmaWNhdGlvbikgeyByZXR1cm4gTm90aWZpY2F0aW9uXzEub2JzZXJ2ZU5vdGlmaWNhdGlvbihub3RpZmljYXRpb24sIHN1YnNjcmliZXIpOyB9KSk7XG4gICAgfSk7XG59XG5leHBvcnRzLmRlbWF0ZXJpYWxpemUgPSBkZW1hdGVyaWFsaXplO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9ZGVtYXRlcmlhbGl6ZS5qcy5tYXAiLCJcInVzZSBzdHJpY3RcIjtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmV4cG9ydHMuZGlzdGluY3QgPSB2b2lkIDA7XG52YXIgbGlmdF8xID0gcmVxdWlyZShcIi4uL3V0aWwvbGlmdFwiKTtcbnZhciBPcGVyYXRvclN1YnNjcmliZXJfMSA9IHJlcXVpcmUoXCIuL09wZXJhdG9yU3Vic2NyaWJlclwiKTtcbnZhciBub29wXzEgPSByZXF1aXJlKFwiLi4vdXRpbC9ub29wXCIpO1xudmFyIGlubmVyRnJvbV8xID0gcmVxdWlyZShcIi4uL29ic2VydmFibGUvaW5uZXJGcm9tXCIpO1xuZnVuY3Rpb24gZGlzdGluY3Qoa2V5U2VsZWN0b3IsIGZsdXNoZXMpIHtcbiAgICByZXR1cm4gbGlmdF8xLm9wZXJhdGUoZnVuY3Rpb24gKHNvdXJjZSwgc3Vic2NyaWJlcikge1xuICAgICAgICB2YXIgZGlzdGluY3RLZXlzID0gbmV3IFNldCgpO1xuICAgICAgICBzb3VyY2Uuc3Vic2NyaWJlKE9wZXJhdG9yU3Vic2NyaWJlcl8xLmNyZWF0ZU9wZXJhdG9yU3Vic2NyaWJlcihzdWJzY3JpYmVyLCBmdW5jdGlvbiAodmFsdWUpIHtcbiAgICAgICAgICAgIHZhciBrZXkgPSBrZXlTZWxlY3RvciA/IGtleVNlbGVjdG9yKHZhbHVlKSA6IHZhbHVlO1xuICAgICAgICAgICAgaWYgKCFkaXN0aW5jdEtleXMuaGFzKGtleSkpIHtcbiAgICAgICAgICAgICAgICBkaXN0aW5jdEtleXMuYWRkKGtleSk7XG4gICAgICAgICAgICAgICAgc3Vic2NyaWJlci5uZXh0KHZhbHVlKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSkpO1xuICAgICAgICBmbHVzaGVzICYmIGlubmVyRnJvbV8xLmlubmVyRnJvbShmbHVzaGVzKS5zdWJzY3JpYmUoT3BlcmF0b3JTdWJzY3JpYmVyXzEuY3JlYXRlT3BlcmF0b3JTdWJzY3JpYmVyKHN1YnNjcmliZXIsIGZ1bmN0aW9uICgpIHsgcmV0dXJuIGRpc3RpbmN0S2V5cy5jbGVhcigpOyB9LCBub29wXzEubm9vcCkpO1xuICAgIH0pO1xufVxuZXhwb3J0cy5kaXN0aW5jdCA9IGRpc3RpbmN0O1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9ZGlzdGluY3QuanMubWFwIiwiXCJ1c2Ugc3RyaWN0XCI7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5leHBvcnRzLmRpc3RpbmN0VW50aWxDaGFuZ2VkID0gdm9pZCAwO1xudmFyIGlkZW50aXR5XzEgPSByZXF1aXJlKFwiLi4vdXRpbC9pZGVudGl0eVwiKTtcbnZhciBsaWZ0XzEgPSByZXF1aXJlKFwiLi4vdXRpbC9saWZ0XCIpO1xudmFyIE9wZXJhdG9yU3Vic2NyaWJlcl8xID0gcmVxdWlyZShcIi4vT3BlcmF0b3JTdWJzY3JpYmVyXCIpO1xuZnVuY3Rpb24gZGlzdGluY3RVbnRpbENoYW5nZWQoY29tcGFyYXRvciwga2V5U2VsZWN0b3IpIHtcbiAgICBpZiAoa2V5U2VsZWN0b3IgPT09IHZvaWQgMCkgeyBrZXlTZWxlY3RvciA9IGlkZW50aXR5XzEuaWRlbnRpdHk7IH1cbiAgICBjb21wYXJhdG9yID0gY29tcGFyYXRvciAhPT0gbnVsbCAmJiBjb21wYXJhdG9yICE9PSB2b2lkIDAgPyBjb21wYXJhdG9yIDogZGVmYXVsdENvbXBhcmU7XG4gICAgcmV0dXJuIGxpZnRfMS5vcGVyYXRlKGZ1bmN0aW9uIChzb3VyY2UsIHN1YnNjcmliZXIpIHtcbiAgICAgICAgdmFyIHByZXZpb3VzS2V5O1xuICAgICAgICB2YXIgZmlyc3QgPSB0cnVlO1xuICAgICAgICBzb3VyY2Uuc3Vic2NyaWJlKE9wZXJhdG9yU3Vic2NyaWJlcl8xLmNyZWF0ZU9wZXJhdG9yU3Vic2NyaWJlcihzdWJzY3JpYmVyLCBmdW5jdGlvbiAodmFsdWUpIHtcbiAgICAgICAgICAgIHZhciBjdXJyZW50S2V5ID0ga2V5U2VsZWN0b3IodmFsdWUpO1xuICAgICAgICAgICAgaWYgKGZpcnN0IHx8ICFjb21wYXJhdG9yKHByZXZpb3VzS2V5LCBjdXJyZW50S2V5KSkge1xuICAgICAgICAgICAgICAgIGZpcnN0ID0gZmFsc2U7XG4gICAgICAgICAgICAgICAgcHJldmlvdXNLZXkgPSBjdXJyZW50S2V5O1xuICAgICAgICAgICAgICAgIHN1YnNjcmliZXIubmV4dCh2YWx1ZSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0pKTtcbiAgICB9KTtcbn1cbmV4cG9ydHMuZGlzdGluY3RVbnRpbENoYW5nZWQgPSBkaXN0aW5jdFVudGlsQ2hhbmdlZDtcbmZ1bmN0aW9uIGRlZmF1bHRDb21wYXJlKGEsIGIpIHtcbiAgICByZXR1cm4gYSA9PT0gYjtcbn1cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWRpc3RpbmN0VW50aWxDaGFuZ2VkLmpzLm1hcCIsIlwidXNlIHN0cmljdFwiO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuZXhwb3J0cy5kaXN0aW5jdFVudGlsS2V5Q2hhbmdlZCA9IHZvaWQgMDtcbnZhciBkaXN0aW5jdFVudGlsQ2hhbmdlZF8xID0gcmVxdWlyZShcIi4vZGlzdGluY3RVbnRpbENoYW5nZWRcIik7XG5mdW5jdGlvbiBkaXN0aW5jdFVudGlsS2V5Q2hhbmdlZChrZXksIGNvbXBhcmUpIHtcbiAgICByZXR1cm4gZGlzdGluY3RVbnRpbENoYW5nZWRfMS5kaXN0aW5jdFVudGlsQ2hhbmdlZChmdW5jdGlvbiAoeCwgeSkgeyByZXR1cm4gY29tcGFyZSA/IGNvbXBhcmUoeFtrZXldLCB5W2tleV0pIDogeFtrZXldID09PSB5W2tleV07IH0pO1xufVxuZXhwb3J0cy5kaXN0aW5jdFVudGlsS2V5Q2hhbmdlZCA9IGRpc3RpbmN0VW50aWxLZXlDaGFuZ2VkO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9ZGlzdGluY3RVbnRpbEtleUNoYW5nZWQuanMubWFwIiwiXCJ1c2Ugc3RyaWN0XCI7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5leHBvcnRzLmVsZW1lbnRBdCA9IHZvaWQgMDtcbnZhciBBcmd1bWVudE91dE9mUmFuZ2VFcnJvcl8xID0gcmVxdWlyZShcIi4uL3V0aWwvQXJndW1lbnRPdXRPZlJhbmdlRXJyb3JcIik7XG52YXIgZmlsdGVyXzEgPSByZXF1aXJlKFwiLi9maWx0ZXJcIik7XG52YXIgdGhyb3dJZkVtcHR5XzEgPSByZXF1aXJlKFwiLi90aHJvd0lmRW1wdHlcIik7XG52YXIgZGVmYXVsdElmRW1wdHlfMSA9IHJlcXVpcmUoXCIuL2RlZmF1bHRJZkVtcHR5XCIpO1xudmFyIHRha2VfMSA9IHJlcXVpcmUoXCIuL3Rha2VcIik7XG5mdW5jdGlvbiBlbGVtZW50QXQoaW5kZXgsIGRlZmF1bHRWYWx1ZSkge1xuICAgIGlmIChpbmRleCA8IDApIHtcbiAgICAgICAgdGhyb3cgbmV3IEFyZ3VtZW50T3V0T2ZSYW5nZUVycm9yXzEuQXJndW1lbnRPdXRPZlJhbmdlRXJyb3IoKTtcbiAgICB9XG4gICAgdmFyIGhhc0RlZmF1bHRWYWx1ZSA9IGFyZ3VtZW50cy5sZW5ndGggPj0gMjtcbiAgICByZXR1cm4gZnVuY3Rpb24gKHNvdXJjZSkge1xuICAgICAgICByZXR1cm4gc291cmNlLnBpcGUoZmlsdGVyXzEuZmlsdGVyKGZ1bmN0aW9uICh2LCBpKSB7IHJldHVybiBpID09PSBpbmRleDsgfSksIHRha2VfMS50YWtlKDEpLCBoYXNEZWZhdWx0VmFsdWUgPyBkZWZhdWx0SWZFbXB0eV8xLmRlZmF1bHRJZkVtcHR5KGRlZmF1bHRWYWx1ZSkgOiB0aHJvd0lmRW1wdHlfMS50aHJvd0lmRW1wdHkoZnVuY3Rpb24gKCkgeyByZXR1cm4gbmV3IEFyZ3VtZW50T3V0T2ZSYW5nZUVycm9yXzEuQXJndW1lbnRPdXRPZlJhbmdlRXJyb3IoKTsgfSkpO1xuICAgIH07XG59XG5leHBvcnRzLmVsZW1lbnRBdCA9IGVsZW1lbnRBdDtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWVsZW1lbnRBdC5qcy5tYXAiLCJcInVzZSBzdHJpY3RcIjtcbnZhciBfX3JlYWQgPSAodGhpcyAmJiB0aGlzLl9fcmVhZCkgfHwgZnVuY3Rpb24gKG8sIG4pIHtcbiAgICB2YXIgbSA9IHR5cGVvZiBTeW1ib2wgPT09IFwiZnVuY3Rpb25cIiAmJiBvW1N5bWJvbC5pdGVyYXRvcl07XG4gICAgaWYgKCFtKSByZXR1cm4gbztcbiAgICB2YXIgaSA9IG0uY2FsbChvKSwgciwgYXIgPSBbXSwgZTtcbiAgICB0cnkge1xuICAgICAgICB3aGlsZSAoKG4gPT09IHZvaWQgMCB8fCBuLS0gPiAwKSAmJiAhKHIgPSBpLm5leHQoKSkuZG9uZSkgYXIucHVzaChyLnZhbHVlKTtcbiAgICB9XG4gICAgY2F0Y2ggKGVycm9yKSB7IGUgPSB7IGVycm9yOiBlcnJvciB9OyB9XG4gICAgZmluYWxseSB7XG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgICBpZiAociAmJiAhci5kb25lICYmIChtID0gaVtcInJldHVyblwiXSkpIG0uY2FsbChpKTtcbiAgICAgICAgfVxuICAgICAgICBmaW5hbGx5IHsgaWYgKGUpIHRocm93IGUuZXJyb3I7IH1cbiAgICB9XG4gICAgcmV0dXJuIGFyO1xufTtcbnZhciBfX3NwcmVhZEFycmF5ID0gKHRoaXMgJiYgdGhpcy5fX3NwcmVhZEFycmF5KSB8fCBmdW5jdGlvbiAodG8sIGZyb20pIHtcbiAgICBmb3IgKHZhciBpID0gMCwgaWwgPSBmcm9tLmxlbmd0aCwgaiA9IHRvLmxlbmd0aDsgaSA8IGlsOyBpKyssIGorKylcbiAgICAgICAgdG9bal0gPSBmcm9tW2ldO1xuICAgIHJldHVybiB0bztcbn07XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5leHBvcnRzLmVuZFdpdGggPSB2b2lkIDA7XG52YXIgY29uY2F0XzEgPSByZXF1aXJlKFwiLi4vb2JzZXJ2YWJsZS9jb25jYXRcIik7XG52YXIgb2ZfMSA9IHJlcXVpcmUoXCIuLi9vYnNlcnZhYmxlL29mXCIpO1xuZnVuY3Rpb24gZW5kV2l0aCgpIHtcbiAgICB2YXIgdmFsdWVzID0gW107XG4gICAgZm9yICh2YXIgX2kgPSAwOyBfaSA8IGFyZ3VtZW50cy5sZW5ndGg7IF9pKyspIHtcbiAgICAgICAgdmFsdWVzW19pXSA9IGFyZ3VtZW50c1tfaV07XG4gICAgfVxuICAgIHJldHVybiBmdW5jdGlvbiAoc291cmNlKSB7IHJldHVybiBjb25jYXRfMS5jb25jYXQoc291cmNlLCBvZl8xLm9mLmFwcGx5KHZvaWQgMCwgX19zcHJlYWRBcnJheShbXSwgX19yZWFkKHZhbHVlcykpKSk7IH07XG59XG5leHBvcnRzLmVuZFdpdGggPSBlbmRXaXRoO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9ZW5kV2l0aC5qcy5tYXAiLCJcInVzZSBzdHJpY3RcIjtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmV4cG9ydHMuZXZlcnkgPSB2b2lkIDA7XG52YXIgbGlmdF8xID0gcmVxdWlyZShcIi4uL3V0aWwvbGlmdFwiKTtcbnZhciBPcGVyYXRvclN1YnNjcmliZXJfMSA9IHJlcXVpcmUoXCIuL09wZXJhdG9yU3Vic2NyaWJlclwiKTtcbmZ1bmN0aW9uIGV2ZXJ5KHByZWRpY2F0ZSwgdGhpc0FyZykge1xuICAgIHJldHVybiBsaWZ0XzEub3BlcmF0ZShmdW5jdGlvbiAoc291cmNlLCBzdWJzY3JpYmVyKSB7XG4gICAgICAgIHZhciBpbmRleCA9IDA7XG4gICAgICAgIHNvdXJjZS5zdWJzY3JpYmUoT3BlcmF0b3JTdWJzY3JpYmVyXzEuY3JlYXRlT3BlcmF0b3JTdWJzY3JpYmVyKHN1YnNjcmliZXIsIGZ1bmN0aW9uICh2YWx1ZSkge1xuICAgICAgICAgICAgaWYgKCFwcmVkaWNhdGUuY2FsbCh0aGlzQXJnLCB2YWx1ZSwgaW5kZXgrKywgc291cmNlKSkge1xuICAgICAgICAgICAgICAgIHN1YnNjcmliZXIubmV4dChmYWxzZSk7XG4gICAgICAgICAgICAgICAgc3Vic2NyaWJlci5jb21wbGV0ZSgpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9LCBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICBzdWJzY3JpYmVyLm5leHQodHJ1ZSk7XG4gICAgICAgICAgICBzdWJzY3JpYmVyLmNvbXBsZXRlKCk7XG4gICAgICAgIH0pKTtcbiAgICB9KTtcbn1cbmV4cG9ydHMuZXZlcnkgPSBldmVyeTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWV2ZXJ5LmpzLm1hcCIsIlwidXNlIHN0cmljdFwiO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuZXhwb3J0cy5leGhhdXN0ID0gdm9pZCAwO1xudmFyIGV4aGF1c3RBbGxfMSA9IHJlcXVpcmUoXCIuL2V4aGF1c3RBbGxcIik7XG5leHBvcnRzLmV4aGF1c3QgPSBleGhhdXN0QWxsXzEuZXhoYXVzdEFsbDtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWV4aGF1c3QuanMubWFwIiwiXCJ1c2Ugc3RyaWN0XCI7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5leHBvcnRzLmV4aGF1c3RBbGwgPSB2b2lkIDA7XG52YXIgZXhoYXVzdE1hcF8xID0gcmVxdWlyZShcIi4vZXhoYXVzdE1hcFwiKTtcbnZhciBpZGVudGl0eV8xID0gcmVxdWlyZShcIi4uL3V0aWwvaWRlbnRpdHlcIik7XG5mdW5jdGlvbiBleGhhdXN0QWxsKCkge1xuICAgIHJldHVybiBleGhhdXN0TWFwXzEuZXhoYXVzdE1hcChpZGVudGl0eV8xLmlkZW50aXR5KTtcbn1cbmV4cG9ydHMuZXhoYXVzdEFsbCA9IGV4aGF1c3RBbGw7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1leGhhdXN0QWxsLmpzLm1hcCIsIlwidXNlIHN0cmljdFwiO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuZXhwb3J0cy5leGhhdXN0TWFwID0gdm9pZCAwO1xudmFyIG1hcF8xID0gcmVxdWlyZShcIi4vbWFwXCIpO1xudmFyIGlubmVyRnJvbV8xID0gcmVxdWlyZShcIi4uL29ic2VydmFibGUvaW5uZXJGcm9tXCIpO1xudmFyIGxpZnRfMSA9IHJlcXVpcmUoXCIuLi91dGlsL2xpZnRcIik7XG52YXIgT3BlcmF0b3JTdWJzY3JpYmVyXzEgPSByZXF1aXJlKFwiLi9PcGVyYXRvclN1YnNjcmliZXJcIik7XG5mdW5jdGlvbiBleGhhdXN0TWFwKHByb2plY3QsIHJlc3VsdFNlbGVjdG9yKSB7XG4gICAgaWYgKHJlc3VsdFNlbGVjdG9yKSB7XG4gICAgICAgIHJldHVybiBmdW5jdGlvbiAoc291cmNlKSB7XG4gICAgICAgICAgICByZXR1cm4gc291cmNlLnBpcGUoZXhoYXVzdE1hcChmdW5jdGlvbiAoYSwgaSkgeyByZXR1cm4gaW5uZXJGcm9tXzEuaW5uZXJGcm9tKHByb2plY3QoYSwgaSkpLnBpcGUobWFwXzEubWFwKGZ1bmN0aW9uIChiLCBpaSkgeyByZXR1cm4gcmVzdWx0U2VsZWN0b3IoYSwgYiwgaSwgaWkpOyB9KSk7IH0pKTtcbiAgICAgICAgfTtcbiAgICB9XG4gICAgcmV0dXJuIGxpZnRfMS5vcGVyYXRlKGZ1bmN0aW9uIChzb3VyY2UsIHN1YnNjcmliZXIpIHtcbiAgICAgICAgdmFyIGluZGV4ID0gMDtcbiAgICAgICAgdmFyIGlubmVyU3ViID0gbnVsbDtcbiAgICAgICAgdmFyIGlzQ29tcGxldGUgPSBmYWxzZTtcbiAgICAgICAgc291cmNlLnN1YnNjcmliZShPcGVyYXRvclN1YnNjcmliZXJfMS5jcmVhdGVPcGVyYXRvclN1YnNjcmliZXIoc3Vic2NyaWJlciwgZnVuY3Rpb24gKG91dGVyVmFsdWUpIHtcbiAgICAgICAgICAgIGlmICghaW5uZXJTdWIpIHtcbiAgICAgICAgICAgICAgICBpbm5lclN1YiA9IE9wZXJhdG9yU3Vic2NyaWJlcl8xLmNyZWF0ZU9wZXJhdG9yU3Vic2NyaWJlcihzdWJzY3JpYmVyLCB1bmRlZmluZWQsIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICAgICAgaW5uZXJTdWIgPSBudWxsO1xuICAgICAgICAgICAgICAgICAgICBpc0NvbXBsZXRlICYmIHN1YnNjcmliZXIuY29tcGxldGUoKTtcbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICBpbm5lckZyb21fMS5pbm5lckZyb20ocHJvamVjdChvdXRlclZhbHVlLCBpbmRleCsrKSkuc3Vic2NyaWJlKGlubmVyU3ViKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSwgZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgaXNDb21wbGV0ZSA9IHRydWU7XG4gICAgICAgICAgICAhaW5uZXJTdWIgJiYgc3Vic2NyaWJlci5jb21wbGV0ZSgpO1xuICAgICAgICB9KSk7XG4gICAgfSk7XG59XG5leHBvcnRzLmV4aGF1c3RNYXAgPSBleGhhdXN0TWFwO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9ZXhoYXVzdE1hcC5qcy5tYXAiLCJcInVzZSBzdHJpY3RcIjtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmV4cG9ydHMuZXhwYW5kID0gdm9pZCAwO1xudmFyIGxpZnRfMSA9IHJlcXVpcmUoXCIuLi91dGlsL2xpZnRcIik7XG52YXIgbWVyZ2VJbnRlcm5hbHNfMSA9IHJlcXVpcmUoXCIuL21lcmdlSW50ZXJuYWxzXCIpO1xuZnVuY3Rpb24gZXhwYW5kKHByb2plY3QsIGNvbmN1cnJlbnQsIHNjaGVkdWxlcikge1xuICAgIGlmIChjb25jdXJyZW50ID09PSB2b2lkIDApIHsgY29uY3VycmVudCA9IEluZmluaXR5OyB9XG4gICAgY29uY3VycmVudCA9IChjb25jdXJyZW50IHx8IDApIDwgMSA/IEluZmluaXR5IDogY29uY3VycmVudDtcbiAgICByZXR1cm4gbGlmdF8xLm9wZXJhdGUoZnVuY3Rpb24gKHNvdXJjZSwgc3Vic2NyaWJlcikge1xuICAgICAgICByZXR1cm4gbWVyZ2VJbnRlcm5hbHNfMS5tZXJnZUludGVybmFscyhzb3VyY2UsIHN1YnNjcmliZXIsIHByb2plY3QsIGNvbmN1cnJlbnQsIHVuZGVmaW5lZCwgdHJ1ZSwgc2NoZWR1bGVyKTtcbiAgICB9KTtcbn1cbmV4cG9ydHMuZXhwYW5kID0gZXhwYW5kO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9ZXhwYW5kLmpzLm1hcCIsIlwidXNlIHN0cmljdFwiO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuZXhwb3J0cy5maWx0ZXIgPSB2b2lkIDA7XG52YXIgbGlmdF8xID0gcmVxdWlyZShcIi4uL3V0aWwvbGlmdFwiKTtcbnZhciBPcGVyYXRvclN1YnNjcmliZXJfMSA9IHJlcXVpcmUoXCIuL09wZXJhdG9yU3Vic2NyaWJlclwiKTtcbmZ1bmN0aW9uIGZpbHRlcihwcmVkaWNhdGUsIHRoaXNBcmcpIHtcbiAgICByZXR1cm4gbGlmdF8xLm9wZXJhdGUoZnVuY3Rpb24gKHNvdXJjZSwgc3Vic2NyaWJlcikge1xuICAgICAgICB2YXIgaW5kZXggPSAwO1xuICAgICAgICBzb3VyY2Uuc3Vic2NyaWJlKE9wZXJhdG9yU3Vic2NyaWJlcl8xLmNyZWF0ZU9wZXJhdG9yU3Vic2NyaWJlcihzdWJzY3JpYmVyLCBmdW5jdGlvbiAodmFsdWUpIHsgcmV0dXJuIHByZWRpY2F0ZS5jYWxsKHRoaXNBcmcsIHZhbHVlLCBpbmRleCsrKSAmJiBzdWJzY3JpYmVyLm5leHQodmFsdWUpOyB9KSk7XG4gICAgfSk7XG59XG5leHBvcnRzLmZpbHRlciA9IGZpbHRlcjtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWZpbHRlci5qcy5tYXAiLCJcInVzZSBzdHJpY3RcIjtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmV4cG9ydHMuZmluYWxpemUgPSB2b2lkIDA7XG52YXIgbGlmdF8xID0gcmVxdWlyZShcIi4uL3V0aWwvbGlmdFwiKTtcbmZ1bmN0aW9uIGZpbmFsaXplKGNhbGxiYWNrKSB7XG4gICAgcmV0dXJuIGxpZnRfMS5vcGVyYXRlKGZ1bmN0aW9uIChzb3VyY2UsIHN1YnNjcmliZXIpIHtcbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgIHNvdXJjZS5zdWJzY3JpYmUoc3Vic2NyaWJlcik7XG4gICAgICAgIH1cbiAgICAgICAgZmluYWxseSB7XG4gICAgICAgICAgICBzdWJzY3JpYmVyLmFkZChjYWxsYmFjayk7XG4gICAgICAgIH1cbiAgICB9KTtcbn1cbmV4cG9ydHMuZmluYWxpemUgPSBmaW5hbGl6ZTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWZpbmFsaXplLmpzLm1hcCIsIlwidXNlIHN0cmljdFwiO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuZXhwb3J0cy5jcmVhdGVGaW5kID0gZXhwb3J0cy5maW5kID0gdm9pZCAwO1xudmFyIGxpZnRfMSA9IHJlcXVpcmUoXCIuLi91dGlsL2xpZnRcIik7XG52YXIgT3BlcmF0b3JTdWJzY3JpYmVyXzEgPSByZXF1aXJlKFwiLi9PcGVyYXRvclN1YnNjcmliZXJcIik7XG5mdW5jdGlvbiBmaW5kKHByZWRpY2F0ZSwgdGhpc0FyZykge1xuICAgIHJldHVybiBsaWZ0XzEub3BlcmF0ZShjcmVhdGVGaW5kKHByZWRpY2F0ZSwgdGhpc0FyZywgJ3ZhbHVlJykpO1xufVxuZXhwb3J0cy5maW5kID0gZmluZDtcbmZ1bmN0aW9uIGNyZWF0ZUZpbmQocHJlZGljYXRlLCB0aGlzQXJnLCBlbWl0KSB7XG4gICAgdmFyIGZpbmRJbmRleCA9IGVtaXQgPT09ICdpbmRleCc7XG4gICAgcmV0dXJuIGZ1bmN0aW9uIChzb3VyY2UsIHN1YnNjcmliZXIpIHtcbiAgICAgICAgdmFyIGluZGV4ID0gMDtcbiAgICAgICAgc291cmNlLnN1YnNjcmliZShPcGVyYXRvclN1YnNjcmliZXJfMS5jcmVhdGVPcGVyYXRvclN1YnNjcmliZXIoc3Vic2NyaWJlciwgZnVuY3Rpb24gKHZhbHVlKSB7XG4gICAgICAgICAgICB2YXIgaSA9IGluZGV4Kys7XG4gICAgICAgICAgICBpZiAocHJlZGljYXRlLmNhbGwodGhpc0FyZywgdmFsdWUsIGksIHNvdXJjZSkpIHtcbiAgICAgICAgICAgICAgICBzdWJzY3JpYmVyLm5leHQoZmluZEluZGV4ID8gaSA6IHZhbHVlKTtcbiAgICAgICAgICAgICAgICBzdWJzY3JpYmVyLmNvbXBsZXRlKCk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0sIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIHN1YnNjcmliZXIubmV4dChmaW5kSW5kZXggPyAtMSA6IHVuZGVmaW5lZCk7XG4gICAgICAgICAgICBzdWJzY3JpYmVyLmNvbXBsZXRlKCk7XG4gICAgICAgIH0pKTtcbiAgICB9O1xufVxuZXhwb3J0cy5jcmVhdGVGaW5kID0gY3JlYXRlRmluZDtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWZpbmQuanMubWFwIiwiXCJ1c2Ugc3RyaWN0XCI7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5leHBvcnRzLmZpbmRJbmRleCA9IHZvaWQgMDtcbnZhciBsaWZ0XzEgPSByZXF1aXJlKFwiLi4vdXRpbC9saWZ0XCIpO1xudmFyIGZpbmRfMSA9IHJlcXVpcmUoXCIuL2ZpbmRcIik7XG5mdW5jdGlvbiBmaW5kSW5kZXgocHJlZGljYXRlLCB0aGlzQXJnKSB7XG4gICAgcmV0dXJuIGxpZnRfMS5vcGVyYXRlKGZpbmRfMS5jcmVhdGVGaW5kKHByZWRpY2F0ZSwgdGhpc0FyZywgJ2luZGV4JykpO1xufVxuZXhwb3J0cy5maW5kSW5kZXggPSBmaW5kSW5kZXg7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1maW5kSW5kZXguanMubWFwIiwiXCJ1c2Ugc3RyaWN0XCI7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5leHBvcnRzLmZpcnN0ID0gdm9pZCAwO1xudmFyIEVtcHR5RXJyb3JfMSA9IHJlcXVpcmUoXCIuLi91dGlsL0VtcHR5RXJyb3JcIik7XG52YXIgZmlsdGVyXzEgPSByZXF1aXJlKFwiLi9maWx0ZXJcIik7XG52YXIgdGFrZV8xID0gcmVxdWlyZShcIi4vdGFrZVwiKTtcbnZhciBkZWZhdWx0SWZFbXB0eV8xID0gcmVxdWlyZShcIi4vZGVmYXVsdElmRW1wdHlcIik7XG52YXIgdGhyb3dJZkVtcHR5XzEgPSByZXF1aXJlKFwiLi90aHJvd0lmRW1wdHlcIik7XG52YXIgaWRlbnRpdHlfMSA9IHJlcXVpcmUoXCIuLi91dGlsL2lkZW50aXR5XCIpO1xuZnVuY3Rpb24gZmlyc3QocHJlZGljYXRlLCBkZWZhdWx0VmFsdWUpIHtcbiAgICB2YXIgaGFzRGVmYXVsdFZhbHVlID0gYXJndW1lbnRzLmxlbmd0aCA+PSAyO1xuICAgIHJldHVybiBmdW5jdGlvbiAoc291cmNlKSB7XG4gICAgICAgIHJldHVybiBzb3VyY2UucGlwZShwcmVkaWNhdGUgPyBmaWx0ZXJfMS5maWx0ZXIoZnVuY3Rpb24gKHYsIGkpIHsgcmV0dXJuIHByZWRpY2F0ZSh2LCBpLCBzb3VyY2UpOyB9KSA6IGlkZW50aXR5XzEuaWRlbnRpdHksIHRha2VfMS50YWtlKDEpLCBoYXNEZWZhdWx0VmFsdWUgPyBkZWZhdWx0SWZFbXB0eV8xLmRlZmF1bHRJZkVtcHR5KGRlZmF1bHRWYWx1ZSkgOiB0aHJvd0lmRW1wdHlfMS50aHJvd0lmRW1wdHkoZnVuY3Rpb24gKCkgeyByZXR1cm4gbmV3IEVtcHR5RXJyb3JfMS5FbXB0eUVycm9yKCk7IH0pKTtcbiAgICB9O1xufVxuZXhwb3J0cy5maXJzdCA9IGZpcnN0O1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9Zmlyc3QuanMubWFwIiwiXCJ1c2Ugc3RyaWN0XCI7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5leHBvcnRzLmZsYXRNYXAgPSB2b2lkIDA7XG52YXIgbWVyZ2VNYXBfMSA9IHJlcXVpcmUoXCIuL21lcmdlTWFwXCIpO1xuZXhwb3J0cy5mbGF0TWFwID0gbWVyZ2VNYXBfMS5tZXJnZU1hcDtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWZsYXRNYXAuanMubWFwIiwiXCJ1c2Ugc3RyaWN0XCI7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5leHBvcnRzLmdyb3VwQnkgPSB2b2lkIDA7XG52YXIgT2JzZXJ2YWJsZV8xID0gcmVxdWlyZShcIi4uL09ic2VydmFibGVcIik7XG52YXIgaW5uZXJGcm9tXzEgPSByZXF1aXJlKFwiLi4vb2JzZXJ2YWJsZS9pbm5lckZyb21cIik7XG52YXIgU3ViamVjdF8xID0gcmVxdWlyZShcIi4uL1N1YmplY3RcIik7XG52YXIgbGlmdF8xID0gcmVxdWlyZShcIi4uL3V0aWwvbGlmdFwiKTtcbnZhciBPcGVyYXRvclN1YnNjcmliZXJfMSA9IHJlcXVpcmUoXCIuL09wZXJhdG9yU3Vic2NyaWJlclwiKTtcbmZ1bmN0aW9uIGdyb3VwQnkoa2V5U2VsZWN0b3IsIGVsZW1lbnRPck9wdGlvbnMsIGR1cmF0aW9uLCBjb25uZWN0b3IpIHtcbiAgICByZXR1cm4gbGlmdF8xLm9wZXJhdGUoZnVuY3Rpb24gKHNvdXJjZSwgc3Vic2NyaWJlcikge1xuICAgICAgICB2YXIgZWxlbWVudDtcbiAgICAgICAgaWYgKCFlbGVtZW50T3JPcHRpb25zIHx8IHR5cGVvZiBlbGVtZW50T3JPcHRpb25zID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICAgICAgICBlbGVtZW50ID0gZWxlbWVudE9yT3B0aW9ucztcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIChkdXJhdGlvbiA9IGVsZW1lbnRPck9wdGlvbnMuZHVyYXRpb24sIGVsZW1lbnQgPSBlbGVtZW50T3JPcHRpb25zLmVsZW1lbnQsIGNvbm5lY3RvciA9IGVsZW1lbnRPck9wdGlvbnMuY29ubmVjdG9yKTtcbiAgICAgICAgfVxuICAgICAgICB2YXIgZ3JvdXBzID0gbmV3IE1hcCgpO1xuICAgICAgICB2YXIgbm90aWZ5ID0gZnVuY3Rpb24gKGNiKSB7XG4gICAgICAgICAgICBncm91cHMuZm9yRWFjaChjYik7XG4gICAgICAgICAgICBjYihzdWJzY3JpYmVyKTtcbiAgICAgICAgfTtcbiAgICAgICAgdmFyIGhhbmRsZUVycm9yID0gZnVuY3Rpb24gKGVycikgeyByZXR1cm4gbm90aWZ5KGZ1bmN0aW9uIChjb25zdW1lcikgeyByZXR1cm4gY29uc3VtZXIuZXJyb3IoZXJyKTsgfSk7IH07XG4gICAgICAgIHZhciBhY3RpdmVHcm91cHMgPSAwO1xuICAgICAgICB2YXIgdGVhcmRvd25BdHRlbXB0ZWQgPSBmYWxzZTtcbiAgICAgICAgdmFyIGdyb3VwQnlTb3VyY2VTdWJzY3JpYmVyID0gbmV3IE9wZXJhdG9yU3Vic2NyaWJlcl8xLk9wZXJhdG9yU3Vic2NyaWJlcihzdWJzY3JpYmVyLCBmdW5jdGlvbiAodmFsdWUpIHtcbiAgICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICAgICAgdmFyIGtleV8xID0ga2V5U2VsZWN0b3IodmFsdWUpO1xuICAgICAgICAgICAgICAgIHZhciBncm91cF8xID0gZ3JvdXBzLmdldChrZXlfMSk7XG4gICAgICAgICAgICAgICAgaWYgKCFncm91cF8xKSB7XG4gICAgICAgICAgICAgICAgICAgIGdyb3Vwcy5zZXQoa2V5XzEsIChncm91cF8xID0gY29ubmVjdG9yID8gY29ubmVjdG9yKCkgOiBuZXcgU3ViamVjdF8xLlN1YmplY3QoKSkpO1xuICAgICAgICAgICAgICAgICAgICB2YXIgZ3JvdXBlZCA9IGNyZWF0ZUdyb3VwZWRPYnNlcnZhYmxlKGtleV8xLCBncm91cF8xKTtcbiAgICAgICAgICAgICAgICAgICAgc3Vic2NyaWJlci5uZXh0KGdyb3VwZWQpO1xuICAgICAgICAgICAgICAgICAgICBpZiAoZHVyYXRpb24pIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhciBkdXJhdGlvblN1YnNjcmliZXJfMSA9IE9wZXJhdG9yU3Vic2NyaWJlcl8xLmNyZWF0ZU9wZXJhdG9yU3Vic2NyaWJlcihncm91cF8xLCBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZ3JvdXBfMS5jb21wbGV0ZSgpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGR1cmF0aW9uU3Vic2NyaWJlcl8xID09PSBudWxsIHx8IGR1cmF0aW9uU3Vic2NyaWJlcl8xID09PSB2b2lkIDAgPyB2b2lkIDAgOiBkdXJhdGlvblN1YnNjcmliZXJfMS51bnN1YnNjcmliZSgpO1xuICAgICAgICAgICAgICAgICAgICAgICAgfSwgdW5kZWZpbmVkLCB1bmRlZmluZWQsIGZ1bmN0aW9uICgpIHsgcmV0dXJuIGdyb3Vwcy5kZWxldGUoa2V5XzEpOyB9KTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGdyb3VwQnlTb3VyY2VTdWJzY3JpYmVyLmFkZChpbm5lckZyb21fMS5pbm5lckZyb20oZHVyYXRpb24oZ3JvdXBlZCkpLnN1YnNjcmliZShkdXJhdGlvblN1YnNjcmliZXJfMSkpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGdyb3VwXzEubmV4dChlbGVtZW50ID8gZWxlbWVudCh2YWx1ZSkgOiB2YWx1ZSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBjYXRjaCAoZXJyKSB7XG4gICAgICAgICAgICAgICAgaGFuZGxlRXJyb3IoZXJyKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSwgZnVuY3Rpb24gKCkgeyByZXR1cm4gbm90aWZ5KGZ1bmN0aW9uIChjb25zdW1lcikgeyByZXR1cm4gY29uc3VtZXIuY29tcGxldGUoKTsgfSk7IH0sIGhhbmRsZUVycm9yLCBmdW5jdGlvbiAoKSB7IHJldHVybiBncm91cHMuY2xlYXIoKTsgfSwgZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgdGVhcmRvd25BdHRlbXB0ZWQgPSB0cnVlO1xuICAgICAgICAgICAgcmV0dXJuIGFjdGl2ZUdyb3VwcyA9PT0gMDtcbiAgICAgICAgfSk7XG4gICAgICAgIHNvdXJjZS5zdWJzY3JpYmUoZ3JvdXBCeVNvdXJjZVN1YnNjcmliZXIpO1xuICAgICAgICBmdW5jdGlvbiBjcmVhdGVHcm91cGVkT2JzZXJ2YWJsZShrZXksIGdyb3VwU3ViamVjdCkge1xuICAgICAgICAgICAgdmFyIHJlc3VsdCA9IG5ldyBPYnNlcnZhYmxlXzEuT2JzZXJ2YWJsZShmdW5jdGlvbiAoZ3JvdXBTdWJzY3JpYmVyKSB7XG4gICAgICAgICAgICAgICAgYWN0aXZlR3JvdXBzKys7XG4gICAgICAgICAgICAgICAgdmFyIGlubmVyU3ViID0gZ3JvdXBTdWJqZWN0LnN1YnNjcmliZShncm91cFN1YnNjcmliZXIpO1xuICAgICAgICAgICAgICAgIHJldHVybiBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgICAgIGlubmVyU3ViLnVuc3Vic2NyaWJlKCk7XG4gICAgICAgICAgICAgICAgICAgIC0tYWN0aXZlR3JvdXBzID09PSAwICYmIHRlYXJkb3duQXR0ZW1wdGVkICYmIGdyb3VwQnlTb3VyY2VTdWJzY3JpYmVyLnVuc3Vic2NyaWJlKCk7XG4gICAgICAgICAgICAgICAgfTtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgcmVzdWx0LmtleSA9IGtleTtcbiAgICAgICAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgICAgIH1cbiAgICB9KTtcbn1cbmV4cG9ydHMuZ3JvdXBCeSA9IGdyb3VwQnk7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1ncm91cEJ5LmpzLm1hcCIsIlwidXNlIHN0cmljdFwiO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuZXhwb3J0cy5pZ25vcmVFbGVtZW50cyA9IHZvaWQgMDtcbnZhciBsaWZ0XzEgPSByZXF1aXJlKFwiLi4vdXRpbC9saWZ0XCIpO1xudmFyIE9wZXJhdG9yU3Vic2NyaWJlcl8xID0gcmVxdWlyZShcIi4vT3BlcmF0b3JTdWJzY3JpYmVyXCIpO1xudmFyIG5vb3BfMSA9IHJlcXVpcmUoXCIuLi91dGlsL25vb3BcIik7XG5mdW5jdGlvbiBpZ25vcmVFbGVtZW50cygpIHtcbiAgICByZXR1cm4gbGlmdF8xLm9wZXJhdGUoZnVuY3Rpb24gKHNvdXJjZSwgc3Vic2NyaWJlcikge1xuICAgICAgICBzb3VyY2Uuc3Vic2NyaWJlKE9wZXJhdG9yU3Vic2NyaWJlcl8xLmNyZWF0ZU9wZXJhdG9yU3Vic2NyaWJlcihzdWJzY3JpYmVyLCBub29wXzEubm9vcCkpO1xuICAgIH0pO1xufVxuZXhwb3J0cy5pZ25vcmVFbGVtZW50cyA9IGlnbm9yZUVsZW1lbnRzO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9aWdub3JlRWxlbWVudHMuanMubWFwIiwiXCJ1c2Ugc3RyaWN0XCI7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5leHBvcnRzLmlzRW1wdHkgPSB2b2lkIDA7XG52YXIgbGlmdF8xID0gcmVxdWlyZShcIi4uL3V0aWwvbGlmdFwiKTtcbnZhciBPcGVyYXRvclN1YnNjcmliZXJfMSA9IHJlcXVpcmUoXCIuL09wZXJhdG9yU3Vic2NyaWJlclwiKTtcbmZ1bmN0aW9uIGlzRW1wdHkoKSB7XG4gICAgcmV0dXJuIGxpZnRfMS5vcGVyYXRlKGZ1bmN0aW9uIChzb3VyY2UsIHN1YnNjcmliZXIpIHtcbiAgICAgICAgc291cmNlLnN1YnNjcmliZShPcGVyYXRvclN1YnNjcmliZXJfMS5jcmVhdGVPcGVyYXRvclN1YnNjcmliZXIoc3Vic2NyaWJlciwgZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgc3Vic2NyaWJlci5uZXh0KGZhbHNlKTtcbiAgICAgICAgICAgIHN1YnNjcmliZXIuY29tcGxldGUoKTtcbiAgICAgICAgfSwgZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgc3Vic2NyaWJlci5uZXh0KHRydWUpO1xuICAgICAgICAgICAgc3Vic2NyaWJlci5jb21wbGV0ZSgpO1xuICAgICAgICB9KSk7XG4gICAgfSk7XG59XG5leHBvcnRzLmlzRW1wdHkgPSBpc0VtcHR5O1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9aXNFbXB0eS5qcy5tYXAiLCJcInVzZSBzdHJpY3RcIjtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmV4cG9ydHMuam9pbkFsbEludGVybmFscyA9IHZvaWQgMDtcbnZhciBpZGVudGl0eV8xID0gcmVxdWlyZShcIi4uL3V0aWwvaWRlbnRpdHlcIik7XG52YXIgbWFwT25lT3JNYW55QXJnc18xID0gcmVxdWlyZShcIi4uL3V0aWwvbWFwT25lT3JNYW55QXJnc1wiKTtcbnZhciBwaXBlXzEgPSByZXF1aXJlKFwiLi4vdXRpbC9waXBlXCIpO1xudmFyIG1lcmdlTWFwXzEgPSByZXF1aXJlKFwiLi9tZXJnZU1hcFwiKTtcbnZhciB0b0FycmF5XzEgPSByZXF1aXJlKFwiLi90b0FycmF5XCIpO1xuZnVuY3Rpb24gam9pbkFsbEludGVybmFscyhqb2luRm4sIHByb2plY3QpIHtcbiAgICByZXR1cm4gcGlwZV8xLnBpcGUodG9BcnJheV8xLnRvQXJyYXkoKSwgbWVyZ2VNYXBfMS5tZXJnZU1hcChmdW5jdGlvbiAoc291cmNlcykgeyByZXR1cm4gam9pbkZuKHNvdXJjZXMpOyB9KSwgcHJvamVjdCA/IG1hcE9uZU9yTWFueUFyZ3NfMS5tYXBPbmVPck1hbnlBcmdzKHByb2plY3QpIDogaWRlbnRpdHlfMS5pZGVudGl0eSk7XG59XG5leHBvcnRzLmpvaW5BbGxJbnRlcm5hbHMgPSBqb2luQWxsSW50ZXJuYWxzO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9am9pbkFsbEludGVybmFscy5qcy5tYXAiLCJcInVzZSBzdHJpY3RcIjtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmV4cG9ydHMubGFzdCA9IHZvaWQgMDtcbnZhciBFbXB0eUVycm9yXzEgPSByZXF1aXJlKFwiLi4vdXRpbC9FbXB0eUVycm9yXCIpO1xudmFyIGZpbHRlcl8xID0gcmVxdWlyZShcIi4vZmlsdGVyXCIpO1xudmFyIHRha2VMYXN0XzEgPSByZXF1aXJlKFwiLi90YWtlTGFzdFwiKTtcbnZhciB0aHJvd0lmRW1wdHlfMSA9IHJlcXVpcmUoXCIuL3Rocm93SWZFbXB0eVwiKTtcbnZhciBkZWZhdWx0SWZFbXB0eV8xID0gcmVxdWlyZShcIi4vZGVmYXVsdElmRW1wdHlcIik7XG52YXIgaWRlbnRpdHlfMSA9IHJlcXVpcmUoXCIuLi91dGlsL2lkZW50aXR5XCIpO1xuZnVuY3Rpb24gbGFzdChwcmVkaWNhdGUsIGRlZmF1bHRWYWx1ZSkge1xuICAgIHZhciBoYXNEZWZhdWx0VmFsdWUgPSBhcmd1bWVudHMubGVuZ3RoID49IDI7XG4gICAgcmV0dXJuIGZ1bmN0aW9uIChzb3VyY2UpIHtcbiAgICAgICAgcmV0dXJuIHNvdXJjZS5waXBlKHByZWRpY2F0ZSA/IGZpbHRlcl8xLmZpbHRlcihmdW5jdGlvbiAodiwgaSkgeyByZXR1cm4gcHJlZGljYXRlKHYsIGksIHNvdXJjZSk7IH0pIDogaWRlbnRpdHlfMS5pZGVudGl0eSwgdGFrZUxhc3RfMS50YWtlTGFzdCgxKSwgaGFzRGVmYXVsdFZhbHVlID8gZGVmYXVsdElmRW1wdHlfMS5kZWZhdWx0SWZFbXB0eShkZWZhdWx0VmFsdWUpIDogdGhyb3dJZkVtcHR5XzEudGhyb3dJZkVtcHR5KGZ1bmN0aW9uICgpIHsgcmV0dXJuIG5ldyBFbXB0eUVycm9yXzEuRW1wdHlFcnJvcigpOyB9KSk7XG4gICAgfTtcbn1cbmV4cG9ydHMubGFzdCA9IGxhc3Q7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1sYXN0LmpzLm1hcCIsIlwidXNlIHN0cmljdFwiO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuZXhwb3J0cy5tYXAgPSB2b2lkIDA7XG52YXIgbGlmdF8xID0gcmVxdWlyZShcIi4uL3V0aWwvbGlmdFwiKTtcbnZhciBPcGVyYXRvclN1YnNjcmliZXJfMSA9IHJlcXVpcmUoXCIuL09wZXJhdG9yU3Vic2NyaWJlclwiKTtcbmZ1bmN0aW9uIG1hcChwcm9qZWN0LCB0aGlzQXJnKSB7XG4gICAgcmV0dXJuIGxpZnRfMS5vcGVyYXRlKGZ1bmN0aW9uIChzb3VyY2UsIHN1YnNjcmliZXIpIHtcbiAgICAgICAgdmFyIGluZGV4ID0gMDtcbiAgICAgICAgc291cmNlLnN1YnNjcmliZShPcGVyYXRvclN1YnNjcmliZXJfMS5jcmVhdGVPcGVyYXRvclN1YnNjcmliZXIoc3Vic2NyaWJlciwgZnVuY3Rpb24gKHZhbHVlKSB7XG4gICAgICAgICAgICBzdWJzY3JpYmVyLm5leHQocHJvamVjdC5jYWxsKHRoaXNBcmcsIHZhbHVlLCBpbmRleCsrKSk7XG4gICAgICAgIH0pKTtcbiAgICB9KTtcbn1cbmV4cG9ydHMubWFwID0gbWFwO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9bWFwLmpzLm1hcCIsIlwidXNlIHN0cmljdFwiO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuZXhwb3J0cy5tYXBUbyA9IHZvaWQgMDtcbnZhciBtYXBfMSA9IHJlcXVpcmUoXCIuL21hcFwiKTtcbmZ1bmN0aW9uIG1hcFRvKHZhbHVlKSB7XG4gICAgcmV0dXJuIG1hcF8xLm1hcChmdW5jdGlvbiAoKSB7IHJldHVybiB2YWx1ZTsgfSk7XG59XG5leHBvcnRzLm1hcFRvID0gbWFwVG87XG4vLyMgc291cmNlTWFwcGluZ1VSTD1tYXBUby5qcy5tYXAiLCJcInVzZSBzdHJpY3RcIjtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmV4cG9ydHMubWF0ZXJpYWxpemUgPSB2b2lkIDA7XG52YXIgTm90aWZpY2F0aW9uXzEgPSByZXF1aXJlKFwiLi4vTm90aWZpY2F0aW9uXCIpO1xudmFyIGxpZnRfMSA9IHJlcXVpcmUoXCIuLi91dGlsL2xpZnRcIik7XG52YXIgT3BlcmF0b3JTdWJzY3JpYmVyXzEgPSByZXF1aXJlKFwiLi9PcGVyYXRvclN1YnNjcmliZXJcIik7XG5mdW5jdGlvbiBtYXRlcmlhbGl6ZSgpIHtcbiAgICByZXR1cm4gbGlmdF8xLm9wZXJhdGUoZnVuY3Rpb24gKHNvdXJjZSwgc3Vic2NyaWJlcikge1xuICAgICAgICBzb3VyY2Uuc3Vic2NyaWJlKE9wZXJhdG9yU3Vic2NyaWJlcl8xLmNyZWF0ZU9wZXJhdG9yU3Vic2NyaWJlcihzdWJzY3JpYmVyLCBmdW5jdGlvbiAodmFsdWUpIHtcbiAgICAgICAgICAgIHN1YnNjcmliZXIubmV4dChOb3RpZmljYXRpb25fMS5Ob3RpZmljYXRpb24uY3JlYXRlTmV4dCh2YWx1ZSkpO1xuICAgICAgICB9LCBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICBzdWJzY3JpYmVyLm5leHQoTm90aWZpY2F0aW9uXzEuTm90aWZpY2F0aW9uLmNyZWF0ZUNvbXBsZXRlKCkpO1xuICAgICAgICAgICAgc3Vic2NyaWJlci5jb21wbGV0ZSgpO1xuICAgICAgICB9LCBmdW5jdGlvbiAoZXJyKSB7XG4gICAgICAgICAgICBzdWJzY3JpYmVyLm5leHQoTm90aWZpY2F0aW9uXzEuTm90aWZpY2F0aW9uLmNyZWF0ZUVycm9yKGVycikpO1xuICAgICAgICAgICAgc3Vic2NyaWJlci5jb21wbGV0ZSgpO1xuICAgICAgICB9KSk7XG4gICAgfSk7XG59XG5leHBvcnRzLm1hdGVyaWFsaXplID0gbWF0ZXJpYWxpemU7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1tYXRlcmlhbGl6ZS5qcy5tYXAiLCJcInVzZSBzdHJpY3RcIjtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmV4cG9ydHMubWF4ID0gdm9pZCAwO1xudmFyIHJlZHVjZV8xID0gcmVxdWlyZShcIi4vcmVkdWNlXCIpO1xudmFyIGlzRnVuY3Rpb25fMSA9IHJlcXVpcmUoXCIuLi91dGlsL2lzRnVuY3Rpb25cIik7XG5mdW5jdGlvbiBtYXgoY29tcGFyZXIpIHtcbiAgICByZXR1cm4gcmVkdWNlXzEucmVkdWNlKGlzRnVuY3Rpb25fMS5pc0Z1bmN0aW9uKGNvbXBhcmVyKSA/IGZ1bmN0aW9uICh4LCB5KSB7IHJldHVybiAoY29tcGFyZXIoeCwgeSkgPiAwID8geCA6IHkpOyB9IDogZnVuY3Rpb24gKHgsIHkpIHsgcmV0dXJuICh4ID4geSA/IHggOiB5KTsgfSk7XG59XG5leHBvcnRzLm1heCA9IG1heDtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPW1heC5qcy5tYXAiLCJcInVzZSBzdHJpY3RcIjtcbnZhciBfX3JlYWQgPSAodGhpcyAmJiB0aGlzLl9fcmVhZCkgfHwgZnVuY3Rpb24gKG8sIG4pIHtcbiAgICB2YXIgbSA9IHR5cGVvZiBTeW1ib2wgPT09IFwiZnVuY3Rpb25cIiAmJiBvW1N5bWJvbC5pdGVyYXRvcl07XG4gICAgaWYgKCFtKSByZXR1cm4gbztcbiAgICB2YXIgaSA9IG0uY2FsbChvKSwgciwgYXIgPSBbXSwgZTtcbiAgICB0cnkge1xuICAgICAgICB3aGlsZSAoKG4gPT09IHZvaWQgMCB8fCBuLS0gPiAwKSAmJiAhKHIgPSBpLm5leHQoKSkuZG9uZSkgYXIucHVzaChyLnZhbHVlKTtcbiAgICB9XG4gICAgY2F0Y2ggKGVycm9yKSB7IGUgPSB7IGVycm9yOiBlcnJvciB9OyB9XG4gICAgZmluYWxseSB7XG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgICBpZiAociAmJiAhci5kb25lICYmIChtID0gaVtcInJldHVyblwiXSkpIG0uY2FsbChpKTtcbiAgICAgICAgfVxuICAgICAgICBmaW5hbGx5IHsgaWYgKGUpIHRocm93IGUuZXJyb3I7IH1cbiAgICB9XG4gICAgcmV0dXJuIGFyO1xufTtcbnZhciBfX3NwcmVhZEFycmF5ID0gKHRoaXMgJiYgdGhpcy5fX3NwcmVhZEFycmF5KSB8fCBmdW5jdGlvbiAodG8sIGZyb20pIHtcbiAgICBmb3IgKHZhciBpID0gMCwgaWwgPSBmcm9tLmxlbmd0aCwgaiA9IHRvLmxlbmd0aDsgaSA8IGlsOyBpKyssIGorKylcbiAgICAgICAgdG9bal0gPSBmcm9tW2ldO1xuICAgIHJldHVybiB0bztcbn07XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5leHBvcnRzLm1lcmdlID0gdm9pZCAwO1xudmFyIGxpZnRfMSA9IHJlcXVpcmUoXCIuLi91dGlsL2xpZnRcIik7XG52YXIgYXJnc09yQXJnQXJyYXlfMSA9IHJlcXVpcmUoXCIuLi91dGlsL2FyZ3NPckFyZ0FycmF5XCIpO1xudmFyIG1lcmdlQWxsXzEgPSByZXF1aXJlKFwiLi9tZXJnZUFsbFwiKTtcbnZhciBhcmdzXzEgPSByZXF1aXJlKFwiLi4vdXRpbC9hcmdzXCIpO1xudmFyIGZyb21fMSA9IHJlcXVpcmUoXCIuLi9vYnNlcnZhYmxlL2Zyb21cIik7XG5mdW5jdGlvbiBtZXJnZSgpIHtcbiAgICB2YXIgYXJncyA9IFtdO1xuICAgIGZvciAodmFyIF9pID0gMDsgX2kgPCBhcmd1bWVudHMubGVuZ3RoOyBfaSsrKSB7XG4gICAgICAgIGFyZ3NbX2ldID0gYXJndW1lbnRzW19pXTtcbiAgICB9XG4gICAgdmFyIHNjaGVkdWxlciA9IGFyZ3NfMS5wb3BTY2hlZHVsZXIoYXJncyk7XG4gICAgdmFyIGNvbmN1cnJlbnQgPSBhcmdzXzEucG9wTnVtYmVyKGFyZ3MsIEluZmluaXR5KTtcbiAgICBhcmdzID0gYXJnc09yQXJnQXJyYXlfMS5hcmdzT3JBcmdBcnJheShhcmdzKTtcbiAgICByZXR1cm4gbGlmdF8xLm9wZXJhdGUoZnVuY3Rpb24gKHNvdXJjZSwgc3Vic2NyaWJlcikge1xuICAgICAgICBtZXJnZUFsbF8xLm1lcmdlQWxsKGNvbmN1cnJlbnQpKGZyb21fMS5mcm9tKF9fc3ByZWFkQXJyYXkoW3NvdXJjZV0sIF9fcmVhZChhcmdzKSksIHNjaGVkdWxlcikpLnN1YnNjcmliZShzdWJzY3JpYmVyKTtcbiAgICB9KTtcbn1cbmV4cG9ydHMubWVyZ2UgPSBtZXJnZTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPW1lcmdlLmpzLm1hcCIsIlwidXNlIHN0cmljdFwiO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuZXhwb3J0cy5tZXJnZUFsbCA9IHZvaWQgMDtcbnZhciBtZXJnZU1hcF8xID0gcmVxdWlyZShcIi4vbWVyZ2VNYXBcIik7XG52YXIgaWRlbnRpdHlfMSA9IHJlcXVpcmUoXCIuLi91dGlsL2lkZW50aXR5XCIpO1xuZnVuY3Rpb24gbWVyZ2VBbGwoY29uY3VycmVudCkge1xuICAgIGlmIChjb25jdXJyZW50ID09PSB2b2lkIDApIHsgY29uY3VycmVudCA9IEluZmluaXR5OyB9XG4gICAgcmV0dXJuIG1lcmdlTWFwXzEubWVyZ2VNYXAoaWRlbnRpdHlfMS5pZGVudGl0eSwgY29uY3VycmVudCk7XG59XG5leHBvcnRzLm1lcmdlQWxsID0gbWVyZ2VBbGw7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1tZXJnZUFsbC5qcy5tYXAiLCJcInVzZSBzdHJpY3RcIjtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmV4cG9ydHMubWVyZ2VJbnRlcm5hbHMgPSB2b2lkIDA7XG52YXIgaW5uZXJGcm9tXzEgPSByZXF1aXJlKFwiLi4vb2JzZXJ2YWJsZS9pbm5lckZyb21cIik7XG52YXIgZXhlY3V0ZVNjaGVkdWxlXzEgPSByZXF1aXJlKFwiLi4vdXRpbC9leGVjdXRlU2NoZWR1bGVcIik7XG52YXIgT3BlcmF0b3JTdWJzY3JpYmVyXzEgPSByZXF1aXJlKFwiLi9PcGVyYXRvclN1YnNjcmliZXJcIik7XG5mdW5jdGlvbiBtZXJnZUludGVybmFscyhzb3VyY2UsIHN1YnNjcmliZXIsIHByb2plY3QsIGNvbmN1cnJlbnQsIG9uQmVmb3JlTmV4dCwgZXhwYW5kLCBpbm5lclN1YlNjaGVkdWxlciwgYWRkaXRpb25hbEZpbmFsaXplcikge1xuICAgIHZhciBidWZmZXIgPSBbXTtcbiAgICB2YXIgYWN0aXZlID0gMDtcbiAgICB2YXIgaW5kZXggPSAwO1xuICAgIHZhciBpc0NvbXBsZXRlID0gZmFsc2U7XG4gICAgdmFyIGNoZWNrQ29tcGxldGUgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIGlmIChpc0NvbXBsZXRlICYmICFidWZmZXIubGVuZ3RoICYmICFhY3RpdmUpIHtcbiAgICAgICAgICAgIHN1YnNjcmliZXIuY29tcGxldGUoKTtcbiAgICAgICAgfVxuICAgIH07XG4gICAgdmFyIG91dGVyTmV4dCA9IGZ1bmN0aW9uICh2YWx1ZSkgeyByZXR1cm4gKGFjdGl2ZSA8IGNvbmN1cnJlbnQgPyBkb0lubmVyU3ViKHZhbHVlKSA6IGJ1ZmZlci5wdXNoKHZhbHVlKSk7IH07XG4gICAgdmFyIGRvSW5uZXJTdWIgPSBmdW5jdGlvbiAodmFsdWUpIHtcbiAgICAgICAgZXhwYW5kICYmIHN1YnNjcmliZXIubmV4dCh2YWx1ZSk7XG4gICAgICAgIGFjdGl2ZSsrO1xuICAgICAgICB2YXIgaW5uZXJDb21wbGV0ZSA9IGZhbHNlO1xuICAgICAgICBpbm5lckZyb21fMS5pbm5lckZyb20ocHJvamVjdCh2YWx1ZSwgaW5kZXgrKykpLnN1YnNjcmliZShPcGVyYXRvclN1YnNjcmliZXJfMS5jcmVhdGVPcGVyYXRvclN1YnNjcmliZXIoc3Vic2NyaWJlciwgZnVuY3Rpb24gKGlubmVyVmFsdWUpIHtcbiAgICAgICAgICAgIG9uQmVmb3JlTmV4dCA9PT0gbnVsbCB8fCBvbkJlZm9yZU5leHQgPT09IHZvaWQgMCA/IHZvaWQgMCA6IG9uQmVmb3JlTmV4dChpbm5lclZhbHVlKTtcbiAgICAgICAgICAgIGlmIChleHBhbmQpIHtcbiAgICAgICAgICAgICAgICBvdXRlck5leHQoaW5uZXJWYWx1ZSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICBzdWJzY3JpYmVyLm5leHQoaW5uZXJWYWx1ZSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0sIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIGlubmVyQ29tcGxldGUgPSB0cnVlO1xuICAgICAgICB9LCB1bmRlZmluZWQsIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIGlmIChpbm5lckNvbXBsZXRlKSB7XG4gICAgICAgICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgICAgICAgICAgYWN0aXZlLS07XG4gICAgICAgICAgICAgICAgICAgIHZhciBfbG9vcF8xID0gZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgdmFyIGJ1ZmZlcmVkVmFsdWUgPSBidWZmZXIuc2hpZnQoKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChpbm5lclN1YlNjaGVkdWxlcikge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGV4ZWN1dGVTY2hlZHVsZV8xLmV4ZWN1dGVTY2hlZHVsZShzdWJzY3JpYmVyLCBpbm5lclN1YlNjaGVkdWxlciwgZnVuY3Rpb24gKCkgeyByZXR1cm4gZG9Jbm5lclN1YihidWZmZXJlZFZhbHVlKTsgfSk7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBkb0lubmVyU3ViKGJ1ZmZlcmVkVmFsdWUpO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICB9O1xuICAgICAgICAgICAgICAgICAgICB3aGlsZSAoYnVmZmVyLmxlbmd0aCAmJiBhY3RpdmUgPCBjb25jdXJyZW50KSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBfbG9vcF8xKCk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgY2hlY2tDb21wbGV0ZSgpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBjYXRjaCAoZXJyKSB7XG4gICAgICAgICAgICAgICAgICAgIHN1YnNjcmliZXIuZXJyb3IoZXJyKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgIH0pKTtcbiAgICB9O1xuICAgIHNvdXJjZS5zdWJzY3JpYmUoT3BlcmF0b3JTdWJzY3JpYmVyXzEuY3JlYXRlT3BlcmF0b3JTdWJzY3JpYmVyKHN1YnNjcmliZXIsIG91dGVyTmV4dCwgZnVuY3Rpb24gKCkge1xuICAgICAgICBpc0NvbXBsZXRlID0gdHJ1ZTtcbiAgICAgICAgY2hlY2tDb21wbGV0ZSgpO1xuICAgIH0pKTtcbiAgICByZXR1cm4gZnVuY3Rpb24gKCkge1xuICAgICAgICBhZGRpdGlvbmFsRmluYWxpemVyID09PSBudWxsIHx8IGFkZGl0aW9uYWxGaW5hbGl6ZXIgPT09IHZvaWQgMCA/IHZvaWQgMCA6IGFkZGl0aW9uYWxGaW5hbGl6ZXIoKTtcbiAgICB9O1xufVxuZXhwb3J0cy5tZXJnZUludGVybmFscyA9IG1lcmdlSW50ZXJuYWxzO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9bWVyZ2VJbnRlcm5hbHMuanMubWFwIiwiXCJ1c2Ugc3RyaWN0XCI7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5leHBvcnRzLm1lcmdlTWFwID0gdm9pZCAwO1xudmFyIG1hcF8xID0gcmVxdWlyZShcIi4vbWFwXCIpO1xudmFyIGlubmVyRnJvbV8xID0gcmVxdWlyZShcIi4uL29ic2VydmFibGUvaW5uZXJGcm9tXCIpO1xudmFyIGxpZnRfMSA9IHJlcXVpcmUoXCIuLi91dGlsL2xpZnRcIik7XG52YXIgbWVyZ2VJbnRlcm5hbHNfMSA9IHJlcXVpcmUoXCIuL21lcmdlSW50ZXJuYWxzXCIpO1xudmFyIGlzRnVuY3Rpb25fMSA9IHJlcXVpcmUoXCIuLi91dGlsL2lzRnVuY3Rpb25cIik7XG5mdW5jdGlvbiBtZXJnZU1hcChwcm9qZWN0LCByZXN1bHRTZWxlY3RvciwgY29uY3VycmVudCkge1xuICAgIGlmIChjb25jdXJyZW50ID09PSB2b2lkIDApIHsgY29uY3VycmVudCA9IEluZmluaXR5OyB9XG4gICAgaWYgKGlzRnVuY3Rpb25fMS5pc0Z1bmN0aW9uKHJlc3VsdFNlbGVjdG9yKSkge1xuICAgICAgICByZXR1cm4gbWVyZ2VNYXAoZnVuY3Rpb24gKGEsIGkpIHsgcmV0dXJuIG1hcF8xLm1hcChmdW5jdGlvbiAoYiwgaWkpIHsgcmV0dXJuIHJlc3VsdFNlbGVjdG9yKGEsIGIsIGksIGlpKTsgfSkoaW5uZXJGcm9tXzEuaW5uZXJGcm9tKHByb2plY3QoYSwgaSkpKTsgfSwgY29uY3VycmVudCk7XG4gICAgfVxuICAgIGVsc2UgaWYgKHR5cGVvZiByZXN1bHRTZWxlY3RvciA9PT0gJ251bWJlcicpIHtcbiAgICAgICAgY29uY3VycmVudCA9IHJlc3VsdFNlbGVjdG9yO1xuICAgIH1cbiAgICByZXR1cm4gbGlmdF8xLm9wZXJhdGUoZnVuY3Rpb24gKHNvdXJjZSwgc3Vic2NyaWJlcikgeyByZXR1cm4gbWVyZ2VJbnRlcm5hbHNfMS5tZXJnZUludGVybmFscyhzb3VyY2UsIHN1YnNjcmliZXIsIHByb2plY3QsIGNvbmN1cnJlbnQpOyB9KTtcbn1cbmV4cG9ydHMubWVyZ2VNYXAgPSBtZXJnZU1hcDtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPW1lcmdlTWFwLmpzLm1hcCIsIlwidXNlIHN0cmljdFwiO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuZXhwb3J0cy5tZXJnZU1hcFRvID0gdm9pZCAwO1xudmFyIG1lcmdlTWFwXzEgPSByZXF1aXJlKFwiLi9tZXJnZU1hcFwiKTtcbnZhciBpc0Z1bmN0aW9uXzEgPSByZXF1aXJlKFwiLi4vdXRpbC9pc0Z1bmN0aW9uXCIpO1xuZnVuY3Rpb24gbWVyZ2VNYXBUbyhpbm5lck9ic2VydmFibGUsIHJlc3VsdFNlbGVjdG9yLCBjb25jdXJyZW50KSB7XG4gICAgaWYgKGNvbmN1cnJlbnQgPT09IHZvaWQgMCkgeyBjb25jdXJyZW50ID0gSW5maW5pdHk7IH1cbiAgICBpZiAoaXNGdW5jdGlvbl8xLmlzRnVuY3Rpb24ocmVzdWx0U2VsZWN0b3IpKSB7XG4gICAgICAgIHJldHVybiBtZXJnZU1hcF8xLm1lcmdlTWFwKGZ1bmN0aW9uICgpIHsgcmV0dXJuIGlubmVyT2JzZXJ2YWJsZTsgfSwgcmVzdWx0U2VsZWN0b3IsIGNvbmN1cnJlbnQpO1xuICAgIH1cbiAgICBpZiAodHlwZW9mIHJlc3VsdFNlbGVjdG9yID09PSAnbnVtYmVyJykge1xuICAgICAgICBjb25jdXJyZW50ID0gcmVzdWx0U2VsZWN0b3I7XG4gICAgfVxuICAgIHJldHVybiBtZXJnZU1hcF8xLm1lcmdlTWFwKGZ1bmN0aW9uICgpIHsgcmV0dXJuIGlubmVyT2JzZXJ2YWJsZTsgfSwgY29uY3VycmVudCk7XG59XG5leHBvcnRzLm1lcmdlTWFwVG8gPSBtZXJnZU1hcFRvO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9bWVyZ2VNYXBUby5qcy5tYXAiLCJcInVzZSBzdHJpY3RcIjtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmV4cG9ydHMubWVyZ2VTY2FuID0gdm9pZCAwO1xudmFyIGxpZnRfMSA9IHJlcXVpcmUoXCIuLi91dGlsL2xpZnRcIik7XG52YXIgbWVyZ2VJbnRlcm5hbHNfMSA9IHJlcXVpcmUoXCIuL21lcmdlSW50ZXJuYWxzXCIpO1xuZnVuY3Rpb24gbWVyZ2VTY2FuKGFjY3VtdWxhdG9yLCBzZWVkLCBjb25jdXJyZW50KSB7XG4gICAgaWYgKGNvbmN1cnJlbnQgPT09IHZvaWQgMCkgeyBjb25jdXJyZW50ID0gSW5maW5pdHk7IH1cbiAgICByZXR1cm4gbGlmdF8xLm9wZXJhdGUoZnVuY3Rpb24gKHNvdXJjZSwgc3Vic2NyaWJlcikge1xuICAgICAgICB2YXIgc3RhdGUgPSBzZWVkO1xuICAgICAgICByZXR1cm4gbWVyZ2VJbnRlcm5hbHNfMS5tZXJnZUludGVybmFscyhzb3VyY2UsIHN1YnNjcmliZXIsIGZ1bmN0aW9uICh2YWx1ZSwgaW5kZXgpIHsgcmV0dXJuIGFjY3VtdWxhdG9yKHN0YXRlLCB2YWx1ZSwgaW5kZXgpOyB9LCBjb25jdXJyZW50LCBmdW5jdGlvbiAodmFsdWUpIHtcbiAgICAgICAgICAgIHN0YXRlID0gdmFsdWU7XG4gICAgICAgIH0sIGZhbHNlLCB1bmRlZmluZWQsIGZ1bmN0aW9uICgpIHsgcmV0dXJuIChzdGF0ZSA9IG51bGwpOyB9KTtcbiAgICB9KTtcbn1cbmV4cG9ydHMubWVyZ2VTY2FuID0gbWVyZ2VTY2FuO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9bWVyZ2VTY2FuLmpzLm1hcCIsIlwidXNlIHN0cmljdFwiO1xudmFyIF9fcmVhZCA9ICh0aGlzICYmIHRoaXMuX19yZWFkKSB8fCBmdW5jdGlvbiAobywgbikge1xuICAgIHZhciBtID0gdHlwZW9mIFN5bWJvbCA9PT0gXCJmdW5jdGlvblwiICYmIG9bU3ltYm9sLml0ZXJhdG9yXTtcbiAgICBpZiAoIW0pIHJldHVybiBvO1xuICAgIHZhciBpID0gbS5jYWxsKG8pLCByLCBhciA9IFtdLCBlO1xuICAgIHRyeSB7XG4gICAgICAgIHdoaWxlICgobiA9PT0gdm9pZCAwIHx8IG4tLSA+IDApICYmICEociA9IGkubmV4dCgpKS5kb25lKSBhci5wdXNoKHIudmFsdWUpO1xuICAgIH1cbiAgICBjYXRjaCAoZXJyb3IpIHsgZSA9IHsgZXJyb3I6IGVycm9yIH07IH1cbiAgICBmaW5hbGx5IHtcbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgIGlmIChyICYmICFyLmRvbmUgJiYgKG0gPSBpW1wicmV0dXJuXCJdKSkgbS5jYWxsKGkpO1xuICAgICAgICB9XG4gICAgICAgIGZpbmFsbHkgeyBpZiAoZSkgdGhyb3cgZS5lcnJvcjsgfVxuICAgIH1cbiAgICByZXR1cm4gYXI7XG59O1xudmFyIF9fc3ByZWFkQXJyYXkgPSAodGhpcyAmJiB0aGlzLl9fc3ByZWFkQXJyYXkpIHx8IGZ1bmN0aW9uICh0bywgZnJvbSkge1xuICAgIGZvciAodmFyIGkgPSAwLCBpbCA9IGZyb20ubGVuZ3RoLCBqID0gdG8ubGVuZ3RoOyBpIDwgaWw7IGkrKywgaisrKVxuICAgICAgICB0b1tqXSA9IGZyb21baV07XG4gICAgcmV0dXJuIHRvO1xufTtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmV4cG9ydHMubWVyZ2VXaXRoID0gdm9pZCAwO1xudmFyIG1lcmdlXzEgPSByZXF1aXJlKFwiLi9tZXJnZVwiKTtcbmZ1bmN0aW9uIG1lcmdlV2l0aCgpIHtcbiAgICB2YXIgb3RoZXJTb3VyY2VzID0gW107XG4gICAgZm9yICh2YXIgX2kgPSAwOyBfaSA8IGFyZ3VtZW50cy5sZW5ndGg7IF9pKyspIHtcbiAgICAgICAgb3RoZXJTb3VyY2VzW19pXSA9IGFyZ3VtZW50c1tfaV07XG4gICAgfVxuICAgIHJldHVybiBtZXJnZV8xLm1lcmdlLmFwcGx5KHZvaWQgMCwgX19zcHJlYWRBcnJheShbXSwgX19yZWFkKG90aGVyU291cmNlcykpKTtcbn1cbmV4cG9ydHMubWVyZ2VXaXRoID0gbWVyZ2VXaXRoO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9bWVyZ2VXaXRoLmpzLm1hcCIsIlwidXNlIHN0cmljdFwiO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuZXhwb3J0cy5taW4gPSB2b2lkIDA7XG52YXIgcmVkdWNlXzEgPSByZXF1aXJlKFwiLi9yZWR1Y2VcIik7XG52YXIgaXNGdW5jdGlvbl8xID0gcmVxdWlyZShcIi4uL3V0aWwvaXNGdW5jdGlvblwiKTtcbmZ1bmN0aW9uIG1pbihjb21wYXJlcikge1xuICAgIHJldHVybiByZWR1Y2VfMS5yZWR1Y2UoaXNGdW5jdGlvbl8xLmlzRnVuY3Rpb24oY29tcGFyZXIpID8gZnVuY3Rpb24gKHgsIHkpIHsgcmV0dXJuIChjb21wYXJlcih4LCB5KSA8IDAgPyB4IDogeSk7IH0gOiBmdW5jdGlvbiAoeCwgeSkgeyByZXR1cm4gKHggPCB5ID8geCA6IHkpOyB9KTtcbn1cbmV4cG9ydHMubWluID0gbWluO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9bWluLmpzLm1hcCIsIlwidXNlIHN0cmljdFwiO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuZXhwb3J0cy5tdWx0aWNhc3QgPSB2b2lkIDA7XG52YXIgQ29ubmVjdGFibGVPYnNlcnZhYmxlXzEgPSByZXF1aXJlKFwiLi4vb2JzZXJ2YWJsZS9Db25uZWN0YWJsZU9ic2VydmFibGVcIik7XG52YXIgaXNGdW5jdGlvbl8xID0gcmVxdWlyZShcIi4uL3V0aWwvaXNGdW5jdGlvblwiKTtcbnZhciBjb25uZWN0XzEgPSByZXF1aXJlKFwiLi9jb25uZWN0XCIpO1xuZnVuY3Rpb24gbXVsdGljYXN0KHN1YmplY3RPclN1YmplY3RGYWN0b3J5LCBzZWxlY3Rvcikge1xuICAgIHZhciBzdWJqZWN0RmFjdG9yeSA9IGlzRnVuY3Rpb25fMS5pc0Z1bmN0aW9uKHN1YmplY3RPclN1YmplY3RGYWN0b3J5KSA/IHN1YmplY3RPclN1YmplY3RGYWN0b3J5IDogZnVuY3Rpb24gKCkgeyByZXR1cm4gc3ViamVjdE9yU3ViamVjdEZhY3Rvcnk7IH07XG4gICAgaWYgKGlzRnVuY3Rpb25fMS5pc0Z1bmN0aW9uKHNlbGVjdG9yKSkge1xuICAgICAgICByZXR1cm4gY29ubmVjdF8xLmNvbm5lY3Qoc2VsZWN0b3IsIHtcbiAgICAgICAgICAgIGNvbm5lY3Rvcjogc3ViamVjdEZhY3RvcnksXG4gICAgICAgIH0pO1xuICAgIH1cbiAgICByZXR1cm4gZnVuY3Rpb24gKHNvdXJjZSkgeyByZXR1cm4gbmV3IENvbm5lY3RhYmxlT2JzZXJ2YWJsZV8xLkNvbm5lY3RhYmxlT2JzZXJ2YWJsZShzb3VyY2UsIHN1YmplY3RGYWN0b3J5KTsgfTtcbn1cbmV4cG9ydHMubXVsdGljYXN0ID0gbXVsdGljYXN0O1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9bXVsdGljYXN0LmpzLm1hcCIsIlwidXNlIHN0cmljdFwiO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuZXhwb3J0cy5vYnNlcnZlT24gPSB2b2lkIDA7XG52YXIgZXhlY3V0ZVNjaGVkdWxlXzEgPSByZXF1aXJlKFwiLi4vdXRpbC9leGVjdXRlU2NoZWR1bGVcIik7XG52YXIgbGlmdF8xID0gcmVxdWlyZShcIi4uL3V0aWwvbGlmdFwiKTtcbnZhciBPcGVyYXRvclN1YnNjcmliZXJfMSA9IHJlcXVpcmUoXCIuL09wZXJhdG9yU3Vic2NyaWJlclwiKTtcbmZ1bmN0aW9uIG9ic2VydmVPbihzY2hlZHVsZXIsIGRlbGF5KSB7XG4gICAgaWYgKGRlbGF5ID09PSB2b2lkIDApIHsgZGVsYXkgPSAwOyB9XG4gICAgcmV0dXJuIGxpZnRfMS5vcGVyYXRlKGZ1bmN0aW9uIChzb3VyY2UsIHN1YnNjcmliZXIpIHtcbiAgICAgICAgc291cmNlLnN1YnNjcmliZShPcGVyYXRvclN1YnNjcmliZXJfMS5jcmVhdGVPcGVyYXRvclN1YnNjcmliZXIoc3Vic2NyaWJlciwgZnVuY3Rpb24gKHZhbHVlKSB7IHJldHVybiBleGVjdXRlU2NoZWR1bGVfMS5leGVjdXRlU2NoZWR1bGUoc3Vic2NyaWJlciwgc2NoZWR1bGVyLCBmdW5jdGlvbiAoKSB7IHJldHVybiBzdWJzY3JpYmVyLm5leHQodmFsdWUpOyB9LCBkZWxheSk7IH0sIGZ1bmN0aW9uICgpIHsgcmV0dXJuIGV4ZWN1dGVTY2hlZHVsZV8xLmV4ZWN1dGVTY2hlZHVsZShzdWJzY3JpYmVyLCBzY2hlZHVsZXIsIGZ1bmN0aW9uICgpIHsgcmV0dXJuIHN1YnNjcmliZXIuY29tcGxldGUoKTsgfSwgZGVsYXkpOyB9LCBmdW5jdGlvbiAoZXJyKSB7IHJldHVybiBleGVjdXRlU2NoZWR1bGVfMS5leGVjdXRlU2NoZWR1bGUoc3Vic2NyaWJlciwgc2NoZWR1bGVyLCBmdW5jdGlvbiAoKSB7IHJldHVybiBzdWJzY3JpYmVyLmVycm9yKGVycik7IH0sIGRlbGF5KTsgfSkpO1xuICAgIH0pO1xufVxuZXhwb3J0cy5vYnNlcnZlT24gPSBvYnNlcnZlT247XG4vLyMgc291cmNlTWFwcGluZ1VSTD1vYnNlcnZlT24uanMubWFwIiwiXCJ1c2Ugc3RyaWN0XCI7XG52YXIgX19yZWFkID0gKHRoaXMgJiYgdGhpcy5fX3JlYWQpIHx8IGZ1bmN0aW9uIChvLCBuKSB7XG4gICAgdmFyIG0gPSB0eXBlb2YgU3ltYm9sID09PSBcImZ1bmN0aW9uXCIgJiYgb1tTeW1ib2wuaXRlcmF0b3JdO1xuICAgIGlmICghbSkgcmV0dXJuIG87XG4gICAgdmFyIGkgPSBtLmNhbGwobyksIHIsIGFyID0gW10sIGU7XG4gICAgdHJ5IHtcbiAgICAgICAgd2hpbGUgKChuID09PSB2b2lkIDAgfHwgbi0tID4gMCkgJiYgIShyID0gaS5uZXh0KCkpLmRvbmUpIGFyLnB1c2goci52YWx1ZSk7XG4gICAgfVxuICAgIGNhdGNoIChlcnJvcikgeyBlID0geyBlcnJvcjogZXJyb3IgfTsgfVxuICAgIGZpbmFsbHkge1xuICAgICAgICB0cnkge1xuICAgICAgICAgICAgaWYgKHIgJiYgIXIuZG9uZSAmJiAobSA9IGlbXCJyZXR1cm5cIl0pKSBtLmNhbGwoaSk7XG4gICAgICAgIH1cbiAgICAgICAgZmluYWxseSB7IGlmIChlKSB0aHJvdyBlLmVycm9yOyB9XG4gICAgfVxuICAgIHJldHVybiBhcjtcbn07XG52YXIgX19zcHJlYWRBcnJheSA9ICh0aGlzICYmIHRoaXMuX19zcHJlYWRBcnJheSkgfHwgZnVuY3Rpb24gKHRvLCBmcm9tKSB7XG4gICAgZm9yICh2YXIgaSA9IDAsIGlsID0gZnJvbS5sZW5ndGgsIGogPSB0by5sZW5ndGg7IGkgPCBpbDsgaSsrLCBqKyspXG4gICAgICAgIHRvW2pdID0gZnJvbVtpXTtcbiAgICByZXR1cm4gdG87XG59O1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuZXhwb3J0cy5vbkVycm9yUmVzdW1lTmV4dCA9IGV4cG9ydHMub25FcnJvclJlc3VtZU5leHRXaXRoID0gdm9pZCAwO1xudmFyIGFyZ3NPckFyZ0FycmF5XzEgPSByZXF1aXJlKFwiLi4vdXRpbC9hcmdzT3JBcmdBcnJheVwiKTtcbnZhciBvbkVycm9yUmVzdW1lTmV4dF8xID0gcmVxdWlyZShcIi4uL29ic2VydmFibGUvb25FcnJvclJlc3VtZU5leHRcIik7XG5mdW5jdGlvbiBvbkVycm9yUmVzdW1lTmV4dFdpdGgoKSB7XG4gICAgdmFyIHNvdXJjZXMgPSBbXTtcbiAgICBmb3IgKHZhciBfaSA9IDA7IF9pIDwgYXJndW1lbnRzLmxlbmd0aDsgX2krKykge1xuICAgICAgICBzb3VyY2VzW19pXSA9IGFyZ3VtZW50c1tfaV07XG4gICAgfVxuICAgIHZhciBuZXh0U291cmNlcyA9IGFyZ3NPckFyZ0FycmF5XzEuYXJnc09yQXJnQXJyYXkoc291cmNlcyk7XG4gICAgcmV0dXJuIGZ1bmN0aW9uIChzb3VyY2UpIHsgcmV0dXJuIG9uRXJyb3JSZXN1bWVOZXh0XzEub25FcnJvclJlc3VtZU5leHQuYXBwbHkodm9pZCAwLCBfX3NwcmVhZEFycmF5KFtzb3VyY2VdLCBfX3JlYWQobmV4dFNvdXJjZXMpKSk7IH07XG59XG5leHBvcnRzLm9uRXJyb3JSZXN1bWVOZXh0V2l0aCA9IG9uRXJyb3JSZXN1bWVOZXh0V2l0aDtcbmV4cG9ydHMub25FcnJvclJlc3VtZU5leHQgPSBvbkVycm9yUmVzdW1lTmV4dFdpdGg7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1vbkVycm9yUmVzdW1lTmV4dFdpdGguanMubWFwIiwiXCJ1c2Ugc3RyaWN0XCI7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5leHBvcnRzLnBhaXJ3aXNlID0gdm9pZCAwO1xudmFyIGxpZnRfMSA9IHJlcXVpcmUoXCIuLi91dGlsL2xpZnRcIik7XG52YXIgT3BlcmF0b3JTdWJzY3JpYmVyXzEgPSByZXF1aXJlKFwiLi9PcGVyYXRvclN1YnNjcmliZXJcIik7XG5mdW5jdGlvbiBwYWlyd2lzZSgpIHtcbiAgICByZXR1cm4gbGlmdF8xLm9wZXJhdGUoZnVuY3Rpb24gKHNvdXJjZSwgc3Vic2NyaWJlcikge1xuICAgICAgICB2YXIgcHJldjtcbiAgICAgICAgdmFyIGhhc1ByZXYgPSBmYWxzZTtcbiAgICAgICAgc291cmNlLnN1YnNjcmliZShPcGVyYXRvclN1YnNjcmliZXJfMS5jcmVhdGVPcGVyYXRvclN1YnNjcmliZXIoc3Vic2NyaWJlciwgZnVuY3Rpb24gKHZhbHVlKSB7XG4gICAgICAgICAgICB2YXIgcCA9IHByZXY7XG4gICAgICAgICAgICBwcmV2ID0gdmFsdWU7XG4gICAgICAgICAgICBoYXNQcmV2ICYmIHN1YnNjcmliZXIubmV4dChbcCwgdmFsdWVdKTtcbiAgICAgICAgICAgIGhhc1ByZXYgPSB0cnVlO1xuICAgICAgICB9KSk7XG4gICAgfSk7XG59XG5leHBvcnRzLnBhaXJ3aXNlID0gcGFpcndpc2U7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1wYWlyd2lzZS5qcy5tYXAiLCJcInVzZSBzdHJpY3RcIjtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmV4cG9ydHMucGx1Y2sgPSB2b2lkIDA7XG52YXIgbWFwXzEgPSByZXF1aXJlKFwiLi9tYXBcIik7XG5mdW5jdGlvbiBwbHVjaygpIHtcbiAgICB2YXIgcHJvcGVydGllcyA9IFtdO1xuICAgIGZvciAodmFyIF9pID0gMDsgX2kgPCBhcmd1bWVudHMubGVuZ3RoOyBfaSsrKSB7XG4gICAgICAgIHByb3BlcnRpZXNbX2ldID0gYXJndW1lbnRzW19pXTtcbiAgICB9XG4gICAgdmFyIGxlbmd0aCA9IHByb3BlcnRpZXMubGVuZ3RoO1xuICAgIGlmIChsZW5ndGggPT09IDApIHtcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdsaXN0IG9mIHByb3BlcnRpZXMgY2Fubm90IGJlIGVtcHR5LicpO1xuICAgIH1cbiAgICByZXR1cm4gbWFwXzEubWFwKGZ1bmN0aW9uICh4KSB7XG4gICAgICAgIHZhciBjdXJyZW50UHJvcCA9IHg7XG4gICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgbGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICAgIHZhciBwID0gY3VycmVudFByb3AgPT09IG51bGwgfHwgY3VycmVudFByb3AgPT09IHZvaWQgMCA/IHZvaWQgMCA6IGN1cnJlbnRQcm9wW3Byb3BlcnRpZXNbaV1dO1xuICAgICAgICAgICAgaWYgKHR5cGVvZiBwICE9PSAndW5kZWZpbmVkJykge1xuICAgICAgICAgICAgICAgIGN1cnJlbnRQcm9wID0gcDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgIHJldHVybiB1bmRlZmluZWQ7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIGN1cnJlbnRQcm9wO1xuICAgIH0pO1xufVxuZXhwb3J0cy5wbHVjayA9IHBsdWNrO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9cGx1Y2suanMubWFwIiwiXCJ1c2Ugc3RyaWN0XCI7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5leHBvcnRzLnB1Ymxpc2ggPSB2b2lkIDA7XG52YXIgU3ViamVjdF8xID0gcmVxdWlyZShcIi4uL1N1YmplY3RcIik7XG52YXIgbXVsdGljYXN0XzEgPSByZXF1aXJlKFwiLi9tdWx0aWNhc3RcIik7XG52YXIgY29ubmVjdF8xID0gcmVxdWlyZShcIi4vY29ubmVjdFwiKTtcbmZ1bmN0aW9uIHB1Ymxpc2goc2VsZWN0b3IpIHtcbiAgICByZXR1cm4gc2VsZWN0b3IgPyBmdW5jdGlvbiAoc291cmNlKSB7IHJldHVybiBjb25uZWN0XzEuY29ubmVjdChzZWxlY3Rvcikoc291cmNlKTsgfSA6IGZ1bmN0aW9uIChzb3VyY2UpIHsgcmV0dXJuIG11bHRpY2FzdF8xLm11bHRpY2FzdChuZXcgU3ViamVjdF8xLlN1YmplY3QoKSkoc291cmNlKTsgfTtcbn1cbmV4cG9ydHMucHVibGlzaCA9IHB1Ymxpc2g7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1wdWJsaXNoLmpzLm1hcCIsIlwidXNlIHN0cmljdFwiO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuZXhwb3J0cy5wdWJsaXNoQmVoYXZpb3IgPSB2b2lkIDA7XG52YXIgQmVoYXZpb3JTdWJqZWN0XzEgPSByZXF1aXJlKFwiLi4vQmVoYXZpb3JTdWJqZWN0XCIpO1xudmFyIENvbm5lY3RhYmxlT2JzZXJ2YWJsZV8xID0gcmVxdWlyZShcIi4uL29ic2VydmFibGUvQ29ubmVjdGFibGVPYnNlcnZhYmxlXCIpO1xuZnVuY3Rpb24gcHVibGlzaEJlaGF2aW9yKGluaXRpYWxWYWx1ZSkge1xuICAgIHJldHVybiBmdW5jdGlvbiAoc291cmNlKSB7XG4gICAgICAgIHZhciBzdWJqZWN0ID0gbmV3IEJlaGF2aW9yU3ViamVjdF8xLkJlaGF2aW9yU3ViamVjdChpbml0aWFsVmFsdWUpO1xuICAgICAgICByZXR1cm4gbmV3IENvbm5lY3RhYmxlT2JzZXJ2YWJsZV8xLkNvbm5lY3RhYmxlT2JzZXJ2YWJsZShzb3VyY2UsIGZ1bmN0aW9uICgpIHsgcmV0dXJuIHN1YmplY3Q7IH0pO1xuICAgIH07XG59XG5leHBvcnRzLnB1Ymxpc2hCZWhhdmlvciA9IHB1Ymxpc2hCZWhhdmlvcjtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPXB1Ymxpc2hCZWhhdmlvci5qcy5tYXAiLCJcInVzZSBzdHJpY3RcIjtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmV4cG9ydHMucHVibGlzaExhc3QgPSB2b2lkIDA7XG52YXIgQXN5bmNTdWJqZWN0XzEgPSByZXF1aXJlKFwiLi4vQXN5bmNTdWJqZWN0XCIpO1xudmFyIENvbm5lY3RhYmxlT2JzZXJ2YWJsZV8xID0gcmVxdWlyZShcIi4uL29ic2VydmFibGUvQ29ubmVjdGFibGVPYnNlcnZhYmxlXCIpO1xuZnVuY3Rpb24gcHVibGlzaExhc3QoKSB7XG4gICAgcmV0dXJuIGZ1bmN0aW9uIChzb3VyY2UpIHtcbiAgICAgICAgdmFyIHN1YmplY3QgPSBuZXcgQXN5bmNTdWJqZWN0XzEuQXN5bmNTdWJqZWN0KCk7XG4gICAgICAgIHJldHVybiBuZXcgQ29ubmVjdGFibGVPYnNlcnZhYmxlXzEuQ29ubmVjdGFibGVPYnNlcnZhYmxlKHNvdXJjZSwgZnVuY3Rpb24gKCkgeyByZXR1cm4gc3ViamVjdDsgfSk7XG4gICAgfTtcbn1cbmV4cG9ydHMucHVibGlzaExhc3QgPSBwdWJsaXNoTGFzdDtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPXB1Ymxpc2hMYXN0LmpzLm1hcCIsIlwidXNlIHN0cmljdFwiO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuZXhwb3J0cy5wdWJsaXNoUmVwbGF5ID0gdm9pZCAwO1xudmFyIFJlcGxheVN1YmplY3RfMSA9IHJlcXVpcmUoXCIuLi9SZXBsYXlTdWJqZWN0XCIpO1xudmFyIG11bHRpY2FzdF8xID0gcmVxdWlyZShcIi4vbXVsdGljYXN0XCIpO1xudmFyIGlzRnVuY3Rpb25fMSA9IHJlcXVpcmUoXCIuLi91dGlsL2lzRnVuY3Rpb25cIik7XG5mdW5jdGlvbiBwdWJsaXNoUmVwbGF5KGJ1ZmZlclNpemUsIHdpbmRvd1RpbWUsIHNlbGVjdG9yT3JTY2hlZHVsZXIsIHRpbWVzdGFtcFByb3ZpZGVyKSB7XG4gICAgaWYgKHNlbGVjdG9yT3JTY2hlZHVsZXIgJiYgIWlzRnVuY3Rpb25fMS5pc0Z1bmN0aW9uKHNlbGVjdG9yT3JTY2hlZHVsZXIpKSB7XG4gICAgICAgIHRpbWVzdGFtcFByb3ZpZGVyID0gc2VsZWN0b3JPclNjaGVkdWxlcjtcbiAgICB9XG4gICAgdmFyIHNlbGVjdG9yID0gaXNGdW5jdGlvbl8xLmlzRnVuY3Rpb24oc2VsZWN0b3JPclNjaGVkdWxlcikgPyBzZWxlY3Rvck9yU2NoZWR1bGVyIDogdW5kZWZpbmVkO1xuICAgIHJldHVybiBmdW5jdGlvbiAoc291cmNlKSB7IHJldHVybiBtdWx0aWNhc3RfMS5tdWx0aWNhc3QobmV3IFJlcGxheVN1YmplY3RfMS5SZXBsYXlTdWJqZWN0KGJ1ZmZlclNpemUsIHdpbmRvd1RpbWUsIHRpbWVzdGFtcFByb3ZpZGVyKSwgc2VsZWN0b3IpKHNvdXJjZSk7IH07XG59XG5leHBvcnRzLnB1Ymxpc2hSZXBsYXkgPSBwdWJsaXNoUmVwbGF5O1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9cHVibGlzaFJlcGxheS5qcy5tYXAiLCJcInVzZSBzdHJpY3RcIjtcbnZhciBfX3JlYWQgPSAodGhpcyAmJiB0aGlzLl9fcmVhZCkgfHwgZnVuY3Rpb24gKG8sIG4pIHtcbiAgICB2YXIgbSA9IHR5cGVvZiBTeW1ib2wgPT09IFwiZnVuY3Rpb25cIiAmJiBvW1N5bWJvbC5pdGVyYXRvcl07XG4gICAgaWYgKCFtKSByZXR1cm4gbztcbiAgICB2YXIgaSA9IG0uY2FsbChvKSwgciwgYXIgPSBbXSwgZTtcbiAgICB0cnkge1xuICAgICAgICB3aGlsZSAoKG4gPT09IHZvaWQgMCB8fCBuLS0gPiAwKSAmJiAhKHIgPSBpLm5leHQoKSkuZG9uZSkgYXIucHVzaChyLnZhbHVlKTtcbiAgICB9XG4gICAgY2F0Y2ggKGVycm9yKSB7IGUgPSB7IGVycm9yOiBlcnJvciB9OyB9XG4gICAgZmluYWxseSB7XG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgICBpZiAociAmJiAhci5kb25lICYmIChtID0gaVtcInJldHVyblwiXSkpIG0uY2FsbChpKTtcbiAgICAgICAgfVxuICAgICAgICBmaW5hbGx5IHsgaWYgKGUpIHRocm93IGUuZXJyb3I7IH1cbiAgICB9XG4gICAgcmV0dXJuIGFyO1xufTtcbnZhciBfX3NwcmVhZEFycmF5ID0gKHRoaXMgJiYgdGhpcy5fX3NwcmVhZEFycmF5KSB8fCBmdW5jdGlvbiAodG8sIGZyb20pIHtcbiAgICBmb3IgKHZhciBpID0gMCwgaWwgPSBmcm9tLmxlbmd0aCwgaiA9IHRvLmxlbmd0aDsgaSA8IGlsOyBpKyssIGorKylcbiAgICAgICAgdG9bal0gPSBmcm9tW2ldO1xuICAgIHJldHVybiB0bztcbn07XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5leHBvcnRzLnJhY2VXaXRoID0gdm9pZCAwO1xudmFyIHJhY2VfMSA9IHJlcXVpcmUoXCIuLi9vYnNlcnZhYmxlL3JhY2VcIik7XG52YXIgbGlmdF8xID0gcmVxdWlyZShcIi4uL3V0aWwvbGlmdFwiKTtcbnZhciBpZGVudGl0eV8xID0gcmVxdWlyZShcIi4uL3V0aWwvaWRlbnRpdHlcIik7XG5mdW5jdGlvbiByYWNlV2l0aCgpIHtcbiAgICB2YXIgb3RoZXJTb3VyY2VzID0gW107XG4gICAgZm9yICh2YXIgX2kgPSAwOyBfaSA8IGFyZ3VtZW50cy5sZW5ndGg7IF9pKyspIHtcbiAgICAgICAgb3RoZXJTb3VyY2VzW19pXSA9IGFyZ3VtZW50c1tfaV07XG4gICAgfVxuICAgIHJldHVybiAhb3RoZXJTb3VyY2VzLmxlbmd0aFxuICAgICAgICA/IGlkZW50aXR5XzEuaWRlbnRpdHlcbiAgICAgICAgOiBsaWZ0XzEub3BlcmF0ZShmdW5jdGlvbiAoc291cmNlLCBzdWJzY3JpYmVyKSB7XG4gICAgICAgICAgICByYWNlXzEucmFjZUluaXQoX19zcHJlYWRBcnJheShbc291cmNlXSwgX19yZWFkKG90aGVyU291cmNlcykpKShzdWJzY3JpYmVyKTtcbiAgICAgICAgfSk7XG59XG5leHBvcnRzLnJhY2VXaXRoID0gcmFjZVdpdGg7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1yYWNlV2l0aC5qcy5tYXAiLCJcInVzZSBzdHJpY3RcIjtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmV4cG9ydHMucmVkdWNlID0gdm9pZCAwO1xudmFyIHNjYW5JbnRlcm5hbHNfMSA9IHJlcXVpcmUoXCIuL3NjYW5JbnRlcm5hbHNcIik7XG52YXIgbGlmdF8xID0gcmVxdWlyZShcIi4uL3V0aWwvbGlmdFwiKTtcbmZ1bmN0aW9uIHJlZHVjZShhY2N1bXVsYXRvciwgc2VlZCkge1xuICAgIHJldHVybiBsaWZ0XzEub3BlcmF0ZShzY2FuSW50ZXJuYWxzXzEuc2NhbkludGVybmFscyhhY2N1bXVsYXRvciwgc2VlZCwgYXJndW1lbnRzLmxlbmd0aCA+PSAyLCBmYWxzZSwgdHJ1ZSkpO1xufVxuZXhwb3J0cy5yZWR1Y2UgPSByZWR1Y2U7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1yZWR1Y2UuanMubWFwIiwiXCJ1c2Ugc3RyaWN0XCI7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5leHBvcnRzLnJlZkNvdW50ID0gdm9pZCAwO1xudmFyIGxpZnRfMSA9IHJlcXVpcmUoXCIuLi91dGlsL2xpZnRcIik7XG52YXIgT3BlcmF0b3JTdWJzY3JpYmVyXzEgPSByZXF1aXJlKFwiLi9PcGVyYXRvclN1YnNjcmliZXJcIik7XG5mdW5jdGlvbiByZWZDb3VudCgpIHtcbiAgICByZXR1cm4gbGlmdF8xLm9wZXJhdGUoZnVuY3Rpb24gKHNvdXJjZSwgc3Vic2NyaWJlcikge1xuICAgICAgICB2YXIgY29ubmVjdGlvbiA9IG51bGw7XG4gICAgICAgIHNvdXJjZS5fcmVmQ291bnQrKztcbiAgICAgICAgdmFyIHJlZkNvdW50ZXIgPSBPcGVyYXRvclN1YnNjcmliZXJfMS5jcmVhdGVPcGVyYXRvclN1YnNjcmliZXIoc3Vic2NyaWJlciwgdW5kZWZpbmVkLCB1bmRlZmluZWQsIHVuZGVmaW5lZCwgZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgaWYgKCFzb3VyY2UgfHwgc291cmNlLl9yZWZDb3VudCA8PSAwIHx8IDAgPCAtLXNvdXJjZS5fcmVmQ291bnQpIHtcbiAgICAgICAgICAgICAgICBjb25uZWN0aW9uID0gbnVsbDtcbiAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICB2YXIgc2hhcmVkQ29ubmVjdGlvbiA9IHNvdXJjZS5fY29ubmVjdGlvbjtcbiAgICAgICAgICAgIHZhciBjb25uID0gY29ubmVjdGlvbjtcbiAgICAgICAgICAgIGNvbm5lY3Rpb24gPSBudWxsO1xuICAgICAgICAgICAgaWYgKHNoYXJlZENvbm5lY3Rpb24gJiYgKCFjb25uIHx8IHNoYXJlZENvbm5lY3Rpb24gPT09IGNvbm4pKSB7XG4gICAgICAgICAgICAgICAgc2hhcmVkQ29ubmVjdGlvbi51bnN1YnNjcmliZSgpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgc3Vic2NyaWJlci51bnN1YnNjcmliZSgpO1xuICAgICAgICB9KTtcbiAgICAgICAgc291cmNlLnN1YnNjcmliZShyZWZDb3VudGVyKTtcbiAgICAgICAgaWYgKCFyZWZDb3VudGVyLmNsb3NlZCkge1xuICAgICAgICAgICAgY29ubmVjdGlvbiA9IHNvdXJjZS5jb25uZWN0KCk7XG4gICAgICAgIH1cbiAgICB9KTtcbn1cbmV4cG9ydHMucmVmQ291bnQgPSByZWZDb3VudDtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPXJlZkNvdW50LmpzLm1hcCIsIlwidXNlIHN0cmljdFwiO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuZXhwb3J0cy5yZXBlYXQgPSB2b2lkIDA7XG52YXIgZW1wdHlfMSA9IHJlcXVpcmUoXCIuLi9vYnNlcnZhYmxlL2VtcHR5XCIpO1xudmFyIGxpZnRfMSA9IHJlcXVpcmUoXCIuLi91dGlsL2xpZnRcIik7XG52YXIgT3BlcmF0b3JTdWJzY3JpYmVyXzEgPSByZXF1aXJlKFwiLi9PcGVyYXRvclN1YnNjcmliZXJcIik7XG52YXIgaW5uZXJGcm9tXzEgPSByZXF1aXJlKFwiLi4vb2JzZXJ2YWJsZS9pbm5lckZyb21cIik7XG52YXIgdGltZXJfMSA9IHJlcXVpcmUoXCIuLi9vYnNlcnZhYmxlL3RpbWVyXCIpO1xuZnVuY3Rpb24gcmVwZWF0KGNvdW50T3JDb25maWcpIHtcbiAgICB2YXIgX2E7XG4gICAgdmFyIGNvdW50ID0gSW5maW5pdHk7XG4gICAgdmFyIGRlbGF5O1xuICAgIGlmIChjb3VudE9yQ29uZmlnICE9IG51bGwpIHtcbiAgICAgICAgaWYgKHR5cGVvZiBjb3VudE9yQ29uZmlnID09PSAnb2JqZWN0Jykge1xuICAgICAgICAgICAgKF9hID0gY291bnRPckNvbmZpZy5jb3VudCwgY291bnQgPSBfYSA9PT0gdm9pZCAwID8gSW5maW5pdHkgOiBfYSwgZGVsYXkgPSBjb3VudE9yQ29uZmlnLmRlbGF5KTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIGNvdW50ID0gY291bnRPckNvbmZpZztcbiAgICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gY291bnQgPD0gMFxuICAgICAgICA/IGZ1bmN0aW9uICgpIHsgcmV0dXJuIGVtcHR5XzEuRU1QVFk7IH1cbiAgICAgICAgOiBsaWZ0XzEub3BlcmF0ZShmdW5jdGlvbiAoc291cmNlLCBzdWJzY3JpYmVyKSB7XG4gICAgICAgICAgICB2YXIgc29GYXIgPSAwO1xuICAgICAgICAgICAgdmFyIHNvdXJjZVN1YjtcbiAgICAgICAgICAgIHZhciByZXN1YnNjcmliZSA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICBzb3VyY2VTdWIgPT09IG51bGwgfHwgc291cmNlU3ViID09PSB2b2lkIDAgPyB2b2lkIDAgOiBzb3VyY2VTdWIudW5zdWJzY3JpYmUoKTtcbiAgICAgICAgICAgICAgICBzb3VyY2VTdWIgPSBudWxsO1xuICAgICAgICAgICAgICAgIGlmIChkZWxheSAhPSBudWxsKSB7XG4gICAgICAgICAgICAgICAgICAgIHZhciBub3RpZmllciA9IHR5cGVvZiBkZWxheSA9PT0gJ251bWJlcicgPyB0aW1lcl8xLnRpbWVyKGRlbGF5KSA6IGlubmVyRnJvbV8xLmlubmVyRnJvbShkZWxheShzb0ZhcikpO1xuICAgICAgICAgICAgICAgICAgICB2YXIgbm90aWZpZXJTdWJzY3JpYmVyXzEgPSBPcGVyYXRvclN1YnNjcmliZXJfMS5jcmVhdGVPcGVyYXRvclN1YnNjcmliZXIoc3Vic2NyaWJlciwgZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgbm90aWZpZXJTdWJzY3JpYmVyXzEudW5zdWJzY3JpYmUoKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIHN1YnNjcmliZVRvU291cmNlKCk7XG4gICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgICAgICBub3RpZmllci5zdWJzY3JpYmUobm90aWZpZXJTdWJzY3JpYmVyXzEpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgc3Vic2NyaWJlVG9Tb3VyY2UoKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9O1xuICAgICAgICAgICAgdmFyIHN1YnNjcmliZVRvU291cmNlID0gZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgIHZhciBzeW5jVW5zdWIgPSBmYWxzZTtcbiAgICAgICAgICAgICAgICBzb3VyY2VTdWIgPSBzb3VyY2Uuc3Vic2NyaWJlKE9wZXJhdG9yU3Vic2NyaWJlcl8xLmNyZWF0ZU9wZXJhdG9yU3Vic2NyaWJlcihzdWJzY3JpYmVyLCB1bmRlZmluZWQsIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICAgICAgaWYgKCsrc29GYXIgPCBjb3VudCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHNvdXJjZVN1Yikge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJlc3Vic2NyaWJlKCk7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBzeW5jVW5zdWIgPSB0cnVlO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAgICAgc3Vic2NyaWJlci5jb21wbGV0ZSgpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfSkpO1xuICAgICAgICAgICAgICAgIGlmIChzeW5jVW5zdWIpIHtcbiAgICAgICAgICAgICAgICAgICAgcmVzdWJzY3JpYmUoKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9O1xuICAgICAgICAgICAgc3Vic2NyaWJlVG9Tb3VyY2UoKTtcbiAgICAgICAgfSk7XG59XG5leHBvcnRzLnJlcGVhdCA9IHJlcGVhdDtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPXJlcGVhdC5qcy5tYXAiLCJcInVzZSBzdHJpY3RcIjtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmV4cG9ydHMucmVwZWF0V2hlbiA9IHZvaWQgMDtcbnZhciBpbm5lckZyb21fMSA9IHJlcXVpcmUoXCIuLi9vYnNlcnZhYmxlL2lubmVyRnJvbVwiKTtcbnZhciBTdWJqZWN0XzEgPSByZXF1aXJlKFwiLi4vU3ViamVjdFwiKTtcbnZhciBsaWZ0XzEgPSByZXF1aXJlKFwiLi4vdXRpbC9saWZ0XCIpO1xudmFyIE9wZXJhdG9yU3Vic2NyaWJlcl8xID0gcmVxdWlyZShcIi4vT3BlcmF0b3JTdWJzY3JpYmVyXCIpO1xuZnVuY3Rpb24gcmVwZWF0V2hlbihub3RpZmllcikge1xuICAgIHJldHVybiBsaWZ0XzEub3BlcmF0ZShmdW5jdGlvbiAoc291cmNlLCBzdWJzY3JpYmVyKSB7XG4gICAgICAgIHZhciBpbm5lclN1YjtcbiAgICAgICAgdmFyIHN5bmNSZXN1YiA9IGZhbHNlO1xuICAgICAgICB2YXIgY29tcGxldGlvbnMkO1xuICAgICAgICB2YXIgaXNOb3RpZmllckNvbXBsZXRlID0gZmFsc2U7XG4gICAgICAgIHZhciBpc01haW5Db21wbGV0ZSA9IGZhbHNlO1xuICAgICAgICB2YXIgY2hlY2tDb21wbGV0ZSA9IGZ1bmN0aW9uICgpIHsgcmV0dXJuIGlzTWFpbkNvbXBsZXRlICYmIGlzTm90aWZpZXJDb21wbGV0ZSAmJiAoc3Vic2NyaWJlci5jb21wbGV0ZSgpLCB0cnVlKTsgfTtcbiAgICAgICAgdmFyIGdldENvbXBsZXRpb25TdWJqZWN0ID0gZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgaWYgKCFjb21wbGV0aW9ucyQpIHtcbiAgICAgICAgICAgICAgICBjb21wbGV0aW9ucyQgPSBuZXcgU3ViamVjdF8xLlN1YmplY3QoKTtcbiAgICAgICAgICAgICAgICBpbm5lckZyb21fMS5pbm5lckZyb20obm90aWZpZXIoY29tcGxldGlvbnMkKSkuc3Vic2NyaWJlKE9wZXJhdG9yU3Vic2NyaWJlcl8xLmNyZWF0ZU9wZXJhdG9yU3Vic2NyaWJlcihzdWJzY3JpYmVyLCBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgICAgIGlmIChpbm5lclN1Yikge1xuICAgICAgICAgICAgICAgICAgICAgICAgc3Vic2NyaWJlRm9yUmVwZWF0V2hlbigpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAgICAgc3luY1Jlc3ViID0gdHJ1ZTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH0sIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICAgICAgaXNOb3RpZmllckNvbXBsZXRlID0gdHJ1ZTtcbiAgICAgICAgICAgICAgICAgICAgY2hlY2tDb21wbGV0ZSgpO1xuICAgICAgICAgICAgICAgIH0pKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybiBjb21wbGV0aW9ucyQ7XG4gICAgICAgIH07XG4gICAgICAgIHZhciBzdWJzY3JpYmVGb3JSZXBlYXRXaGVuID0gZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgaXNNYWluQ29tcGxldGUgPSBmYWxzZTtcbiAgICAgICAgICAgIGlubmVyU3ViID0gc291cmNlLnN1YnNjcmliZShPcGVyYXRvclN1YnNjcmliZXJfMS5jcmVhdGVPcGVyYXRvclN1YnNjcmliZXIoc3Vic2NyaWJlciwgdW5kZWZpbmVkLCBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgaXNNYWluQ29tcGxldGUgPSB0cnVlO1xuICAgICAgICAgICAgICAgICFjaGVja0NvbXBsZXRlKCkgJiYgZ2V0Q29tcGxldGlvblN1YmplY3QoKS5uZXh0KCk7XG4gICAgICAgICAgICB9KSk7XG4gICAgICAgICAgICBpZiAoc3luY1Jlc3ViKSB7XG4gICAgICAgICAgICAgICAgaW5uZXJTdWIudW5zdWJzY3JpYmUoKTtcbiAgICAgICAgICAgICAgICBpbm5lclN1YiA9IG51bGw7XG4gICAgICAgICAgICAgICAgc3luY1Jlc3ViID0gZmFsc2U7XG4gICAgICAgICAgICAgICAgc3Vic2NyaWJlRm9yUmVwZWF0V2hlbigpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9O1xuICAgICAgICBzdWJzY3JpYmVGb3JSZXBlYXRXaGVuKCk7XG4gICAgfSk7XG59XG5leHBvcnRzLnJlcGVhdFdoZW4gPSByZXBlYXRXaGVuO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9cmVwZWF0V2hlbi5qcy5tYXAiLCJcInVzZSBzdHJpY3RcIjtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmV4cG9ydHMucmV0cnkgPSB2b2lkIDA7XG52YXIgbGlmdF8xID0gcmVxdWlyZShcIi4uL3V0aWwvbGlmdFwiKTtcbnZhciBPcGVyYXRvclN1YnNjcmliZXJfMSA9IHJlcXVpcmUoXCIuL09wZXJhdG9yU3Vic2NyaWJlclwiKTtcbnZhciBpZGVudGl0eV8xID0gcmVxdWlyZShcIi4uL3V0aWwvaWRlbnRpdHlcIik7XG52YXIgdGltZXJfMSA9IHJlcXVpcmUoXCIuLi9vYnNlcnZhYmxlL3RpbWVyXCIpO1xudmFyIGlubmVyRnJvbV8xID0gcmVxdWlyZShcIi4uL29ic2VydmFibGUvaW5uZXJGcm9tXCIpO1xuZnVuY3Rpb24gcmV0cnkoY29uZmlnT3JDb3VudCkge1xuICAgIGlmIChjb25maWdPckNvdW50ID09PSB2b2lkIDApIHsgY29uZmlnT3JDb3VudCA9IEluZmluaXR5OyB9XG4gICAgdmFyIGNvbmZpZztcbiAgICBpZiAoY29uZmlnT3JDb3VudCAmJiB0eXBlb2YgY29uZmlnT3JDb3VudCA9PT0gJ29iamVjdCcpIHtcbiAgICAgICAgY29uZmlnID0gY29uZmlnT3JDb3VudDtcbiAgICB9XG4gICAgZWxzZSB7XG4gICAgICAgIGNvbmZpZyA9IHtcbiAgICAgICAgICAgIGNvdW50OiBjb25maWdPckNvdW50LFxuICAgICAgICB9O1xuICAgIH1cbiAgICB2YXIgX2EgPSBjb25maWcuY291bnQsIGNvdW50ID0gX2EgPT09IHZvaWQgMCA/IEluZmluaXR5IDogX2EsIGRlbGF5ID0gY29uZmlnLmRlbGF5LCBfYiA9IGNvbmZpZy5yZXNldE9uU3VjY2VzcywgcmVzZXRPblN1Y2Nlc3MgPSBfYiA9PT0gdm9pZCAwID8gZmFsc2UgOiBfYjtcbiAgICByZXR1cm4gY291bnQgPD0gMFxuICAgICAgICA/IGlkZW50aXR5XzEuaWRlbnRpdHlcbiAgICAgICAgOiBsaWZ0XzEub3BlcmF0ZShmdW5jdGlvbiAoc291cmNlLCBzdWJzY3JpYmVyKSB7XG4gICAgICAgICAgICB2YXIgc29GYXIgPSAwO1xuICAgICAgICAgICAgdmFyIGlubmVyU3ViO1xuICAgICAgICAgICAgdmFyIHN1YnNjcmliZUZvclJldHJ5ID0gZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgIHZhciBzeW5jVW5zdWIgPSBmYWxzZTtcbiAgICAgICAgICAgICAgICBpbm5lclN1YiA9IHNvdXJjZS5zdWJzY3JpYmUoT3BlcmF0b3JTdWJzY3JpYmVyXzEuY3JlYXRlT3BlcmF0b3JTdWJzY3JpYmVyKHN1YnNjcmliZXIsIGZ1bmN0aW9uICh2YWx1ZSkge1xuICAgICAgICAgICAgICAgICAgICBpZiAocmVzZXRPblN1Y2Nlc3MpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHNvRmFyID0gMDtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICBzdWJzY3JpYmVyLm5leHQodmFsdWUpO1xuICAgICAgICAgICAgICAgIH0sIHVuZGVmaW5lZCwgZnVuY3Rpb24gKGVycikge1xuICAgICAgICAgICAgICAgICAgICBpZiAoc29GYXIrKyA8IGNvdW50KSB7XG4gICAgICAgICAgICAgICAgICAgICAgICB2YXIgcmVzdWJfMSA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoaW5uZXJTdWIpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaW5uZXJTdWIudW5zdWJzY3JpYmUoKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaW5uZXJTdWIgPSBudWxsO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzdWJzY3JpYmVGb3JSZXRyeSgpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgc3luY1Vuc3ViID0gdHJ1ZTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICB9O1xuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGRlbGF5ICE9IG51bGwpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgbm90aWZpZXIgPSB0eXBlb2YgZGVsYXkgPT09ICdudW1iZXInID8gdGltZXJfMS50aW1lcihkZWxheSkgOiBpbm5lckZyb21fMS5pbm5lckZyb20oZGVsYXkoZXJyLCBzb0ZhcikpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhciBub3RpZmllclN1YnNjcmliZXJfMSA9IE9wZXJhdG9yU3Vic2NyaWJlcl8xLmNyZWF0ZU9wZXJhdG9yU3Vic2NyaWJlcihzdWJzY3JpYmVyLCBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG5vdGlmaWVyU3Vic2NyaWJlcl8xLnVuc3Vic2NyaWJlKCk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJlc3ViXzEoKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9LCBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHN1YnNjcmliZXIuY29tcGxldGUoKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBub3RpZmllci5zdWJzY3JpYmUobm90aWZpZXJTdWJzY3JpYmVyXzEpO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcmVzdWJfMSgpO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAgICAgc3Vic2NyaWJlci5lcnJvcihlcnIpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfSkpO1xuICAgICAgICAgICAgICAgIGlmIChzeW5jVW5zdWIpIHtcbiAgICAgICAgICAgICAgICAgICAgaW5uZXJTdWIudW5zdWJzY3JpYmUoKTtcbiAgICAgICAgICAgICAgICAgICAgaW5uZXJTdWIgPSBudWxsO1xuICAgICAgICAgICAgICAgICAgICBzdWJzY3JpYmVGb3JSZXRyeSgpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH07XG4gICAgICAgICAgICBzdWJzY3JpYmVGb3JSZXRyeSgpO1xuICAgICAgICB9KTtcbn1cbmV4cG9ydHMucmV0cnkgPSByZXRyeTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPXJldHJ5LmpzLm1hcCIsIlwidXNlIHN0cmljdFwiO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuZXhwb3J0cy5yZXRyeVdoZW4gPSB2b2lkIDA7XG52YXIgaW5uZXJGcm9tXzEgPSByZXF1aXJlKFwiLi4vb2JzZXJ2YWJsZS9pbm5lckZyb21cIik7XG52YXIgU3ViamVjdF8xID0gcmVxdWlyZShcIi4uL1N1YmplY3RcIik7XG52YXIgbGlmdF8xID0gcmVxdWlyZShcIi4uL3V0aWwvbGlmdFwiKTtcbnZhciBPcGVyYXRvclN1YnNjcmliZXJfMSA9IHJlcXVpcmUoXCIuL09wZXJhdG9yU3Vic2NyaWJlclwiKTtcbmZ1bmN0aW9uIHJldHJ5V2hlbihub3RpZmllcikge1xuICAgIHJldHVybiBsaWZ0XzEub3BlcmF0ZShmdW5jdGlvbiAoc291cmNlLCBzdWJzY3JpYmVyKSB7XG4gICAgICAgIHZhciBpbm5lclN1YjtcbiAgICAgICAgdmFyIHN5bmNSZXN1YiA9IGZhbHNlO1xuICAgICAgICB2YXIgZXJyb3JzJDtcbiAgICAgICAgdmFyIHN1YnNjcmliZUZvclJldHJ5V2hlbiA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIGlubmVyU3ViID0gc291cmNlLnN1YnNjcmliZShPcGVyYXRvclN1YnNjcmliZXJfMS5jcmVhdGVPcGVyYXRvclN1YnNjcmliZXIoc3Vic2NyaWJlciwgdW5kZWZpbmVkLCB1bmRlZmluZWQsIGZ1bmN0aW9uIChlcnIpIHtcbiAgICAgICAgICAgICAgICBpZiAoIWVycm9ycyQpIHtcbiAgICAgICAgICAgICAgICAgICAgZXJyb3JzJCA9IG5ldyBTdWJqZWN0XzEuU3ViamVjdCgpO1xuICAgICAgICAgICAgICAgICAgICBpbm5lckZyb21fMS5pbm5lckZyb20obm90aWZpZXIoZXJyb3JzJCkpLnN1YnNjcmliZShPcGVyYXRvclN1YnNjcmliZXJfMS5jcmVhdGVPcGVyYXRvclN1YnNjcmliZXIoc3Vic2NyaWJlciwgZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGlubmVyU3ViID8gc3Vic2NyaWJlRm9yUmV0cnlXaGVuKCkgOiAoc3luY1Jlc3ViID0gdHJ1ZSk7XG4gICAgICAgICAgICAgICAgICAgIH0pKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgaWYgKGVycm9ycyQpIHtcbiAgICAgICAgICAgICAgICAgICAgZXJyb3JzJC5uZXh0KGVycik7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSkpO1xuICAgICAgICAgICAgaWYgKHN5bmNSZXN1Yikge1xuICAgICAgICAgICAgICAgIGlubmVyU3ViLnVuc3Vic2NyaWJlKCk7XG4gICAgICAgICAgICAgICAgaW5uZXJTdWIgPSBudWxsO1xuICAgICAgICAgICAgICAgIHN5bmNSZXN1YiA9IGZhbHNlO1xuICAgICAgICAgICAgICAgIHN1YnNjcmliZUZvclJldHJ5V2hlbigpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9O1xuICAgICAgICBzdWJzY3JpYmVGb3JSZXRyeVdoZW4oKTtcbiAgICB9KTtcbn1cbmV4cG9ydHMucmV0cnlXaGVuID0gcmV0cnlXaGVuO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9cmV0cnlXaGVuLmpzLm1hcCIsIlwidXNlIHN0cmljdFwiO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuZXhwb3J0cy5zYW1wbGUgPSB2b2lkIDA7XG52YXIgaW5uZXJGcm9tXzEgPSByZXF1aXJlKFwiLi4vb2JzZXJ2YWJsZS9pbm5lckZyb21cIik7XG52YXIgbGlmdF8xID0gcmVxdWlyZShcIi4uL3V0aWwvbGlmdFwiKTtcbnZhciBub29wXzEgPSByZXF1aXJlKFwiLi4vdXRpbC9ub29wXCIpO1xudmFyIE9wZXJhdG9yU3Vic2NyaWJlcl8xID0gcmVxdWlyZShcIi4vT3BlcmF0b3JTdWJzY3JpYmVyXCIpO1xuZnVuY3Rpb24gc2FtcGxlKG5vdGlmaWVyKSB7XG4gICAgcmV0dXJuIGxpZnRfMS5vcGVyYXRlKGZ1bmN0aW9uIChzb3VyY2UsIHN1YnNjcmliZXIpIHtcbiAgICAgICAgdmFyIGhhc1ZhbHVlID0gZmFsc2U7XG4gICAgICAgIHZhciBsYXN0VmFsdWUgPSBudWxsO1xuICAgICAgICBzb3VyY2Uuc3Vic2NyaWJlKE9wZXJhdG9yU3Vic2NyaWJlcl8xLmNyZWF0ZU9wZXJhdG9yU3Vic2NyaWJlcihzdWJzY3JpYmVyLCBmdW5jdGlvbiAodmFsdWUpIHtcbiAgICAgICAgICAgIGhhc1ZhbHVlID0gdHJ1ZTtcbiAgICAgICAgICAgIGxhc3RWYWx1ZSA9IHZhbHVlO1xuICAgICAgICB9KSk7XG4gICAgICAgIGlubmVyRnJvbV8xLmlubmVyRnJvbShub3RpZmllcikuc3Vic2NyaWJlKE9wZXJhdG9yU3Vic2NyaWJlcl8xLmNyZWF0ZU9wZXJhdG9yU3Vic2NyaWJlcihzdWJzY3JpYmVyLCBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICBpZiAoaGFzVmFsdWUpIHtcbiAgICAgICAgICAgICAgICBoYXNWYWx1ZSA9IGZhbHNlO1xuICAgICAgICAgICAgICAgIHZhciB2YWx1ZSA9IGxhc3RWYWx1ZTtcbiAgICAgICAgICAgICAgICBsYXN0VmFsdWUgPSBudWxsO1xuICAgICAgICAgICAgICAgIHN1YnNjcmliZXIubmV4dCh2YWx1ZSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0sIG5vb3BfMS5ub29wKSk7XG4gICAgfSk7XG59XG5leHBvcnRzLnNhbXBsZSA9IHNhbXBsZTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPXNhbXBsZS5qcy5tYXAiLCJcInVzZSBzdHJpY3RcIjtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmV4cG9ydHMuc2FtcGxlVGltZSA9IHZvaWQgMDtcbnZhciBhc3luY18xID0gcmVxdWlyZShcIi4uL3NjaGVkdWxlci9hc3luY1wiKTtcbnZhciBzYW1wbGVfMSA9IHJlcXVpcmUoXCIuL3NhbXBsZVwiKTtcbnZhciBpbnRlcnZhbF8xID0gcmVxdWlyZShcIi4uL29ic2VydmFibGUvaW50ZXJ2YWxcIik7XG5mdW5jdGlvbiBzYW1wbGVUaW1lKHBlcmlvZCwgc2NoZWR1bGVyKSB7XG4gICAgaWYgKHNjaGVkdWxlciA9PT0gdm9pZCAwKSB7IHNjaGVkdWxlciA9IGFzeW5jXzEuYXN5bmNTY2hlZHVsZXI7IH1cbiAgICByZXR1cm4gc2FtcGxlXzEuc2FtcGxlKGludGVydmFsXzEuaW50ZXJ2YWwocGVyaW9kLCBzY2hlZHVsZXIpKTtcbn1cbmV4cG9ydHMuc2FtcGxlVGltZSA9IHNhbXBsZVRpbWU7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1zYW1wbGVUaW1lLmpzLm1hcCIsIlwidXNlIHN0cmljdFwiO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuZXhwb3J0cy5zY2FuID0gdm9pZCAwO1xudmFyIGxpZnRfMSA9IHJlcXVpcmUoXCIuLi91dGlsL2xpZnRcIik7XG52YXIgc2NhbkludGVybmFsc18xID0gcmVxdWlyZShcIi4vc2NhbkludGVybmFsc1wiKTtcbmZ1bmN0aW9uIHNjYW4oYWNjdW11bGF0b3IsIHNlZWQpIHtcbiAgICByZXR1cm4gbGlmdF8xLm9wZXJhdGUoc2NhbkludGVybmFsc18xLnNjYW5JbnRlcm5hbHMoYWNjdW11bGF0b3IsIHNlZWQsIGFyZ3VtZW50cy5sZW5ndGggPj0gMiwgdHJ1ZSkpO1xufVxuZXhwb3J0cy5zY2FuID0gc2Nhbjtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPXNjYW4uanMubWFwIiwiXCJ1c2Ugc3RyaWN0XCI7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5leHBvcnRzLnNjYW5JbnRlcm5hbHMgPSB2b2lkIDA7XG52YXIgT3BlcmF0b3JTdWJzY3JpYmVyXzEgPSByZXF1aXJlKFwiLi9PcGVyYXRvclN1YnNjcmliZXJcIik7XG5mdW5jdGlvbiBzY2FuSW50ZXJuYWxzKGFjY3VtdWxhdG9yLCBzZWVkLCBoYXNTZWVkLCBlbWl0T25OZXh0LCBlbWl0QmVmb3JlQ29tcGxldGUpIHtcbiAgICByZXR1cm4gZnVuY3Rpb24gKHNvdXJjZSwgc3Vic2NyaWJlcikge1xuICAgICAgICB2YXIgaGFzU3RhdGUgPSBoYXNTZWVkO1xuICAgICAgICB2YXIgc3RhdGUgPSBzZWVkO1xuICAgICAgICB2YXIgaW5kZXggPSAwO1xuICAgICAgICBzb3VyY2Uuc3Vic2NyaWJlKE9wZXJhdG9yU3Vic2NyaWJlcl8xLmNyZWF0ZU9wZXJhdG9yU3Vic2NyaWJlcihzdWJzY3JpYmVyLCBmdW5jdGlvbiAodmFsdWUpIHtcbiAgICAgICAgICAgIHZhciBpID0gaW5kZXgrKztcbiAgICAgICAgICAgIHN0YXRlID0gaGFzU3RhdGVcbiAgICAgICAgICAgICAgICA/XG4gICAgICAgICAgICAgICAgICAgIGFjY3VtdWxhdG9yKHN0YXRlLCB2YWx1ZSwgaSlcbiAgICAgICAgICAgICAgICA6XG4gICAgICAgICAgICAgICAgICAgICgoaGFzU3RhdGUgPSB0cnVlKSwgdmFsdWUpO1xuICAgICAgICAgICAgZW1pdE9uTmV4dCAmJiBzdWJzY3JpYmVyLm5leHQoc3RhdGUpO1xuICAgICAgICB9LCBlbWl0QmVmb3JlQ29tcGxldGUgJiZcbiAgICAgICAgICAgIChmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgaGFzU3RhdGUgJiYgc3Vic2NyaWJlci5uZXh0KHN0YXRlKTtcbiAgICAgICAgICAgICAgICBzdWJzY3JpYmVyLmNvbXBsZXRlKCk7XG4gICAgICAgICAgICB9KSkpO1xuICAgIH07XG59XG5leHBvcnRzLnNjYW5JbnRlcm5hbHMgPSBzY2FuSW50ZXJuYWxzO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9c2NhbkludGVybmFscy5qcy5tYXAiLCJcInVzZSBzdHJpY3RcIjtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmV4cG9ydHMuc2VxdWVuY2VFcXVhbCA9IHZvaWQgMDtcbnZhciBsaWZ0XzEgPSByZXF1aXJlKFwiLi4vdXRpbC9saWZ0XCIpO1xudmFyIE9wZXJhdG9yU3Vic2NyaWJlcl8xID0gcmVxdWlyZShcIi4vT3BlcmF0b3JTdWJzY3JpYmVyXCIpO1xudmFyIGlubmVyRnJvbV8xID0gcmVxdWlyZShcIi4uL29ic2VydmFibGUvaW5uZXJGcm9tXCIpO1xuZnVuY3Rpb24gc2VxdWVuY2VFcXVhbChjb21wYXJlVG8sIGNvbXBhcmF0b3IpIHtcbiAgICBpZiAoY29tcGFyYXRvciA9PT0gdm9pZCAwKSB7IGNvbXBhcmF0b3IgPSBmdW5jdGlvbiAoYSwgYikgeyByZXR1cm4gYSA9PT0gYjsgfTsgfVxuICAgIHJldHVybiBsaWZ0XzEub3BlcmF0ZShmdW5jdGlvbiAoc291cmNlLCBzdWJzY3JpYmVyKSB7XG4gICAgICAgIHZhciBhU3RhdGUgPSBjcmVhdGVTdGF0ZSgpO1xuICAgICAgICB2YXIgYlN0YXRlID0gY3JlYXRlU3RhdGUoKTtcbiAgICAgICAgdmFyIGVtaXQgPSBmdW5jdGlvbiAoaXNFcXVhbCkge1xuICAgICAgICAgICAgc3Vic2NyaWJlci5uZXh0KGlzRXF1YWwpO1xuICAgICAgICAgICAgc3Vic2NyaWJlci5jb21wbGV0ZSgpO1xuICAgICAgICB9O1xuICAgICAgICB2YXIgY3JlYXRlU3Vic2NyaWJlciA9IGZ1bmN0aW9uIChzZWxmU3RhdGUsIG90aGVyU3RhdGUpIHtcbiAgICAgICAgICAgIHZhciBzZXF1ZW5jZUVxdWFsU3Vic2NyaWJlciA9IE9wZXJhdG9yU3Vic2NyaWJlcl8xLmNyZWF0ZU9wZXJhdG9yU3Vic2NyaWJlcihzdWJzY3JpYmVyLCBmdW5jdGlvbiAoYSkge1xuICAgICAgICAgICAgICAgIHZhciBidWZmZXIgPSBvdGhlclN0YXRlLmJ1ZmZlciwgY29tcGxldGUgPSBvdGhlclN0YXRlLmNvbXBsZXRlO1xuICAgICAgICAgICAgICAgIGlmIChidWZmZXIubGVuZ3RoID09PSAwKSB7XG4gICAgICAgICAgICAgICAgICAgIGNvbXBsZXRlID8gZW1pdChmYWxzZSkgOiBzZWxmU3RhdGUuYnVmZmVyLnB1c2goYSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAhY29tcGFyYXRvcihhLCBidWZmZXIuc2hpZnQoKSkgJiYgZW1pdChmYWxzZSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSwgZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgIHNlbGZTdGF0ZS5jb21wbGV0ZSA9IHRydWU7XG4gICAgICAgICAgICAgICAgdmFyIGNvbXBsZXRlID0gb3RoZXJTdGF0ZS5jb21wbGV0ZSwgYnVmZmVyID0gb3RoZXJTdGF0ZS5idWZmZXI7XG4gICAgICAgICAgICAgICAgY29tcGxldGUgJiYgZW1pdChidWZmZXIubGVuZ3RoID09PSAwKTtcbiAgICAgICAgICAgICAgICBzZXF1ZW5jZUVxdWFsU3Vic2NyaWJlciA9PT0gbnVsbCB8fCBzZXF1ZW5jZUVxdWFsU3Vic2NyaWJlciA9PT0gdm9pZCAwID8gdm9pZCAwIDogc2VxdWVuY2VFcXVhbFN1YnNjcmliZXIudW5zdWJzY3JpYmUoKTtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgcmV0dXJuIHNlcXVlbmNlRXF1YWxTdWJzY3JpYmVyO1xuICAgICAgICB9O1xuICAgICAgICBzb3VyY2Uuc3Vic2NyaWJlKGNyZWF0ZVN1YnNjcmliZXIoYVN0YXRlLCBiU3RhdGUpKTtcbiAgICAgICAgaW5uZXJGcm9tXzEuaW5uZXJGcm9tKGNvbXBhcmVUbykuc3Vic2NyaWJlKGNyZWF0ZVN1YnNjcmliZXIoYlN0YXRlLCBhU3RhdGUpKTtcbiAgICB9KTtcbn1cbmV4cG9ydHMuc2VxdWVuY2VFcXVhbCA9IHNlcXVlbmNlRXF1YWw7XG5mdW5jdGlvbiBjcmVhdGVTdGF0ZSgpIHtcbiAgICByZXR1cm4ge1xuICAgICAgICBidWZmZXI6IFtdLFxuICAgICAgICBjb21wbGV0ZTogZmFsc2UsXG4gICAgfTtcbn1cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPXNlcXVlbmNlRXF1YWwuanMubWFwIiwiXCJ1c2Ugc3RyaWN0XCI7XG52YXIgX19yZWFkID0gKHRoaXMgJiYgdGhpcy5fX3JlYWQpIHx8IGZ1bmN0aW9uIChvLCBuKSB7XG4gICAgdmFyIG0gPSB0eXBlb2YgU3ltYm9sID09PSBcImZ1bmN0aW9uXCIgJiYgb1tTeW1ib2wuaXRlcmF0b3JdO1xuICAgIGlmICghbSkgcmV0dXJuIG87XG4gICAgdmFyIGkgPSBtLmNhbGwobyksIHIsIGFyID0gW10sIGU7XG4gICAgdHJ5IHtcbiAgICAgICAgd2hpbGUgKChuID09PSB2b2lkIDAgfHwgbi0tID4gMCkgJiYgIShyID0gaS5uZXh0KCkpLmRvbmUpIGFyLnB1c2goci52YWx1ZSk7XG4gICAgfVxuICAgIGNhdGNoIChlcnJvcikgeyBlID0geyBlcnJvcjogZXJyb3IgfTsgfVxuICAgIGZpbmFsbHkge1xuICAgICAgICB0cnkge1xuICAgICAgICAgICAgaWYgKHIgJiYgIXIuZG9uZSAmJiAobSA9IGlbXCJyZXR1cm5cIl0pKSBtLmNhbGwoaSk7XG4gICAgICAgIH1cbiAgICAgICAgZmluYWxseSB7IGlmIChlKSB0aHJvdyBlLmVycm9yOyB9XG4gICAgfVxuICAgIHJldHVybiBhcjtcbn07XG52YXIgX19zcHJlYWRBcnJheSA9ICh0aGlzICYmIHRoaXMuX19zcHJlYWRBcnJheSkgfHwgZnVuY3Rpb24gKHRvLCBmcm9tKSB7XG4gICAgZm9yICh2YXIgaSA9IDAsIGlsID0gZnJvbS5sZW5ndGgsIGogPSB0by5sZW5ndGg7IGkgPCBpbDsgaSsrLCBqKyspXG4gICAgICAgIHRvW2pdID0gZnJvbVtpXTtcbiAgICByZXR1cm4gdG87XG59O1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuZXhwb3J0cy5zaGFyZSA9IHZvaWQgMDtcbnZhciBpbm5lckZyb21fMSA9IHJlcXVpcmUoXCIuLi9vYnNlcnZhYmxlL2lubmVyRnJvbVwiKTtcbnZhciBTdWJqZWN0XzEgPSByZXF1aXJlKFwiLi4vU3ViamVjdFwiKTtcbnZhciBTdWJzY3JpYmVyXzEgPSByZXF1aXJlKFwiLi4vU3Vic2NyaWJlclwiKTtcbnZhciBsaWZ0XzEgPSByZXF1aXJlKFwiLi4vdXRpbC9saWZ0XCIpO1xuZnVuY3Rpb24gc2hhcmUob3B0aW9ucykge1xuICAgIGlmIChvcHRpb25zID09PSB2b2lkIDApIHsgb3B0aW9ucyA9IHt9OyB9XG4gICAgdmFyIF9hID0gb3B0aW9ucy5jb25uZWN0b3IsIGNvbm5lY3RvciA9IF9hID09PSB2b2lkIDAgPyBmdW5jdGlvbiAoKSB7IHJldHVybiBuZXcgU3ViamVjdF8xLlN1YmplY3QoKTsgfSA6IF9hLCBfYiA9IG9wdGlvbnMucmVzZXRPbkVycm9yLCByZXNldE9uRXJyb3IgPSBfYiA9PT0gdm9pZCAwID8gdHJ1ZSA6IF9iLCBfYyA9IG9wdGlvbnMucmVzZXRPbkNvbXBsZXRlLCByZXNldE9uQ29tcGxldGUgPSBfYyA9PT0gdm9pZCAwID8gdHJ1ZSA6IF9jLCBfZCA9IG9wdGlvbnMucmVzZXRPblJlZkNvdW50WmVybywgcmVzZXRPblJlZkNvdW50WmVybyA9IF9kID09PSB2b2lkIDAgPyB0cnVlIDogX2Q7XG4gICAgcmV0dXJuIGZ1bmN0aW9uICh3cmFwcGVyU291cmNlKSB7XG4gICAgICAgIHZhciBjb25uZWN0aW9uO1xuICAgICAgICB2YXIgcmVzZXRDb25uZWN0aW9uO1xuICAgICAgICB2YXIgc3ViamVjdDtcbiAgICAgICAgdmFyIHJlZkNvdW50ID0gMDtcbiAgICAgICAgdmFyIGhhc0NvbXBsZXRlZCA9IGZhbHNlO1xuICAgICAgICB2YXIgaGFzRXJyb3JlZCA9IGZhbHNlO1xuICAgICAgICB2YXIgY2FuY2VsUmVzZXQgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICByZXNldENvbm5lY3Rpb24gPT09IG51bGwgfHwgcmVzZXRDb25uZWN0aW9uID09PSB2b2lkIDAgPyB2b2lkIDAgOiByZXNldENvbm5lY3Rpb24udW5zdWJzY3JpYmUoKTtcbiAgICAgICAgICAgIHJlc2V0Q29ubmVjdGlvbiA9IHVuZGVmaW5lZDtcbiAgICAgICAgfTtcbiAgICAgICAgdmFyIHJlc2V0ID0gZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgY2FuY2VsUmVzZXQoKTtcbiAgICAgICAgICAgIGNvbm5lY3Rpb24gPSBzdWJqZWN0ID0gdW5kZWZpbmVkO1xuICAgICAgICAgICAgaGFzQ29tcGxldGVkID0gaGFzRXJyb3JlZCA9IGZhbHNlO1xuICAgICAgICB9O1xuICAgICAgICB2YXIgcmVzZXRBbmRVbnN1YnNjcmliZSA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIHZhciBjb25uID0gY29ubmVjdGlvbjtcbiAgICAgICAgICAgIHJlc2V0KCk7XG4gICAgICAgICAgICBjb25uID09PSBudWxsIHx8IGNvbm4gPT09IHZvaWQgMCA/IHZvaWQgMCA6IGNvbm4udW5zdWJzY3JpYmUoKTtcbiAgICAgICAgfTtcbiAgICAgICAgcmV0dXJuIGxpZnRfMS5vcGVyYXRlKGZ1bmN0aW9uIChzb3VyY2UsIHN1YnNjcmliZXIpIHtcbiAgICAgICAgICAgIHJlZkNvdW50Kys7XG4gICAgICAgICAgICBpZiAoIWhhc0Vycm9yZWQgJiYgIWhhc0NvbXBsZXRlZCkge1xuICAgICAgICAgICAgICAgIGNhbmNlbFJlc2V0KCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICB2YXIgZGVzdCA9IChzdWJqZWN0ID0gc3ViamVjdCAhPT0gbnVsbCAmJiBzdWJqZWN0ICE9PSB2b2lkIDAgPyBzdWJqZWN0IDogY29ubmVjdG9yKCkpO1xuICAgICAgICAgICAgc3Vic2NyaWJlci5hZGQoZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgIHJlZkNvdW50LS07XG4gICAgICAgICAgICAgICAgaWYgKHJlZkNvdW50ID09PSAwICYmICFoYXNFcnJvcmVkICYmICFoYXNDb21wbGV0ZWQpIHtcbiAgICAgICAgICAgICAgICAgICAgcmVzZXRDb25uZWN0aW9uID0gaGFuZGxlUmVzZXQocmVzZXRBbmRVbnN1YnNjcmliZSwgcmVzZXRPblJlZkNvdW50WmVybyk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICBkZXN0LnN1YnNjcmliZShzdWJzY3JpYmVyKTtcbiAgICAgICAgICAgIGlmICghY29ubmVjdGlvbiAmJlxuICAgICAgICAgICAgICAgIHJlZkNvdW50ID4gMCkge1xuICAgICAgICAgICAgICAgIGNvbm5lY3Rpb24gPSBuZXcgU3Vic2NyaWJlcl8xLlNhZmVTdWJzY3JpYmVyKHtcbiAgICAgICAgICAgICAgICAgICAgbmV4dDogZnVuY3Rpb24gKHZhbHVlKSB7IHJldHVybiBkZXN0Lm5leHQodmFsdWUpOyB9LFxuICAgICAgICAgICAgICAgICAgICBlcnJvcjogZnVuY3Rpb24gKGVycikge1xuICAgICAgICAgICAgICAgICAgICAgICAgaGFzRXJyb3JlZCA9IHRydWU7XG4gICAgICAgICAgICAgICAgICAgICAgICBjYW5jZWxSZXNldCgpO1xuICAgICAgICAgICAgICAgICAgICAgICAgcmVzZXRDb25uZWN0aW9uID0gaGFuZGxlUmVzZXQocmVzZXQsIHJlc2V0T25FcnJvciwgZXJyKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGRlc3QuZXJyb3IoZXJyKTtcbiAgICAgICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICAgICAgY29tcGxldGU6IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGhhc0NvbXBsZXRlZCA9IHRydWU7XG4gICAgICAgICAgICAgICAgICAgICAgICBjYW5jZWxSZXNldCgpO1xuICAgICAgICAgICAgICAgICAgICAgICAgcmVzZXRDb25uZWN0aW9uID0gaGFuZGxlUmVzZXQocmVzZXQsIHJlc2V0T25Db21wbGV0ZSk7XG4gICAgICAgICAgICAgICAgICAgICAgICBkZXN0LmNvbXBsZXRlKCk7XG4gICAgICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgaW5uZXJGcm9tXzEuaW5uZXJGcm9tKHNvdXJjZSkuc3Vic2NyaWJlKGNvbm5lY3Rpb24pO1xuICAgICAgICAgICAgfVxuICAgICAgICB9KSh3cmFwcGVyU291cmNlKTtcbiAgICB9O1xufVxuZXhwb3J0cy5zaGFyZSA9IHNoYXJlO1xuZnVuY3Rpb24gaGFuZGxlUmVzZXQocmVzZXQsIG9uKSB7XG4gICAgdmFyIGFyZ3MgPSBbXTtcbiAgICBmb3IgKHZhciBfaSA9IDI7IF9pIDwgYXJndW1lbnRzLmxlbmd0aDsgX2krKykge1xuICAgICAgICBhcmdzW19pIC0gMl0gPSBhcmd1bWVudHNbX2ldO1xuICAgIH1cbiAgICBpZiAob24gPT09IHRydWUpIHtcbiAgICAgICAgcmVzZXQoKTtcbiAgICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICBpZiAob24gPT09IGZhbHNlKSB7XG4gICAgICAgIHJldHVybjtcbiAgICB9XG4gICAgdmFyIG9uU3Vic2NyaWJlciA9IG5ldyBTdWJzY3JpYmVyXzEuU2FmZVN1YnNjcmliZXIoe1xuICAgICAgICBuZXh0OiBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICBvblN1YnNjcmliZXIudW5zdWJzY3JpYmUoKTtcbiAgICAgICAgICAgIHJlc2V0KCk7XG4gICAgICAgIH0sXG4gICAgfSk7XG4gICAgcmV0dXJuIGlubmVyRnJvbV8xLmlubmVyRnJvbShvbi5hcHBseSh2b2lkIDAsIF9fc3ByZWFkQXJyYXkoW10sIF9fcmVhZChhcmdzKSkpKS5zdWJzY3JpYmUob25TdWJzY3JpYmVyKTtcbn1cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPXNoYXJlLmpzLm1hcCIsIlwidXNlIHN0cmljdFwiO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuZXhwb3J0cy5zaGFyZVJlcGxheSA9IHZvaWQgMDtcbnZhciBSZXBsYXlTdWJqZWN0XzEgPSByZXF1aXJlKFwiLi4vUmVwbGF5U3ViamVjdFwiKTtcbnZhciBzaGFyZV8xID0gcmVxdWlyZShcIi4vc2hhcmVcIik7XG5mdW5jdGlvbiBzaGFyZVJlcGxheShjb25maWdPckJ1ZmZlclNpemUsIHdpbmRvd1RpbWUsIHNjaGVkdWxlcikge1xuICAgIHZhciBfYSwgX2IsIF9jO1xuICAgIHZhciBidWZmZXJTaXplO1xuICAgIHZhciByZWZDb3VudCA9IGZhbHNlO1xuICAgIGlmIChjb25maWdPckJ1ZmZlclNpemUgJiYgdHlwZW9mIGNvbmZpZ09yQnVmZmVyU2l6ZSA9PT0gJ29iamVjdCcpIHtcbiAgICAgICAgKF9hID0gY29uZmlnT3JCdWZmZXJTaXplLmJ1ZmZlclNpemUsIGJ1ZmZlclNpemUgPSBfYSA9PT0gdm9pZCAwID8gSW5maW5pdHkgOiBfYSwgX2IgPSBjb25maWdPckJ1ZmZlclNpemUud2luZG93VGltZSwgd2luZG93VGltZSA9IF9iID09PSB2b2lkIDAgPyBJbmZpbml0eSA6IF9iLCBfYyA9IGNvbmZpZ09yQnVmZmVyU2l6ZS5yZWZDb3VudCwgcmVmQ291bnQgPSBfYyA9PT0gdm9pZCAwID8gZmFsc2UgOiBfYywgc2NoZWR1bGVyID0gY29uZmlnT3JCdWZmZXJTaXplLnNjaGVkdWxlcik7XG4gICAgfVxuICAgIGVsc2Uge1xuICAgICAgICBidWZmZXJTaXplID0gKGNvbmZpZ09yQnVmZmVyU2l6ZSAhPT0gbnVsbCAmJiBjb25maWdPckJ1ZmZlclNpemUgIT09IHZvaWQgMCA/IGNvbmZpZ09yQnVmZmVyU2l6ZSA6IEluZmluaXR5KTtcbiAgICB9XG4gICAgcmV0dXJuIHNoYXJlXzEuc2hhcmUoe1xuICAgICAgICBjb25uZWN0b3I6IGZ1bmN0aW9uICgpIHsgcmV0dXJuIG5ldyBSZXBsYXlTdWJqZWN0XzEuUmVwbGF5U3ViamVjdChidWZmZXJTaXplLCB3aW5kb3dUaW1lLCBzY2hlZHVsZXIpOyB9LFxuICAgICAgICByZXNldE9uRXJyb3I6IHRydWUsXG4gICAgICAgIHJlc2V0T25Db21wbGV0ZTogZmFsc2UsXG4gICAgICAgIHJlc2V0T25SZWZDb3VudFplcm86IHJlZkNvdW50LFxuICAgIH0pO1xufVxuZXhwb3J0cy5zaGFyZVJlcGxheSA9IHNoYXJlUmVwbGF5O1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9c2hhcmVSZXBsYXkuanMubWFwIiwiXCJ1c2Ugc3RyaWN0XCI7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5leHBvcnRzLnNpbmdsZSA9IHZvaWQgMDtcbnZhciBFbXB0eUVycm9yXzEgPSByZXF1aXJlKFwiLi4vdXRpbC9FbXB0eUVycm9yXCIpO1xudmFyIFNlcXVlbmNlRXJyb3JfMSA9IHJlcXVpcmUoXCIuLi91dGlsL1NlcXVlbmNlRXJyb3JcIik7XG52YXIgTm90Rm91bmRFcnJvcl8xID0gcmVxdWlyZShcIi4uL3V0aWwvTm90Rm91bmRFcnJvclwiKTtcbnZhciBsaWZ0XzEgPSByZXF1aXJlKFwiLi4vdXRpbC9saWZ0XCIpO1xudmFyIE9wZXJhdG9yU3Vic2NyaWJlcl8xID0gcmVxdWlyZShcIi4vT3BlcmF0b3JTdWJzY3JpYmVyXCIpO1xuZnVuY3Rpb24gc2luZ2xlKHByZWRpY2F0ZSkge1xuICAgIHJldHVybiBsaWZ0XzEub3BlcmF0ZShmdW5jdGlvbiAoc291cmNlLCBzdWJzY3JpYmVyKSB7XG4gICAgICAgIHZhciBoYXNWYWx1ZSA9IGZhbHNlO1xuICAgICAgICB2YXIgc2luZ2xlVmFsdWU7XG4gICAgICAgIHZhciBzZWVuVmFsdWUgPSBmYWxzZTtcbiAgICAgICAgdmFyIGluZGV4ID0gMDtcbiAgICAgICAgc291cmNlLnN1YnNjcmliZShPcGVyYXRvclN1YnNjcmliZXJfMS5jcmVhdGVPcGVyYXRvclN1YnNjcmliZXIoc3Vic2NyaWJlciwgZnVuY3Rpb24gKHZhbHVlKSB7XG4gICAgICAgICAgICBzZWVuVmFsdWUgPSB0cnVlO1xuICAgICAgICAgICAgaWYgKCFwcmVkaWNhdGUgfHwgcHJlZGljYXRlKHZhbHVlLCBpbmRleCsrLCBzb3VyY2UpKSB7XG4gICAgICAgICAgICAgICAgaGFzVmFsdWUgJiYgc3Vic2NyaWJlci5lcnJvcihuZXcgU2VxdWVuY2VFcnJvcl8xLlNlcXVlbmNlRXJyb3IoJ1RvbyBtYW55IG1hdGNoaW5nIHZhbHVlcycpKTtcbiAgICAgICAgICAgICAgICBoYXNWYWx1ZSA9IHRydWU7XG4gICAgICAgICAgICAgICAgc2luZ2xlVmFsdWUgPSB2YWx1ZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSwgZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgaWYgKGhhc1ZhbHVlKSB7XG4gICAgICAgICAgICAgICAgc3Vic2NyaWJlci5uZXh0KHNpbmdsZVZhbHVlKTtcbiAgICAgICAgICAgICAgICBzdWJzY3JpYmVyLmNvbXBsZXRlKCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICBzdWJzY3JpYmVyLmVycm9yKHNlZW5WYWx1ZSA/IG5ldyBOb3RGb3VuZEVycm9yXzEuTm90Rm91bmRFcnJvcignTm8gbWF0Y2hpbmcgdmFsdWVzJykgOiBuZXcgRW1wdHlFcnJvcl8xLkVtcHR5RXJyb3IoKSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0pKTtcbiAgICB9KTtcbn1cbmV4cG9ydHMuc2luZ2xlID0gc2luZ2xlO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9c2luZ2xlLmpzLm1hcCIsIlwidXNlIHN0cmljdFwiO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuZXhwb3J0cy5za2lwID0gdm9pZCAwO1xudmFyIGZpbHRlcl8xID0gcmVxdWlyZShcIi4vZmlsdGVyXCIpO1xuZnVuY3Rpb24gc2tpcChjb3VudCkge1xuICAgIHJldHVybiBmaWx0ZXJfMS5maWx0ZXIoZnVuY3Rpb24gKF8sIGluZGV4KSB7IHJldHVybiBjb3VudCA8PSBpbmRleDsgfSk7XG59XG5leHBvcnRzLnNraXAgPSBza2lwO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9c2tpcC5qcy5tYXAiLCJcInVzZSBzdHJpY3RcIjtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmV4cG9ydHMuc2tpcExhc3QgPSB2b2lkIDA7XG52YXIgaWRlbnRpdHlfMSA9IHJlcXVpcmUoXCIuLi91dGlsL2lkZW50aXR5XCIpO1xudmFyIGxpZnRfMSA9IHJlcXVpcmUoXCIuLi91dGlsL2xpZnRcIik7XG52YXIgT3BlcmF0b3JTdWJzY3JpYmVyXzEgPSByZXF1aXJlKFwiLi9PcGVyYXRvclN1YnNjcmliZXJcIik7XG5mdW5jdGlvbiBza2lwTGFzdChza2lwQ291bnQpIHtcbiAgICByZXR1cm4gc2tpcENvdW50IDw9IDBcbiAgICAgICAgP1xuICAgICAgICAgICAgaWRlbnRpdHlfMS5pZGVudGl0eVxuICAgICAgICA6IGxpZnRfMS5vcGVyYXRlKGZ1bmN0aW9uIChzb3VyY2UsIHN1YnNjcmliZXIpIHtcbiAgICAgICAgICAgIHZhciByaW5nID0gbmV3IEFycmF5KHNraXBDb3VudCk7XG4gICAgICAgICAgICB2YXIgc2VlbiA9IDA7XG4gICAgICAgICAgICBzb3VyY2Uuc3Vic2NyaWJlKE9wZXJhdG9yU3Vic2NyaWJlcl8xLmNyZWF0ZU9wZXJhdG9yU3Vic2NyaWJlcihzdWJzY3JpYmVyLCBmdW5jdGlvbiAodmFsdWUpIHtcbiAgICAgICAgICAgICAgICB2YXIgdmFsdWVJbmRleCA9IHNlZW4rKztcbiAgICAgICAgICAgICAgICBpZiAodmFsdWVJbmRleCA8IHNraXBDb3VudCkge1xuICAgICAgICAgICAgICAgICAgICByaW5nW3ZhbHVlSW5kZXhdID0gdmFsdWU7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICB2YXIgaW5kZXggPSB2YWx1ZUluZGV4ICUgc2tpcENvdW50O1xuICAgICAgICAgICAgICAgICAgICB2YXIgb2xkVmFsdWUgPSByaW5nW2luZGV4XTtcbiAgICAgICAgICAgICAgICAgICAgcmluZ1tpbmRleF0gPSB2YWx1ZTtcbiAgICAgICAgICAgICAgICAgICAgc3Vic2NyaWJlci5uZXh0KG9sZFZhbHVlKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9KSk7XG4gICAgICAgICAgICByZXR1cm4gZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgIHJpbmcgPSBudWxsO1xuICAgICAgICAgICAgfTtcbiAgICAgICAgfSk7XG59XG5leHBvcnRzLnNraXBMYXN0ID0gc2tpcExhc3Q7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1za2lwTGFzdC5qcy5tYXAiLCJcInVzZSBzdHJpY3RcIjtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmV4cG9ydHMuc2tpcFVudGlsID0gdm9pZCAwO1xudmFyIGxpZnRfMSA9IHJlcXVpcmUoXCIuLi91dGlsL2xpZnRcIik7XG52YXIgT3BlcmF0b3JTdWJzY3JpYmVyXzEgPSByZXF1aXJlKFwiLi9PcGVyYXRvclN1YnNjcmliZXJcIik7XG52YXIgaW5uZXJGcm9tXzEgPSByZXF1aXJlKFwiLi4vb2JzZXJ2YWJsZS9pbm5lckZyb21cIik7XG52YXIgbm9vcF8xID0gcmVxdWlyZShcIi4uL3V0aWwvbm9vcFwiKTtcbmZ1bmN0aW9uIHNraXBVbnRpbChub3RpZmllcikge1xuICAgIHJldHVybiBsaWZ0XzEub3BlcmF0ZShmdW5jdGlvbiAoc291cmNlLCBzdWJzY3JpYmVyKSB7XG4gICAgICAgIHZhciB0YWtpbmcgPSBmYWxzZTtcbiAgICAgICAgdmFyIHNraXBTdWJzY3JpYmVyID0gT3BlcmF0b3JTdWJzY3JpYmVyXzEuY3JlYXRlT3BlcmF0b3JTdWJzY3JpYmVyKHN1YnNjcmliZXIsIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIHNraXBTdWJzY3JpYmVyID09PSBudWxsIHx8IHNraXBTdWJzY3JpYmVyID09PSB2b2lkIDAgPyB2b2lkIDAgOiBza2lwU3Vic2NyaWJlci51bnN1YnNjcmliZSgpO1xuICAgICAgICAgICAgdGFraW5nID0gdHJ1ZTtcbiAgICAgICAgfSwgbm9vcF8xLm5vb3ApO1xuICAgICAgICBpbm5lckZyb21fMS5pbm5lckZyb20obm90aWZpZXIpLnN1YnNjcmliZShza2lwU3Vic2NyaWJlcik7XG4gICAgICAgIHNvdXJjZS5zdWJzY3JpYmUoT3BlcmF0b3JTdWJzY3JpYmVyXzEuY3JlYXRlT3BlcmF0b3JTdWJzY3JpYmVyKHN1YnNjcmliZXIsIGZ1bmN0aW9uICh2YWx1ZSkgeyByZXR1cm4gdGFraW5nICYmIHN1YnNjcmliZXIubmV4dCh2YWx1ZSk7IH0pKTtcbiAgICB9KTtcbn1cbmV4cG9ydHMuc2tpcFVudGlsID0gc2tpcFVudGlsO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9c2tpcFVudGlsLmpzLm1hcCIsIlwidXNlIHN0cmljdFwiO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuZXhwb3J0cy5za2lwV2hpbGUgPSB2b2lkIDA7XG52YXIgbGlmdF8xID0gcmVxdWlyZShcIi4uL3V0aWwvbGlmdFwiKTtcbnZhciBPcGVyYXRvclN1YnNjcmliZXJfMSA9IHJlcXVpcmUoXCIuL09wZXJhdG9yU3Vic2NyaWJlclwiKTtcbmZ1bmN0aW9uIHNraXBXaGlsZShwcmVkaWNhdGUpIHtcbiAgICByZXR1cm4gbGlmdF8xLm9wZXJhdGUoZnVuY3Rpb24gKHNvdXJjZSwgc3Vic2NyaWJlcikge1xuICAgICAgICB2YXIgdGFraW5nID0gZmFsc2U7XG4gICAgICAgIHZhciBpbmRleCA9IDA7XG4gICAgICAgIHNvdXJjZS5zdWJzY3JpYmUoT3BlcmF0b3JTdWJzY3JpYmVyXzEuY3JlYXRlT3BlcmF0b3JTdWJzY3JpYmVyKHN1YnNjcmliZXIsIGZ1bmN0aW9uICh2YWx1ZSkgeyByZXR1cm4gKHRha2luZyB8fCAodGFraW5nID0gIXByZWRpY2F0ZSh2YWx1ZSwgaW5kZXgrKykpKSAmJiBzdWJzY3JpYmVyLm5leHQodmFsdWUpOyB9KSk7XG4gICAgfSk7XG59XG5leHBvcnRzLnNraXBXaGlsZSA9IHNraXBXaGlsZTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPXNraXBXaGlsZS5qcy5tYXAiLCJcInVzZSBzdHJpY3RcIjtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmV4cG9ydHMuc3RhcnRXaXRoID0gdm9pZCAwO1xudmFyIGNvbmNhdF8xID0gcmVxdWlyZShcIi4uL29ic2VydmFibGUvY29uY2F0XCIpO1xudmFyIGFyZ3NfMSA9IHJlcXVpcmUoXCIuLi91dGlsL2FyZ3NcIik7XG52YXIgbGlmdF8xID0gcmVxdWlyZShcIi4uL3V0aWwvbGlmdFwiKTtcbmZ1bmN0aW9uIHN0YXJ0V2l0aCgpIHtcbiAgICB2YXIgdmFsdWVzID0gW107XG4gICAgZm9yICh2YXIgX2kgPSAwOyBfaSA8IGFyZ3VtZW50cy5sZW5ndGg7IF9pKyspIHtcbiAgICAgICAgdmFsdWVzW19pXSA9IGFyZ3VtZW50c1tfaV07XG4gICAgfVxuICAgIHZhciBzY2hlZHVsZXIgPSBhcmdzXzEucG9wU2NoZWR1bGVyKHZhbHVlcyk7XG4gICAgcmV0dXJuIGxpZnRfMS5vcGVyYXRlKGZ1bmN0aW9uIChzb3VyY2UsIHN1YnNjcmliZXIpIHtcbiAgICAgICAgKHNjaGVkdWxlciA/IGNvbmNhdF8xLmNvbmNhdCh2YWx1ZXMsIHNvdXJjZSwgc2NoZWR1bGVyKSA6IGNvbmNhdF8xLmNvbmNhdCh2YWx1ZXMsIHNvdXJjZSkpLnN1YnNjcmliZShzdWJzY3JpYmVyKTtcbiAgICB9KTtcbn1cbmV4cG9ydHMuc3RhcnRXaXRoID0gc3RhcnRXaXRoO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9c3RhcnRXaXRoLmpzLm1hcCIsIlwidXNlIHN0cmljdFwiO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuZXhwb3J0cy5zdWJzY3JpYmVPbiA9IHZvaWQgMDtcbnZhciBsaWZ0XzEgPSByZXF1aXJlKFwiLi4vdXRpbC9saWZ0XCIpO1xuZnVuY3Rpb24gc3Vic2NyaWJlT24oc2NoZWR1bGVyLCBkZWxheSkge1xuICAgIGlmIChkZWxheSA9PT0gdm9pZCAwKSB7IGRlbGF5ID0gMDsgfVxuICAgIHJldHVybiBsaWZ0XzEub3BlcmF0ZShmdW5jdGlvbiAoc291cmNlLCBzdWJzY3JpYmVyKSB7XG4gICAgICAgIHN1YnNjcmliZXIuYWRkKHNjaGVkdWxlci5zY2hlZHVsZShmdW5jdGlvbiAoKSB7IHJldHVybiBzb3VyY2Uuc3Vic2NyaWJlKHN1YnNjcmliZXIpOyB9LCBkZWxheSkpO1xuICAgIH0pO1xufVxuZXhwb3J0cy5zdWJzY3JpYmVPbiA9IHN1YnNjcmliZU9uO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9c3Vic2NyaWJlT24uanMubWFwIiwiXCJ1c2Ugc3RyaWN0XCI7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5leHBvcnRzLnN3aXRjaEFsbCA9IHZvaWQgMDtcbnZhciBzd2l0Y2hNYXBfMSA9IHJlcXVpcmUoXCIuL3N3aXRjaE1hcFwiKTtcbnZhciBpZGVudGl0eV8xID0gcmVxdWlyZShcIi4uL3V0aWwvaWRlbnRpdHlcIik7XG5mdW5jdGlvbiBzd2l0Y2hBbGwoKSB7XG4gICAgcmV0dXJuIHN3aXRjaE1hcF8xLnN3aXRjaE1hcChpZGVudGl0eV8xLmlkZW50aXR5KTtcbn1cbmV4cG9ydHMuc3dpdGNoQWxsID0gc3dpdGNoQWxsO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9c3dpdGNoQWxsLmpzLm1hcCIsIlwidXNlIHN0cmljdFwiO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuZXhwb3J0cy5zd2l0Y2hNYXAgPSB2b2lkIDA7XG52YXIgaW5uZXJGcm9tXzEgPSByZXF1aXJlKFwiLi4vb2JzZXJ2YWJsZS9pbm5lckZyb21cIik7XG52YXIgbGlmdF8xID0gcmVxdWlyZShcIi4uL3V0aWwvbGlmdFwiKTtcbnZhciBPcGVyYXRvclN1YnNjcmliZXJfMSA9IHJlcXVpcmUoXCIuL09wZXJhdG9yU3Vic2NyaWJlclwiKTtcbmZ1bmN0aW9uIHN3aXRjaE1hcChwcm9qZWN0LCByZXN1bHRTZWxlY3Rvcikge1xuICAgIHJldHVybiBsaWZ0XzEub3BlcmF0ZShmdW5jdGlvbiAoc291cmNlLCBzdWJzY3JpYmVyKSB7XG4gICAgICAgIHZhciBpbm5lclN1YnNjcmliZXIgPSBudWxsO1xuICAgICAgICB2YXIgaW5kZXggPSAwO1xuICAgICAgICB2YXIgaXNDb21wbGV0ZSA9IGZhbHNlO1xuICAgICAgICB2YXIgY2hlY2tDb21wbGV0ZSA9IGZ1bmN0aW9uICgpIHsgcmV0dXJuIGlzQ29tcGxldGUgJiYgIWlubmVyU3Vic2NyaWJlciAmJiBzdWJzY3JpYmVyLmNvbXBsZXRlKCk7IH07XG4gICAgICAgIHNvdXJjZS5zdWJzY3JpYmUoT3BlcmF0b3JTdWJzY3JpYmVyXzEuY3JlYXRlT3BlcmF0b3JTdWJzY3JpYmVyKHN1YnNjcmliZXIsIGZ1bmN0aW9uICh2YWx1ZSkge1xuICAgICAgICAgICAgaW5uZXJTdWJzY3JpYmVyID09PSBudWxsIHx8IGlubmVyU3Vic2NyaWJlciA9PT0gdm9pZCAwID8gdm9pZCAwIDogaW5uZXJTdWJzY3JpYmVyLnVuc3Vic2NyaWJlKCk7XG4gICAgICAgICAgICB2YXIgaW5uZXJJbmRleCA9IDA7XG4gICAgICAgICAgICB2YXIgb3V0ZXJJbmRleCA9IGluZGV4Kys7XG4gICAgICAgICAgICBpbm5lckZyb21fMS5pbm5lckZyb20ocHJvamVjdCh2YWx1ZSwgb3V0ZXJJbmRleCkpLnN1YnNjcmliZSgoaW5uZXJTdWJzY3JpYmVyID0gT3BlcmF0b3JTdWJzY3JpYmVyXzEuY3JlYXRlT3BlcmF0b3JTdWJzY3JpYmVyKHN1YnNjcmliZXIsIGZ1bmN0aW9uIChpbm5lclZhbHVlKSB7IHJldHVybiBzdWJzY3JpYmVyLm5leHQocmVzdWx0U2VsZWN0b3IgPyByZXN1bHRTZWxlY3Rvcih2YWx1ZSwgaW5uZXJWYWx1ZSwgb3V0ZXJJbmRleCwgaW5uZXJJbmRleCsrKSA6IGlubmVyVmFsdWUpOyB9LCBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgaW5uZXJTdWJzY3JpYmVyID0gbnVsbDtcbiAgICAgICAgICAgICAgICBjaGVja0NvbXBsZXRlKCk7XG4gICAgICAgICAgICB9KSkpO1xuICAgICAgICB9LCBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICBpc0NvbXBsZXRlID0gdHJ1ZTtcbiAgICAgICAgICAgIGNoZWNrQ29tcGxldGUoKTtcbiAgICAgICAgfSkpO1xuICAgIH0pO1xufVxuZXhwb3J0cy5zd2l0Y2hNYXAgPSBzd2l0Y2hNYXA7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1zd2l0Y2hNYXAuanMubWFwIiwiXCJ1c2Ugc3RyaWN0XCI7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5leHBvcnRzLnN3aXRjaE1hcFRvID0gdm9pZCAwO1xudmFyIHN3aXRjaE1hcF8xID0gcmVxdWlyZShcIi4vc3dpdGNoTWFwXCIpO1xudmFyIGlzRnVuY3Rpb25fMSA9IHJlcXVpcmUoXCIuLi91dGlsL2lzRnVuY3Rpb25cIik7XG5mdW5jdGlvbiBzd2l0Y2hNYXBUbyhpbm5lck9ic2VydmFibGUsIHJlc3VsdFNlbGVjdG9yKSB7XG4gICAgcmV0dXJuIGlzRnVuY3Rpb25fMS5pc0Z1bmN0aW9uKHJlc3VsdFNlbGVjdG9yKSA/IHN3aXRjaE1hcF8xLnN3aXRjaE1hcChmdW5jdGlvbiAoKSB7IHJldHVybiBpbm5lck9ic2VydmFibGU7IH0sIHJlc3VsdFNlbGVjdG9yKSA6IHN3aXRjaE1hcF8xLnN3aXRjaE1hcChmdW5jdGlvbiAoKSB7IHJldHVybiBpbm5lck9ic2VydmFibGU7IH0pO1xufVxuZXhwb3J0cy5zd2l0Y2hNYXBUbyA9IHN3aXRjaE1hcFRvO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9c3dpdGNoTWFwVG8uanMubWFwIiwiXCJ1c2Ugc3RyaWN0XCI7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5leHBvcnRzLnN3aXRjaFNjYW4gPSB2b2lkIDA7XG52YXIgc3dpdGNoTWFwXzEgPSByZXF1aXJlKFwiLi9zd2l0Y2hNYXBcIik7XG52YXIgbGlmdF8xID0gcmVxdWlyZShcIi4uL3V0aWwvbGlmdFwiKTtcbmZ1bmN0aW9uIHN3aXRjaFNjYW4oYWNjdW11bGF0b3IsIHNlZWQpIHtcbiAgICByZXR1cm4gbGlmdF8xLm9wZXJhdGUoZnVuY3Rpb24gKHNvdXJjZSwgc3Vic2NyaWJlcikge1xuICAgICAgICB2YXIgc3RhdGUgPSBzZWVkO1xuICAgICAgICBzd2l0Y2hNYXBfMS5zd2l0Y2hNYXAoZnVuY3Rpb24gKHZhbHVlLCBpbmRleCkgeyByZXR1cm4gYWNjdW11bGF0b3Ioc3RhdGUsIHZhbHVlLCBpbmRleCk7IH0sIGZ1bmN0aW9uIChfLCBpbm5lclZhbHVlKSB7IHJldHVybiAoKHN0YXRlID0gaW5uZXJWYWx1ZSksIGlubmVyVmFsdWUpOyB9KShzb3VyY2UpLnN1YnNjcmliZShzdWJzY3JpYmVyKTtcbiAgICAgICAgcmV0dXJuIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIHN0YXRlID0gbnVsbDtcbiAgICAgICAgfTtcbiAgICB9KTtcbn1cbmV4cG9ydHMuc3dpdGNoU2NhbiA9IHN3aXRjaFNjYW47XG4vLyMgc291cmNlTWFwcGluZ1VSTD1zd2l0Y2hTY2FuLmpzLm1hcCIsIlwidXNlIHN0cmljdFwiO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuZXhwb3J0cy50YWtlID0gdm9pZCAwO1xudmFyIGVtcHR5XzEgPSByZXF1aXJlKFwiLi4vb2JzZXJ2YWJsZS9lbXB0eVwiKTtcbnZhciBsaWZ0XzEgPSByZXF1aXJlKFwiLi4vdXRpbC9saWZ0XCIpO1xudmFyIE9wZXJhdG9yU3Vic2NyaWJlcl8xID0gcmVxdWlyZShcIi4vT3BlcmF0b3JTdWJzY3JpYmVyXCIpO1xuZnVuY3Rpb24gdGFrZShjb3VudCkge1xuICAgIHJldHVybiBjb3VudCA8PSAwXG4gICAgICAgID9cbiAgICAgICAgICAgIGZ1bmN0aW9uICgpIHsgcmV0dXJuIGVtcHR5XzEuRU1QVFk7IH1cbiAgICAgICAgOiBsaWZ0XzEub3BlcmF0ZShmdW5jdGlvbiAoc291cmNlLCBzdWJzY3JpYmVyKSB7XG4gICAgICAgICAgICB2YXIgc2VlbiA9IDA7XG4gICAgICAgICAgICBzb3VyY2Uuc3Vic2NyaWJlKE9wZXJhdG9yU3Vic2NyaWJlcl8xLmNyZWF0ZU9wZXJhdG9yU3Vic2NyaWJlcihzdWJzY3JpYmVyLCBmdW5jdGlvbiAodmFsdWUpIHtcbiAgICAgICAgICAgICAgICBpZiAoKytzZWVuIDw9IGNvdW50KSB7XG4gICAgICAgICAgICAgICAgICAgIHN1YnNjcmliZXIubmV4dCh2YWx1ZSk7XG4gICAgICAgICAgICAgICAgICAgIGlmIChjb3VudCA8PSBzZWVuKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBzdWJzY3JpYmVyLmNvbXBsZXRlKCk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9KSk7XG4gICAgICAgIH0pO1xufVxuZXhwb3J0cy50YWtlID0gdGFrZTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPXRha2UuanMubWFwIiwiXCJ1c2Ugc3RyaWN0XCI7XG52YXIgX192YWx1ZXMgPSAodGhpcyAmJiB0aGlzLl9fdmFsdWVzKSB8fCBmdW5jdGlvbihvKSB7XG4gICAgdmFyIHMgPSB0eXBlb2YgU3ltYm9sID09PSBcImZ1bmN0aW9uXCIgJiYgU3ltYm9sLml0ZXJhdG9yLCBtID0gcyAmJiBvW3NdLCBpID0gMDtcbiAgICBpZiAobSkgcmV0dXJuIG0uY2FsbChvKTtcbiAgICBpZiAobyAmJiB0eXBlb2Ygby5sZW5ndGggPT09IFwibnVtYmVyXCIpIHJldHVybiB7XG4gICAgICAgIG5leHQ6IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIGlmIChvICYmIGkgPj0gby5sZW5ndGgpIG8gPSB2b2lkIDA7XG4gICAgICAgICAgICByZXR1cm4geyB2YWx1ZTogbyAmJiBvW2krK10sIGRvbmU6ICFvIH07XG4gICAgICAgIH1cbiAgICB9O1xuICAgIHRocm93IG5ldyBUeXBlRXJyb3IocyA/IFwiT2JqZWN0IGlzIG5vdCBpdGVyYWJsZS5cIiA6IFwiU3ltYm9sLml0ZXJhdG9yIGlzIG5vdCBkZWZpbmVkLlwiKTtcbn07XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5leHBvcnRzLnRha2VMYXN0ID0gdm9pZCAwO1xudmFyIGVtcHR5XzEgPSByZXF1aXJlKFwiLi4vb2JzZXJ2YWJsZS9lbXB0eVwiKTtcbnZhciBsaWZ0XzEgPSByZXF1aXJlKFwiLi4vdXRpbC9saWZ0XCIpO1xudmFyIE9wZXJhdG9yU3Vic2NyaWJlcl8xID0gcmVxdWlyZShcIi4vT3BlcmF0b3JTdWJzY3JpYmVyXCIpO1xuZnVuY3Rpb24gdGFrZUxhc3QoY291bnQpIHtcbiAgICByZXR1cm4gY291bnQgPD0gMFxuICAgICAgICA/IGZ1bmN0aW9uICgpIHsgcmV0dXJuIGVtcHR5XzEuRU1QVFk7IH1cbiAgICAgICAgOiBsaWZ0XzEub3BlcmF0ZShmdW5jdGlvbiAoc291cmNlLCBzdWJzY3JpYmVyKSB7XG4gICAgICAgICAgICB2YXIgYnVmZmVyID0gW107XG4gICAgICAgICAgICBzb3VyY2Uuc3Vic2NyaWJlKE9wZXJhdG9yU3Vic2NyaWJlcl8xLmNyZWF0ZU9wZXJhdG9yU3Vic2NyaWJlcihzdWJzY3JpYmVyLCBmdW5jdGlvbiAodmFsdWUpIHtcbiAgICAgICAgICAgICAgICBidWZmZXIucHVzaCh2YWx1ZSk7XG4gICAgICAgICAgICAgICAgY291bnQgPCBidWZmZXIubGVuZ3RoICYmIGJ1ZmZlci5zaGlmdCgpO1xuICAgICAgICAgICAgfSwgZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgIHZhciBlXzEsIF9hO1xuICAgICAgICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICAgICAgICAgIGZvciAodmFyIGJ1ZmZlcl8xID0gX192YWx1ZXMoYnVmZmVyKSwgYnVmZmVyXzFfMSA9IGJ1ZmZlcl8xLm5leHQoKTsgIWJ1ZmZlcl8xXzEuZG9uZTsgYnVmZmVyXzFfMSA9IGJ1ZmZlcl8xLm5leHQoKSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgdmFyIHZhbHVlID0gYnVmZmVyXzFfMS52YWx1ZTtcbiAgICAgICAgICAgICAgICAgICAgICAgIHN1YnNjcmliZXIubmV4dCh2YWx1ZSk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgY2F0Y2ggKGVfMV8xKSB7IGVfMSA9IHsgZXJyb3I6IGVfMV8xIH07IH1cbiAgICAgICAgICAgICAgICBmaW5hbGx5IHtcbiAgICAgICAgICAgICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChidWZmZXJfMV8xICYmICFidWZmZXJfMV8xLmRvbmUgJiYgKF9hID0gYnVmZmVyXzEucmV0dXJuKSkgX2EuY2FsbChidWZmZXJfMSk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgZmluYWxseSB7IGlmIChlXzEpIHRocm93IGVfMS5lcnJvcjsgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBzdWJzY3JpYmVyLmNvbXBsZXRlKCk7XG4gICAgICAgICAgICB9LCB1bmRlZmluZWQsIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICBidWZmZXIgPSBudWxsO1xuICAgICAgICAgICAgfSkpO1xuICAgICAgICB9KTtcbn1cbmV4cG9ydHMudGFrZUxhc3QgPSB0YWtlTGFzdDtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPXRha2VMYXN0LmpzLm1hcCIsIlwidXNlIHN0cmljdFwiO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuZXhwb3J0cy50YWtlVW50aWwgPSB2b2lkIDA7XG52YXIgbGlmdF8xID0gcmVxdWlyZShcIi4uL3V0aWwvbGlmdFwiKTtcbnZhciBPcGVyYXRvclN1YnNjcmliZXJfMSA9IHJlcXVpcmUoXCIuL09wZXJhdG9yU3Vic2NyaWJlclwiKTtcbnZhciBpbm5lckZyb21fMSA9IHJlcXVpcmUoXCIuLi9vYnNlcnZhYmxlL2lubmVyRnJvbVwiKTtcbnZhciBub29wXzEgPSByZXF1aXJlKFwiLi4vdXRpbC9ub29wXCIpO1xuZnVuY3Rpb24gdGFrZVVudGlsKG5vdGlmaWVyKSB7XG4gICAgcmV0dXJuIGxpZnRfMS5vcGVyYXRlKGZ1bmN0aW9uIChzb3VyY2UsIHN1YnNjcmliZXIpIHtcbiAgICAgICAgaW5uZXJGcm9tXzEuaW5uZXJGcm9tKG5vdGlmaWVyKS5zdWJzY3JpYmUoT3BlcmF0b3JTdWJzY3JpYmVyXzEuY3JlYXRlT3BlcmF0b3JTdWJzY3JpYmVyKHN1YnNjcmliZXIsIGZ1bmN0aW9uICgpIHsgcmV0dXJuIHN1YnNjcmliZXIuY29tcGxldGUoKTsgfSwgbm9vcF8xLm5vb3ApKTtcbiAgICAgICAgIXN1YnNjcmliZXIuY2xvc2VkICYmIHNvdXJjZS5zdWJzY3JpYmUoc3Vic2NyaWJlcik7XG4gICAgfSk7XG59XG5leHBvcnRzLnRha2VVbnRpbCA9IHRha2VVbnRpbDtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPXRha2VVbnRpbC5qcy5tYXAiLCJcInVzZSBzdHJpY3RcIjtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmV4cG9ydHMudGFrZVdoaWxlID0gdm9pZCAwO1xudmFyIGxpZnRfMSA9IHJlcXVpcmUoXCIuLi91dGlsL2xpZnRcIik7XG52YXIgT3BlcmF0b3JTdWJzY3JpYmVyXzEgPSByZXF1aXJlKFwiLi9PcGVyYXRvclN1YnNjcmliZXJcIik7XG5mdW5jdGlvbiB0YWtlV2hpbGUocHJlZGljYXRlLCBpbmNsdXNpdmUpIHtcbiAgICBpZiAoaW5jbHVzaXZlID09PSB2b2lkIDApIHsgaW5jbHVzaXZlID0gZmFsc2U7IH1cbiAgICByZXR1cm4gbGlmdF8xLm9wZXJhdGUoZnVuY3Rpb24gKHNvdXJjZSwgc3Vic2NyaWJlcikge1xuICAgICAgICB2YXIgaW5kZXggPSAwO1xuICAgICAgICBzb3VyY2Uuc3Vic2NyaWJlKE9wZXJhdG9yU3Vic2NyaWJlcl8xLmNyZWF0ZU9wZXJhdG9yU3Vic2NyaWJlcihzdWJzY3JpYmVyLCBmdW5jdGlvbiAodmFsdWUpIHtcbiAgICAgICAgICAgIHZhciByZXN1bHQgPSBwcmVkaWNhdGUodmFsdWUsIGluZGV4KyspO1xuICAgICAgICAgICAgKHJlc3VsdCB8fCBpbmNsdXNpdmUpICYmIHN1YnNjcmliZXIubmV4dCh2YWx1ZSk7XG4gICAgICAgICAgICAhcmVzdWx0ICYmIHN1YnNjcmliZXIuY29tcGxldGUoKTtcbiAgICAgICAgfSkpO1xuICAgIH0pO1xufVxuZXhwb3J0cy50YWtlV2hpbGUgPSB0YWtlV2hpbGU7XG4vLyMgc291cmNlTWFwcGluZ1VSTD10YWtlV2hpbGUuanMubWFwIiwiXCJ1c2Ugc3RyaWN0XCI7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5leHBvcnRzLnRhcCA9IHZvaWQgMDtcbnZhciBpc0Z1bmN0aW9uXzEgPSByZXF1aXJlKFwiLi4vdXRpbC9pc0Z1bmN0aW9uXCIpO1xudmFyIGxpZnRfMSA9IHJlcXVpcmUoXCIuLi91dGlsL2xpZnRcIik7XG52YXIgT3BlcmF0b3JTdWJzY3JpYmVyXzEgPSByZXF1aXJlKFwiLi9PcGVyYXRvclN1YnNjcmliZXJcIik7XG52YXIgaWRlbnRpdHlfMSA9IHJlcXVpcmUoXCIuLi91dGlsL2lkZW50aXR5XCIpO1xuZnVuY3Rpb24gdGFwKG9ic2VydmVyT3JOZXh0LCBlcnJvciwgY29tcGxldGUpIHtcbiAgICB2YXIgdGFwT2JzZXJ2ZXIgPSBpc0Z1bmN0aW9uXzEuaXNGdW5jdGlvbihvYnNlcnZlck9yTmV4dCkgfHwgZXJyb3IgfHwgY29tcGxldGVcbiAgICAgICAgP1xuICAgICAgICAgICAgeyBuZXh0OiBvYnNlcnZlck9yTmV4dCwgZXJyb3I6IGVycm9yLCBjb21wbGV0ZTogY29tcGxldGUgfVxuICAgICAgICA6IG9ic2VydmVyT3JOZXh0O1xuICAgIHJldHVybiB0YXBPYnNlcnZlclxuICAgICAgICA/IGxpZnRfMS5vcGVyYXRlKGZ1bmN0aW9uIChzb3VyY2UsIHN1YnNjcmliZXIpIHtcbiAgICAgICAgICAgIHZhciBfYTtcbiAgICAgICAgICAgIChfYSA9IHRhcE9ic2VydmVyLnN1YnNjcmliZSkgPT09IG51bGwgfHwgX2EgPT09IHZvaWQgMCA/IHZvaWQgMCA6IF9hLmNhbGwodGFwT2JzZXJ2ZXIpO1xuICAgICAgICAgICAgdmFyIGlzVW5zdWIgPSB0cnVlO1xuICAgICAgICAgICAgc291cmNlLnN1YnNjcmliZShPcGVyYXRvclN1YnNjcmliZXJfMS5jcmVhdGVPcGVyYXRvclN1YnNjcmliZXIoc3Vic2NyaWJlciwgZnVuY3Rpb24gKHZhbHVlKSB7XG4gICAgICAgICAgICAgICAgdmFyIF9hO1xuICAgICAgICAgICAgICAgIChfYSA9IHRhcE9ic2VydmVyLm5leHQpID09PSBudWxsIHx8IF9hID09PSB2b2lkIDAgPyB2b2lkIDAgOiBfYS5jYWxsKHRhcE9ic2VydmVyLCB2YWx1ZSk7XG4gICAgICAgICAgICAgICAgc3Vic2NyaWJlci5uZXh0KHZhbHVlKTtcbiAgICAgICAgICAgIH0sIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICB2YXIgX2E7XG4gICAgICAgICAgICAgICAgaXNVbnN1YiA9IGZhbHNlO1xuICAgICAgICAgICAgICAgIChfYSA9IHRhcE9ic2VydmVyLmNvbXBsZXRlKSA9PT0gbnVsbCB8fCBfYSA9PT0gdm9pZCAwID8gdm9pZCAwIDogX2EuY2FsbCh0YXBPYnNlcnZlcik7XG4gICAgICAgICAgICAgICAgc3Vic2NyaWJlci5jb21wbGV0ZSgpO1xuICAgICAgICAgICAgfSwgZnVuY3Rpb24gKGVycikge1xuICAgICAgICAgICAgICAgIHZhciBfYTtcbiAgICAgICAgICAgICAgICBpc1Vuc3ViID0gZmFsc2U7XG4gICAgICAgICAgICAgICAgKF9hID0gdGFwT2JzZXJ2ZXIuZXJyb3IpID09PSBudWxsIHx8IF9hID09PSB2b2lkIDAgPyB2b2lkIDAgOiBfYS5jYWxsKHRhcE9ic2VydmVyLCBlcnIpO1xuICAgICAgICAgICAgICAgIHN1YnNjcmliZXIuZXJyb3IoZXJyKTtcbiAgICAgICAgICAgIH0sIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICB2YXIgX2EsIF9iO1xuICAgICAgICAgICAgICAgIGlmIChpc1Vuc3ViKSB7XG4gICAgICAgICAgICAgICAgICAgIChfYSA9IHRhcE9ic2VydmVyLnVuc3Vic2NyaWJlKSA9PT0gbnVsbCB8fCBfYSA9PT0gdm9pZCAwID8gdm9pZCAwIDogX2EuY2FsbCh0YXBPYnNlcnZlcik7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIChfYiA9IHRhcE9ic2VydmVyLmZpbmFsaXplKSA9PT0gbnVsbCB8fCBfYiA9PT0gdm9pZCAwID8gdm9pZCAwIDogX2IuY2FsbCh0YXBPYnNlcnZlcik7XG4gICAgICAgICAgICB9KSk7XG4gICAgICAgIH0pXG4gICAgICAgIDpcbiAgICAgICAgICAgIGlkZW50aXR5XzEuaWRlbnRpdHk7XG59XG5leHBvcnRzLnRhcCA9IHRhcDtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPXRhcC5qcy5tYXAiLCJcInVzZSBzdHJpY3RcIjtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmV4cG9ydHMudGhyb3R0bGUgPSB2b2lkIDA7XG52YXIgbGlmdF8xID0gcmVxdWlyZShcIi4uL3V0aWwvbGlmdFwiKTtcbnZhciBPcGVyYXRvclN1YnNjcmliZXJfMSA9IHJlcXVpcmUoXCIuL09wZXJhdG9yU3Vic2NyaWJlclwiKTtcbnZhciBpbm5lckZyb21fMSA9IHJlcXVpcmUoXCIuLi9vYnNlcnZhYmxlL2lubmVyRnJvbVwiKTtcbmZ1bmN0aW9uIHRocm90dGxlKGR1cmF0aW9uU2VsZWN0b3IsIGNvbmZpZykge1xuICAgIHJldHVybiBsaWZ0XzEub3BlcmF0ZShmdW5jdGlvbiAoc291cmNlLCBzdWJzY3JpYmVyKSB7XG4gICAgICAgIHZhciBfYSA9IGNvbmZpZyAhPT0gbnVsbCAmJiBjb25maWcgIT09IHZvaWQgMCA/IGNvbmZpZyA6IHt9LCBfYiA9IF9hLmxlYWRpbmcsIGxlYWRpbmcgPSBfYiA9PT0gdm9pZCAwID8gdHJ1ZSA6IF9iLCBfYyA9IF9hLnRyYWlsaW5nLCB0cmFpbGluZyA9IF9jID09PSB2b2lkIDAgPyBmYWxzZSA6IF9jO1xuICAgICAgICB2YXIgaGFzVmFsdWUgPSBmYWxzZTtcbiAgICAgICAgdmFyIHNlbmRWYWx1ZSA9IG51bGw7XG4gICAgICAgIHZhciB0aHJvdHRsZWQgPSBudWxsO1xuICAgICAgICB2YXIgaXNDb21wbGV0ZSA9IGZhbHNlO1xuICAgICAgICB2YXIgZW5kVGhyb3R0bGluZyA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIHRocm90dGxlZCA9PT0gbnVsbCB8fCB0aHJvdHRsZWQgPT09IHZvaWQgMCA/IHZvaWQgMCA6IHRocm90dGxlZC51bnN1YnNjcmliZSgpO1xuICAgICAgICAgICAgdGhyb3R0bGVkID0gbnVsbDtcbiAgICAgICAgICAgIGlmICh0cmFpbGluZykge1xuICAgICAgICAgICAgICAgIHNlbmQoKTtcbiAgICAgICAgICAgICAgICBpc0NvbXBsZXRlICYmIHN1YnNjcmliZXIuY29tcGxldGUoKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfTtcbiAgICAgICAgdmFyIGNsZWFudXBUaHJvdHRsaW5nID0gZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgdGhyb3R0bGVkID0gbnVsbDtcbiAgICAgICAgICAgIGlzQ29tcGxldGUgJiYgc3Vic2NyaWJlci5jb21wbGV0ZSgpO1xuICAgICAgICB9O1xuICAgICAgICB2YXIgc3RhcnRUaHJvdHRsZSA9IGZ1bmN0aW9uICh2YWx1ZSkge1xuICAgICAgICAgICAgcmV0dXJuICh0aHJvdHRsZWQgPSBpbm5lckZyb21fMS5pbm5lckZyb20oZHVyYXRpb25TZWxlY3Rvcih2YWx1ZSkpLnN1YnNjcmliZShPcGVyYXRvclN1YnNjcmliZXJfMS5jcmVhdGVPcGVyYXRvclN1YnNjcmliZXIoc3Vic2NyaWJlciwgZW5kVGhyb3R0bGluZywgY2xlYW51cFRocm90dGxpbmcpKSk7XG4gICAgICAgIH07XG4gICAgICAgIHZhciBzZW5kID0gZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgaWYgKGhhc1ZhbHVlKSB7XG4gICAgICAgICAgICAgICAgaGFzVmFsdWUgPSBmYWxzZTtcbiAgICAgICAgICAgICAgICB2YXIgdmFsdWUgPSBzZW5kVmFsdWU7XG4gICAgICAgICAgICAgICAgc2VuZFZhbHVlID0gbnVsbDtcbiAgICAgICAgICAgICAgICBzdWJzY3JpYmVyLm5leHQodmFsdWUpO1xuICAgICAgICAgICAgICAgICFpc0NvbXBsZXRlICYmIHN0YXJ0VGhyb3R0bGUodmFsdWUpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9O1xuICAgICAgICBzb3VyY2Uuc3Vic2NyaWJlKE9wZXJhdG9yU3Vic2NyaWJlcl8xLmNyZWF0ZU9wZXJhdG9yU3Vic2NyaWJlcihzdWJzY3JpYmVyLCBmdW5jdGlvbiAodmFsdWUpIHtcbiAgICAgICAgICAgIGhhc1ZhbHVlID0gdHJ1ZTtcbiAgICAgICAgICAgIHNlbmRWYWx1ZSA9IHZhbHVlO1xuICAgICAgICAgICAgISh0aHJvdHRsZWQgJiYgIXRocm90dGxlZC5jbG9zZWQpICYmIChsZWFkaW5nID8gc2VuZCgpIDogc3RhcnRUaHJvdHRsZSh2YWx1ZSkpO1xuICAgICAgICB9LCBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICBpc0NvbXBsZXRlID0gdHJ1ZTtcbiAgICAgICAgICAgICEodHJhaWxpbmcgJiYgaGFzVmFsdWUgJiYgdGhyb3R0bGVkICYmICF0aHJvdHRsZWQuY2xvc2VkKSAmJiBzdWJzY3JpYmVyLmNvbXBsZXRlKCk7XG4gICAgICAgIH0pKTtcbiAgICB9KTtcbn1cbmV4cG9ydHMudGhyb3R0bGUgPSB0aHJvdHRsZTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPXRocm90dGxlLmpzLm1hcCIsIlwidXNlIHN0cmljdFwiO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuZXhwb3J0cy50aHJvdHRsZVRpbWUgPSB2b2lkIDA7XG52YXIgYXN5bmNfMSA9IHJlcXVpcmUoXCIuLi9zY2hlZHVsZXIvYXN5bmNcIik7XG52YXIgdGhyb3R0bGVfMSA9IHJlcXVpcmUoXCIuL3Rocm90dGxlXCIpO1xudmFyIHRpbWVyXzEgPSByZXF1aXJlKFwiLi4vb2JzZXJ2YWJsZS90aW1lclwiKTtcbmZ1bmN0aW9uIHRocm90dGxlVGltZShkdXJhdGlvbiwgc2NoZWR1bGVyLCBjb25maWcpIHtcbiAgICBpZiAoc2NoZWR1bGVyID09PSB2b2lkIDApIHsgc2NoZWR1bGVyID0gYXN5bmNfMS5hc3luY1NjaGVkdWxlcjsgfVxuICAgIHZhciBkdXJhdGlvbiQgPSB0aW1lcl8xLnRpbWVyKGR1cmF0aW9uLCBzY2hlZHVsZXIpO1xuICAgIHJldHVybiB0aHJvdHRsZV8xLnRocm90dGxlKGZ1bmN0aW9uICgpIHsgcmV0dXJuIGR1cmF0aW9uJDsgfSwgY29uZmlnKTtcbn1cbmV4cG9ydHMudGhyb3R0bGVUaW1lID0gdGhyb3R0bGVUaW1lO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9dGhyb3R0bGVUaW1lLmpzLm1hcCIsIlwidXNlIHN0cmljdFwiO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuZXhwb3J0cy50aHJvd0lmRW1wdHkgPSB2b2lkIDA7XG52YXIgRW1wdHlFcnJvcl8xID0gcmVxdWlyZShcIi4uL3V0aWwvRW1wdHlFcnJvclwiKTtcbnZhciBsaWZ0XzEgPSByZXF1aXJlKFwiLi4vdXRpbC9saWZ0XCIpO1xudmFyIE9wZXJhdG9yU3Vic2NyaWJlcl8xID0gcmVxdWlyZShcIi4vT3BlcmF0b3JTdWJzY3JpYmVyXCIpO1xuZnVuY3Rpb24gdGhyb3dJZkVtcHR5KGVycm9yRmFjdG9yeSkge1xuICAgIGlmIChlcnJvckZhY3RvcnkgPT09IHZvaWQgMCkgeyBlcnJvckZhY3RvcnkgPSBkZWZhdWx0RXJyb3JGYWN0b3J5OyB9XG4gICAgcmV0dXJuIGxpZnRfMS5vcGVyYXRlKGZ1bmN0aW9uIChzb3VyY2UsIHN1YnNjcmliZXIpIHtcbiAgICAgICAgdmFyIGhhc1ZhbHVlID0gZmFsc2U7XG4gICAgICAgIHNvdXJjZS5zdWJzY3JpYmUoT3BlcmF0b3JTdWJzY3JpYmVyXzEuY3JlYXRlT3BlcmF0b3JTdWJzY3JpYmVyKHN1YnNjcmliZXIsIGZ1bmN0aW9uICh2YWx1ZSkge1xuICAgICAgICAgICAgaGFzVmFsdWUgPSB0cnVlO1xuICAgICAgICAgICAgc3Vic2NyaWJlci5uZXh0KHZhbHVlKTtcbiAgICAgICAgfSwgZnVuY3Rpb24gKCkgeyByZXR1cm4gKGhhc1ZhbHVlID8gc3Vic2NyaWJlci5jb21wbGV0ZSgpIDogc3Vic2NyaWJlci5lcnJvcihlcnJvckZhY3RvcnkoKSkpOyB9KSk7XG4gICAgfSk7XG59XG5leHBvcnRzLnRocm93SWZFbXB0eSA9IHRocm93SWZFbXB0eTtcbmZ1bmN0aW9uIGRlZmF1bHRFcnJvckZhY3RvcnkoKSB7XG4gICAgcmV0dXJuIG5ldyBFbXB0eUVycm9yXzEuRW1wdHlFcnJvcigpO1xufVxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9dGhyb3dJZkVtcHR5LmpzLm1hcCIsIlwidXNlIHN0cmljdFwiO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuZXhwb3J0cy5UaW1lSW50ZXJ2YWwgPSBleHBvcnRzLnRpbWVJbnRlcnZhbCA9IHZvaWQgMDtcbnZhciBhc3luY18xID0gcmVxdWlyZShcIi4uL3NjaGVkdWxlci9hc3luY1wiKTtcbnZhciBsaWZ0XzEgPSByZXF1aXJlKFwiLi4vdXRpbC9saWZ0XCIpO1xudmFyIE9wZXJhdG9yU3Vic2NyaWJlcl8xID0gcmVxdWlyZShcIi4vT3BlcmF0b3JTdWJzY3JpYmVyXCIpO1xuZnVuY3Rpb24gdGltZUludGVydmFsKHNjaGVkdWxlcikge1xuICAgIGlmIChzY2hlZHVsZXIgPT09IHZvaWQgMCkgeyBzY2hlZHVsZXIgPSBhc3luY18xLmFzeW5jU2NoZWR1bGVyOyB9XG4gICAgcmV0dXJuIGxpZnRfMS5vcGVyYXRlKGZ1bmN0aW9uIChzb3VyY2UsIHN1YnNjcmliZXIpIHtcbiAgICAgICAgdmFyIGxhc3QgPSBzY2hlZHVsZXIubm93KCk7XG4gICAgICAgIHNvdXJjZS5zdWJzY3JpYmUoT3BlcmF0b3JTdWJzY3JpYmVyXzEuY3JlYXRlT3BlcmF0b3JTdWJzY3JpYmVyKHN1YnNjcmliZXIsIGZ1bmN0aW9uICh2YWx1ZSkge1xuICAgICAgICAgICAgdmFyIG5vdyA9IHNjaGVkdWxlci5ub3coKTtcbiAgICAgICAgICAgIHZhciBpbnRlcnZhbCA9IG5vdyAtIGxhc3Q7XG4gICAgICAgICAgICBsYXN0ID0gbm93O1xuICAgICAgICAgICAgc3Vic2NyaWJlci5uZXh0KG5ldyBUaW1lSW50ZXJ2YWwodmFsdWUsIGludGVydmFsKSk7XG4gICAgICAgIH0pKTtcbiAgICB9KTtcbn1cbmV4cG9ydHMudGltZUludGVydmFsID0gdGltZUludGVydmFsO1xudmFyIFRpbWVJbnRlcnZhbCA9IChmdW5jdGlvbiAoKSB7XG4gICAgZnVuY3Rpb24gVGltZUludGVydmFsKHZhbHVlLCBpbnRlcnZhbCkge1xuICAgICAgICB0aGlzLnZhbHVlID0gdmFsdWU7XG4gICAgICAgIHRoaXMuaW50ZXJ2YWwgPSBpbnRlcnZhbDtcbiAgICB9XG4gICAgcmV0dXJuIFRpbWVJbnRlcnZhbDtcbn0oKSk7XG5leHBvcnRzLlRpbWVJbnRlcnZhbCA9IFRpbWVJbnRlcnZhbDtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPXRpbWVJbnRlcnZhbC5qcy5tYXAiLCJcInVzZSBzdHJpY3RcIjtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmV4cG9ydHMudGltZW91dCA9IGV4cG9ydHMuVGltZW91dEVycm9yID0gdm9pZCAwO1xudmFyIGFzeW5jXzEgPSByZXF1aXJlKFwiLi4vc2NoZWR1bGVyL2FzeW5jXCIpO1xudmFyIGlzRGF0ZV8xID0gcmVxdWlyZShcIi4uL3V0aWwvaXNEYXRlXCIpO1xudmFyIGxpZnRfMSA9IHJlcXVpcmUoXCIuLi91dGlsL2xpZnRcIik7XG52YXIgaW5uZXJGcm9tXzEgPSByZXF1aXJlKFwiLi4vb2JzZXJ2YWJsZS9pbm5lckZyb21cIik7XG52YXIgY3JlYXRlRXJyb3JDbGFzc18xID0gcmVxdWlyZShcIi4uL3V0aWwvY3JlYXRlRXJyb3JDbGFzc1wiKTtcbnZhciBPcGVyYXRvclN1YnNjcmliZXJfMSA9IHJlcXVpcmUoXCIuL09wZXJhdG9yU3Vic2NyaWJlclwiKTtcbnZhciBleGVjdXRlU2NoZWR1bGVfMSA9IHJlcXVpcmUoXCIuLi91dGlsL2V4ZWN1dGVTY2hlZHVsZVwiKTtcbmV4cG9ydHMuVGltZW91dEVycm9yID0gY3JlYXRlRXJyb3JDbGFzc18xLmNyZWF0ZUVycm9yQ2xhc3MoZnVuY3Rpb24gKF9zdXBlcikge1xuICAgIHJldHVybiBmdW5jdGlvbiBUaW1lb3V0RXJyb3JJbXBsKGluZm8pIHtcbiAgICAgICAgaWYgKGluZm8gPT09IHZvaWQgMCkgeyBpbmZvID0gbnVsbDsgfVxuICAgICAgICBfc3VwZXIodGhpcyk7XG4gICAgICAgIHRoaXMubWVzc2FnZSA9ICdUaW1lb3V0IGhhcyBvY2N1cnJlZCc7XG4gICAgICAgIHRoaXMubmFtZSA9ICdUaW1lb3V0RXJyb3InO1xuICAgICAgICB0aGlzLmluZm8gPSBpbmZvO1xuICAgIH07XG59KTtcbmZ1bmN0aW9uIHRpbWVvdXQoY29uZmlnLCBzY2hlZHVsZXJBcmcpIHtcbiAgICB2YXIgX2EgPSAoaXNEYXRlXzEuaXNWYWxpZERhdGUoY29uZmlnKSA/IHsgZmlyc3Q6IGNvbmZpZyB9IDogdHlwZW9mIGNvbmZpZyA9PT0gJ251bWJlcicgPyB7IGVhY2g6IGNvbmZpZyB9IDogY29uZmlnKSwgZmlyc3QgPSBfYS5maXJzdCwgZWFjaCA9IF9hLmVhY2gsIF9iID0gX2Eud2l0aCwgX3dpdGggPSBfYiA9PT0gdm9pZCAwID8gdGltZW91dEVycm9yRmFjdG9yeSA6IF9iLCBfYyA9IF9hLnNjaGVkdWxlciwgc2NoZWR1bGVyID0gX2MgPT09IHZvaWQgMCA/IHNjaGVkdWxlckFyZyAhPT0gbnVsbCAmJiBzY2hlZHVsZXJBcmcgIT09IHZvaWQgMCA/IHNjaGVkdWxlckFyZyA6IGFzeW5jXzEuYXN5bmNTY2hlZHVsZXIgOiBfYywgX2QgPSBfYS5tZXRhLCBtZXRhID0gX2QgPT09IHZvaWQgMCA/IG51bGwgOiBfZDtcbiAgICBpZiAoZmlyc3QgPT0gbnVsbCAmJiBlYWNoID09IG51bGwpIHtcbiAgICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcignTm8gdGltZW91dCBwcm92aWRlZC4nKTtcbiAgICB9XG4gICAgcmV0dXJuIGxpZnRfMS5vcGVyYXRlKGZ1bmN0aW9uIChzb3VyY2UsIHN1YnNjcmliZXIpIHtcbiAgICAgICAgdmFyIG9yaWdpbmFsU291cmNlU3Vic2NyaXB0aW9uO1xuICAgICAgICB2YXIgdGltZXJTdWJzY3JpcHRpb247XG4gICAgICAgIHZhciBsYXN0VmFsdWUgPSBudWxsO1xuICAgICAgICB2YXIgc2VlbiA9IDA7XG4gICAgICAgIHZhciBzdGFydFRpbWVyID0gZnVuY3Rpb24gKGRlbGF5KSB7XG4gICAgICAgICAgICB0aW1lclN1YnNjcmlwdGlvbiA9IGV4ZWN1dGVTY2hlZHVsZV8xLmV4ZWN1dGVTY2hlZHVsZShzdWJzY3JpYmVyLCBzY2hlZHVsZXIsIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgICAgICAgICBvcmlnaW5hbFNvdXJjZVN1YnNjcmlwdGlvbi51bnN1YnNjcmliZSgpO1xuICAgICAgICAgICAgICAgICAgICBpbm5lckZyb21fMS5pbm5lckZyb20oX3dpdGgoe1xuICAgICAgICAgICAgICAgICAgICAgICAgbWV0YTogbWV0YSxcbiAgICAgICAgICAgICAgICAgICAgICAgIGxhc3RWYWx1ZTogbGFzdFZhbHVlLFxuICAgICAgICAgICAgICAgICAgICAgICAgc2Vlbjogc2VlbixcbiAgICAgICAgICAgICAgICAgICAgfSkpLnN1YnNjcmliZShzdWJzY3JpYmVyKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgY2F0Y2ggKGVycikge1xuICAgICAgICAgICAgICAgICAgICBzdWJzY3JpYmVyLmVycm9yKGVycik7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSwgZGVsYXkpO1xuICAgICAgICB9O1xuICAgICAgICBvcmlnaW5hbFNvdXJjZVN1YnNjcmlwdGlvbiA9IHNvdXJjZS5zdWJzY3JpYmUoT3BlcmF0b3JTdWJzY3JpYmVyXzEuY3JlYXRlT3BlcmF0b3JTdWJzY3JpYmVyKHN1YnNjcmliZXIsIGZ1bmN0aW9uICh2YWx1ZSkge1xuICAgICAgICAgICAgdGltZXJTdWJzY3JpcHRpb24gPT09IG51bGwgfHwgdGltZXJTdWJzY3JpcHRpb24gPT09IHZvaWQgMCA/IHZvaWQgMCA6IHRpbWVyU3Vic2NyaXB0aW9uLnVuc3Vic2NyaWJlKCk7XG4gICAgICAgICAgICBzZWVuKys7XG4gICAgICAgICAgICBzdWJzY3JpYmVyLm5leHQoKGxhc3RWYWx1ZSA9IHZhbHVlKSk7XG4gICAgICAgICAgICBlYWNoID4gMCAmJiBzdGFydFRpbWVyKGVhY2gpO1xuICAgICAgICB9LCB1bmRlZmluZWQsIHVuZGVmaW5lZCwgZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgaWYgKCEodGltZXJTdWJzY3JpcHRpb24gPT09IG51bGwgfHwgdGltZXJTdWJzY3JpcHRpb24gPT09IHZvaWQgMCA/IHZvaWQgMCA6IHRpbWVyU3Vic2NyaXB0aW9uLmNsb3NlZCkpIHtcbiAgICAgICAgICAgICAgICB0aW1lclN1YnNjcmlwdGlvbiA9PT0gbnVsbCB8fCB0aW1lclN1YnNjcmlwdGlvbiA9PT0gdm9pZCAwID8gdm9pZCAwIDogdGltZXJTdWJzY3JpcHRpb24udW5zdWJzY3JpYmUoKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGxhc3RWYWx1ZSA9IG51bGw7XG4gICAgICAgIH0pKTtcbiAgICAgICAgIXNlZW4gJiYgc3RhcnRUaW1lcihmaXJzdCAhPSBudWxsID8gKHR5cGVvZiBmaXJzdCA9PT0gJ251bWJlcicgPyBmaXJzdCA6ICtmaXJzdCAtIHNjaGVkdWxlci5ub3coKSkgOiBlYWNoKTtcbiAgICB9KTtcbn1cbmV4cG9ydHMudGltZW91dCA9IHRpbWVvdXQ7XG5mdW5jdGlvbiB0aW1lb3V0RXJyb3JGYWN0b3J5KGluZm8pIHtcbiAgICB0aHJvdyBuZXcgZXhwb3J0cy5UaW1lb3V0RXJyb3IoaW5mbyk7XG59XG4vLyMgc291cmNlTWFwcGluZ1VSTD10aW1lb3V0LmpzLm1hcCIsIlwidXNlIHN0cmljdFwiO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuZXhwb3J0cy50aW1lb3V0V2l0aCA9IHZvaWQgMDtcbnZhciBhc3luY18xID0gcmVxdWlyZShcIi4uL3NjaGVkdWxlci9hc3luY1wiKTtcbnZhciBpc0RhdGVfMSA9IHJlcXVpcmUoXCIuLi91dGlsL2lzRGF0ZVwiKTtcbnZhciB0aW1lb3V0XzEgPSByZXF1aXJlKFwiLi90aW1lb3V0XCIpO1xuZnVuY3Rpb24gdGltZW91dFdpdGgoZHVlLCB3aXRoT2JzZXJ2YWJsZSwgc2NoZWR1bGVyKSB7XG4gICAgdmFyIGZpcnN0O1xuICAgIHZhciBlYWNoO1xuICAgIHZhciBfd2l0aDtcbiAgICBzY2hlZHVsZXIgPSBzY2hlZHVsZXIgIT09IG51bGwgJiYgc2NoZWR1bGVyICE9PSB2b2lkIDAgPyBzY2hlZHVsZXIgOiBhc3luY18xLmFzeW5jO1xuICAgIGlmIChpc0RhdGVfMS5pc1ZhbGlkRGF0ZShkdWUpKSB7XG4gICAgICAgIGZpcnN0ID0gZHVlO1xuICAgIH1cbiAgICBlbHNlIGlmICh0eXBlb2YgZHVlID09PSAnbnVtYmVyJykge1xuICAgICAgICBlYWNoID0gZHVlO1xuICAgIH1cbiAgICBpZiAod2l0aE9ic2VydmFibGUpIHtcbiAgICAgICAgX3dpdGggPSBmdW5jdGlvbiAoKSB7IHJldHVybiB3aXRoT2JzZXJ2YWJsZTsgfTtcbiAgICB9XG4gICAgZWxzZSB7XG4gICAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ05vIG9ic2VydmFibGUgcHJvdmlkZWQgdG8gc3dpdGNoIHRvJyk7XG4gICAgfVxuICAgIGlmIChmaXJzdCA9PSBudWxsICYmIGVhY2ggPT0gbnVsbCkge1xuICAgICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCdObyB0aW1lb3V0IHByb3ZpZGVkLicpO1xuICAgIH1cbiAgICByZXR1cm4gdGltZW91dF8xLnRpbWVvdXQoe1xuICAgICAgICBmaXJzdDogZmlyc3QsXG4gICAgICAgIGVhY2g6IGVhY2gsXG4gICAgICAgIHNjaGVkdWxlcjogc2NoZWR1bGVyLFxuICAgICAgICB3aXRoOiBfd2l0aCxcbiAgICB9KTtcbn1cbmV4cG9ydHMudGltZW91dFdpdGggPSB0aW1lb3V0V2l0aDtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPXRpbWVvdXRXaXRoLmpzLm1hcCIsIlwidXNlIHN0cmljdFwiO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuZXhwb3J0cy50aW1lc3RhbXAgPSB2b2lkIDA7XG52YXIgZGF0ZVRpbWVzdGFtcFByb3ZpZGVyXzEgPSByZXF1aXJlKFwiLi4vc2NoZWR1bGVyL2RhdGVUaW1lc3RhbXBQcm92aWRlclwiKTtcbnZhciBtYXBfMSA9IHJlcXVpcmUoXCIuL21hcFwiKTtcbmZ1bmN0aW9uIHRpbWVzdGFtcCh0aW1lc3RhbXBQcm92aWRlcikge1xuICAgIGlmICh0aW1lc3RhbXBQcm92aWRlciA9PT0gdm9pZCAwKSB7IHRpbWVzdGFtcFByb3ZpZGVyID0gZGF0ZVRpbWVzdGFtcFByb3ZpZGVyXzEuZGF0ZVRpbWVzdGFtcFByb3ZpZGVyOyB9XG4gICAgcmV0dXJuIG1hcF8xLm1hcChmdW5jdGlvbiAodmFsdWUpIHsgcmV0dXJuICh7IHZhbHVlOiB2YWx1ZSwgdGltZXN0YW1wOiB0aW1lc3RhbXBQcm92aWRlci5ub3coKSB9KTsgfSk7XG59XG5leHBvcnRzLnRpbWVzdGFtcCA9IHRpbWVzdGFtcDtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPXRpbWVzdGFtcC5qcy5tYXAiLCJcInVzZSBzdHJpY3RcIjtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmV4cG9ydHMudG9BcnJheSA9IHZvaWQgMDtcbnZhciByZWR1Y2VfMSA9IHJlcXVpcmUoXCIuL3JlZHVjZVwiKTtcbnZhciBsaWZ0XzEgPSByZXF1aXJlKFwiLi4vdXRpbC9saWZ0XCIpO1xudmFyIGFyclJlZHVjZXIgPSBmdW5jdGlvbiAoYXJyLCB2YWx1ZSkgeyByZXR1cm4gKGFyci5wdXNoKHZhbHVlKSwgYXJyKTsgfTtcbmZ1bmN0aW9uIHRvQXJyYXkoKSB7XG4gICAgcmV0dXJuIGxpZnRfMS5vcGVyYXRlKGZ1bmN0aW9uIChzb3VyY2UsIHN1YnNjcmliZXIpIHtcbiAgICAgICAgcmVkdWNlXzEucmVkdWNlKGFyclJlZHVjZXIsIFtdKShzb3VyY2UpLnN1YnNjcmliZShzdWJzY3JpYmVyKTtcbiAgICB9KTtcbn1cbmV4cG9ydHMudG9BcnJheSA9IHRvQXJyYXk7XG4vLyMgc291cmNlTWFwcGluZ1VSTD10b0FycmF5LmpzLm1hcCIsIlwidXNlIHN0cmljdFwiO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuZXhwb3J0cy53aW5kb3cgPSB2b2lkIDA7XG52YXIgU3ViamVjdF8xID0gcmVxdWlyZShcIi4uL1N1YmplY3RcIik7XG52YXIgbGlmdF8xID0gcmVxdWlyZShcIi4uL3V0aWwvbGlmdFwiKTtcbnZhciBPcGVyYXRvclN1YnNjcmliZXJfMSA9IHJlcXVpcmUoXCIuL09wZXJhdG9yU3Vic2NyaWJlclwiKTtcbnZhciBub29wXzEgPSByZXF1aXJlKFwiLi4vdXRpbC9ub29wXCIpO1xudmFyIGlubmVyRnJvbV8xID0gcmVxdWlyZShcIi4uL29ic2VydmFibGUvaW5uZXJGcm9tXCIpO1xuZnVuY3Rpb24gd2luZG93KHdpbmRvd0JvdW5kYXJpZXMpIHtcbiAgICByZXR1cm4gbGlmdF8xLm9wZXJhdGUoZnVuY3Rpb24gKHNvdXJjZSwgc3Vic2NyaWJlcikge1xuICAgICAgICB2YXIgd2luZG93U3ViamVjdCA9IG5ldyBTdWJqZWN0XzEuU3ViamVjdCgpO1xuICAgICAgICBzdWJzY3JpYmVyLm5leHQod2luZG93U3ViamVjdC5hc09ic2VydmFibGUoKSk7XG4gICAgICAgIHZhciBlcnJvckhhbmRsZXIgPSBmdW5jdGlvbiAoZXJyKSB7XG4gICAgICAgICAgICB3aW5kb3dTdWJqZWN0LmVycm9yKGVycik7XG4gICAgICAgICAgICBzdWJzY3JpYmVyLmVycm9yKGVycik7XG4gICAgICAgIH07XG4gICAgICAgIHNvdXJjZS5zdWJzY3JpYmUoT3BlcmF0b3JTdWJzY3JpYmVyXzEuY3JlYXRlT3BlcmF0b3JTdWJzY3JpYmVyKHN1YnNjcmliZXIsIGZ1bmN0aW9uICh2YWx1ZSkgeyByZXR1cm4gd2luZG93U3ViamVjdCA9PT0gbnVsbCB8fCB3aW5kb3dTdWJqZWN0ID09PSB2b2lkIDAgPyB2b2lkIDAgOiB3aW5kb3dTdWJqZWN0Lm5leHQodmFsdWUpOyB9LCBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICB3aW5kb3dTdWJqZWN0LmNvbXBsZXRlKCk7XG4gICAgICAgICAgICBzdWJzY3JpYmVyLmNvbXBsZXRlKCk7XG4gICAgICAgIH0sIGVycm9ySGFuZGxlcikpO1xuICAgICAgICBpbm5lckZyb21fMS5pbm5lckZyb20od2luZG93Qm91bmRhcmllcykuc3Vic2NyaWJlKE9wZXJhdG9yU3Vic2NyaWJlcl8xLmNyZWF0ZU9wZXJhdG9yU3Vic2NyaWJlcihzdWJzY3JpYmVyLCBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICB3aW5kb3dTdWJqZWN0LmNvbXBsZXRlKCk7XG4gICAgICAgICAgICBzdWJzY3JpYmVyLm5leHQoKHdpbmRvd1N1YmplY3QgPSBuZXcgU3ViamVjdF8xLlN1YmplY3QoKSkpO1xuICAgICAgICB9LCBub29wXzEubm9vcCwgZXJyb3JIYW5kbGVyKSk7XG4gICAgICAgIHJldHVybiBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICB3aW5kb3dTdWJqZWN0ID09PSBudWxsIHx8IHdpbmRvd1N1YmplY3QgPT09IHZvaWQgMCA/IHZvaWQgMCA6IHdpbmRvd1N1YmplY3QudW5zdWJzY3JpYmUoKTtcbiAgICAgICAgICAgIHdpbmRvd1N1YmplY3QgPSBudWxsO1xuICAgICAgICB9O1xuICAgIH0pO1xufVxuZXhwb3J0cy53aW5kb3cgPSB3aW5kb3c7XG4vLyMgc291cmNlTWFwcGluZ1VSTD13aW5kb3cuanMubWFwIiwiXCJ1c2Ugc3RyaWN0XCI7XG52YXIgX192YWx1ZXMgPSAodGhpcyAmJiB0aGlzLl9fdmFsdWVzKSB8fCBmdW5jdGlvbihvKSB7XG4gICAgdmFyIHMgPSB0eXBlb2YgU3ltYm9sID09PSBcImZ1bmN0aW9uXCIgJiYgU3ltYm9sLml0ZXJhdG9yLCBtID0gcyAmJiBvW3NdLCBpID0gMDtcbiAgICBpZiAobSkgcmV0dXJuIG0uY2FsbChvKTtcbiAgICBpZiAobyAmJiB0eXBlb2Ygby5sZW5ndGggPT09IFwibnVtYmVyXCIpIHJldHVybiB7XG4gICAgICAgIG5leHQ6IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIGlmIChvICYmIGkgPj0gby5sZW5ndGgpIG8gPSB2b2lkIDA7XG4gICAgICAgICAgICByZXR1cm4geyB2YWx1ZTogbyAmJiBvW2krK10sIGRvbmU6ICFvIH07XG4gICAgICAgIH1cbiAgICB9O1xuICAgIHRocm93IG5ldyBUeXBlRXJyb3IocyA/IFwiT2JqZWN0IGlzIG5vdCBpdGVyYWJsZS5cIiA6IFwiU3ltYm9sLml0ZXJhdG9yIGlzIG5vdCBkZWZpbmVkLlwiKTtcbn07XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5leHBvcnRzLndpbmRvd0NvdW50ID0gdm9pZCAwO1xudmFyIFN1YmplY3RfMSA9IHJlcXVpcmUoXCIuLi9TdWJqZWN0XCIpO1xudmFyIGxpZnRfMSA9IHJlcXVpcmUoXCIuLi91dGlsL2xpZnRcIik7XG52YXIgT3BlcmF0b3JTdWJzY3JpYmVyXzEgPSByZXF1aXJlKFwiLi9PcGVyYXRvclN1YnNjcmliZXJcIik7XG5mdW5jdGlvbiB3aW5kb3dDb3VudCh3aW5kb3dTaXplLCBzdGFydFdpbmRvd0V2ZXJ5KSB7XG4gICAgaWYgKHN0YXJ0V2luZG93RXZlcnkgPT09IHZvaWQgMCkgeyBzdGFydFdpbmRvd0V2ZXJ5ID0gMDsgfVxuICAgIHZhciBzdGFydEV2ZXJ5ID0gc3RhcnRXaW5kb3dFdmVyeSA+IDAgPyBzdGFydFdpbmRvd0V2ZXJ5IDogd2luZG93U2l6ZTtcbiAgICByZXR1cm4gbGlmdF8xLm9wZXJhdGUoZnVuY3Rpb24gKHNvdXJjZSwgc3Vic2NyaWJlcikge1xuICAgICAgICB2YXIgd2luZG93cyA9IFtuZXcgU3ViamVjdF8xLlN1YmplY3QoKV07XG4gICAgICAgIHZhciBzdGFydHMgPSBbXTtcbiAgICAgICAgdmFyIGNvdW50ID0gMDtcbiAgICAgICAgc3Vic2NyaWJlci5uZXh0KHdpbmRvd3NbMF0uYXNPYnNlcnZhYmxlKCkpO1xuICAgICAgICBzb3VyY2Uuc3Vic2NyaWJlKE9wZXJhdG9yU3Vic2NyaWJlcl8xLmNyZWF0ZU9wZXJhdG9yU3Vic2NyaWJlcihzdWJzY3JpYmVyLCBmdW5jdGlvbiAodmFsdWUpIHtcbiAgICAgICAgICAgIHZhciBlXzEsIF9hO1xuICAgICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgICAgICBmb3IgKHZhciB3aW5kb3dzXzEgPSBfX3ZhbHVlcyh3aW5kb3dzKSwgd2luZG93c18xXzEgPSB3aW5kb3dzXzEubmV4dCgpOyAhd2luZG93c18xXzEuZG9uZTsgd2luZG93c18xXzEgPSB3aW5kb3dzXzEubmV4dCgpKSB7XG4gICAgICAgICAgICAgICAgICAgIHZhciB3aW5kb3dfMSA9IHdpbmRvd3NfMV8xLnZhbHVlO1xuICAgICAgICAgICAgICAgICAgICB3aW5kb3dfMS5uZXh0KHZhbHVlKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBjYXRjaCAoZV8xXzEpIHsgZV8xID0geyBlcnJvcjogZV8xXzEgfTsgfVxuICAgICAgICAgICAgZmluYWxseSB7XG4gICAgICAgICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgICAgICAgICAgaWYgKHdpbmRvd3NfMV8xICYmICF3aW5kb3dzXzFfMS5kb25lICYmIChfYSA9IHdpbmRvd3NfMS5yZXR1cm4pKSBfYS5jYWxsKHdpbmRvd3NfMSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGZpbmFsbHkgeyBpZiAoZV8xKSB0aHJvdyBlXzEuZXJyb3I7IH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHZhciBjID0gY291bnQgLSB3aW5kb3dTaXplICsgMTtcbiAgICAgICAgICAgIGlmIChjID49IDAgJiYgYyAlIHN0YXJ0RXZlcnkgPT09IDApIHtcbiAgICAgICAgICAgICAgICB3aW5kb3dzLnNoaWZ0KCkuY29tcGxldGUoKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmICgrK2NvdW50ICUgc3RhcnRFdmVyeSA9PT0gMCkge1xuICAgICAgICAgICAgICAgIHZhciB3aW5kb3dfMiA9IG5ldyBTdWJqZWN0XzEuU3ViamVjdCgpO1xuICAgICAgICAgICAgICAgIHdpbmRvd3MucHVzaCh3aW5kb3dfMik7XG4gICAgICAgICAgICAgICAgc3Vic2NyaWJlci5uZXh0KHdpbmRvd18yLmFzT2JzZXJ2YWJsZSgpKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSwgZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgd2hpbGUgKHdpbmRvd3MubGVuZ3RoID4gMCkge1xuICAgICAgICAgICAgICAgIHdpbmRvd3Muc2hpZnQoKS5jb21wbGV0ZSgpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgc3Vic2NyaWJlci5jb21wbGV0ZSgpO1xuICAgICAgICB9LCBmdW5jdGlvbiAoZXJyKSB7XG4gICAgICAgICAgICB3aGlsZSAod2luZG93cy5sZW5ndGggPiAwKSB7XG4gICAgICAgICAgICAgICAgd2luZG93cy5zaGlmdCgpLmVycm9yKGVycik7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBzdWJzY3JpYmVyLmVycm9yKGVycik7XG4gICAgICAgIH0sIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIHN0YXJ0cyA9IG51bGw7XG4gICAgICAgICAgICB3aW5kb3dzID0gbnVsbDtcbiAgICAgICAgfSkpO1xuICAgIH0pO1xufVxuZXhwb3J0cy53aW5kb3dDb3VudCA9IHdpbmRvd0NvdW50O1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9d2luZG93Q291bnQuanMubWFwIiwiXCJ1c2Ugc3RyaWN0XCI7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5leHBvcnRzLndpbmRvd1RpbWUgPSB2b2lkIDA7XG52YXIgU3ViamVjdF8xID0gcmVxdWlyZShcIi4uL1N1YmplY3RcIik7XG52YXIgYXN5bmNfMSA9IHJlcXVpcmUoXCIuLi9zY2hlZHVsZXIvYXN5bmNcIik7XG52YXIgU3Vic2NyaXB0aW9uXzEgPSByZXF1aXJlKFwiLi4vU3Vic2NyaXB0aW9uXCIpO1xudmFyIGxpZnRfMSA9IHJlcXVpcmUoXCIuLi91dGlsL2xpZnRcIik7XG52YXIgT3BlcmF0b3JTdWJzY3JpYmVyXzEgPSByZXF1aXJlKFwiLi9PcGVyYXRvclN1YnNjcmliZXJcIik7XG52YXIgYXJyUmVtb3ZlXzEgPSByZXF1aXJlKFwiLi4vdXRpbC9hcnJSZW1vdmVcIik7XG52YXIgYXJnc18xID0gcmVxdWlyZShcIi4uL3V0aWwvYXJnc1wiKTtcbnZhciBleGVjdXRlU2NoZWR1bGVfMSA9IHJlcXVpcmUoXCIuLi91dGlsL2V4ZWN1dGVTY2hlZHVsZVwiKTtcbmZ1bmN0aW9uIHdpbmRvd1RpbWUod2luZG93VGltZVNwYW4pIHtcbiAgICB2YXIgX2EsIF9iO1xuICAgIHZhciBvdGhlckFyZ3MgPSBbXTtcbiAgICBmb3IgKHZhciBfaSA9IDE7IF9pIDwgYXJndW1lbnRzLmxlbmd0aDsgX2krKykge1xuICAgICAgICBvdGhlckFyZ3NbX2kgLSAxXSA9IGFyZ3VtZW50c1tfaV07XG4gICAgfVxuICAgIHZhciBzY2hlZHVsZXIgPSAoX2EgPSBhcmdzXzEucG9wU2NoZWR1bGVyKG90aGVyQXJncykpICE9PSBudWxsICYmIF9hICE9PSB2b2lkIDAgPyBfYSA6IGFzeW5jXzEuYXN5bmNTY2hlZHVsZXI7XG4gICAgdmFyIHdpbmRvd0NyZWF0aW9uSW50ZXJ2YWwgPSAoX2IgPSBvdGhlckFyZ3NbMF0pICE9PSBudWxsICYmIF9iICE9PSB2b2lkIDAgPyBfYiA6IG51bGw7XG4gICAgdmFyIG1heFdpbmRvd1NpemUgPSBvdGhlckFyZ3NbMV0gfHwgSW5maW5pdHk7XG4gICAgcmV0dXJuIGxpZnRfMS5vcGVyYXRlKGZ1bmN0aW9uIChzb3VyY2UsIHN1YnNjcmliZXIpIHtcbiAgICAgICAgdmFyIHdpbmRvd1JlY29yZHMgPSBbXTtcbiAgICAgICAgdmFyIHJlc3RhcnRPbkNsb3NlID0gZmFsc2U7XG4gICAgICAgIHZhciBjbG9zZVdpbmRvdyA9IGZ1bmN0aW9uIChyZWNvcmQpIHtcbiAgICAgICAgICAgIHZhciB3aW5kb3cgPSByZWNvcmQud2luZG93LCBzdWJzID0gcmVjb3JkLnN1YnM7XG4gICAgICAgICAgICB3aW5kb3cuY29tcGxldGUoKTtcbiAgICAgICAgICAgIHN1YnMudW5zdWJzY3JpYmUoKTtcbiAgICAgICAgICAgIGFyclJlbW92ZV8xLmFyclJlbW92ZSh3aW5kb3dSZWNvcmRzLCByZWNvcmQpO1xuICAgICAgICAgICAgcmVzdGFydE9uQ2xvc2UgJiYgc3RhcnRXaW5kb3coKTtcbiAgICAgICAgfTtcbiAgICAgICAgdmFyIHN0YXJ0V2luZG93ID0gZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgaWYgKHdpbmRvd1JlY29yZHMpIHtcbiAgICAgICAgICAgICAgICB2YXIgc3VicyA9IG5ldyBTdWJzY3JpcHRpb25fMS5TdWJzY3JpcHRpb24oKTtcbiAgICAgICAgICAgICAgICBzdWJzY3JpYmVyLmFkZChzdWJzKTtcbiAgICAgICAgICAgICAgICB2YXIgd2luZG93XzEgPSBuZXcgU3ViamVjdF8xLlN1YmplY3QoKTtcbiAgICAgICAgICAgICAgICB2YXIgcmVjb3JkXzEgPSB7XG4gICAgICAgICAgICAgICAgICAgIHdpbmRvdzogd2luZG93XzEsXG4gICAgICAgICAgICAgICAgICAgIHN1YnM6IHN1YnMsXG4gICAgICAgICAgICAgICAgICAgIHNlZW46IDAsXG4gICAgICAgICAgICAgICAgfTtcbiAgICAgICAgICAgICAgICB3aW5kb3dSZWNvcmRzLnB1c2gocmVjb3JkXzEpO1xuICAgICAgICAgICAgICAgIHN1YnNjcmliZXIubmV4dCh3aW5kb3dfMS5hc09ic2VydmFibGUoKSk7XG4gICAgICAgICAgICAgICAgZXhlY3V0ZVNjaGVkdWxlXzEuZXhlY3V0ZVNjaGVkdWxlKHN1YnMsIHNjaGVkdWxlciwgZnVuY3Rpb24gKCkgeyByZXR1cm4gY2xvc2VXaW5kb3cocmVjb3JkXzEpOyB9LCB3aW5kb3dUaW1lU3Bhbik7XG4gICAgICAgICAgICB9XG4gICAgICAgIH07XG4gICAgICAgIGlmICh3aW5kb3dDcmVhdGlvbkludGVydmFsICE9PSBudWxsICYmIHdpbmRvd0NyZWF0aW9uSW50ZXJ2YWwgPj0gMCkge1xuICAgICAgICAgICAgZXhlY3V0ZVNjaGVkdWxlXzEuZXhlY3V0ZVNjaGVkdWxlKHN1YnNjcmliZXIsIHNjaGVkdWxlciwgc3RhcnRXaW5kb3csIHdpbmRvd0NyZWF0aW9uSW50ZXJ2YWwsIHRydWUpO1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgcmVzdGFydE9uQ2xvc2UgPSB0cnVlO1xuICAgICAgICB9XG4gICAgICAgIHN0YXJ0V2luZG93KCk7XG4gICAgICAgIHZhciBsb29wID0gZnVuY3Rpb24gKGNiKSB7IHJldHVybiB3aW5kb3dSZWNvcmRzLnNsaWNlKCkuZm9yRWFjaChjYik7IH07XG4gICAgICAgIHZhciB0ZXJtaW5hdGUgPSBmdW5jdGlvbiAoY2IpIHtcbiAgICAgICAgICAgIGxvb3AoZnVuY3Rpb24gKF9hKSB7XG4gICAgICAgICAgICAgICAgdmFyIHdpbmRvdyA9IF9hLndpbmRvdztcbiAgICAgICAgICAgICAgICByZXR1cm4gY2Iod2luZG93KTtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgY2Ioc3Vic2NyaWJlcik7XG4gICAgICAgICAgICBzdWJzY3JpYmVyLnVuc3Vic2NyaWJlKCk7XG4gICAgICAgIH07XG4gICAgICAgIHNvdXJjZS5zdWJzY3JpYmUoT3BlcmF0b3JTdWJzY3JpYmVyXzEuY3JlYXRlT3BlcmF0b3JTdWJzY3JpYmVyKHN1YnNjcmliZXIsIGZ1bmN0aW9uICh2YWx1ZSkge1xuICAgICAgICAgICAgbG9vcChmdW5jdGlvbiAocmVjb3JkKSB7XG4gICAgICAgICAgICAgICAgcmVjb3JkLndpbmRvdy5uZXh0KHZhbHVlKTtcbiAgICAgICAgICAgICAgICBtYXhXaW5kb3dTaXplIDw9ICsrcmVjb3JkLnNlZW4gJiYgY2xvc2VXaW5kb3cocmVjb3JkKTtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9LCBmdW5jdGlvbiAoKSB7IHJldHVybiB0ZXJtaW5hdGUoZnVuY3Rpb24gKGNvbnN1bWVyKSB7IHJldHVybiBjb25zdW1lci5jb21wbGV0ZSgpOyB9KTsgfSwgZnVuY3Rpb24gKGVycikgeyByZXR1cm4gdGVybWluYXRlKGZ1bmN0aW9uIChjb25zdW1lcikgeyByZXR1cm4gY29uc3VtZXIuZXJyb3IoZXJyKTsgfSk7IH0pKTtcbiAgICAgICAgcmV0dXJuIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIHdpbmRvd1JlY29yZHMgPSBudWxsO1xuICAgICAgICB9O1xuICAgIH0pO1xufVxuZXhwb3J0cy53aW5kb3dUaW1lID0gd2luZG93VGltZTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPXdpbmRvd1RpbWUuanMubWFwIiwiXCJ1c2Ugc3RyaWN0XCI7XG52YXIgX192YWx1ZXMgPSAodGhpcyAmJiB0aGlzLl9fdmFsdWVzKSB8fCBmdW5jdGlvbihvKSB7XG4gICAgdmFyIHMgPSB0eXBlb2YgU3ltYm9sID09PSBcImZ1bmN0aW9uXCIgJiYgU3ltYm9sLml0ZXJhdG9yLCBtID0gcyAmJiBvW3NdLCBpID0gMDtcbiAgICBpZiAobSkgcmV0dXJuIG0uY2FsbChvKTtcbiAgICBpZiAobyAmJiB0eXBlb2Ygby5sZW5ndGggPT09IFwibnVtYmVyXCIpIHJldHVybiB7XG4gICAgICAgIG5leHQ6IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIGlmIChvICYmIGkgPj0gby5sZW5ndGgpIG8gPSB2b2lkIDA7XG4gICAgICAgICAgICByZXR1cm4geyB2YWx1ZTogbyAmJiBvW2krK10sIGRvbmU6ICFvIH07XG4gICAgICAgIH1cbiAgICB9O1xuICAgIHRocm93IG5ldyBUeXBlRXJyb3IocyA/IFwiT2JqZWN0IGlzIG5vdCBpdGVyYWJsZS5cIiA6IFwiU3ltYm9sLml0ZXJhdG9yIGlzIG5vdCBkZWZpbmVkLlwiKTtcbn07XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5leHBvcnRzLndpbmRvd1RvZ2dsZSA9IHZvaWQgMDtcbnZhciBTdWJqZWN0XzEgPSByZXF1aXJlKFwiLi4vU3ViamVjdFwiKTtcbnZhciBTdWJzY3JpcHRpb25fMSA9IHJlcXVpcmUoXCIuLi9TdWJzY3JpcHRpb25cIik7XG52YXIgbGlmdF8xID0gcmVxdWlyZShcIi4uL3V0aWwvbGlmdFwiKTtcbnZhciBpbm5lckZyb21fMSA9IHJlcXVpcmUoXCIuLi9vYnNlcnZhYmxlL2lubmVyRnJvbVwiKTtcbnZhciBPcGVyYXRvclN1YnNjcmliZXJfMSA9IHJlcXVpcmUoXCIuL09wZXJhdG9yU3Vic2NyaWJlclwiKTtcbnZhciBub29wXzEgPSByZXF1aXJlKFwiLi4vdXRpbC9ub29wXCIpO1xudmFyIGFyclJlbW92ZV8xID0gcmVxdWlyZShcIi4uL3V0aWwvYXJyUmVtb3ZlXCIpO1xuZnVuY3Rpb24gd2luZG93VG9nZ2xlKG9wZW5pbmdzLCBjbG9zaW5nU2VsZWN0b3IpIHtcbiAgICByZXR1cm4gbGlmdF8xLm9wZXJhdGUoZnVuY3Rpb24gKHNvdXJjZSwgc3Vic2NyaWJlcikge1xuICAgICAgICB2YXIgd2luZG93cyA9IFtdO1xuICAgICAgICB2YXIgaGFuZGxlRXJyb3IgPSBmdW5jdGlvbiAoZXJyKSB7XG4gICAgICAgICAgICB3aGlsZSAoMCA8IHdpbmRvd3MubGVuZ3RoKSB7XG4gICAgICAgICAgICAgICAgd2luZG93cy5zaGlmdCgpLmVycm9yKGVycik7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBzdWJzY3JpYmVyLmVycm9yKGVycik7XG4gICAgICAgIH07XG4gICAgICAgIGlubmVyRnJvbV8xLmlubmVyRnJvbShvcGVuaW5ncykuc3Vic2NyaWJlKE9wZXJhdG9yU3Vic2NyaWJlcl8xLmNyZWF0ZU9wZXJhdG9yU3Vic2NyaWJlcihzdWJzY3JpYmVyLCBmdW5jdGlvbiAob3BlblZhbHVlKSB7XG4gICAgICAgICAgICB2YXIgd2luZG93ID0gbmV3IFN1YmplY3RfMS5TdWJqZWN0KCk7XG4gICAgICAgICAgICB3aW5kb3dzLnB1c2god2luZG93KTtcbiAgICAgICAgICAgIHZhciBjbG9zaW5nU3Vic2NyaXB0aW9uID0gbmV3IFN1YnNjcmlwdGlvbl8xLlN1YnNjcmlwdGlvbigpO1xuICAgICAgICAgICAgdmFyIGNsb3NlV2luZG93ID0gZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgIGFyclJlbW92ZV8xLmFyclJlbW92ZSh3aW5kb3dzLCB3aW5kb3cpO1xuICAgICAgICAgICAgICAgIHdpbmRvdy5jb21wbGV0ZSgpO1xuICAgICAgICAgICAgICAgIGNsb3NpbmdTdWJzY3JpcHRpb24udW5zdWJzY3JpYmUoKTtcbiAgICAgICAgICAgIH07XG4gICAgICAgICAgICB2YXIgY2xvc2luZ05vdGlmaWVyO1xuICAgICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgICAgICBjbG9zaW5nTm90aWZpZXIgPSBpbm5lckZyb21fMS5pbm5lckZyb20oY2xvc2luZ1NlbGVjdG9yKG9wZW5WYWx1ZSkpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgY2F0Y2ggKGVycikge1xuICAgICAgICAgICAgICAgIGhhbmRsZUVycm9yKGVycik7XG4gICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgc3Vic2NyaWJlci5uZXh0KHdpbmRvdy5hc09ic2VydmFibGUoKSk7XG4gICAgICAgICAgICBjbG9zaW5nU3Vic2NyaXB0aW9uLmFkZChjbG9zaW5nTm90aWZpZXIuc3Vic2NyaWJlKE9wZXJhdG9yU3Vic2NyaWJlcl8xLmNyZWF0ZU9wZXJhdG9yU3Vic2NyaWJlcihzdWJzY3JpYmVyLCBjbG9zZVdpbmRvdywgbm9vcF8xLm5vb3AsIGhhbmRsZUVycm9yKSkpO1xuICAgICAgICB9LCBub29wXzEubm9vcCkpO1xuICAgICAgICBzb3VyY2Uuc3Vic2NyaWJlKE9wZXJhdG9yU3Vic2NyaWJlcl8xLmNyZWF0ZU9wZXJhdG9yU3Vic2NyaWJlcihzdWJzY3JpYmVyLCBmdW5jdGlvbiAodmFsdWUpIHtcbiAgICAgICAgICAgIHZhciBlXzEsIF9hO1xuICAgICAgICAgICAgdmFyIHdpbmRvd3NDb3B5ID0gd2luZG93cy5zbGljZSgpO1xuICAgICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgICAgICBmb3IgKHZhciB3aW5kb3dzQ29weV8xID0gX192YWx1ZXMod2luZG93c0NvcHkpLCB3aW5kb3dzQ29weV8xXzEgPSB3aW5kb3dzQ29weV8xLm5leHQoKTsgIXdpbmRvd3NDb3B5XzFfMS5kb25lOyB3aW5kb3dzQ29weV8xXzEgPSB3aW5kb3dzQ29weV8xLm5leHQoKSkge1xuICAgICAgICAgICAgICAgICAgICB2YXIgd2luZG93XzEgPSB3aW5kb3dzQ29weV8xXzEudmFsdWU7XG4gICAgICAgICAgICAgICAgICAgIHdpbmRvd18xLm5leHQodmFsdWUpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGNhdGNoIChlXzFfMSkgeyBlXzEgPSB7IGVycm9yOiBlXzFfMSB9OyB9XG4gICAgICAgICAgICBmaW5hbGx5IHtcbiAgICAgICAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgICAgICAgICBpZiAod2luZG93c0NvcHlfMV8xICYmICF3aW5kb3dzQ29weV8xXzEuZG9uZSAmJiAoX2EgPSB3aW5kb3dzQ29weV8xLnJldHVybikpIF9hLmNhbGwod2luZG93c0NvcHlfMSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGZpbmFsbHkgeyBpZiAoZV8xKSB0aHJvdyBlXzEuZXJyb3I7IH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgfSwgZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgd2hpbGUgKDAgPCB3aW5kb3dzLmxlbmd0aCkge1xuICAgICAgICAgICAgICAgIHdpbmRvd3Muc2hpZnQoKS5jb21wbGV0ZSgpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgc3Vic2NyaWJlci5jb21wbGV0ZSgpO1xuICAgICAgICB9LCBoYW5kbGVFcnJvciwgZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgd2hpbGUgKDAgPCB3aW5kb3dzLmxlbmd0aCkge1xuICAgICAgICAgICAgICAgIHdpbmRvd3Muc2hpZnQoKS51bnN1YnNjcmliZSgpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9KSk7XG4gICAgfSk7XG59XG5leHBvcnRzLndpbmRvd1RvZ2dsZSA9IHdpbmRvd1RvZ2dsZTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPXdpbmRvd1RvZ2dsZS5qcy5tYXAiLCJcInVzZSBzdHJpY3RcIjtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmV4cG9ydHMud2luZG93V2hlbiA9IHZvaWQgMDtcbnZhciBTdWJqZWN0XzEgPSByZXF1aXJlKFwiLi4vU3ViamVjdFwiKTtcbnZhciBsaWZ0XzEgPSByZXF1aXJlKFwiLi4vdXRpbC9saWZ0XCIpO1xudmFyIE9wZXJhdG9yU3Vic2NyaWJlcl8xID0gcmVxdWlyZShcIi4vT3BlcmF0b3JTdWJzY3JpYmVyXCIpO1xudmFyIGlubmVyRnJvbV8xID0gcmVxdWlyZShcIi4uL29ic2VydmFibGUvaW5uZXJGcm9tXCIpO1xuZnVuY3Rpb24gd2luZG93V2hlbihjbG9zaW5nU2VsZWN0b3IpIHtcbiAgICByZXR1cm4gbGlmdF8xLm9wZXJhdGUoZnVuY3Rpb24gKHNvdXJjZSwgc3Vic2NyaWJlcikge1xuICAgICAgICB2YXIgd2luZG93O1xuICAgICAgICB2YXIgY2xvc2luZ1N1YnNjcmliZXI7XG4gICAgICAgIHZhciBoYW5kbGVFcnJvciA9IGZ1bmN0aW9uIChlcnIpIHtcbiAgICAgICAgICAgIHdpbmRvdy5lcnJvcihlcnIpO1xuICAgICAgICAgICAgc3Vic2NyaWJlci5lcnJvcihlcnIpO1xuICAgICAgICB9O1xuICAgICAgICB2YXIgb3BlbldpbmRvdyA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIGNsb3NpbmdTdWJzY3JpYmVyID09PSBudWxsIHx8IGNsb3NpbmdTdWJzY3JpYmVyID09PSB2b2lkIDAgPyB2b2lkIDAgOiBjbG9zaW5nU3Vic2NyaWJlci51bnN1YnNjcmliZSgpO1xuICAgICAgICAgICAgd2luZG93ID09PSBudWxsIHx8IHdpbmRvdyA9PT0gdm9pZCAwID8gdm9pZCAwIDogd2luZG93LmNvbXBsZXRlKCk7XG4gICAgICAgICAgICB3aW5kb3cgPSBuZXcgU3ViamVjdF8xLlN1YmplY3QoKTtcbiAgICAgICAgICAgIHN1YnNjcmliZXIubmV4dCh3aW5kb3cuYXNPYnNlcnZhYmxlKCkpO1xuICAgICAgICAgICAgdmFyIGNsb3NpbmdOb3RpZmllcjtcbiAgICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICAgICAgY2xvc2luZ05vdGlmaWVyID0gaW5uZXJGcm9tXzEuaW5uZXJGcm9tKGNsb3NpbmdTZWxlY3RvcigpKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGNhdGNoIChlcnIpIHtcbiAgICAgICAgICAgICAgICBoYW5kbGVFcnJvcihlcnIpO1xuICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGNsb3NpbmdOb3RpZmllci5zdWJzY3JpYmUoKGNsb3NpbmdTdWJzY3JpYmVyID0gT3BlcmF0b3JTdWJzY3JpYmVyXzEuY3JlYXRlT3BlcmF0b3JTdWJzY3JpYmVyKHN1YnNjcmliZXIsIG9wZW5XaW5kb3csIG9wZW5XaW5kb3csIGhhbmRsZUVycm9yKSkpO1xuICAgICAgICB9O1xuICAgICAgICBvcGVuV2luZG93KCk7XG4gICAgICAgIHNvdXJjZS5zdWJzY3JpYmUoT3BlcmF0b3JTdWJzY3JpYmVyXzEuY3JlYXRlT3BlcmF0b3JTdWJzY3JpYmVyKHN1YnNjcmliZXIsIGZ1bmN0aW9uICh2YWx1ZSkgeyByZXR1cm4gd2luZG93Lm5leHQodmFsdWUpOyB9LCBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICB3aW5kb3cuY29tcGxldGUoKTtcbiAgICAgICAgICAgIHN1YnNjcmliZXIuY29tcGxldGUoKTtcbiAgICAgICAgfSwgaGFuZGxlRXJyb3IsIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIGNsb3NpbmdTdWJzY3JpYmVyID09PSBudWxsIHx8IGNsb3NpbmdTdWJzY3JpYmVyID09PSB2b2lkIDAgPyB2b2lkIDAgOiBjbG9zaW5nU3Vic2NyaWJlci51bnN1YnNjcmliZSgpO1xuICAgICAgICAgICAgd2luZG93ID0gbnVsbDtcbiAgICAgICAgfSkpO1xuICAgIH0pO1xufVxuZXhwb3J0cy53aW5kb3dXaGVuID0gd2luZG93V2hlbjtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPXdpbmRvd1doZW4uanMubWFwIiwiXCJ1c2Ugc3RyaWN0XCI7XG52YXIgX19yZWFkID0gKHRoaXMgJiYgdGhpcy5fX3JlYWQpIHx8IGZ1bmN0aW9uIChvLCBuKSB7XG4gICAgdmFyIG0gPSB0eXBlb2YgU3ltYm9sID09PSBcImZ1bmN0aW9uXCIgJiYgb1tTeW1ib2wuaXRlcmF0b3JdO1xuICAgIGlmICghbSkgcmV0dXJuIG87XG4gICAgdmFyIGkgPSBtLmNhbGwobyksIHIsIGFyID0gW10sIGU7XG4gICAgdHJ5IHtcbiAgICAgICAgd2hpbGUgKChuID09PSB2b2lkIDAgfHwgbi0tID4gMCkgJiYgIShyID0gaS5uZXh0KCkpLmRvbmUpIGFyLnB1c2goci52YWx1ZSk7XG4gICAgfVxuICAgIGNhdGNoIChlcnJvcikgeyBlID0geyBlcnJvcjogZXJyb3IgfTsgfVxuICAgIGZpbmFsbHkge1xuICAgICAgICB0cnkge1xuICAgICAgICAgICAgaWYgKHIgJiYgIXIuZG9uZSAmJiAobSA9IGlbXCJyZXR1cm5cIl0pKSBtLmNhbGwoaSk7XG4gICAgICAgIH1cbiAgICAgICAgZmluYWxseSB7IGlmIChlKSB0aHJvdyBlLmVycm9yOyB9XG4gICAgfVxuICAgIHJldHVybiBhcjtcbn07XG52YXIgX19zcHJlYWRBcnJheSA9ICh0aGlzICYmIHRoaXMuX19zcHJlYWRBcnJheSkgfHwgZnVuY3Rpb24gKHRvLCBmcm9tKSB7XG4gICAgZm9yICh2YXIgaSA9IDAsIGlsID0gZnJvbS5sZW5ndGgsIGogPSB0by5sZW5ndGg7IGkgPCBpbDsgaSsrLCBqKyspXG4gICAgICAgIHRvW2pdID0gZnJvbVtpXTtcbiAgICByZXR1cm4gdG87XG59O1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuZXhwb3J0cy53aXRoTGF0ZXN0RnJvbSA9IHZvaWQgMDtcbnZhciBsaWZ0XzEgPSByZXF1aXJlKFwiLi4vdXRpbC9saWZ0XCIpO1xudmFyIE9wZXJhdG9yU3Vic2NyaWJlcl8xID0gcmVxdWlyZShcIi4vT3BlcmF0b3JTdWJzY3JpYmVyXCIpO1xudmFyIGlubmVyRnJvbV8xID0gcmVxdWlyZShcIi4uL29ic2VydmFibGUvaW5uZXJGcm9tXCIpO1xudmFyIGlkZW50aXR5XzEgPSByZXF1aXJlKFwiLi4vdXRpbC9pZGVudGl0eVwiKTtcbnZhciBub29wXzEgPSByZXF1aXJlKFwiLi4vdXRpbC9ub29wXCIpO1xudmFyIGFyZ3NfMSA9IHJlcXVpcmUoXCIuLi91dGlsL2FyZ3NcIik7XG5mdW5jdGlvbiB3aXRoTGF0ZXN0RnJvbSgpIHtcbiAgICB2YXIgaW5wdXRzID0gW107XG4gICAgZm9yICh2YXIgX2kgPSAwOyBfaSA8IGFyZ3VtZW50cy5sZW5ndGg7IF9pKyspIHtcbiAgICAgICAgaW5wdXRzW19pXSA9IGFyZ3VtZW50c1tfaV07XG4gICAgfVxuICAgIHZhciBwcm9qZWN0ID0gYXJnc18xLnBvcFJlc3VsdFNlbGVjdG9yKGlucHV0cyk7XG4gICAgcmV0dXJuIGxpZnRfMS5vcGVyYXRlKGZ1bmN0aW9uIChzb3VyY2UsIHN1YnNjcmliZXIpIHtcbiAgICAgICAgdmFyIGxlbiA9IGlucHV0cy5sZW5ndGg7XG4gICAgICAgIHZhciBvdGhlclZhbHVlcyA9IG5ldyBBcnJheShsZW4pO1xuICAgICAgICB2YXIgaGFzVmFsdWUgPSBpbnB1dHMubWFwKGZ1bmN0aW9uICgpIHsgcmV0dXJuIGZhbHNlOyB9KTtcbiAgICAgICAgdmFyIHJlYWR5ID0gZmFsc2U7XG4gICAgICAgIHZhciBfbG9vcF8xID0gZnVuY3Rpb24gKGkpIHtcbiAgICAgICAgICAgIGlubmVyRnJvbV8xLmlubmVyRnJvbShpbnB1dHNbaV0pLnN1YnNjcmliZShPcGVyYXRvclN1YnNjcmliZXJfMS5jcmVhdGVPcGVyYXRvclN1YnNjcmliZXIoc3Vic2NyaWJlciwgZnVuY3Rpb24gKHZhbHVlKSB7XG4gICAgICAgICAgICAgICAgb3RoZXJWYWx1ZXNbaV0gPSB2YWx1ZTtcbiAgICAgICAgICAgICAgICBpZiAoIXJlYWR5ICYmICFoYXNWYWx1ZVtpXSkge1xuICAgICAgICAgICAgICAgICAgICBoYXNWYWx1ZVtpXSA9IHRydWU7XG4gICAgICAgICAgICAgICAgICAgIChyZWFkeSA9IGhhc1ZhbHVlLmV2ZXJ5KGlkZW50aXR5XzEuaWRlbnRpdHkpKSAmJiAoaGFzVmFsdWUgPSBudWxsKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9LCBub29wXzEubm9vcCkpO1xuICAgICAgICB9O1xuICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IGxlbjsgaSsrKSB7XG4gICAgICAgICAgICBfbG9vcF8xKGkpO1xuICAgICAgICB9XG4gICAgICAgIHNvdXJjZS5zdWJzY3JpYmUoT3BlcmF0b3JTdWJzY3JpYmVyXzEuY3JlYXRlT3BlcmF0b3JTdWJzY3JpYmVyKHN1YnNjcmliZXIsIGZ1bmN0aW9uICh2YWx1ZSkge1xuICAgICAgICAgICAgaWYgKHJlYWR5KSB7XG4gICAgICAgICAgICAgICAgdmFyIHZhbHVlcyA9IF9fc3ByZWFkQXJyYXkoW3ZhbHVlXSwgX19yZWFkKG90aGVyVmFsdWVzKSk7XG4gICAgICAgICAgICAgICAgc3Vic2NyaWJlci5uZXh0KHByb2plY3QgPyBwcm9qZWN0LmFwcGx5KHZvaWQgMCwgX19zcHJlYWRBcnJheShbXSwgX19yZWFkKHZhbHVlcykpKSA6IHZhbHVlcyk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0pKTtcbiAgICB9KTtcbn1cbmV4cG9ydHMud2l0aExhdGVzdEZyb20gPSB3aXRoTGF0ZXN0RnJvbTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPXdpdGhMYXRlc3RGcm9tLmpzLm1hcCIsIlwidXNlIHN0cmljdFwiO1xudmFyIF9fcmVhZCA9ICh0aGlzICYmIHRoaXMuX19yZWFkKSB8fCBmdW5jdGlvbiAobywgbikge1xuICAgIHZhciBtID0gdHlwZW9mIFN5bWJvbCA9PT0gXCJmdW5jdGlvblwiICYmIG9bU3ltYm9sLml0ZXJhdG9yXTtcbiAgICBpZiAoIW0pIHJldHVybiBvO1xuICAgIHZhciBpID0gbS5jYWxsKG8pLCByLCBhciA9IFtdLCBlO1xuICAgIHRyeSB7XG4gICAgICAgIHdoaWxlICgobiA9PT0gdm9pZCAwIHx8IG4tLSA+IDApICYmICEociA9IGkubmV4dCgpKS5kb25lKSBhci5wdXNoKHIudmFsdWUpO1xuICAgIH1cbiAgICBjYXRjaCAoZXJyb3IpIHsgZSA9IHsgZXJyb3I6IGVycm9yIH07IH1cbiAgICBmaW5hbGx5IHtcbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgIGlmIChyICYmICFyLmRvbmUgJiYgKG0gPSBpW1wicmV0dXJuXCJdKSkgbS5jYWxsKGkpO1xuICAgICAgICB9XG4gICAgICAgIGZpbmFsbHkgeyBpZiAoZSkgdGhyb3cgZS5lcnJvcjsgfVxuICAgIH1cbiAgICByZXR1cm4gYXI7XG59O1xudmFyIF9fc3ByZWFkQXJyYXkgPSAodGhpcyAmJiB0aGlzLl9fc3ByZWFkQXJyYXkpIHx8IGZ1bmN0aW9uICh0bywgZnJvbSkge1xuICAgIGZvciAodmFyIGkgPSAwLCBpbCA9IGZyb20ubGVuZ3RoLCBqID0gdG8ubGVuZ3RoOyBpIDwgaWw7IGkrKywgaisrKVxuICAgICAgICB0b1tqXSA9IGZyb21baV07XG4gICAgcmV0dXJuIHRvO1xufTtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmV4cG9ydHMuemlwID0gdm9pZCAwO1xudmFyIHppcF8xID0gcmVxdWlyZShcIi4uL29ic2VydmFibGUvemlwXCIpO1xudmFyIGxpZnRfMSA9IHJlcXVpcmUoXCIuLi91dGlsL2xpZnRcIik7XG5mdW5jdGlvbiB6aXAoKSB7XG4gICAgdmFyIHNvdXJjZXMgPSBbXTtcbiAgICBmb3IgKHZhciBfaSA9IDA7IF9pIDwgYXJndW1lbnRzLmxlbmd0aDsgX2krKykge1xuICAgICAgICBzb3VyY2VzW19pXSA9IGFyZ3VtZW50c1tfaV07XG4gICAgfVxuICAgIHJldHVybiBsaWZ0XzEub3BlcmF0ZShmdW5jdGlvbiAoc291cmNlLCBzdWJzY3JpYmVyKSB7XG4gICAgICAgIHppcF8xLnppcC5hcHBseSh2b2lkIDAsIF9fc3ByZWFkQXJyYXkoW3NvdXJjZV0sIF9fcmVhZChzb3VyY2VzKSkpLnN1YnNjcmliZShzdWJzY3JpYmVyKTtcbiAgICB9KTtcbn1cbmV4cG9ydHMuemlwID0gemlwO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9emlwLmpzLm1hcCIsIlwidXNlIHN0cmljdFwiO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuZXhwb3J0cy56aXBBbGwgPSB2b2lkIDA7XG52YXIgemlwXzEgPSByZXF1aXJlKFwiLi4vb2JzZXJ2YWJsZS96aXBcIik7XG52YXIgam9pbkFsbEludGVybmFsc18xID0gcmVxdWlyZShcIi4vam9pbkFsbEludGVybmFsc1wiKTtcbmZ1bmN0aW9uIHppcEFsbChwcm9qZWN0KSB7XG4gICAgcmV0dXJuIGpvaW5BbGxJbnRlcm5hbHNfMS5qb2luQWxsSW50ZXJuYWxzKHppcF8xLnppcCwgcHJvamVjdCk7XG59XG5leHBvcnRzLnppcEFsbCA9IHppcEFsbDtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPXppcEFsbC5qcy5tYXAiLCJcInVzZSBzdHJpY3RcIjtcbnZhciBfX3JlYWQgPSAodGhpcyAmJiB0aGlzLl9fcmVhZCkgfHwgZnVuY3Rpb24gKG8sIG4pIHtcbiAgICB2YXIgbSA9IHR5cGVvZiBTeW1ib2wgPT09IFwiZnVuY3Rpb25cIiAmJiBvW1N5bWJvbC5pdGVyYXRvcl07XG4gICAgaWYgKCFtKSByZXR1cm4gbztcbiAgICB2YXIgaSA9IG0uY2FsbChvKSwgciwgYXIgPSBbXSwgZTtcbiAgICB0cnkge1xuICAgICAgICB3aGlsZSAoKG4gPT09IHZvaWQgMCB8fCBuLS0gPiAwKSAmJiAhKHIgPSBpLm5leHQoKSkuZG9uZSkgYXIucHVzaChyLnZhbHVlKTtcbiAgICB9XG4gICAgY2F0Y2ggKGVycm9yKSB7IGUgPSB7IGVycm9yOiBlcnJvciB9OyB9XG4gICAgZmluYWxseSB7XG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgICBpZiAociAmJiAhci5kb25lICYmIChtID0gaVtcInJldHVyblwiXSkpIG0uY2FsbChpKTtcbiAgICAgICAgfVxuICAgICAgICBmaW5hbGx5IHsgaWYgKGUpIHRocm93IGUuZXJyb3I7IH1cbiAgICB9XG4gICAgcmV0dXJuIGFyO1xufTtcbnZhciBfX3NwcmVhZEFycmF5ID0gKHRoaXMgJiYgdGhpcy5fX3NwcmVhZEFycmF5KSB8fCBmdW5jdGlvbiAodG8sIGZyb20pIHtcbiAgICBmb3IgKHZhciBpID0gMCwgaWwgPSBmcm9tLmxlbmd0aCwgaiA9IHRvLmxlbmd0aDsgaSA8IGlsOyBpKyssIGorKylcbiAgICAgICAgdG9bal0gPSBmcm9tW2ldO1xuICAgIHJldHVybiB0bztcbn07XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5leHBvcnRzLnppcFdpdGggPSB2b2lkIDA7XG52YXIgemlwXzEgPSByZXF1aXJlKFwiLi96aXBcIik7XG5mdW5jdGlvbiB6aXBXaXRoKCkge1xuICAgIHZhciBvdGhlcklucHV0cyA9IFtdO1xuICAgIGZvciAodmFyIF9pID0gMDsgX2kgPCBhcmd1bWVudHMubGVuZ3RoOyBfaSsrKSB7XG4gICAgICAgIG90aGVySW5wdXRzW19pXSA9IGFyZ3VtZW50c1tfaV07XG4gICAgfVxuICAgIHJldHVybiB6aXBfMS56aXAuYXBwbHkodm9pZCAwLCBfX3NwcmVhZEFycmF5KFtdLCBfX3JlYWQob3RoZXJJbnB1dHMpKSk7XG59XG5leHBvcnRzLnppcFdpdGggPSB6aXBXaXRoO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9emlwV2l0aC5qcy5tYXAiLCJcInVzZSBzdHJpY3RcIjtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmV4cG9ydHMuc2NoZWR1bGVBcnJheSA9IHZvaWQgMDtcbnZhciBPYnNlcnZhYmxlXzEgPSByZXF1aXJlKFwiLi4vT2JzZXJ2YWJsZVwiKTtcbmZ1bmN0aW9uIHNjaGVkdWxlQXJyYXkoaW5wdXQsIHNjaGVkdWxlcikge1xuICAgIHJldHVybiBuZXcgT2JzZXJ2YWJsZV8xLk9ic2VydmFibGUoZnVuY3Rpb24gKHN1YnNjcmliZXIpIHtcbiAgICAgICAgdmFyIGkgPSAwO1xuICAgICAgICByZXR1cm4gc2NoZWR1bGVyLnNjaGVkdWxlKGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIGlmIChpID09PSBpbnB1dC5sZW5ndGgpIHtcbiAgICAgICAgICAgICAgICBzdWJzY3JpYmVyLmNvbXBsZXRlKCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICBzdWJzY3JpYmVyLm5leHQoaW5wdXRbaSsrXSk7XG4gICAgICAgICAgICAgICAgaWYgKCFzdWJzY3JpYmVyLmNsb3NlZCkge1xuICAgICAgICAgICAgICAgICAgICB0aGlzLnNjaGVkdWxlKCk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICB9KTtcbiAgICB9KTtcbn1cbmV4cG9ydHMuc2NoZWR1bGVBcnJheSA9IHNjaGVkdWxlQXJyYXk7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1zY2hlZHVsZUFycmF5LmpzLm1hcCIsIlwidXNlIHN0cmljdFwiO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuZXhwb3J0cy5zY2hlZHVsZUFzeW5jSXRlcmFibGUgPSB2b2lkIDA7XG52YXIgT2JzZXJ2YWJsZV8xID0gcmVxdWlyZShcIi4uL09ic2VydmFibGVcIik7XG52YXIgZXhlY3V0ZVNjaGVkdWxlXzEgPSByZXF1aXJlKFwiLi4vdXRpbC9leGVjdXRlU2NoZWR1bGVcIik7XG5mdW5jdGlvbiBzY2hlZHVsZUFzeW5jSXRlcmFibGUoaW5wdXQsIHNjaGVkdWxlcikge1xuICAgIGlmICghaW5wdXQpIHtcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdJdGVyYWJsZSBjYW5ub3QgYmUgbnVsbCcpO1xuICAgIH1cbiAgICByZXR1cm4gbmV3IE9ic2VydmFibGVfMS5PYnNlcnZhYmxlKGZ1bmN0aW9uIChzdWJzY3JpYmVyKSB7XG4gICAgICAgIGV4ZWN1dGVTY2hlZHVsZV8xLmV4ZWN1dGVTY2hlZHVsZShzdWJzY3JpYmVyLCBzY2hlZHVsZXIsIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIHZhciBpdGVyYXRvciA9IGlucHV0W1N5bWJvbC5hc3luY0l0ZXJhdG9yXSgpO1xuICAgICAgICAgICAgZXhlY3V0ZVNjaGVkdWxlXzEuZXhlY3V0ZVNjaGVkdWxlKHN1YnNjcmliZXIsIHNjaGVkdWxlciwgZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgIGl0ZXJhdG9yLm5leHQoKS50aGVuKGZ1bmN0aW9uIChyZXN1bHQpIHtcbiAgICAgICAgICAgICAgICAgICAgaWYgKHJlc3VsdC5kb25lKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBzdWJzY3JpYmVyLmNvbXBsZXRlKCk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBzdWJzY3JpYmVyLm5leHQocmVzdWx0LnZhbHVlKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgfSwgMCwgdHJ1ZSk7XG4gICAgICAgIH0pO1xuICAgIH0pO1xufVxuZXhwb3J0cy5zY2hlZHVsZUFzeW5jSXRlcmFibGUgPSBzY2hlZHVsZUFzeW5jSXRlcmFibGU7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1zY2hlZHVsZUFzeW5jSXRlcmFibGUuanMubWFwIiwiXCJ1c2Ugc3RyaWN0XCI7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5leHBvcnRzLnNjaGVkdWxlSXRlcmFibGUgPSB2b2lkIDA7XG52YXIgT2JzZXJ2YWJsZV8xID0gcmVxdWlyZShcIi4uL09ic2VydmFibGVcIik7XG52YXIgaXRlcmF0b3JfMSA9IHJlcXVpcmUoXCIuLi9zeW1ib2wvaXRlcmF0b3JcIik7XG52YXIgaXNGdW5jdGlvbl8xID0gcmVxdWlyZShcIi4uL3V0aWwvaXNGdW5jdGlvblwiKTtcbnZhciBleGVjdXRlU2NoZWR1bGVfMSA9IHJlcXVpcmUoXCIuLi91dGlsL2V4ZWN1dGVTY2hlZHVsZVwiKTtcbmZ1bmN0aW9uIHNjaGVkdWxlSXRlcmFibGUoaW5wdXQsIHNjaGVkdWxlcikge1xuICAgIHJldHVybiBuZXcgT2JzZXJ2YWJsZV8xLk9ic2VydmFibGUoZnVuY3Rpb24gKHN1YnNjcmliZXIpIHtcbiAgICAgICAgdmFyIGl0ZXJhdG9yO1xuICAgICAgICBleGVjdXRlU2NoZWR1bGVfMS5leGVjdXRlU2NoZWR1bGUoc3Vic2NyaWJlciwgc2NoZWR1bGVyLCBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICBpdGVyYXRvciA9IGlucHV0W2l0ZXJhdG9yXzEuaXRlcmF0b3JdKCk7XG4gICAgICAgICAgICBleGVjdXRlU2NoZWR1bGVfMS5leGVjdXRlU2NoZWR1bGUoc3Vic2NyaWJlciwgc2NoZWR1bGVyLCBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgdmFyIF9hO1xuICAgICAgICAgICAgICAgIHZhciB2YWx1ZTtcbiAgICAgICAgICAgICAgICB2YXIgZG9uZTtcbiAgICAgICAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgICAgICAgICAoX2EgPSBpdGVyYXRvci5uZXh0KCksIHZhbHVlID0gX2EudmFsdWUsIGRvbmUgPSBfYS5kb25lKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgY2F0Y2ggKGVycikge1xuICAgICAgICAgICAgICAgICAgICBzdWJzY3JpYmVyLmVycm9yKGVycik7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgaWYgKGRvbmUpIHtcbiAgICAgICAgICAgICAgICAgICAgc3Vic2NyaWJlci5jb21wbGV0ZSgpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgc3Vic2NyaWJlci5uZXh0KHZhbHVlKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9LCAwLCB0cnVlKTtcbiAgICAgICAgfSk7XG4gICAgICAgIHJldHVybiBmdW5jdGlvbiAoKSB7IHJldHVybiBpc0Z1bmN0aW9uXzEuaXNGdW5jdGlvbihpdGVyYXRvciA9PT0gbnVsbCB8fCBpdGVyYXRvciA9PT0gdm9pZCAwID8gdm9pZCAwIDogaXRlcmF0b3IucmV0dXJuKSAmJiBpdGVyYXRvci5yZXR1cm4oKTsgfTtcbiAgICB9KTtcbn1cbmV4cG9ydHMuc2NoZWR1bGVJdGVyYWJsZSA9IHNjaGVkdWxlSXRlcmFibGU7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1zY2hlZHVsZUl0ZXJhYmxlLmpzLm1hcCIsIlwidXNlIHN0cmljdFwiO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuZXhwb3J0cy5zY2hlZHVsZU9ic2VydmFibGUgPSB2b2lkIDA7XG52YXIgaW5uZXJGcm9tXzEgPSByZXF1aXJlKFwiLi4vb2JzZXJ2YWJsZS9pbm5lckZyb21cIik7XG52YXIgb2JzZXJ2ZU9uXzEgPSByZXF1aXJlKFwiLi4vb3BlcmF0b3JzL29ic2VydmVPblwiKTtcbnZhciBzdWJzY3JpYmVPbl8xID0gcmVxdWlyZShcIi4uL29wZXJhdG9ycy9zdWJzY3JpYmVPblwiKTtcbmZ1bmN0aW9uIHNjaGVkdWxlT2JzZXJ2YWJsZShpbnB1dCwgc2NoZWR1bGVyKSB7XG4gICAgcmV0dXJuIGlubmVyRnJvbV8xLmlubmVyRnJvbShpbnB1dCkucGlwZShzdWJzY3JpYmVPbl8xLnN1YnNjcmliZU9uKHNjaGVkdWxlciksIG9ic2VydmVPbl8xLm9ic2VydmVPbihzY2hlZHVsZXIpKTtcbn1cbmV4cG9ydHMuc2NoZWR1bGVPYnNlcnZhYmxlID0gc2NoZWR1bGVPYnNlcnZhYmxlO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9c2NoZWR1bGVPYnNlcnZhYmxlLmpzLm1hcCIsIlwidXNlIHN0cmljdFwiO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuZXhwb3J0cy5zY2hlZHVsZVByb21pc2UgPSB2b2lkIDA7XG52YXIgaW5uZXJGcm9tXzEgPSByZXF1aXJlKFwiLi4vb2JzZXJ2YWJsZS9pbm5lckZyb21cIik7XG52YXIgb2JzZXJ2ZU9uXzEgPSByZXF1aXJlKFwiLi4vb3BlcmF0b3JzL29ic2VydmVPblwiKTtcbnZhciBzdWJzY3JpYmVPbl8xID0gcmVxdWlyZShcIi4uL29wZXJhdG9ycy9zdWJzY3JpYmVPblwiKTtcbmZ1bmN0aW9uIHNjaGVkdWxlUHJvbWlzZShpbnB1dCwgc2NoZWR1bGVyKSB7XG4gICAgcmV0dXJuIGlubmVyRnJvbV8xLmlubmVyRnJvbShpbnB1dCkucGlwZShzdWJzY3JpYmVPbl8xLnN1YnNjcmliZU9uKHNjaGVkdWxlciksIG9ic2VydmVPbl8xLm9ic2VydmVPbihzY2hlZHVsZXIpKTtcbn1cbmV4cG9ydHMuc2NoZWR1bGVQcm9taXNlID0gc2NoZWR1bGVQcm9taXNlO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9c2NoZWR1bGVQcm9taXNlLmpzLm1hcCIsIlwidXNlIHN0cmljdFwiO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuZXhwb3J0cy5zY2hlZHVsZVJlYWRhYmxlU3RyZWFtTGlrZSA9IHZvaWQgMDtcbnZhciBzY2hlZHVsZUFzeW5jSXRlcmFibGVfMSA9IHJlcXVpcmUoXCIuL3NjaGVkdWxlQXN5bmNJdGVyYWJsZVwiKTtcbnZhciBpc1JlYWRhYmxlU3RyZWFtTGlrZV8xID0gcmVxdWlyZShcIi4uL3V0aWwvaXNSZWFkYWJsZVN0cmVhbUxpa2VcIik7XG5mdW5jdGlvbiBzY2hlZHVsZVJlYWRhYmxlU3RyZWFtTGlrZShpbnB1dCwgc2NoZWR1bGVyKSB7XG4gICAgcmV0dXJuIHNjaGVkdWxlQXN5bmNJdGVyYWJsZV8xLnNjaGVkdWxlQXN5bmNJdGVyYWJsZShpc1JlYWRhYmxlU3RyZWFtTGlrZV8xLnJlYWRhYmxlU3RyZWFtTGlrZVRvQXN5bmNHZW5lcmF0b3IoaW5wdXQpLCBzY2hlZHVsZXIpO1xufVxuZXhwb3J0cy5zY2hlZHVsZVJlYWRhYmxlU3RyZWFtTGlrZSA9IHNjaGVkdWxlUmVhZGFibGVTdHJlYW1MaWtlO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9c2NoZWR1bGVSZWFkYWJsZVN0cmVhbUxpa2UuanMubWFwIiwiXCJ1c2Ugc3RyaWN0XCI7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5leHBvcnRzLnNjaGVkdWxlZCA9IHZvaWQgMDtcbnZhciBzY2hlZHVsZU9ic2VydmFibGVfMSA9IHJlcXVpcmUoXCIuL3NjaGVkdWxlT2JzZXJ2YWJsZVwiKTtcbnZhciBzY2hlZHVsZVByb21pc2VfMSA9IHJlcXVpcmUoXCIuL3NjaGVkdWxlUHJvbWlzZVwiKTtcbnZhciBzY2hlZHVsZUFycmF5XzEgPSByZXF1aXJlKFwiLi9zY2hlZHVsZUFycmF5XCIpO1xudmFyIHNjaGVkdWxlSXRlcmFibGVfMSA9IHJlcXVpcmUoXCIuL3NjaGVkdWxlSXRlcmFibGVcIik7XG52YXIgc2NoZWR1bGVBc3luY0l0ZXJhYmxlXzEgPSByZXF1aXJlKFwiLi9zY2hlZHVsZUFzeW5jSXRlcmFibGVcIik7XG52YXIgaXNJbnRlcm9wT2JzZXJ2YWJsZV8xID0gcmVxdWlyZShcIi4uL3V0aWwvaXNJbnRlcm9wT2JzZXJ2YWJsZVwiKTtcbnZhciBpc1Byb21pc2VfMSA9IHJlcXVpcmUoXCIuLi91dGlsL2lzUHJvbWlzZVwiKTtcbnZhciBpc0FycmF5TGlrZV8xID0gcmVxdWlyZShcIi4uL3V0aWwvaXNBcnJheUxpa2VcIik7XG52YXIgaXNJdGVyYWJsZV8xID0gcmVxdWlyZShcIi4uL3V0aWwvaXNJdGVyYWJsZVwiKTtcbnZhciBpc0FzeW5jSXRlcmFibGVfMSA9IHJlcXVpcmUoXCIuLi91dGlsL2lzQXN5bmNJdGVyYWJsZVwiKTtcbnZhciB0aHJvd1Vub2JzZXJ2YWJsZUVycm9yXzEgPSByZXF1aXJlKFwiLi4vdXRpbC90aHJvd1Vub2JzZXJ2YWJsZUVycm9yXCIpO1xudmFyIGlzUmVhZGFibGVTdHJlYW1MaWtlXzEgPSByZXF1aXJlKFwiLi4vdXRpbC9pc1JlYWRhYmxlU3RyZWFtTGlrZVwiKTtcbnZhciBzY2hlZHVsZVJlYWRhYmxlU3RyZWFtTGlrZV8xID0gcmVxdWlyZShcIi4vc2NoZWR1bGVSZWFkYWJsZVN0cmVhbUxpa2VcIik7XG5mdW5jdGlvbiBzY2hlZHVsZWQoaW5wdXQsIHNjaGVkdWxlcikge1xuICAgIGlmIChpbnB1dCAhPSBudWxsKSB7XG4gICAgICAgIGlmIChpc0ludGVyb3BPYnNlcnZhYmxlXzEuaXNJbnRlcm9wT2JzZXJ2YWJsZShpbnB1dCkpIHtcbiAgICAgICAgICAgIHJldHVybiBzY2hlZHVsZU9ic2VydmFibGVfMS5zY2hlZHVsZU9ic2VydmFibGUoaW5wdXQsIHNjaGVkdWxlcik7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKGlzQXJyYXlMaWtlXzEuaXNBcnJheUxpa2UoaW5wdXQpKSB7XG4gICAgICAgICAgICByZXR1cm4gc2NoZWR1bGVBcnJheV8xLnNjaGVkdWxlQXJyYXkoaW5wdXQsIHNjaGVkdWxlcik7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKGlzUHJvbWlzZV8xLmlzUHJvbWlzZShpbnB1dCkpIHtcbiAgICAgICAgICAgIHJldHVybiBzY2hlZHVsZVByb21pc2VfMS5zY2hlZHVsZVByb21pc2UoaW5wdXQsIHNjaGVkdWxlcik7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKGlzQXN5bmNJdGVyYWJsZV8xLmlzQXN5bmNJdGVyYWJsZShpbnB1dCkpIHtcbiAgICAgICAgICAgIHJldHVybiBzY2hlZHVsZUFzeW5jSXRlcmFibGVfMS5zY2hlZHVsZUFzeW5jSXRlcmFibGUoaW5wdXQsIHNjaGVkdWxlcik7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKGlzSXRlcmFibGVfMS5pc0l0ZXJhYmxlKGlucHV0KSkge1xuICAgICAgICAgICAgcmV0dXJuIHNjaGVkdWxlSXRlcmFibGVfMS5zY2hlZHVsZUl0ZXJhYmxlKGlucHV0LCBzY2hlZHVsZXIpO1xuICAgICAgICB9XG4gICAgICAgIGlmIChpc1JlYWRhYmxlU3RyZWFtTGlrZV8xLmlzUmVhZGFibGVTdHJlYW1MaWtlKGlucHV0KSkge1xuICAgICAgICAgICAgcmV0dXJuIHNjaGVkdWxlUmVhZGFibGVTdHJlYW1MaWtlXzEuc2NoZWR1bGVSZWFkYWJsZVN0cmVhbUxpa2UoaW5wdXQsIHNjaGVkdWxlcik7XG4gICAgICAgIH1cbiAgICB9XG4gICAgdGhyb3cgdGhyb3dVbm9ic2VydmFibGVFcnJvcl8xLmNyZWF0ZUludmFsaWRPYnNlcnZhYmxlVHlwZUVycm9yKGlucHV0KTtcbn1cbmV4cG9ydHMuc2NoZWR1bGVkID0gc2NoZWR1bGVkO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9c2NoZWR1bGVkLmpzLm1hcCIsIlwidXNlIHN0cmljdFwiO1xudmFyIF9fZXh0ZW5kcyA9ICh0aGlzICYmIHRoaXMuX19leHRlbmRzKSB8fCAoZnVuY3Rpb24gKCkge1xuICAgIHZhciBleHRlbmRTdGF0aWNzID0gZnVuY3Rpb24gKGQsIGIpIHtcbiAgICAgICAgZXh0ZW5kU3RhdGljcyA9IE9iamVjdC5zZXRQcm90b3R5cGVPZiB8fFxuICAgICAgICAgICAgKHsgX19wcm90b19fOiBbXSB9IGluc3RhbmNlb2YgQXJyYXkgJiYgZnVuY3Rpb24gKGQsIGIpIHsgZC5fX3Byb3RvX18gPSBiOyB9KSB8fFxuICAgICAgICAgICAgZnVuY3Rpb24gKGQsIGIpIHsgZm9yICh2YXIgcCBpbiBiKSBpZiAoT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKGIsIHApKSBkW3BdID0gYltwXTsgfTtcbiAgICAgICAgcmV0dXJuIGV4dGVuZFN0YXRpY3MoZCwgYik7XG4gICAgfTtcbiAgICByZXR1cm4gZnVuY3Rpb24gKGQsIGIpIHtcbiAgICAgICAgaWYgKHR5cGVvZiBiICE9PSBcImZ1bmN0aW9uXCIgJiYgYiAhPT0gbnVsbClcbiAgICAgICAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoXCJDbGFzcyBleHRlbmRzIHZhbHVlIFwiICsgU3RyaW5nKGIpICsgXCIgaXMgbm90IGEgY29uc3RydWN0b3Igb3IgbnVsbFwiKTtcbiAgICAgICAgZXh0ZW5kU3RhdGljcyhkLCBiKTtcbiAgICAgICAgZnVuY3Rpb24gX18oKSB7IHRoaXMuY29uc3RydWN0b3IgPSBkOyB9XG4gICAgICAgIGQucHJvdG90eXBlID0gYiA9PT0gbnVsbCA/IE9iamVjdC5jcmVhdGUoYikgOiAoX18ucHJvdG90eXBlID0gYi5wcm90b3R5cGUsIG5ldyBfXygpKTtcbiAgICB9O1xufSkoKTtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmV4cG9ydHMuQWN0aW9uID0gdm9pZCAwO1xudmFyIFN1YnNjcmlwdGlvbl8xID0gcmVxdWlyZShcIi4uL1N1YnNjcmlwdGlvblwiKTtcbnZhciBBY3Rpb24gPSAoZnVuY3Rpb24gKF9zdXBlcikge1xuICAgIF9fZXh0ZW5kcyhBY3Rpb24sIF9zdXBlcik7XG4gICAgZnVuY3Rpb24gQWN0aW9uKHNjaGVkdWxlciwgd29yaykge1xuICAgICAgICByZXR1cm4gX3N1cGVyLmNhbGwodGhpcykgfHwgdGhpcztcbiAgICB9XG4gICAgQWN0aW9uLnByb3RvdHlwZS5zY2hlZHVsZSA9IGZ1bmN0aW9uIChzdGF0ZSwgZGVsYXkpIHtcbiAgICAgICAgaWYgKGRlbGF5ID09PSB2b2lkIDApIHsgZGVsYXkgPSAwOyB9XG4gICAgICAgIHJldHVybiB0aGlzO1xuICAgIH07XG4gICAgcmV0dXJuIEFjdGlvbjtcbn0oU3Vic2NyaXB0aW9uXzEuU3Vic2NyaXB0aW9uKSk7XG5leHBvcnRzLkFjdGlvbiA9IEFjdGlvbjtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPUFjdGlvbi5qcy5tYXAiLCJcInVzZSBzdHJpY3RcIjtcbnZhciBfX2V4dGVuZHMgPSAodGhpcyAmJiB0aGlzLl9fZXh0ZW5kcykgfHwgKGZ1bmN0aW9uICgpIHtcbiAgICB2YXIgZXh0ZW5kU3RhdGljcyA9IGZ1bmN0aW9uIChkLCBiKSB7XG4gICAgICAgIGV4dGVuZFN0YXRpY3MgPSBPYmplY3Quc2V0UHJvdG90eXBlT2YgfHxcbiAgICAgICAgICAgICh7IF9fcHJvdG9fXzogW10gfSBpbnN0YW5jZW9mIEFycmF5ICYmIGZ1bmN0aW9uIChkLCBiKSB7IGQuX19wcm90b19fID0gYjsgfSkgfHxcbiAgICAgICAgICAgIGZ1bmN0aW9uIChkLCBiKSB7IGZvciAodmFyIHAgaW4gYikgaWYgKE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChiLCBwKSkgZFtwXSA9IGJbcF07IH07XG4gICAgICAgIHJldHVybiBleHRlbmRTdGF0aWNzKGQsIGIpO1xuICAgIH07XG4gICAgcmV0dXJuIGZ1bmN0aW9uIChkLCBiKSB7XG4gICAgICAgIGlmICh0eXBlb2YgYiAhPT0gXCJmdW5jdGlvblwiICYmIGIgIT09IG51bGwpXG4gICAgICAgICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKFwiQ2xhc3MgZXh0ZW5kcyB2YWx1ZSBcIiArIFN0cmluZyhiKSArIFwiIGlzIG5vdCBhIGNvbnN0cnVjdG9yIG9yIG51bGxcIik7XG4gICAgICAgIGV4dGVuZFN0YXRpY3MoZCwgYik7XG4gICAgICAgIGZ1bmN0aW9uIF9fKCkgeyB0aGlzLmNvbnN0cnVjdG9yID0gZDsgfVxuICAgICAgICBkLnByb3RvdHlwZSA9IGIgPT09IG51bGwgPyBPYmplY3QuY3JlYXRlKGIpIDogKF9fLnByb3RvdHlwZSA9IGIucHJvdG90eXBlLCBuZXcgX18oKSk7XG4gICAgfTtcbn0pKCk7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5leHBvcnRzLkFuaW1hdGlvbkZyYW1lQWN0aW9uID0gdm9pZCAwO1xudmFyIEFzeW5jQWN0aW9uXzEgPSByZXF1aXJlKFwiLi9Bc3luY0FjdGlvblwiKTtcbnZhciBhbmltYXRpb25GcmFtZVByb3ZpZGVyXzEgPSByZXF1aXJlKFwiLi9hbmltYXRpb25GcmFtZVByb3ZpZGVyXCIpO1xudmFyIEFuaW1hdGlvbkZyYW1lQWN0aW9uID0gKGZ1bmN0aW9uIChfc3VwZXIpIHtcbiAgICBfX2V4dGVuZHMoQW5pbWF0aW9uRnJhbWVBY3Rpb24sIF9zdXBlcik7XG4gICAgZnVuY3Rpb24gQW5pbWF0aW9uRnJhbWVBY3Rpb24oc2NoZWR1bGVyLCB3b3JrKSB7XG4gICAgICAgIHZhciBfdGhpcyA9IF9zdXBlci5jYWxsKHRoaXMsIHNjaGVkdWxlciwgd29yaykgfHwgdGhpcztcbiAgICAgICAgX3RoaXMuc2NoZWR1bGVyID0gc2NoZWR1bGVyO1xuICAgICAgICBfdGhpcy53b3JrID0gd29yaztcbiAgICAgICAgcmV0dXJuIF90aGlzO1xuICAgIH1cbiAgICBBbmltYXRpb25GcmFtZUFjdGlvbi5wcm90b3R5cGUucmVxdWVzdEFzeW5jSWQgPSBmdW5jdGlvbiAoc2NoZWR1bGVyLCBpZCwgZGVsYXkpIHtcbiAgICAgICAgaWYgKGRlbGF5ID09PSB2b2lkIDApIHsgZGVsYXkgPSAwOyB9XG4gICAgICAgIGlmIChkZWxheSAhPT0gbnVsbCAmJiBkZWxheSA+IDApIHtcbiAgICAgICAgICAgIHJldHVybiBfc3VwZXIucHJvdG90eXBlLnJlcXVlc3RBc3luY0lkLmNhbGwodGhpcywgc2NoZWR1bGVyLCBpZCwgZGVsYXkpO1xuICAgICAgICB9XG4gICAgICAgIHNjaGVkdWxlci5hY3Rpb25zLnB1c2godGhpcyk7XG4gICAgICAgIHJldHVybiBzY2hlZHVsZXIuX3NjaGVkdWxlZCB8fCAoc2NoZWR1bGVyLl9zY2hlZHVsZWQgPSBhbmltYXRpb25GcmFtZVByb3ZpZGVyXzEuYW5pbWF0aW9uRnJhbWVQcm92aWRlci5yZXF1ZXN0QW5pbWF0aW9uRnJhbWUoZnVuY3Rpb24gKCkgeyByZXR1cm4gc2NoZWR1bGVyLmZsdXNoKHVuZGVmaW5lZCk7IH0pKTtcbiAgICB9O1xuICAgIEFuaW1hdGlvbkZyYW1lQWN0aW9uLnByb3RvdHlwZS5yZWN5Y2xlQXN5bmNJZCA9IGZ1bmN0aW9uIChzY2hlZHVsZXIsIGlkLCBkZWxheSkge1xuICAgICAgICB2YXIgX2E7XG4gICAgICAgIGlmIChkZWxheSA9PT0gdm9pZCAwKSB7IGRlbGF5ID0gMDsgfVxuICAgICAgICBpZiAoZGVsYXkgIT0gbnVsbCA/IGRlbGF5ID4gMCA6IHRoaXMuZGVsYXkgPiAwKSB7XG4gICAgICAgICAgICByZXR1cm4gX3N1cGVyLnByb3RvdHlwZS5yZWN5Y2xlQXN5bmNJZC5jYWxsKHRoaXMsIHNjaGVkdWxlciwgaWQsIGRlbGF5KTtcbiAgICAgICAgfVxuICAgICAgICB2YXIgYWN0aW9ucyA9IHNjaGVkdWxlci5hY3Rpb25zO1xuICAgICAgICBpZiAoaWQgIT0gbnVsbCAmJiAoKF9hID0gYWN0aW9uc1thY3Rpb25zLmxlbmd0aCAtIDFdKSA9PT0gbnVsbCB8fCBfYSA9PT0gdm9pZCAwID8gdm9pZCAwIDogX2EuaWQpICE9PSBpZCkge1xuICAgICAgICAgICAgYW5pbWF0aW9uRnJhbWVQcm92aWRlcl8xLmFuaW1hdGlvbkZyYW1lUHJvdmlkZXIuY2FuY2VsQW5pbWF0aW9uRnJhbWUoaWQpO1xuICAgICAgICAgICAgc2NoZWR1bGVyLl9zY2hlZHVsZWQgPSB1bmRlZmluZWQ7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHVuZGVmaW5lZDtcbiAgICB9O1xuICAgIHJldHVybiBBbmltYXRpb25GcmFtZUFjdGlvbjtcbn0oQXN5bmNBY3Rpb25fMS5Bc3luY0FjdGlvbikpO1xuZXhwb3J0cy5BbmltYXRpb25GcmFtZUFjdGlvbiA9IEFuaW1hdGlvbkZyYW1lQWN0aW9uO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9QW5pbWF0aW9uRnJhbWVBY3Rpb24uanMubWFwIiwiXCJ1c2Ugc3RyaWN0XCI7XG52YXIgX19leHRlbmRzID0gKHRoaXMgJiYgdGhpcy5fX2V4dGVuZHMpIHx8IChmdW5jdGlvbiAoKSB7XG4gICAgdmFyIGV4dGVuZFN0YXRpY3MgPSBmdW5jdGlvbiAoZCwgYikge1xuICAgICAgICBleHRlbmRTdGF0aWNzID0gT2JqZWN0LnNldFByb3RvdHlwZU9mIHx8XG4gICAgICAgICAgICAoeyBfX3Byb3RvX186IFtdIH0gaW5zdGFuY2VvZiBBcnJheSAmJiBmdW5jdGlvbiAoZCwgYikgeyBkLl9fcHJvdG9fXyA9IGI7IH0pIHx8XG4gICAgICAgICAgICBmdW5jdGlvbiAoZCwgYikgeyBmb3IgKHZhciBwIGluIGIpIGlmIChPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwoYiwgcCkpIGRbcF0gPSBiW3BdOyB9O1xuICAgICAgICByZXR1cm4gZXh0ZW5kU3RhdGljcyhkLCBiKTtcbiAgICB9O1xuICAgIHJldHVybiBmdW5jdGlvbiAoZCwgYikge1xuICAgICAgICBpZiAodHlwZW9mIGIgIT09IFwiZnVuY3Rpb25cIiAmJiBiICE9PSBudWxsKVxuICAgICAgICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcihcIkNsYXNzIGV4dGVuZHMgdmFsdWUgXCIgKyBTdHJpbmcoYikgKyBcIiBpcyBub3QgYSBjb25zdHJ1Y3RvciBvciBudWxsXCIpO1xuICAgICAgICBleHRlbmRTdGF0aWNzKGQsIGIpO1xuICAgICAgICBmdW5jdGlvbiBfXygpIHsgdGhpcy5jb25zdHJ1Y3RvciA9IGQ7IH1cbiAgICAgICAgZC5wcm90b3R5cGUgPSBiID09PSBudWxsID8gT2JqZWN0LmNyZWF0ZShiKSA6IChfXy5wcm90b3R5cGUgPSBiLnByb3RvdHlwZSwgbmV3IF9fKCkpO1xuICAgIH07XG59KSgpO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuZXhwb3J0cy5BbmltYXRpb25GcmFtZVNjaGVkdWxlciA9IHZvaWQgMDtcbnZhciBBc3luY1NjaGVkdWxlcl8xID0gcmVxdWlyZShcIi4vQXN5bmNTY2hlZHVsZXJcIik7XG52YXIgQW5pbWF0aW9uRnJhbWVTY2hlZHVsZXIgPSAoZnVuY3Rpb24gKF9zdXBlcikge1xuICAgIF9fZXh0ZW5kcyhBbmltYXRpb25GcmFtZVNjaGVkdWxlciwgX3N1cGVyKTtcbiAgICBmdW5jdGlvbiBBbmltYXRpb25GcmFtZVNjaGVkdWxlcigpIHtcbiAgICAgICAgcmV0dXJuIF9zdXBlciAhPT0gbnVsbCAmJiBfc3VwZXIuYXBwbHkodGhpcywgYXJndW1lbnRzKSB8fCB0aGlzO1xuICAgIH1cbiAgICBBbmltYXRpb25GcmFtZVNjaGVkdWxlci5wcm90b3R5cGUuZmx1c2ggPSBmdW5jdGlvbiAoYWN0aW9uKSB7XG4gICAgICAgIHRoaXMuX2FjdGl2ZSA9IHRydWU7XG4gICAgICAgIHZhciBmbHVzaElkID0gdGhpcy5fc2NoZWR1bGVkO1xuICAgICAgICB0aGlzLl9zY2hlZHVsZWQgPSB1bmRlZmluZWQ7XG4gICAgICAgIHZhciBhY3Rpb25zID0gdGhpcy5hY3Rpb25zO1xuICAgICAgICB2YXIgZXJyb3I7XG4gICAgICAgIGFjdGlvbiA9IGFjdGlvbiB8fCBhY3Rpb25zLnNoaWZ0KCk7XG4gICAgICAgIGRvIHtcbiAgICAgICAgICAgIGlmICgoZXJyb3IgPSBhY3Rpb24uZXhlY3V0ZShhY3Rpb24uc3RhdGUsIGFjdGlvbi5kZWxheSkpKSB7XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0gd2hpbGUgKChhY3Rpb24gPSBhY3Rpb25zWzBdKSAmJiBhY3Rpb24uaWQgPT09IGZsdXNoSWQgJiYgYWN0aW9ucy5zaGlmdCgpKTtcbiAgICAgICAgdGhpcy5fYWN0aXZlID0gZmFsc2U7XG4gICAgICAgIGlmIChlcnJvcikge1xuICAgICAgICAgICAgd2hpbGUgKChhY3Rpb24gPSBhY3Rpb25zWzBdKSAmJiBhY3Rpb24uaWQgPT09IGZsdXNoSWQgJiYgYWN0aW9ucy5zaGlmdCgpKSB7XG4gICAgICAgICAgICAgICAgYWN0aW9uLnVuc3Vic2NyaWJlKCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICB0aHJvdyBlcnJvcjtcbiAgICAgICAgfVxuICAgIH07XG4gICAgcmV0dXJuIEFuaW1hdGlvbkZyYW1lU2NoZWR1bGVyO1xufShBc3luY1NjaGVkdWxlcl8xLkFzeW5jU2NoZWR1bGVyKSk7XG5leHBvcnRzLkFuaW1hdGlvbkZyYW1lU2NoZWR1bGVyID0gQW5pbWF0aW9uRnJhbWVTY2hlZHVsZXI7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1BbmltYXRpb25GcmFtZVNjaGVkdWxlci5qcy5tYXAiLCJcInVzZSBzdHJpY3RcIjtcbnZhciBfX2V4dGVuZHMgPSAodGhpcyAmJiB0aGlzLl9fZXh0ZW5kcykgfHwgKGZ1bmN0aW9uICgpIHtcbiAgICB2YXIgZXh0ZW5kU3RhdGljcyA9IGZ1bmN0aW9uIChkLCBiKSB7XG4gICAgICAgIGV4dGVuZFN0YXRpY3MgPSBPYmplY3Quc2V0UHJvdG90eXBlT2YgfHxcbiAgICAgICAgICAgICh7IF9fcHJvdG9fXzogW10gfSBpbnN0YW5jZW9mIEFycmF5ICYmIGZ1bmN0aW9uIChkLCBiKSB7IGQuX19wcm90b19fID0gYjsgfSkgfHxcbiAgICAgICAgICAgIGZ1bmN0aW9uIChkLCBiKSB7IGZvciAodmFyIHAgaW4gYikgaWYgKE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChiLCBwKSkgZFtwXSA9IGJbcF07IH07XG4gICAgICAgIHJldHVybiBleHRlbmRTdGF0aWNzKGQsIGIpO1xuICAgIH07XG4gICAgcmV0dXJuIGZ1bmN0aW9uIChkLCBiKSB7XG4gICAgICAgIGlmICh0eXBlb2YgYiAhPT0gXCJmdW5jdGlvblwiICYmIGIgIT09IG51bGwpXG4gICAgICAgICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKFwiQ2xhc3MgZXh0ZW5kcyB2YWx1ZSBcIiArIFN0cmluZyhiKSArIFwiIGlzIG5vdCBhIGNvbnN0cnVjdG9yIG9yIG51bGxcIik7XG4gICAgICAgIGV4dGVuZFN0YXRpY3MoZCwgYik7XG4gICAgICAgIGZ1bmN0aW9uIF9fKCkgeyB0aGlzLmNvbnN0cnVjdG9yID0gZDsgfVxuICAgICAgICBkLnByb3RvdHlwZSA9IGIgPT09IG51bGwgPyBPYmplY3QuY3JlYXRlKGIpIDogKF9fLnByb3RvdHlwZSA9IGIucHJvdG90eXBlLCBuZXcgX18oKSk7XG4gICAgfTtcbn0pKCk7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5leHBvcnRzLkFzYXBBY3Rpb24gPSB2b2lkIDA7XG52YXIgQXN5bmNBY3Rpb25fMSA9IHJlcXVpcmUoXCIuL0FzeW5jQWN0aW9uXCIpO1xudmFyIGltbWVkaWF0ZVByb3ZpZGVyXzEgPSByZXF1aXJlKFwiLi9pbW1lZGlhdGVQcm92aWRlclwiKTtcbnZhciBBc2FwQWN0aW9uID0gKGZ1bmN0aW9uIChfc3VwZXIpIHtcbiAgICBfX2V4dGVuZHMoQXNhcEFjdGlvbiwgX3N1cGVyKTtcbiAgICBmdW5jdGlvbiBBc2FwQWN0aW9uKHNjaGVkdWxlciwgd29yaykge1xuICAgICAgICB2YXIgX3RoaXMgPSBfc3VwZXIuY2FsbCh0aGlzLCBzY2hlZHVsZXIsIHdvcmspIHx8IHRoaXM7XG4gICAgICAgIF90aGlzLnNjaGVkdWxlciA9IHNjaGVkdWxlcjtcbiAgICAgICAgX3RoaXMud29yayA9IHdvcms7XG4gICAgICAgIHJldHVybiBfdGhpcztcbiAgICB9XG4gICAgQXNhcEFjdGlvbi5wcm90b3R5cGUucmVxdWVzdEFzeW5jSWQgPSBmdW5jdGlvbiAoc2NoZWR1bGVyLCBpZCwgZGVsYXkpIHtcbiAgICAgICAgaWYgKGRlbGF5ID09PSB2b2lkIDApIHsgZGVsYXkgPSAwOyB9XG4gICAgICAgIGlmIChkZWxheSAhPT0gbnVsbCAmJiBkZWxheSA+IDApIHtcbiAgICAgICAgICAgIHJldHVybiBfc3VwZXIucHJvdG90eXBlLnJlcXVlc3RBc3luY0lkLmNhbGwodGhpcywgc2NoZWR1bGVyLCBpZCwgZGVsYXkpO1xuICAgICAgICB9XG4gICAgICAgIHNjaGVkdWxlci5hY3Rpb25zLnB1c2godGhpcyk7XG4gICAgICAgIHJldHVybiBzY2hlZHVsZXIuX3NjaGVkdWxlZCB8fCAoc2NoZWR1bGVyLl9zY2hlZHVsZWQgPSBpbW1lZGlhdGVQcm92aWRlcl8xLmltbWVkaWF0ZVByb3ZpZGVyLnNldEltbWVkaWF0ZShzY2hlZHVsZXIuZmx1c2guYmluZChzY2hlZHVsZXIsIHVuZGVmaW5lZCkpKTtcbiAgICB9O1xuICAgIEFzYXBBY3Rpb24ucHJvdG90eXBlLnJlY3ljbGVBc3luY0lkID0gZnVuY3Rpb24gKHNjaGVkdWxlciwgaWQsIGRlbGF5KSB7XG4gICAgICAgIHZhciBfYTtcbiAgICAgICAgaWYgKGRlbGF5ID09PSB2b2lkIDApIHsgZGVsYXkgPSAwOyB9XG4gICAgICAgIGlmIChkZWxheSAhPSBudWxsID8gZGVsYXkgPiAwIDogdGhpcy5kZWxheSA+IDApIHtcbiAgICAgICAgICAgIHJldHVybiBfc3VwZXIucHJvdG90eXBlLnJlY3ljbGVBc3luY0lkLmNhbGwodGhpcywgc2NoZWR1bGVyLCBpZCwgZGVsYXkpO1xuICAgICAgICB9XG4gICAgICAgIHZhciBhY3Rpb25zID0gc2NoZWR1bGVyLmFjdGlvbnM7XG4gICAgICAgIGlmIChpZCAhPSBudWxsICYmICgoX2EgPSBhY3Rpb25zW2FjdGlvbnMubGVuZ3RoIC0gMV0pID09PSBudWxsIHx8IF9hID09PSB2b2lkIDAgPyB2b2lkIDAgOiBfYS5pZCkgIT09IGlkKSB7XG4gICAgICAgICAgICBpbW1lZGlhdGVQcm92aWRlcl8xLmltbWVkaWF0ZVByb3ZpZGVyLmNsZWFySW1tZWRpYXRlKGlkKTtcbiAgICAgICAgICAgIGlmIChzY2hlZHVsZXIuX3NjaGVkdWxlZCA9PT0gaWQpIHtcbiAgICAgICAgICAgICAgICBzY2hlZHVsZXIuX3NjaGVkdWxlZCA9IHVuZGVmaW5lZDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gdW5kZWZpbmVkO1xuICAgIH07XG4gICAgcmV0dXJuIEFzYXBBY3Rpb247XG59KEFzeW5jQWN0aW9uXzEuQXN5bmNBY3Rpb24pKTtcbmV4cG9ydHMuQXNhcEFjdGlvbiA9IEFzYXBBY3Rpb247XG4vLyMgc291cmNlTWFwcGluZ1VSTD1Bc2FwQWN0aW9uLmpzLm1hcCIsIlwidXNlIHN0cmljdFwiO1xudmFyIF9fZXh0ZW5kcyA9ICh0aGlzICYmIHRoaXMuX19leHRlbmRzKSB8fCAoZnVuY3Rpb24gKCkge1xuICAgIHZhciBleHRlbmRTdGF0aWNzID0gZnVuY3Rpb24gKGQsIGIpIHtcbiAgICAgICAgZXh0ZW5kU3RhdGljcyA9IE9iamVjdC5zZXRQcm90b3R5cGVPZiB8fFxuICAgICAgICAgICAgKHsgX19wcm90b19fOiBbXSB9IGluc3RhbmNlb2YgQXJyYXkgJiYgZnVuY3Rpb24gKGQsIGIpIHsgZC5fX3Byb3RvX18gPSBiOyB9KSB8fFxuICAgICAgICAgICAgZnVuY3Rpb24gKGQsIGIpIHsgZm9yICh2YXIgcCBpbiBiKSBpZiAoT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKGIsIHApKSBkW3BdID0gYltwXTsgfTtcbiAgICAgICAgcmV0dXJuIGV4dGVuZFN0YXRpY3MoZCwgYik7XG4gICAgfTtcbiAgICByZXR1cm4gZnVuY3Rpb24gKGQsIGIpIHtcbiAgICAgICAgaWYgKHR5cGVvZiBiICE9PSBcImZ1bmN0aW9uXCIgJiYgYiAhPT0gbnVsbClcbiAgICAgICAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoXCJDbGFzcyBleHRlbmRzIHZhbHVlIFwiICsgU3RyaW5nKGIpICsgXCIgaXMgbm90IGEgY29uc3RydWN0b3Igb3IgbnVsbFwiKTtcbiAgICAgICAgZXh0ZW5kU3RhdGljcyhkLCBiKTtcbiAgICAgICAgZnVuY3Rpb24gX18oKSB7IHRoaXMuY29uc3RydWN0b3IgPSBkOyB9XG4gICAgICAgIGQucHJvdG90eXBlID0gYiA9PT0gbnVsbCA/IE9iamVjdC5jcmVhdGUoYikgOiAoX18ucHJvdG90eXBlID0gYi5wcm90b3R5cGUsIG5ldyBfXygpKTtcbiAgICB9O1xufSkoKTtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmV4cG9ydHMuQXNhcFNjaGVkdWxlciA9IHZvaWQgMDtcbnZhciBBc3luY1NjaGVkdWxlcl8xID0gcmVxdWlyZShcIi4vQXN5bmNTY2hlZHVsZXJcIik7XG52YXIgQXNhcFNjaGVkdWxlciA9IChmdW5jdGlvbiAoX3N1cGVyKSB7XG4gICAgX19leHRlbmRzKEFzYXBTY2hlZHVsZXIsIF9zdXBlcik7XG4gICAgZnVuY3Rpb24gQXNhcFNjaGVkdWxlcigpIHtcbiAgICAgICAgcmV0dXJuIF9zdXBlciAhPT0gbnVsbCAmJiBfc3VwZXIuYXBwbHkodGhpcywgYXJndW1lbnRzKSB8fCB0aGlzO1xuICAgIH1cbiAgICBBc2FwU2NoZWR1bGVyLnByb3RvdHlwZS5mbHVzaCA9IGZ1bmN0aW9uIChhY3Rpb24pIHtcbiAgICAgICAgdGhpcy5fYWN0aXZlID0gdHJ1ZTtcbiAgICAgICAgdmFyIGZsdXNoSWQgPSB0aGlzLl9zY2hlZHVsZWQ7XG4gICAgICAgIHRoaXMuX3NjaGVkdWxlZCA9IHVuZGVmaW5lZDtcbiAgICAgICAgdmFyIGFjdGlvbnMgPSB0aGlzLmFjdGlvbnM7XG4gICAgICAgIHZhciBlcnJvcjtcbiAgICAgICAgYWN0aW9uID0gYWN0aW9uIHx8IGFjdGlvbnMuc2hpZnQoKTtcbiAgICAgICAgZG8ge1xuICAgICAgICAgICAgaWYgKChlcnJvciA9IGFjdGlvbi5leGVjdXRlKGFjdGlvbi5zdGF0ZSwgYWN0aW9uLmRlbGF5KSkpIHtcbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSB3aGlsZSAoKGFjdGlvbiA9IGFjdGlvbnNbMF0pICYmIGFjdGlvbi5pZCA9PT0gZmx1c2hJZCAmJiBhY3Rpb25zLnNoaWZ0KCkpO1xuICAgICAgICB0aGlzLl9hY3RpdmUgPSBmYWxzZTtcbiAgICAgICAgaWYgKGVycm9yKSB7XG4gICAgICAgICAgICB3aGlsZSAoKGFjdGlvbiA9IGFjdGlvbnNbMF0pICYmIGFjdGlvbi5pZCA9PT0gZmx1c2hJZCAmJiBhY3Rpb25zLnNoaWZ0KCkpIHtcbiAgICAgICAgICAgICAgICBhY3Rpb24udW5zdWJzY3JpYmUoKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHRocm93IGVycm9yO1xuICAgICAgICB9XG4gICAgfTtcbiAgICByZXR1cm4gQXNhcFNjaGVkdWxlcjtcbn0oQXN5bmNTY2hlZHVsZXJfMS5Bc3luY1NjaGVkdWxlcikpO1xuZXhwb3J0cy5Bc2FwU2NoZWR1bGVyID0gQXNhcFNjaGVkdWxlcjtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPUFzYXBTY2hlZHVsZXIuanMubWFwIiwiXCJ1c2Ugc3RyaWN0XCI7XG52YXIgX19leHRlbmRzID0gKHRoaXMgJiYgdGhpcy5fX2V4dGVuZHMpIHx8IChmdW5jdGlvbiAoKSB7XG4gICAgdmFyIGV4dGVuZFN0YXRpY3MgPSBmdW5jdGlvbiAoZCwgYikge1xuICAgICAgICBleHRlbmRTdGF0aWNzID0gT2JqZWN0LnNldFByb3RvdHlwZU9mIHx8XG4gICAgICAgICAgICAoeyBfX3Byb3RvX186IFtdIH0gaW5zdGFuY2VvZiBBcnJheSAmJiBmdW5jdGlvbiAoZCwgYikgeyBkLl9fcHJvdG9fXyA9IGI7IH0pIHx8XG4gICAgICAgICAgICBmdW5jdGlvbiAoZCwgYikgeyBmb3IgKHZhciBwIGluIGIpIGlmIChPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwoYiwgcCkpIGRbcF0gPSBiW3BdOyB9O1xuICAgICAgICByZXR1cm4gZXh0ZW5kU3RhdGljcyhkLCBiKTtcbiAgICB9O1xuICAgIHJldHVybiBmdW5jdGlvbiAoZCwgYikge1xuICAgICAgICBpZiAodHlwZW9mIGIgIT09IFwiZnVuY3Rpb25cIiAmJiBiICE9PSBudWxsKVxuICAgICAgICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcihcIkNsYXNzIGV4dGVuZHMgdmFsdWUgXCIgKyBTdHJpbmcoYikgKyBcIiBpcyBub3QgYSBjb25zdHJ1Y3RvciBvciBudWxsXCIpO1xuICAgICAgICBleHRlbmRTdGF0aWNzKGQsIGIpO1xuICAgICAgICBmdW5jdGlvbiBfXygpIHsgdGhpcy5jb25zdHJ1Y3RvciA9IGQ7IH1cbiAgICAgICAgZC5wcm90b3R5cGUgPSBiID09PSBudWxsID8gT2JqZWN0LmNyZWF0ZShiKSA6IChfXy5wcm90b3R5cGUgPSBiLnByb3RvdHlwZSwgbmV3IF9fKCkpO1xuICAgIH07XG59KSgpO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuZXhwb3J0cy5Bc3luY0FjdGlvbiA9IHZvaWQgMDtcbnZhciBBY3Rpb25fMSA9IHJlcXVpcmUoXCIuL0FjdGlvblwiKTtcbnZhciBpbnRlcnZhbFByb3ZpZGVyXzEgPSByZXF1aXJlKFwiLi9pbnRlcnZhbFByb3ZpZGVyXCIpO1xudmFyIGFyclJlbW92ZV8xID0gcmVxdWlyZShcIi4uL3V0aWwvYXJyUmVtb3ZlXCIpO1xudmFyIEFzeW5jQWN0aW9uID0gKGZ1bmN0aW9uIChfc3VwZXIpIHtcbiAgICBfX2V4dGVuZHMoQXN5bmNBY3Rpb24sIF9zdXBlcik7XG4gICAgZnVuY3Rpb24gQXN5bmNBY3Rpb24oc2NoZWR1bGVyLCB3b3JrKSB7XG4gICAgICAgIHZhciBfdGhpcyA9IF9zdXBlci5jYWxsKHRoaXMsIHNjaGVkdWxlciwgd29yaykgfHwgdGhpcztcbiAgICAgICAgX3RoaXMuc2NoZWR1bGVyID0gc2NoZWR1bGVyO1xuICAgICAgICBfdGhpcy53b3JrID0gd29yaztcbiAgICAgICAgX3RoaXMucGVuZGluZyA9IGZhbHNlO1xuICAgICAgICByZXR1cm4gX3RoaXM7XG4gICAgfVxuICAgIEFzeW5jQWN0aW9uLnByb3RvdHlwZS5zY2hlZHVsZSA9IGZ1bmN0aW9uIChzdGF0ZSwgZGVsYXkpIHtcbiAgICAgICAgdmFyIF9hO1xuICAgICAgICBpZiAoZGVsYXkgPT09IHZvaWQgMCkgeyBkZWxheSA9IDA7IH1cbiAgICAgICAgaWYgKHRoaXMuY2xvc2VkKSB7XG4gICAgICAgICAgICByZXR1cm4gdGhpcztcbiAgICAgICAgfVxuICAgICAgICB0aGlzLnN0YXRlID0gc3RhdGU7XG4gICAgICAgIHZhciBpZCA9IHRoaXMuaWQ7XG4gICAgICAgIHZhciBzY2hlZHVsZXIgPSB0aGlzLnNjaGVkdWxlcjtcbiAgICAgICAgaWYgKGlkICE9IG51bGwpIHtcbiAgICAgICAgICAgIHRoaXMuaWQgPSB0aGlzLnJlY3ljbGVBc3luY0lkKHNjaGVkdWxlciwgaWQsIGRlbGF5KTtcbiAgICAgICAgfVxuICAgICAgICB0aGlzLnBlbmRpbmcgPSB0cnVlO1xuICAgICAgICB0aGlzLmRlbGF5ID0gZGVsYXk7XG4gICAgICAgIHRoaXMuaWQgPSAoX2EgPSB0aGlzLmlkKSAhPT0gbnVsbCAmJiBfYSAhPT0gdm9pZCAwID8gX2EgOiB0aGlzLnJlcXVlc3RBc3luY0lkKHNjaGVkdWxlciwgdGhpcy5pZCwgZGVsYXkpO1xuICAgICAgICByZXR1cm4gdGhpcztcbiAgICB9O1xuICAgIEFzeW5jQWN0aW9uLnByb3RvdHlwZS5yZXF1ZXN0QXN5bmNJZCA9IGZ1bmN0aW9uIChzY2hlZHVsZXIsIF9pZCwgZGVsYXkpIHtcbiAgICAgICAgaWYgKGRlbGF5ID09PSB2b2lkIDApIHsgZGVsYXkgPSAwOyB9XG4gICAgICAgIHJldHVybiBpbnRlcnZhbFByb3ZpZGVyXzEuaW50ZXJ2YWxQcm92aWRlci5zZXRJbnRlcnZhbChzY2hlZHVsZXIuZmx1c2guYmluZChzY2hlZHVsZXIsIHRoaXMpLCBkZWxheSk7XG4gICAgfTtcbiAgICBBc3luY0FjdGlvbi5wcm90b3R5cGUucmVjeWNsZUFzeW5jSWQgPSBmdW5jdGlvbiAoX3NjaGVkdWxlciwgaWQsIGRlbGF5KSB7XG4gICAgICAgIGlmIChkZWxheSA9PT0gdm9pZCAwKSB7IGRlbGF5ID0gMDsgfVxuICAgICAgICBpZiAoZGVsYXkgIT0gbnVsbCAmJiB0aGlzLmRlbGF5ID09PSBkZWxheSAmJiB0aGlzLnBlbmRpbmcgPT09IGZhbHNlKSB7XG4gICAgICAgICAgICByZXR1cm4gaWQ7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKGlkICE9IG51bGwpIHtcbiAgICAgICAgICAgIGludGVydmFsUHJvdmlkZXJfMS5pbnRlcnZhbFByb3ZpZGVyLmNsZWFySW50ZXJ2YWwoaWQpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiB1bmRlZmluZWQ7XG4gICAgfTtcbiAgICBBc3luY0FjdGlvbi5wcm90b3R5cGUuZXhlY3V0ZSA9IGZ1bmN0aW9uIChzdGF0ZSwgZGVsYXkpIHtcbiAgICAgICAgaWYgKHRoaXMuY2xvc2VkKSB7XG4gICAgICAgICAgICByZXR1cm4gbmV3IEVycm9yKCdleGVjdXRpbmcgYSBjYW5jZWxsZWQgYWN0aW9uJyk7XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5wZW5kaW5nID0gZmFsc2U7XG4gICAgICAgIHZhciBlcnJvciA9IHRoaXMuX2V4ZWN1dGUoc3RhdGUsIGRlbGF5KTtcbiAgICAgICAgaWYgKGVycm9yKSB7XG4gICAgICAgICAgICByZXR1cm4gZXJyb3I7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSBpZiAodGhpcy5wZW5kaW5nID09PSBmYWxzZSAmJiB0aGlzLmlkICE9IG51bGwpIHtcbiAgICAgICAgICAgIHRoaXMuaWQgPSB0aGlzLnJlY3ljbGVBc3luY0lkKHRoaXMuc2NoZWR1bGVyLCB0aGlzLmlkLCBudWxsKTtcbiAgICAgICAgfVxuICAgIH07XG4gICAgQXN5bmNBY3Rpb24ucHJvdG90eXBlLl9leGVjdXRlID0gZnVuY3Rpb24gKHN0YXRlLCBfZGVsYXkpIHtcbiAgICAgICAgdmFyIGVycm9yZWQgPSBmYWxzZTtcbiAgICAgICAgdmFyIGVycm9yVmFsdWU7XG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgICB0aGlzLndvcmsoc3RhdGUpO1xuICAgICAgICB9XG4gICAgICAgIGNhdGNoIChlKSB7XG4gICAgICAgICAgICBlcnJvcmVkID0gdHJ1ZTtcbiAgICAgICAgICAgIGVycm9yVmFsdWUgPSBlID8gZSA6IG5ldyBFcnJvcignU2NoZWR1bGVkIGFjdGlvbiB0aHJldyBmYWxzeSBlcnJvcicpO1xuICAgICAgICB9XG4gICAgICAgIGlmIChlcnJvcmVkKSB7XG4gICAgICAgICAgICB0aGlzLnVuc3Vic2NyaWJlKCk7XG4gICAgICAgICAgICByZXR1cm4gZXJyb3JWYWx1ZTtcbiAgICAgICAgfVxuICAgIH07XG4gICAgQXN5bmNBY3Rpb24ucHJvdG90eXBlLnVuc3Vic2NyaWJlID0gZnVuY3Rpb24gKCkge1xuICAgICAgICBpZiAoIXRoaXMuY2xvc2VkKSB7XG4gICAgICAgICAgICB2YXIgX2EgPSB0aGlzLCBpZCA9IF9hLmlkLCBzY2hlZHVsZXIgPSBfYS5zY2hlZHVsZXI7XG4gICAgICAgICAgICB2YXIgYWN0aW9ucyA9IHNjaGVkdWxlci5hY3Rpb25zO1xuICAgICAgICAgICAgdGhpcy53b3JrID0gdGhpcy5zdGF0ZSA9IHRoaXMuc2NoZWR1bGVyID0gbnVsbDtcbiAgICAgICAgICAgIHRoaXMucGVuZGluZyA9IGZhbHNlO1xuICAgICAgICAgICAgYXJyUmVtb3ZlXzEuYXJyUmVtb3ZlKGFjdGlvbnMsIHRoaXMpO1xuICAgICAgICAgICAgaWYgKGlkICE9IG51bGwpIHtcbiAgICAgICAgICAgICAgICB0aGlzLmlkID0gdGhpcy5yZWN5Y2xlQXN5bmNJZChzY2hlZHVsZXIsIGlkLCBudWxsKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHRoaXMuZGVsYXkgPSBudWxsO1xuICAgICAgICAgICAgX3N1cGVyLnByb3RvdHlwZS51bnN1YnNjcmliZS5jYWxsKHRoaXMpO1xuICAgICAgICB9XG4gICAgfTtcbiAgICByZXR1cm4gQXN5bmNBY3Rpb247XG59KEFjdGlvbl8xLkFjdGlvbikpO1xuZXhwb3J0cy5Bc3luY0FjdGlvbiA9IEFzeW5jQWN0aW9uO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9QXN5bmNBY3Rpb24uanMubWFwIiwiXCJ1c2Ugc3RyaWN0XCI7XG52YXIgX19leHRlbmRzID0gKHRoaXMgJiYgdGhpcy5fX2V4dGVuZHMpIHx8IChmdW5jdGlvbiAoKSB7XG4gICAgdmFyIGV4dGVuZFN0YXRpY3MgPSBmdW5jdGlvbiAoZCwgYikge1xuICAgICAgICBleHRlbmRTdGF0aWNzID0gT2JqZWN0LnNldFByb3RvdHlwZU9mIHx8XG4gICAgICAgICAgICAoeyBfX3Byb3RvX186IFtdIH0gaW5zdGFuY2VvZiBBcnJheSAmJiBmdW5jdGlvbiAoZCwgYikgeyBkLl9fcHJvdG9fXyA9IGI7IH0pIHx8XG4gICAgICAgICAgICBmdW5jdGlvbiAoZCwgYikgeyBmb3IgKHZhciBwIGluIGIpIGlmIChPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwoYiwgcCkpIGRbcF0gPSBiW3BdOyB9O1xuICAgICAgICByZXR1cm4gZXh0ZW5kU3RhdGljcyhkLCBiKTtcbiAgICB9O1xuICAgIHJldHVybiBmdW5jdGlvbiAoZCwgYikge1xuICAgICAgICBpZiAodHlwZW9mIGIgIT09IFwiZnVuY3Rpb25cIiAmJiBiICE9PSBudWxsKVxuICAgICAgICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcihcIkNsYXNzIGV4dGVuZHMgdmFsdWUgXCIgKyBTdHJpbmcoYikgKyBcIiBpcyBub3QgYSBjb25zdHJ1Y3RvciBvciBudWxsXCIpO1xuICAgICAgICBleHRlbmRTdGF0aWNzKGQsIGIpO1xuICAgICAgICBmdW5jdGlvbiBfXygpIHsgdGhpcy5jb25zdHJ1Y3RvciA9IGQ7IH1cbiAgICAgICAgZC5wcm90b3R5cGUgPSBiID09PSBudWxsID8gT2JqZWN0LmNyZWF0ZShiKSA6IChfXy5wcm90b3R5cGUgPSBiLnByb3RvdHlwZSwgbmV3IF9fKCkpO1xuICAgIH07XG59KSgpO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuZXhwb3J0cy5Bc3luY1NjaGVkdWxlciA9IHZvaWQgMDtcbnZhciBTY2hlZHVsZXJfMSA9IHJlcXVpcmUoXCIuLi9TY2hlZHVsZXJcIik7XG52YXIgQXN5bmNTY2hlZHVsZXIgPSAoZnVuY3Rpb24gKF9zdXBlcikge1xuICAgIF9fZXh0ZW5kcyhBc3luY1NjaGVkdWxlciwgX3N1cGVyKTtcbiAgICBmdW5jdGlvbiBBc3luY1NjaGVkdWxlcihTY2hlZHVsZXJBY3Rpb24sIG5vdykge1xuICAgICAgICBpZiAobm93ID09PSB2b2lkIDApIHsgbm93ID0gU2NoZWR1bGVyXzEuU2NoZWR1bGVyLm5vdzsgfVxuICAgICAgICB2YXIgX3RoaXMgPSBfc3VwZXIuY2FsbCh0aGlzLCBTY2hlZHVsZXJBY3Rpb24sIG5vdykgfHwgdGhpcztcbiAgICAgICAgX3RoaXMuYWN0aW9ucyA9IFtdO1xuICAgICAgICBfdGhpcy5fYWN0aXZlID0gZmFsc2U7XG4gICAgICAgIHJldHVybiBfdGhpcztcbiAgICB9XG4gICAgQXN5bmNTY2hlZHVsZXIucHJvdG90eXBlLmZsdXNoID0gZnVuY3Rpb24gKGFjdGlvbikge1xuICAgICAgICB2YXIgYWN0aW9ucyA9IHRoaXMuYWN0aW9ucztcbiAgICAgICAgaWYgKHRoaXMuX2FjdGl2ZSkge1xuICAgICAgICAgICAgYWN0aW9ucy5wdXNoKGFjdGlvbik7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICAgICAgdmFyIGVycm9yO1xuICAgICAgICB0aGlzLl9hY3RpdmUgPSB0cnVlO1xuICAgICAgICBkbyB7XG4gICAgICAgICAgICBpZiAoKGVycm9yID0gYWN0aW9uLmV4ZWN1dGUoYWN0aW9uLnN0YXRlLCBhY3Rpb24uZGVsYXkpKSkge1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgfVxuICAgICAgICB9IHdoaWxlICgoYWN0aW9uID0gYWN0aW9ucy5zaGlmdCgpKSk7XG4gICAgICAgIHRoaXMuX2FjdGl2ZSA9IGZhbHNlO1xuICAgICAgICBpZiAoZXJyb3IpIHtcbiAgICAgICAgICAgIHdoaWxlICgoYWN0aW9uID0gYWN0aW9ucy5zaGlmdCgpKSkge1xuICAgICAgICAgICAgICAgIGFjdGlvbi51bnN1YnNjcmliZSgpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgdGhyb3cgZXJyb3I7XG4gICAgICAgIH1cbiAgICB9O1xuICAgIHJldHVybiBBc3luY1NjaGVkdWxlcjtcbn0oU2NoZWR1bGVyXzEuU2NoZWR1bGVyKSk7XG5leHBvcnRzLkFzeW5jU2NoZWR1bGVyID0gQXN5bmNTY2hlZHVsZXI7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1Bc3luY1NjaGVkdWxlci5qcy5tYXAiLCJcInVzZSBzdHJpY3RcIjtcbnZhciBfX2V4dGVuZHMgPSAodGhpcyAmJiB0aGlzLl9fZXh0ZW5kcykgfHwgKGZ1bmN0aW9uICgpIHtcbiAgICB2YXIgZXh0ZW5kU3RhdGljcyA9IGZ1bmN0aW9uIChkLCBiKSB7XG4gICAgICAgIGV4dGVuZFN0YXRpY3MgPSBPYmplY3Quc2V0UHJvdG90eXBlT2YgfHxcbiAgICAgICAgICAgICh7IF9fcHJvdG9fXzogW10gfSBpbnN0YW5jZW9mIEFycmF5ICYmIGZ1bmN0aW9uIChkLCBiKSB7IGQuX19wcm90b19fID0gYjsgfSkgfHxcbiAgICAgICAgICAgIGZ1bmN0aW9uIChkLCBiKSB7IGZvciAodmFyIHAgaW4gYikgaWYgKE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChiLCBwKSkgZFtwXSA9IGJbcF07IH07XG4gICAgICAgIHJldHVybiBleHRlbmRTdGF0aWNzKGQsIGIpO1xuICAgIH07XG4gICAgcmV0dXJuIGZ1bmN0aW9uIChkLCBiKSB7XG4gICAgICAgIGlmICh0eXBlb2YgYiAhPT0gXCJmdW5jdGlvblwiICYmIGIgIT09IG51bGwpXG4gICAgICAgICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKFwiQ2xhc3MgZXh0ZW5kcyB2YWx1ZSBcIiArIFN0cmluZyhiKSArIFwiIGlzIG5vdCBhIGNvbnN0cnVjdG9yIG9yIG51bGxcIik7XG4gICAgICAgIGV4dGVuZFN0YXRpY3MoZCwgYik7XG4gICAgICAgIGZ1bmN0aW9uIF9fKCkgeyB0aGlzLmNvbnN0cnVjdG9yID0gZDsgfVxuICAgICAgICBkLnByb3RvdHlwZSA9IGIgPT09IG51bGwgPyBPYmplY3QuY3JlYXRlKGIpIDogKF9fLnByb3RvdHlwZSA9IGIucHJvdG90eXBlLCBuZXcgX18oKSk7XG4gICAgfTtcbn0pKCk7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5leHBvcnRzLlF1ZXVlQWN0aW9uID0gdm9pZCAwO1xudmFyIEFzeW5jQWN0aW9uXzEgPSByZXF1aXJlKFwiLi9Bc3luY0FjdGlvblwiKTtcbnZhciBRdWV1ZUFjdGlvbiA9IChmdW5jdGlvbiAoX3N1cGVyKSB7XG4gICAgX19leHRlbmRzKFF1ZXVlQWN0aW9uLCBfc3VwZXIpO1xuICAgIGZ1bmN0aW9uIFF1ZXVlQWN0aW9uKHNjaGVkdWxlciwgd29yaykge1xuICAgICAgICB2YXIgX3RoaXMgPSBfc3VwZXIuY2FsbCh0aGlzLCBzY2hlZHVsZXIsIHdvcmspIHx8IHRoaXM7XG4gICAgICAgIF90aGlzLnNjaGVkdWxlciA9IHNjaGVkdWxlcjtcbiAgICAgICAgX3RoaXMud29yayA9IHdvcms7XG4gICAgICAgIHJldHVybiBfdGhpcztcbiAgICB9XG4gICAgUXVldWVBY3Rpb24ucHJvdG90eXBlLnNjaGVkdWxlID0gZnVuY3Rpb24gKHN0YXRlLCBkZWxheSkge1xuICAgICAgICBpZiAoZGVsYXkgPT09IHZvaWQgMCkgeyBkZWxheSA9IDA7IH1cbiAgICAgICAgaWYgKGRlbGF5ID4gMCkge1xuICAgICAgICAgICAgcmV0dXJuIF9zdXBlci5wcm90b3R5cGUuc2NoZWR1bGUuY2FsbCh0aGlzLCBzdGF0ZSwgZGVsYXkpO1xuICAgICAgICB9XG4gICAgICAgIHRoaXMuZGVsYXkgPSBkZWxheTtcbiAgICAgICAgdGhpcy5zdGF0ZSA9IHN0YXRlO1xuICAgICAgICB0aGlzLnNjaGVkdWxlci5mbHVzaCh0aGlzKTtcbiAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfTtcbiAgICBRdWV1ZUFjdGlvbi5wcm90b3R5cGUuZXhlY3V0ZSA9IGZ1bmN0aW9uIChzdGF0ZSwgZGVsYXkpIHtcbiAgICAgICAgcmV0dXJuIGRlbGF5ID4gMCB8fCB0aGlzLmNsb3NlZCA/IF9zdXBlci5wcm90b3R5cGUuZXhlY3V0ZS5jYWxsKHRoaXMsIHN0YXRlLCBkZWxheSkgOiB0aGlzLl9leGVjdXRlKHN0YXRlLCBkZWxheSk7XG4gICAgfTtcbiAgICBRdWV1ZUFjdGlvbi5wcm90b3R5cGUucmVxdWVzdEFzeW5jSWQgPSBmdW5jdGlvbiAoc2NoZWR1bGVyLCBpZCwgZGVsYXkpIHtcbiAgICAgICAgaWYgKGRlbGF5ID09PSB2b2lkIDApIHsgZGVsYXkgPSAwOyB9XG4gICAgICAgIGlmICgoZGVsYXkgIT0gbnVsbCAmJiBkZWxheSA+IDApIHx8IChkZWxheSA9PSBudWxsICYmIHRoaXMuZGVsYXkgPiAwKSkge1xuICAgICAgICAgICAgcmV0dXJuIF9zdXBlci5wcm90b3R5cGUucmVxdWVzdEFzeW5jSWQuY2FsbCh0aGlzLCBzY2hlZHVsZXIsIGlkLCBkZWxheSk7XG4gICAgICAgIH1cbiAgICAgICAgc2NoZWR1bGVyLmZsdXNoKHRoaXMpO1xuICAgICAgICByZXR1cm4gMDtcbiAgICB9O1xuICAgIHJldHVybiBRdWV1ZUFjdGlvbjtcbn0oQXN5bmNBY3Rpb25fMS5Bc3luY0FjdGlvbikpO1xuZXhwb3J0cy5RdWV1ZUFjdGlvbiA9IFF1ZXVlQWN0aW9uO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9UXVldWVBY3Rpb24uanMubWFwIiwiXCJ1c2Ugc3RyaWN0XCI7XG52YXIgX19leHRlbmRzID0gKHRoaXMgJiYgdGhpcy5fX2V4dGVuZHMpIHx8IChmdW5jdGlvbiAoKSB7XG4gICAgdmFyIGV4dGVuZFN0YXRpY3MgPSBmdW5jdGlvbiAoZCwgYikge1xuICAgICAgICBleHRlbmRTdGF0aWNzID0gT2JqZWN0LnNldFByb3RvdHlwZU9mIHx8XG4gICAgICAgICAgICAoeyBfX3Byb3RvX186IFtdIH0gaW5zdGFuY2VvZiBBcnJheSAmJiBmdW5jdGlvbiAoZCwgYikgeyBkLl9fcHJvdG9fXyA9IGI7IH0pIHx8XG4gICAgICAgICAgICBmdW5jdGlvbiAoZCwgYikgeyBmb3IgKHZhciBwIGluIGIpIGlmIChPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwoYiwgcCkpIGRbcF0gPSBiW3BdOyB9O1xuICAgICAgICByZXR1cm4gZXh0ZW5kU3RhdGljcyhkLCBiKTtcbiAgICB9O1xuICAgIHJldHVybiBmdW5jdGlvbiAoZCwgYikge1xuICAgICAgICBpZiAodHlwZW9mIGIgIT09IFwiZnVuY3Rpb25cIiAmJiBiICE9PSBudWxsKVxuICAgICAgICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcihcIkNsYXNzIGV4dGVuZHMgdmFsdWUgXCIgKyBTdHJpbmcoYikgKyBcIiBpcyBub3QgYSBjb25zdHJ1Y3RvciBvciBudWxsXCIpO1xuICAgICAgICBleHRlbmRTdGF0aWNzKGQsIGIpO1xuICAgICAgICBmdW5jdGlvbiBfXygpIHsgdGhpcy5jb25zdHJ1Y3RvciA9IGQ7IH1cbiAgICAgICAgZC5wcm90b3R5cGUgPSBiID09PSBudWxsID8gT2JqZWN0LmNyZWF0ZShiKSA6IChfXy5wcm90b3R5cGUgPSBiLnByb3RvdHlwZSwgbmV3IF9fKCkpO1xuICAgIH07XG59KSgpO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuZXhwb3J0cy5RdWV1ZVNjaGVkdWxlciA9IHZvaWQgMDtcbnZhciBBc3luY1NjaGVkdWxlcl8xID0gcmVxdWlyZShcIi4vQXN5bmNTY2hlZHVsZXJcIik7XG52YXIgUXVldWVTY2hlZHVsZXIgPSAoZnVuY3Rpb24gKF9zdXBlcikge1xuICAgIF9fZXh0ZW5kcyhRdWV1ZVNjaGVkdWxlciwgX3N1cGVyKTtcbiAgICBmdW5jdGlvbiBRdWV1ZVNjaGVkdWxlcigpIHtcbiAgICAgICAgcmV0dXJuIF9zdXBlciAhPT0gbnVsbCAmJiBfc3VwZXIuYXBwbHkodGhpcywgYXJndW1lbnRzKSB8fCB0aGlzO1xuICAgIH1cbiAgICByZXR1cm4gUXVldWVTY2hlZHVsZXI7XG59KEFzeW5jU2NoZWR1bGVyXzEuQXN5bmNTY2hlZHVsZXIpKTtcbmV4cG9ydHMuUXVldWVTY2hlZHVsZXIgPSBRdWV1ZVNjaGVkdWxlcjtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPVF1ZXVlU2NoZWR1bGVyLmpzLm1hcCIsIlwidXNlIHN0cmljdFwiO1xudmFyIF9fZXh0ZW5kcyA9ICh0aGlzICYmIHRoaXMuX19leHRlbmRzKSB8fCAoZnVuY3Rpb24gKCkge1xuICAgIHZhciBleHRlbmRTdGF0aWNzID0gZnVuY3Rpb24gKGQsIGIpIHtcbiAgICAgICAgZXh0ZW5kU3RhdGljcyA9IE9iamVjdC5zZXRQcm90b3R5cGVPZiB8fFxuICAgICAgICAgICAgKHsgX19wcm90b19fOiBbXSB9IGluc3RhbmNlb2YgQXJyYXkgJiYgZnVuY3Rpb24gKGQsIGIpIHsgZC5fX3Byb3RvX18gPSBiOyB9KSB8fFxuICAgICAgICAgICAgZnVuY3Rpb24gKGQsIGIpIHsgZm9yICh2YXIgcCBpbiBiKSBpZiAoT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKGIsIHApKSBkW3BdID0gYltwXTsgfTtcbiAgICAgICAgcmV0dXJuIGV4dGVuZFN0YXRpY3MoZCwgYik7XG4gICAgfTtcbiAgICByZXR1cm4gZnVuY3Rpb24gKGQsIGIpIHtcbiAgICAgICAgaWYgKHR5cGVvZiBiICE9PSBcImZ1bmN0aW9uXCIgJiYgYiAhPT0gbnVsbClcbiAgICAgICAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoXCJDbGFzcyBleHRlbmRzIHZhbHVlIFwiICsgU3RyaW5nKGIpICsgXCIgaXMgbm90IGEgY29uc3RydWN0b3Igb3IgbnVsbFwiKTtcbiAgICAgICAgZXh0ZW5kU3RhdGljcyhkLCBiKTtcbiAgICAgICAgZnVuY3Rpb24gX18oKSB7IHRoaXMuY29uc3RydWN0b3IgPSBkOyB9XG4gICAgICAgIGQucHJvdG90eXBlID0gYiA9PT0gbnVsbCA/IE9iamVjdC5jcmVhdGUoYikgOiAoX18ucHJvdG90eXBlID0gYi5wcm90b3R5cGUsIG5ldyBfXygpKTtcbiAgICB9O1xufSkoKTtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmV4cG9ydHMuVmlydHVhbEFjdGlvbiA9IGV4cG9ydHMuVmlydHVhbFRpbWVTY2hlZHVsZXIgPSB2b2lkIDA7XG52YXIgQXN5bmNBY3Rpb25fMSA9IHJlcXVpcmUoXCIuL0FzeW5jQWN0aW9uXCIpO1xudmFyIFN1YnNjcmlwdGlvbl8xID0gcmVxdWlyZShcIi4uL1N1YnNjcmlwdGlvblwiKTtcbnZhciBBc3luY1NjaGVkdWxlcl8xID0gcmVxdWlyZShcIi4vQXN5bmNTY2hlZHVsZXJcIik7XG52YXIgVmlydHVhbFRpbWVTY2hlZHVsZXIgPSAoZnVuY3Rpb24gKF9zdXBlcikge1xuICAgIF9fZXh0ZW5kcyhWaXJ0dWFsVGltZVNjaGVkdWxlciwgX3N1cGVyKTtcbiAgICBmdW5jdGlvbiBWaXJ0dWFsVGltZVNjaGVkdWxlcihzY2hlZHVsZXJBY3Rpb25DdG9yLCBtYXhGcmFtZXMpIHtcbiAgICAgICAgaWYgKHNjaGVkdWxlckFjdGlvbkN0b3IgPT09IHZvaWQgMCkgeyBzY2hlZHVsZXJBY3Rpb25DdG9yID0gVmlydHVhbEFjdGlvbjsgfVxuICAgICAgICBpZiAobWF4RnJhbWVzID09PSB2b2lkIDApIHsgbWF4RnJhbWVzID0gSW5maW5pdHk7IH1cbiAgICAgICAgdmFyIF90aGlzID0gX3N1cGVyLmNhbGwodGhpcywgc2NoZWR1bGVyQWN0aW9uQ3RvciwgZnVuY3Rpb24gKCkgeyByZXR1cm4gX3RoaXMuZnJhbWU7IH0pIHx8IHRoaXM7XG4gICAgICAgIF90aGlzLm1heEZyYW1lcyA9IG1heEZyYW1lcztcbiAgICAgICAgX3RoaXMuZnJhbWUgPSAwO1xuICAgICAgICBfdGhpcy5pbmRleCA9IC0xO1xuICAgICAgICByZXR1cm4gX3RoaXM7XG4gICAgfVxuICAgIFZpcnR1YWxUaW1lU2NoZWR1bGVyLnByb3RvdHlwZS5mbHVzaCA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgdmFyIF9hID0gdGhpcywgYWN0aW9ucyA9IF9hLmFjdGlvbnMsIG1heEZyYW1lcyA9IF9hLm1heEZyYW1lcztcbiAgICAgICAgdmFyIGVycm9yO1xuICAgICAgICB2YXIgYWN0aW9uO1xuICAgICAgICB3aGlsZSAoKGFjdGlvbiA9IGFjdGlvbnNbMF0pICYmIGFjdGlvbi5kZWxheSA8PSBtYXhGcmFtZXMpIHtcbiAgICAgICAgICAgIGFjdGlvbnMuc2hpZnQoKTtcbiAgICAgICAgICAgIHRoaXMuZnJhbWUgPSBhY3Rpb24uZGVsYXk7XG4gICAgICAgICAgICBpZiAoKGVycm9yID0gYWN0aW9uLmV4ZWN1dGUoYWN0aW9uLnN0YXRlLCBhY3Rpb24uZGVsYXkpKSkge1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIGlmIChlcnJvcikge1xuICAgICAgICAgICAgd2hpbGUgKChhY3Rpb24gPSBhY3Rpb25zLnNoaWZ0KCkpKSB7XG4gICAgICAgICAgICAgICAgYWN0aW9uLnVuc3Vic2NyaWJlKCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICB0aHJvdyBlcnJvcjtcbiAgICAgICAgfVxuICAgIH07XG4gICAgVmlydHVhbFRpbWVTY2hlZHVsZXIuZnJhbWVUaW1lRmFjdG9yID0gMTA7XG4gICAgcmV0dXJuIFZpcnR1YWxUaW1lU2NoZWR1bGVyO1xufShBc3luY1NjaGVkdWxlcl8xLkFzeW5jU2NoZWR1bGVyKSk7XG5leHBvcnRzLlZpcnR1YWxUaW1lU2NoZWR1bGVyID0gVmlydHVhbFRpbWVTY2hlZHVsZXI7XG52YXIgVmlydHVhbEFjdGlvbiA9IChmdW5jdGlvbiAoX3N1cGVyKSB7XG4gICAgX19leHRlbmRzKFZpcnR1YWxBY3Rpb24sIF9zdXBlcik7XG4gICAgZnVuY3Rpb24gVmlydHVhbEFjdGlvbihzY2hlZHVsZXIsIHdvcmssIGluZGV4KSB7XG4gICAgICAgIGlmIChpbmRleCA9PT0gdm9pZCAwKSB7IGluZGV4ID0gKHNjaGVkdWxlci5pbmRleCArPSAxKTsgfVxuICAgICAgICB2YXIgX3RoaXMgPSBfc3VwZXIuY2FsbCh0aGlzLCBzY2hlZHVsZXIsIHdvcmspIHx8IHRoaXM7XG4gICAgICAgIF90aGlzLnNjaGVkdWxlciA9IHNjaGVkdWxlcjtcbiAgICAgICAgX3RoaXMud29yayA9IHdvcms7XG4gICAgICAgIF90aGlzLmluZGV4ID0gaW5kZXg7XG4gICAgICAgIF90aGlzLmFjdGl2ZSA9IHRydWU7XG4gICAgICAgIF90aGlzLmluZGV4ID0gc2NoZWR1bGVyLmluZGV4ID0gaW5kZXg7XG4gICAgICAgIHJldHVybiBfdGhpcztcbiAgICB9XG4gICAgVmlydHVhbEFjdGlvbi5wcm90b3R5cGUuc2NoZWR1bGUgPSBmdW5jdGlvbiAoc3RhdGUsIGRlbGF5KSB7XG4gICAgICAgIGlmIChkZWxheSA9PT0gdm9pZCAwKSB7IGRlbGF5ID0gMDsgfVxuICAgICAgICBpZiAoTnVtYmVyLmlzRmluaXRlKGRlbGF5KSkge1xuICAgICAgICAgICAgaWYgKCF0aGlzLmlkKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIF9zdXBlci5wcm90b3R5cGUuc2NoZWR1bGUuY2FsbCh0aGlzLCBzdGF0ZSwgZGVsYXkpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgdGhpcy5hY3RpdmUgPSBmYWxzZTtcbiAgICAgICAgICAgIHZhciBhY3Rpb24gPSBuZXcgVmlydHVhbEFjdGlvbih0aGlzLnNjaGVkdWxlciwgdGhpcy53b3JrKTtcbiAgICAgICAgICAgIHRoaXMuYWRkKGFjdGlvbik7XG4gICAgICAgICAgICByZXR1cm4gYWN0aW9uLnNjaGVkdWxlKHN0YXRlLCBkZWxheSk7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICByZXR1cm4gU3Vic2NyaXB0aW9uXzEuU3Vic2NyaXB0aW9uLkVNUFRZO1xuICAgICAgICB9XG4gICAgfTtcbiAgICBWaXJ0dWFsQWN0aW9uLnByb3RvdHlwZS5yZXF1ZXN0QXN5bmNJZCA9IGZ1bmN0aW9uIChzY2hlZHVsZXIsIGlkLCBkZWxheSkge1xuICAgICAgICBpZiAoZGVsYXkgPT09IHZvaWQgMCkgeyBkZWxheSA9IDA7IH1cbiAgICAgICAgdGhpcy5kZWxheSA9IHNjaGVkdWxlci5mcmFtZSArIGRlbGF5O1xuICAgICAgICB2YXIgYWN0aW9ucyA9IHNjaGVkdWxlci5hY3Rpb25zO1xuICAgICAgICBhY3Rpb25zLnB1c2godGhpcyk7XG4gICAgICAgIGFjdGlvbnMuc29ydChWaXJ0dWFsQWN0aW9uLnNvcnRBY3Rpb25zKTtcbiAgICAgICAgcmV0dXJuIDE7XG4gICAgfTtcbiAgICBWaXJ0dWFsQWN0aW9uLnByb3RvdHlwZS5yZWN5Y2xlQXN5bmNJZCA9IGZ1bmN0aW9uIChzY2hlZHVsZXIsIGlkLCBkZWxheSkge1xuICAgICAgICBpZiAoZGVsYXkgPT09IHZvaWQgMCkgeyBkZWxheSA9IDA7IH1cbiAgICAgICAgcmV0dXJuIHVuZGVmaW5lZDtcbiAgICB9O1xuICAgIFZpcnR1YWxBY3Rpb24ucHJvdG90eXBlLl9leGVjdXRlID0gZnVuY3Rpb24gKHN0YXRlLCBkZWxheSkge1xuICAgICAgICBpZiAodGhpcy5hY3RpdmUgPT09IHRydWUpIHtcbiAgICAgICAgICAgIHJldHVybiBfc3VwZXIucHJvdG90eXBlLl9leGVjdXRlLmNhbGwodGhpcywgc3RhdGUsIGRlbGF5KTtcbiAgICAgICAgfVxuICAgIH07XG4gICAgVmlydHVhbEFjdGlvbi5zb3J0QWN0aW9ucyA9IGZ1bmN0aW9uIChhLCBiKSB7XG4gICAgICAgIGlmIChhLmRlbGF5ID09PSBiLmRlbGF5KSB7XG4gICAgICAgICAgICBpZiAoYS5pbmRleCA9PT0gYi5pbmRleCkge1xuICAgICAgICAgICAgICAgIHJldHVybiAwO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSBpZiAoYS5pbmRleCA+IGIuaW5kZXgpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gMTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgIHJldHVybiAtMTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBlbHNlIGlmIChhLmRlbGF5ID4gYi5kZWxheSkge1xuICAgICAgICAgICAgcmV0dXJuIDE7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICByZXR1cm4gLTE7XG4gICAgICAgIH1cbiAgICB9O1xuICAgIHJldHVybiBWaXJ0dWFsQWN0aW9uO1xufShBc3luY0FjdGlvbl8xLkFzeW5jQWN0aW9uKSk7XG5leHBvcnRzLlZpcnR1YWxBY3Rpb24gPSBWaXJ0dWFsQWN0aW9uO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9VmlydHVhbFRpbWVTY2hlZHVsZXIuanMubWFwIiwiXCJ1c2Ugc3RyaWN0XCI7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5leHBvcnRzLmFuaW1hdGlvbkZyYW1lID0gZXhwb3J0cy5hbmltYXRpb25GcmFtZVNjaGVkdWxlciA9IHZvaWQgMDtcbnZhciBBbmltYXRpb25GcmFtZUFjdGlvbl8xID0gcmVxdWlyZShcIi4vQW5pbWF0aW9uRnJhbWVBY3Rpb25cIik7XG52YXIgQW5pbWF0aW9uRnJhbWVTY2hlZHVsZXJfMSA9IHJlcXVpcmUoXCIuL0FuaW1hdGlvbkZyYW1lU2NoZWR1bGVyXCIpO1xuZXhwb3J0cy5hbmltYXRpb25GcmFtZVNjaGVkdWxlciA9IG5ldyBBbmltYXRpb25GcmFtZVNjaGVkdWxlcl8xLkFuaW1hdGlvbkZyYW1lU2NoZWR1bGVyKEFuaW1hdGlvbkZyYW1lQWN0aW9uXzEuQW5pbWF0aW9uRnJhbWVBY3Rpb24pO1xuZXhwb3J0cy5hbmltYXRpb25GcmFtZSA9IGV4cG9ydHMuYW5pbWF0aW9uRnJhbWVTY2hlZHVsZXI7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1hbmltYXRpb25GcmFtZS5qcy5tYXAiLCJcInVzZSBzdHJpY3RcIjtcbnZhciBfX3JlYWQgPSAodGhpcyAmJiB0aGlzLl9fcmVhZCkgfHwgZnVuY3Rpb24gKG8sIG4pIHtcbiAgICB2YXIgbSA9IHR5cGVvZiBTeW1ib2wgPT09IFwiZnVuY3Rpb25cIiAmJiBvW1N5bWJvbC5pdGVyYXRvcl07XG4gICAgaWYgKCFtKSByZXR1cm4gbztcbiAgICB2YXIgaSA9IG0uY2FsbChvKSwgciwgYXIgPSBbXSwgZTtcbiAgICB0cnkge1xuICAgICAgICB3aGlsZSAoKG4gPT09IHZvaWQgMCB8fCBuLS0gPiAwKSAmJiAhKHIgPSBpLm5leHQoKSkuZG9uZSkgYXIucHVzaChyLnZhbHVlKTtcbiAgICB9XG4gICAgY2F0Y2ggKGVycm9yKSB7IGUgPSB7IGVycm9yOiBlcnJvciB9OyB9XG4gICAgZmluYWxseSB7XG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgICBpZiAociAmJiAhci5kb25lICYmIChtID0gaVtcInJldHVyblwiXSkpIG0uY2FsbChpKTtcbiAgICAgICAgfVxuICAgICAgICBmaW5hbGx5IHsgaWYgKGUpIHRocm93IGUuZXJyb3I7IH1cbiAgICB9XG4gICAgcmV0dXJuIGFyO1xufTtcbnZhciBfX3NwcmVhZEFycmF5ID0gKHRoaXMgJiYgdGhpcy5fX3NwcmVhZEFycmF5KSB8fCBmdW5jdGlvbiAodG8sIGZyb20pIHtcbiAgICBmb3IgKHZhciBpID0gMCwgaWwgPSBmcm9tLmxlbmd0aCwgaiA9IHRvLmxlbmd0aDsgaSA8IGlsOyBpKyssIGorKylcbiAgICAgICAgdG9bal0gPSBmcm9tW2ldO1xuICAgIHJldHVybiB0bztcbn07XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5leHBvcnRzLmFuaW1hdGlvbkZyYW1lUHJvdmlkZXIgPSB2b2lkIDA7XG52YXIgU3Vic2NyaXB0aW9uXzEgPSByZXF1aXJlKFwiLi4vU3Vic2NyaXB0aW9uXCIpO1xuZXhwb3J0cy5hbmltYXRpb25GcmFtZVByb3ZpZGVyID0ge1xuICAgIHNjaGVkdWxlOiBmdW5jdGlvbiAoY2FsbGJhY2spIHtcbiAgICAgICAgdmFyIHJlcXVlc3QgPSByZXF1ZXN0QW5pbWF0aW9uRnJhbWU7XG4gICAgICAgIHZhciBjYW5jZWwgPSBjYW5jZWxBbmltYXRpb25GcmFtZTtcbiAgICAgICAgdmFyIGRlbGVnYXRlID0gZXhwb3J0cy5hbmltYXRpb25GcmFtZVByb3ZpZGVyLmRlbGVnYXRlO1xuICAgICAgICBpZiAoZGVsZWdhdGUpIHtcbiAgICAgICAgICAgIHJlcXVlc3QgPSBkZWxlZ2F0ZS5yZXF1ZXN0QW5pbWF0aW9uRnJhbWU7XG4gICAgICAgICAgICBjYW5jZWwgPSBkZWxlZ2F0ZS5jYW5jZWxBbmltYXRpb25GcmFtZTtcbiAgICAgICAgfVxuICAgICAgICB2YXIgaGFuZGxlID0gcmVxdWVzdChmdW5jdGlvbiAodGltZXN0YW1wKSB7XG4gICAgICAgICAgICBjYW5jZWwgPSB1bmRlZmluZWQ7XG4gICAgICAgICAgICBjYWxsYmFjayh0aW1lc3RhbXApO1xuICAgICAgICB9KTtcbiAgICAgICAgcmV0dXJuIG5ldyBTdWJzY3JpcHRpb25fMS5TdWJzY3JpcHRpb24oZnVuY3Rpb24gKCkgeyByZXR1cm4gY2FuY2VsID09PSBudWxsIHx8IGNhbmNlbCA9PT0gdm9pZCAwID8gdm9pZCAwIDogY2FuY2VsKGhhbmRsZSk7IH0pO1xuICAgIH0sXG4gICAgcmVxdWVzdEFuaW1hdGlvbkZyYW1lOiBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHZhciBhcmdzID0gW107XG4gICAgICAgIGZvciAodmFyIF9pID0gMDsgX2kgPCBhcmd1bWVudHMubGVuZ3RoOyBfaSsrKSB7XG4gICAgICAgICAgICBhcmdzW19pXSA9IGFyZ3VtZW50c1tfaV07XG4gICAgICAgIH1cbiAgICAgICAgdmFyIGRlbGVnYXRlID0gZXhwb3J0cy5hbmltYXRpb25GcmFtZVByb3ZpZGVyLmRlbGVnYXRlO1xuICAgICAgICByZXR1cm4gKChkZWxlZ2F0ZSA9PT0gbnVsbCB8fCBkZWxlZ2F0ZSA9PT0gdm9pZCAwID8gdm9pZCAwIDogZGVsZWdhdGUucmVxdWVzdEFuaW1hdGlvbkZyYW1lKSB8fCByZXF1ZXN0QW5pbWF0aW9uRnJhbWUpLmFwcGx5KHZvaWQgMCwgX19zcHJlYWRBcnJheShbXSwgX19yZWFkKGFyZ3MpKSk7XG4gICAgfSxcbiAgICBjYW5jZWxBbmltYXRpb25GcmFtZTogZnVuY3Rpb24gKCkge1xuICAgICAgICB2YXIgYXJncyA9IFtdO1xuICAgICAgICBmb3IgKHZhciBfaSA9IDA7IF9pIDwgYXJndW1lbnRzLmxlbmd0aDsgX2krKykge1xuICAgICAgICAgICAgYXJnc1tfaV0gPSBhcmd1bWVudHNbX2ldO1xuICAgICAgICB9XG4gICAgICAgIHZhciBkZWxlZ2F0ZSA9IGV4cG9ydHMuYW5pbWF0aW9uRnJhbWVQcm92aWRlci5kZWxlZ2F0ZTtcbiAgICAgICAgcmV0dXJuICgoZGVsZWdhdGUgPT09IG51bGwgfHwgZGVsZWdhdGUgPT09IHZvaWQgMCA/IHZvaWQgMCA6IGRlbGVnYXRlLmNhbmNlbEFuaW1hdGlvbkZyYW1lKSB8fCBjYW5jZWxBbmltYXRpb25GcmFtZSkuYXBwbHkodm9pZCAwLCBfX3NwcmVhZEFycmF5KFtdLCBfX3JlYWQoYXJncykpKTtcbiAgICB9LFxuICAgIGRlbGVnYXRlOiB1bmRlZmluZWQsXG59O1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9YW5pbWF0aW9uRnJhbWVQcm92aWRlci5qcy5tYXAiLCJcInVzZSBzdHJpY3RcIjtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmV4cG9ydHMuYXNhcCA9IGV4cG9ydHMuYXNhcFNjaGVkdWxlciA9IHZvaWQgMDtcbnZhciBBc2FwQWN0aW9uXzEgPSByZXF1aXJlKFwiLi9Bc2FwQWN0aW9uXCIpO1xudmFyIEFzYXBTY2hlZHVsZXJfMSA9IHJlcXVpcmUoXCIuL0FzYXBTY2hlZHVsZXJcIik7XG5leHBvcnRzLmFzYXBTY2hlZHVsZXIgPSBuZXcgQXNhcFNjaGVkdWxlcl8xLkFzYXBTY2hlZHVsZXIoQXNhcEFjdGlvbl8xLkFzYXBBY3Rpb24pO1xuZXhwb3J0cy5hc2FwID0gZXhwb3J0cy5hc2FwU2NoZWR1bGVyO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9YXNhcC5qcy5tYXAiLCJcInVzZSBzdHJpY3RcIjtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmV4cG9ydHMuYXN5bmMgPSBleHBvcnRzLmFzeW5jU2NoZWR1bGVyID0gdm9pZCAwO1xudmFyIEFzeW5jQWN0aW9uXzEgPSByZXF1aXJlKFwiLi9Bc3luY0FjdGlvblwiKTtcbnZhciBBc3luY1NjaGVkdWxlcl8xID0gcmVxdWlyZShcIi4vQXN5bmNTY2hlZHVsZXJcIik7XG5leHBvcnRzLmFzeW5jU2NoZWR1bGVyID0gbmV3IEFzeW5jU2NoZWR1bGVyXzEuQXN5bmNTY2hlZHVsZXIoQXN5bmNBY3Rpb25fMS5Bc3luY0FjdGlvbik7XG5leHBvcnRzLmFzeW5jID0gZXhwb3J0cy5hc3luY1NjaGVkdWxlcjtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWFzeW5jLmpzLm1hcCIsIlwidXNlIHN0cmljdFwiO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuZXhwb3J0cy5kYXRlVGltZXN0YW1wUHJvdmlkZXIgPSB2b2lkIDA7XG5leHBvcnRzLmRhdGVUaW1lc3RhbXBQcm92aWRlciA9IHtcbiAgICBub3c6IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgcmV0dXJuIChleHBvcnRzLmRhdGVUaW1lc3RhbXBQcm92aWRlci5kZWxlZ2F0ZSB8fCBEYXRlKS5ub3coKTtcbiAgICB9LFxuICAgIGRlbGVnYXRlOiB1bmRlZmluZWQsXG59O1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9ZGF0ZVRpbWVzdGFtcFByb3ZpZGVyLmpzLm1hcCIsIlwidXNlIHN0cmljdFwiO1xudmFyIF9fcmVhZCA9ICh0aGlzICYmIHRoaXMuX19yZWFkKSB8fCBmdW5jdGlvbiAobywgbikge1xuICAgIHZhciBtID0gdHlwZW9mIFN5bWJvbCA9PT0gXCJmdW5jdGlvblwiICYmIG9bU3ltYm9sLml0ZXJhdG9yXTtcbiAgICBpZiAoIW0pIHJldHVybiBvO1xuICAgIHZhciBpID0gbS5jYWxsKG8pLCByLCBhciA9IFtdLCBlO1xuICAgIHRyeSB7XG4gICAgICAgIHdoaWxlICgobiA9PT0gdm9pZCAwIHx8IG4tLSA+IDApICYmICEociA9IGkubmV4dCgpKS5kb25lKSBhci5wdXNoKHIudmFsdWUpO1xuICAgIH1cbiAgICBjYXRjaCAoZXJyb3IpIHsgZSA9IHsgZXJyb3I6IGVycm9yIH07IH1cbiAgICBmaW5hbGx5IHtcbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgIGlmIChyICYmICFyLmRvbmUgJiYgKG0gPSBpW1wicmV0dXJuXCJdKSkgbS5jYWxsKGkpO1xuICAgICAgICB9XG4gICAgICAgIGZpbmFsbHkgeyBpZiAoZSkgdGhyb3cgZS5lcnJvcjsgfVxuICAgIH1cbiAgICByZXR1cm4gYXI7XG59O1xudmFyIF9fc3ByZWFkQXJyYXkgPSAodGhpcyAmJiB0aGlzLl9fc3ByZWFkQXJyYXkpIHx8IGZ1bmN0aW9uICh0bywgZnJvbSkge1xuICAgIGZvciAodmFyIGkgPSAwLCBpbCA9IGZyb20ubGVuZ3RoLCBqID0gdG8ubGVuZ3RoOyBpIDwgaWw7IGkrKywgaisrKVxuICAgICAgICB0b1tqXSA9IGZyb21baV07XG4gICAgcmV0dXJuIHRvO1xufTtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmV4cG9ydHMuaW1tZWRpYXRlUHJvdmlkZXIgPSB2b2lkIDA7XG52YXIgSW1tZWRpYXRlXzEgPSByZXF1aXJlKFwiLi4vdXRpbC9JbW1lZGlhdGVcIik7XG52YXIgc2V0SW1tZWRpYXRlID0gSW1tZWRpYXRlXzEuSW1tZWRpYXRlLnNldEltbWVkaWF0ZSwgY2xlYXJJbW1lZGlhdGUgPSBJbW1lZGlhdGVfMS5JbW1lZGlhdGUuY2xlYXJJbW1lZGlhdGU7XG5leHBvcnRzLmltbWVkaWF0ZVByb3ZpZGVyID0ge1xuICAgIHNldEltbWVkaWF0ZTogZnVuY3Rpb24gKCkge1xuICAgICAgICB2YXIgYXJncyA9IFtdO1xuICAgICAgICBmb3IgKHZhciBfaSA9IDA7IF9pIDwgYXJndW1lbnRzLmxlbmd0aDsgX2krKykge1xuICAgICAgICAgICAgYXJnc1tfaV0gPSBhcmd1bWVudHNbX2ldO1xuICAgICAgICB9XG4gICAgICAgIHZhciBkZWxlZ2F0ZSA9IGV4cG9ydHMuaW1tZWRpYXRlUHJvdmlkZXIuZGVsZWdhdGU7XG4gICAgICAgIHJldHVybiAoKGRlbGVnYXRlID09PSBudWxsIHx8IGRlbGVnYXRlID09PSB2b2lkIDAgPyB2b2lkIDAgOiBkZWxlZ2F0ZS5zZXRJbW1lZGlhdGUpIHx8IHNldEltbWVkaWF0ZSkuYXBwbHkodm9pZCAwLCBfX3NwcmVhZEFycmF5KFtdLCBfX3JlYWQoYXJncykpKTtcbiAgICB9LFxuICAgIGNsZWFySW1tZWRpYXRlOiBmdW5jdGlvbiAoaGFuZGxlKSB7XG4gICAgICAgIHZhciBkZWxlZ2F0ZSA9IGV4cG9ydHMuaW1tZWRpYXRlUHJvdmlkZXIuZGVsZWdhdGU7XG4gICAgICAgIHJldHVybiAoKGRlbGVnYXRlID09PSBudWxsIHx8IGRlbGVnYXRlID09PSB2b2lkIDAgPyB2b2lkIDAgOiBkZWxlZ2F0ZS5jbGVhckltbWVkaWF0ZSkgfHwgY2xlYXJJbW1lZGlhdGUpKGhhbmRsZSk7XG4gICAgfSxcbiAgICBkZWxlZ2F0ZTogdW5kZWZpbmVkLFxufTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWltbWVkaWF0ZVByb3ZpZGVyLmpzLm1hcCIsIlwidXNlIHN0cmljdFwiO1xudmFyIF9fcmVhZCA9ICh0aGlzICYmIHRoaXMuX19yZWFkKSB8fCBmdW5jdGlvbiAobywgbikge1xuICAgIHZhciBtID0gdHlwZW9mIFN5bWJvbCA9PT0gXCJmdW5jdGlvblwiICYmIG9bU3ltYm9sLml0ZXJhdG9yXTtcbiAgICBpZiAoIW0pIHJldHVybiBvO1xuICAgIHZhciBpID0gbS5jYWxsKG8pLCByLCBhciA9IFtdLCBlO1xuICAgIHRyeSB7XG4gICAgICAgIHdoaWxlICgobiA9PT0gdm9pZCAwIHx8IG4tLSA+IDApICYmICEociA9IGkubmV4dCgpKS5kb25lKSBhci5wdXNoKHIudmFsdWUpO1xuICAgIH1cbiAgICBjYXRjaCAoZXJyb3IpIHsgZSA9IHsgZXJyb3I6IGVycm9yIH07IH1cbiAgICBmaW5hbGx5IHtcbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgIGlmIChyICYmICFyLmRvbmUgJiYgKG0gPSBpW1wicmV0dXJuXCJdKSkgbS5jYWxsKGkpO1xuICAgICAgICB9XG4gICAgICAgIGZpbmFsbHkgeyBpZiAoZSkgdGhyb3cgZS5lcnJvcjsgfVxuICAgIH1cbiAgICByZXR1cm4gYXI7XG59O1xudmFyIF9fc3ByZWFkQXJyYXkgPSAodGhpcyAmJiB0aGlzLl9fc3ByZWFkQXJyYXkpIHx8IGZ1bmN0aW9uICh0bywgZnJvbSkge1xuICAgIGZvciAodmFyIGkgPSAwLCBpbCA9IGZyb20ubGVuZ3RoLCBqID0gdG8ubGVuZ3RoOyBpIDwgaWw7IGkrKywgaisrKVxuICAgICAgICB0b1tqXSA9IGZyb21baV07XG4gICAgcmV0dXJuIHRvO1xufTtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmV4cG9ydHMuaW50ZXJ2YWxQcm92aWRlciA9IHZvaWQgMDtcbmV4cG9ydHMuaW50ZXJ2YWxQcm92aWRlciA9IHtcbiAgICBzZXRJbnRlcnZhbDogZnVuY3Rpb24gKGhhbmRsZXIsIHRpbWVvdXQpIHtcbiAgICAgICAgdmFyIGFyZ3MgPSBbXTtcbiAgICAgICAgZm9yICh2YXIgX2kgPSAyOyBfaSA8IGFyZ3VtZW50cy5sZW5ndGg7IF9pKyspIHtcbiAgICAgICAgICAgIGFyZ3NbX2kgLSAyXSA9IGFyZ3VtZW50c1tfaV07XG4gICAgICAgIH1cbiAgICAgICAgdmFyIGRlbGVnYXRlID0gZXhwb3J0cy5pbnRlcnZhbFByb3ZpZGVyLmRlbGVnYXRlO1xuICAgICAgICBpZiAoZGVsZWdhdGUgPT09IG51bGwgfHwgZGVsZWdhdGUgPT09IHZvaWQgMCA/IHZvaWQgMCA6IGRlbGVnYXRlLnNldEludGVydmFsKSB7XG4gICAgICAgICAgICByZXR1cm4gZGVsZWdhdGUuc2V0SW50ZXJ2YWwuYXBwbHkoZGVsZWdhdGUsIF9fc3ByZWFkQXJyYXkoW2hhbmRsZXIsIHRpbWVvdXRdLCBfX3JlYWQoYXJncykpKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gc2V0SW50ZXJ2YWwuYXBwbHkodm9pZCAwLCBfX3NwcmVhZEFycmF5KFtoYW5kbGVyLCB0aW1lb3V0XSwgX19yZWFkKGFyZ3MpKSk7XG4gICAgfSxcbiAgICBjbGVhckludGVydmFsOiBmdW5jdGlvbiAoaGFuZGxlKSB7XG4gICAgICAgIHZhciBkZWxlZ2F0ZSA9IGV4cG9ydHMuaW50ZXJ2YWxQcm92aWRlci5kZWxlZ2F0ZTtcbiAgICAgICAgcmV0dXJuICgoZGVsZWdhdGUgPT09IG51bGwgfHwgZGVsZWdhdGUgPT09IHZvaWQgMCA/IHZvaWQgMCA6IGRlbGVnYXRlLmNsZWFySW50ZXJ2YWwpIHx8IGNsZWFySW50ZXJ2YWwpKGhhbmRsZSk7XG4gICAgfSxcbiAgICBkZWxlZ2F0ZTogdW5kZWZpbmVkLFxufTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWludGVydmFsUHJvdmlkZXIuanMubWFwIiwiXCJ1c2Ugc3RyaWN0XCI7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5leHBvcnRzLnBlcmZvcm1hbmNlVGltZXN0YW1wUHJvdmlkZXIgPSB2b2lkIDA7XG5leHBvcnRzLnBlcmZvcm1hbmNlVGltZXN0YW1wUHJvdmlkZXIgPSB7XG4gICAgbm93OiBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHJldHVybiAoZXhwb3J0cy5wZXJmb3JtYW5jZVRpbWVzdGFtcFByb3ZpZGVyLmRlbGVnYXRlIHx8IHBlcmZvcm1hbmNlKS5ub3coKTtcbiAgICB9LFxuICAgIGRlbGVnYXRlOiB1bmRlZmluZWQsXG59O1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9cGVyZm9ybWFuY2VUaW1lc3RhbXBQcm92aWRlci5qcy5tYXAiLCJcInVzZSBzdHJpY3RcIjtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmV4cG9ydHMucXVldWUgPSBleHBvcnRzLnF1ZXVlU2NoZWR1bGVyID0gdm9pZCAwO1xudmFyIFF1ZXVlQWN0aW9uXzEgPSByZXF1aXJlKFwiLi9RdWV1ZUFjdGlvblwiKTtcbnZhciBRdWV1ZVNjaGVkdWxlcl8xID0gcmVxdWlyZShcIi4vUXVldWVTY2hlZHVsZXJcIik7XG5leHBvcnRzLnF1ZXVlU2NoZWR1bGVyID0gbmV3IFF1ZXVlU2NoZWR1bGVyXzEuUXVldWVTY2hlZHVsZXIoUXVldWVBY3Rpb25fMS5RdWV1ZUFjdGlvbik7XG5leHBvcnRzLnF1ZXVlID0gZXhwb3J0cy5xdWV1ZVNjaGVkdWxlcjtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPXF1ZXVlLmpzLm1hcCIsIlwidXNlIHN0cmljdFwiO1xudmFyIF9fcmVhZCA9ICh0aGlzICYmIHRoaXMuX19yZWFkKSB8fCBmdW5jdGlvbiAobywgbikge1xuICAgIHZhciBtID0gdHlwZW9mIFN5bWJvbCA9PT0gXCJmdW5jdGlvblwiICYmIG9bU3ltYm9sLml0ZXJhdG9yXTtcbiAgICBpZiAoIW0pIHJldHVybiBvO1xuICAgIHZhciBpID0gbS5jYWxsKG8pLCByLCBhciA9IFtdLCBlO1xuICAgIHRyeSB7XG4gICAgICAgIHdoaWxlICgobiA9PT0gdm9pZCAwIHx8IG4tLSA+IDApICYmICEociA9IGkubmV4dCgpKS5kb25lKSBhci5wdXNoKHIudmFsdWUpO1xuICAgIH1cbiAgICBjYXRjaCAoZXJyb3IpIHsgZSA9IHsgZXJyb3I6IGVycm9yIH07IH1cbiAgICBmaW5hbGx5IHtcbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgIGlmIChyICYmICFyLmRvbmUgJiYgKG0gPSBpW1wicmV0dXJuXCJdKSkgbS5jYWxsKGkpO1xuICAgICAgICB9XG4gICAgICAgIGZpbmFsbHkgeyBpZiAoZSkgdGhyb3cgZS5lcnJvcjsgfVxuICAgIH1cbiAgICByZXR1cm4gYXI7XG59O1xudmFyIF9fc3ByZWFkQXJyYXkgPSAodGhpcyAmJiB0aGlzLl9fc3ByZWFkQXJyYXkpIHx8IGZ1bmN0aW9uICh0bywgZnJvbSkge1xuICAgIGZvciAodmFyIGkgPSAwLCBpbCA9IGZyb20ubGVuZ3RoLCBqID0gdG8ubGVuZ3RoOyBpIDwgaWw7IGkrKywgaisrKVxuICAgICAgICB0b1tqXSA9IGZyb21baV07XG4gICAgcmV0dXJuIHRvO1xufTtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmV4cG9ydHMudGltZW91dFByb3ZpZGVyID0gdm9pZCAwO1xuZXhwb3J0cy50aW1lb3V0UHJvdmlkZXIgPSB7XG4gICAgc2V0VGltZW91dDogZnVuY3Rpb24gKGhhbmRsZXIsIHRpbWVvdXQpIHtcbiAgICAgICAgdmFyIGFyZ3MgPSBbXTtcbiAgICAgICAgZm9yICh2YXIgX2kgPSAyOyBfaSA8IGFyZ3VtZW50cy5sZW5ndGg7IF9pKyspIHtcbiAgICAgICAgICAgIGFyZ3NbX2kgLSAyXSA9IGFyZ3VtZW50c1tfaV07XG4gICAgICAgIH1cbiAgICAgICAgdmFyIGRlbGVnYXRlID0gZXhwb3J0cy50aW1lb3V0UHJvdmlkZXIuZGVsZWdhdGU7XG4gICAgICAgIGlmIChkZWxlZ2F0ZSA9PT0gbnVsbCB8fCBkZWxlZ2F0ZSA9PT0gdm9pZCAwID8gdm9pZCAwIDogZGVsZWdhdGUuc2V0VGltZW91dCkge1xuICAgICAgICAgICAgcmV0dXJuIGRlbGVnYXRlLnNldFRpbWVvdXQuYXBwbHkoZGVsZWdhdGUsIF9fc3ByZWFkQXJyYXkoW2hhbmRsZXIsIHRpbWVvdXRdLCBfX3JlYWQoYXJncykpKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gc2V0VGltZW91dC5hcHBseSh2b2lkIDAsIF9fc3ByZWFkQXJyYXkoW2hhbmRsZXIsIHRpbWVvdXRdLCBfX3JlYWQoYXJncykpKTtcbiAgICB9LFxuICAgIGNsZWFyVGltZW91dDogZnVuY3Rpb24gKGhhbmRsZSkge1xuICAgICAgICB2YXIgZGVsZWdhdGUgPSBleHBvcnRzLnRpbWVvdXRQcm92aWRlci5kZWxlZ2F0ZTtcbiAgICAgICAgcmV0dXJuICgoZGVsZWdhdGUgPT09IG51bGwgfHwgZGVsZWdhdGUgPT09IHZvaWQgMCA/IHZvaWQgMCA6IGRlbGVnYXRlLmNsZWFyVGltZW91dCkgfHwgY2xlYXJUaW1lb3V0KShoYW5kbGUpO1xuICAgIH0sXG4gICAgZGVsZWdhdGU6IHVuZGVmaW5lZCxcbn07XG4vLyMgc291cmNlTWFwcGluZ1VSTD10aW1lb3V0UHJvdmlkZXIuanMubWFwIiwiXCJ1c2Ugc3RyaWN0XCI7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5leHBvcnRzLml0ZXJhdG9yID0gZXhwb3J0cy5nZXRTeW1ib2xJdGVyYXRvciA9IHZvaWQgMDtcbmZ1bmN0aW9uIGdldFN5bWJvbEl0ZXJhdG9yKCkge1xuICAgIGlmICh0eXBlb2YgU3ltYm9sICE9PSAnZnVuY3Rpb24nIHx8ICFTeW1ib2wuaXRlcmF0b3IpIHtcbiAgICAgICAgcmV0dXJuICdAQGl0ZXJhdG9yJztcbiAgICB9XG4gICAgcmV0dXJuIFN5bWJvbC5pdGVyYXRvcjtcbn1cbmV4cG9ydHMuZ2V0U3ltYm9sSXRlcmF0b3IgPSBnZXRTeW1ib2xJdGVyYXRvcjtcbmV4cG9ydHMuaXRlcmF0b3IgPSBnZXRTeW1ib2xJdGVyYXRvcigpO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9aXRlcmF0b3IuanMubWFwIiwiXCJ1c2Ugc3RyaWN0XCI7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5leHBvcnRzLm9ic2VydmFibGUgPSB2b2lkIDA7XG5leHBvcnRzLm9ic2VydmFibGUgPSAoZnVuY3Rpb24gKCkgeyByZXR1cm4gKHR5cGVvZiBTeW1ib2wgPT09ICdmdW5jdGlvbicgJiYgU3ltYm9sLm9ic2VydmFibGUpIHx8ICdAQG9ic2VydmFibGUnOyB9KSgpO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9b2JzZXJ2YWJsZS5qcy5tYXAiLCJcInVzZSBzdHJpY3RcIjtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPXR5cGVzLmpzLm1hcCIsIlwidXNlIHN0cmljdFwiO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuZXhwb3J0cy5Bcmd1bWVudE91dE9mUmFuZ2VFcnJvciA9IHZvaWQgMDtcbnZhciBjcmVhdGVFcnJvckNsYXNzXzEgPSByZXF1aXJlKFwiLi9jcmVhdGVFcnJvckNsYXNzXCIpO1xuZXhwb3J0cy5Bcmd1bWVudE91dE9mUmFuZ2VFcnJvciA9IGNyZWF0ZUVycm9yQ2xhc3NfMS5jcmVhdGVFcnJvckNsYXNzKGZ1bmN0aW9uIChfc3VwZXIpIHtcbiAgICByZXR1cm4gZnVuY3Rpb24gQXJndW1lbnRPdXRPZlJhbmdlRXJyb3JJbXBsKCkge1xuICAgICAgICBfc3VwZXIodGhpcyk7XG4gICAgICAgIHRoaXMubmFtZSA9ICdBcmd1bWVudE91dE9mUmFuZ2VFcnJvcic7XG4gICAgICAgIHRoaXMubWVzc2FnZSA9ICdhcmd1bWVudCBvdXQgb2YgcmFuZ2UnO1xuICAgIH07XG59KTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPUFyZ3VtZW50T3V0T2ZSYW5nZUVycm9yLmpzLm1hcCIsIlwidXNlIHN0cmljdFwiO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuZXhwb3J0cy5FbXB0eUVycm9yID0gdm9pZCAwO1xudmFyIGNyZWF0ZUVycm9yQ2xhc3NfMSA9IHJlcXVpcmUoXCIuL2NyZWF0ZUVycm9yQ2xhc3NcIik7XG5leHBvcnRzLkVtcHR5RXJyb3IgPSBjcmVhdGVFcnJvckNsYXNzXzEuY3JlYXRlRXJyb3JDbGFzcyhmdW5jdGlvbiAoX3N1cGVyKSB7IHJldHVybiBmdW5jdGlvbiBFbXB0eUVycm9ySW1wbCgpIHtcbiAgICBfc3VwZXIodGhpcyk7XG4gICAgdGhpcy5uYW1lID0gJ0VtcHR5RXJyb3InO1xuICAgIHRoaXMubWVzc2FnZSA9ICdubyBlbGVtZW50cyBpbiBzZXF1ZW5jZSc7XG59OyB9KTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPUVtcHR5RXJyb3IuanMubWFwIiwiXCJ1c2Ugc3RyaWN0XCI7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5leHBvcnRzLlRlc3RUb29scyA9IGV4cG9ydHMuSW1tZWRpYXRlID0gdm9pZCAwO1xudmFyIG5leHRIYW5kbGUgPSAxO1xudmFyIHJlc29sdmVkO1xudmFyIGFjdGl2ZUhhbmRsZXMgPSB7fTtcbmZ1bmN0aW9uIGZpbmRBbmRDbGVhckhhbmRsZShoYW5kbGUpIHtcbiAgICBpZiAoaGFuZGxlIGluIGFjdGl2ZUhhbmRsZXMpIHtcbiAgICAgICAgZGVsZXRlIGFjdGl2ZUhhbmRsZXNbaGFuZGxlXTtcbiAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgfVxuICAgIHJldHVybiBmYWxzZTtcbn1cbmV4cG9ydHMuSW1tZWRpYXRlID0ge1xuICAgIHNldEltbWVkaWF0ZTogZnVuY3Rpb24gKGNiKSB7XG4gICAgICAgIHZhciBoYW5kbGUgPSBuZXh0SGFuZGxlKys7XG4gICAgICAgIGFjdGl2ZUhhbmRsZXNbaGFuZGxlXSA9IHRydWU7XG4gICAgICAgIGlmICghcmVzb2x2ZWQpIHtcbiAgICAgICAgICAgIHJlc29sdmVkID0gUHJvbWlzZS5yZXNvbHZlKCk7XG4gICAgICAgIH1cbiAgICAgICAgcmVzb2x2ZWQudGhlbihmdW5jdGlvbiAoKSB7IHJldHVybiBmaW5kQW5kQ2xlYXJIYW5kbGUoaGFuZGxlKSAmJiBjYigpOyB9KTtcbiAgICAgICAgcmV0dXJuIGhhbmRsZTtcbiAgICB9LFxuICAgIGNsZWFySW1tZWRpYXRlOiBmdW5jdGlvbiAoaGFuZGxlKSB7XG4gICAgICAgIGZpbmRBbmRDbGVhckhhbmRsZShoYW5kbGUpO1xuICAgIH0sXG59O1xuZXhwb3J0cy5UZXN0VG9vbHMgPSB7XG4gICAgcGVuZGluZzogZnVuY3Rpb24gKCkge1xuICAgICAgICByZXR1cm4gT2JqZWN0LmtleXMoYWN0aXZlSGFuZGxlcykubGVuZ3RoO1xuICAgIH1cbn07XG4vLyMgc291cmNlTWFwcGluZ1VSTD1JbW1lZGlhdGUuanMubWFwIiwiXCJ1c2Ugc3RyaWN0XCI7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5leHBvcnRzLk5vdEZvdW5kRXJyb3IgPSB2b2lkIDA7XG52YXIgY3JlYXRlRXJyb3JDbGFzc18xID0gcmVxdWlyZShcIi4vY3JlYXRlRXJyb3JDbGFzc1wiKTtcbmV4cG9ydHMuTm90Rm91bmRFcnJvciA9IGNyZWF0ZUVycm9yQ2xhc3NfMS5jcmVhdGVFcnJvckNsYXNzKGZ1bmN0aW9uIChfc3VwZXIpIHtcbiAgICByZXR1cm4gZnVuY3Rpb24gTm90Rm91bmRFcnJvckltcGwobWVzc2FnZSkge1xuICAgICAgICBfc3VwZXIodGhpcyk7XG4gICAgICAgIHRoaXMubmFtZSA9ICdOb3RGb3VuZEVycm9yJztcbiAgICAgICAgdGhpcy5tZXNzYWdlID0gbWVzc2FnZTtcbiAgICB9O1xufSk7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1Ob3RGb3VuZEVycm9yLmpzLm1hcCIsIlwidXNlIHN0cmljdFwiO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuZXhwb3J0cy5PYmplY3RVbnN1YnNjcmliZWRFcnJvciA9IHZvaWQgMDtcbnZhciBjcmVhdGVFcnJvckNsYXNzXzEgPSByZXF1aXJlKFwiLi9jcmVhdGVFcnJvckNsYXNzXCIpO1xuZXhwb3J0cy5PYmplY3RVbnN1YnNjcmliZWRFcnJvciA9IGNyZWF0ZUVycm9yQ2xhc3NfMS5jcmVhdGVFcnJvckNsYXNzKGZ1bmN0aW9uIChfc3VwZXIpIHtcbiAgICByZXR1cm4gZnVuY3Rpb24gT2JqZWN0VW5zdWJzY3JpYmVkRXJyb3JJbXBsKCkge1xuICAgICAgICBfc3VwZXIodGhpcyk7XG4gICAgICAgIHRoaXMubmFtZSA9ICdPYmplY3RVbnN1YnNjcmliZWRFcnJvcic7XG4gICAgICAgIHRoaXMubWVzc2FnZSA9ICdvYmplY3QgdW5zdWJzY3JpYmVkJztcbiAgICB9O1xufSk7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1PYmplY3RVbnN1YnNjcmliZWRFcnJvci5qcy5tYXAiLCJcInVzZSBzdHJpY3RcIjtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmV4cG9ydHMuU2VxdWVuY2VFcnJvciA9IHZvaWQgMDtcbnZhciBjcmVhdGVFcnJvckNsYXNzXzEgPSByZXF1aXJlKFwiLi9jcmVhdGVFcnJvckNsYXNzXCIpO1xuZXhwb3J0cy5TZXF1ZW5jZUVycm9yID0gY3JlYXRlRXJyb3JDbGFzc18xLmNyZWF0ZUVycm9yQ2xhc3MoZnVuY3Rpb24gKF9zdXBlcikge1xuICAgIHJldHVybiBmdW5jdGlvbiBTZXF1ZW5jZUVycm9ySW1wbChtZXNzYWdlKSB7XG4gICAgICAgIF9zdXBlcih0aGlzKTtcbiAgICAgICAgdGhpcy5uYW1lID0gJ1NlcXVlbmNlRXJyb3InO1xuICAgICAgICB0aGlzLm1lc3NhZ2UgPSBtZXNzYWdlO1xuICAgIH07XG59KTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPVNlcXVlbmNlRXJyb3IuanMubWFwIiwiXCJ1c2Ugc3RyaWN0XCI7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5leHBvcnRzLlVuc3Vic2NyaXB0aW9uRXJyb3IgPSB2b2lkIDA7XG52YXIgY3JlYXRlRXJyb3JDbGFzc18xID0gcmVxdWlyZShcIi4vY3JlYXRlRXJyb3JDbGFzc1wiKTtcbmV4cG9ydHMuVW5zdWJzY3JpcHRpb25FcnJvciA9IGNyZWF0ZUVycm9yQ2xhc3NfMS5jcmVhdGVFcnJvckNsYXNzKGZ1bmN0aW9uIChfc3VwZXIpIHtcbiAgICByZXR1cm4gZnVuY3Rpb24gVW5zdWJzY3JpcHRpb25FcnJvckltcGwoZXJyb3JzKSB7XG4gICAgICAgIF9zdXBlcih0aGlzKTtcbiAgICAgICAgdGhpcy5tZXNzYWdlID0gZXJyb3JzXG4gICAgICAgICAgICA/IGVycm9ycy5sZW5ndGggKyBcIiBlcnJvcnMgb2NjdXJyZWQgZHVyaW5nIHVuc3Vic2NyaXB0aW9uOlxcblwiICsgZXJyb3JzLm1hcChmdW5jdGlvbiAoZXJyLCBpKSB7IHJldHVybiBpICsgMSArIFwiKSBcIiArIGVyci50b1N0cmluZygpOyB9KS5qb2luKCdcXG4gICcpXG4gICAgICAgICAgICA6ICcnO1xuICAgICAgICB0aGlzLm5hbWUgPSAnVW5zdWJzY3JpcHRpb25FcnJvcic7XG4gICAgICAgIHRoaXMuZXJyb3JzID0gZXJyb3JzO1xuICAgIH07XG59KTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPVVuc3Vic2NyaXB0aW9uRXJyb3IuanMubWFwIiwiXCJ1c2Ugc3RyaWN0XCI7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5leHBvcnRzLnBvcE51bWJlciA9IGV4cG9ydHMucG9wU2NoZWR1bGVyID0gZXhwb3J0cy5wb3BSZXN1bHRTZWxlY3RvciA9IHZvaWQgMDtcbnZhciBpc0Z1bmN0aW9uXzEgPSByZXF1aXJlKFwiLi9pc0Z1bmN0aW9uXCIpO1xudmFyIGlzU2NoZWR1bGVyXzEgPSByZXF1aXJlKFwiLi9pc1NjaGVkdWxlclwiKTtcbmZ1bmN0aW9uIGxhc3QoYXJyKSB7XG4gICAgcmV0dXJuIGFyclthcnIubGVuZ3RoIC0gMV07XG59XG5mdW5jdGlvbiBwb3BSZXN1bHRTZWxlY3RvcihhcmdzKSB7XG4gICAgcmV0dXJuIGlzRnVuY3Rpb25fMS5pc0Z1bmN0aW9uKGxhc3QoYXJncykpID8gYXJncy5wb3AoKSA6IHVuZGVmaW5lZDtcbn1cbmV4cG9ydHMucG9wUmVzdWx0U2VsZWN0b3IgPSBwb3BSZXN1bHRTZWxlY3RvcjtcbmZ1bmN0aW9uIHBvcFNjaGVkdWxlcihhcmdzKSB7XG4gICAgcmV0dXJuIGlzU2NoZWR1bGVyXzEuaXNTY2hlZHVsZXIobGFzdChhcmdzKSkgPyBhcmdzLnBvcCgpIDogdW5kZWZpbmVkO1xufVxuZXhwb3J0cy5wb3BTY2hlZHVsZXIgPSBwb3BTY2hlZHVsZXI7XG5mdW5jdGlvbiBwb3BOdW1iZXIoYXJncywgZGVmYXVsdFZhbHVlKSB7XG4gICAgcmV0dXJuIHR5cGVvZiBsYXN0KGFyZ3MpID09PSAnbnVtYmVyJyA/IGFyZ3MucG9wKCkgOiBkZWZhdWx0VmFsdWU7XG59XG5leHBvcnRzLnBvcE51bWJlciA9IHBvcE51bWJlcjtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWFyZ3MuanMubWFwIiwiXCJ1c2Ugc3RyaWN0XCI7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5leHBvcnRzLmFyZ3NBcmdBcnJheU9yT2JqZWN0ID0gdm9pZCAwO1xudmFyIGlzQXJyYXkgPSBBcnJheS5pc0FycmF5O1xudmFyIGdldFByb3RvdHlwZU9mID0gT2JqZWN0LmdldFByb3RvdHlwZU9mLCBvYmplY3RQcm90byA9IE9iamVjdC5wcm90b3R5cGUsIGdldEtleXMgPSBPYmplY3Qua2V5cztcbmZ1bmN0aW9uIGFyZ3NBcmdBcnJheU9yT2JqZWN0KGFyZ3MpIHtcbiAgICBpZiAoYXJncy5sZW5ndGggPT09IDEpIHtcbiAgICAgICAgdmFyIGZpcnN0XzEgPSBhcmdzWzBdO1xuICAgICAgICBpZiAoaXNBcnJheShmaXJzdF8xKSkge1xuICAgICAgICAgICAgcmV0dXJuIHsgYXJnczogZmlyc3RfMSwga2V5czogbnVsbCB9O1xuICAgICAgICB9XG4gICAgICAgIGlmIChpc1BPSk8oZmlyc3RfMSkpIHtcbiAgICAgICAgICAgIHZhciBrZXlzID0gZ2V0S2V5cyhmaXJzdF8xKTtcbiAgICAgICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICAgICAgYXJnczoga2V5cy5tYXAoZnVuY3Rpb24gKGtleSkgeyByZXR1cm4gZmlyc3RfMVtrZXldOyB9KSxcbiAgICAgICAgICAgICAgICBrZXlzOiBrZXlzLFxuICAgICAgICAgICAgfTtcbiAgICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4geyBhcmdzOiBhcmdzLCBrZXlzOiBudWxsIH07XG59XG5leHBvcnRzLmFyZ3NBcmdBcnJheU9yT2JqZWN0ID0gYXJnc0FyZ0FycmF5T3JPYmplY3Q7XG5mdW5jdGlvbiBpc1BPSk8ob2JqKSB7XG4gICAgcmV0dXJuIG9iaiAmJiB0eXBlb2Ygb2JqID09PSAnb2JqZWN0JyAmJiBnZXRQcm90b3R5cGVPZihvYmopID09PSBvYmplY3RQcm90bztcbn1cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWFyZ3NBcmdBcnJheU9yT2JqZWN0LmpzLm1hcCIsIlwidXNlIHN0cmljdFwiO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuZXhwb3J0cy5hcmdzT3JBcmdBcnJheSA9IHZvaWQgMDtcbnZhciBpc0FycmF5ID0gQXJyYXkuaXNBcnJheTtcbmZ1bmN0aW9uIGFyZ3NPckFyZ0FycmF5KGFyZ3MpIHtcbiAgICByZXR1cm4gYXJncy5sZW5ndGggPT09IDEgJiYgaXNBcnJheShhcmdzWzBdKSA/IGFyZ3NbMF0gOiBhcmdzO1xufVxuZXhwb3J0cy5hcmdzT3JBcmdBcnJheSA9IGFyZ3NPckFyZ0FycmF5O1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9YXJnc09yQXJnQXJyYXkuanMubWFwIiwiXCJ1c2Ugc3RyaWN0XCI7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5leHBvcnRzLmFyclJlbW92ZSA9IHZvaWQgMDtcbmZ1bmN0aW9uIGFyclJlbW92ZShhcnIsIGl0ZW0pIHtcbiAgICBpZiAoYXJyKSB7XG4gICAgICAgIHZhciBpbmRleCA9IGFyci5pbmRleE9mKGl0ZW0pO1xuICAgICAgICAwIDw9IGluZGV4ICYmIGFyci5zcGxpY2UoaW5kZXgsIDEpO1xuICAgIH1cbn1cbmV4cG9ydHMuYXJyUmVtb3ZlID0gYXJyUmVtb3ZlO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9YXJyUmVtb3ZlLmpzLm1hcCIsIlwidXNlIHN0cmljdFwiO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuZXhwb3J0cy5jcmVhdGVFcnJvckNsYXNzID0gdm9pZCAwO1xuZnVuY3Rpb24gY3JlYXRlRXJyb3JDbGFzcyhjcmVhdGVJbXBsKSB7XG4gICAgdmFyIF9zdXBlciA9IGZ1bmN0aW9uIChpbnN0YW5jZSkge1xuICAgICAgICBFcnJvci5jYWxsKGluc3RhbmNlKTtcbiAgICAgICAgaW5zdGFuY2Uuc3RhY2sgPSBuZXcgRXJyb3IoKS5zdGFjaztcbiAgICB9O1xuICAgIHZhciBjdG9yRnVuYyA9IGNyZWF0ZUltcGwoX3N1cGVyKTtcbiAgICBjdG9yRnVuYy5wcm90b3R5cGUgPSBPYmplY3QuY3JlYXRlKEVycm9yLnByb3RvdHlwZSk7XG4gICAgY3RvckZ1bmMucHJvdG90eXBlLmNvbnN0cnVjdG9yID0gY3RvckZ1bmM7XG4gICAgcmV0dXJuIGN0b3JGdW5jO1xufVxuZXhwb3J0cy5jcmVhdGVFcnJvckNsYXNzID0gY3JlYXRlRXJyb3JDbGFzcztcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWNyZWF0ZUVycm9yQ2xhc3MuanMubWFwIiwiXCJ1c2Ugc3RyaWN0XCI7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5leHBvcnRzLmNyZWF0ZU9iamVjdCA9IHZvaWQgMDtcbmZ1bmN0aW9uIGNyZWF0ZU9iamVjdChrZXlzLCB2YWx1ZXMpIHtcbiAgICByZXR1cm4ga2V5cy5yZWR1Y2UoZnVuY3Rpb24gKHJlc3VsdCwga2V5LCBpKSB7IHJldHVybiAoKHJlc3VsdFtrZXldID0gdmFsdWVzW2ldKSwgcmVzdWx0KTsgfSwge30pO1xufVxuZXhwb3J0cy5jcmVhdGVPYmplY3QgPSBjcmVhdGVPYmplY3Q7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1jcmVhdGVPYmplY3QuanMubWFwIiwiXCJ1c2Ugc3RyaWN0XCI7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5leHBvcnRzLmNhcHR1cmVFcnJvciA9IGV4cG9ydHMuZXJyb3JDb250ZXh0ID0gdm9pZCAwO1xudmFyIGNvbmZpZ18xID0gcmVxdWlyZShcIi4uL2NvbmZpZ1wiKTtcbnZhciBjb250ZXh0ID0gbnVsbDtcbmZ1bmN0aW9uIGVycm9yQ29udGV4dChjYikge1xuICAgIGlmIChjb25maWdfMS5jb25maWcudXNlRGVwcmVjYXRlZFN5bmNocm9ub3VzRXJyb3JIYW5kbGluZykge1xuICAgICAgICB2YXIgaXNSb290ID0gIWNvbnRleHQ7XG4gICAgICAgIGlmIChpc1Jvb3QpIHtcbiAgICAgICAgICAgIGNvbnRleHQgPSB7IGVycm9yVGhyb3duOiBmYWxzZSwgZXJyb3I6IG51bGwgfTtcbiAgICAgICAgfVxuICAgICAgICBjYigpO1xuICAgICAgICBpZiAoaXNSb290KSB7XG4gICAgICAgICAgICB2YXIgX2EgPSBjb250ZXh0LCBlcnJvclRocm93biA9IF9hLmVycm9yVGhyb3duLCBlcnJvciA9IF9hLmVycm9yO1xuICAgICAgICAgICAgY29udGV4dCA9IG51bGw7XG4gICAgICAgICAgICBpZiAoZXJyb3JUaHJvd24pIHtcbiAgICAgICAgICAgICAgICB0aHJvdyBlcnJvcjtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH1cbiAgICBlbHNlIHtcbiAgICAgICAgY2IoKTtcbiAgICB9XG59XG5leHBvcnRzLmVycm9yQ29udGV4dCA9IGVycm9yQ29udGV4dDtcbmZ1bmN0aW9uIGNhcHR1cmVFcnJvcihlcnIpIHtcbiAgICBpZiAoY29uZmlnXzEuY29uZmlnLnVzZURlcHJlY2F0ZWRTeW5jaHJvbm91c0Vycm9ySGFuZGxpbmcgJiYgY29udGV4dCkge1xuICAgICAgICBjb250ZXh0LmVycm9yVGhyb3duID0gdHJ1ZTtcbiAgICAgICAgY29udGV4dC5lcnJvciA9IGVycjtcbiAgICB9XG59XG5leHBvcnRzLmNhcHR1cmVFcnJvciA9IGNhcHR1cmVFcnJvcjtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWVycm9yQ29udGV4dC5qcy5tYXAiLCJcInVzZSBzdHJpY3RcIjtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmV4cG9ydHMuZXhlY3V0ZVNjaGVkdWxlID0gdm9pZCAwO1xuZnVuY3Rpb24gZXhlY3V0ZVNjaGVkdWxlKHBhcmVudFN1YnNjcmlwdGlvbiwgc2NoZWR1bGVyLCB3b3JrLCBkZWxheSwgcmVwZWF0KSB7XG4gICAgaWYgKGRlbGF5ID09PSB2b2lkIDApIHsgZGVsYXkgPSAwOyB9XG4gICAgaWYgKHJlcGVhdCA9PT0gdm9pZCAwKSB7IHJlcGVhdCA9IGZhbHNlOyB9XG4gICAgdmFyIHNjaGVkdWxlU3Vic2NyaXB0aW9uID0gc2NoZWR1bGVyLnNjaGVkdWxlKGZ1bmN0aW9uICgpIHtcbiAgICAgICAgd29yaygpO1xuICAgICAgICBpZiAocmVwZWF0KSB7XG4gICAgICAgICAgICBwYXJlbnRTdWJzY3JpcHRpb24uYWRkKHRoaXMuc2NoZWR1bGUobnVsbCwgZGVsYXkpKTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIHRoaXMudW5zdWJzY3JpYmUoKTtcbiAgICAgICAgfVxuICAgIH0sIGRlbGF5KTtcbiAgICBwYXJlbnRTdWJzY3JpcHRpb24uYWRkKHNjaGVkdWxlU3Vic2NyaXB0aW9uKTtcbiAgICBpZiAoIXJlcGVhdCkge1xuICAgICAgICByZXR1cm4gc2NoZWR1bGVTdWJzY3JpcHRpb247XG4gICAgfVxufVxuZXhwb3J0cy5leGVjdXRlU2NoZWR1bGUgPSBleGVjdXRlU2NoZWR1bGU7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1leGVjdXRlU2NoZWR1bGUuanMubWFwIiwiXCJ1c2Ugc3RyaWN0XCI7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5leHBvcnRzLmlkZW50aXR5ID0gdm9pZCAwO1xuZnVuY3Rpb24gaWRlbnRpdHkoeCkge1xuICAgIHJldHVybiB4O1xufVxuZXhwb3J0cy5pZGVudGl0eSA9IGlkZW50aXR5O1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9aWRlbnRpdHkuanMubWFwIiwiXCJ1c2Ugc3RyaWN0XCI7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5leHBvcnRzLmlzQXJyYXlMaWtlID0gdm9pZCAwO1xuZXhwb3J0cy5pc0FycmF5TGlrZSA9IChmdW5jdGlvbiAoeCkgeyByZXR1cm4geCAmJiB0eXBlb2YgeC5sZW5ndGggPT09ICdudW1iZXInICYmIHR5cGVvZiB4ICE9PSAnZnVuY3Rpb24nOyB9KTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWlzQXJyYXlMaWtlLmpzLm1hcCIsIlwidXNlIHN0cmljdFwiO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuZXhwb3J0cy5pc0FzeW5jSXRlcmFibGUgPSB2b2lkIDA7XG52YXIgaXNGdW5jdGlvbl8xID0gcmVxdWlyZShcIi4vaXNGdW5jdGlvblwiKTtcbmZ1bmN0aW9uIGlzQXN5bmNJdGVyYWJsZShvYmopIHtcbiAgICByZXR1cm4gU3ltYm9sLmFzeW5jSXRlcmF0b3IgJiYgaXNGdW5jdGlvbl8xLmlzRnVuY3Rpb24ob2JqID09PSBudWxsIHx8IG9iaiA9PT0gdm9pZCAwID8gdm9pZCAwIDogb2JqW1N5bWJvbC5hc3luY0l0ZXJhdG9yXSk7XG59XG5leHBvcnRzLmlzQXN5bmNJdGVyYWJsZSA9IGlzQXN5bmNJdGVyYWJsZTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWlzQXN5bmNJdGVyYWJsZS5qcy5tYXAiLCJcInVzZSBzdHJpY3RcIjtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmV4cG9ydHMuaXNWYWxpZERhdGUgPSB2b2lkIDA7XG5mdW5jdGlvbiBpc1ZhbGlkRGF0ZSh2YWx1ZSkge1xuICAgIHJldHVybiB2YWx1ZSBpbnN0YW5jZW9mIERhdGUgJiYgIWlzTmFOKHZhbHVlKTtcbn1cbmV4cG9ydHMuaXNWYWxpZERhdGUgPSBpc1ZhbGlkRGF0ZTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWlzRGF0ZS5qcy5tYXAiLCJcInVzZSBzdHJpY3RcIjtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmV4cG9ydHMuaXNGdW5jdGlvbiA9IHZvaWQgMDtcbmZ1bmN0aW9uIGlzRnVuY3Rpb24odmFsdWUpIHtcbiAgICByZXR1cm4gdHlwZW9mIHZhbHVlID09PSAnZnVuY3Rpb24nO1xufVxuZXhwb3J0cy5pc0Z1bmN0aW9uID0gaXNGdW5jdGlvbjtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWlzRnVuY3Rpb24uanMubWFwIiwiXCJ1c2Ugc3RyaWN0XCI7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5leHBvcnRzLmlzSW50ZXJvcE9ic2VydmFibGUgPSB2b2lkIDA7XG52YXIgb2JzZXJ2YWJsZV8xID0gcmVxdWlyZShcIi4uL3N5bWJvbC9vYnNlcnZhYmxlXCIpO1xudmFyIGlzRnVuY3Rpb25fMSA9IHJlcXVpcmUoXCIuL2lzRnVuY3Rpb25cIik7XG5mdW5jdGlvbiBpc0ludGVyb3BPYnNlcnZhYmxlKGlucHV0KSB7XG4gICAgcmV0dXJuIGlzRnVuY3Rpb25fMS5pc0Z1bmN0aW9uKGlucHV0W29ic2VydmFibGVfMS5vYnNlcnZhYmxlXSk7XG59XG5leHBvcnRzLmlzSW50ZXJvcE9ic2VydmFibGUgPSBpc0ludGVyb3BPYnNlcnZhYmxlO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9aXNJbnRlcm9wT2JzZXJ2YWJsZS5qcy5tYXAiLCJcInVzZSBzdHJpY3RcIjtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmV4cG9ydHMuaXNJdGVyYWJsZSA9IHZvaWQgMDtcbnZhciBpdGVyYXRvcl8xID0gcmVxdWlyZShcIi4uL3N5bWJvbC9pdGVyYXRvclwiKTtcbnZhciBpc0Z1bmN0aW9uXzEgPSByZXF1aXJlKFwiLi9pc0Z1bmN0aW9uXCIpO1xuZnVuY3Rpb24gaXNJdGVyYWJsZShpbnB1dCkge1xuICAgIHJldHVybiBpc0Z1bmN0aW9uXzEuaXNGdW5jdGlvbihpbnB1dCA9PT0gbnVsbCB8fCBpbnB1dCA9PT0gdm9pZCAwID8gdm9pZCAwIDogaW5wdXRbaXRlcmF0b3JfMS5pdGVyYXRvcl0pO1xufVxuZXhwb3J0cy5pc0l0ZXJhYmxlID0gaXNJdGVyYWJsZTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWlzSXRlcmFibGUuanMubWFwIiwiXCJ1c2Ugc3RyaWN0XCI7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5leHBvcnRzLmlzT2JzZXJ2YWJsZSA9IHZvaWQgMDtcbnZhciBPYnNlcnZhYmxlXzEgPSByZXF1aXJlKFwiLi4vT2JzZXJ2YWJsZVwiKTtcbnZhciBpc0Z1bmN0aW9uXzEgPSByZXF1aXJlKFwiLi9pc0Z1bmN0aW9uXCIpO1xuZnVuY3Rpb24gaXNPYnNlcnZhYmxlKG9iaikge1xuICAgIHJldHVybiAhIW9iaiAmJiAob2JqIGluc3RhbmNlb2YgT2JzZXJ2YWJsZV8xLk9ic2VydmFibGUgfHwgKGlzRnVuY3Rpb25fMS5pc0Z1bmN0aW9uKG9iai5saWZ0KSAmJiBpc0Z1bmN0aW9uXzEuaXNGdW5jdGlvbihvYmouc3Vic2NyaWJlKSkpO1xufVxuZXhwb3J0cy5pc09ic2VydmFibGUgPSBpc09ic2VydmFibGU7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1pc09ic2VydmFibGUuanMubWFwIiwiXCJ1c2Ugc3RyaWN0XCI7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5leHBvcnRzLmlzUHJvbWlzZSA9IHZvaWQgMDtcbnZhciBpc0Z1bmN0aW9uXzEgPSByZXF1aXJlKFwiLi9pc0Z1bmN0aW9uXCIpO1xuZnVuY3Rpb24gaXNQcm9taXNlKHZhbHVlKSB7XG4gICAgcmV0dXJuIGlzRnVuY3Rpb25fMS5pc0Z1bmN0aW9uKHZhbHVlID09PSBudWxsIHx8IHZhbHVlID09PSB2b2lkIDAgPyB2b2lkIDAgOiB2YWx1ZS50aGVuKTtcbn1cbmV4cG9ydHMuaXNQcm9taXNlID0gaXNQcm9taXNlO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9aXNQcm9taXNlLmpzLm1hcCIsIlwidXNlIHN0cmljdFwiO1xudmFyIF9fZ2VuZXJhdG9yID0gKHRoaXMgJiYgdGhpcy5fX2dlbmVyYXRvcikgfHwgZnVuY3Rpb24gKHRoaXNBcmcsIGJvZHkpIHtcbiAgICB2YXIgXyA9IHsgbGFiZWw6IDAsIHNlbnQ6IGZ1bmN0aW9uKCkgeyBpZiAodFswXSAmIDEpIHRocm93IHRbMV07IHJldHVybiB0WzFdOyB9LCB0cnlzOiBbXSwgb3BzOiBbXSB9LCBmLCB5LCB0LCBnO1xuICAgIHJldHVybiBnID0geyBuZXh0OiB2ZXJiKDApLCBcInRocm93XCI6IHZlcmIoMSksIFwicmV0dXJuXCI6IHZlcmIoMikgfSwgdHlwZW9mIFN5bWJvbCA9PT0gXCJmdW5jdGlvblwiICYmIChnW1N5bWJvbC5pdGVyYXRvcl0gPSBmdW5jdGlvbigpIHsgcmV0dXJuIHRoaXM7IH0pLCBnO1xuICAgIGZ1bmN0aW9uIHZlcmIobikgeyByZXR1cm4gZnVuY3Rpb24gKHYpIHsgcmV0dXJuIHN0ZXAoW24sIHZdKTsgfTsgfVxuICAgIGZ1bmN0aW9uIHN0ZXAob3ApIHtcbiAgICAgICAgaWYgKGYpIHRocm93IG5ldyBUeXBlRXJyb3IoXCJHZW5lcmF0b3IgaXMgYWxyZWFkeSBleGVjdXRpbmcuXCIpO1xuICAgICAgICB3aGlsZSAoXykgdHJ5IHtcbiAgICAgICAgICAgIGlmIChmID0gMSwgeSAmJiAodCA9IG9wWzBdICYgMiA/IHlbXCJyZXR1cm5cIl0gOiBvcFswXSA/IHlbXCJ0aHJvd1wiXSB8fCAoKHQgPSB5W1wicmV0dXJuXCJdKSAmJiB0LmNhbGwoeSksIDApIDogeS5uZXh0KSAmJiAhKHQgPSB0LmNhbGwoeSwgb3BbMV0pKS5kb25lKSByZXR1cm4gdDtcbiAgICAgICAgICAgIGlmICh5ID0gMCwgdCkgb3AgPSBbb3BbMF0gJiAyLCB0LnZhbHVlXTtcbiAgICAgICAgICAgIHN3aXRjaCAob3BbMF0pIHtcbiAgICAgICAgICAgICAgICBjYXNlIDA6IGNhc2UgMTogdCA9IG9wOyBicmVhaztcbiAgICAgICAgICAgICAgICBjYXNlIDQ6IF8ubGFiZWwrKzsgcmV0dXJuIHsgdmFsdWU6IG9wWzFdLCBkb25lOiBmYWxzZSB9O1xuICAgICAgICAgICAgICAgIGNhc2UgNTogXy5sYWJlbCsrOyB5ID0gb3BbMV07IG9wID0gWzBdOyBjb250aW51ZTtcbiAgICAgICAgICAgICAgICBjYXNlIDc6IG9wID0gXy5vcHMucG9wKCk7IF8udHJ5cy5wb3AoKTsgY29udGludWU7XG4gICAgICAgICAgICAgICAgZGVmYXVsdDpcbiAgICAgICAgICAgICAgICAgICAgaWYgKCEodCA9IF8udHJ5cywgdCA9IHQubGVuZ3RoID4gMCAmJiB0W3QubGVuZ3RoIC0gMV0pICYmIChvcFswXSA9PT0gNiB8fCBvcFswXSA9PT0gMikpIHsgXyA9IDA7IGNvbnRpbnVlOyB9XG4gICAgICAgICAgICAgICAgICAgIGlmIChvcFswXSA9PT0gMyAmJiAoIXQgfHwgKG9wWzFdID4gdFswXSAmJiBvcFsxXSA8IHRbM10pKSkgeyBfLmxhYmVsID0gb3BbMV07IGJyZWFrOyB9XG4gICAgICAgICAgICAgICAgICAgIGlmIChvcFswXSA9PT0gNiAmJiBfLmxhYmVsIDwgdFsxXSkgeyBfLmxhYmVsID0gdFsxXTsgdCA9IG9wOyBicmVhazsgfVxuICAgICAgICAgICAgICAgICAgICBpZiAodCAmJiBfLmxhYmVsIDwgdFsyXSkgeyBfLmxhYmVsID0gdFsyXTsgXy5vcHMucHVzaChvcCk7IGJyZWFrOyB9XG4gICAgICAgICAgICAgICAgICAgIGlmICh0WzJdKSBfLm9wcy5wb3AoKTtcbiAgICAgICAgICAgICAgICAgICAgXy50cnlzLnBvcCgpOyBjb250aW51ZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIG9wID0gYm9keS5jYWxsKHRoaXNBcmcsIF8pO1xuICAgICAgICB9IGNhdGNoIChlKSB7IG9wID0gWzYsIGVdOyB5ID0gMDsgfSBmaW5hbGx5IHsgZiA9IHQgPSAwOyB9XG4gICAgICAgIGlmIChvcFswXSAmIDUpIHRocm93IG9wWzFdOyByZXR1cm4geyB2YWx1ZTogb3BbMF0gPyBvcFsxXSA6IHZvaWQgMCwgZG9uZTogdHJ1ZSB9O1xuICAgIH1cbn07XG52YXIgX19hd2FpdCA9ICh0aGlzICYmIHRoaXMuX19hd2FpdCkgfHwgZnVuY3Rpb24gKHYpIHsgcmV0dXJuIHRoaXMgaW5zdGFuY2VvZiBfX2F3YWl0ID8gKHRoaXMudiA9IHYsIHRoaXMpIDogbmV3IF9fYXdhaXQodik7IH1cbnZhciBfX2FzeW5jR2VuZXJhdG9yID0gKHRoaXMgJiYgdGhpcy5fX2FzeW5jR2VuZXJhdG9yKSB8fCBmdW5jdGlvbiAodGhpc0FyZywgX2FyZ3VtZW50cywgZ2VuZXJhdG9yKSB7XG4gICAgaWYgKCFTeW1ib2wuYXN5bmNJdGVyYXRvcikgdGhyb3cgbmV3IFR5cGVFcnJvcihcIlN5bWJvbC5hc3luY0l0ZXJhdG9yIGlzIG5vdCBkZWZpbmVkLlwiKTtcbiAgICB2YXIgZyA9IGdlbmVyYXRvci5hcHBseSh0aGlzQXJnLCBfYXJndW1lbnRzIHx8IFtdKSwgaSwgcSA9IFtdO1xuICAgIHJldHVybiBpID0ge30sIHZlcmIoXCJuZXh0XCIpLCB2ZXJiKFwidGhyb3dcIiksIHZlcmIoXCJyZXR1cm5cIiksIGlbU3ltYm9sLmFzeW5jSXRlcmF0b3JdID0gZnVuY3Rpb24gKCkgeyByZXR1cm4gdGhpczsgfSwgaTtcbiAgICBmdW5jdGlvbiB2ZXJiKG4pIHsgaWYgKGdbbl0pIGlbbl0gPSBmdW5jdGlvbiAodikgeyByZXR1cm4gbmV3IFByb21pc2UoZnVuY3Rpb24gKGEsIGIpIHsgcS5wdXNoKFtuLCB2LCBhLCBiXSkgPiAxIHx8IHJlc3VtZShuLCB2KTsgfSk7IH07IH1cbiAgICBmdW5jdGlvbiByZXN1bWUobiwgdikgeyB0cnkgeyBzdGVwKGdbbl0odikpOyB9IGNhdGNoIChlKSB7IHNldHRsZShxWzBdWzNdLCBlKTsgfSB9XG4gICAgZnVuY3Rpb24gc3RlcChyKSB7IHIudmFsdWUgaW5zdGFuY2VvZiBfX2F3YWl0ID8gUHJvbWlzZS5yZXNvbHZlKHIudmFsdWUudikudGhlbihmdWxmaWxsLCByZWplY3QpIDogc2V0dGxlKHFbMF1bMl0sIHIpOyB9XG4gICAgZnVuY3Rpb24gZnVsZmlsbCh2YWx1ZSkgeyByZXN1bWUoXCJuZXh0XCIsIHZhbHVlKTsgfVxuICAgIGZ1bmN0aW9uIHJlamVjdCh2YWx1ZSkgeyByZXN1bWUoXCJ0aHJvd1wiLCB2YWx1ZSk7IH1cbiAgICBmdW5jdGlvbiBzZXR0bGUoZiwgdikgeyBpZiAoZih2KSwgcS5zaGlmdCgpLCBxLmxlbmd0aCkgcmVzdW1lKHFbMF1bMF0sIHFbMF1bMV0pOyB9XG59O1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuZXhwb3J0cy5pc1JlYWRhYmxlU3RyZWFtTGlrZSA9IGV4cG9ydHMucmVhZGFibGVTdHJlYW1MaWtlVG9Bc3luY0dlbmVyYXRvciA9IHZvaWQgMDtcbnZhciBpc0Z1bmN0aW9uXzEgPSByZXF1aXJlKFwiLi9pc0Z1bmN0aW9uXCIpO1xuZnVuY3Rpb24gcmVhZGFibGVTdHJlYW1MaWtlVG9Bc3luY0dlbmVyYXRvcihyZWFkYWJsZVN0cmVhbSkge1xuICAgIHJldHVybiBfX2FzeW5jR2VuZXJhdG9yKHRoaXMsIGFyZ3VtZW50cywgZnVuY3Rpb24gcmVhZGFibGVTdHJlYW1MaWtlVG9Bc3luY0dlbmVyYXRvcl8xKCkge1xuICAgICAgICB2YXIgcmVhZGVyLCBfYSwgdmFsdWUsIGRvbmU7XG4gICAgICAgIHJldHVybiBfX2dlbmVyYXRvcih0aGlzLCBmdW5jdGlvbiAoX2IpIHtcbiAgICAgICAgICAgIHN3aXRjaCAoX2IubGFiZWwpIHtcbiAgICAgICAgICAgICAgICBjYXNlIDA6XG4gICAgICAgICAgICAgICAgICAgIHJlYWRlciA9IHJlYWRhYmxlU3RyZWFtLmdldFJlYWRlcigpO1xuICAgICAgICAgICAgICAgICAgICBfYi5sYWJlbCA9IDE7XG4gICAgICAgICAgICAgICAgY2FzZSAxOlxuICAgICAgICAgICAgICAgICAgICBfYi50cnlzLnB1c2goWzEsICwgOSwgMTBdKTtcbiAgICAgICAgICAgICAgICAgICAgX2IubGFiZWwgPSAyO1xuICAgICAgICAgICAgICAgIGNhc2UgMjpcbiAgICAgICAgICAgICAgICAgICAgaWYgKCF0cnVlKSByZXR1cm4gWzMsIDhdO1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gWzQsIF9fYXdhaXQocmVhZGVyLnJlYWQoKSldO1xuICAgICAgICAgICAgICAgIGNhc2UgMzpcbiAgICAgICAgICAgICAgICAgICAgX2EgPSBfYi5zZW50KCksIHZhbHVlID0gX2EudmFsdWUsIGRvbmUgPSBfYS5kb25lO1xuICAgICAgICAgICAgICAgICAgICBpZiAoIWRvbmUpIHJldHVybiBbMywgNV07XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBbNCwgX19hd2FpdCh2b2lkIDApXTtcbiAgICAgICAgICAgICAgICBjYXNlIDQ6IHJldHVybiBbMiwgX2Iuc2VudCgpXTtcbiAgICAgICAgICAgICAgICBjYXNlIDU6IHJldHVybiBbNCwgX19hd2FpdCh2YWx1ZSldO1xuICAgICAgICAgICAgICAgIGNhc2UgNjogcmV0dXJuIFs0LCBfYi5zZW50KCldO1xuICAgICAgICAgICAgICAgIGNhc2UgNzpcbiAgICAgICAgICAgICAgICAgICAgX2Iuc2VudCgpO1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gWzMsIDJdO1xuICAgICAgICAgICAgICAgIGNhc2UgODogcmV0dXJuIFszLCAxMF07XG4gICAgICAgICAgICAgICAgY2FzZSA5OlxuICAgICAgICAgICAgICAgICAgICByZWFkZXIucmVsZWFzZUxvY2soKTtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIFs3XTtcbiAgICAgICAgICAgICAgICBjYXNlIDEwOiByZXR1cm4gWzJdO1xuICAgICAgICAgICAgfVxuICAgICAgICB9KTtcbiAgICB9KTtcbn1cbmV4cG9ydHMucmVhZGFibGVTdHJlYW1MaWtlVG9Bc3luY0dlbmVyYXRvciA9IHJlYWRhYmxlU3RyZWFtTGlrZVRvQXN5bmNHZW5lcmF0b3I7XG5mdW5jdGlvbiBpc1JlYWRhYmxlU3RyZWFtTGlrZShvYmopIHtcbiAgICByZXR1cm4gaXNGdW5jdGlvbl8xLmlzRnVuY3Rpb24ob2JqID09PSBudWxsIHx8IG9iaiA9PT0gdm9pZCAwID8gdm9pZCAwIDogb2JqLmdldFJlYWRlcik7XG59XG5leHBvcnRzLmlzUmVhZGFibGVTdHJlYW1MaWtlID0gaXNSZWFkYWJsZVN0cmVhbUxpa2U7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1pc1JlYWRhYmxlU3RyZWFtTGlrZS5qcy5tYXAiLCJcInVzZSBzdHJpY3RcIjtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmV4cG9ydHMuaXNTY2hlZHVsZXIgPSB2b2lkIDA7XG52YXIgaXNGdW5jdGlvbl8xID0gcmVxdWlyZShcIi4vaXNGdW5jdGlvblwiKTtcbmZ1bmN0aW9uIGlzU2NoZWR1bGVyKHZhbHVlKSB7XG4gICAgcmV0dXJuIHZhbHVlICYmIGlzRnVuY3Rpb25fMS5pc0Z1bmN0aW9uKHZhbHVlLnNjaGVkdWxlKTtcbn1cbmV4cG9ydHMuaXNTY2hlZHVsZXIgPSBpc1NjaGVkdWxlcjtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWlzU2NoZWR1bGVyLmpzLm1hcCIsIlwidXNlIHN0cmljdFwiO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuZXhwb3J0cy5vcGVyYXRlID0gZXhwb3J0cy5oYXNMaWZ0ID0gdm9pZCAwO1xudmFyIGlzRnVuY3Rpb25fMSA9IHJlcXVpcmUoXCIuL2lzRnVuY3Rpb25cIik7XG5mdW5jdGlvbiBoYXNMaWZ0KHNvdXJjZSkge1xuICAgIHJldHVybiBpc0Z1bmN0aW9uXzEuaXNGdW5jdGlvbihzb3VyY2UgPT09IG51bGwgfHwgc291cmNlID09PSB2b2lkIDAgPyB2b2lkIDAgOiBzb3VyY2UubGlmdCk7XG59XG5leHBvcnRzLmhhc0xpZnQgPSBoYXNMaWZ0O1xuZnVuY3Rpb24gb3BlcmF0ZShpbml0KSB7XG4gICAgcmV0dXJuIGZ1bmN0aW9uIChzb3VyY2UpIHtcbiAgICAgICAgaWYgKGhhc0xpZnQoc291cmNlKSkge1xuICAgICAgICAgICAgcmV0dXJuIHNvdXJjZS5saWZ0KGZ1bmN0aW9uIChsaWZ0ZWRTb3VyY2UpIHtcbiAgICAgICAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gaW5pdChsaWZ0ZWRTb3VyY2UsIHRoaXMpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBjYXRjaCAoZXJyKSB7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuZXJyb3IoZXJyKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfVxuICAgICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCdVbmFibGUgdG8gbGlmdCB1bmtub3duIE9ic2VydmFibGUgdHlwZScpO1xuICAgIH07XG59XG5leHBvcnRzLm9wZXJhdGUgPSBvcGVyYXRlO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9bGlmdC5qcy5tYXAiLCJcInVzZSBzdHJpY3RcIjtcbnZhciBfX3JlYWQgPSAodGhpcyAmJiB0aGlzLl9fcmVhZCkgfHwgZnVuY3Rpb24gKG8sIG4pIHtcbiAgICB2YXIgbSA9IHR5cGVvZiBTeW1ib2wgPT09IFwiZnVuY3Rpb25cIiAmJiBvW1N5bWJvbC5pdGVyYXRvcl07XG4gICAgaWYgKCFtKSByZXR1cm4gbztcbiAgICB2YXIgaSA9IG0uY2FsbChvKSwgciwgYXIgPSBbXSwgZTtcbiAgICB0cnkge1xuICAgICAgICB3aGlsZSAoKG4gPT09IHZvaWQgMCB8fCBuLS0gPiAwKSAmJiAhKHIgPSBpLm5leHQoKSkuZG9uZSkgYXIucHVzaChyLnZhbHVlKTtcbiAgICB9XG4gICAgY2F0Y2ggKGVycm9yKSB7IGUgPSB7IGVycm9yOiBlcnJvciB9OyB9XG4gICAgZmluYWxseSB7XG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgICBpZiAociAmJiAhci5kb25lICYmIChtID0gaVtcInJldHVyblwiXSkpIG0uY2FsbChpKTtcbiAgICAgICAgfVxuICAgICAgICBmaW5hbGx5IHsgaWYgKGUpIHRocm93IGUuZXJyb3I7IH1cbiAgICB9XG4gICAgcmV0dXJuIGFyO1xufTtcbnZhciBfX3NwcmVhZEFycmF5ID0gKHRoaXMgJiYgdGhpcy5fX3NwcmVhZEFycmF5KSB8fCBmdW5jdGlvbiAodG8sIGZyb20pIHtcbiAgICBmb3IgKHZhciBpID0gMCwgaWwgPSBmcm9tLmxlbmd0aCwgaiA9IHRvLmxlbmd0aDsgaSA8IGlsOyBpKyssIGorKylcbiAgICAgICAgdG9bal0gPSBmcm9tW2ldO1xuICAgIHJldHVybiB0bztcbn07XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5leHBvcnRzLm1hcE9uZU9yTWFueUFyZ3MgPSB2b2lkIDA7XG52YXIgbWFwXzEgPSByZXF1aXJlKFwiLi4vb3BlcmF0b3JzL21hcFwiKTtcbnZhciBpc0FycmF5ID0gQXJyYXkuaXNBcnJheTtcbmZ1bmN0aW9uIGNhbGxPckFwcGx5KGZuLCBhcmdzKSB7XG4gICAgcmV0dXJuIGlzQXJyYXkoYXJncykgPyBmbi5hcHBseSh2b2lkIDAsIF9fc3ByZWFkQXJyYXkoW10sIF9fcmVhZChhcmdzKSkpIDogZm4oYXJncyk7XG59XG5mdW5jdGlvbiBtYXBPbmVPck1hbnlBcmdzKGZuKSB7XG4gICAgcmV0dXJuIG1hcF8xLm1hcChmdW5jdGlvbiAoYXJncykgeyByZXR1cm4gY2FsbE9yQXBwbHkoZm4sIGFyZ3MpOyB9KTtcbn1cbmV4cG9ydHMubWFwT25lT3JNYW55QXJncyA9IG1hcE9uZU9yTWFueUFyZ3M7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1tYXBPbmVPck1hbnlBcmdzLmpzLm1hcCIsIlwidXNlIHN0cmljdFwiO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuZXhwb3J0cy5ub29wID0gdm9pZCAwO1xuZnVuY3Rpb24gbm9vcCgpIHsgfVxuZXhwb3J0cy5ub29wID0gbm9vcDtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPW5vb3AuanMubWFwIiwiXCJ1c2Ugc3RyaWN0XCI7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5leHBvcnRzLm5vdCA9IHZvaWQgMDtcbmZ1bmN0aW9uIG5vdChwcmVkLCB0aGlzQXJnKSB7XG4gICAgcmV0dXJuIGZ1bmN0aW9uICh2YWx1ZSwgaW5kZXgpIHsgcmV0dXJuICFwcmVkLmNhbGwodGhpc0FyZywgdmFsdWUsIGluZGV4KTsgfTtcbn1cbmV4cG9ydHMubm90ID0gbm90O1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9bm90LmpzLm1hcCIsIlwidXNlIHN0cmljdFwiO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuZXhwb3J0cy5waXBlRnJvbUFycmF5ID0gZXhwb3J0cy5waXBlID0gdm9pZCAwO1xudmFyIGlkZW50aXR5XzEgPSByZXF1aXJlKFwiLi9pZGVudGl0eVwiKTtcbmZ1bmN0aW9uIHBpcGUoKSB7XG4gICAgdmFyIGZucyA9IFtdO1xuICAgIGZvciAodmFyIF9pID0gMDsgX2kgPCBhcmd1bWVudHMubGVuZ3RoOyBfaSsrKSB7XG4gICAgICAgIGZuc1tfaV0gPSBhcmd1bWVudHNbX2ldO1xuICAgIH1cbiAgICByZXR1cm4gcGlwZUZyb21BcnJheShmbnMpO1xufVxuZXhwb3J0cy5waXBlID0gcGlwZTtcbmZ1bmN0aW9uIHBpcGVGcm9tQXJyYXkoZm5zKSB7XG4gICAgaWYgKGZucy5sZW5ndGggPT09IDApIHtcbiAgICAgICAgcmV0dXJuIGlkZW50aXR5XzEuaWRlbnRpdHk7XG4gICAgfVxuICAgIGlmIChmbnMubGVuZ3RoID09PSAxKSB7XG4gICAgICAgIHJldHVybiBmbnNbMF07XG4gICAgfVxuICAgIHJldHVybiBmdW5jdGlvbiBwaXBlZChpbnB1dCkge1xuICAgICAgICByZXR1cm4gZm5zLnJlZHVjZShmdW5jdGlvbiAocHJldiwgZm4pIHsgcmV0dXJuIGZuKHByZXYpOyB9LCBpbnB1dCk7XG4gICAgfTtcbn1cbmV4cG9ydHMucGlwZUZyb21BcnJheSA9IHBpcGVGcm9tQXJyYXk7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1waXBlLmpzLm1hcCIsIlwidXNlIHN0cmljdFwiO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuZXhwb3J0cy5yZXBvcnRVbmhhbmRsZWRFcnJvciA9IHZvaWQgMDtcbnZhciBjb25maWdfMSA9IHJlcXVpcmUoXCIuLi9jb25maWdcIik7XG52YXIgdGltZW91dFByb3ZpZGVyXzEgPSByZXF1aXJlKFwiLi4vc2NoZWR1bGVyL3RpbWVvdXRQcm92aWRlclwiKTtcbmZ1bmN0aW9uIHJlcG9ydFVuaGFuZGxlZEVycm9yKGVycikge1xuICAgIHRpbWVvdXRQcm92aWRlcl8xLnRpbWVvdXRQcm92aWRlci5zZXRUaW1lb3V0KGZ1bmN0aW9uICgpIHtcbiAgICAgICAgdmFyIG9uVW5oYW5kbGVkRXJyb3IgPSBjb25maWdfMS5jb25maWcub25VbmhhbmRsZWRFcnJvcjtcbiAgICAgICAgaWYgKG9uVW5oYW5kbGVkRXJyb3IpIHtcbiAgICAgICAgICAgIG9uVW5oYW5kbGVkRXJyb3IoZXJyKTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIHRocm93IGVycjtcbiAgICAgICAgfVxuICAgIH0pO1xufVxuZXhwb3J0cy5yZXBvcnRVbmhhbmRsZWRFcnJvciA9IHJlcG9ydFVuaGFuZGxlZEVycm9yO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9cmVwb3J0VW5oYW5kbGVkRXJyb3IuanMubWFwIiwiXCJ1c2Ugc3RyaWN0XCI7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5leHBvcnRzLmNyZWF0ZUludmFsaWRPYnNlcnZhYmxlVHlwZUVycm9yID0gdm9pZCAwO1xuZnVuY3Rpb24gY3JlYXRlSW52YWxpZE9ic2VydmFibGVUeXBlRXJyb3IoaW5wdXQpIHtcbiAgICByZXR1cm4gbmV3IFR5cGVFcnJvcihcIllvdSBwcm92aWRlZCBcIiArIChpbnB1dCAhPT0gbnVsbCAmJiB0eXBlb2YgaW5wdXQgPT09ICdvYmplY3QnID8gJ2FuIGludmFsaWQgb2JqZWN0JyA6IFwiJ1wiICsgaW5wdXQgKyBcIidcIikgKyBcIiB3aGVyZSBhIHN0cmVhbSB3YXMgZXhwZWN0ZWQuIFlvdSBjYW4gcHJvdmlkZSBhbiBPYnNlcnZhYmxlLCBQcm9taXNlLCBSZWFkYWJsZVN0cmVhbSwgQXJyYXksIEFzeW5jSXRlcmFibGUsIG9yIEl0ZXJhYmxlLlwiKTtcbn1cbmV4cG9ydHMuY3JlYXRlSW52YWxpZE9ic2VydmFibGVUeXBlRXJyb3IgPSBjcmVhdGVJbnZhbGlkT2JzZXJ2YWJsZVR5cGVFcnJvcjtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPXRocm93VW5vYnNlcnZhYmxlRXJyb3IuanMubWFwIiwiaW1wb3J0IHsgQkFDS0dST1VORF9BU1BFQ1RfUkFUSU8gfSBmcm9tIFwiLi4vY29uZmlnXCI7XHJcbmltcG9ydCB7IElHYW1lU3RhdGUgfSBmcm9tIFwiLi4vaW50ZXJmYWNlcy9JR2FtZVN0YXRlXCI7XHJcbmltcG9ydCB7IElLZXlzRG93biB9IGZyb20gXCIuLi9pbnRlcmZhY2VzL0lLZXlzRG93blwiO1xyXG5pbXBvcnQgeyBJUmVjdGFuZ2xlIH0gZnJvbSBcIi4uL2ludGVyZmFjZXMvSVJlY3RhbmdsZVwiO1xyXG5pbXBvcnQgeyBkcmF3SW1hZ2UgfSBmcm9tIFwiLi4vc2VydmljZXMvcmVuZGVyU2VydmljZXNcIjtcclxuaW1wb3J0IHsgQ29tcG9uZW50IH0gZnJvbSBcIi4vY29tcG9uZW50XCI7XHJcblxyXG5leHBvcnQgY2xhc3MgQmFja2dyb3VuZCBleHRlbmRzIENvbXBvbmVudCB7XHJcbiAgICBwcml2YXRlIF9pbWFnZTogSFRNTEltYWdlRWxlbWVudDtcclxuXHJcbiAgICBwcml2YXRlIF9yZWN0OiBJUmVjdGFuZ2xlW107XHJcblxyXG4gICAgY29uc3RydWN0b3IoXHJcbiAgICAgICAgY3R4OiBDYW52YXNSZW5kZXJpbmdDb250ZXh0MkQsXHJcbiAgICAgICAgZ2FtZVN0YXRlOiBJR2FtZVN0YXRlLFxyXG4gICAgICAgIGltYWdlOiBIVE1MSW1hZ2VFbGVtZW50XHJcbiAgICApIHtcclxuICAgICAgICBzdXBlcihjdHgsIGdhbWVTdGF0ZSk7XHJcbiAgICAgICAgdGhpcy5faW1hZ2UgPSBpbWFnZTtcclxuICAgIH1cclxuXHJcbiAgICBvbkNyZWF0ZSgpOiB2b2lkIHtcclxuICAgIH1cclxuXHJcbiAgICBvblJlc2l6ZShuZXdXaWR0aDogbnVtYmVyLCBuZXdIZWlnaHQ6IG51bWJlcik6IHZvaWQge1xyXG4gICAgICAgIGNvbnN0IGJnZFdpZHRoID0gbmV3SGVpZ2h0ICogQkFDS0dST1VORF9BU1BFQ1RfUkFUSU87XHJcbiAgICAgICAgY29uc3QgYmdIZWlnaHQgPSBuZXdIZWlnaHQ7XHJcblxyXG4gICAgICAgIHRoaXMuX3JlY3QgPSBbXHJcbiAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgIHg6IChuZXdXaWR0aCAtIGJnZFdpZHRoKSAvIDIsXHJcbiAgICAgICAgICAgICAgICB5OiAwLFxyXG4gICAgICAgICAgICAgICAgd2lkdGg6IGJnZFdpZHRoLFxyXG4gICAgICAgICAgICAgICAgaGVpZ2h0OiBiZ0hlaWdodFxyXG4gICAgICAgICAgICB9LFxyXG5cclxuICAgICAgICBdO1xyXG4gICAgfVxyXG5cclxuICAgIHVwZGF0ZShkZWx0YTogbnVtYmVyLCBrZXlzRG93bjogSUtleXNEb3duKTogdm9pZCB7XHJcblxyXG4gICAgfVxyXG5cclxuICAgIHJlbmRlcigpOiB2b2lkIHtcclxuICAgICAgICB0aGlzLl9yZWN0LmZvckVhY2goKHJlY3QpID0+IHtcclxuICAgICAgICAgICAgaWYgKHJlY3QueCA8PSB0aGlzLmN0eC5jYW52YXMud2lkdGgpIHtcclxuICAgICAgICAgICAgICAgIGRyYXdJbWFnZSh0aGlzLmN0eCwgdGhpcy5faW1hZ2UsIHJlY3QpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfSk7XHJcbiAgICB9XHJcbn0iLCJpbXBvcnQgeyBJR2FtZVN0YXRlIH0gZnJvbSBcIi4uL2ludGVyZmFjZXMvSUdhbWVTdGF0ZVwiO1xyXG5pbXBvcnQgeyBJS2V5c0Rvd24gfSBmcm9tIFwiLi4vaW50ZXJmYWNlcy9JS2V5c0Rvd25cIjtcclxuXHJcbmFic3RyYWN0IGNsYXNzIENvbXBvbmVudDxQcm9wcyA9IG9iamVjdD57XHJcbiAgICBwcm90ZWN0ZWQgcmVhZG9ubHkgY3R4IDpDYW52YXNSZW5kZXJpbmdDb250ZXh0MkQ7XHJcbiAgICBwcm90ZWN0ZWQgcmVhZG9ubHkgZ2FtZVN0YXRlOiBJR2FtZVN0YXRlO1xyXG4gICAgcHJvdGVjdGVkIHJlYWRvbmx5IHByb3BzPzogUHJvcHM7XHJcblxyXG4gICAgY29uc3RydWN0b3IoXHJcbiAgICAgICAgY3R4OiBDYW52YXNSZW5kZXJpbmdDb250ZXh0MkQsXHJcbiAgICAgICAgZ2FtZVN0YXRlOiBJR2FtZVN0YXRlLFxyXG4gICAgICAgIHByb3BzPzogUHJvcHMsXHJcbiAgICApIHtcclxuICAgICAgICB0aGlzLmN0eD1jdHg7XHJcbiAgICAgICAgdGhpcy5nYW1lU3RhdGU9Z2FtZVN0YXRlO1xyXG4gICAgICAgIHRoaXMucHJvcHM9cHJvcHM7XHJcblxyXG4gICAgICAgIHRoaXMub25DcmVhdGUoKTtcclxuICAgICAgICB0aGlzLm9uUmVzaXplKGN0eC5jYW52YXMud2lkdGgsY3R4LmNhbnZhcy5oZWlnaHQpO1xyXG4gICAgfVxyXG5cclxuICAgIGFic3RyYWN0IG9uQ3JlYXRlKCk6dm9pZDtcclxuICAgIGFic3RyYWN0IG9uUmVzaXplKG5ld1dpZHRoOm51bWJlcixuZXdIZWlnaHQ6bnVtYmVyKTp2b2lkO1xyXG4gICAgYWJzdHJhY3QgdXBkYXRlKGRlbHRhOm51bWJlcixrZXlzRG93bjpJS2V5c0Rvd24pOnZvaWQ7XHJcbiAgICBhYnN0cmFjdCByZW5kZXIoKTp2b2lkO1xyXG59XHJcblxyXG5leHBvcnQge0NvbXBvbmVudH0iLCJpbXBvcnQgeyBPYnNlcnZhYmxlLCBjYXRjaEVycm9yLCBmcm9tLCBvZiwgdGFwIH0gZnJvbSBcInJ4anNcIjtcclxuaW1wb3J0IHsgR2FtZVBoYXNlIH0gZnJvbSBcIi4uL2VudW1zL0dhbWVQaGFzZVwiO1xyXG5pbXBvcnQgeyBJS2V5c0Rvd24gfSBmcm9tIFwiLi4vaW50ZXJmYWNlcy9JS2V5c0Rvd25cIjtcclxuaW1wb3J0IHsgZmV0Y2hQbGF5ZXJQcm9maWxlJCB9IGZyb20gXCIuLi9zZXJ2aWNlcy9hcGlTZXJ2aWNlc1wiO1xyXG5pbXBvcnQgeyBDb21wb25lbnQgfSBmcm9tIFwiLi9jb21wb25lbnRcIjtcclxuaW1wb3J0IHsgSVBsYXllckluZm8gfSBmcm9tIFwiLi4vaW50ZXJmYWNlcy9JUGxheWVySW5mb1wiO1xyXG5pbXBvcnQgeyBJVXNlcnNTY29yZXMgfSBmcm9tIFwiLi4vaW50ZXJmYWNlcy9JVXNlcnNTY29yZXNcIjtcclxuaW1wb3J0IHsgZHJhd0NlbnRlcmVkVGV4dCB9IGZyb20gXCIuLi9zZXJ2aWNlcy9yZW5kZXJTZXJ2aWNlc1wiO1xyXG5pbXBvcnQgeyBNRURJVU1fVEVYVF9GT05UIH0gZnJvbSBcIi4uL2NvbmZpZ1wiO1xyXG5cclxuZXhwb3J0IGNsYXNzIEVudGVyVXNlcm5hbWUgZXh0ZW5kcyBDb21wb25lbnQge1xyXG4gICAgcHJpdmF0ZSBfdXNlcm5hbWU6IHN0cmluZztcclxuXHJcbiAgICBvbkNyZWF0ZSgpOiB2b2lkIHtcclxuXHJcbiAgICB9XHJcbiAgICBvblJlc2l6ZShuZXdXaWR0aDogbnVtYmVyLCBuZXdIZWlnaHQ6IG51bWJlcik6IHZvaWQge1xyXG5cclxuICAgIH1cclxuXHJcbiAgICB1cGRhdGUoZGVsdGE6IG51bWJlciwga2V5c0Rvd246IElLZXlzRG93bik6IHZvaWQge1xyXG4gICAgICAgIGlmICh0aGlzLmdhbWVTdGF0ZS5jdXJyZW50U3RhdGUgPT09IEdhbWVQaGFzZS5FTlRFUl9OQU1FKSB7XHJcbiAgICAgICAgICAgIGtleXNEb3duLmtleXMuZm9yRWFjaCgoa2V5KSA9PiB7XHJcbiAgICAgICAgICAgICAgICBpZiAoa2V5Lmxlbmd0aCA9PT0gMSkge1xyXG4gICAgICAgICAgICAgICAgICAgIHRoaXMuX3VzZXJuYW1lICs9IGtleTtcclxuICAgICAgICAgICAgICAgIH0gZWxzZVxyXG4gICAgICAgICAgICAgICAgICAgIGlmIChrZXkgPT09ICdCYWNrc3BhY2UnKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMucmVtb3ZlTGFzdENoYXIoKTtcclxuICAgICAgICAgICAgICAgICAgICB9IGVsc2VcclxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGtleSA9PT0gXCJFbnRlclwiKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLnN1Ym1pdFVzZXJuYW1lKCk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfSlcclxuICAgICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgcmVuZGVyKCk6IHZvaWQge1xyXG4gICAgICAgIGlmKHRoaXMuZ2FtZVN0YXRlLmN1cnJlbnRTdGF0ZT09PUdhbWVQaGFzZS5FTlRFUl9OQU1FKXtcclxuICAgICAgICAgICAgZHJhd0NlbnRlcmVkVGV4dChcclxuICAgICAgICAgICAgICAgIHRoaXMuY3R4LFxyXG4gICAgICAgICAgICAgICAgJ0VudGVyIHVzZXJuYW1lJyxcclxuICAgICAgICAgICAgICAgIE1FRElVTV9URVhUX0ZPTlQsXHJcbiAgICAgICAgICAgICAgICB0aGlzLmN0eC5jYW52YXMud2lkdGgvMixcclxuICAgICAgICAgICAgICAgIHRoaXMuY3R4LmNhbnZhcy5oZWlnaHQvMi02MCxcclxuICAgICAgICAgICAgKTtcclxuICAgICAgICAgICAgZHJhd0NlbnRlcmVkVGV4dChcclxuICAgICAgICAgICAgICAgIHRoaXMuY3R4LFxyXG4gICAgICAgICAgICAgICAgdGhpcy5fdXNlcm5hbWUsXHJcbiAgICAgICAgICAgICAgICBNRURJVU1fVEVYVF9GT05ULFxyXG4gICAgICAgICAgICAgICAgdGhpcy5jdHguY2FudmFzLndpZHRoLzIsXHJcbiAgICAgICAgICAgICAgICB0aGlzLmN0eC5jYW52YXMuaGVpZ2h0XHJcbiAgICAgICAgICAgICk7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIHJlbW92ZUxhc3RDaGFyKCkge1xyXG4gICAgICAgIGlmICh0aGlzLl91c2VybmFtZS5sZW5ndGggPiAwKSB7XHJcbiAgICAgICAgICAgIHRoaXMuX3VzZXJuYW1lID0gdGhpcy5fdXNlcm5hbWUuc3Vic3RyaW5nKDAsIHRoaXMuX3VzZXJuYW1lLmxlbmd0aCAtIDEpO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICBzdWJtaXRVc2VybmFtZSgpIHtcclxuICAgICAgICBpZiAodGhpcy5fdXNlcm5hbWUubGVuZ3RoID4gMCkge1xyXG4gICAgICAgICAgICB0aGlzLmdhbWVTdGF0ZS5wbGF5ZXIudXNlcm5hbWUgPSB0aGlzLl91c2VybmFtZTtcclxuICAgICAgICAgICAgdGhpcy5nYW1lU3RhdGUuY3VycmVudFN0YXRlID0gR2FtZVBoYXNlLlJFQURZO1xyXG4gICAgICAgICAgICBmZXRjaFBsYXllclByb2ZpbGUkKHRoaXMuZ2FtZVN0YXRlLnBsYXllci51c2VybmFtZSkucGlwZShcclxuICAgICAgICAgICAgICAgIHRhcCgocGxheWVySW5mbzogSVVzZXJzU2NvcmVzKSA9PiB7XHJcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5nYW1lU3RhdGUucGxheWVyPXsuLi5wbGF5ZXJJbmZvLHNjb3JlOjB9O1xyXG4gICAgICAgICAgICAgICAgfSksXHJcbiAgICAgICAgICAgICAgICBjYXRjaEVycm9yKChlcnJvcjphbnkpPT57XHJcbiAgICAgICAgICAgICAgICAgICAgY29uc29sZS5lcnJvcihcIlByb2ZpbGUgbm90IGZvdW5kXCIpO1xyXG4gICAgICAgICAgICAgICAgICAgIHRoaXMuZ2FtZVN0YXRlLnBsYXllcj17XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGlkOi0xLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICBzY29yZTowLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICBsaW5lc0NsZWFyZWQ6MCxcclxuICAgICAgICAgICAgICAgICAgICAgICAgZWxlbWVudHNEcm9wZWQ6MCxcclxuICAgICAgICAgICAgICAgICAgICAgICAgdGltZVBsYXlpbmc6MCxcclxuICAgICAgICAgICAgICAgICAgICAgICAgaGlnaHNjb3JlOjAsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHVzZXJuYW1lOnRoaXMuX3VzZXJuYW1lXHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBvZih0aGlzLmdhbWVTdGF0ZS5wbGF5ZXIpO1xyXG4gICAgICAgICAgICAgICAgfSlcclxuICAgICAgICAgICAgKVxyXG4gICAgICAgICAgICAuc3Vic2NyaWJlKChwbGF5ZXI6SVBsYXllckluZm8pPT57XHJcbiAgICAgICAgICAgICAgICBjb25zb2xlLmxvZyhwbGF5ZXIpO1xyXG4gICAgICAgICAgICB9KVxyXG4gICAgICAgIH1cclxuICAgIH1cclxufSIsImltcG9ydCB7IHRvQXJyYXkgfSBmcm9tIFwicnhqc1wiO1xyXG5pbXBvcnQgeyBHYW1lUGhhc2UgfSBmcm9tIFwiLi4vZW51bXMvR2FtZVBoYXNlXCI7XHJcbmltcG9ydCB7IElLZXlzRG93biB9IGZyb20gXCIuLi9pbnRlcmZhY2VzL0lLZXlzRG93blwiO1xyXG5pbXBvcnQgeyBJUGxheWVySW5mbyB9IGZyb20gXCIuLi9pbnRlcmZhY2VzL0lQbGF5ZXJJbmZvXCI7XHJcbmltcG9ydCB7IElVc2Vyc1Njb3JlcyB9IGZyb20gXCIuLi9pbnRlcmZhY2VzL0lVc2Vyc1Njb3Jlc1wiO1xyXG5pbXBvcnQgeyBmZXRjaEhpZ2hTY29yZSQgfSBmcm9tIFwiLi4vc2VydmljZXMvYXBpU2VydmljZXNcIjtcclxuaW1wb3J0IHsgQ29tcG9uZW50IH0gZnJvbSBcIi4vY29tcG9uZW50XCI7XHJcbmltcG9ydCB7IGRyYXdUZXh0IH0gZnJvbSBcIi4uL3NlcnZpY2VzL3JlbmRlclNlcnZpY2VzXCI7XHJcbmltcG9ydCB7IE1FRElVTV9URVhUX0ZPTlQgfSBmcm9tIFwiLi4vY29uZmlnXCI7XHJcblxyXG5leHBvcnQgY2xhc3MgSGlnaHNjb3JlcyBleHRlbmRzIENvbXBvbmVudCB7XHJcbiAgICBwcml2YXRlIF9zaG93bjogYm9vbGVhbjtcclxuICAgIHByaXZhdGUgX2hpZ2hzY29yZXM6IElVc2Vyc1Njb3Jlc1tdO1xyXG5cclxuICAgIG9uQ3JlYXRlKCk6IHZvaWQge1xyXG4gICAgICAgIHRoaXMuX3Nob3duID0gZmFsc2U7XHJcbiAgICB9XHJcblxyXG4gICAgb25SZXNpemUobmV3V2lkdGg6IG51bWJlciwgbmV3SGVpZ2h0OiBudW1iZXIpOiB2b2lkIHtcclxuICAgIH1cclxuXHJcbiAgICB1cGRhdGUoZGVsdGE6IG51bWJlciwga2V5c0Rvd246IElLZXlzRG93bik6IHZvaWQge1xyXG4gICAgICAgIGlmICh0aGlzLmdhbWVTdGF0ZS5jdXJyZW50U3RhdGUgPT09IEdhbWVQaGFzZS5SRUFEWSkge1xyXG4gICAgICAgICAgICBpZiAoa2V5c0Rvd25bMF0gPT0gJ0tleUgnKSB7XHJcbiAgICAgICAgICAgICAgICB0aGlzLl9zaG93biA9ICF0aGlzLl9zaG93bjtcclxuICAgICAgICAgICAgICAgIGlmICh0aGlzLl9zaG93bikge1xyXG4gICAgICAgICAgICAgICAgICAgIGZldGNoSGlnaFNjb3JlJCgpXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIC5waXBlKFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAvL3RvQXJyYXkoKVxyXG4gICAgICAgICAgICAgICAgICAgIClcclxuICAgICAgICAgICAgICAgICAgICAgICAgLnN1YnNjcmliZSgoc2NvcmVzKSA9PiB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLl9oaWdoc2NvcmVzID0gc2NvcmVzO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgIH1cclxuICAgIHJlbmRlcigpOiB2b2lkIHtcclxuICAgICAgICBpZiAodGhpcy5fc2hvd24gJiYgdGhpcy5faGlnaHNjb3Jlcykge1xyXG4gICAgICAgICAgICBkcmF3VGV4dChcclxuICAgICAgICAgICAgICAgIHRoaXMuY3R4LFxyXG4gICAgICAgICAgICAgICAgJ0hpZ2hzY29yZXM6JyxcclxuICAgICAgICAgICAgICAgIE1FRElVTV9URVhUX0ZPTlQsXHJcbiAgICAgICAgICAgICAgICB0aGlzLmN0eC5jYW52YXMud2lkdGggKiAwLjYsXHJcbiAgICAgICAgICAgICAgICAxMDBcclxuICAgICAgICAgICAgKTtcclxuXHJcbiAgICAgICAgICAgIHRoaXMuX2hpZ2hzY29yZXMuZm9yRWFjaCgocGxheWVyLCBpbmRleCkgPT4ge1xyXG4gICAgICAgICAgICAgICAgZHJhd1RleHQoXHJcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5jdHgsXHJcbiAgICAgICAgICAgICAgICAgICAgYCR7aW5kZXggKyAxfS4gJHtwbGF5ZXIudXNlcm5hbWUucGFkRW5kKDUpfS0gJHtwbGF5ZXIuaGlnaHNjb3JlXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIC50b1N0cmluZygpLnBhZFN0YXJ0KDIpfWAsXHJcbiAgICAgICAgICAgICAgICAgICAgTUVESVVNX1RFWFRfRk9OVCxcclxuICAgICAgICAgICAgICAgICAgICB0aGlzLmN0eC5jYW52YXMud2lkdGggKiAwLjYsXHJcbiAgICAgICAgICAgICAgICAgICAgNTAgKiogaW5kZXggKyAxNTAsXHJcbiAgICAgICAgICAgICAgICApO1xyXG4gICAgICAgICAgICB9KTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcblxyXG59IiwiaW1wb3J0IHsgTEFSR0VfVEVYVF9GT05ULCBNRURJVU1fVEVYVF9GT05ULCBTTUFMTF9URVhUX0ZPTlQgfSBmcm9tIFwiLi4vY29uZmlnXCI7XHJcbmltcG9ydCB7IEdhbWVQaGFzZSB9IGZyb20gXCIuLi9lbnVtcy9HYW1lUGhhc2VcIjtcclxuaW1wb3J0IHsgSUtleXNEb3duIH0gZnJvbSBcIi4uL2ludGVyZmFjZXMvSUtleXNEb3duXCI7XHJcbmltcG9ydCB7IGRyYXdDZW50ZXJlZFRleHQsIGRyYXdUZXh0IH0gZnJvbSBcIi4uL3NlcnZpY2VzL3JlbmRlclNlcnZpY2VzXCI7XHJcbmltcG9ydCB7IENvbXBvbmVudCB9IGZyb20gXCIuL2NvbXBvbmVudFwiO1xyXG5cclxuZXhwb3J0IGNsYXNzIE92ZXJsYXkgZXh0ZW5kcyBDb21wb25lbnQge1xyXG4gICAgb25DcmVhdGUoKTogdm9pZCB7XHJcblxyXG4gICAgfVxyXG5cclxuICAgIG9uUmVzaXplKG5ld1dpZHRoOiBudW1iZXIsIG5ld0hlaWdodDogbnVtYmVyKTogdm9pZCB7XHJcblxyXG4gICAgfVxyXG5cclxuICAgIHVwZGF0ZShkZWx0YTogbnVtYmVyLCBrZXlzRG93bjogSUtleXNEb3duKTogdm9pZCB7XHJcblxyXG4gICAgfVxyXG5cclxuICAgIHJlbmRlcigpOiB2b2lkIHtcclxuICAgICAgICBzd2l0Y2ggKHRoaXMuZ2FtZVN0YXRlLmN1cnJlbnRTdGF0ZSkge1xyXG4gICAgICAgICAgICBjYXNlIEdhbWVQaGFzZS5SRUFEWTpcclxuICAgICAgICAgICAgICAgIHRoaXMucmVuZGVyRGFya2VuU2NyZWVuKCk7XHJcbiAgICAgICAgICAgICAgICB0aGlzLnJlbmRlckhpZ2hzY29yZSgpO1xyXG4gICAgICAgICAgICAgICAgdGhpcy5yZW5kZXJDb250cm9scygpO1xyXG4gICAgICAgICAgICAgICAgdGhpcy5yZW5kZXJJbmZvKCk7XHJcbiAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgY2FzZSBHYW1lUGhhc2UuUExBWUlORzpcclxuICAgICAgICAgICAgICAgIHRoaXMucmVuZGVyQ3VycmVudFNjb3JlKCk7XHJcbiAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgY2FzZSBHYW1lUGhhc2UuR0FNRV9PVkVSOlxyXG4gICAgICAgICAgICAgICAgdGhpcy5yZW5kZXJEYXJrZW5TY3JlZW4oKTtcclxuICAgICAgICAgICAgICAgIHRoaXMucmVuZGVyR2FtZU92ZXIoKTtcclxuICAgICAgICAgICAgICAgIHRoaXMucmVuZGVySGlnaHNjb3JlKCk7XHJcbiAgICAgICAgICAgICAgICB0aGlzLnJlbmRlckNvbnRyb2xzKCk7XHJcbiAgICAgICAgICAgICAgICB0aGlzLnJlbmRlckluZm8oKTtcclxuICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICBjYXNlIEdhbWVQaGFzZS5FTlRFUl9OQU1FOlxyXG4gICAgICAgICAgICAgICAgdGhpcy5yZW5kZXJEYXJrZW5TY3JlZW4oKTtcclxuICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICByZW5kZXJDb250cm9scygpIHtcclxuICAgICAgICBkcmF3VGV4dChcclxuICAgICAgICAgICAgdGhpcy5jdHgsXHJcbiAgICAgICAgICAgICdbSF0tSGlnaHNjb3JlcycsXHJcbiAgICAgICAgICAgIFNNQUxMX1RFWFRfRk9OVCxcclxuICAgICAgICAgICAgMTAsXHJcbiAgICAgICAgICAgIHRoaXMuY3R4LmNhbnZhcy5oZWlnaHQgLSAzMCxcclxuICAgICAgICApO1xyXG4gICAgfVxyXG5cclxuICAgIHJlbmRlckN1cnJlbnRTY29yZSgpOiB2b2lkIHtcclxuICAgICAgICBjb25zdCBzY29yZVRleHQgPSB0aGlzLmdhbWVTdGF0ZS5zY29yZS50b1N0cmluZygpO1xyXG4gICAgICAgIGRyYXdUZXh0KFxyXG4gICAgICAgICAgICB0aGlzLmN0eCxcclxuICAgICAgICAgICAgc2NvcmVUZXh0LFxyXG4gICAgICAgICAgICBMQVJHRV9URVhUX0ZPTlQsXHJcbiAgICAgICAgICAgIHRoaXMuY3R4LmNhbnZhcy53aWR0aCArIDUsXHJcbiAgICAgICAgICAgIHRoaXMuY3R4LmNhbnZhcy5oZWlnaHQgKyA1XHJcbiAgICAgICAgKTtcclxuICAgIH1cclxuXHJcbiAgICByZW5kZXJFbnRlclRvU3RhcnQoKTogdm9pZCB7XHJcbiAgICAgICAgZHJhd0NlbnRlcmVkVGV4dChcclxuICAgICAgICAgICAgdGhpcy5jdHgsXHJcbiAgICAgICAgICAgICdQcmVzcyBFbnRlciBUbyBTdGFydCcsXHJcbiAgICAgICAgICAgIE1FRElVTV9URVhUX0ZPTlQsXHJcbiAgICAgICAgICAgIHRoaXMuY3R4LmNhbnZhcy53aWR0aCAvIDIsXHJcbiAgICAgICAgICAgIHRoaXMuY3R4LmNhbnZhcy5oZWlnaHQgLyAyXHJcbiAgICAgICAgKTtcclxuICAgIH1cclxuXHJcbiAgICByZW5kZXJIaWdoc2NvcmUoKTogdm9pZCB7XHJcbiAgICAgICAgY29uc3QgdGV4dCA9IGBIaWdoc2NvcmU6ICR7dGhpcy5nYW1lU3RhdGUucGxheWVyLmhpZ2hzY29yZX1gO1xyXG4gICAgICAgIGRyYXdDZW50ZXJlZFRleHQoXHJcbiAgICAgICAgICAgIHRoaXMuY3R4LFxyXG4gICAgICAgICAgICB0aGlzLmdhbWVTdGF0ZS5wbGF5ZXIudXNlcm5hbWUsXHJcbiAgICAgICAgICAgIE1FRElVTV9URVhUX0ZPTlQsXHJcbiAgICAgICAgICAgIHRoaXMuY3R4LmNhbnZhcy53aWR0aCAvIDIsXHJcbiAgICAgICAgICAgIHRoaXMuY3R4LmNhbnZhcy5oZWlnaHQgLyAyIC0gMTAwXHJcbiAgICAgICAgKTtcclxuICAgICAgICBkcmF3Q2VudGVyZWRUZXh0KFxyXG4gICAgICAgICAgICB0aGlzLmN0eCxcclxuICAgICAgICAgICAgdGV4dCxcclxuICAgICAgICAgICAgTUVESVVNX1RFWFRfRk9OVCxcclxuICAgICAgICAgICAgdGhpcy5jdHguY2FudmFzLndpZHRoIC8gMixcclxuICAgICAgICAgICAgdGhpcy5jdHguY2FudmFzLmhlaWdodCAvIDIgLSA1MFxyXG4gICAgICAgICk7XHJcbiAgICB9XHJcblxyXG4gICAgcmVuZGVySW5mbygpIHtcclxuICAgICAgICBjb25zdCBpbmZvVGV4dCA9IGBMaW5lcyBjbGVhcmVkOiAke3RoaXMuZ2FtZVN0YXRlLnBsYXllci5saW5lc0NsZWFyZWR9YDtcclxuICAgICAgICBkcmF3Q2VudGVyZWRUZXh0KFxyXG4gICAgICAgICAgICB0aGlzLmN0eCxcclxuICAgICAgICAgICAgaW5mb1RleHQsXHJcbiAgICAgICAgICAgIFNNQUxMX1RFWFRfRk9OVCxcclxuICAgICAgICAgICAgdGhpcy5jdHguY2FudmFzLndpZHRoIC8gMixcclxuICAgICAgICAgICAgdGhpcy5jdHguY2FudmFzLmhlaWdodCAtIDEwXHJcbiAgICAgICAgKVxyXG4gICAgfVxyXG5cclxuICAgIHJlbmRlckdhbWVPdmVyKCkge1xyXG4gICAgICAgIGNvbnN0IHNjb3JlVGV4dCA9IGBTY29yZTogJHt0aGlzLmdhbWVTdGF0ZS5zY29yZX1gO1xyXG4gICAgICAgIGRyYXdDZW50ZXJlZFRleHQoXHJcbiAgICAgICAgICAgIHRoaXMuY3R4LFxyXG4gICAgICAgICAgICAnR0FNRSBPVkVSJyxcclxuICAgICAgICAgICAgTEFSR0VfVEVYVF9GT05ULFxyXG4gICAgICAgICAgICB0aGlzLmN0eC5jYW52YXMud2lkdGggLyAyLFxyXG4gICAgICAgICAgICAxMDAsXHJcbiAgICAgICAgKTtcclxuICAgICAgICBkcmF3Q2VudGVyZWRUZXh0KFxyXG4gICAgICAgICAgICB0aGlzLmN0eCxcclxuICAgICAgICAgICAgc2NvcmVUZXh0LFxyXG4gICAgICAgICAgICBNRURJVU1fVEVYVF9GT05ULFxyXG4gICAgICAgICAgICB0aGlzLmN0eC5jYW52YXMud2lkdGggLyAyLFxyXG4gICAgICAgICAgICAxNTAsXHJcbiAgICAgICAgKTtcclxuICAgIH1cclxuXHJcbiAgICByZW5kZXJEYXJrZW5TY3JlZW4oKSB7XHJcbiAgICAgICAgdGhpcy5jdHguZ2xvYmFsQWxwaGEgPSAwLjM7XHJcbiAgICAgICAgdGhpcy5jdHguZmlsbFN0eWxlID0gJ2JsYWNrJztcclxuICAgICAgICB0aGlzLmN0eC5maWxsUmVjdChcclxuICAgICAgICAgICAgMCxcclxuICAgICAgICAgICAgMCxcclxuICAgICAgICAgICAgdGhpcy5jdHguY2FudmFzLndpZHRoLFxyXG4gICAgICAgICAgICB0aGlzLmN0eC5jYW52YXMuaGVpZ2h0LFxyXG4gICAgICAgICk7XHJcbiAgICAgICAgdGhpcy5jdHguZ2xvYmFsQWxwaGEgPSAxO1xyXG4gICAgfVxyXG5cclxufSIsImltcG9ydCB7IEdhbWVQaGFzZSB9IGZyb20gXCIuL2VudW1zL0dhbWVQaGFzZVwiO1xyXG5cclxuZXhwb3J0IGNvbnN0IEFQSV9VUkw9J2h0dHA6Ly9sb2NhbGhvc3Q6MzAwMCdcclxuZXhwb3J0IGNvbnN0IEJBQ0tHUk9VTkRfQVNQRUNUX1JBVElPID0gMy4xMjU7XHJcbmV4cG9ydCBjb25zdCBCT0FSRF9CTE9DS1NfV0lEVEg9MTA7XHJcbmV4cG9ydCBjb25zdCBCT0FSRF9CTE9DS1NfSEVJR0h0PTIwO1xyXG5leHBvcnQgY29uc3QgQk9BUkRfQk9SREVSX1NISUZUX1g9MS8xMjtcclxuZXhwb3J0IGNvbnN0IEJPQVJEX0JPUkRFUl9TSElGVF9ZPTEvMjI7XHJcblxyXG5cclxuZXhwb3J0IGNvbnN0IFNNQUxMX1RFWFRfRk9OVCA9ICcxcmVtIFwiUHJlc3MgU3RhcnQgMlBcIic7XHJcbmV4cG9ydCBjb25zdCBNRURJVU1fVEVYVF9GT05UID0gJzJyZW0gXCJQcmVzcyBTdGFydCAyUFwiJztcclxuZXhwb3J0IGNvbnN0IExBUkdFX1RFWFRfRk9OVCA9ICczcmVtIFwiUHJlc3MgU3RhcnQgMlBcIic7XHJcbmV4cG9ydCBjb25zdCBGT05UX0NPTE9SID0gJ3doaXRlJztcclxuZXhwb3J0IGNvbnN0IEZPTlRfU0hBRE9XX0NPTE9SID0gJ2dyYXknO1xyXG5leHBvcnQgY29uc3QgRk9OVF9TSEFET1dfU0laRSA9IDM7XHJcblxyXG5leHBvcnQgY29uc3QgU1RBUlRJTkdfREVMVEFfVElNRT0wLjg7XHJcblxyXG5cclxuZXhwb3J0IGNvbnN0IE1JTl9JTlRFUlZBTF9NUz01MDtcclxuZXhwb3J0IGNvbnN0IElOSVRJQUxfVElNRV9NUz04MDA7XHJcbmV4cG9ydCBjb25zdCBOVU1fU0hBUEVTPTc7XHJcblxyXG5cclxuZXhwb3J0IGNvbnN0IElOSVRJQUxfR0FNRV9TVEFURT17XHJcbiAgICBjdXJyZW50U3RhdGU6R2FtZVBoYXNlLkVOVEVSX05BTUUsXHJcbiAgICBzY29yZTowLFxyXG4gICAgcGxheWVyOntcclxuICAgICAgICBpZDowLFxyXG4gICAgICAgIHVzZXJuYW1lOicnLFxyXG4gICAgICAgIHNjb3JlOjAsXHJcbiAgICAgICAgbGluZXNDbGVhcmVkOjAsXHJcbiAgICAgICAgZWxlbWVudHNEcm9wZWQ6MCxcclxuICAgICAgICB0aW1lUGxheWluZzowLFxyXG4gICAgICAgIGhpZ2hzY29yZTowXHJcbiAgICB9XHJcbn1cclxuXHJcbmV4cG9ydCBjb25zdCBNQVhJTVVNX0RFTFRBX1RJTUUgPSAxIC8gMzA7XHJcbmV4cG9ydCBjb25zdCBHQU1FX1NQRUVEPTE7IiwiZXhwb3J0IGVudW0gR2FtZVBoYXNle1xyXG4gICAgRU5URVJfTkFNRT0wLFxyXG4gICAgUkVBRFk9MSxcclxuICAgIFBMQVlJTkc9MixcclxuICAgIEdBTUVfT1ZFUj0zLFxyXG4gIC8vICBMRUFERVJCT0FSRD00LFxyXG59IiwiaW1wb3J0IHsgT2JzZXJ2YWJsZSwgZGVib3VuY2VUaW1lLCBmcm9tRXZlbnQgfSBmcm9tIFwicnhqc1wiO1xyXG5pbXBvcnQgeyBHYW1lUGhhc2UgfSBmcm9tIFwiLi9lbnVtcy9HYW1lUGhhc2VcIjtcclxuaW1wb3J0IHsgbG9hZEJhY2tncm91bmRJbWFnZSQsIGxvYWRTaGFwZVNwcml0ZXMkIH0gZnJvbSBcIi4vc2VydmljZXMvaW1hZ2VMb2FkZXJcIjtcclxuaW1wb3J0IHsgU2hhcGUsIFNoYXBlSSB9IGZyb20gXCIuL2NvbXBvbmVudHMvc2hhcGVcIjtcclxuaW1wb3J0IHsgRW50ZXJVc2VybmFtZSB9IGZyb20gXCIuL2NvbXBvbmVudHMvZW50ZXJVc2VybmFtZVwiO1xyXG5pbXBvcnQgeyBIaWdoc2NvcmVzIH0gZnJvbSBcIi4vY29tcG9uZW50cy9oaWdoc2NvcmVzXCI7XHJcbmltcG9ydCB7IE92ZXJsYXkgfSBmcm9tIFwiLi9jb21wb25lbnRzL292ZXJsYXlcIjtcclxuaW1wb3J0IHsgQmFja2dyb3VuZCB9IGZyb20gXCIuL2NvbXBvbmVudHMvYmFja2dyb3VuZFwiO1xyXG5pbXBvcnQgeyBJR2FtZVN0YXRlIH0gZnJvbSBcIi4vaW50ZXJmYWNlcy9JR2FtZVN0YXRlXCI7XHJcbmltcG9ydCB7IEdBTUVfU1BFRUQsIElOSVRJQUxfR0FNRV9TVEFURSwgTUlOX0lOVEVSVkFMX01TIH0gZnJvbSBcIi4vY29uZmlnXCI7XHJcbmltcG9ydCB7IGRlY3JlYXNpbmdJbnRlcnZhbE9ic2VydmFibGUsIGZvcm11bGEgfSBmcm9tIFwiLi9zZXJ2aWNlcy9nYW1lVGlja2VyXCI7XHJcbi8vIGltcG9ydCB7IHNoYXBlU3Bhd25lciB9IGZyb20gXCIuL3NlcnZpY2VzL3NoYXBlU3Bhd25lclwiO1xyXG5pbXBvcnQgeyBpbml0aWFsaXplTWFpbkxvb3AgfSBmcm9tIFwiLi9zZXJ2aWNlcy9yZW5kZXJMb29wXCI7XHJcbmltcG9ydCB7IElLZXlzRG93biB9IGZyb20gXCIuL2ludGVyZmFjZXMvSUtleXNEb3duXCI7XHJcbmltcG9ydCB7IHB1dFBsYXllclByb2ZpbGUgfSBmcm9tIFwiLi9zZXJ2aWNlcy9hcGlTZXJ2aWNlc1wiO1xyXG4vLyBpbXBvcnQgeyBnZXRLZXlzRG93biB9IGZyb20gXCIuL3NlcnZpY2VzL2tleWJvcmRJbnB1dFNlcnZpY2VcIjtcclxuZXhwb3J0IGNsYXNzIEdhbWUge1xyXG4gICAgcHJpdmF0ZSByZWFkb25seSBjYW52YXM6IEhUTUxDYW52YXNFbGVtZW50O1xyXG4gICAgcHJpdmF0ZSByZWFkb25seSBjdHg6IENhbnZhc1JlbmRlcmluZ0NvbnRleHQyRDtcclxuICAgIHByaXZhdGUgcmVhZG9ubHkgZ2FtZVN0YXRlOiBJR2FtZVN0YXRlO1xyXG5cclxuICAgIHByaXZhdGUgYmFja2dyb3VuZDogQmFja2dyb3VuZDtcclxuXHJcbiAgICBwcml2YXRlIHNoYXBlczogU2hhcGVbXTtcclxuICAgIHByaXZhdGUgZW50ZXJVc2VybmFtZTogRW50ZXJVc2VybmFtZTtcclxuICAgIHByaXZhdGUgaGlnaHNjb3JlczogSGlnaHNjb3JlcztcclxuICAgIHByaXZhdGUgb3ZlcmxheTogT3ZlcmxheVxyXG5cclxuXHJcbiAgICBwcml2YXRlIHNoYXBlU3Bhd25lciQ6IE9ic2VydmFibGU8bnVtYmVyPjtcclxuICAgIHByaXZhdGUgbWFpbkxvb3AkOk9ic2VydmFibGU8W251bWJlcixJS2V5c0Rvd25dPjtcclxuICAgIGNvbnN0cnVjdG9yKGNhbnZhczogSFRNTENhbnZhc0VsZW1lbnQpIHtcclxuICAgICAgICBpZiAoIWNhbnZhcy5nZXRDb250ZXh0KSB7XHJcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihcIkNhbnZhcyBpcyBub3Qgc3VwcG9ydGVkIGluIHRoaXMgYnJvd3NlclwiKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgdGhpcy5jYW52YXMgPSBjYW52YXM7XHJcbiAgICAgICAgdGhpcy5jdHggPSBjYW52YXMuZ2V0Q29udGV4dCgnMmQnKTtcclxuICAgICAgICB0aGlzLmN0eC5pbWFnZVNtb290aGluZ0VuYWJsZWQgPSBmYWxzZTtcclxuXHJcbiAgICAgICAgdGhpcy5nYW1lU3RhdGUgPSBJTklUSUFMX0dBTUVfU1RBVEU7XHJcbiAgICAgICAgdGhpcy5iYWNrZ3JvdW5kID0gbnVsbDtcclxuICAgICAgICB0aGlzLnNoYXBlcyA9IFtdO1xyXG4gICAgICAgIHRoaXMuZW50ZXJVc2VybmFtZSA9IG5ldyBFbnRlclVzZXJuYW1lKHRoaXMuY3R4LCB0aGlzLmdhbWVTdGF0ZSk7XHJcbiAgICAgICAgdGhpcy5oaWdoc2NvcmVzID0gbmV3IEhpZ2hzY29yZXModGhpcy5jdHgsIHRoaXMuZ2FtZVN0YXRlKTtcclxuICAgICAgICB0aGlzLm92ZXJsYXkgPSBuZXcgT3ZlcmxheSh0aGlzLmN0eCwgdGhpcy5nYW1lU3RhdGUpO1xyXG5cclxuICAgICAgICAvLyB0aGlzLmdhbWVUaWNrJCA9IGRlY3JlYXNpbmdJbnRlcnZhbE9ic2VydmFibGUoTUlOX0lOVEVSVkFMX01TLCBmb3JtdWxhKTtcclxuICAgICAgICAvLyB0aGlzLnNoYXBlU3Bhd25lciQgPSBzaGFwZVNwYXduZXIoKTtcclxuICAgICAgICB0aGlzLm1haW5Mb29wJD1pbml0aWFsaXplTWFpbkxvb3AoKTtcclxuXHJcbiAgICB9XHJcblxyXG4gICAgaW5pdCgpIHtcclxuICAgICAgICBmcm9tRXZlbnQod2luZG93LCAncmVzaXplJylcclxuICAgICAgICAgICAgLnBpcGUoZGVib3VuY2VUaW1lKDEwMCkpXHJcbiAgICAgICAgICAgIC5zdWJzY3JpYmUoKCkgPT4ge1xyXG4gICAgICAgICAgICAgICAgdGhpcy5yZXNpemUod2luZG93LmlubmVyV2lkdGgsIHdpbmRvdy5pbm5lckhlaWdodCk7XHJcbiAgICAgICAgICAgIH0pXHJcblxyXG4gICAgICAgIHRoaXMubWFpbkxvb3AkLnN1YnNjcmliZShcclxuICAgICAgICAgICAgKFtkZWx0YVRpbWUsa2V5c0Rvd25dKT0+e1xyXG4gICAgICAgICAgICAgICAgY29uc3Qgc2NhbGVkRGVsdGFUaW1lPWRlbHRhVGltZSpHQU1FX1NQRUVEO1xyXG4gICAgICAgICAgICAgICAgXHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICApXHJcblxyXG5cclxuICAgICAgICBsb2FkQmFja2dyb3VuZEltYWdlJCgpLnN1YnNjcmliZSgoaW1nKSA9PiB7XHJcbiAgICAgICAgICAgIHRoaXMuYmFja2dyb3VuZCA9IG5ldyBCYWNrZ3JvdW5kKHRoaXMuY3R4LCB0aGlzLmdhbWVTdGF0ZSwgaW1nKTtcclxuICAgICAgICB9KVxyXG5cclxuICAgICAgICAvLyB0aGlzLmtleWJvYXJkSW5wdXQkID0gZ2V0S2V5c0Rvd24oKTtcclxuICAgIH1cclxuXHJcbiAgICBzdGFydFJvdW5kKCkge1xyXG5cclxuICAgIH1cclxuXHJcblxyXG4gICAgdXBkYXRlTG9naWMoZGVsdGFUaW1lOm51bWJlcixrZXlzRG93bjpJS2V5c0Rvd24pe1xyXG4gICAgICAgIHN3aXRjaCh0aGlzLmdhbWVTdGF0ZS5jdXJyZW50U3RhdGUpe1xyXG4gICAgICAgICAgICBjYXNlIEdhbWVQaGFzZS5QTEFZSU5HOlxyXG4gICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgIGNhc2UgR2FtZVBoYXNlLlJFQURZOlxyXG4gICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgIGNhc2UgR2FtZVBoYXNlLkdBTUVfT1ZFUjpcclxuICAgICAgICAgICAgICAgIGlmKGtleXNEb3duWydTcGFjZSddKXtcclxuICAgICAgICAgICAgICAgICAgICB0aGlzLnN0YXJ0Um91bmQoKTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuICAgIHJlc2l6ZShuZXdXaWR0aDogbnVtYmVyLCBuZXdIZWlnaHQ6IG51bWJlcikge1xyXG4gICAgICAgIHRoaXMuY2FudmFzLndpZHRoID0gbmV3V2lkdGg7XHJcbiAgICAgICAgdGhpcy5jYW52YXMuaGVpZ2h0ID0gbmV3SGVpZ2h0O1xyXG4gICAgICAgIHRoaXMuY3R4LmltYWdlU21vb3RoaW5nRW5hYmxlZCA9IGZhbHNlO1xyXG5cclxuICAgICAgICB0aGlzLmJhY2tncm91bmQub25SZXNpemUobmV3V2lkdGgsbmV3SGVpZ2h0KTtcclxuICAgICAgICB0aGlzLnNoYXBlcy5mb3JFYWNoKChzaGFwZSk9PnNoYXBlLm9uUmVzaXplKG5ld1dpZHRoLG5ld0hlaWdodCkpO1xyXG4gICAgICAgIHRoaXMuZW50ZXJVc2VybmFtZS5vblJlc2l6ZShuZXdXaWR0aCxuZXdIZWlnaHQpO1xyXG4gICAgICAgIHRoaXMuaGlnaHNjb3Jlcy5vblJlc2l6ZShuZXdXaWR0aCxuZXdIZWlnaHQpO1xyXG4gICAgICAgIHRoaXMub3ZlcmxheS5vblJlc2l6ZShuZXdXaWR0aCxuZXdIZWlnaHQpO1xyXG4gICAgfVxyXG5cclxuICAgIHJlbmRlcigpe1xyXG4gICAgICAgIGNvbnN0IHNjcmVlbldpZHRoPXRoaXMuY3R4LmNhbnZhcy53aWR0aDtcclxuICAgICAgICBjb25zdCBzY3JlZW5IZWlnaHQ9dGhpcy5jdHguY2FudmFzLmhlaWdodDtcclxuXHJcbiAgICAgICAgdGhpcy5jdHguY2xlYXJSZWN0KDAsMCxzY3JlZW5XaWR0aCxzY3JlZW5IZWlnaHQpO1xyXG5cclxuICAgICAgICB0aGlzLmJhY2tncm91bmQucmVuZGVyKCk7XHJcbiAgICAgICAgdGhpcy5zaGFwZXMuZm9yRWFjaChzaGFwZT0+c2hhcGUucmVuZGVyKCkpO1xyXG4gICAgICAgIHRoaXMub3ZlcmxheS5yZW5kZXIoKTtcclxuICAgICAgICB0aGlzLmhpZ2hzY29yZXMucmVuZGVyKCk7XHJcbiAgICAgICAgdGhpcy5lbnRlclVzZXJuYW1lLnJlbmRlcigpO1xyXG4gICAgfVxyXG5cclxuICAgIHVwZGF0ZShkZWx0YVRpbWU6bnVtYmVyLGtleXNEb3duOklLZXlzRG93bil7XHJcbiAgICAgICAgdGhpcy5iYWNrZ3JvdW5kLnVwZGF0ZShkZWx0YVRpbWUsa2V5c0Rvd24pO1xyXG5cclxuICAgICAgICB0aGlzLnNoYXBlcy5mb3JFYWNoKHNoYXBlPT5zaGFwZS51cGRhdGUoZGVsdGFUaW1lLGtleXNEb3duKSk7XHJcblxyXG4gICAgICAgIHRoaXMub3ZlcmxheS51cGRhdGUoZGVsdGFUaW1lLGtleXNEb3duKTtcclxuICAgICAgICB0aGlzLmVudGVyVXNlcm5hbWUudXBkYXRlKGRlbHRhVGltZSxrZXlzRG93bik7XHJcbiAgICAgICAgdGhpcy5oaWdoc2NvcmVzLnVwZGF0ZShkZWx0YVRpbWUsa2V5c0Rvd24pO1xyXG5cclxuICAgICAgICB0aGlzLnVwZGF0ZUxvZ2ljKGRlbHRhVGltZSxrZXlzRG93bik7XHJcbiAgICB9XHJcblxyXG4gICAgZGllKCk6dm9pZHtcclxuICAgICAgICB0aGlzLnNoYXBlcz1bXTtcclxuXHJcbiAgICAgICAgdGhpcy5nYW1lU3RhdGUuY3VycmVudFN0YXRlPUdhbWVQaGFzZS5HQU1FX09WRVI7XHJcblxyXG4gICAgICAgIGlmKHRoaXMuZ2FtZVN0YXRlLnNjb3JlPnRoaXMuZ2FtZVN0YXRlLnBsYXllci5oaWdoc2NvcmUpe1xyXG4gICAgICAgICAgICB0aGlzLmdhbWVTdGF0ZS5wbGF5ZXIuaGlnaHNjb3JlPXRoaXMuZ2FtZVN0YXRlLnNjb3JlO1xyXG4gICAgICAgICAgICBwdXRQbGF5ZXJQcm9maWxlKHRoaXMuZ2FtZVN0YXRlLnBsYXllcikudGhlbigocGxheWVyKT0+e1xyXG4gICAgICAgICAgICAgICAgdGhpcy5nYW1lU3RhdGUucGxheWVyPXsuLi5wbGF5ZXIsc2NvcmU6MH07XHJcbiAgICAgICAgICAgIH0pO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICAvL2RldGVjdCBkZWF0aCBhbmQgY2FsbCBkaWU7XHJcbn0iLCJpbXBvcnQgeyBPYnNlcnZhYmxlLCBhc3luYywgZnJvbSB9IGZyb20gXCJyeGpzXCI7XHJcbmltcG9ydCB7IEFQSV9VUkwgfSBmcm9tIFwiLi4vY29uZmlnXCI7XHJcbmltcG9ydCB7IEFzeW5jQWN0aW9uIH0gZnJvbSBcInJ4anMvaW50ZXJuYWwvc2NoZWR1bGVyL0FzeW5jQWN0aW9uXCI7XHJcbmltcG9ydCB7IElQbGF5ZXJJbmZvIH0gZnJvbSBcIi4uL2ludGVyZmFjZXMvSVBsYXllckluZm9cIjtcclxuaW1wb3J0IHsgSVNoYXBlVHlwZXMgfSBmcm9tIFwiLi4vaW50ZXJmYWNlcy9JU2hhcGVUeXBlc1wiO1xyXG5pbXBvcnQgeyBJVXNlcnNTY29yZXMgfSBmcm9tIFwiLi4vaW50ZXJmYWNlcy9JVXNlcnNTY29yZXNcIjtcclxuXHJcbmNvbnN0IGZldGNoRnJvbUFwaSQgPSA8VD4oXHJcbiAgICBwYXRoOiBzdHJpbmcsXHJcbiAgICByZXF1ZXN0SW5pdD86IFJlcXVlc3RJbml0LFxyXG4pOiBPYnNlcnZhYmxlPFQ+ID0+IHtcclxuICAgIHJldHVybiBmcm9tKGZldGNoKGAke0FQSV9VUkx9LyR7cGF0aH1gKVxyXG4gICAgICAgIC50aGVuKHJlcyA9PiB7XHJcbiAgICAgICAgICAgIGlmICghcmVzLm9rKSB7XHJcbiAgICAgICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXCJGYWlsZWQgdG8gZmV0Y2hcIilcclxuICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgIHJldHVybiByZXMuanNvbigpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfSlcclxuICAgICAgICAuY2F0Y2goZSA9PiBjb25zb2xlLmVycm9yKGUpKVxyXG4gICAgKTtcclxufTtcclxuXHJcbmNvbnN0IGZldGNoUGxheWVyUHJvZmlsZSQgPSAoXHJcbiAgICB1c2VybmFtZTogc3RyaW5nXHJcbik6IE9ic2VydmFibGU8SVVzZXJzU2NvcmVzPiA9PiB7XHJcbiAgICByZXR1cm4gZmV0Y2hGcm9tQXBpJDxJVXNlcnNTY29yZXM+KGB1c2Vycz91c2VybmFtZT0ke3VzZXJuYW1lfWApXHJcbn1cclxuXHJcbmNvbnN0IGZldGNoSGlnaFNjb3JlJCA9ICgpOiBPYnNlcnZhYmxlPElVc2Vyc1Njb3Jlc1tdPiA9PiB7XHJcbiAgICByZXR1cm4gZmV0Y2hGcm9tQXBpJDxJVXNlcnNTY29yZXNbXT4oYHVzZXJzP19zb3J0PWhpZ2hzY29yZSZfb3JkZXI9ZGVzYyZfbGltaXQ9MTBgKVxyXG59XHJcblxyXG5jb25zdCBmZXRjaFNwcml0ZSQgPSAoKTogT2JzZXJ2YWJsZTx7XHJcbiAgICBwYXRoOiBzdHJpbmcsXHJcbiAgICBzaGFwZXM6IElTaGFwZVR5cGVzW10sXHJcbiAgICBib2FyZDogc3RyaW5nXHJcbn0+ID0+IHtcclxuICAgIHJldHVybiBmZXRjaEZyb21BcGkkPHtcclxuICAgICAgICBwYXRoOiBzdHJpbmcsXHJcbiAgICAgICAgc2hhcGVzOiBJU2hhcGVUeXBlc1tdLFxyXG4gICAgICAgIGJvYXJkOiBzdHJpbmdcclxuICAgIH0+KGBzcHJpdGVzYClcclxufVxyXG5cclxuY29uc3QgYXBpQ2FsbCA9IGFzeW5jIDxUPihcclxuICAgIHBhdGg6IHN0cmluZyxcclxuICAgIHJlcXVlc3RJbml0PzogUmVxdWVzdEluaXQsXHJcbik6IFByb21pc2U8VD4gPT4ge1xyXG4gICAgY29uc3QgcmVzID0gYXdhaXQgZmV0Y2goQVBJX1VSTCArIHBhdGgsIHJlcXVlc3RJbml0KTtcclxuICAgIGlmICghcmVzLm9rKSB7XHJcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdBbiBlcnJvciBvY2N1cmVkIHdoaWxlIGZldGNoaW5nOiAnICsgcmVzLnN0YXR1cyk7XHJcbiAgICB9XHJcbiAgICByZXR1cm4gcmVzLmpzb24oKSBhcyBQcm9taXNlPFQ+O1xyXG59O1xyXG5cclxuY29uc3QgcHV0UGxheWVyUHJvZmlsZSA9IChwbGF5ZXI6IElVc2Vyc1Njb3Jlcyk6IFByb21pc2U8SVVzZXJzU2NvcmVzPiA9PiB7XHJcbiAgICBsZXQgbWV0aG9kOiBzdHJpbmc7XHJcbiAgICBsZXQgcm91dGU6IHN0cmluZztcclxuXHJcbiAgICBpZiAocGxheWVyLmlkICE9PSAwKSB7XHJcbiAgICAgICAgbWV0aG9kID0gJ1BVVCc7XHJcbiAgICAgICAgcm91dGUgPSAnL3VzZXJzJ1xyXG4gICAgfVxyXG5cclxuICAgIHJldHVybiBhcGlDYWxsPElVc2Vyc1Njb3Jlcz4ocm91dGUse1xyXG4gICAgICAgIG1ldGhvZCxcclxuICAgICAgICBib2R5OkpTT04uc3RyaW5naWZ5KHBsYXllciksXHJcbiAgICAgICAgaGVhZGVyczp7XHJcbiAgICAgICAgICAgICdDb250ZW50LVR5cGUnOidhcHBsaWNhdGlvbi9qc29uJyxcclxuICAgICAgICB9XHJcbiAgICB9KTtcclxufVxyXG5cclxuZXhwb3J0IHsgZmV0Y2hGcm9tQXBpJCwgZmV0Y2hQbGF5ZXJQcm9maWxlJCwgZmV0Y2hIaWdoU2NvcmUkLCBmZXRjaFNwcml0ZSQscHV0UGxheWVyUHJvZmlsZSB9IiwiaW1wb3J0IHsgT2JzZXJ2YWJsZSwgZnJvbSwgZnJvbUV2ZW50LCBtYXAsIG1lcmdlTWFwIH0gZnJvbSBcInJ4anNcIjtcclxuaW1wb3J0IHsgZmV0Y2hTcHJpdGUkIH0gZnJvbSBcIi4vYXBpU2VydmljZXNcIjtcclxuZXhwb3J0IGNvbnN0IGxvYWRCYWNrZ3JvdW5kSW1hZ2UkID0gKCk6IE9ic2VydmFibGU8SFRNTEltYWdlRWxlbWVudD4gPT4ge1xyXG4gICAgcmV0dXJuIGZyb20oZmV0Y2hTcHJpdGUkKCkpLnBpcGUoXHJcbiAgICAgICAgbWVyZ2VNYXAoKHNwcml0ZXMpID0+IHtcclxuICAgICAgICAgICAgY29uc3QgYmFja2dyb3VuZFBhdGggPSBzcHJpdGVzLnBhdGggKyBzcHJpdGVzLmJvYXJkO1xyXG4gICAgICAgICAgICBjb25zdCBiYWNrZ3JvdW5kSW1hZ2UgPSBuZXcgSW1hZ2UoKTtcclxuICAgICAgICAgICAgYmFja2dyb3VuZEltYWdlLnNyYyA9IGJhY2tncm91bmRQYXRoO1xyXG4gICAgICAgICAgICByZXR1cm4gZnJvbUV2ZW50KGJhY2tncm91bmRJbWFnZSwgJ2xvYWQnKS5waXBlKFxyXG4gICAgICAgICAgICAgICAgbWFwKChlKSA9PiB7XHJcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGUudGFyZ2V0IGFzIEhUTUxJbWFnZUVsZW1lbnRcclxuICAgICAgICAgICAgICAgIH0pXHJcbiAgICAgICAgICAgIClcclxuICAgICAgICB9KVxyXG5cclxuICAgIClcclxufVxyXG5cclxuXHJcbmV4cG9ydCBjb25zdCBsb2FkU2hhcGVTcHJpdGVzJCA9ICgpOiBPYnNlcnZhYmxlPHt0eXBlOnN0cmluZyxpbWc6SFRNTEltYWdlRWxlbWVudH0+ID0+IHtcclxuICAgIHJldHVybiBmcm9tKGZldGNoU3ByaXRlJCgpKS5waXBlKFxyXG4gICAgICAgIG1lcmdlTWFwKChzcHJpdGVzKSA9PiB7XHJcbiAgICAgICAgICAgIGNvbnN0IHNoYXBlUGF0aHM9c3ByaXRlcy5zaGFwZXMubWFwKHNoYXBlPT4gc3ByaXRlcy5wYXRoK3NoYXBlLmltYWdlKTtcclxuICAgICAgICAgICAgbGV0IHNoYXBlSW1hZ2VzOkhUTUxJbWFnZUVsZW1lbnRbXT1bXTtcclxuICAgICAgICAgICAgc2hhcGVQYXRocy5mb3JFYWNoKChwYXRoLGluZGV4KT0+e1xyXG4gICAgICAgICAgICAgICAgY29uc3QgaW1nMT1uZXcgSW1hZ2UoKTtcclxuICAgICAgICAgICAgICAgIGltZzEuc3JjPXBhdGhcclxuICAgICAgICAgICAgICAgIHNoYXBlSW1hZ2VzLnB1c2goaW1nMSk7XHJcbiAgICAgICAgICAgIH0pXHJcbiAgICAgICAgICAgIHJldHVybiBmcm9tRXZlbnQoc2hhcGVJbWFnZXMsJ2xvYWQnKS5waXBlKFxyXG4gICAgICAgICAgICAgICAgbWFwKChlLGluZGV4KT0+e1xyXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiB7dHlwZTpzcHJpdGVzLnNoYXBlc1tpbmRleF0uaW1hZ2UucmVwbGFjZShcIi5wbmdcIixcIlwiKSxpbWc6IGUudGFyZ2V0IGFzIEhUTUxJbWFnZUVsZW1lbnR9XHJcbiAgICAgICAgICAgICAgICB9KVxyXG4gICAgICAgICAgICApXHJcbiAgICAgICAgfSlcclxuICAgIClcclxufSIsImltcG9ydCB7IE9ic2VydmFibGUsIGJ1ZmZlciwgZXhwYW5kLCBmaWx0ZXIsIGZyb21FdmVudCwgbWFwLCBvZiwgd2l0aExhdGVzdEZyb20gfSBmcm9tIFwicnhqc1wiXHJcbmltcG9ydCB7IElGcmFtZURhdGEgfSBmcm9tIFwiLi4vaW50ZXJmYWNlcy9JRnJhbWVEYXRhXCJcclxuaW1wb3J0IHsgTUFYSU1VTV9ERUxUQV9USU1FIH0gZnJvbSBcIi4uL2NvbmZpZ1wiO1xyXG5pbXBvcnQgeyBJS2V5c0Rvd24gfSBmcm9tIFwiLi4vaW50ZXJmYWNlcy9JS2V5c0Rvd25cIjtcclxuXHJcblxyXG5cclxuZXhwb3J0IGNvbnN0IGluaXRpYWxpemVNYWluTG9vcD0oKTpPYnNlcnZhYmxlPFtudW1iZXIsSUtleXNEb3duXT49PntcclxuICAgIGNvbnN0IGZyYW1lJD1jcmVhdGVNYWluTG9vcCgpO1xyXG4gICAgY29uc3QgYnVmZmVyZWRLZXlzRG93biQ9Z2V0QnVmZmVyZWRLZXlzRG93bihmcmFtZSQpO1xyXG4gICAgcmV0dXJuIGZyYW1lJC5waXBlKHdpdGhMYXRlc3RGcm9tKGJ1ZmZlcmVkS2V5c0Rvd24kKSk7XHJcbn1cclxuXHJcbmNvbnN0IGNyZWF0ZU1haW5Mb29wID0gKCkgPT4ge1xyXG4gICAgY29uc3QgY2FsdWNhbHRlRGVsdGEgPSAocHJldkZyYW1lOiBJRnJhbWVEYXRhKTpPYnNlcnZhYmxlPElGcmFtZURhdGE+ID0+IHtcclxuICAgICAgICByZXR1cm4gbmV3IE9ic2VydmFibGU8SUZyYW1lRGF0YT4oKG9ic2VydmVyKSA9PiB7XHJcbiAgICAgICAgICAgIHdpbmRvdy5yZXF1ZXN0QW5pbWF0aW9uRnJhbWUoKGN1cnJUaW1lU3RhbXApID0+IHtcclxuICAgICAgICAgICAgICAgIGNvbnN0IGRlbHRhVGltZU1zID0gcHJldkZyYW1lID8gY3VyclRpbWVTdGFtcCAtIHByZXZGcmFtZS50aW1lU3RhbXAgOiAwO1xyXG5cclxuICAgICAgICAgICAgICAgIGNvbnN0IE1TX0lOX1NFQ09ORCA9IDEwMDA7XHJcbiAgICAgICAgICAgICAgICBjb25zdCBkZWx0YVRpbWUgPSBkZWx0YVRpbWVNcyAvIE1TX0lOX1NFQ09ORDtcclxuXHJcbiAgICAgICAgICAgICAgICBvYnNlcnZlci5uZXh0KHtcclxuICAgICAgICAgICAgICAgICAgICB0aW1lU3RhbXA6IGN1cnJUaW1lU3RhbXAsXHJcbiAgICAgICAgICAgICAgICAgICAgZGVsdGFUaW1lLFxyXG4gICAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgIH0pO1xyXG4gICAgICAgIH0pO1xyXG4gICAgfVxyXG5cclxuICAgIGNvbnN0IGZyYW1lJD1vZih1bmRlZmluZWQpLnBpcGUoXHJcbiAgICAgICAgZXhwYW5kKCh2YWwpPT5jYWx1Y2FsdGVEZWx0YSh2YWwpKSxcclxuICAgICAgICBmaWx0ZXIoKGZyYW1lKT0+ZnJhbWUhPT11bmRlZmluZWQpLFxyXG4gICAgICAgIG1hcCgoZnJhbWU6SUZyYW1lRGF0YSk9PntcclxuICAgICAgICAgICAgcmV0dXJuIE1hdGgubWluKGZyYW1lLmRlbHRhVGltZSxNQVhJTVVNX0RFTFRBX1RJTUUpXHJcbiAgICAgICAgfSksXHJcbiAgICApO1xyXG4gICAgcmV0dXJuIGZyYW1lJDtcclxufVxyXG5cclxuXHJcbmNvbnN0IGdldEJ1ZmZlcmVkS2V5c0Rvd24gPSAoZnJhbWVzJDogT2JzZXJ2YWJsZTxudW1iZXI+KSA9PiB7XHJcbiAgICBjb25zdCBrZXlzRG93biQgPSBmcm9tRXZlbnQoZG9jdW1lbnQsICdrZXlkb3duJykucGlwZShcclxuICAgICAgbWFwKChldmVudDogS2V5Ym9hcmRFdmVudCkgPT4ge1xyXG4gICAgICAgIHJldHVybiB7IGNvZGU6IGV2ZW50LmNvZGUsIGtleTogZXZlbnQua2V5IH07XHJcbiAgICAgIH0pLFxyXG4gICAgKTtcclxuICBcclxuICAgIGNvbnN0IGJ1ZmZlcmVkS2V5c0Rvd24kID0ga2V5c0Rvd24kLnBpcGUoXHJcbiAgICAgIGJ1ZmZlcihmcmFtZXMkKSxcclxuICAgICAgbWFwKChrZXlzRG93bikgPT4ge1xyXG4gICAgICAgIHJldHVybiBrZXlzRG93bi5yZWR1Y2UoXHJcbiAgICAgICAgICAoYWNjOiBJS2V5c0Rvd24sIGN1cnJLZXkpID0+IHtcclxuICAgICAgICAgICAgYWNjLmtleXMucHVzaChjdXJyS2V5LmtleSk7XHJcbiAgICAgICAgICAgIGFjY1tjdXJyS2V5LmNvZGVdID0gdHJ1ZTtcclxuICAgICAgICAgICAgcmV0dXJuIGFjYztcclxuICAgICAgICAgIH0sXHJcbiAgICAgICAgICB7IGtleXM6IFtdIH0sXHJcbiAgICAgICAgKTtcclxuICAgICAgfSksXHJcbiAgICApO1xyXG4gIFxyXG4gICAgcmV0dXJuIGJ1ZmZlcmVkS2V5c0Rvd24kO1xyXG4gIH07XHJcbiAgIiwiaW1wb3J0IHsgRk9OVF9DT0xPUiwgRk9OVF9TSEFET1dfQ09MT1IsIEZPTlRfU0hBRE9XX1NJWkUgfSBmcm9tIFwiLi4vY29uZmlnXCI7XHJcbmltcG9ydCB7IElSZWN0YW5nbGUgfSBmcm9tIFwiLi4vaW50ZXJmYWNlcy9JUmVjdGFuZ2xlXCI7XHJcblxyXG5jb25zdCBmaWxsUmVjdCA9IChjdHg6IENhbnZhc1JlbmRlcmluZ0NvbnRleHQyRCwgcmVjdDogSVJlY3RhbmdsZSkgPT4ge1xyXG4gICAgY3R4LmZpbGxSZWN0KHJlY3QueCwgcmVjdC55LCByZWN0LndpZHRoLCByZWN0LmhlaWdodCk7XHJcbn1cclxuXHJcbmNvbnN0IGRyYXdJbWFnZSA9IChcclxuICAgIGN0eDogQ2FudmFzUmVuZGVyaW5nQ29udGV4dDJELFxyXG4gICAgaW1nOiBIVE1MSW1hZ2VFbGVtZW50LFxyXG4gICAgcmVjdDogSVJlY3RhbmdsZVxyXG4pID0+IHtcclxuICAgIGN0eC5kcmF3SW1hZ2UoaW1nLCByZWN0LngsIHJlY3QueSwgcmVjdC53aWR0aCwgcmVjdC5oZWlnaHQpO1xyXG59XHJcblxyXG5jb25zdCBkcmF3SW1hZ2VSZWdpb249KFxyXG4gICAgY3R4OkNhbnZhc1JlbmRlcmluZ0NvbnRleHQyRCxcclxuICAgIGltZzpIVE1MSW1hZ2VFbGVtZW50LFxyXG4gICAgdGFyZ2V0UmVjdDpJUmVjdGFuZ2xlLFxyXG4gICAgc291cmNlUmVjdDpJUmVjdGFuZ2xlXHJcbik9PntcclxuICAgIGN0eC5kcmF3SW1hZ2UoXHJcbiAgICAgICAgaW1nLHNvdXJjZVJlY3QueCxcclxuICAgICAgICBzb3VyY2VSZWN0LnksXHJcbiAgICAgICAgc291cmNlUmVjdC53aWR0aCxcclxuICAgICAgICBzb3VyY2VSZWN0LmhlaWdodCxcclxuICAgICAgICB0YXJnZXRSZWN0LngsXHJcbiAgICAgICAgdGFyZ2V0UmVjdC55LFxyXG4gICAgICAgIHRhcmdldFJlY3Qud2lkdGgsXHJcbiAgICAgICAgdGFyZ2V0UmVjdC5oZWlnaHRcclxuICAgICk7XHJcbn1cclxuXHJcbmNvbnN0IGFwcGx5Rm9udCA9IChjdHg6IENhbnZhc1JlbmRlcmluZ0NvbnRleHQyRCwgZm9udDogc3RyaW5nKSA9PiB7XHJcbiAgICBjdHguZm9udCA9IGZvbnQ7XHJcbiAgICBjdHguZmlsbFN0eWxlID0gRk9OVF9DT0xPUjtcclxuICAgIGN0eC5zaGFkb3dDb2xvciA9IEZPTlRfU0hBRE9XX0NPTE9SO1xyXG4gICAgY3R4LnNoYWRvd09mZnNldFggPSBGT05UX1NIQURPV19TSVpFO1xyXG4gICAgY3R4LnNoYWRvd09mZnNldFkgPSBGT05UX1NIQURPV19TSVpFO1xyXG4gIH07XHJcbiAgXHJcbiAgY29uc3QgY2xlYXJGb250ID0gKGN0eDogQ2FudmFzUmVuZGVyaW5nQ29udGV4dDJEKSA9PiB7XHJcbiAgICBjdHguc2hhZG93Q29sb3IgPSB1bmRlZmluZWQ7XHJcbiAgICBjdHguc2hhZG93T2Zmc2V0WCA9IDA7XHJcbiAgICBjdHguc2hhZG93T2Zmc2V0WSA9IDA7XHJcbiAgfTtcclxuXHJcbmNvbnN0IGRyYXdUZXh0ID0gKFxyXG4gICAgY3R4OiBDYW52YXNSZW5kZXJpbmdDb250ZXh0MkQsXHJcbiAgICB0ZXh0OiBzdHJpbmcsXHJcbiAgICBmb250OiBzdHJpbmcsXHJcbiAgICB4OiBudW1iZXIsXHJcbiAgICB5OiBudW1iZXIsXHJcbiAgKSA9PiB7XHJcbiAgICBhcHBseUZvbnQoY3R4LCBmb250KTtcclxuICAgIGN0eC5maWxsVGV4dCh0ZXh0LCB4LCB5KTtcclxuICAgIGNsZWFyRm9udChjdHgpO1xyXG4gIH07XHJcbiAgXHJcbmNvbnN0IGRyYXdDZW50ZXJlZFRleHQgPSAoXHJcbiAgICBjdHg6IENhbnZhc1JlbmRlcmluZ0NvbnRleHQyRCxcclxuICAgIHRleHQ6IHN0cmluZyxcclxuICAgIGZvbnQ6IHN0cmluZyxcclxuICAgIGNlbnRlclg6IG51bWJlcixcclxuICAgIHk6IG51bWJlcixcclxuICApID0+IHtcclxuICAgIGFwcGx5Rm9udChjdHgsIGZvbnQpO1xyXG4gICAgY3R4LmZpbGxUZXh0KHRleHQsIGNlbnRlclggLSBjdHgubWVhc3VyZVRleHQodGV4dCkud2lkdGggLyAyLCB5KTtcclxuICAgIGNsZWFyRm9udChjdHgpO1xyXG4gIH07XHJcbiAgXHJcbiAgZXhwb3J0IHsgZmlsbFJlY3QsIGRyYXdJbWFnZSwgZHJhd0ltYWdlUmVnaW9uLCBkcmF3VGV4dCwgZHJhd0NlbnRlcmVkVGV4dCB9O1xyXG4gICIsIi8vIFRoZSBtb2R1bGUgY2FjaGVcbnZhciBfX3dlYnBhY2tfbW9kdWxlX2NhY2hlX18gPSB7fTtcblxuLy8gVGhlIHJlcXVpcmUgZnVuY3Rpb25cbmZ1bmN0aW9uIF9fd2VicGFja19yZXF1aXJlX18obW9kdWxlSWQpIHtcblx0Ly8gQ2hlY2sgaWYgbW9kdWxlIGlzIGluIGNhY2hlXG5cdHZhciBjYWNoZWRNb2R1bGUgPSBfX3dlYnBhY2tfbW9kdWxlX2NhY2hlX19bbW9kdWxlSWRdO1xuXHRpZiAoY2FjaGVkTW9kdWxlICE9PSB1bmRlZmluZWQpIHtcblx0XHRyZXR1cm4gY2FjaGVkTW9kdWxlLmV4cG9ydHM7XG5cdH1cblx0Ly8gQ3JlYXRlIGEgbmV3IG1vZHVsZSAoYW5kIHB1dCBpdCBpbnRvIHRoZSBjYWNoZSlcblx0dmFyIG1vZHVsZSA9IF9fd2VicGFja19tb2R1bGVfY2FjaGVfX1ttb2R1bGVJZF0gPSB7XG5cdFx0Ly8gbm8gbW9kdWxlLmlkIG5lZWRlZFxuXHRcdC8vIG5vIG1vZHVsZS5sb2FkZWQgbmVlZGVkXG5cdFx0ZXhwb3J0czoge31cblx0fTtcblxuXHQvLyBFeGVjdXRlIHRoZSBtb2R1bGUgZnVuY3Rpb25cblx0X193ZWJwYWNrX21vZHVsZXNfX1ttb2R1bGVJZF0uY2FsbChtb2R1bGUuZXhwb3J0cywgbW9kdWxlLCBtb2R1bGUuZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXyk7XG5cblx0Ly8gUmV0dXJuIHRoZSBleHBvcnRzIG9mIHRoZSBtb2R1bGVcblx0cmV0dXJuIG1vZHVsZS5leHBvcnRzO1xufVxuXG4iLCJpbXBvcnQgeyBPYnNlcnZhYmxlLCBjYXRjaEVycm9yLCBjb25jYXRNYXAsIGZyb21FdmVudCwgbWFwLCBzd2l0Y2hNYXAsIHRha2UsIHRhcCwgdGltZXIsIHRvQXJyYXkgfSBmcm9tIFwicnhqc1wiO1xyXG5pbXBvcnQgeyBHYW1lIH0gZnJvbSBcIi4vZ2FtZVwiO1xyXG5pbXBvcnQgeyBmZXRjaFNwcml0ZSQgfSBmcm9tIFwiLi9zZXJ2aWNlcy9hcGlTZXJ2aWNlc1wiXHJcbmltcG9ydCB7IGxvYWRTaGFwZVNwcml0ZXMkIH0gZnJvbSBcIi4vc2VydmljZXMvaW1hZ2VMb2FkZXJcIjtcclxuXHJcbmZyb21FdmVudCh3aW5kb3csIFwibG9hZFwiKS5zdWJzY3JpYmUoKCkgPT4ge1xyXG4gICAgY29uc3QgY2FudmFzID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcImNhbnZhc1wiKTtcclxuICAgIGNhbnZhcy5pZCA9IFwiZ2FtZS1jb250YWluZXJcIlxyXG4gICAgY2FudmFzLndpZHRoID0gd2luZG93LmlubmVyV2lkdGg7XHJcbiAgICBjYW52YXMuaGVpZ2h0ID0gd2luZG93LmlubmVySGVpZ2h0O1xyXG4gICAgZG9jdW1lbnQuYm9keS5hcHBlbmRDaGlsZChjYW52YXMpXHJcblxyXG4gICAgY29uc3QgZ2FtZSA9IG5ldyBHYW1lKGNhbnZhcyk7XHJcbiAgICBnYW1lLmluaXQoKTtcclxuXHJcblxyXG59KTtcclxuXHJcblxyXG4vLyBjb25zb2xlLmxvZyhcImFhYVwiKVxyXG4vLyBzaGFwZVNwYXduZXIoKS5waXBlKFxyXG4vLyAgICAgc3dpdGNoTWFwKG51bSA9PiBsb2FkU2hhcGVTcHJpdGVzJCgpLnBpcGUoXHJcbi8vICAgICAgICAgdG9BcnJheSgpLFxyXG4vLyAgICAgICAgIG1hcChzaGFwZUltYWdlc0FycmF5ID0+IFtzaGFwZUltYWdlc0FycmF5LCBudW1dKVxyXG4vLyAgICAgKSksXHJcbi8vICkuc3Vic2NyaWJlKChhKT0+XHJcbi8vICAgICBjb25zb2xlLmxvZyhcImNjY1wiKVxyXG4vLyApXHJcblxyXG4vLyBjb25zb2xlLmxvZyhcImJiYlwiKVxyXG5cclxuLy8gY29uc29sZS5sb2coJ2NjY2NjY2NjY2NjJylcclxuLy8gc2hhcGVTcGF3bmVyKCkucGlwZShcclxuLy8gICAgIHN3aXRjaE1hcChudW0gPT4gbG9hZFNoYXBlU3ByaXRlcyQoKS5waXBlKFxyXG4vLyAgICAgICB0b0FycmF5KCksIC8vIENvbGxlY3QgYWxsIGVtaXR0ZWQgdmFsdWVzIGludG8gYW4gYXJyYXlcclxuLy8gICAgICAgbWFwKHNoYXBlSW1hZ2VzQXJyYXkgPT4ge3JldHVybltzaGFwZUltYWdlc0FycmF5LCBudW1dfSksXHJcbi8vICAgICAgIGNhdGNoRXJyb3IoZXJyb3IgPT4ge1xyXG4vLyAgICAgICAgIGNvbnNvbGUuZXJyb3IoJ0Vycm9yOicsIGVycm9yKTtcclxuLy8gICAgICAgICByZXR1cm4gbnVsbDsgLy8gUmV0dXJuIGFuIGVtcHR5IG9ic2VydmFibGUgdG8gaGFuZGxlIHRoZSBlcnJvclxyXG4vLyAgICAgICB9KVxyXG4vLyAgICAgICApKSxcclxuLy8gICAgIG1hcCgoW3NoYXBlSW1hZ2VzQXJyYXksIG51bV0pID0+IHtcclxuLy8gICAgICAgaWYgKG51bSA9PT0gMCkge1xyXG4vLyAgICAgICAgIGNvbnNvbGUubG9nKCdhYWFhYScpXHJcbi8vICAgICAgIH1cclxuLy8gICAgICAgLy8gSGFuZGxlIG90aGVyIGNhc2VzIG9yIHJldHVybiB2YWx1ZVxyXG4vLyAgICAgfSlcclxuLy8gICApLnN1YnNjcmliZShzaGFwZSA9PiB7XHJcbi8vICAgICBjb25zb2xlLmxvZyhcIndvdFwiKVxyXG4vLyAgIH0pO1xyXG5cclxuLy8gY29uc29sZS5sb2coJ2RkZGRkJylcclxuXHJcblxyXG5sZXQgc3ByaXRlczphbnkgPSBbXTtcclxuXHJcbmxvYWRTaGFwZVNwcml0ZXMkKCkuXHJcbnBpcGUoXHJcblxyXG4pXHJcbi5zdWJzY3JpYmUoXHJcbiAgICAoeCk9PntcclxuICAgICAgICBjb25zb2xlLmxvZyh4KTtcclxuICAgICAgICBzcHJpdGVzLnB1c2goeCk7XHJcbiAgICB9XHJcbik7XHJcblxyXG5jb25zb2xlLmxvZyhzcHJpdGVzKTsiXSwibmFtZXMiOlsiX19jcmVhdGVCaW5kaW5nIiwidGhpcyIsIk9iamVjdCIsImNyZWF0ZSIsIm8iLCJtIiwiayIsImsyIiwidW5kZWZpbmVkIiwiZGVmaW5lUHJvcGVydHkiLCJlbnVtZXJhYmxlIiwiZ2V0IiwiX19leHBvcnRTdGFyIiwiZXhwb3J0cyIsInAiLCJwcm90b3R5cGUiLCJoYXNPd25Qcm9wZXJ0eSIsImNhbGwiLCJ2YWx1ZSIsImludGVydmFsIiwiaWlmIiwiZ2VuZXJhdGUiLCJmcm9tRXZlbnRQYXR0ZXJuIiwiZnJvbUV2ZW50IiwiZnJvbSIsImZvcmtKb2luIiwiZW1wdHkiLCJkZWZlciIsImNvbm5lY3RhYmxlIiwiY29uY2F0IiwiY29tYmluZUxhdGVzdCIsImJpbmROb2RlQ2FsbGJhY2siLCJiaW5kQ2FsbGJhY2siLCJVbnN1YnNjcmlwdGlvbkVycm9yIiwiVGltZW91dEVycm9yIiwiU2VxdWVuY2VFcnJvciIsIk9iamVjdFVuc3Vic2NyaWJlZEVycm9yIiwiTm90Rm91bmRFcnJvciIsIkVtcHR5RXJyb3IiLCJBcmd1bWVudE91dE9mUmFuZ2VFcnJvciIsImZpcnN0VmFsdWVGcm9tIiwibGFzdFZhbHVlRnJvbSIsImlzT2JzZXJ2YWJsZSIsImlkZW50aXR5Iiwibm9vcCIsInBpcGUiLCJOb3RpZmljYXRpb25LaW5kIiwiTm90aWZpY2F0aW9uIiwiU3Vic2NyaWJlciIsIlN1YnNjcmlwdGlvbiIsIlNjaGVkdWxlciIsIlZpcnR1YWxBY3Rpb24iLCJWaXJ0dWFsVGltZVNjaGVkdWxlciIsImFuaW1hdGlvbkZyYW1lU2NoZWR1bGVyIiwiYW5pbWF0aW9uRnJhbWUiLCJxdWV1ZVNjaGVkdWxlciIsInF1ZXVlIiwiYXN5bmNTY2hlZHVsZXIiLCJhc3luYyIsImFzYXBTY2hlZHVsZXIiLCJhc2FwIiwiQXN5bmNTdWJqZWN0IiwiUmVwbGF5U3ViamVjdCIsIkJlaGF2aW9yU3ViamVjdCIsIlN1YmplY3QiLCJhbmltYXRpb25GcmFtZXMiLCJvYnNlcnZhYmxlIiwiQ29ubmVjdGFibGVPYnNlcnZhYmxlIiwiT2JzZXJ2YWJsZSIsImZpbHRlciIsImV4cGFuZCIsImV4aGF1c3RNYXAiLCJleGhhdXN0QWxsIiwiZXhoYXVzdCIsImV2ZXJ5IiwiZW5kV2l0aCIsImVsZW1lbnRBdCIsImRpc3RpbmN0VW50aWxLZXlDaGFuZ2VkIiwiZGlzdGluY3RVbnRpbENoYW5nZWQiLCJkaXN0aW5jdCIsImRlbWF0ZXJpYWxpemUiLCJkZWxheVdoZW4iLCJkZWxheSIsImRlZmF1bHRJZkVtcHR5IiwiZGVib3VuY2VUaW1lIiwiZGVib3VuY2UiLCJjb3VudCIsImNvbm5lY3QiLCJjb25jYXRXaXRoIiwiY29uY2F0TWFwVG8iLCJjb25jYXRNYXAiLCJjb25jYXRBbGwiLCJjb21iaW5lTGF0ZXN0V2l0aCIsImNvbWJpbmVMYXRlc3RBbGwiLCJjb21iaW5lQWxsIiwiY2F0Y2hFcnJvciIsImJ1ZmZlcldoZW4iLCJidWZmZXJUb2dnbGUiLCJidWZmZXJUaW1lIiwiYnVmZmVyQ291bnQiLCJidWZmZXIiLCJhdWRpdFRpbWUiLCJhdWRpdCIsImNvbmZpZyIsIk5FVkVSIiwiRU1QVFkiLCJzY2hlZHVsZWQiLCJ6aXAiLCJ1c2luZyIsInRpbWVyIiwidGhyb3dFcnJvciIsInJhbmdlIiwicmFjZSIsInBhcnRpdGlvbiIsInBhaXJzIiwib25FcnJvclJlc3VtZU5leHQiLCJvZiIsIm5ldmVyIiwibWVyZ2UiLCJzd2l0Y2hNYXAiLCJzd2l0Y2hBbGwiLCJzdWJzY3JpYmVPbiIsInN0YXJ0V2l0aCIsInNraXBXaGlsZSIsInNraXBVbnRpbCIsInNraXBMYXN0Iiwic2tpcCIsInNpbmdsZSIsInNoYXJlUmVwbGF5Iiwic2hhcmUiLCJzZXF1ZW5jZUVxdWFsIiwic2NhbiIsInNhbXBsZVRpbWUiLCJzYW1wbGUiLCJyZWZDb3VudCIsInJldHJ5V2hlbiIsInJldHJ5IiwicmVwZWF0V2hlbiIsInJlcGVhdCIsInJlZHVjZSIsInJhY2VXaXRoIiwicHVibGlzaFJlcGxheSIsInB1Ymxpc2hMYXN0IiwicHVibGlzaEJlaGF2aW9yIiwicHVibGlzaCIsInBsdWNrIiwicGFpcndpc2UiLCJvbkVycm9yUmVzdW1lTmV4dFdpdGgiLCJvYnNlcnZlT24iLCJtdWx0aWNhc3QiLCJtaW4iLCJtZXJnZVdpdGgiLCJtZXJnZVNjYW4iLCJtZXJnZU1hcFRvIiwibWVyZ2VNYXAiLCJmbGF0TWFwIiwibWVyZ2VBbGwiLCJtYXgiLCJtYXRlcmlhbGl6ZSIsIm1hcFRvIiwibWFwIiwibGFzdCIsImlzRW1wdHkiLCJpZ25vcmVFbGVtZW50cyIsImdyb3VwQnkiLCJmaXJzdCIsImZpbmRJbmRleCIsImZpbmQiLCJmaW5hbGl6ZSIsInppcFdpdGgiLCJ6aXBBbGwiLCJ3aXRoTGF0ZXN0RnJvbSIsIndpbmRvd1doZW4iLCJ3aW5kb3dUb2dnbGUiLCJ3aW5kb3dUaW1lIiwid2luZG93Q291bnQiLCJ3aW5kb3ciLCJ0b0FycmF5IiwidGltZXN0YW1wIiwidGltZW91dFdpdGgiLCJ0aW1lb3V0IiwidGltZUludGVydmFsIiwidGhyb3dJZkVtcHR5IiwidGhyb3R0bGVUaW1lIiwidGhyb3R0bGUiLCJ0YXAiLCJ0YWtlV2hpbGUiLCJ0YWtlVW50aWwiLCJ0YWtlTGFzdCIsInRha2UiLCJzd2l0Y2hTY2FuIiwic3dpdGNoTWFwVG8iLCJPYnNlcnZhYmxlXzEiLCJDb25uZWN0YWJsZU9ic2VydmFibGVfMSIsIm9ic2VydmFibGVfMSIsImFuaW1hdGlvbkZyYW1lc18xIiwiU3ViamVjdF8xIiwiQmVoYXZpb3JTdWJqZWN0XzEiLCJSZXBsYXlTdWJqZWN0XzEiLCJBc3luY1N1YmplY3RfMSIsImFzYXBfMSIsImFzeW5jXzEiLCJxdWV1ZV8xIiwiYW5pbWF0aW9uRnJhbWVfMSIsIlZpcnR1YWxUaW1lU2NoZWR1bGVyXzEiLCJTY2hlZHVsZXJfMSIsIlN1YnNjcmlwdGlvbl8xIiwiU3Vic2NyaWJlcl8xIiwiTm90aWZpY2F0aW9uXzEiLCJwaXBlXzEiLCJub29wXzEiLCJpZGVudGl0eV8xIiwiaXNPYnNlcnZhYmxlXzEiLCJsYXN0VmFsdWVGcm9tXzEiLCJmaXJzdFZhbHVlRnJvbV8xIiwiQXJndW1lbnRPdXRPZlJhbmdlRXJyb3JfMSIsIkVtcHR5RXJyb3JfMSIsIk5vdEZvdW5kRXJyb3JfMSIsIk9iamVjdFVuc3Vic2NyaWJlZEVycm9yXzEiLCJTZXF1ZW5jZUVycm9yXzEiLCJ0aW1lb3V0XzEiLCJVbnN1YnNjcmlwdGlvbkVycm9yXzEiLCJiaW5kQ2FsbGJhY2tfMSIsImJpbmROb2RlQ2FsbGJhY2tfMSIsImNvbWJpbmVMYXRlc3RfMSIsImNvbmNhdF8xIiwiY29ubmVjdGFibGVfMSIsImRlZmVyXzEiLCJlbXB0eV8xIiwiZm9ya0pvaW5fMSIsImZyb21fMSIsImZyb21FdmVudF8xIiwiZnJvbUV2ZW50UGF0dGVybl8xIiwiZ2VuZXJhdGVfMSIsImlpZl8xIiwiaW50ZXJ2YWxfMSIsIm1lcmdlXzEiLCJuZXZlcl8xIiwib2ZfMSIsIm9uRXJyb3JSZXN1bWVOZXh0XzEiLCJwYWlyc18xIiwicGFydGl0aW9uXzEiLCJyYWNlXzEiLCJyYW5nZV8xIiwidGhyb3dFcnJvcl8xIiwidGltZXJfMSIsInVzaW5nXzEiLCJ6aXBfMSIsInNjaGVkdWxlZF8xIiwiZW1wdHlfMiIsIm5ldmVyXzIiLCJjb25maWdfMSIsImF1ZGl0XzEiLCJhdWRpdFRpbWVfMSIsImJ1ZmZlcl8xIiwiYnVmZmVyQ291bnRfMSIsImJ1ZmZlclRpbWVfMSIsImJ1ZmZlclRvZ2dsZV8xIiwiYnVmZmVyV2hlbl8xIiwiY2F0Y2hFcnJvcl8xIiwiY29tYmluZUFsbF8xIiwiY29tYmluZUxhdGVzdEFsbF8xIiwiY29tYmluZUxhdGVzdFdpdGhfMSIsImNvbmNhdEFsbF8xIiwiY29uY2F0TWFwXzEiLCJjb25jYXRNYXBUb18xIiwiY29uY2F0V2l0aF8xIiwiY29ubmVjdF8xIiwiY291bnRfMSIsImRlYm91bmNlXzEiLCJkZWJvdW5jZVRpbWVfMSIsImRlZmF1bHRJZkVtcHR5XzEiLCJkZWxheV8xIiwiZGVsYXlXaGVuXzEiLCJkZW1hdGVyaWFsaXplXzEiLCJkaXN0aW5jdF8xIiwiZGlzdGluY3RVbnRpbENoYW5nZWRfMSIsImRpc3RpbmN0VW50aWxLZXlDaGFuZ2VkXzEiLCJlbGVtZW50QXRfMSIsImVuZFdpdGhfMSIsImV2ZXJ5XzEiLCJleGhhdXN0XzEiLCJleGhhdXN0QWxsXzEiLCJleGhhdXN0TWFwXzEiLCJleHBhbmRfMSIsImZpbHRlcl8xIiwiZmluYWxpemVfMSIsImZpbmRfMSIsImZpbmRJbmRleF8xIiwiZmlyc3RfMSIsImdyb3VwQnlfMSIsImlnbm9yZUVsZW1lbnRzXzEiLCJpc0VtcHR5XzEiLCJsYXN0XzEiLCJtYXBfMSIsIm1hcFRvXzEiLCJtYXRlcmlhbGl6ZV8xIiwibWF4XzEiLCJtZXJnZUFsbF8xIiwiZmxhdE1hcF8xIiwibWVyZ2VNYXBfMSIsIm1lcmdlTWFwVG9fMSIsIm1lcmdlU2Nhbl8xIiwibWVyZ2VXaXRoXzEiLCJtaW5fMSIsIm11bHRpY2FzdF8xIiwib2JzZXJ2ZU9uXzEiLCJvbkVycm9yUmVzdW1lTmV4dFdpdGhfMSIsInBhaXJ3aXNlXzEiLCJwbHVja18xIiwicHVibGlzaF8xIiwicHVibGlzaEJlaGF2aW9yXzEiLCJwdWJsaXNoTGFzdF8xIiwicHVibGlzaFJlcGxheV8xIiwicmFjZVdpdGhfMSIsInJlZHVjZV8xIiwicmVwZWF0XzEiLCJyZXBlYXRXaGVuXzEiLCJyZXRyeV8xIiwicmV0cnlXaGVuXzEiLCJyZWZDb3VudF8xIiwic2FtcGxlXzEiLCJzYW1wbGVUaW1lXzEiLCJzY2FuXzEiLCJzZXF1ZW5jZUVxdWFsXzEiLCJzaGFyZV8xIiwic2hhcmVSZXBsYXlfMSIsInNpbmdsZV8xIiwic2tpcF8xIiwic2tpcExhc3RfMSIsInNraXBVbnRpbF8xIiwic2tpcFdoaWxlXzEiLCJzdGFydFdpdGhfMSIsInN1YnNjcmliZU9uXzEiLCJzd2l0Y2hBbGxfMSIsInN3aXRjaE1hcF8xIiwic3dpdGNoTWFwVG9fMSIsInN3aXRjaFNjYW5fMSIsInRha2VfMSIsInRha2VMYXN0XzEiLCJ0YWtlVW50aWxfMSIsInRha2VXaGlsZV8xIiwidGFwXzEiLCJ0aHJvdHRsZV8xIiwidGhyb3R0bGVUaW1lXzEiLCJ0aHJvd0lmRW1wdHlfMSIsInRpbWVJbnRlcnZhbF8xIiwidGltZW91dF8yIiwidGltZW91dFdpdGhfMSIsInRpbWVzdGFtcF8xIiwidG9BcnJheV8xIiwid2luZG93XzEiLCJ3aW5kb3dDb3VudF8xIiwid2luZG93VGltZV8xIiwid2luZG93VG9nZ2xlXzEiLCJ3aW5kb3dXaGVuXzEiLCJ3aXRoTGF0ZXN0RnJvbV8xIiwiemlwQWxsXzEiLCJ6aXBXaXRoXzEiLCJleHRlbmRTdGF0aWNzIiwiX19leHRlbmRzIiwiZCIsImIiLCJzZXRQcm90b3R5cGVPZiIsIl9fcHJvdG9fXyIsIkFycmF5IiwiVHlwZUVycm9yIiwiU3RyaW5nIiwiX18iLCJjb25zdHJ1Y3RvciIsIl9zdXBlciIsIl90aGlzIiwiYXBwbHkiLCJhcmd1bWVudHMiLCJfdmFsdWUiLCJfaGFzVmFsdWUiLCJfaXNDb21wbGV0ZSIsIl9jaGVja0ZpbmFsaXplZFN0YXR1c2VzIiwic3Vic2NyaWJlciIsIl9hIiwiaGFzRXJyb3IiLCJ0aHJvd25FcnJvciIsImlzU3RvcHBlZCIsImVycm9yIiwibmV4dCIsImNvbXBsZXRlIiwiZ2V0VmFsdWUiLCJjb25maWd1cmFibGUiLCJfc3Vic2NyaWJlIiwic3Vic2NyaXB0aW9uIiwiY2xvc2VkIiwiX3Rocm93SWZDbG9zZWQiLCJvYnNlcnZlTm90aWZpY2F0aW9uIiwiaXNGdW5jdGlvbl8xIiwia2luZCIsImhhc1ZhbHVlIiwib2JzZXJ2ZSIsIm9ic2VydmVyIiwiZG8iLCJuZXh0SGFuZGxlciIsImVycm9ySGFuZGxlciIsImNvbXBsZXRlSGFuZGxlciIsImFjY2VwdCIsIm5leHRPck9ic2VydmVyIiwiaXNGdW5jdGlvbiIsInRvT2JzZXJ2YWJsZSIsInJlc3VsdCIsImNyZWF0ZU5leHQiLCJjcmVhdGVFcnJvciIsImVyciIsImNyZWF0ZUNvbXBsZXRlIiwiY29tcGxldGVOb3RpZmljYXRpb24iLCJub3RpZmljYXRpb24iLCJfYiIsIl9jIiwiX2QiLCJjcmVhdGVOb3RpZmljYXRpb24iLCJuZXh0Tm90aWZpY2F0aW9uIiwiZXJyb3JOb3RpZmljYXRpb24iLCJDT01QTEVURV9OT1RJRklDQVRJT04iLCJlcnJvckNvbnRleHRfMSIsInN1YnNjcmliZSIsImxpZnQiLCJvcGVyYXRvciIsInNvdXJjZSIsIm9ic2VydmVyT3JOZXh0IiwiaXNPYnNlcnZlciIsImlzU3Vic2NyaXB0aW9uIiwiU2FmZVN1YnNjcmliZXIiLCJlcnJvckNvbnRleHQiLCJhZGQiLCJfdHJ5U3Vic2NyaWJlIiwic2luayIsImZvckVhY2giLCJwcm9taXNlQ3RvciIsImdldFByb21pc2VDdG9yIiwicmVzb2x2ZSIsInJlamVjdCIsInVuc3Vic2NyaWJlIiwib3BlcmF0aW9ucyIsIl9pIiwibGVuZ3RoIiwicGlwZUZyb21BcnJheSIsInRvUHJvbWlzZSIsIngiLCJQcm9taXNlIiwiZGF0ZVRpbWVzdGFtcFByb3ZpZGVyXzEiLCJfYnVmZmVyU2l6ZSIsIl93aW5kb3dUaW1lIiwiX3RpbWVzdGFtcFByb3ZpZGVyIiwiSW5maW5pdHkiLCJkYXRlVGltZXN0YW1wUHJvdmlkZXIiLCJfYnVmZmVyIiwiX2luZmluaXRlVGltZVdpbmRvdyIsIk1hdGgiLCJwdXNoIiwibm93IiwiX3RyaW1CdWZmZXIiLCJfaW5uZXJTdWJzY3JpYmUiLCJjb3B5Iiwic2xpY2UiLCJpIiwiYWRqdXN0ZWRCdWZmZXJTaXplIiwic3BsaWNlIiwic2NoZWR1bGVyQWN0aW9uQ3RvciIsInNjaGVkdWxlIiwid29yayIsInN0YXRlIiwiX192YWx1ZXMiLCJzIiwiU3ltYm9sIiwiaXRlcmF0b3IiLCJkb25lIiwiQW5vbnltb3VzU3ViamVjdCIsImFyclJlbW92ZV8xIiwiY3VycmVudE9ic2VydmVycyIsIm9ic2VydmVycyIsInN1YmplY3QiLCJlXzEiLCJlXzFfMSIsInJldHVybiIsInNoaWZ0IiwiRU1QVFlfU1VCU0NSSVBUSU9OIiwiYXJyUmVtb3ZlIiwiYXNPYnNlcnZhYmxlIiwiZGVzdGluYXRpb24iLCJFTVBUWV9PQlNFUlZFUiIsInJlcG9ydFVuaGFuZGxlZEVycm9yXzEiLCJOb3RpZmljYXRpb25GYWN0b3JpZXNfMSIsInRpbWVvdXRQcm92aWRlcl8xIiwiaGFuZGxlU3RvcHBlZE5vdGlmaWNhdGlvbiIsIl9uZXh0IiwiX2Vycm9yIiwiX2NvbXBsZXRlIiwiX2JpbmQiLCJGdW5jdGlvbiIsImJpbmQiLCJmbiIsInRoaXNBcmciLCJDb25zdW1lck9ic2VydmVyIiwicGFydGlhbE9ic2VydmVyIiwiaGFuZGxlVW5oYW5kbGVkRXJyb3IiLCJjb250ZXh0XzEiLCJ1c2VEZXByZWNhdGVkTmV4dENvbnRleHQiLCJ1c2VEZXByZWNhdGVkU3luY2hyb25vdXNFcnJvckhhbmRsaW5nIiwiY2FwdHVyZUVycm9yIiwicmVwb3J0VW5oYW5kbGVkRXJyb3IiLCJvblN0b3BwZWROb3RpZmljYXRpb24iLCJ0aW1lb3V0UHJvdmlkZXIiLCJzZXRUaW1lb3V0IiwiX19yZWFkIiwibiIsInIiLCJlIiwiYXIiLCJfX3NwcmVhZEFycmF5IiwidG8iLCJpbCIsImoiLCJpbml0aWFsVGVhcmRvd24iLCJfcGFyZW50YWdlIiwiX2ZpbmFsaXplcnMiLCJlXzIiLCJlcnJvcnMiLCJpc0FycmF5IiwiX3BhcmVudGFnZV8xIiwiX3BhcmVudGFnZV8xXzEiLCJyZW1vdmUiLCJpbml0aWFsRmluYWxpemVyIiwiX2ZpbmFsaXplcnNfMSIsIl9maW5hbGl6ZXJzXzFfMSIsImZpbmFsaXplciIsImV4ZWNGaW5hbGl6ZXIiLCJlXzJfMSIsInRlYXJkb3duIiwiX2hhc1BhcmVudCIsIl9hZGRQYXJlbnQiLCJwYXJlbnQiLCJpbmNsdWRlcyIsIl9yZW1vdmVQYXJlbnQiLCJvblVuaGFuZGxlZEVycm9yIiwiaGFzQ29uZmlnIiwiZGVmYXVsdFZhbHVlIiwiT3BlcmF0b3JTdWJzY3JpYmVyXzEiLCJsaWZ0XzEiLCJzdWJqZWN0RmFjdG9yeSIsIl9zdWJqZWN0IiwiX3JlZkNvdW50IiwiX2Nvbm5lY3Rpb24iLCJoYXNMaWZ0IiwiZ2V0U3ViamVjdCIsIl90ZWFyZG93biIsImNvbm5lY3Rpb24iLCJzdWJqZWN0XzEiLCJjcmVhdGVPcGVyYXRvclN1YnNjcmliZXIiLCJiaW5kQ2FsbGJhY2tJbnRlcm5hbHNfMSIsImNhbGxiYWNrRnVuYyIsInJlc3VsdFNlbGVjdG9yIiwic2NoZWR1bGVyIiwiYmluZENhbGxiYWNrSW50ZXJuYWxzIiwiaXNTY2hlZHVsZXJfMSIsIm1hcE9uZU9yTWFueUFyZ3NfMSIsImlzTm9kZVN0eWxlIiwiaXNTY2hlZHVsZXIiLCJhcmdzIiwibWFwT25lT3JNYW55QXJncyIsInVuaW5pdGlhbGl6ZWQiLCJzdWJzIiwiaXNBc3luY18xIiwiaXNDb21wbGV0ZV8xIiwicmVzdWx0cyIsImNvbWJpbmVMYXRlc3RJbml0IiwiYXJnc0FyZ0FycmF5T3JPYmplY3RfMSIsImFyZ3NfMSIsImNyZWF0ZU9iamVjdF8xIiwiZXhlY3V0ZVNjaGVkdWxlXzEiLCJvYnNlcnZhYmxlcyIsInZhbHVlVHJhbnNmb3JtIiwibWF5YmVTY2hlZHVsZSIsInZhbHVlcyIsImFjdGl2ZSIsInJlbWFpbmluZ0ZpcnN0VmFsdWVzIiwiX2xvb3BfMSIsImhhc0ZpcnN0VmFsdWUiLCJleGVjdXRlIiwiZXhlY3V0ZVNjaGVkdWxlIiwicG9wU2NoZWR1bGVyIiwicG9wUmVzdWx0U2VsZWN0b3IiLCJhcmdzQXJnQXJyYXlPck9iamVjdCIsImtleXMiLCJjcmVhdGVPYmplY3QiLCJERUZBVUxUX0NPTkZJRyIsImNvbm5lY3RvciIsInJlc2V0T25EaXNjb25uZWN0IiwiaW5uZXJGcm9tXzEiLCJvYnNlcnZhYmxlRmFjdG9yeSIsImlubmVyRnJvbSIsInBlcmZvcm1hbmNlVGltZXN0YW1wUHJvdmlkZXJfMSIsImFuaW1hdGlvbkZyYW1lUHJvdmlkZXJfMSIsImFuaW1hdGlvbkZyYW1lc0ZhY3RvcnkiLCJ0aW1lc3RhbXBQcm92aWRlciIsInByb3ZpZGVyIiwicGVyZm9ybWFuY2VUaW1lc3RhbXBQcm92aWRlciIsInN0YXJ0IiwiaWQiLCJydW4iLCJhbmltYXRpb25GcmFtZVByb3ZpZGVyIiwicmVxdWVzdEFuaW1hdGlvbkZyYW1lIiwiZWxhcHNlZCIsImNhbmNlbEFuaW1hdGlvbkZyYW1lIiwiREVGQVVMVF9BTklNQVRJT05fRlJBTUVTIiwiZW1wdHlTY2hlZHVsZWQiLCJzb3VyY2VzIiwicmVtYWluaW5nQ29tcGxldGlvbnMiLCJyZW1haW5pbmdFbWlzc2lvbnMiLCJzb3VyY2VJbmRleCIsImlucHV0IiwiaXNBcnJheUxpa2VfMSIsIm5vZGVFdmVudEVtaXR0ZXJNZXRob2RzIiwiZXZlbnRUYXJnZXRNZXRob2RzIiwianF1ZXJ5TWV0aG9kcyIsInRvQ29tbW9uSGFuZGxlclJlZ2lzdHJ5IiwidGFyZ2V0IiwiZXZlbnROYW1lIiwibWV0aG9kTmFtZSIsImhhbmRsZXIiLCJvcHRpb25zIiwiYWRkRXZlbnRMaXN0ZW5lciIsInJlbW92ZUV2ZW50TGlzdGVuZXIiLCJpc0V2ZW50VGFyZ2V0IiwiYWRkTGlzdGVuZXIiLCJyZW1vdmVMaXN0ZW5lciIsImlzTm9kZVN0eWxlRXZlbnRFbWl0dGVyIiwib24iLCJvZmYiLCJpc0pRdWVyeVN0eWxlRXZlbnRFbWl0dGVyIiwiaXNBcnJheUxpa2UiLCJzdWJUYXJnZXQiLCJhZGRIYW5kbGVyIiwicmVtb3ZlSGFuZGxlciIsInJldFZhbHVlIiwiZnJvbVN1YnNjcmliYWJsZSIsInN1YnNjcmliYWJsZSIsIl9fZ2VuZXJhdG9yIiwiYm9keSIsImYiLCJ5IiwidCIsImciLCJfIiwibGFiZWwiLCJzZW50IiwidHJ5cyIsIm9wcyIsInZlcmIiLCJ2Iiwib3AiLCJwb3AiLCJzdGVwIiwic2NoZWR1bGVJdGVyYWJsZV8xIiwiaW5pdGlhbFN0YXRlT3JPcHRpb25zIiwiY29uZGl0aW9uIiwiaXRlcmF0ZSIsInJlc3VsdFNlbGVjdG9yT3JTY2hlZHVsZXIiLCJpbml0aWFsU3RhdGUiLCJnZW4iLCJzY2hlZHVsZUl0ZXJhYmxlIiwidHJ1ZVJlc3VsdCIsImZhbHNlUmVzdWx0IiwiX19hd2FpdGVyIiwiX2FyZ3VtZW50cyIsIlAiLCJnZW5lcmF0b3IiLCJmdWxmaWxsZWQiLCJyZWplY3RlZCIsInRoZW4iLCJfX2FzeW5jVmFsdWVzIiwiYXN5bmNJdGVyYXRvciIsInNldHRsZSIsImZyb21SZWFkYWJsZVN0cmVhbUxpa2UiLCJmcm9tQXN5bmNJdGVyYWJsZSIsImZyb21JdGVyYWJsZSIsImZyb21Qcm9taXNlIiwiZnJvbUFycmF5TGlrZSIsImZyb21JbnRlcm9wT2JzZXJ2YWJsZSIsImlzUHJvbWlzZV8xIiwiaXNJbnRlcm9wT2JzZXJ2YWJsZV8xIiwiaXNBc3luY0l0ZXJhYmxlXzEiLCJ0aHJvd1Vub2JzZXJ2YWJsZUVycm9yXzEiLCJpc0l0ZXJhYmxlXzEiLCJpc1JlYWRhYmxlU3RyZWFtTGlrZV8xIiwib2JqIiwib2JzIiwiYXJyYXkiLCJwcm9taXNlIiwiaXRlcmFibGUiLCJpdGVyYWJsZV8xIiwiaXRlcmFibGVfMV8xIiwiYXN5bmNJdGVyYWJsZSIsImFzeW5jSXRlcmFibGVfMSIsImFzeW5jSXRlcmFibGVfMV8xIiwicHJvY2VzcyIsImNhdGNoIiwicmVhZGFibGVTdHJlYW0iLCJyZWFkYWJsZVN0cmVhbUxpa2VUb0FzeW5jR2VuZXJhdG9yIiwiaXNJbnRlcm9wT2JzZXJ2YWJsZSIsImlzUHJvbWlzZSIsImlzQXN5bmNJdGVyYWJsZSIsImlzSXRlcmFibGUiLCJpc1JlYWRhYmxlU3RyZWFtTGlrZSIsImNyZWF0ZUludmFsaWRPYnNlcnZhYmxlVHlwZUVycm9yIiwicGVyaW9kIiwiY29uY3VycmVudCIsInBvcE51bWJlciIsImFyZ3NPckFyZ0FycmF5XzEiLCJuZXh0U291cmNlcyIsImFyZ3NPckFyZ0FycmF5Iiwic3Vic2NyaWJlTmV4dCIsIm5leHRTb3VyY2UiLCJpbm5lclN1YnNjcmliZXIiLCJPcGVyYXRvclN1YnNjcmliZXIiLCJlbnRyaWVzIiwibm90XzEiLCJwcmVkaWNhdGUiLCJub3QiLCJyYWNlSW5pdCIsInN1YnNjcmlwdGlvbnMiLCJlbmQiLCJlcnJvck9yRXJyb3JGYWN0b3J5IiwiZXJyb3JGYWN0b3J5IiwiaW5pdCIsImlzRGF0ZV8xIiwiZHVlVGltZSIsImludGVydmFsT3JTY2hlZHVsZXIiLCJpbnRlcnZhbER1cmF0aW9uIiwiZHVlIiwiaXNWYWxpZERhdGUiLCJyZXNvdXJjZUZhY3RvcnkiLCJyZXNvdXJjZSIsImJ1ZmZlcnMiLCJjb21wbGV0ZWQiLCJzb21lIiwib25OZXh0Iiwib25Db21wbGV0ZSIsIm9uRXJyb3IiLCJvbkZpbmFsaXplIiwic2hvdWxkVW5zdWJzY3JpYmUiLCJjbG9zZWRfMSIsImR1cmF0aW9uU2VsZWN0b3IiLCJvcGVyYXRlIiwibGFzdFZhbHVlIiwiZHVyYXRpb25TdWJzY3JpYmVyIiwiaXNDb21wbGV0ZSIsImVuZER1cmF0aW9uIiwiY2xlYW51cER1cmF0aW9uIiwiZHVyYXRpb24iLCJjbG9zaW5nTm90aWZpZXIiLCJjdXJyZW50QnVmZmVyIiwiYnVmZmVyU2l6ZSIsInN0YXJ0QnVmZmVyRXZlcnkiLCJ0b0VtaXQiLCJidWZmZXJzXzEiLCJidWZmZXJzXzFfMSIsInRvRW1pdF8xIiwidG9FbWl0XzFfMSIsImVfMyIsImJ1ZmZlcnNfMiIsImJ1ZmZlcnNfMl8xIiwiZV8zXzEiLCJidWZmZXJUaW1lU3BhbiIsIm90aGVyQXJncyIsImJ1ZmZlckNyZWF0aW9uSW50ZXJ2YWwiLCJtYXhCdWZmZXJTaXplIiwiYnVmZmVyUmVjb3JkcyIsInJlc3RhcnRPbkVtaXQiLCJlbWl0IiwicmVjb3JkIiwic3RhcnRCdWZmZXIiLCJyZWNvcmRfMSIsImJ1ZmZlclRpbWVTdWJzY3JpYmVyIiwicmVjb3Jkc0NvcHkiLCJyZWNvcmRzQ29weV8xIiwicmVjb3Jkc0NvcHlfMV8xIiwib3BlbmluZ3MiLCJjbG9zaW5nU2VsZWN0b3IiLCJvcGVuVmFsdWUiLCJjbG9zaW5nU3Vic2NyaXB0aW9uIiwiY2xvc2luZ1N1YnNjcmliZXIiLCJvcGVuQnVmZmVyIiwic2VsZWN0b3IiLCJoYW5kbGVkUmVzdWx0IiwiaW5uZXJTdWIiLCJzeW5jVW5zdWIiLCJqb2luQWxsSW50ZXJuYWxzXzEiLCJwcm9qZWN0Iiwiam9pbkFsbEludGVybmFscyIsIm90aGVyU291cmNlcyIsImlubmVyT2JzZXJ2YWJsZSIsImZyb21TdWJzY3JpYmFibGVfMSIsInRvdGFsIiwiYWN0aXZlVGFzayIsImxhc3RUaW1lIiwiZW1pdFdoZW5JZGxlIiwidGFyZ2V0VGltZSIsImRlbGF5RHVyYXRpb25TZWxlY3RvciIsInN1YnNjcmlwdGlvbkRlbGF5IiwiaW5kZXgiLCJrZXlTZWxlY3RvciIsImZsdXNoZXMiLCJkaXN0aW5jdEtleXMiLCJTZXQiLCJrZXkiLCJoYXMiLCJjbGVhciIsImRlZmF1bHRDb21wYXJlIiwiYSIsImNvbXBhcmF0b3IiLCJwcmV2aW91c0tleSIsImN1cnJlbnRLZXkiLCJjb21wYXJlIiwiaGFzRGVmYXVsdFZhbHVlIiwiaWkiLCJvdXRlclZhbHVlIiwibWVyZ2VJbnRlcm5hbHNfMSIsIm1lcmdlSW50ZXJuYWxzIiwiY2FsbGJhY2siLCJjcmVhdGVGaW5kIiwiZWxlbWVudE9yT3B0aW9ucyIsImVsZW1lbnQiLCJncm91cHMiLCJNYXAiLCJub3RpZnkiLCJjYiIsImhhbmRsZUVycm9yIiwiY29uc3VtZXIiLCJhY3RpdmVHcm91cHMiLCJ0ZWFyZG93bkF0dGVtcHRlZCIsImdyb3VwQnlTb3VyY2VTdWJzY3JpYmVyIiwia2V5XzEiLCJncm91cF8xIiwic2V0IiwiZ3JvdXBlZCIsImdyb3VwU3ViamVjdCIsImdyb3VwU3Vic2NyaWJlciIsImR1cmF0aW9uU3Vic2NyaWJlcl8xIiwiZGVsZXRlIiwiam9pbkZuIiwiY29tcGFyZXIiLCJvbkJlZm9yZU5leHQiLCJpbm5lclN1YlNjaGVkdWxlciIsImFkZGl0aW9uYWxGaW5hbGl6ZXIiLCJjaGVja0NvbXBsZXRlIiwib3V0ZXJOZXh0IiwiZG9Jbm5lclN1YiIsImlubmVyQ29tcGxldGUiLCJpbm5lclZhbHVlIiwiYnVmZmVyZWRWYWx1ZSIsImFjY3VtdWxhdG9yIiwic2VlZCIsInN1YmplY3RPclN1YmplY3RGYWN0b3J5IiwicHJldiIsImhhc1ByZXYiLCJwcm9wZXJ0aWVzIiwiRXJyb3IiLCJjdXJyZW50UHJvcCIsImluaXRpYWxWYWx1ZSIsInNlbGVjdG9yT3JTY2hlZHVsZXIiLCJzY2FuSW50ZXJuYWxzXzEiLCJzY2FuSW50ZXJuYWxzIiwicmVmQ291bnRlciIsInNoYXJlZENvbm5lY3Rpb24iLCJjb25uIiwiY291bnRPckNvbmZpZyIsInNvdXJjZVN1YiIsInNvRmFyIiwicmVzdWJzY3JpYmUiLCJub3RpZmllciIsIm5vdGlmaWVyU3Vic2NyaWJlcl8xIiwic3Vic2NyaWJlVG9Tb3VyY2UiLCJjb21wbGV0aW9ucyQiLCJzeW5jUmVzdWIiLCJpc05vdGlmaWVyQ29tcGxldGUiLCJpc01haW5Db21wbGV0ZSIsInN1YnNjcmliZUZvclJlcGVhdFdoZW4iLCJjb25maWdPckNvdW50IiwicmVzZXRPblN1Y2Nlc3MiLCJzdWJzY3JpYmVGb3JSZXRyeSIsInJlc3ViXzEiLCJlcnJvcnMkIiwic3Vic2NyaWJlRm9yUmV0cnlXaGVuIiwiaGFzU2VlZCIsImVtaXRPbk5leHQiLCJlbWl0QmVmb3JlQ29tcGxldGUiLCJoYXNTdGF0ZSIsImNvbXBhcmVUbyIsImFTdGF0ZSIsImJTdGF0ZSIsImlzRXF1YWwiLCJjcmVhdGVTdWJzY3JpYmVyIiwic2VsZlN0YXRlIiwib3RoZXJTdGF0ZSIsInNlcXVlbmNlRXF1YWxTdWJzY3JpYmVyIiwiaGFuZGxlUmVzZXQiLCJyZXNldCIsIm9uU3Vic2NyaWJlciIsInJlc2V0T25FcnJvciIsInJlc2V0T25Db21wbGV0ZSIsInJlc2V0T25SZWZDb3VudFplcm8iLCJ3cmFwcGVyU291cmNlIiwicmVzZXRDb25uZWN0aW9uIiwiaGFzQ29tcGxldGVkIiwiaGFzRXJyb3JlZCIsImNhbmNlbFJlc2V0IiwicmVzZXRBbmRVbnN1YnNjcmliZSIsImRlc3QiLCJjb25maWdPckJ1ZmZlclNpemUiLCJzaW5nbGVWYWx1ZSIsInNlZW5WYWx1ZSIsInNraXBDb3VudCIsInJpbmciLCJzZWVuIiwidmFsdWVJbmRleCIsIm9sZFZhbHVlIiwidGFraW5nIiwic2tpcFN1YnNjcmliZXIiLCJpbm5lckluZGV4Iiwib3V0ZXJJbmRleCIsImJ1ZmZlcl8xXzEiLCJpbmNsdXNpdmUiLCJ0YXBPYnNlcnZlciIsImlzVW5zdWIiLCJsZWFkaW5nIiwidHJhaWxpbmciLCJzZW5kVmFsdWUiLCJ0aHJvdHRsZWQiLCJlbmRUaHJvdHRsaW5nIiwic2VuZCIsImNsZWFudXBUaHJvdHRsaW5nIiwic3RhcnRUaHJvdHRsZSIsImR1cmF0aW9uJCIsImRlZmF1bHRFcnJvckZhY3RvcnkiLCJUaW1lSW50ZXJ2YWwiLCJjcmVhdGVFcnJvckNsYXNzXzEiLCJ0aW1lb3V0RXJyb3JGYWN0b3J5IiwiaW5mbyIsImNyZWF0ZUVycm9yQ2xhc3MiLCJtZXNzYWdlIiwibmFtZSIsInNjaGVkdWxlckFyZyIsImVhY2giLCJ3aXRoIiwiX3dpdGgiLCJtZXRhIiwib3JpZ2luYWxTb3VyY2VTdWJzY3JpcHRpb24iLCJ0aW1lclN1YnNjcmlwdGlvbiIsInN0YXJ0VGltZXIiLCJ3aXRoT2JzZXJ2YWJsZSIsImFyclJlZHVjZXIiLCJhcnIiLCJ3aW5kb3dCb3VuZGFyaWVzIiwid2luZG93U3ViamVjdCIsIndpbmRvd1NpemUiLCJzdGFydFdpbmRvd0V2ZXJ5Iiwic3RhcnRFdmVyeSIsIndpbmRvd3MiLCJ3aW5kb3dzXzEiLCJ3aW5kb3dzXzFfMSIsImMiLCJ3aW5kb3dfMiIsIndpbmRvd1RpbWVTcGFuIiwid2luZG93Q3JlYXRpb25JbnRlcnZhbCIsIm1heFdpbmRvd1NpemUiLCJ3aW5kb3dSZWNvcmRzIiwicmVzdGFydE9uQ2xvc2UiLCJjbG9zZVdpbmRvdyIsInN0YXJ0V2luZG93IiwibG9vcCIsInRlcm1pbmF0ZSIsIndpbmRvd3NDb3B5Iiwid2luZG93c0NvcHlfMSIsIndpbmRvd3NDb3B5XzFfMSIsIm9wZW5XaW5kb3ciLCJpbnB1dHMiLCJsZW4iLCJvdGhlclZhbHVlcyIsInJlYWR5Iiwib3RoZXJJbnB1dHMiLCJzY2hlZHVsZUFycmF5Iiwic2NoZWR1bGVBc3luY0l0ZXJhYmxlIiwiaXRlcmF0b3JfMSIsInNjaGVkdWxlT2JzZXJ2YWJsZSIsInNjaGVkdWxlUHJvbWlzZSIsInNjaGVkdWxlUmVhZGFibGVTdHJlYW1MaWtlIiwic2NoZWR1bGVBc3luY0l0ZXJhYmxlXzEiLCJzY2hlZHVsZU9ic2VydmFibGVfMSIsInNjaGVkdWxlUHJvbWlzZV8xIiwic2NoZWR1bGVBcnJheV8xIiwic2NoZWR1bGVSZWFkYWJsZVN0cmVhbUxpa2VfMSIsIkFjdGlvbiIsIkFuaW1hdGlvbkZyYW1lQWN0aW9uIiwiQXN5bmNBY3Rpb25fMSIsInJlcXVlc3RBc3luY0lkIiwiYWN0aW9ucyIsIl9zY2hlZHVsZWQiLCJmbHVzaCIsInJlY3ljbGVBc3luY0lkIiwiQXN5bmNBY3Rpb24iLCJBbmltYXRpb25GcmFtZVNjaGVkdWxlciIsImFjdGlvbiIsIl9hY3RpdmUiLCJmbHVzaElkIiwiQXN5bmNTY2hlZHVsZXIiLCJBc2FwQWN0aW9uIiwiaW1tZWRpYXRlUHJvdmlkZXJfMSIsImltbWVkaWF0ZVByb3ZpZGVyIiwic2V0SW1tZWRpYXRlIiwiY2xlYXJJbW1lZGlhdGUiLCJBc2FwU2NoZWR1bGVyIiwiQWN0aW9uXzEiLCJpbnRlcnZhbFByb3ZpZGVyXzEiLCJwZW5kaW5nIiwiX2lkIiwiaW50ZXJ2YWxQcm92aWRlciIsInNldEludGVydmFsIiwiX3NjaGVkdWxlciIsImNsZWFySW50ZXJ2YWwiLCJfZXhlY3V0ZSIsIl9kZWxheSIsImVycm9yVmFsdWUiLCJlcnJvcmVkIiwiU2NoZWR1bGVyQWN0aW9uIiwiUXVldWVBY3Rpb24iLCJRdWV1ZVNjaGVkdWxlciIsIm1heEZyYW1lcyIsImZyYW1lIiwiZnJhbWVUaW1lRmFjdG9yIiwiTnVtYmVyIiwiaXNGaW5pdGUiLCJzb3J0Iiwic29ydEFjdGlvbnMiLCJBbmltYXRpb25GcmFtZUFjdGlvbl8xIiwiQW5pbWF0aW9uRnJhbWVTY2hlZHVsZXJfMSIsInJlcXVlc3QiLCJjYW5jZWwiLCJkZWxlZ2F0ZSIsImhhbmRsZSIsIkFzYXBBY3Rpb25fMSIsIkFzYXBTY2hlZHVsZXJfMSIsIkFzeW5jU2NoZWR1bGVyXzEiLCJEYXRlIiwiSW1tZWRpYXRlXzEiLCJJbW1lZGlhdGUiLCJwZXJmb3JtYW5jZSIsIlF1ZXVlQWN0aW9uXzEiLCJRdWV1ZVNjaGVkdWxlcl8xIiwiY2xlYXJUaW1lb3V0IiwiZ2V0U3ltYm9sSXRlcmF0b3IiLCJUZXN0VG9vbHMiLCJyZXNvbHZlZCIsIm5leHRIYW5kbGUiLCJhY3RpdmVIYW5kbGVzIiwiZmluZEFuZENsZWFySGFuZGxlIiwidG9TdHJpbmciLCJqb2luIiwiZ2V0UHJvdG90eXBlT2YiLCJvYmplY3RQcm90byIsImdldEtleXMiLCJpdGVtIiwiaW5kZXhPZiIsImNyZWF0ZUltcGwiLCJjdG9yRnVuYyIsImluc3RhbmNlIiwic3RhY2siLCJjb250ZXh0IiwiaXNSb290IiwiZXJyb3JUaHJvd24iLCJwYXJlbnRTdWJzY3JpcHRpb24iLCJzY2hlZHVsZVN1YnNjcmlwdGlvbiIsImlzTmFOIiwiX19hd2FpdCIsIl9fYXN5bmNHZW5lcmF0b3IiLCJxIiwicmVzdW1lIiwiZnVsZmlsbCIsInJlYWRlciIsImdldFJlYWRlciIsInJlYWQiLCJyZWxlYXNlTG9jayIsImxpZnRlZFNvdXJjZSIsImNhbGxPckFwcGx5IiwicHJlZCIsImZucyIsImN0eCIsImdhbWVTdGF0ZSIsImltYWdlIiwiX2ltYWdlIiwib25DcmVhdGUiLCJvblJlc2l6ZSIsIm5ld1dpZHRoIiwibmV3SGVpZ2h0IiwiYmdkV2lkdGgiLCJCQUNLR1JPVU5EX0FTUEVDVF9SQVRJTyIsImJnSGVpZ2h0IiwiX3JlY3QiLCJ3aWR0aCIsImhlaWdodCIsInVwZGF0ZSIsImRlbHRhIiwia2V5c0Rvd24iLCJyZW5kZXIiLCJyZWN0IiwiY2FudmFzIiwiZHJhd0ltYWdlIiwiQ29tcG9uZW50IiwiQmFja2dyb3VuZCIsInByb3BzIiwiY3VycmVudFN0YXRlIiwiR2FtZVBoYXNlIiwiRU5URVJfTkFNRSIsIl91c2VybmFtZSIsInJlbW92ZUxhc3RDaGFyIiwic3VibWl0VXNlcm5hbWUiLCJkcmF3Q2VudGVyZWRUZXh0IiwiTUVESVVNX1RFWFRfRk9OVCIsInN1YnN0cmluZyIsInBsYXllciIsInVzZXJuYW1lIiwiUkVBRFkiLCJmZXRjaFBsYXllclByb2ZpbGUkIiwicGxheWVySW5mbyIsInNjb3JlIiwiY29uc29sZSIsImxpbmVzQ2xlYXJlZCIsImVsZW1lbnRzRHJvcGVkIiwidGltZVBsYXlpbmciLCJoaWdoc2NvcmUiLCJsb2ciLCJFbnRlclVzZXJuYW1lIiwiX3Nob3duIiwiZmV0Y2hIaWdoU2NvcmUkIiwic2NvcmVzIiwiX2hpZ2hzY29yZXMiLCJkcmF3VGV4dCIsInBhZEVuZCIsInBhZFN0YXJ0IiwiSGlnaHNjb3JlcyIsInJlbmRlckRhcmtlblNjcmVlbiIsInJlbmRlckhpZ2hzY29yZSIsInJlbmRlckNvbnRyb2xzIiwicmVuZGVySW5mbyIsIlBMQVlJTkciLCJyZW5kZXJDdXJyZW50U2NvcmUiLCJHQU1FX09WRVIiLCJyZW5kZXJHYW1lT3ZlciIsIlNNQUxMX1RFWFRfRk9OVCIsInNjb3JlVGV4dCIsIkxBUkdFX1RFWFRfRk9OVCIsInJlbmRlckVudGVyVG9TdGFydCIsInRleHQiLCJpbmZvVGV4dCIsImdsb2JhbEFscGhhIiwiZmlsbFN0eWxlIiwiZmlsbFJlY3QiLCJPdmVybGF5IiwiQVBJX1VSTCIsIkJPQVJEX0JMT0NLU19XSURUSCIsIkJPQVJEX0JMT0NLU19IRUlHSHQiLCJCT0FSRF9CT1JERVJfU0hJRlRfWCIsIkJPQVJEX0JPUkRFUl9TSElGVF9ZIiwiRk9OVF9DT0xPUiIsIkZPTlRfU0hBRE9XX0NPTE9SIiwiRk9OVF9TSEFET1dfU0laRSIsIlNUQVJUSU5HX0RFTFRBX1RJTUUiLCJNSU5fSU5URVJWQUxfTVMiLCJJTklUSUFMX1RJTUVfTVMiLCJOVU1fU0hBUEVTIiwiSU5JVElBTF9HQU1FX1NUQVRFIiwiTUFYSU1VTV9ERUxUQV9USU1FIiwiR0FNRV9TUEVFRCIsImdldENvbnRleHQiLCJpbWFnZVNtb290aGluZ0VuYWJsZWQiLCJiYWNrZ3JvdW5kIiwic2hhcGVzIiwiZW50ZXJVc2VybmFtZSIsImhpZ2hzY29yZXMiLCJvdmVybGF5IiwibWFpbkxvb3AkIiwiaW5pdGlhbGl6ZU1haW5Mb29wIiwicmVzaXplIiwiaW5uZXJXaWR0aCIsImlubmVySGVpZ2h0IiwibG9hZEJhY2tncm91bmRJbWFnZSQiLCJpbWciLCJzdGFydFJvdW5kIiwidXBkYXRlTG9naWMiLCJkZWx0YVRpbWUiLCJzaGFwZSIsInNjcmVlbldpZHRoIiwic2NyZWVuSGVpZ2h0IiwiY2xlYXJSZWN0IiwiZGllIiwicHV0UGxheWVyUHJvZmlsZSIsIkdhbWUiLCJmZXRjaEZyb21BcGkkIiwicGF0aCIsInJlcXVlc3RJbml0IiwiZmV0Y2giLCJyZXMiLCJvayIsImpzb24iLCJmZXRjaFNwcml0ZSQiLCJtZXRob2QiLCJyb3V0ZSIsIkpTT04iLCJzdHJpbmdpZnkiLCJoZWFkZXJzIiwic3RhdHVzIiwic3ByaXRlcyIsImJhY2tncm91bmRQYXRoIiwiYm9hcmQiLCJiYWNrZ3JvdW5kSW1hZ2UiLCJJbWFnZSIsInNyYyIsImxvYWRTaGFwZVNwcml0ZXMkIiwic2hhcGVQYXRocyIsInNoYXBlSW1hZ2VzIiwiaW1nMSIsInR5cGUiLCJyZXBsYWNlIiwiZnJhbWUkIiwiY3JlYXRlTWFpbkxvb3AiLCJidWZmZXJlZEtleXNEb3duJCIsImdldEJ1ZmZlcmVkS2V5c0Rvd24iLCJ2YWwiLCJwcmV2RnJhbWUiLCJjdXJyVGltZVN0YW1wIiwidGltZVN0YW1wIiwiZnJhbWVzJCIsImRvY3VtZW50IiwiZXZlbnQiLCJjb2RlIiwiYWNjIiwiY3VycktleSIsImRyYXdJbWFnZVJlZ2lvbiIsInRhcmdldFJlY3QiLCJzb3VyY2VSZWN0IiwiYXBwbHlGb250IiwiZm9udCIsInNoYWRvd0NvbG9yIiwic2hhZG93T2Zmc2V0WCIsInNoYWRvd09mZnNldFkiLCJjbGVhckZvbnQiLCJmaWxsVGV4dCIsImNlbnRlclgiLCJtZWFzdXJlVGV4dCIsIl9fd2VicGFja19tb2R1bGVfY2FjaGVfXyIsIl9fd2VicGFja19yZXF1aXJlX18iLCJtb2R1bGVJZCIsImNhY2hlZE1vZHVsZSIsIm1vZHVsZSIsIl9fd2VicGFja19tb2R1bGVzX18iLCJjcmVhdGVFbGVtZW50IiwiYXBwZW5kQ2hpbGQiXSwic291cmNlUm9vdCI6IiJ9